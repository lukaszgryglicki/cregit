0000000000000000000000000000000000000000;;	// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
b5a369483575c99a3598125e51d2fb065a91c6de;Godeps/_workspace/src/github.com/awslabs/aws-sdk-go/service/ec2/api.go[Godeps/_workspace/src/github.com/awslabs/aws-sdk-go/service/ec2/api.go][vendor/github.com/aws/aws-sdk-go/service/ec2/api.go];	
0000000000000000000000000000000000000000;;	// Package ec2 provides a client for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	package ec2
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/awsutil"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/request"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/private/protocol"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/private/protocol/ec2query"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opAcceptReservedInstancesExchangeQuote = "AcceptReservedInstancesExchangeQuote"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AcceptReservedInstancesExchangeQuoteRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the AcceptReservedInstancesExchangeQuote operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See AcceptReservedInstancesExchangeQuote for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the AcceptReservedInstancesExchangeQuote method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the AcceptReservedInstancesExchangeQuoteRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.AcceptReservedInstancesExchangeQuoteRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AcceptReservedInstancesExchangeQuote
0000000000000000000000000000000000000000;;	func (c *EC2) AcceptReservedInstancesExchangeQuoteRequest(input *AcceptReservedInstancesExchangeQuoteInput) (req *request.Request, output *AcceptReservedInstancesExchangeQuoteOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opAcceptReservedInstancesExchangeQuote,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &AcceptReservedInstancesExchangeQuoteInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &AcceptReservedInstancesExchangeQuoteOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AcceptReservedInstancesExchangeQuote API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Accepts the Convertible Reserved Instance exchange quote described in the
0000000000000000000000000000000000000000;;	// GetReservedInstancesExchangeQuote call.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation AcceptReservedInstancesExchangeQuote for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AcceptReservedInstancesExchangeQuote
0000000000000000000000000000000000000000;;	func (c *EC2) AcceptReservedInstancesExchangeQuote(input *AcceptReservedInstancesExchangeQuoteInput) (*AcceptReservedInstancesExchangeQuoteOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.AcceptReservedInstancesExchangeQuoteRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opAcceptVpcPeeringConnection = "AcceptVpcPeeringConnection"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AcceptVpcPeeringConnectionRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the AcceptVpcPeeringConnection operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See AcceptVpcPeeringConnection for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the AcceptVpcPeeringConnection method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the AcceptVpcPeeringConnectionRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.AcceptVpcPeeringConnectionRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AcceptVpcPeeringConnection
0000000000000000000000000000000000000000;;	func (c *EC2) AcceptVpcPeeringConnectionRequest(input *AcceptVpcPeeringConnectionInput) (req *request.Request, output *AcceptVpcPeeringConnectionOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opAcceptVpcPeeringConnection,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &AcceptVpcPeeringConnectionInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &AcceptVpcPeeringConnectionOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AcceptVpcPeeringConnection API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Accept a VPC peering connection request. To accept a request, the VPC peering
0000000000000000000000000000000000000000;;	// connection must be in the pending-acceptance state, and you must be the owner
0000000000000000000000000000000000000000;;	// of the peer VPC. Use the DescribeVpcPeeringConnections request to view your
0000000000000000000000000000000000000000;;	// outstanding VPC peering connection requests.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation AcceptVpcPeeringConnection for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AcceptVpcPeeringConnection
0000000000000000000000000000000000000000;;	func (c *EC2) AcceptVpcPeeringConnection(input *AcceptVpcPeeringConnectionInput) (*AcceptVpcPeeringConnectionOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.AcceptVpcPeeringConnectionRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opAllocateAddress = "AllocateAddress"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AllocateAddressRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the AllocateAddress operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See AllocateAddress for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the AllocateAddress method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the AllocateAddressRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.AllocateAddressRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AllocateAddress
0000000000000000000000000000000000000000;;	func (c *EC2) AllocateAddressRequest(input *AllocateAddressInput) (req *request.Request, output *AllocateAddressOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opAllocateAddress,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &AllocateAddressInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &AllocateAddressOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AllocateAddress API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Acquires an Elastic IP address.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// An Elastic IP address is for use either in the EC2-Classic platform or in
0000000000000000000000000000000000000000;;	// a VPC. For more information, see Elastic IP Addresses (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation AllocateAddress for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AllocateAddress
0000000000000000000000000000000000000000;;	func (c *EC2) AllocateAddress(input *AllocateAddressInput) (*AllocateAddressOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.AllocateAddressRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opAllocateHosts = "AllocateHosts"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AllocateHostsRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the AllocateHosts operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See AllocateHosts for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the AllocateHosts method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the AllocateHostsRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.AllocateHostsRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AllocateHosts
0000000000000000000000000000000000000000;;	func (c *EC2) AllocateHostsRequest(input *AllocateHostsInput) (req *request.Request, output *AllocateHostsOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opAllocateHosts,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &AllocateHostsInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &AllocateHostsOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AllocateHosts API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Allocates a Dedicated Host to your account. At minimum you need to specify
0000000000000000000000000000000000000000;;	// the instance size type, Availability Zone, and quantity of hosts you want
0000000000000000000000000000000000000000;;	// to allocate.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation AllocateHosts for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AllocateHosts
0000000000000000000000000000000000000000;;	func (c *EC2) AllocateHosts(input *AllocateHostsInput) (*AllocateHostsOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.AllocateHostsRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opAssignIpv6Addresses = "AssignIpv6Addresses"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AssignIpv6AddressesRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the AssignIpv6Addresses operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See AssignIpv6Addresses for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the AssignIpv6Addresses method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the AssignIpv6AddressesRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.AssignIpv6AddressesRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AssignIpv6Addresses
0000000000000000000000000000000000000000;;	func (c *EC2) AssignIpv6AddressesRequest(input *AssignIpv6AddressesInput) (req *request.Request, output *AssignIpv6AddressesOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opAssignIpv6Addresses,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &AssignIpv6AddressesInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &AssignIpv6AddressesOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AssignIpv6Addresses API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Assigns one or more IPv6 addresses to the specified network interface. You
0000000000000000000000000000000000000000;;	// can specify one or more specific IPv6 addresses, or you can specify the number
0000000000000000000000000000000000000000;;	// of IPv6 addresses to be automatically assigned from within the subnet's IPv6
0000000000000000000000000000000000000000;;	// CIDR block range. You can assign as many IPv6 addresses to a network interface
0000000000000000000000000000000000000000;;	// as you can assign private IPv4 addresses, and the limit varies per instance
0000000000000000000000000000000000000000;;	// type. For information, see IP Addresses Per Network Interface Per Instance
0000000000000000000000000000000000000000;;	// Type (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation AssignIpv6Addresses for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AssignIpv6Addresses
0000000000000000000000000000000000000000;;	func (c *EC2) AssignIpv6Addresses(input *AssignIpv6AddressesInput) (*AssignIpv6AddressesOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.AssignIpv6AddressesRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opAssignPrivateIpAddresses = "AssignPrivateIpAddresses"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AssignPrivateIpAddressesRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the AssignPrivateIpAddresses operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See AssignPrivateIpAddresses for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the AssignPrivateIpAddresses method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the AssignPrivateIpAddressesRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.AssignPrivateIpAddressesRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AssignPrivateIpAddresses
0000000000000000000000000000000000000000;;	func (c *EC2) AssignPrivateIpAddressesRequest(input *AssignPrivateIpAddressesInput) (req *request.Request, output *AssignPrivateIpAddressesOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opAssignPrivateIpAddresses,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &AssignPrivateIpAddressesInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &AssignPrivateIpAddressesOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AssignPrivateIpAddresses API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Assigns one or more secondary private IP addresses to the specified network
0000000000000000000000000000000000000000;;	// interface. You can specify one or more specific secondary IP addresses, or
0000000000000000000000000000000000000000;;	// you can specify the number of secondary IP addresses to be automatically
0000000000000000000000000000000000000000;;	// assigned within the subnet's CIDR block range. The number of secondary IP
0000000000000000000000000000000000000000;;	// addresses that you can assign to an instance varies by instance type. For
0000000000000000000000000000000000000000;;	// information about instance types, see Instance Types (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide. For more information about
0000000000000000000000000000000000000000;;	// Elastic IP addresses, see Elastic IP Addresses (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// AssignPrivateIpAddresses is available only in EC2-VPC.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation AssignPrivateIpAddresses for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AssignPrivateIpAddresses
0000000000000000000000000000000000000000;;	func (c *EC2) AssignPrivateIpAddresses(input *AssignPrivateIpAddressesInput) (*AssignPrivateIpAddressesOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.AssignPrivateIpAddressesRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opAssociateAddress = "AssociateAddress"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AssociateAddressRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the AssociateAddress operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See AssociateAddress for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the AssociateAddress method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the AssociateAddressRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.AssociateAddressRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AssociateAddress
0000000000000000000000000000000000000000;;	func (c *EC2) AssociateAddressRequest(input *AssociateAddressInput) (req *request.Request, output *AssociateAddressOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opAssociateAddress,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &AssociateAddressInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &AssociateAddressOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AssociateAddress API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Associates an Elastic IP address with an instance or a network interface.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// An Elastic IP address is for use in either the EC2-Classic platform or in
0000000000000000000000000000000000000000;;	// a VPC. For more information, see Elastic IP Addresses (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// [EC2-Classic, VPC in an EC2-VPC-only account] If the Elastic IP address is
0000000000000000000000000000000000000000;;	// already associated with a different instance, it is disassociated from that
0000000000000000000000000000000000000000;;	// instance and associated with the specified instance.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// [VPC in an EC2-Classic account] If you don't specify a private IP address,
0000000000000000000000000000000000000000;;	// the Elastic IP address is associated with the primary IP address. If the
0000000000000000000000000000000000000000;;	// Elastic IP address is already associated with a different instance or a network
0000000000000000000000000000000000000000;;	// interface, you get an error unless you allow reassociation.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This is an idempotent operation. If you perform the operation more than once,
0000000000000000000000000000000000000000;;	// Amazon EC2 doesn't return an error, and you may be charged for each time
0000000000000000000000000000000000000000;;	// the Elastic IP address is remapped to the same instance. For more information,
0000000000000000000000000000000000000000;;	// see the Elastic IP Addresses section of Amazon EC2 Pricing (http://aws.amazon.com/ec2/pricing/).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation AssociateAddress for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AssociateAddress
0000000000000000000000000000000000000000;;	func (c *EC2) AssociateAddress(input *AssociateAddressInput) (*AssociateAddressOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.AssociateAddressRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opAssociateDhcpOptions = "AssociateDhcpOptions"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AssociateDhcpOptionsRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the AssociateDhcpOptions operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See AssociateDhcpOptions for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the AssociateDhcpOptions method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the AssociateDhcpOptionsRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.AssociateDhcpOptionsRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AssociateDhcpOptions
0000000000000000000000000000000000000000;;	func (c *EC2) AssociateDhcpOptionsRequest(input *AssociateDhcpOptionsInput) (req *request.Request, output *AssociateDhcpOptionsOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opAssociateDhcpOptions,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &AssociateDhcpOptionsInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &AssociateDhcpOptionsOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AssociateDhcpOptions API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Associates a set of DHCP options (that you've previously created) with the
0000000000000000000000000000000000000000;;	// specified VPC, or associates no DHCP options with the VPC.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// After you associate the options with the VPC, any existing instances and
0000000000000000000000000000000000000000;;	// all new instances that you launch in that VPC use the options. You don't
0000000000000000000000000000000000000000;;	// need to restart or relaunch the instances. They automatically pick up the
0000000000000000000000000000000000000000;;	// changes within a few hours, depending on how frequently the instance renews
0000000000000000000000000000000000000000;;	// its DHCP lease. You can explicitly renew the lease using the operating system
0000000000000000000000000000000000000000;;	// on the instance.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information, see DHCP Options Sets (http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_DHCP_Options.html)
0000000000000000000000000000000000000000;;	// in the Amazon Virtual Private Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation AssociateDhcpOptions for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AssociateDhcpOptions
0000000000000000000000000000000000000000;;	func (c *EC2) AssociateDhcpOptions(input *AssociateDhcpOptionsInput) (*AssociateDhcpOptionsOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.AssociateDhcpOptionsRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opAssociateRouteTable = "AssociateRouteTable"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AssociateRouteTableRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the AssociateRouteTable operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See AssociateRouteTable for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the AssociateRouteTable method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the AssociateRouteTableRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.AssociateRouteTableRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AssociateRouteTable
0000000000000000000000000000000000000000;;	func (c *EC2) AssociateRouteTableRequest(input *AssociateRouteTableInput) (req *request.Request, output *AssociateRouteTableOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opAssociateRouteTable,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &AssociateRouteTableInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &AssociateRouteTableOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AssociateRouteTable API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Associates a subnet with a route table. The subnet and route table must be
0000000000000000000000000000000000000000;;	// in the same VPC. This association causes traffic originating from the subnet
0000000000000000000000000000000000000000;;	// to be routed according to the routes in the route table. The action returns
0000000000000000000000000000000000000000;;	// an association ID, which you need in order to disassociate the route table
0000000000000000000000000000000000000000;;	// from the subnet later. A route table can be associated with multiple subnets.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information about route tables, see Route Tables (http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Route_Tables.html)
0000000000000000000000000000000000000000;;	// in the Amazon Virtual Private Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation AssociateRouteTable for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AssociateRouteTable
0000000000000000000000000000000000000000;;	func (c *EC2) AssociateRouteTable(input *AssociateRouteTableInput) (*AssociateRouteTableOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.AssociateRouteTableRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opAssociateSubnetCidrBlock = "AssociateSubnetCidrBlock"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AssociateSubnetCidrBlockRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the AssociateSubnetCidrBlock operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See AssociateSubnetCidrBlock for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the AssociateSubnetCidrBlock method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the AssociateSubnetCidrBlockRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.AssociateSubnetCidrBlockRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AssociateSubnetCidrBlock
0000000000000000000000000000000000000000;;	func (c *EC2) AssociateSubnetCidrBlockRequest(input *AssociateSubnetCidrBlockInput) (req *request.Request, output *AssociateSubnetCidrBlockOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opAssociateSubnetCidrBlock,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &AssociateSubnetCidrBlockInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &AssociateSubnetCidrBlockOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AssociateSubnetCidrBlock API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Associates a CIDR block with your subnet. You can only associate a single
0000000000000000000000000000000000000000;;	// IPv6 CIDR block with your subnet. An IPv6 CIDR block must have a prefix length
0000000000000000000000000000000000000000;;	// of /64.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation AssociateSubnetCidrBlock for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AssociateSubnetCidrBlock
0000000000000000000000000000000000000000;;	func (c *EC2) AssociateSubnetCidrBlock(input *AssociateSubnetCidrBlockInput) (*AssociateSubnetCidrBlockOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.AssociateSubnetCidrBlockRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opAssociateVpcCidrBlock = "AssociateVpcCidrBlock"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AssociateVpcCidrBlockRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the AssociateVpcCidrBlock operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See AssociateVpcCidrBlock for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the AssociateVpcCidrBlock method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the AssociateVpcCidrBlockRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.AssociateVpcCidrBlockRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AssociateVpcCidrBlock
0000000000000000000000000000000000000000;;	func (c *EC2) AssociateVpcCidrBlockRequest(input *AssociateVpcCidrBlockInput) (req *request.Request, output *AssociateVpcCidrBlockOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opAssociateVpcCidrBlock,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &AssociateVpcCidrBlockInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &AssociateVpcCidrBlockOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AssociateVpcCidrBlock API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Associates a CIDR block with your VPC. You can only associate a single Amazon-provided
0000000000000000000000000000000000000000;;	// IPv6 CIDR block with your VPC. The IPv6 CIDR block size is fixed at /56.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation AssociateVpcCidrBlock for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AssociateVpcCidrBlock
0000000000000000000000000000000000000000;;	func (c *EC2) AssociateVpcCidrBlock(input *AssociateVpcCidrBlockInput) (*AssociateVpcCidrBlockOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.AssociateVpcCidrBlockRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opAttachClassicLinkVpc = "AttachClassicLinkVpc"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AttachClassicLinkVpcRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the AttachClassicLinkVpc operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See AttachClassicLinkVpc for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the AttachClassicLinkVpc method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the AttachClassicLinkVpcRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.AttachClassicLinkVpcRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AttachClassicLinkVpc
0000000000000000000000000000000000000000;;	func (c *EC2) AttachClassicLinkVpcRequest(input *AttachClassicLinkVpcInput) (req *request.Request, output *AttachClassicLinkVpcOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opAttachClassicLinkVpc,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &AttachClassicLinkVpcInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &AttachClassicLinkVpcOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AttachClassicLinkVpc API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Links an EC2-Classic instance to a ClassicLink-enabled VPC through one or
0000000000000000000000000000000000000000;;	// more of the VPC's security groups. You cannot link an EC2-Classic instance
0000000000000000000000000000000000000000;;	// to more than one VPC at a time. You can only link an instance that's in the
0000000000000000000000000000000000000000;;	// running state. An instance is automatically unlinked from a VPC when it's
0000000000000000000000000000000000000000;;	// stopped - you can link it to the VPC again when you restart it.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// After you've linked an instance, you cannot change the VPC security groups
0000000000000000000000000000000000000000;;	// that are associated with it. To change the security groups, you must first
0000000000000000000000000000000000000000;;	// unlink the instance, and then link it again.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Linking your instance to a VPC is sometimes referred to as attaching your
0000000000000000000000000000000000000000;;	// instance.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation AttachClassicLinkVpc for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AttachClassicLinkVpc
0000000000000000000000000000000000000000;;	func (c *EC2) AttachClassicLinkVpc(input *AttachClassicLinkVpcInput) (*AttachClassicLinkVpcOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.AttachClassicLinkVpcRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opAttachInternetGateway = "AttachInternetGateway"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AttachInternetGatewayRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the AttachInternetGateway operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See AttachInternetGateway for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the AttachInternetGateway method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the AttachInternetGatewayRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.AttachInternetGatewayRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AttachInternetGateway
0000000000000000000000000000000000000000;;	func (c *EC2) AttachInternetGatewayRequest(input *AttachInternetGatewayInput) (req *request.Request, output *AttachInternetGatewayOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opAttachInternetGateway,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &AttachInternetGatewayInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &AttachInternetGatewayOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AttachInternetGateway API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Attaches an Internet gateway to a VPC, enabling connectivity between the
0000000000000000000000000000000000000000;;	// Internet and the VPC. For more information about your VPC and Internet gateway,
0000000000000000000000000000000000000000;;	// see the Amazon Virtual Private Cloud User Guide (http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation AttachInternetGateway for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AttachInternetGateway
0000000000000000000000000000000000000000;;	func (c *EC2) AttachInternetGateway(input *AttachInternetGatewayInput) (*AttachInternetGatewayOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.AttachInternetGatewayRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opAttachNetworkInterface = "AttachNetworkInterface"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AttachNetworkInterfaceRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the AttachNetworkInterface operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See AttachNetworkInterface for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the AttachNetworkInterface method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the AttachNetworkInterfaceRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.AttachNetworkInterfaceRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AttachNetworkInterface
0000000000000000000000000000000000000000;;	func (c *EC2) AttachNetworkInterfaceRequest(input *AttachNetworkInterfaceInput) (req *request.Request, output *AttachNetworkInterfaceOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opAttachNetworkInterface,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &AttachNetworkInterfaceInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &AttachNetworkInterfaceOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AttachNetworkInterface API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Attaches a network interface to an instance.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation AttachNetworkInterface for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AttachNetworkInterface
0000000000000000000000000000000000000000;;	func (c *EC2) AttachNetworkInterface(input *AttachNetworkInterfaceInput) (*AttachNetworkInterfaceOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.AttachNetworkInterfaceRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opAttachVolume = "AttachVolume"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AttachVolumeRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the AttachVolume operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See AttachVolume for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the AttachVolume method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the AttachVolumeRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.AttachVolumeRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AttachVolume
0000000000000000000000000000000000000000;;	func (c *EC2) AttachVolumeRequest(input *AttachVolumeInput) (req *request.Request, output *VolumeAttachment) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opAttachVolume,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &AttachVolumeInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &VolumeAttachment{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AttachVolume API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Attaches an EBS volume to a running or stopped instance and exposes it to
0000000000000000000000000000000000000000;;	// the instance with the specified device name.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Encrypted EBS volumes may only be attached to instances that support Amazon
0000000000000000000000000000000000000000;;	// EBS encryption. For more information, see Amazon EBS Encryption (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For a list of supported device names, see Attaching an EBS Volume to an Instance
0000000000000000000000000000000000000000;;	// (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-attaching-volume.html).
0000000000000000000000000000000000000000;;	// Any device names that aren't reserved for instance store volumes can be used
0000000000000000000000000000000000000000;;	// for EBS volumes. For more information, see Amazon EC2 Instance Store (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If a volume has an AWS Marketplace product code:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * The volume can be attached only to a stopped instance.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * AWS Marketplace product codes are copied from the volume to the instance.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * You must be subscribed to the product.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * The instance type and operating system of the instance must support
0000000000000000000000000000000000000000;;	//    the product. For example, you can't detach a volume from a Windows instance
0000000000000000000000000000000000000000;;	//    and attach it to a Linux instance.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For an overview of the AWS Marketplace, see Introducing AWS Marketplace (https://aws.amazon.com/marketplace/help/200900000).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information about EBS volumes, see Attaching Amazon EBS Volumes
0000000000000000000000000000000000000000;;	// (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-attaching-volume.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation AttachVolume for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AttachVolume
0000000000000000000000000000000000000000;;	func (c *EC2) AttachVolume(input *AttachVolumeInput) (*VolumeAttachment, error) {
0000000000000000000000000000000000000000;;		req, out := c.AttachVolumeRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opAttachVpnGateway = "AttachVpnGateway"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AttachVpnGatewayRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the AttachVpnGateway operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See AttachVpnGateway for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the AttachVpnGateway method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the AttachVpnGatewayRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.AttachVpnGatewayRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AttachVpnGateway
0000000000000000000000000000000000000000;;	func (c *EC2) AttachVpnGatewayRequest(input *AttachVpnGatewayInput) (req *request.Request, output *AttachVpnGatewayOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opAttachVpnGateway,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &AttachVpnGatewayInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &AttachVpnGatewayOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AttachVpnGateway API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Attaches a virtual private gateway to a VPC. For more information, see Adding
0000000000000000000000000000000000000000;;	// a Hardware Virtual Private Gateway to Your VPC (http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_VPN.html)
0000000000000000000000000000000000000000;;	// in the Amazon Virtual Private Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation AttachVpnGateway for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AttachVpnGateway
0000000000000000000000000000000000000000;;	func (c *EC2) AttachVpnGateway(input *AttachVpnGatewayInput) (*AttachVpnGatewayOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.AttachVpnGatewayRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opAuthorizeSecurityGroupEgress = "AuthorizeSecurityGroupEgress"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthorizeSecurityGroupEgressRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the AuthorizeSecurityGroupEgress operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See AuthorizeSecurityGroupEgress for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the AuthorizeSecurityGroupEgress method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the AuthorizeSecurityGroupEgressRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.AuthorizeSecurityGroupEgressRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AuthorizeSecurityGroupEgress
0000000000000000000000000000000000000000;;	func (c *EC2) AuthorizeSecurityGroupEgressRequest(input *AuthorizeSecurityGroupEgressInput) (req *request.Request, output *AuthorizeSecurityGroupEgressOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opAuthorizeSecurityGroupEgress,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &AuthorizeSecurityGroupEgressInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &AuthorizeSecurityGroupEgressOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthorizeSecurityGroupEgress API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// [EC2-VPC only] Adds one or more egress rules to a security group for use
0000000000000000000000000000000000000000;;	// with a VPC. Specifically, this action permits instances to send traffic to
0000000000000000000000000000000000000000;;	// one or more destination IPv4 or IPv6 CIDR address ranges, or to one or more
0000000000000000000000000000000000000000;;	// destination security groups for the same VPC. This action doesn't apply to
0000000000000000000000000000000000000000;;	// security groups for use in EC2-Classic. For more information, see Security
0000000000000000000000000000000000000000;;	// Groups for Your VPC (http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html)
0000000000000000000000000000000000000000;;	// in the Amazon Virtual Private Cloud User Guide. For more information about
0000000000000000000000000000000000000000;;	// security group limits, see Amazon VPC Limits (http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Appendix_Limits.html).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Each rule consists of the protocol (for example, TCP), plus either a CIDR
0000000000000000000000000000000000000000;;	// range or a source group. For the TCP and UDP protocols, you must also specify
0000000000000000000000000000000000000000;;	// the destination port or port range. For the ICMP protocol, you must also
0000000000000000000000000000000000000000;;	// specify the ICMP type and code. You can use -1 for the type or code to mean
0000000000000000000000000000000000000000;;	// all types or all codes.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Rule changes are propagated to affected instances as quickly as possible.
0000000000000000000000000000000000000000;;	// However, a small delay might occur.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation AuthorizeSecurityGroupEgress for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AuthorizeSecurityGroupEgress
0000000000000000000000000000000000000000;;	func (c *EC2) AuthorizeSecurityGroupEgress(input *AuthorizeSecurityGroupEgressInput) (*AuthorizeSecurityGroupEgressOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.AuthorizeSecurityGroupEgressRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opAuthorizeSecurityGroupIngress = "AuthorizeSecurityGroupIngress"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthorizeSecurityGroupIngressRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the AuthorizeSecurityGroupIngress operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See AuthorizeSecurityGroupIngress for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the AuthorizeSecurityGroupIngress method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the AuthorizeSecurityGroupIngressRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.AuthorizeSecurityGroupIngressRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AuthorizeSecurityGroupIngress
0000000000000000000000000000000000000000;;	func (c *EC2) AuthorizeSecurityGroupIngressRequest(input *AuthorizeSecurityGroupIngressInput) (req *request.Request, output *AuthorizeSecurityGroupIngressOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opAuthorizeSecurityGroupIngress,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &AuthorizeSecurityGroupIngressInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &AuthorizeSecurityGroupIngressOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthorizeSecurityGroupIngress API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Adds one or more ingress rules to a security group.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Rule changes are propagated to instances within the security group as quickly
0000000000000000000000000000000000000000;;	// as possible. However, a small delay might occur.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// [EC2-Classic] This action gives one or more IPv4 CIDR address ranges permission
0000000000000000000000000000000000000000;;	// to access a security group in your account, or gives one or more security
0000000000000000000000000000000000000000;;	// groups (called the source groups) permission to access a security group for
0000000000000000000000000000000000000000;;	// your account. A source group can be for your own AWS account, or another.
0000000000000000000000000000000000000000;;	// You can have up to 100 rules per group.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// [EC2-VPC] This action gives one or more IPv4 or IPv6 CIDR address ranges
0000000000000000000000000000000000000000;;	// permission to access a security group in your VPC, or gives one or more other
0000000000000000000000000000000000000000;;	// security groups (called the source groups) permission to access a security
0000000000000000000000000000000000000000;;	// group for your VPC. The security groups must all be for the same VPC or a
0000000000000000000000000000000000000000;;	// peer VPC in a VPC peering connection. For more information about VPC security
0000000000000000000000000000000000000000;;	// group limits, see Amazon VPC Limits (http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Appendix_Limits.html).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation AuthorizeSecurityGroupIngress for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AuthorizeSecurityGroupIngress
0000000000000000000000000000000000000000;;	func (c *EC2) AuthorizeSecurityGroupIngress(input *AuthorizeSecurityGroupIngressInput) (*AuthorizeSecurityGroupIngressOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.AuthorizeSecurityGroupIngressRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opBundleInstance = "BundleInstance"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BundleInstanceRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the BundleInstance operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See BundleInstance for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the BundleInstance method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the BundleInstanceRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.BundleInstanceRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/BundleInstance
0000000000000000000000000000000000000000;;	func (c *EC2) BundleInstanceRequest(input *BundleInstanceInput) (req *request.Request, output *BundleInstanceOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opBundleInstance,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &BundleInstanceInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &BundleInstanceOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BundleInstance API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Bundles an Amazon instance store-backed Windows instance.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// During bundling, only the root device volume (C:\) is bundled. Data on other
0000000000000000000000000000000000000000;;	// instance store volumes is not preserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This action is not applicable for Linux/Unix instances or Windows instances
0000000000000000000000000000000000000000;;	// that are backed by Amazon EBS.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information, see Creating an Instance Store-Backed Windows AMI (http://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/Creating_InstanceStoreBacked_WinAMI.html).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation BundleInstance for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/BundleInstance
0000000000000000000000000000000000000000;;	func (c *EC2) BundleInstance(input *BundleInstanceInput) (*BundleInstanceOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.BundleInstanceRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opCancelBundleTask = "CancelBundleTask"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CancelBundleTaskRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the CancelBundleTask operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See CancelBundleTask for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the CancelBundleTask method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the CancelBundleTaskRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.CancelBundleTaskRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CancelBundleTask
0000000000000000000000000000000000000000;;	func (c *EC2) CancelBundleTaskRequest(input *CancelBundleTaskInput) (req *request.Request, output *CancelBundleTaskOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opCancelBundleTask,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &CancelBundleTaskInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &CancelBundleTaskOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CancelBundleTask API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Cancels a bundling operation for an instance store-backed Windows instance.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation CancelBundleTask for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CancelBundleTask
0000000000000000000000000000000000000000;;	func (c *EC2) CancelBundleTask(input *CancelBundleTaskInput) (*CancelBundleTaskOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.CancelBundleTaskRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opCancelConversionTask = "CancelConversionTask"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CancelConversionTaskRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the CancelConversionTask operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See CancelConversionTask for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the CancelConversionTask method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the CancelConversionTaskRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.CancelConversionTaskRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CancelConversionTask
0000000000000000000000000000000000000000;;	func (c *EC2) CancelConversionTaskRequest(input *CancelConversionTaskInput) (req *request.Request, output *CancelConversionTaskOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opCancelConversionTask,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &CancelConversionTaskInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &CancelConversionTaskOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CancelConversionTask API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Cancels an active conversion task. The task can be the import of an instance
0000000000000000000000000000000000000000;;	// or volume. The action removes all artifacts of the conversion, including
0000000000000000000000000000000000000000;;	// a partially uploaded volume or instance. If the conversion is complete or
0000000000000000000000000000000000000000;;	// is in the process of transferring the final disk image, the command fails
0000000000000000000000000000000000000000;;	// and returns an exception.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information, see Importing a Virtual Machine Using the Amazon EC2
0000000000000000000000000000000000000000;;	// CLI (http://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/ec2-cli-vmimport-export.html).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation CancelConversionTask for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CancelConversionTask
0000000000000000000000000000000000000000;;	func (c *EC2) CancelConversionTask(input *CancelConversionTaskInput) (*CancelConversionTaskOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.CancelConversionTaskRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opCancelExportTask = "CancelExportTask"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CancelExportTaskRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the CancelExportTask operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See CancelExportTask for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the CancelExportTask method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the CancelExportTaskRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.CancelExportTaskRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CancelExportTask
0000000000000000000000000000000000000000;;	func (c *EC2) CancelExportTaskRequest(input *CancelExportTaskInput) (req *request.Request, output *CancelExportTaskOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opCancelExportTask,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &CancelExportTaskInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &CancelExportTaskOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CancelExportTask API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Cancels an active export task. The request removes all artifacts of the export,
0000000000000000000000000000000000000000;;	// including any partially-created Amazon S3 objects. If the export task is
0000000000000000000000000000000000000000;;	// complete or is in the process of transferring the final disk image, the command
0000000000000000000000000000000000000000;;	// fails and returns an error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation CancelExportTask for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CancelExportTask
0000000000000000000000000000000000000000;;	func (c *EC2) CancelExportTask(input *CancelExportTaskInput) (*CancelExportTaskOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.CancelExportTaskRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opCancelImportTask = "CancelImportTask"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CancelImportTaskRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the CancelImportTask operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See CancelImportTask for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the CancelImportTask method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the CancelImportTaskRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.CancelImportTaskRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CancelImportTask
0000000000000000000000000000000000000000;;	func (c *EC2) CancelImportTaskRequest(input *CancelImportTaskInput) (req *request.Request, output *CancelImportTaskOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opCancelImportTask,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &CancelImportTaskInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &CancelImportTaskOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CancelImportTask API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Cancels an in-process import virtual machine or import snapshot task.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation CancelImportTask for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CancelImportTask
0000000000000000000000000000000000000000;;	func (c *EC2) CancelImportTask(input *CancelImportTaskInput) (*CancelImportTaskOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.CancelImportTaskRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opCancelReservedInstancesListing = "CancelReservedInstancesListing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CancelReservedInstancesListingRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the CancelReservedInstancesListing operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See CancelReservedInstancesListing for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the CancelReservedInstancesListing method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the CancelReservedInstancesListingRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.CancelReservedInstancesListingRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CancelReservedInstancesListing
0000000000000000000000000000000000000000;;	func (c *EC2) CancelReservedInstancesListingRequest(input *CancelReservedInstancesListingInput) (req *request.Request, output *CancelReservedInstancesListingOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opCancelReservedInstancesListing,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &CancelReservedInstancesListingInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &CancelReservedInstancesListingOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CancelReservedInstancesListing API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Cancels the specified Reserved Instance listing in the Reserved Instance
0000000000000000000000000000000000000000;;	// Marketplace.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information, see Reserved Instance Marketplace (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation CancelReservedInstancesListing for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CancelReservedInstancesListing
0000000000000000000000000000000000000000;;	func (c *EC2) CancelReservedInstancesListing(input *CancelReservedInstancesListingInput) (*CancelReservedInstancesListingOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.CancelReservedInstancesListingRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opCancelSpotFleetRequests = "CancelSpotFleetRequests"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CancelSpotFleetRequestsRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the CancelSpotFleetRequests operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See CancelSpotFleetRequests for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the CancelSpotFleetRequests method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the CancelSpotFleetRequestsRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.CancelSpotFleetRequestsRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CancelSpotFleetRequests
0000000000000000000000000000000000000000;;	func (c *EC2) CancelSpotFleetRequestsRequest(input *CancelSpotFleetRequestsInput) (req *request.Request, output *CancelSpotFleetRequestsOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opCancelSpotFleetRequests,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &CancelSpotFleetRequestsInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &CancelSpotFleetRequestsOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CancelSpotFleetRequests API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Cancels the specified Spot fleet requests.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// After you cancel a Spot fleet request, the Spot fleet launches no new Spot
0000000000000000000000000000000000000000;;	// instances. You must specify whether the Spot fleet should also terminate
0000000000000000000000000000000000000000;;	// its Spot instances. If you terminate the instances, the Spot fleet request
0000000000000000000000000000000000000000;;	// enters the cancelled_terminating state. Otherwise, the Spot fleet request
0000000000000000000000000000000000000000;;	// enters the cancelled_running state and the instances continue to run until
0000000000000000000000000000000000000000;;	// they are interrupted or you terminate them manually.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation CancelSpotFleetRequests for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CancelSpotFleetRequests
0000000000000000000000000000000000000000;;	func (c *EC2) CancelSpotFleetRequests(input *CancelSpotFleetRequestsInput) (*CancelSpotFleetRequestsOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.CancelSpotFleetRequestsRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opCancelSpotInstanceRequests = "CancelSpotInstanceRequests"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CancelSpotInstanceRequestsRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the CancelSpotInstanceRequests operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See CancelSpotInstanceRequests for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the CancelSpotInstanceRequests method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the CancelSpotInstanceRequestsRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.CancelSpotInstanceRequestsRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CancelSpotInstanceRequests
0000000000000000000000000000000000000000;;	func (c *EC2) CancelSpotInstanceRequestsRequest(input *CancelSpotInstanceRequestsInput) (req *request.Request, output *CancelSpotInstanceRequestsOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opCancelSpotInstanceRequests,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &CancelSpotInstanceRequestsInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &CancelSpotInstanceRequestsOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CancelSpotInstanceRequests API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Cancels one or more Spot instance requests. Spot instances are instances
0000000000000000000000000000000000000000;;	// that Amazon EC2 starts on your behalf when the bid price that you specify
0000000000000000000000000000000000000000;;	// exceeds the current Spot price. Amazon EC2 periodically sets the Spot price
0000000000000000000000000000000000000000;;	// based on available Spot instance capacity and current Spot instance requests.
0000000000000000000000000000000000000000;;	// For more information, see Spot Instance Requests (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-requests.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Canceling a Spot instance request does not terminate running Spot instances
0000000000000000000000000000000000000000;;	// associated with the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation CancelSpotInstanceRequests for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CancelSpotInstanceRequests
0000000000000000000000000000000000000000;;	func (c *EC2) CancelSpotInstanceRequests(input *CancelSpotInstanceRequestsInput) (*CancelSpotInstanceRequestsOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.CancelSpotInstanceRequestsRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opConfirmProductInstance = "ConfirmProductInstance"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ConfirmProductInstanceRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ConfirmProductInstance operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ConfirmProductInstance for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ConfirmProductInstance method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ConfirmProductInstanceRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ConfirmProductInstanceRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ConfirmProductInstance
0000000000000000000000000000000000000000;;	func (c *EC2) ConfirmProductInstanceRequest(input *ConfirmProductInstanceInput) (req *request.Request, output *ConfirmProductInstanceOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opConfirmProductInstance,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ConfirmProductInstanceInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ConfirmProductInstanceOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ConfirmProductInstance API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Determines whether a product code is associated with an instance. This action
0000000000000000000000000000000000000000;;	// can only be used by the owner of the product code. It is useful when a product
0000000000000000000000000000000000000000;;	// code owner needs to verify whether another user's instance is eligible for
0000000000000000000000000000000000000000;;	// support.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation ConfirmProductInstance for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ConfirmProductInstance
0000000000000000000000000000000000000000;;	func (c *EC2) ConfirmProductInstance(input *ConfirmProductInstanceInput) (*ConfirmProductInstanceOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ConfirmProductInstanceRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opCopyImage = "CopyImage"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CopyImageRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the CopyImage operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See CopyImage for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the CopyImage method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the CopyImageRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.CopyImageRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CopyImage
0000000000000000000000000000000000000000;;	func (c *EC2) CopyImageRequest(input *CopyImageInput) (req *request.Request, output *CopyImageOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opCopyImage,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &CopyImageInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &CopyImageOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CopyImage API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Initiates the copy of an AMI from the specified source region to the current
0000000000000000000000000000000000000000;;	// region. You specify the destination region by using its endpoint when making
0000000000000000000000000000000000000000;;	// the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information, see Copying AMIs (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/CopyingAMIs.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation CopyImage for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CopyImage
0000000000000000000000000000000000000000;;	func (c *EC2) CopyImage(input *CopyImageInput) (*CopyImageOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.CopyImageRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opCopySnapshot = "CopySnapshot"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CopySnapshotRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the CopySnapshot operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See CopySnapshot for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the CopySnapshot method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the CopySnapshotRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.CopySnapshotRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CopySnapshot
0000000000000000000000000000000000000000;;	func (c *EC2) CopySnapshotRequest(input *CopySnapshotInput) (req *request.Request, output *CopySnapshotOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opCopySnapshot,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &CopySnapshotInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &CopySnapshotOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CopySnapshot API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Copies a point-in-time snapshot of an EBS volume and stores it in Amazon
0000000000000000000000000000000000000000;;	// S3. You can copy the snapshot within the same region or from one region to
0000000000000000000000000000000000000000;;	// another. You can use the snapshot to create EBS volumes or Amazon Machine
0000000000000000000000000000000000000000;;	// Images (AMIs). The snapshot is copied to the regional endpoint that you send
0000000000000000000000000000000000000000;;	// the HTTP request to.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Copies of encrypted EBS snapshots remain encrypted. Copies of unencrypted
0000000000000000000000000000000000000000;;	// snapshots remain unencrypted, unless the Encrypted flag is specified during
0000000000000000000000000000000000000000;;	// the snapshot copy operation. By default, encrypted snapshot copies use the
0000000000000000000000000000000000000000;;	// default AWS Key Management Service (AWS KMS) customer master key (CMK); however,
0000000000000000000000000000000000000000;;	// you can specify a non-default CMK with the KmsKeyId parameter.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// To copy an encrypted snapshot that has been shared from another account,
0000000000000000000000000000000000000000;;	// you must have permissions for the CMK used to encrypt the snapshot.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Snapshots created by the CopySnapshot action have an arbitrary volume ID
0000000000000000000000000000000000000000;;	// that should not be used for any purpose.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information, see Copying an Amazon EBS Snapshot (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-copy-snapshot.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation CopySnapshot for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CopySnapshot
0000000000000000000000000000000000000000;;	func (c *EC2) CopySnapshot(input *CopySnapshotInput) (*CopySnapshotOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.CopySnapshotRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opCreateCustomerGateway = "CreateCustomerGateway"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateCustomerGatewayRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the CreateCustomerGateway operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See CreateCustomerGateway for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the CreateCustomerGateway method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the CreateCustomerGatewayRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.CreateCustomerGatewayRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateCustomerGateway
0000000000000000000000000000000000000000;;	func (c *EC2) CreateCustomerGatewayRequest(input *CreateCustomerGatewayInput) (req *request.Request, output *CreateCustomerGatewayOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opCreateCustomerGateway,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &CreateCustomerGatewayInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &CreateCustomerGatewayOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateCustomerGateway API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Provides information to AWS about your VPN customer gateway device. The customer
0000000000000000000000000000000000000000;;	// gateway is the appliance at your end of the VPN connection. (The device on
0000000000000000000000000000000000000000;;	// the AWS side of the VPN connection is the virtual private gateway.) You must
0000000000000000000000000000000000000000;;	// provide the Internet-routable IP address of the customer gateway's external
0000000000000000000000000000000000000000;;	// interface. The IP address must be static and may be behind a device performing
0000000000000000000000000000000000000000;;	// network address translation (NAT).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For devices that use Border Gateway Protocol (BGP), you can also provide
0000000000000000000000000000000000000000;;	// the device's BGP Autonomous System Number (ASN). You can use an existing
0000000000000000000000000000000000000000;;	// ASN assigned to your network. If you don't have an ASN already, you can use
0000000000000000000000000000000000000000;;	// a private ASN (in the 64512 - 65534 range).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Amazon EC2 supports all 2-byte ASN numbers in the range of 1 - 65534, with
0000000000000000000000000000000000000000;;	// the exception of 7224, which is reserved in the us-east-1 region, and 9059,
0000000000000000000000000000000000000000;;	// which is reserved in the eu-west-1 region.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information about VPN customer gateways, see Adding a Hardware Virtual
0000000000000000000000000000000000000000;;	// Private Gateway to Your VPC (http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_VPN.html)
0000000000000000000000000000000000000000;;	// in the Amazon Virtual Private Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// You cannot create more than one customer gateway with the same VPN type,
0000000000000000000000000000000000000000;;	// IP address, and BGP ASN parameter values. If you run an identical request
0000000000000000000000000000000000000000;;	// more than one time, the first request creates the customer gateway, and subsequent
0000000000000000000000000000000000000000;;	// requests return information about the existing customer gateway. The subsequent
0000000000000000000000000000000000000000;;	// requests do not create new customer gateway resources.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation CreateCustomerGateway for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateCustomerGateway
0000000000000000000000000000000000000000;;	func (c *EC2) CreateCustomerGateway(input *CreateCustomerGatewayInput) (*CreateCustomerGatewayOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.CreateCustomerGatewayRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opCreateDhcpOptions = "CreateDhcpOptions"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateDhcpOptionsRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the CreateDhcpOptions operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See CreateDhcpOptions for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the CreateDhcpOptions method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the CreateDhcpOptionsRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.CreateDhcpOptionsRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateDhcpOptions
0000000000000000000000000000000000000000;;	func (c *EC2) CreateDhcpOptionsRequest(input *CreateDhcpOptionsInput) (req *request.Request, output *CreateDhcpOptionsOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opCreateDhcpOptions,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &CreateDhcpOptionsInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &CreateDhcpOptionsOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateDhcpOptions API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creates a set of DHCP options for your VPC. After creating the set, you must
0000000000000000000000000000000000000000;;	// associate it with the VPC, causing all existing and new instances that you
0000000000000000000000000000000000000000;;	// launch in the VPC to use this set of DHCP options. The following are the
0000000000000000000000000000000000000000;;	// individual DHCP options you can specify. For more information about the options,
0000000000000000000000000000000000000000;;	// see RFC 2132 (http://www.ietf.org/rfc/rfc2132.txt).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * domain-name-servers - The IP addresses of up to four domain name servers,
0000000000000000000000000000000000000000;;	//    or AmazonProvidedDNS. The default DHCP option set specifies AmazonProvidedDNS.
0000000000000000000000000000000000000000;;	//    If specifying more than one domain name server, specify the IP addresses
0000000000000000000000000000000000000000;;	//    in a single parameter, separated by commas. If you want your instance
0000000000000000000000000000000000000000;;	//    to receive a custom DNS hostname as specified in domain-name, you must
0000000000000000000000000000000000000000;;	//    set domain-name-servers to a custom DNS server.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * domain-name - If you're using AmazonProvidedDNS in "us-east-1", specify
0000000000000000000000000000000000000000;;	//    "ec2.internal". If you're using AmazonProvidedDNS in another region, specify
0000000000000000000000000000000000000000;;	//    "region.compute.internal" (for example, "ap-northeast-1.compute.internal").
0000000000000000000000000000000000000000;;	//    Otherwise, specify a domain name (for example, "MyCompany.com"). This
0000000000000000000000000000000000000000;;	//    value is used to complete unqualified DNS hostnames. Important: Some Linux
0000000000000000000000000000000000000000;;	//    operating systems accept multiple domain names separated by spaces. However,
0000000000000000000000000000000000000000;;	//    Windows and other Linux operating systems treat the value as a single
0000000000000000000000000000000000000000;;	//    domain, which results in unexpected behavior. If your DHCP options set
0000000000000000000000000000000000000000;;	//    is associated with a VPC that has instances with multiple operating systems,
0000000000000000000000000000000000000000;;	//    specify only one domain name.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * ntp-servers - The IP addresses of up to four Network Time Protocol (NTP)
0000000000000000000000000000000000000000;;	//    servers.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * netbios-name-servers - The IP addresses of up to four NetBIOS name servers.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * netbios-node-type - The NetBIOS node type (1, 2, 4, or 8). We recommend
0000000000000000000000000000000000000000;;	//    that you specify 2 (broadcast and multicast are not currently supported).
0000000000000000000000000000000000000000;;	//    For more information about these node types, see RFC 2132 (http://www.ietf.org/rfc/rfc2132.txt).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Your VPC automatically starts out with a set of DHCP options that includes
0000000000000000000000000000000000000000;;	// only a DNS server that we provide (AmazonProvidedDNS). If you create a set
0000000000000000000000000000000000000000;;	// of options, and if your VPC has an Internet gateway, make sure to set the
0000000000000000000000000000000000000000;;	// domain-name-servers option either to AmazonProvidedDNS or to a domain name
0000000000000000000000000000000000000000;;	// server of your choice. For more information about DHCP options, see DHCP
0000000000000000000000000000000000000000;;	// Options Sets (http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_DHCP_Options.html)
0000000000000000000000000000000000000000;;	// in the Amazon Virtual Private Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation CreateDhcpOptions for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateDhcpOptions
0000000000000000000000000000000000000000;;	func (c *EC2) CreateDhcpOptions(input *CreateDhcpOptionsInput) (*CreateDhcpOptionsOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.CreateDhcpOptionsRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opCreateEgressOnlyInternetGateway = "CreateEgressOnlyInternetGateway"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateEgressOnlyInternetGatewayRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the CreateEgressOnlyInternetGateway operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See CreateEgressOnlyInternetGateway for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the CreateEgressOnlyInternetGateway method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the CreateEgressOnlyInternetGatewayRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.CreateEgressOnlyInternetGatewayRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateEgressOnlyInternetGateway
0000000000000000000000000000000000000000;;	func (c *EC2) CreateEgressOnlyInternetGatewayRequest(input *CreateEgressOnlyInternetGatewayInput) (req *request.Request, output *CreateEgressOnlyInternetGatewayOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opCreateEgressOnlyInternetGateway,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &CreateEgressOnlyInternetGatewayInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &CreateEgressOnlyInternetGatewayOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateEgressOnlyInternetGateway API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// [IPv6 only] Creates an egress-only Internet gateway for your VPC. An egress-only
0000000000000000000000000000000000000000;;	// Internet gateway is used to enable outbound communication over IPv6 from
0000000000000000000000000000000000000000;;	// instances in your VPC to the Internet, and prevents hosts outside of your
0000000000000000000000000000000000000000;;	// VPC from initiating an IPv6 connection with your instance.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation CreateEgressOnlyInternetGateway for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateEgressOnlyInternetGateway
0000000000000000000000000000000000000000;;	func (c *EC2) CreateEgressOnlyInternetGateway(input *CreateEgressOnlyInternetGatewayInput) (*CreateEgressOnlyInternetGatewayOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.CreateEgressOnlyInternetGatewayRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opCreateFlowLogs = "CreateFlowLogs"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateFlowLogsRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the CreateFlowLogs operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See CreateFlowLogs for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the CreateFlowLogs method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the CreateFlowLogsRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.CreateFlowLogsRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateFlowLogs
0000000000000000000000000000000000000000;;	func (c *EC2) CreateFlowLogsRequest(input *CreateFlowLogsInput) (req *request.Request, output *CreateFlowLogsOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opCreateFlowLogs,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &CreateFlowLogsInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &CreateFlowLogsOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateFlowLogs API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creates one or more flow logs to capture IP traffic for a specific network
0000000000000000000000000000000000000000;;	// interface, subnet, or VPC. Flow logs are delivered to a specified log group
0000000000000000000000000000000000000000;;	// in Amazon CloudWatch Logs. If you specify a VPC or subnet in the request,
0000000000000000000000000000000000000000;;	// a log stream is created in CloudWatch Logs for each network interface in
0000000000000000000000000000000000000000;;	// the subnet or VPC. Log streams can include information about accepted and
0000000000000000000000000000000000000000;;	// rejected traffic to a network interface. You can view the data in your log
0000000000000000000000000000000000000000;;	// streams using Amazon CloudWatch Logs.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// In your request, you must also specify an IAM role that has permission to
0000000000000000000000000000000000000000;;	// publish logs to CloudWatch Logs.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation CreateFlowLogs for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateFlowLogs
0000000000000000000000000000000000000000;;	func (c *EC2) CreateFlowLogs(input *CreateFlowLogsInput) (*CreateFlowLogsOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.CreateFlowLogsRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opCreateImage = "CreateImage"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateImageRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the CreateImage operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See CreateImage for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the CreateImage method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the CreateImageRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.CreateImageRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateImage
0000000000000000000000000000000000000000;;	func (c *EC2) CreateImageRequest(input *CreateImageInput) (req *request.Request, output *CreateImageOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opCreateImage,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &CreateImageInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &CreateImageOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateImage API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creates an Amazon EBS-backed AMI from an Amazon EBS-backed instance that
0000000000000000000000000000000000000000;;	// is either running or stopped.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If you customized your instance with instance store volumes or EBS volumes
0000000000000000000000000000000000000000;;	// in addition to the root device volume, the new AMI contains block device
0000000000000000000000000000000000000000;;	// mapping information for those volumes. When you launch an instance from this
0000000000000000000000000000000000000000;;	// new AMI, the instance automatically launches with those additional volumes.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information, see Creating Amazon EBS-Backed Linux AMIs (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami-ebs.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation CreateImage for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateImage
0000000000000000000000000000000000000000;;	func (c *EC2) CreateImage(input *CreateImageInput) (*CreateImageOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.CreateImageRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opCreateInstanceExportTask = "CreateInstanceExportTask"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateInstanceExportTaskRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the CreateInstanceExportTask operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See CreateInstanceExportTask for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the CreateInstanceExportTask method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the CreateInstanceExportTaskRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.CreateInstanceExportTaskRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateInstanceExportTask
0000000000000000000000000000000000000000;;	func (c *EC2) CreateInstanceExportTaskRequest(input *CreateInstanceExportTaskInput) (req *request.Request, output *CreateInstanceExportTaskOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opCreateInstanceExportTask,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &CreateInstanceExportTaskInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &CreateInstanceExportTaskOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateInstanceExportTask API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Exports a running or stopped instance to an S3 bucket.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For information about the supported operating systems, image formats, and
0000000000000000000000000000000000000000;;	// known limitations for the types of instances you can export, see Exporting
0000000000000000000000000000000000000000;;	// an Instance as a VM Using VM Import/Export (http://docs.aws.amazon.com/vm-import/latest/userguide/vmexport.html)
0000000000000000000000000000000000000000;;	// in the VM Import/Export User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation CreateInstanceExportTask for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateInstanceExportTask
0000000000000000000000000000000000000000;;	func (c *EC2) CreateInstanceExportTask(input *CreateInstanceExportTaskInput) (*CreateInstanceExportTaskOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.CreateInstanceExportTaskRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opCreateInternetGateway = "CreateInternetGateway"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateInternetGatewayRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the CreateInternetGateway operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See CreateInternetGateway for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the CreateInternetGateway method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the CreateInternetGatewayRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.CreateInternetGatewayRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateInternetGateway
0000000000000000000000000000000000000000;;	func (c *EC2) CreateInternetGatewayRequest(input *CreateInternetGatewayInput) (req *request.Request, output *CreateInternetGatewayOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opCreateInternetGateway,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &CreateInternetGatewayInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &CreateInternetGatewayOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateInternetGateway API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creates an Internet gateway for use with a VPC. After creating the Internet
0000000000000000000000000000000000000000;;	// gateway, you attach it to a VPC using AttachInternetGateway.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information about your VPC and Internet gateway, see the Amazon
0000000000000000000000000000000000000000;;	// Virtual Private Cloud User Guide (http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation CreateInternetGateway for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateInternetGateway
0000000000000000000000000000000000000000;;	func (c *EC2) CreateInternetGateway(input *CreateInternetGatewayInput) (*CreateInternetGatewayOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.CreateInternetGatewayRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opCreateKeyPair = "CreateKeyPair"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateKeyPairRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the CreateKeyPair operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See CreateKeyPair for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the CreateKeyPair method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the CreateKeyPairRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.CreateKeyPairRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateKeyPair
0000000000000000000000000000000000000000;;	func (c *EC2) CreateKeyPairRequest(input *CreateKeyPairInput) (req *request.Request, output *CreateKeyPairOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opCreateKeyPair,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &CreateKeyPairInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &CreateKeyPairOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateKeyPair API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creates a 2048-bit RSA key pair with the specified name. Amazon EC2 stores
0000000000000000000000000000000000000000;;	// the public key and displays the private key for you to save to a file. The
0000000000000000000000000000000000000000;;	// private key is returned as an unencrypted PEM encoded PKCS#8 private key.
0000000000000000000000000000000000000000;;	// If a key with the specified name already exists, Amazon EC2 returns an error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// You can have up to five thousand key pairs per region.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The key pair returned to you is available only in the region in which you
0000000000000000000000000000000000000000;;	// create it. To create a key pair that is available in all regions, use ImportKeyPair.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information about key pairs, see Key Pairs (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation CreateKeyPair for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateKeyPair
0000000000000000000000000000000000000000;;	func (c *EC2) CreateKeyPair(input *CreateKeyPairInput) (*CreateKeyPairOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.CreateKeyPairRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opCreateNatGateway = "CreateNatGateway"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateNatGatewayRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the CreateNatGateway operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See CreateNatGateway for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the CreateNatGateway method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the CreateNatGatewayRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.CreateNatGatewayRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateNatGateway
0000000000000000000000000000000000000000;;	func (c *EC2) CreateNatGatewayRequest(input *CreateNatGatewayInput) (req *request.Request, output *CreateNatGatewayOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opCreateNatGateway,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &CreateNatGatewayInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &CreateNatGatewayOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateNatGateway API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creates a NAT gateway in the specified subnet. A NAT gateway can be used
0000000000000000000000000000000000000000;;	// to enable instances in a private subnet to connect to the Internet. This
0000000000000000000000000000000000000000;;	// action creates a network interface in the specified subnet with a private
0000000000000000000000000000000000000000;;	// IP address from the IP address range of the subnet. For more information,
0000000000000000000000000000000000000000;;	// see NAT Gateways (http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-gateway.html)
0000000000000000000000000000000000000000;;	// in the Amazon Virtual Private Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation CreateNatGateway for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateNatGateway
0000000000000000000000000000000000000000;;	func (c *EC2) CreateNatGateway(input *CreateNatGatewayInput) (*CreateNatGatewayOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.CreateNatGatewayRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opCreateNetworkAcl = "CreateNetworkAcl"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateNetworkAclRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the CreateNetworkAcl operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See CreateNetworkAcl for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the CreateNetworkAcl method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the CreateNetworkAclRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.CreateNetworkAclRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateNetworkAcl
0000000000000000000000000000000000000000;;	func (c *EC2) CreateNetworkAclRequest(input *CreateNetworkAclInput) (req *request.Request, output *CreateNetworkAclOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opCreateNetworkAcl,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &CreateNetworkAclInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &CreateNetworkAclOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateNetworkAcl API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creates a network ACL in a VPC. Network ACLs provide an optional layer of
0000000000000000000000000000000000000000;;	// security (in addition to security groups) for the instances in your VPC.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information about network ACLs, see Network ACLs (http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_ACLs.html)
0000000000000000000000000000000000000000;;	// in the Amazon Virtual Private Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation CreateNetworkAcl for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateNetworkAcl
0000000000000000000000000000000000000000;;	func (c *EC2) CreateNetworkAcl(input *CreateNetworkAclInput) (*CreateNetworkAclOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.CreateNetworkAclRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opCreateNetworkAclEntry = "CreateNetworkAclEntry"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateNetworkAclEntryRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the CreateNetworkAclEntry operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See CreateNetworkAclEntry for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the CreateNetworkAclEntry method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the CreateNetworkAclEntryRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.CreateNetworkAclEntryRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateNetworkAclEntry
0000000000000000000000000000000000000000;;	func (c *EC2) CreateNetworkAclEntryRequest(input *CreateNetworkAclEntryInput) (req *request.Request, output *CreateNetworkAclEntryOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opCreateNetworkAclEntry,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &CreateNetworkAclEntryInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &CreateNetworkAclEntryOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateNetworkAclEntry API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creates an entry (a rule) in a network ACL with the specified rule number.
0000000000000000000000000000000000000000;;	// Each network ACL has a set of numbered ingress rules and a separate set of
0000000000000000000000000000000000000000;;	// numbered egress rules. When determining whether a packet should be allowed
0000000000000000000000000000000000000000;;	// in or out of a subnet associated with the ACL, we process the entries in
0000000000000000000000000000000000000000;;	// the ACL according to the rule numbers, in ascending order. Each network ACL
0000000000000000000000000000000000000000;;	// has a set of ingress rules and a separate set of egress rules.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// We recommend that you leave room between the rule numbers (for example, 100,
0000000000000000000000000000000000000000;;	// 110, 120, ...), and not number them one right after the other (for example,
0000000000000000000000000000000000000000;;	// 101, 102, 103, ...). This makes it easier to add a rule between existing
0000000000000000000000000000000000000000;;	// ones without having to renumber the rules.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// After you add an entry, you can't modify it; you must either replace it,
0000000000000000000000000000000000000000;;	// or create an entry and delete the old one.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information about network ACLs, see Network ACLs (http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_ACLs.html)
0000000000000000000000000000000000000000;;	// in the Amazon Virtual Private Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation CreateNetworkAclEntry for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateNetworkAclEntry
0000000000000000000000000000000000000000;;	func (c *EC2) CreateNetworkAclEntry(input *CreateNetworkAclEntryInput) (*CreateNetworkAclEntryOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.CreateNetworkAclEntryRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opCreateNetworkInterface = "CreateNetworkInterface"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateNetworkInterfaceRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the CreateNetworkInterface operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See CreateNetworkInterface for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the CreateNetworkInterface method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the CreateNetworkInterfaceRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.CreateNetworkInterfaceRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateNetworkInterface
0000000000000000000000000000000000000000;;	func (c *EC2) CreateNetworkInterfaceRequest(input *CreateNetworkInterfaceInput) (req *request.Request, output *CreateNetworkInterfaceOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opCreateNetworkInterface,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &CreateNetworkInterfaceInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &CreateNetworkInterfaceOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateNetworkInterface API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creates a network interface in the specified subnet.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information about network interfaces, see Elastic Network Interfaces
0000000000000000000000000000000000000000;;	// (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html) in the
0000000000000000000000000000000000000000;;	// Amazon Virtual Private Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation CreateNetworkInterface for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateNetworkInterface
0000000000000000000000000000000000000000;;	func (c *EC2) CreateNetworkInterface(input *CreateNetworkInterfaceInput) (*CreateNetworkInterfaceOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.CreateNetworkInterfaceRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opCreatePlacementGroup = "CreatePlacementGroup"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreatePlacementGroupRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the CreatePlacementGroup operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See CreatePlacementGroup for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the CreatePlacementGroup method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the CreatePlacementGroupRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.CreatePlacementGroupRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreatePlacementGroup
0000000000000000000000000000000000000000;;	func (c *EC2) CreatePlacementGroupRequest(input *CreatePlacementGroupInput) (req *request.Request, output *CreatePlacementGroupOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opCreatePlacementGroup,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &CreatePlacementGroupInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &CreatePlacementGroupOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreatePlacementGroup API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creates a placement group that you launch cluster instances into. You must
0000000000000000000000000000000000000000;;	// give the group a name that's unique within the scope of your account.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information about placement groups and cluster instances, see Cluster
0000000000000000000000000000000000000000;;	// Instances (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using_cluster_computing.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation CreatePlacementGroup for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreatePlacementGroup
0000000000000000000000000000000000000000;;	func (c *EC2) CreatePlacementGroup(input *CreatePlacementGroupInput) (*CreatePlacementGroupOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.CreatePlacementGroupRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opCreateReservedInstancesListing = "CreateReservedInstancesListing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateReservedInstancesListingRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the CreateReservedInstancesListing operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See CreateReservedInstancesListing for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the CreateReservedInstancesListing method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the CreateReservedInstancesListingRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.CreateReservedInstancesListingRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateReservedInstancesListing
0000000000000000000000000000000000000000;;	func (c *EC2) CreateReservedInstancesListingRequest(input *CreateReservedInstancesListingInput) (req *request.Request, output *CreateReservedInstancesListingOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opCreateReservedInstancesListing,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &CreateReservedInstancesListingInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &CreateReservedInstancesListingOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateReservedInstancesListing API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creates a listing for Amazon EC2 Standard Reserved Instances to be sold in
0000000000000000000000000000000000000000;;	// the Reserved Instance Marketplace. You can submit one Standard Reserved Instance
0000000000000000000000000000000000000000;;	// listing at a time. To get a list of your Standard Reserved Instances, you
0000000000000000000000000000000000000000;;	// can use the DescribeReservedInstances operation.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The Reserved Instance Marketplace matches sellers who want to resell Standard
0000000000000000000000000000000000000000;;	// Reserved Instance capacity that they no longer need with buyers who want
0000000000000000000000000000000000000000;;	// to purchase additional capacity. Reserved Instances bought and sold through
0000000000000000000000000000000000000000;;	// the Reserved Instance Marketplace work like any other Reserved Instances.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// To sell your Standard Reserved Instances, you must first register as a seller
0000000000000000000000000000000000000000;;	// in the Reserved Instance Marketplace. After completing the registration process,
0000000000000000000000000000000000000000;;	// you can create a Reserved Instance Marketplace listing of some or all of
0000000000000000000000000000000000000000;;	// your Standard Reserved Instances, and specify the upfront price to receive
0000000000000000000000000000000000000000;;	// for them. Your Standard Reserved Instance listings then become available
0000000000000000000000000000000000000000;;	// for purchase. To view the details of your Standard Reserved Instance listing,
0000000000000000000000000000000000000000;;	// you can use the DescribeReservedInstancesListings operation.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information, see Reserved Instance Marketplace (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation CreateReservedInstancesListing for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateReservedInstancesListing
0000000000000000000000000000000000000000;;	func (c *EC2) CreateReservedInstancesListing(input *CreateReservedInstancesListingInput) (*CreateReservedInstancesListingOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.CreateReservedInstancesListingRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opCreateRoute = "CreateRoute"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateRouteRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the CreateRoute operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See CreateRoute for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the CreateRoute method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the CreateRouteRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.CreateRouteRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateRoute
0000000000000000000000000000000000000000;;	func (c *EC2) CreateRouteRequest(input *CreateRouteInput) (req *request.Request, output *CreateRouteOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opCreateRoute,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &CreateRouteInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &CreateRouteOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateRoute API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creates a route in a route table within a VPC.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// You must specify one of the following targets: Internet gateway or virtual
0000000000000000000000000000000000000000;;	// private gateway, NAT instance, NAT gateway, VPC peering connection, network
0000000000000000000000000000000000000000;;	// interface, or egress-only Internet gateway.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// When determining how to route traffic, we use the route with the most specific
0000000000000000000000000000000000000000;;	// match. For example, traffic is destined for the IPv4 address 192.0.2.3, and
0000000000000000000000000000000000000000;;	// the route table includes the following two IPv4 routes:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * 192.0.2.0/24 (goes to some target A)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * 192.0.2.0/28 (goes to some target B)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Both routes apply to the traffic destined for 192.0.2.3. However, the second
0000000000000000000000000000000000000000;;	// route in the list covers a smaller number of IP addresses and is therefore
0000000000000000000000000000000000000000;;	// more specific, so we use that route to determine where to target the traffic.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information about route tables, see Route Tables (http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Route_Tables.html)
0000000000000000000000000000000000000000;;	// in the Amazon Virtual Private Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation CreateRoute for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateRoute
0000000000000000000000000000000000000000;;	func (c *EC2) CreateRoute(input *CreateRouteInput) (*CreateRouteOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.CreateRouteRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opCreateRouteTable = "CreateRouteTable"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateRouteTableRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the CreateRouteTable operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See CreateRouteTable for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the CreateRouteTable method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the CreateRouteTableRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.CreateRouteTableRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateRouteTable
0000000000000000000000000000000000000000;;	func (c *EC2) CreateRouteTableRequest(input *CreateRouteTableInput) (req *request.Request, output *CreateRouteTableOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opCreateRouteTable,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &CreateRouteTableInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &CreateRouteTableOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateRouteTable API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creates a route table for the specified VPC. After you create a route table,
0000000000000000000000000000000000000000;;	// you can add routes and associate the table with a subnet.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information about route tables, see Route Tables (http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Route_Tables.html)
0000000000000000000000000000000000000000;;	// in the Amazon Virtual Private Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation CreateRouteTable for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateRouteTable
0000000000000000000000000000000000000000;;	func (c *EC2) CreateRouteTable(input *CreateRouteTableInput) (*CreateRouteTableOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.CreateRouteTableRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opCreateSecurityGroup = "CreateSecurityGroup"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateSecurityGroupRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the CreateSecurityGroup operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See CreateSecurityGroup for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the CreateSecurityGroup method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the CreateSecurityGroupRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.CreateSecurityGroupRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateSecurityGroup
0000000000000000000000000000000000000000;;	func (c *EC2) CreateSecurityGroupRequest(input *CreateSecurityGroupInput) (req *request.Request, output *CreateSecurityGroupOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opCreateSecurityGroup,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &CreateSecurityGroupInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &CreateSecurityGroupOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateSecurityGroup API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creates a security group.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// A security group is for use with instances either in the EC2-Classic platform
0000000000000000000000000000000000000000;;	// or in a specific VPC. For more information, see Amazon EC2 Security Groups
0000000000000000000000000000000000000000;;	// (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide and Security Groups for Your
0000000000000000000000000000000000000000;;	// VPC (http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html)
0000000000000000000000000000000000000000;;	// in the Amazon Virtual Private Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// EC2-Classic: You can have up to 500 security groups.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// EC2-VPC: You can create up to 500 security groups per VPC.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// When you create a security group, you specify a friendly name of your choice.
0000000000000000000000000000000000000000;;	// You can have a security group for use in EC2-Classic with the same name as
0000000000000000000000000000000000000000;;	// a security group for use in a VPC. However, you can't have two security groups
0000000000000000000000000000000000000000;;	// for use in EC2-Classic with the same name or two security groups for use
0000000000000000000000000000000000000000;;	// in a VPC with the same name.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// You have a default security group for use in EC2-Classic and a default security
0000000000000000000000000000000000000000;;	// group for use in your VPC. If you don't specify a security group when you
0000000000000000000000000000000000000000;;	// launch an instance, the instance is launched into the appropriate default
0000000000000000000000000000000000000000;;	// security group. A default security group includes a default rule that grants
0000000000000000000000000000000000000000;;	// instances unrestricted network access to each other.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// You can add or remove rules from your security groups using AuthorizeSecurityGroupIngress,
0000000000000000000000000000000000000000;;	// AuthorizeSecurityGroupEgress, RevokeSecurityGroupIngress, and RevokeSecurityGroupEgress.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation CreateSecurityGroup for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateSecurityGroup
0000000000000000000000000000000000000000;;	func (c *EC2) CreateSecurityGroup(input *CreateSecurityGroupInput) (*CreateSecurityGroupOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.CreateSecurityGroupRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opCreateSnapshot = "CreateSnapshot"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateSnapshotRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the CreateSnapshot operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See CreateSnapshot for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the CreateSnapshot method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the CreateSnapshotRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.CreateSnapshotRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateSnapshot
0000000000000000000000000000000000000000;;	func (c *EC2) CreateSnapshotRequest(input *CreateSnapshotInput) (req *request.Request, output *Snapshot) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opCreateSnapshot,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &CreateSnapshotInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &Snapshot{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateSnapshot API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creates a snapshot of an EBS volume and stores it in Amazon S3. You can use
0000000000000000000000000000000000000000;;	// snapshots for backups, to make copies of EBS volumes, and to save data before
0000000000000000000000000000000000000000;;	// shutting down an instance.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// When a snapshot is created, any AWS Marketplace product codes that are associated
0000000000000000000000000000000000000000;;	// with the source volume are propagated to the snapshot.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// You can take a snapshot of an attached volume that is in use. However, snapshots
0000000000000000000000000000000000000000;;	// only capture data that has been written to your EBS volume at the time the
0000000000000000000000000000000000000000;;	// snapshot command is issued; this may exclude any data that has been cached
0000000000000000000000000000000000000000;;	// by any applications or the operating system. If you can pause any file systems
0000000000000000000000000000000000000000;;	// on the volume long enough to take a snapshot, your snapshot should be complete.
0000000000000000000000000000000000000000;;	// However, if you cannot pause all file writes to the volume, you should unmount
0000000000000000000000000000000000000000;;	// the volume from within the instance, issue the snapshot command, and then
0000000000000000000000000000000000000000;;	// remount the volume to ensure a consistent and complete snapshot. You may
0000000000000000000000000000000000000000;;	// remount and use your volume while the snapshot status is pending.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// To create a snapshot for EBS volumes that serve as root devices, you should
0000000000000000000000000000000000000000;;	// stop the instance before taking the snapshot.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Snapshots that are taken from encrypted volumes are automatically encrypted.
0000000000000000000000000000000000000000;;	// Volumes that are created from encrypted snapshots are also automatically
0000000000000000000000000000000000000000;;	// encrypted. Your encrypted volumes and any associated snapshots always remain
0000000000000000000000000000000000000000;;	// protected.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information, see Amazon Elastic Block Store (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AmazonEBS.html)
0000000000000000000000000000000000000000;;	// and Amazon EBS Encryption (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation CreateSnapshot for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateSnapshot
0000000000000000000000000000000000000000;;	func (c *EC2) CreateSnapshot(input *CreateSnapshotInput) (*Snapshot, error) {
0000000000000000000000000000000000000000;;		req, out := c.CreateSnapshotRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opCreateSpotDatafeedSubscription = "CreateSpotDatafeedSubscription"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateSpotDatafeedSubscriptionRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the CreateSpotDatafeedSubscription operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See CreateSpotDatafeedSubscription for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the CreateSpotDatafeedSubscription method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the CreateSpotDatafeedSubscriptionRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.CreateSpotDatafeedSubscriptionRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateSpotDatafeedSubscription
0000000000000000000000000000000000000000;;	func (c *EC2) CreateSpotDatafeedSubscriptionRequest(input *CreateSpotDatafeedSubscriptionInput) (req *request.Request, output *CreateSpotDatafeedSubscriptionOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opCreateSpotDatafeedSubscription,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &CreateSpotDatafeedSubscriptionInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &CreateSpotDatafeedSubscriptionOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateSpotDatafeedSubscription API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creates a data feed for Spot instances, enabling you to view Spot instance
0000000000000000000000000000000000000000;;	// usage logs. You can create one data feed per AWS account. For more information,
0000000000000000000000000000000000000000;;	// see Spot Instance Data Feed (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-data-feeds.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation CreateSpotDatafeedSubscription for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateSpotDatafeedSubscription
0000000000000000000000000000000000000000;;	func (c *EC2) CreateSpotDatafeedSubscription(input *CreateSpotDatafeedSubscriptionInput) (*CreateSpotDatafeedSubscriptionOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.CreateSpotDatafeedSubscriptionRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opCreateSubnet = "CreateSubnet"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateSubnetRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the CreateSubnet operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See CreateSubnet for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the CreateSubnet method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the CreateSubnetRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.CreateSubnetRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateSubnet
0000000000000000000000000000000000000000;;	func (c *EC2) CreateSubnetRequest(input *CreateSubnetInput) (req *request.Request, output *CreateSubnetOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opCreateSubnet,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &CreateSubnetInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &CreateSubnetOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateSubnet API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creates a subnet in an existing VPC.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// When you create each subnet, you provide the VPC ID and the CIDR block you
0000000000000000000000000000000000000000;;	// want for the subnet. After you create a subnet, you can't change its CIDR
0000000000000000000000000000000000000000;;	// block. The subnet's IPv4 CIDR block can be the same as the VPC's IPv4 CIDR
0000000000000000000000000000000000000000;;	// block (assuming you want only a single subnet in the VPC), or a subset of
0000000000000000000000000000000000000000;;	// the VPC's IPv4 CIDR block. If you create more than one subnet in a VPC, the
0000000000000000000000000000000000000000;;	// subnets' CIDR blocks must not overlap. The smallest IPv4 subnet (and VPC)
0000000000000000000000000000000000000000;;	// you can create uses a /28 netmask (16 IPv4 addresses), and the largest uses
0000000000000000000000000000000000000000;;	// a /16 netmask (65,536 IPv4 addresses).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If you've associated an IPv6 CIDR block with your VPC, you can create a subnet
0000000000000000000000000000000000000000;;	// with an IPv6 CIDR block that uses a /64 prefix length.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// AWS reserves both the first four and the last IP address in each subnet's
0000000000000000000000000000000000000000;;	// CIDR block. They're not available for use.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If you add more than one subnet to a VPC, they're set up in a star topology
0000000000000000000000000000000000000000;;	// with a logical router in the middle.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If you launch an instance in a VPC using an Amazon EBS-backed AMI, the IP
0000000000000000000000000000000000000000;;	// address doesn't change if you stop and restart the instance (unlike a similar
0000000000000000000000000000000000000000;;	// instance launched outside a VPC, which gets a new IP address when restarted).
0000000000000000000000000000000000000000;;	// It's therefore possible to have a subnet with no running instances (they're
0000000000000000000000000000000000000000;;	// all stopped), but no remaining IP addresses available.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information about subnets, see Your VPC and Subnets (http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html)
0000000000000000000000000000000000000000;;	// in the Amazon Virtual Private Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation CreateSubnet for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateSubnet
0000000000000000000000000000000000000000;;	func (c *EC2) CreateSubnet(input *CreateSubnetInput) (*CreateSubnetOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.CreateSubnetRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opCreateTags = "CreateTags"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateTagsRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the CreateTags operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See CreateTags for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the CreateTags method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the CreateTagsRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.CreateTagsRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateTags
0000000000000000000000000000000000000000;;	func (c *EC2) CreateTagsRequest(input *CreateTagsInput) (req *request.Request, output *CreateTagsOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opCreateTags,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &CreateTagsInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &CreateTagsOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateTags API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Adds or overwrites one or more tags for the specified Amazon EC2 resource
0000000000000000000000000000000000000000;;	// or resources. Each resource can have a maximum of 50 tags. Each tag consists
0000000000000000000000000000000000000000;;	// of a key and optional value. Tag keys must be unique per resource.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information about tags, see Tagging Your Resources (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide. For more information about
0000000000000000000000000000000000000000;;	// creating IAM policies that control users' access to resources based on tags,
0000000000000000000000000000000000000000;;	// see Supported Resource-Level Permissions for Amazon EC2 API Actions (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-iam-actions-resources.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation CreateTags for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateTags
0000000000000000000000000000000000000000;;	func (c *EC2) CreateTags(input *CreateTagsInput) (*CreateTagsOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.CreateTagsRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opCreateVolume = "CreateVolume"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateVolumeRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the CreateVolume operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See CreateVolume for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the CreateVolume method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the CreateVolumeRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.CreateVolumeRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateVolume
0000000000000000000000000000000000000000;;	func (c *EC2) CreateVolumeRequest(input *CreateVolumeInput) (req *request.Request, output *Volume) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opCreateVolume,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &CreateVolumeInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &Volume{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateVolume API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creates an EBS volume that can be attached to an instance in the same Availability
0000000000000000000000000000000000000000;;	// Zone. The volume is created in the regional endpoint that you send the HTTP
0000000000000000000000000000000000000000;;	// request to. For more information see Regions and Endpoints (http://docs.aws.amazon.com/general/latest/gr/rande.html).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// You can create a new empty volume or restore a volume from an EBS snapshot.
0000000000000000000000000000000000000000;;	// Any AWS Marketplace product codes from the snapshot are propagated to the
0000000000000000000000000000000000000000;;	// volume.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// You can create encrypted volumes with the Encrypted parameter. Encrypted
0000000000000000000000000000000000000000;;	// volumes may only be attached to instances that support Amazon EBS encryption.
0000000000000000000000000000000000000000;;	// Volumes that are created from encrypted snapshots are also automatically
0000000000000000000000000000000000000000;;	// encrypted. For more information, see Amazon EBS Encryption (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information, see Creating or Restoring an Amazon EBS Volume (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-creating-volume.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation CreateVolume for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateVolume
0000000000000000000000000000000000000000;;	func (c *EC2) CreateVolume(input *CreateVolumeInput) (*Volume, error) {
0000000000000000000000000000000000000000;;		req, out := c.CreateVolumeRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opCreateVpc = "CreateVpc"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateVpcRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the CreateVpc operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See CreateVpc for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the CreateVpc method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the CreateVpcRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.CreateVpcRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateVpc
0000000000000000000000000000000000000000;;	func (c *EC2) CreateVpcRequest(input *CreateVpcInput) (req *request.Request, output *CreateVpcOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opCreateVpc,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &CreateVpcInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &CreateVpcOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateVpc API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creates a VPC with the specified IPv4 CIDR block. The smallest VPC you can
0000000000000000000000000000000000000000;;	// create uses a /28 netmask (16 IPv4 addresses), and the largest uses a /16
0000000000000000000000000000000000000000;;	// netmask (65,536 IPv4 addresses). To help you decide how big to make your
0000000000000000000000000000000000000000;;	// VPC, see Your VPC and Subnets (http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html)
0000000000000000000000000000000000000000;;	// in the Amazon Virtual Private Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// You can optionally request an Amazon-provided IPv6 CIDR block for the VPC.
0000000000000000000000000000000000000000;;	// The IPv6 CIDR block uses a /56 prefix length, and is allocated from Amazon's
0000000000000000000000000000000000000000;;	// pool of IPv6 addresses. You cannot choose the IPv6 range for your VPC.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// By default, each instance you launch in the VPC has the default DHCP options,
0000000000000000000000000000000000000000;;	// which includes only a default DNS server that we provide (AmazonProvidedDNS).
0000000000000000000000000000000000000000;;	// For more information about DHCP options, see DHCP Options Sets (http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_DHCP_Options.html)
0000000000000000000000000000000000000000;;	// in the Amazon Virtual Private Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// You can specify the instance tenancy value for the VPC when you create it.
0000000000000000000000000000000000000000;;	// You can't change this value for the VPC after you create it. For more information,
0000000000000000000000000000000000000000;;	// see Dedicated Instances (http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/dedicated-instance.html.html)
0000000000000000000000000000000000000000;;	// in the Amazon Virtual Private Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation CreateVpc for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateVpc
0000000000000000000000000000000000000000;;	func (c *EC2) CreateVpc(input *CreateVpcInput) (*CreateVpcOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.CreateVpcRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opCreateVpcEndpoint = "CreateVpcEndpoint"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateVpcEndpointRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the CreateVpcEndpoint operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See CreateVpcEndpoint for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the CreateVpcEndpoint method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the CreateVpcEndpointRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.CreateVpcEndpointRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateVpcEndpoint
0000000000000000000000000000000000000000;;	func (c *EC2) CreateVpcEndpointRequest(input *CreateVpcEndpointInput) (req *request.Request, output *CreateVpcEndpointOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opCreateVpcEndpoint,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &CreateVpcEndpointInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &CreateVpcEndpointOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateVpcEndpoint API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creates a VPC endpoint for a specified AWS service. An endpoint enables you
0000000000000000000000000000000000000000;;	// to create a private connection between your VPC and another AWS service in
0000000000000000000000000000000000000000;;	// your account. You can specify an endpoint policy to attach to the endpoint
0000000000000000000000000000000000000000;;	// that will control access to the service from your VPC. You can also specify
0000000000000000000000000000000000000000;;	// the VPC route tables that use the endpoint.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Currently, only endpoints to Amazon S3 are supported.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation CreateVpcEndpoint for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateVpcEndpoint
0000000000000000000000000000000000000000;;	func (c *EC2) CreateVpcEndpoint(input *CreateVpcEndpointInput) (*CreateVpcEndpointOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.CreateVpcEndpointRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opCreateVpcPeeringConnection = "CreateVpcPeeringConnection"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateVpcPeeringConnectionRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the CreateVpcPeeringConnection operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See CreateVpcPeeringConnection for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the CreateVpcPeeringConnection method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the CreateVpcPeeringConnectionRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.CreateVpcPeeringConnectionRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateVpcPeeringConnection
0000000000000000000000000000000000000000;;	func (c *EC2) CreateVpcPeeringConnectionRequest(input *CreateVpcPeeringConnectionInput) (req *request.Request, output *CreateVpcPeeringConnectionOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opCreateVpcPeeringConnection,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &CreateVpcPeeringConnectionInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &CreateVpcPeeringConnectionOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateVpcPeeringConnection API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Requests a VPC peering connection between two VPCs: a requester VPC that
0000000000000000000000000000000000000000;;	// you own and a peer VPC with which to create the connection. The peer VPC
0000000000000000000000000000000000000000;;	// can belong to another AWS account. The requester VPC and peer VPC cannot
0000000000000000000000000000000000000000;;	// have overlapping CIDR blocks.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The owner of the peer VPC must accept the peering request to activate the
0000000000000000000000000000000000000000;;	// peering connection. The VPC peering connection request expires after 7 days,
0000000000000000000000000000000000000000;;	// after which it cannot be accepted or rejected.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// A CreateVpcPeeringConnection request between VPCs with overlapping CIDR blocks
0000000000000000000000000000000000000000;;	// results in the VPC peering connection having a status of failed.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation CreateVpcPeeringConnection for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateVpcPeeringConnection
0000000000000000000000000000000000000000;;	func (c *EC2) CreateVpcPeeringConnection(input *CreateVpcPeeringConnectionInput) (*CreateVpcPeeringConnectionOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.CreateVpcPeeringConnectionRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opCreateVpnConnection = "CreateVpnConnection"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateVpnConnectionRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the CreateVpnConnection operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See CreateVpnConnection for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the CreateVpnConnection method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the CreateVpnConnectionRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.CreateVpnConnectionRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateVpnConnection
0000000000000000000000000000000000000000;;	func (c *EC2) CreateVpnConnectionRequest(input *CreateVpnConnectionInput) (req *request.Request, output *CreateVpnConnectionOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opCreateVpnConnection,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &CreateVpnConnectionInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &CreateVpnConnectionOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateVpnConnection API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creates a VPN connection between an existing virtual private gateway and
0000000000000000000000000000000000000000;;	// a VPN customer gateway. The only supported connection type is ipsec.1.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The response includes information that you need to give to your network administrator
0000000000000000000000000000000000000000;;	// to configure your customer gateway.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// We strongly recommend that you use HTTPS when calling this operation because
0000000000000000000000000000000000000000;;	// the response contains sensitive cryptographic information for configuring
0000000000000000000000000000000000000000;;	// your customer gateway.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If you decide to shut down your VPN connection for any reason and later create
0000000000000000000000000000000000000000;;	// a new VPN connection, you must reconfigure your customer gateway with the
0000000000000000000000000000000000000000;;	// new information returned from this call.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This is an idempotent operation. If you perform the operation more than once,
0000000000000000000000000000000000000000;;	// Amazon EC2 doesn't return an error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information about VPN connections, see Adding a Hardware Virtual
0000000000000000000000000000000000000000;;	// Private Gateway to Your VPC (http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_VPN.html)
0000000000000000000000000000000000000000;;	// in the Amazon Virtual Private Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation CreateVpnConnection for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateVpnConnection
0000000000000000000000000000000000000000;;	func (c *EC2) CreateVpnConnection(input *CreateVpnConnectionInput) (*CreateVpnConnectionOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.CreateVpnConnectionRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opCreateVpnConnectionRoute = "CreateVpnConnectionRoute"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateVpnConnectionRouteRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the CreateVpnConnectionRoute operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See CreateVpnConnectionRoute for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the CreateVpnConnectionRoute method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the CreateVpnConnectionRouteRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.CreateVpnConnectionRouteRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateVpnConnectionRoute
0000000000000000000000000000000000000000;;	func (c *EC2) CreateVpnConnectionRouteRequest(input *CreateVpnConnectionRouteInput) (req *request.Request, output *CreateVpnConnectionRouteOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opCreateVpnConnectionRoute,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &CreateVpnConnectionRouteInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &CreateVpnConnectionRouteOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateVpnConnectionRoute API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creates a static route associated with a VPN connection between an existing
0000000000000000000000000000000000000000;;	// virtual private gateway and a VPN customer gateway. The static route allows
0000000000000000000000000000000000000000;;	// traffic to be routed from the virtual private gateway to the VPN customer
0000000000000000000000000000000000000000;;	// gateway.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information about VPN connections, see Adding a Hardware Virtual
0000000000000000000000000000000000000000;;	// Private Gateway to Your VPC (http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_VPN.html)
0000000000000000000000000000000000000000;;	// in the Amazon Virtual Private Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation CreateVpnConnectionRoute for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateVpnConnectionRoute
0000000000000000000000000000000000000000;;	func (c *EC2) CreateVpnConnectionRoute(input *CreateVpnConnectionRouteInput) (*CreateVpnConnectionRouteOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.CreateVpnConnectionRouteRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opCreateVpnGateway = "CreateVpnGateway"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateVpnGatewayRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the CreateVpnGateway operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See CreateVpnGateway for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the CreateVpnGateway method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the CreateVpnGatewayRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.CreateVpnGatewayRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateVpnGateway
0000000000000000000000000000000000000000;;	func (c *EC2) CreateVpnGatewayRequest(input *CreateVpnGatewayInput) (req *request.Request, output *CreateVpnGatewayOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opCreateVpnGateway,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &CreateVpnGatewayInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &CreateVpnGatewayOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateVpnGateway API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creates a virtual private gateway. A virtual private gateway is the endpoint
0000000000000000000000000000000000000000;;	// on the VPC side of your VPN connection. You can create a virtual private
0000000000000000000000000000000000000000;;	// gateway before creating the VPC itself.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information about virtual private gateways, see Adding a Hardware
0000000000000000000000000000000000000000;;	// Virtual Private Gateway to Your VPC (http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_VPN.html)
0000000000000000000000000000000000000000;;	// in the Amazon Virtual Private Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation CreateVpnGateway for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateVpnGateway
0000000000000000000000000000000000000000;;	func (c *EC2) CreateVpnGateway(input *CreateVpnGatewayInput) (*CreateVpnGatewayOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.CreateVpnGatewayRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDeleteCustomerGateway = "DeleteCustomerGateway"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteCustomerGatewayRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DeleteCustomerGateway operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DeleteCustomerGateway for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DeleteCustomerGateway method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DeleteCustomerGatewayRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DeleteCustomerGatewayRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteCustomerGateway
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteCustomerGatewayRequest(input *DeleteCustomerGatewayInput) (req *request.Request, output *DeleteCustomerGatewayOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDeleteCustomerGateway,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DeleteCustomerGatewayInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DeleteCustomerGatewayOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteCustomerGateway API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Deletes the specified customer gateway. You must delete the VPN connection
0000000000000000000000000000000000000000;;	// before you can delete the customer gateway.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DeleteCustomerGateway for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteCustomerGateway
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteCustomerGateway(input *DeleteCustomerGatewayInput) (*DeleteCustomerGatewayOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DeleteCustomerGatewayRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDeleteDhcpOptions = "DeleteDhcpOptions"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteDhcpOptionsRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DeleteDhcpOptions operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DeleteDhcpOptions for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DeleteDhcpOptions method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DeleteDhcpOptionsRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DeleteDhcpOptionsRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteDhcpOptions
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteDhcpOptionsRequest(input *DeleteDhcpOptionsInput) (req *request.Request, output *DeleteDhcpOptionsOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDeleteDhcpOptions,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DeleteDhcpOptionsInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DeleteDhcpOptionsOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteDhcpOptions API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Deletes the specified set of DHCP options. You must disassociate the set
0000000000000000000000000000000000000000;;	// of DHCP options before you can delete it. You can disassociate the set of
0000000000000000000000000000000000000000;;	// DHCP options by associating either a new set of options or the default set
0000000000000000000000000000000000000000;;	// of options with the VPC.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DeleteDhcpOptions for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteDhcpOptions
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteDhcpOptions(input *DeleteDhcpOptionsInput) (*DeleteDhcpOptionsOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DeleteDhcpOptionsRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDeleteEgressOnlyInternetGateway = "DeleteEgressOnlyInternetGateway"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteEgressOnlyInternetGatewayRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DeleteEgressOnlyInternetGateway operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DeleteEgressOnlyInternetGateway for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DeleteEgressOnlyInternetGateway method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DeleteEgressOnlyInternetGatewayRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DeleteEgressOnlyInternetGatewayRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteEgressOnlyInternetGateway
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteEgressOnlyInternetGatewayRequest(input *DeleteEgressOnlyInternetGatewayInput) (req *request.Request, output *DeleteEgressOnlyInternetGatewayOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDeleteEgressOnlyInternetGateway,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DeleteEgressOnlyInternetGatewayInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DeleteEgressOnlyInternetGatewayOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteEgressOnlyInternetGateway API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Deletes an egress-only Internet gateway.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DeleteEgressOnlyInternetGateway for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteEgressOnlyInternetGateway
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteEgressOnlyInternetGateway(input *DeleteEgressOnlyInternetGatewayInput) (*DeleteEgressOnlyInternetGatewayOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DeleteEgressOnlyInternetGatewayRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDeleteFlowLogs = "DeleteFlowLogs"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteFlowLogsRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DeleteFlowLogs operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DeleteFlowLogs for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DeleteFlowLogs method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DeleteFlowLogsRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DeleteFlowLogsRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteFlowLogs
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteFlowLogsRequest(input *DeleteFlowLogsInput) (req *request.Request, output *DeleteFlowLogsOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDeleteFlowLogs,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DeleteFlowLogsInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DeleteFlowLogsOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteFlowLogs API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Deletes one or more flow logs.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DeleteFlowLogs for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteFlowLogs
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteFlowLogs(input *DeleteFlowLogsInput) (*DeleteFlowLogsOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DeleteFlowLogsRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDeleteInternetGateway = "DeleteInternetGateway"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteInternetGatewayRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DeleteInternetGateway operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DeleteInternetGateway for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DeleteInternetGateway method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DeleteInternetGatewayRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DeleteInternetGatewayRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteInternetGateway
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteInternetGatewayRequest(input *DeleteInternetGatewayInput) (req *request.Request, output *DeleteInternetGatewayOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDeleteInternetGateway,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DeleteInternetGatewayInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DeleteInternetGatewayOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteInternetGateway API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Deletes the specified Internet gateway. You must detach the Internet gateway
0000000000000000000000000000000000000000;;	// from the VPC before you can delete it.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DeleteInternetGateway for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteInternetGateway
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteInternetGateway(input *DeleteInternetGatewayInput) (*DeleteInternetGatewayOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DeleteInternetGatewayRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDeleteKeyPair = "DeleteKeyPair"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteKeyPairRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DeleteKeyPair operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DeleteKeyPair for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DeleteKeyPair method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DeleteKeyPairRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DeleteKeyPairRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteKeyPair
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteKeyPairRequest(input *DeleteKeyPairInput) (req *request.Request, output *DeleteKeyPairOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDeleteKeyPair,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DeleteKeyPairInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DeleteKeyPairOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteKeyPair API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Deletes the specified key pair, by removing the public key from Amazon EC2.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DeleteKeyPair for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteKeyPair
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteKeyPair(input *DeleteKeyPairInput) (*DeleteKeyPairOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DeleteKeyPairRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDeleteNatGateway = "DeleteNatGateway"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteNatGatewayRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DeleteNatGateway operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DeleteNatGateway for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DeleteNatGateway method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DeleteNatGatewayRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DeleteNatGatewayRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteNatGateway
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteNatGatewayRequest(input *DeleteNatGatewayInput) (req *request.Request, output *DeleteNatGatewayOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDeleteNatGateway,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DeleteNatGatewayInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DeleteNatGatewayOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteNatGateway API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Deletes the specified NAT gateway. Deleting a NAT gateway disassociates its
0000000000000000000000000000000000000000;;	// Elastic IP address, but does not release the address from your account. Deleting
0000000000000000000000000000000000000000;;	// a NAT gateway does not delete any NAT gateway routes in your route tables.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DeleteNatGateway for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteNatGateway
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteNatGateway(input *DeleteNatGatewayInput) (*DeleteNatGatewayOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DeleteNatGatewayRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDeleteNetworkAcl = "DeleteNetworkAcl"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteNetworkAclRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DeleteNetworkAcl operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DeleteNetworkAcl for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DeleteNetworkAcl method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DeleteNetworkAclRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DeleteNetworkAclRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteNetworkAcl
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteNetworkAclRequest(input *DeleteNetworkAclInput) (req *request.Request, output *DeleteNetworkAclOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDeleteNetworkAcl,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DeleteNetworkAclInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DeleteNetworkAclOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteNetworkAcl API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Deletes the specified network ACL. You can't delete the ACL if it's associated
0000000000000000000000000000000000000000;;	// with any subnets. You can't delete the default network ACL.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DeleteNetworkAcl for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteNetworkAcl
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteNetworkAcl(input *DeleteNetworkAclInput) (*DeleteNetworkAclOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DeleteNetworkAclRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDeleteNetworkAclEntry = "DeleteNetworkAclEntry"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteNetworkAclEntryRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DeleteNetworkAclEntry operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DeleteNetworkAclEntry for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DeleteNetworkAclEntry method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DeleteNetworkAclEntryRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DeleteNetworkAclEntryRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteNetworkAclEntry
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteNetworkAclEntryRequest(input *DeleteNetworkAclEntryInput) (req *request.Request, output *DeleteNetworkAclEntryOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDeleteNetworkAclEntry,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DeleteNetworkAclEntryInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DeleteNetworkAclEntryOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteNetworkAclEntry API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Deletes the specified ingress or egress entry (rule) from the specified network
0000000000000000000000000000000000000000;;	// ACL.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DeleteNetworkAclEntry for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteNetworkAclEntry
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteNetworkAclEntry(input *DeleteNetworkAclEntryInput) (*DeleteNetworkAclEntryOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DeleteNetworkAclEntryRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDeleteNetworkInterface = "DeleteNetworkInterface"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteNetworkInterfaceRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DeleteNetworkInterface operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DeleteNetworkInterface for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DeleteNetworkInterface method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DeleteNetworkInterfaceRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DeleteNetworkInterfaceRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteNetworkInterface
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteNetworkInterfaceRequest(input *DeleteNetworkInterfaceInput) (req *request.Request, output *DeleteNetworkInterfaceOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDeleteNetworkInterface,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DeleteNetworkInterfaceInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DeleteNetworkInterfaceOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteNetworkInterface API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Deletes the specified network interface. You must detach the network interface
0000000000000000000000000000000000000000;;	// before you can delete it.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DeleteNetworkInterface for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteNetworkInterface
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteNetworkInterface(input *DeleteNetworkInterfaceInput) (*DeleteNetworkInterfaceOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DeleteNetworkInterfaceRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDeletePlacementGroup = "DeletePlacementGroup"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeletePlacementGroupRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DeletePlacementGroup operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DeletePlacementGroup for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DeletePlacementGroup method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DeletePlacementGroupRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DeletePlacementGroupRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeletePlacementGroup
0000000000000000000000000000000000000000;;	func (c *EC2) DeletePlacementGroupRequest(input *DeletePlacementGroupInput) (req *request.Request, output *DeletePlacementGroupOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDeletePlacementGroup,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DeletePlacementGroupInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DeletePlacementGroupOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeletePlacementGroup API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Deletes the specified placement group. You must terminate all instances in
0000000000000000000000000000000000000000;;	// the placement group before you can delete the placement group. For more information
0000000000000000000000000000000000000000;;	// about placement groups and cluster instances, see Cluster Instances (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using_cluster_computing.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DeletePlacementGroup for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeletePlacementGroup
0000000000000000000000000000000000000000;;	func (c *EC2) DeletePlacementGroup(input *DeletePlacementGroupInput) (*DeletePlacementGroupOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DeletePlacementGroupRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDeleteRoute = "DeleteRoute"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteRouteRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DeleteRoute operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DeleteRoute for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DeleteRoute method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DeleteRouteRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DeleteRouteRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteRoute
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteRouteRequest(input *DeleteRouteInput) (req *request.Request, output *DeleteRouteOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDeleteRoute,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DeleteRouteInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DeleteRouteOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteRoute API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Deletes the specified route from the specified route table.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DeleteRoute for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteRoute
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteRoute(input *DeleteRouteInput) (*DeleteRouteOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DeleteRouteRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDeleteRouteTable = "DeleteRouteTable"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteRouteTableRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DeleteRouteTable operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DeleteRouteTable for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DeleteRouteTable method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DeleteRouteTableRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DeleteRouteTableRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteRouteTable
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteRouteTableRequest(input *DeleteRouteTableInput) (req *request.Request, output *DeleteRouteTableOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDeleteRouteTable,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DeleteRouteTableInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DeleteRouteTableOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteRouteTable API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Deletes the specified route table. You must disassociate the route table
0000000000000000000000000000000000000000;;	// from any subnets before you can delete it. You can't delete the main route
0000000000000000000000000000000000000000;;	// table.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DeleteRouteTable for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteRouteTable
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteRouteTable(input *DeleteRouteTableInput) (*DeleteRouteTableOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DeleteRouteTableRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDeleteSecurityGroup = "DeleteSecurityGroup"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteSecurityGroupRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DeleteSecurityGroup operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DeleteSecurityGroup for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DeleteSecurityGroup method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DeleteSecurityGroupRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DeleteSecurityGroupRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteSecurityGroup
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteSecurityGroupRequest(input *DeleteSecurityGroupInput) (req *request.Request, output *DeleteSecurityGroupOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDeleteSecurityGroup,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DeleteSecurityGroupInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DeleteSecurityGroupOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteSecurityGroup API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Deletes a security group.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If you attempt to delete a security group that is associated with an instance,
0000000000000000000000000000000000000000;;	// or is referenced by another security group, the operation fails with InvalidGroup.InUse
0000000000000000000000000000000000000000;;	// in EC2-Classic or DependencyViolation in EC2-VPC.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DeleteSecurityGroup for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteSecurityGroup
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteSecurityGroup(input *DeleteSecurityGroupInput) (*DeleteSecurityGroupOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DeleteSecurityGroupRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDeleteSnapshot = "DeleteSnapshot"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteSnapshotRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DeleteSnapshot operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DeleteSnapshot for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DeleteSnapshot method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DeleteSnapshotRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DeleteSnapshotRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteSnapshot
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteSnapshotRequest(input *DeleteSnapshotInput) (req *request.Request, output *DeleteSnapshotOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDeleteSnapshot,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DeleteSnapshotInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DeleteSnapshotOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteSnapshot API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Deletes the specified snapshot.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// When you make periodic snapshots of a volume, the snapshots are incremental,
0000000000000000000000000000000000000000;;	// and only the blocks on the device that have changed since your last snapshot
0000000000000000000000000000000000000000;;	// are saved in the new snapshot. When you delete a snapshot, only the data
0000000000000000000000000000000000000000;;	// not needed for any other snapshot is removed. So regardless of which prior
0000000000000000000000000000000000000000;;	// snapshots have been deleted, all active snapshots will have access to all
0000000000000000000000000000000000000000;;	// the information needed to restore the volume.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// You cannot delete a snapshot of the root device of an EBS volume used by
0000000000000000000000000000000000000000;;	// a registered AMI. You must first de-register the AMI before you can delete
0000000000000000000000000000000000000000;;	// the snapshot.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information, see Deleting an Amazon EBS Snapshot (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-deleting-snapshot.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DeleteSnapshot for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteSnapshot
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteSnapshot(input *DeleteSnapshotInput) (*DeleteSnapshotOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DeleteSnapshotRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDeleteSpotDatafeedSubscription = "DeleteSpotDatafeedSubscription"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteSpotDatafeedSubscriptionRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DeleteSpotDatafeedSubscription operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DeleteSpotDatafeedSubscription for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DeleteSpotDatafeedSubscription method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DeleteSpotDatafeedSubscriptionRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DeleteSpotDatafeedSubscriptionRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteSpotDatafeedSubscription
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteSpotDatafeedSubscriptionRequest(input *DeleteSpotDatafeedSubscriptionInput) (req *request.Request, output *DeleteSpotDatafeedSubscriptionOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDeleteSpotDatafeedSubscription,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DeleteSpotDatafeedSubscriptionInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DeleteSpotDatafeedSubscriptionOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteSpotDatafeedSubscription API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Deletes the data feed for Spot instances.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DeleteSpotDatafeedSubscription for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteSpotDatafeedSubscription
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteSpotDatafeedSubscription(input *DeleteSpotDatafeedSubscriptionInput) (*DeleteSpotDatafeedSubscriptionOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DeleteSpotDatafeedSubscriptionRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDeleteSubnet = "DeleteSubnet"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteSubnetRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DeleteSubnet operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DeleteSubnet for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DeleteSubnet method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DeleteSubnetRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DeleteSubnetRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteSubnet
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteSubnetRequest(input *DeleteSubnetInput) (req *request.Request, output *DeleteSubnetOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDeleteSubnet,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DeleteSubnetInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DeleteSubnetOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteSubnet API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Deletes the specified subnet. You must terminate all running instances in
0000000000000000000000000000000000000000;;	// the subnet before you can delete the subnet.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DeleteSubnet for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteSubnet
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteSubnet(input *DeleteSubnetInput) (*DeleteSubnetOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DeleteSubnetRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDeleteTags = "DeleteTags"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteTagsRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DeleteTags operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DeleteTags for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DeleteTags method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DeleteTagsRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DeleteTagsRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteTags
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteTagsRequest(input *DeleteTagsInput) (req *request.Request, output *DeleteTagsOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDeleteTags,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DeleteTagsInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DeleteTagsOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteTags API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Deletes the specified set of tags from the specified set of resources. This
0000000000000000000000000000000000000000;;	// call is designed to follow a DescribeTags request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information about tags, see Tagging Your Resources (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DeleteTags for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteTags
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteTags(input *DeleteTagsInput) (*DeleteTagsOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DeleteTagsRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDeleteVolume = "DeleteVolume"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteVolumeRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DeleteVolume operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DeleteVolume for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DeleteVolume method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DeleteVolumeRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DeleteVolumeRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteVolume
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteVolumeRequest(input *DeleteVolumeInput) (req *request.Request, output *DeleteVolumeOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDeleteVolume,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DeleteVolumeInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DeleteVolumeOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteVolume API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Deletes the specified EBS volume. The volume must be in the available state
0000000000000000000000000000000000000000;;	// (not attached to an instance).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The volume may remain in the deleting state for several minutes.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information, see Deleting an Amazon EBS Volume (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-deleting-volume.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DeleteVolume for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteVolume
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteVolume(input *DeleteVolumeInput) (*DeleteVolumeOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DeleteVolumeRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDeleteVpc = "DeleteVpc"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteVpcRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DeleteVpc operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DeleteVpc for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DeleteVpc method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DeleteVpcRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DeleteVpcRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteVpc
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteVpcRequest(input *DeleteVpcInput) (req *request.Request, output *DeleteVpcOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDeleteVpc,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DeleteVpcInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DeleteVpcOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteVpc API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Deletes the specified VPC. You must detach or delete all gateways and resources
0000000000000000000000000000000000000000;;	// that are associated with the VPC before you can delete it. For example, you
0000000000000000000000000000000000000000;;	// must terminate all instances running in the VPC, delete all security groups
0000000000000000000000000000000000000000;;	// associated with the VPC (except the default one), delete all route tables
0000000000000000000000000000000000000000;;	// associated with the VPC (except the default one), and so on.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DeleteVpc for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteVpc
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteVpc(input *DeleteVpcInput) (*DeleteVpcOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DeleteVpcRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDeleteVpcEndpoints = "DeleteVpcEndpoints"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteVpcEndpointsRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DeleteVpcEndpoints operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DeleteVpcEndpoints for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DeleteVpcEndpoints method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DeleteVpcEndpointsRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DeleteVpcEndpointsRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteVpcEndpoints
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteVpcEndpointsRequest(input *DeleteVpcEndpointsInput) (req *request.Request, output *DeleteVpcEndpointsOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDeleteVpcEndpoints,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DeleteVpcEndpointsInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DeleteVpcEndpointsOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteVpcEndpoints API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Deletes one or more specified VPC endpoints. Deleting the endpoint also deletes
0000000000000000000000000000000000000000;;	// the endpoint routes in the route tables that were associated with the endpoint.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DeleteVpcEndpoints for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteVpcEndpoints
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteVpcEndpoints(input *DeleteVpcEndpointsInput) (*DeleteVpcEndpointsOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DeleteVpcEndpointsRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDeleteVpcPeeringConnection = "DeleteVpcPeeringConnection"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteVpcPeeringConnectionRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DeleteVpcPeeringConnection operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DeleteVpcPeeringConnection for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DeleteVpcPeeringConnection method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DeleteVpcPeeringConnectionRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DeleteVpcPeeringConnectionRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteVpcPeeringConnection
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteVpcPeeringConnectionRequest(input *DeleteVpcPeeringConnectionInput) (req *request.Request, output *DeleteVpcPeeringConnectionOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDeleteVpcPeeringConnection,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DeleteVpcPeeringConnectionInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DeleteVpcPeeringConnectionOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteVpcPeeringConnection API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Deletes a VPC peering connection. Either the owner of the requester VPC or
0000000000000000000000000000000000000000;;	// the owner of the peer VPC can delete the VPC peering connection if it's in
0000000000000000000000000000000000000000;;	// the active state. The owner of the requester VPC can delete a VPC peering
0000000000000000000000000000000000000000;;	// connection in the pending-acceptance state.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DeleteVpcPeeringConnection for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteVpcPeeringConnection
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteVpcPeeringConnection(input *DeleteVpcPeeringConnectionInput) (*DeleteVpcPeeringConnectionOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DeleteVpcPeeringConnectionRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDeleteVpnConnection = "DeleteVpnConnection"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteVpnConnectionRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DeleteVpnConnection operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DeleteVpnConnection for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DeleteVpnConnection method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DeleteVpnConnectionRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DeleteVpnConnectionRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteVpnConnection
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteVpnConnectionRequest(input *DeleteVpnConnectionInput) (req *request.Request, output *DeleteVpnConnectionOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDeleteVpnConnection,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DeleteVpnConnectionInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DeleteVpnConnectionOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteVpnConnection API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Deletes the specified VPN connection.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If you're deleting the VPC and its associated components, we recommend that
0000000000000000000000000000000000000000;;	// you detach the virtual private gateway from the VPC and delete the VPC before
0000000000000000000000000000000000000000;;	// deleting the VPN connection. If you believe that the tunnel credentials for
0000000000000000000000000000000000000000;;	// your VPN connection have been compromised, you can delete the VPN connection
0000000000000000000000000000000000000000;;	// and create a new one that has new keys, without needing to delete the VPC
0000000000000000000000000000000000000000;;	// or virtual private gateway. If you create a new VPN connection, you must
0000000000000000000000000000000000000000;;	// reconfigure the customer gateway using the new configuration information
0000000000000000000000000000000000000000;;	// returned with the new VPN connection ID.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DeleteVpnConnection for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteVpnConnection
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteVpnConnection(input *DeleteVpnConnectionInput) (*DeleteVpnConnectionOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DeleteVpnConnectionRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDeleteVpnConnectionRoute = "DeleteVpnConnectionRoute"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteVpnConnectionRouteRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DeleteVpnConnectionRoute operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DeleteVpnConnectionRoute for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DeleteVpnConnectionRoute method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DeleteVpnConnectionRouteRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DeleteVpnConnectionRouteRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteVpnConnectionRoute
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteVpnConnectionRouteRequest(input *DeleteVpnConnectionRouteInput) (req *request.Request, output *DeleteVpnConnectionRouteOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDeleteVpnConnectionRoute,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DeleteVpnConnectionRouteInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DeleteVpnConnectionRouteOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteVpnConnectionRoute API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Deletes the specified static route associated with a VPN connection between
0000000000000000000000000000000000000000;;	// an existing virtual private gateway and a VPN customer gateway. The static
0000000000000000000000000000000000000000;;	// route allows traffic to be routed from the virtual private gateway to the
0000000000000000000000000000000000000000;;	// VPN customer gateway.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DeleteVpnConnectionRoute for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteVpnConnectionRoute
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteVpnConnectionRoute(input *DeleteVpnConnectionRouteInput) (*DeleteVpnConnectionRouteOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DeleteVpnConnectionRouteRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDeleteVpnGateway = "DeleteVpnGateway"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteVpnGatewayRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DeleteVpnGateway operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DeleteVpnGateway for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DeleteVpnGateway method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DeleteVpnGatewayRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DeleteVpnGatewayRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteVpnGateway
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteVpnGatewayRequest(input *DeleteVpnGatewayInput) (req *request.Request, output *DeleteVpnGatewayOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDeleteVpnGateway,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DeleteVpnGatewayInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DeleteVpnGatewayOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteVpnGateway API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Deletes the specified virtual private gateway. We recommend that before you
0000000000000000000000000000000000000000;;	// delete a virtual private gateway, you detach it from the VPC and delete the
0000000000000000000000000000000000000000;;	// VPN connection. Note that you don't need to delete the virtual private gateway
0000000000000000000000000000000000000000;;	// if you plan to delete and recreate the VPN connection between your VPC and
0000000000000000000000000000000000000000;;	// your network.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DeleteVpnGateway for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteVpnGateway
0000000000000000000000000000000000000000;;	func (c *EC2) DeleteVpnGateway(input *DeleteVpnGatewayInput) (*DeleteVpnGatewayOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DeleteVpnGatewayRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDeregisterImage = "DeregisterImage"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeregisterImageRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DeregisterImage operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DeregisterImage for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DeregisterImage method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DeregisterImageRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DeregisterImageRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeregisterImage
0000000000000000000000000000000000000000;;	func (c *EC2) DeregisterImageRequest(input *DeregisterImageInput) (req *request.Request, output *DeregisterImageOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDeregisterImage,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DeregisterImageInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DeregisterImageOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeregisterImage API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Deregisters the specified AMI. After you deregister an AMI, it can't be used
0000000000000000000000000000000000000000;;	// to launch new instances.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This command does not delete the AMI.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DeregisterImage for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeregisterImage
0000000000000000000000000000000000000000;;	func (c *EC2) DeregisterImage(input *DeregisterImageInput) (*DeregisterImageOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DeregisterImageRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeAccountAttributes = "DescribeAccountAttributes"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeAccountAttributesRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeAccountAttributes operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeAccountAttributes for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeAccountAttributes method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeAccountAttributesRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeAccountAttributesRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeAccountAttributes
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeAccountAttributesRequest(input *DescribeAccountAttributesInput) (req *request.Request, output *DescribeAccountAttributesOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeAccountAttributes,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeAccountAttributesInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeAccountAttributesOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeAccountAttributes API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes attributes of your AWS account. The following are the supported
0000000000000000000000000000000000000000;;	// account attributes:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * supported-platforms: Indicates whether your account can launch instances
0000000000000000000000000000000000000000;;	//    into EC2-Classic and EC2-VPC, or only into EC2-VPC.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * default-vpc: The ID of the default VPC for your account, or none.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * max-instances: The maximum number of On-Demand instances that you can
0000000000000000000000000000000000000000;;	//    run.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * vpc-max-security-groups-per-interface: The maximum number of security
0000000000000000000000000000000000000000;;	//    groups that you can assign to a network interface.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * max-elastic-ips: The maximum number of Elastic IP addresses that you
0000000000000000000000000000000000000000;;	//    can allocate for use with EC2-Classic.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * vpc-max-elastic-ips: The maximum number of Elastic IP addresses that
0000000000000000000000000000000000000000;;	//    you can allocate for use with EC2-VPC.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeAccountAttributes for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeAccountAttributes
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeAccountAttributes(input *DescribeAccountAttributesInput) (*DescribeAccountAttributesOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeAccountAttributesRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeAddresses = "DescribeAddresses"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeAddressesRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeAddresses operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeAddresses for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeAddresses method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeAddressesRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeAddressesRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeAddresses
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeAddressesRequest(input *DescribeAddressesInput) (req *request.Request, output *DescribeAddressesOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeAddresses,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeAddressesInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeAddressesOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeAddresses API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes one or more of your Elastic IP addresses.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// An Elastic IP address is for use in either the EC2-Classic platform or in
0000000000000000000000000000000000000000;;	// a VPC. For more information, see Elastic IP Addresses (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeAddresses for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeAddresses
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeAddresses(input *DescribeAddressesInput) (*DescribeAddressesOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeAddressesRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeAvailabilityZones = "DescribeAvailabilityZones"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeAvailabilityZonesRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeAvailabilityZones operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeAvailabilityZones for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeAvailabilityZones method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeAvailabilityZonesRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeAvailabilityZonesRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeAvailabilityZones
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeAvailabilityZonesRequest(input *DescribeAvailabilityZonesInput) (req *request.Request, output *DescribeAvailabilityZonesOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeAvailabilityZones,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeAvailabilityZonesInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeAvailabilityZonesOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeAvailabilityZones API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes one or more of the Availability Zones that are available to you.
0000000000000000000000000000000000000000;;	// The results include zones only for the region you're currently using. If
0000000000000000000000000000000000000000;;	// there is an event impacting an Availability Zone, you can use this request
0000000000000000000000000000000000000000;;	// to view the state and any provided message for that Availability Zone.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information, see Regions and Availability Zones (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeAvailabilityZones for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeAvailabilityZones
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeAvailabilityZones(input *DescribeAvailabilityZonesInput) (*DescribeAvailabilityZonesOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeAvailabilityZonesRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeBundleTasks = "DescribeBundleTasks"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeBundleTasksRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeBundleTasks operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeBundleTasks for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeBundleTasks method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeBundleTasksRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeBundleTasksRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeBundleTasks
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeBundleTasksRequest(input *DescribeBundleTasksInput) (req *request.Request, output *DescribeBundleTasksOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeBundleTasks,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeBundleTasksInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeBundleTasksOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeBundleTasks API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes one or more of your bundling tasks.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Completed bundle tasks are listed for only a limited time. If your bundle
0000000000000000000000000000000000000000;;	// task is no longer in the list, you can still register an AMI from it. Just
0000000000000000000000000000000000000000;;	// use RegisterImage with the Amazon S3 bucket name and image manifest name
0000000000000000000000000000000000000000;;	// you provided to the bundle task.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeBundleTasks for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeBundleTasks
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeBundleTasks(input *DescribeBundleTasksInput) (*DescribeBundleTasksOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeBundleTasksRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeClassicLinkInstances = "DescribeClassicLinkInstances"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeClassicLinkInstancesRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeClassicLinkInstances operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeClassicLinkInstances for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeClassicLinkInstances method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeClassicLinkInstancesRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeClassicLinkInstancesRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeClassicLinkInstances
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeClassicLinkInstancesRequest(input *DescribeClassicLinkInstancesInput) (req *request.Request, output *DescribeClassicLinkInstancesOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeClassicLinkInstances,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeClassicLinkInstancesInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeClassicLinkInstancesOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeClassicLinkInstances API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes one or more of your linked EC2-Classic instances. This request
0000000000000000000000000000000000000000;;	// only returns information about EC2-Classic instances linked to a VPC through
0000000000000000000000000000000000000000;;	// ClassicLink; you cannot use this request to return information about other
0000000000000000000000000000000000000000;;	// instances.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeClassicLinkInstances for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeClassicLinkInstances
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeClassicLinkInstances(input *DescribeClassicLinkInstancesInput) (*DescribeClassicLinkInstancesOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeClassicLinkInstancesRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeConversionTasks = "DescribeConversionTasks"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeConversionTasksRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeConversionTasks operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeConversionTasks for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeConversionTasks method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeConversionTasksRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeConversionTasksRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeConversionTasks
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeConversionTasksRequest(input *DescribeConversionTasksInput) (req *request.Request, output *DescribeConversionTasksOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeConversionTasks,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeConversionTasksInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeConversionTasksOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeConversionTasks API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes one or more of your conversion tasks. For more information, see
0000000000000000000000000000000000000000;;	// the VM Import/Export User Guide (http://docs.aws.amazon.com/vm-import/latest/userguide/).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For information about the import manifest referenced by this API action,
0000000000000000000000000000000000000000;;	// see VM Import Manifest (http://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeConversionTasks for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeConversionTasks
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeConversionTasks(input *DescribeConversionTasksInput) (*DescribeConversionTasksOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeConversionTasksRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeCustomerGateways = "DescribeCustomerGateways"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeCustomerGatewaysRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeCustomerGateways operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeCustomerGateways for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeCustomerGateways method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeCustomerGatewaysRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeCustomerGatewaysRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeCustomerGateways
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeCustomerGatewaysRequest(input *DescribeCustomerGatewaysInput) (req *request.Request, output *DescribeCustomerGatewaysOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeCustomerGateways,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeCustomerGatewaysInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeCustomerGatewaysOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeCustomerGateways API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes one or more of your VPN customer gateways.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information about VPN customer gateways, see Adding a Hardware Virtual
0000000000000000000000000000000000000000;;	// Private Gateway to Your VPC (http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_VPN.html)
0000000000000000000000000000000000000000;;	// in the Amazon Virtual Private Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeCustomerGateways for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeCustomerGateways
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeCustomerGateways(input *DescribeCustomerGatewaysInput) (*DescribeCustomerGatewaysOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeCustomerGatewaysRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeDhcpOptions = "DescribeDhcpOptions"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeDhcpOptionsRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeDhcpOptions operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeDhcpOptions for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeDhcpOptions method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeDhcpOptionsRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeDhcpOptionsRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeDhcpOptions
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeDhcpOptionsRequest(input *DescribeDhcpOptionsInput) (req *request.Request, output *DescribeDhcpOptionsOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeDhcpOptions,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeDhcpOptionsInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeDhcpOptionsOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeDhcpOptions API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes one or more of your DHCP options sets.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information about DHCP options sets, see DHCP Options Sets (http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_DHCP_Options.html)
0000000000000000000000000000000000000000;;	// in the Amazon Virtual Private Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeDhcpOptions for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeDhcpOptions
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeDhcpOptions(input *DescribeDhcpOptionsInput) (*DescribeDhcpOptionsOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeDhcpOptionsRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeEgressOnlyInternetGateways = "DescribeEgressOnlyInternetGateways"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeEgressOnlyInternetGatewaysRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeEgressOnlyInternetGateways operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeEgressOnlyInternetGateways for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeEgressOnlyInternetGateways method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeEgressOnlyInternetGatewaysRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeEgressOnlyInternetGatewaysRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeEgressOnlyInternetGateways
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeEgressOnlyInternetGatewaysRequest(input *DescribeEgressOnlyInternetGatewaysInput) (req *request.Request, output *DescribeEgressOnlyInternetGatewaysOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeEgressOnlyInternetGateways,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeEgressOnlyInternetGatewaysInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeEgressOnlyInternetGatewaysOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeEgressOnlyInternetGateways API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes one or more of your egress-only Internet gateways.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeEgressOnlyInternetGateways for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeEgressOnlyInternetGateways
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeEgressOnlyInternetGateways(input *DescribeEgressOnlyInternetGatewaysInput) (*DescribeEgressOnlyInternetGatewaysOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeEgressOnlyInternetGatewaysRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeExportTasks = "DescribeExportTasks"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeExportTasksRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeExportTasks operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeExportTasks for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeExportTasks method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeExportTasksRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeExportTasksRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeExportTasks
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeExportTasksRequest(input *DescribeExportTasksInput) (req *request.Request, output *DescribeExportTasksOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeExportTasks,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeExportTasksInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeExportTasksOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeExportTasks API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes one or more of your export tasks.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeExportTasks for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeExportTasks
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeExportTasks(input *DescribeExportTasksInput) (*DescribeExportTasksOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeExportTasksRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeFlowLogs = "DescribeFlowLogs"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeFlowLogsRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeFlowLogs operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeFlowLogs for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeFlowLogs method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeFlowLogsRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeFlowLogsRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeFlowLogs
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeFlowLogsRequest(input *DescribeFlowLogsInput) (req *request.Request, output *DescribeFlowLogsOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeFlowLogs,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeFlowLogsInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeFlowLogsOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeFlowLogs API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes one or more flow logs. To view the information in your flow logs
0000000000000000000000000000000000000000;;	// (the log streams for the network interfaces), you must use the CloudWatch
0000000000000000000000000000000000000000;;	// Logs console or the CloudWatch Logs API.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeFlowLogs for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeFlowLogs
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeFlowLogs(input *DescribeFlowLogsInput) (*DescribeFlowLogsOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeFlowLogsRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeHostReservationOfferings = "DescribeHostReservationOfferings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeHostReservationOfferingsRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeHostReservationOfferings operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeHostReservationOfferings for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeHostReservationOfferings method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeHostReservationOfferingsRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeHostReservationOfferingsRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeHostReservationOfferings
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeHostReservationOfferingsRequest(input *DescribeHostReservationOfferingsInput) (req *request.Request, output *DescribeHostReservationOfferingsOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeHostReservationOfferings,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeHostReservationOfferingsInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeHostReservationOfferingsOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeHostReservationOfferings API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes the Dedicated Host Reservations that are available to purchase.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The results describe all the Dedicated Host Reservation offerings, including
0000000000000000000000000000000000000000;;	// offerings that may not match the instance family and region of your Dedicated
0000000000000000000000000000000000000000;;	// Hosts. When purchasing an offering, ensure that the the instance family and
0000000000000000000000000000000000000000;;	// region of the offering matches that of the Dedicated Host/s it will be associated
0000000000000000000000000000000000000000;;	// with. For an overview of supported instance types, see Dedicated Hosts Overview
0000000000000000000000000000000000000000;;	// (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-overview.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeHostReservationOfferings for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeHostReservationOfferings
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeHostReservationOfferings(input *DescribeHostReservationOfferingsInput) (*DescribeHostReservationOfferingsOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeHostReservationOfferingsRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeHostReservations = "DescribeHostReservations"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeHostReservationsRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeHostReservations operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeHostReservations for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeHostReservations method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeHostReservationsRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeHostReservationsRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeHostReservations
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeHostReservationsRequest(input *DescribeHostReservationsInput) (req *request.Request, output *DescribeHostReservationsOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeHostReservations,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeHostReservationsInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeHostReservationsOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeHostReservations API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes Dedicated Host Reservations which are associated with Dedicated
0000000000000000000000000000000000000000;;	// Hosts in your account.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeHostReservations for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeHostReservations
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeHostReservations(input *DescribeHostReservationsInput) (*DescribeHostReservationsOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeHostReservationsRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeHosts = "DescribeHosts"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeHostsRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeHosts operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeHosts for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeHosts method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeHostsRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeHostsRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeHosts
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeHostsRequest(input *DescribeHostsInput) (req *request.Request, output *DescribeHostsOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeHosts,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeHostsInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeHostsOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeHosts API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes one or more of your Dedicated Hosts.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The results describe only the Dedicated Hosts in the region you're currently
0000000000000000000000000000000000000000;;	// using. All listed instances consume capacity on your Dedicated Host. Dedicated
0000000000000000000000000000000000000000;;	// Hosts that have recently been released will be listed with the state released.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeHosts for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeHosts
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeHosts(input *DescribeHostsInput) (*DescribeHostsOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeHostsRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeIdFormat = "DescribeIdFormat"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeIdFormatRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeIdFormat operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeIdFormat for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeIdFormat method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeIdFormatRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeIdFormatRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeIdFormat
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeIdFormatRequest(input *DescribeIdFormatInput) (req *request.Request, output *DescribeIdFormatOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeIdFormat,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeIdFormatInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeIdFormatOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeIdFormat API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes the ID format settings for your resources on a per-region basis,
0000000000000000000000000000000000000000;;	// for example, to view which resource types are enabled for longer IDs. This
0000000000000000000000000000000000000000;;	// request only returns information about resource types whose ID formats can
0000000000000000000000000000000000000000;;	// be modified; it does not return information about other resource types.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The following resource types support longer IDs: instance | reservation |
0000000000000000000000000000000000000000;;	// snapshot | volume.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// These settings apply to the IAM user who makes the request; they do not apply
0000000000000000000000000000000000000000;;	// to the entire AWS account. By default, an IAM user defaults to the same settings
0000000000000000000000000000000000000000;;	// as the root user, unless they explicitly override the settings by running
0000000000000000000000000000000000000000;;	// the ModifyIdFormat command. Resources created with longer IDs are visible
0000000000000000000000000000000000000000;;	// to all IAM users, regardless of these settings and provided that they have
0000000000000000000000000000000000000000;;	// permission to use the relevant Describe command for the resource type.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeIdFormat for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeIdFormat
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeIdFormat(input *DescribeIdFormatInput) (*DescribeIdFormatOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeIdFormatRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeIdentityIdFormat = "DescribeIdentityIdFormat"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeIdentityIdFormatRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeIdentityIdFormat operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeIdentityIdFormat for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeIdentityIdFormat method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeIdentityIdFormatRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeIdentityIdFormatRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeIdentityIdFormat
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeIdentityIdFormatRequest(input *DescribeIdentityIdFormatInput) (req *request.Request, output *DescribeIdentityIdFormatOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeIdentityIdFormat,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeIdentityIdFormatInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeIdentityIdFormatOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeIdentityIdFormat API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes the ID format settings for resources for the specified IAM user,
0000000000000000000000000000000000000000;;	// IAM role, or root user. For example, you can view the resource types that
0000000000000000000000000000000000000000;;	// are enabled for longer IDs. This request only returns information about resource
0000000000000000000000000000000000000000;;	// types whose ID formats can be modified; it does not return information about
0000000000000000000000000000000000000000;;	// other resource types. For more information, see Resource IDs (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The following resource types support longer IDs: instance | reservation |
0000000000000000000000000000000000000000;;	// snapshot | volume.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// These settings apply to the principal specified in the request. They do not
0000000000000000000000000000000000000000;;	// apply to the principal that makes the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeIdentityIdFormat for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeIdentityIdFormat
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeIdentityIdFormat(input *DescribeIdentityIdFormatInput) (*DescribeIdentityIdFormatOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeIdentityIdFormatRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeImageAttribute = "DescribeImageAttribute"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeImageAttributeRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeImageAttribute operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeImageAttribute for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeImageAttribute method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeImageAttributeRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeImageAttributeRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeImageAttribute
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeImageAttributeRequest(input *DescribeImageAttributeInput) (req *request.Request, output *DescribeImageAttributeOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeImageAttribute,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeImageAttributeInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeImageAttributeOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeImageAttribute API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes the specified attribute of the specified AMI. You can specify only
0000000000000000000000000000000000000000;;	// one attribute at a time.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeImageAttribute for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeImageAttribute
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeImageAttribute(input *DescribeImageAttributeInput) (*DescribeImageAttributeOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeImageAttributeRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeImages = "DescribeImages"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeImagesRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeImages operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeImages for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeImages method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeImagesRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeImagesRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeImages
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeImagesRequest(input *DescribeImagesInput) (req *request.Request, output *DescribeImagesOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeImages,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeImagesInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeImagesOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeImages API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes one or more of the images (AMIs, AKIs, and ARIs) available to you.
0000000000000000000000000000000000000000;;	// Images available to you include public images, private images that you own,
0000000000000000000000000000000000000000;;	// and private images owned by other AWS accounts but for which you have explicit
0000000000000000000000000000000000000000;;	// launch permissions.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Deregistered images are included in the returned results for an unspecified
0000000000000000000000000000000000000000;;	// interval after deregistration.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeImages for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeImages
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeImages(input *DescribeImagesInput) (*DescribeImagesOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeImagesRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeImportImageTasks = "DescribeImportImageTasks"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeImportImageTasksRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeImportImageTasks operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeImportImageTasks for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeImportImageTasks method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeImportImageTasksRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeImportImageTasksRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeImportImageTasks
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeImportImageTasksRequest(input *DescribeImportImageTasksInput) (req *request.Request, output *DescribeImportImageTasksOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeImportImageTasks,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeImportImageTasksInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeImportImageTasksOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeImportImageTasks API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Displays details about an import virtual machine or import snapshot tasks
0000000000000000000000000000000000000000;;	// that are already created.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeImportImageTasks for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeImportImageTasks
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeImportImageTasks(input *DescribeImportImageTasksInput) (*DescribeImportImageTasksOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeImportImageTasksRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeImportSnapshotTasks = "DescribeImportSnapshotTasks"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeImportSnapshotTasksRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeImportSnapshotTasks operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeImportSnapshotTasks for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeImportSnapshotTasks method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeImportSnapshotTasksRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeImportSnapshotTasksRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeImportSnapshotTasks
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeImportSnapshotTasksRequest(input *DescribeImportSnapshotTasksInput) (req *request.Request, output *DescribeImportSnapshotTasksOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeImportSnapshotTasks,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeImportSnapshotTasksInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeImportSnapshotTasksOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeImportSnapshotTasks API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes your import snapshot tasks.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeImportSnapshotTasks for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeImportSnapshotTasks
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeImportSnapshotTasks(input *DescribeImportSnapshotTasksInput) (*DescribeImportSnapshotTasksOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeImportSnapshotTasksRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeInstanceAttribute = "DescribeInstanceAttribute"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeInstanceAttributeRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeInstanceAttribute operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeInstanceAttribute for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeInstanceAttribute method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeInstanceAttributeRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeInstanceAttributeRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeInstanceAttribute
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeInstanceAttributeRequest(input *DescribeInstanceAttributeInput) (req *request.Request, output *DescribeInstanceAttributeOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeInstanceAttribute,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeInstanceAttributeInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeInstanceAttributeOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeInstanceAttribute API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes the specified attribute of the specified instance. You can specify
0000000000000000000000000000000000000000;;	// only one attribute at a time. Valid attribute values are: instanceType |
0000000000000000000000000000000000000000;;	// kernel | ramdisk | userData | disableApiTermination | instanceInitiatedShutdownBehavior
0000000000000000000000000000000000000000;;	// | rootDeviceName | blockDeviceMapping | productCodes | sourceDestCheck |
0000000000000000000000000000000000000000;;	// groupSet | ebsOptimized | sriovNetSupport
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeInstanceAttribute for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeInstanceAttribute
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeInstanceAttribute(input *DescribeInstanceAttributeInput) (*DescribeInstanceAttributeOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeInstanceAttributeRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeInstanceStatus = "DescribeInstanceStatus"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeInstanceStatusRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeInstanceStatus operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeInstanceStatus for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeInstanceStatus method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeInstanceStatusRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeInstanceStatusRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeInstanceStatus
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeInstanceStatusRequest(input *DescribeInstanceStatusInput) (req *request.Request, output *DescribeInstanceStatusOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeInstanceStatus,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;			Paginator: &request.Paginator{
0000000000000000000000000000000000000000;;				InputTokens:     []string{"NextToken"},
0000000000000000000000000000000000000000;;				OutputTokens:    []string{"NextToken"},
0000000000000000000000000000000000000000;;				LimitToken:      "MaxResults",
0000000000000000000000000000000000000000;;				TruncationToken: "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeInstanceStatusInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeInstanceStatusOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeInstanceStatus API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes the status of one or more instances. By default, only running instances
0000000000000000000000000000000000000000;;	// are described, unless specified otherwise.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Instance status includes the following components:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * Status checks - Amazon EC2 performs status checks on running EC2 instances
0000000000000000000000000000000000000000;;	//    to identify hardware and software issues. For more information, see Status
0000000000000000000000000000000000000000;;	//    Checks for Your Instances (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-system-instance-status-check.html)
0000000000000000000000000000000000000000;;	//    and Troubleshooting Instances with Failed Status Checks (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstances.html)
0000000000000000000000000000000000000000;;	//    in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * Scheduled events - Amazon EC2 can schedule events (such as reboot, stop,
0000000000000000000000000000000000000000;;	//    or terminate) for your instances related to hardware issues, software
0000000000000000000000000000000000000000;;	//    updates, or system maintenance. For more information, see Scheduled Events
0000000000000000000000000000000000000000;;	//    for Your Instances (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-instances-status-check_sched.html)
0000000000000000000000000000000000000000;;	//    in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * Instance state - You can manage your instances from the moment you launch
0000000000000000000000000000000000000000;;	//    them through their termination. For more information, see Instance Lifecycle
0000000000000000000000000000000000000000;;	//    (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html)
0000000000000000000000000000000000000000;;	//    in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeInstanceStatus for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeInstanceStatus
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeInstanceStatus(input *DescribeInstanceStatusInput) (*DescribeInstanceStatusOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeInstanceStatusRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeInstanceStatusPages iterates over the pages of a DescribeInstanceStatus operation,
0000000000000000000000000000000000000000;;	// calling the "fn" function with the response data for each page. To stop
0000000000000000000000000000000000000000;;	// iterating, return false from the fn function.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeInstanceStatus method for more information on how to use this operation.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: This operation can generate multiple requests to a service.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example iterating over at most 3 pages of a DescribeInstanceStatus operation.
0000000000000000000000000000000000000000;;	//    pageNum := 0
0000000000000000000000000000000000000000;;	//    err := client.DescribeInstanceStatusPages(params,
0000000000000000000000000000000000000000;;	//        func(page *DescribeInstanceStatusOutput, lastPage bool) bool {
0000000000000000000000000000000000000000;;	//            pageNum++
0000000000000000000000000000000000000000;;	//            fmt.Println(page)
0000000000000000000000000000000000000000;;	//            return pageNum <= 3
0000000000000000000000000000000000000000;;	//        })
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeInstanceStatusPages(input *DescribeInstanceStatusInput, fn func(p *DescribeInstanceStatusOutput, lastPage bool) (shouldContinue bool)) error {
0000000000000000000000000000000000000000;;		page, _ := c.DescribeInstanceStatusRequest(input)
0000000000000000000000000000000000000000;;		page.Handlers.Build.PushBack(request.MakeAddToUserAgentFreeFormHandler("Paginator"))
0000000000000000000000000000000000000000;;		return page.EachPage(func(p interface{}, lastPage bool) bool {
0000000000000000000000000000000000000000;;			return fn(p.(*DescribeInstanceStatusOutput), lastPage)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeInstances = "DescribeInstances"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeInstancesRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeInstances operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeInstances for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeInstances method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeInstancesRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeInstancesRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeInstances
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeInstancesRequest(input *DescribeInstancesInput) (req *request.Request, output *DescribeInstancesOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeInstances,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;			Paginator: &request.Paginator{
0000000000000000000000000000000000000000;;				InputTokens:     []string{"NextToken"},
0000000000000000000000000000000000000000;;				OutputTokens:    []string{"NextToken"},
0000000000000000000000000000000000000000;;				LimitToken:      "MaxResults",
0000000000000000000000000000000000000000;;				TruncationToken: "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeInstancesInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeInstancesOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeInstances API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes one or more of your instances.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If you specify one or more instance IDs, Amazon EC2 returns information for
0000000000000000000000000000000000000000;;	// those instances. If you do not specify instance IDs, Amazon EC2 returns information
0000000000000000000000000000000000000000;;	// for all relevant instances. If you specify an instance ID that is not valid,
0000000000000000000000000000000000000000;;	// an error is returned. If you specify an instance that you do not own, it
0000000000000000000000000000000000000000;;	// is not included in the returned results.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Recently terminated instances might appear in the returned results. This
0000000000000000000000000000000000000000;;	// interval is usually less than one hour.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If you describe instances in the rare case where an Availability Zone is
0000000000000000000000000000000000000000;;	// experiencing a service disruption and you specify instance IDs that are in
0000000000000000000000000000000000000000;;	// the affected zone, or do not specify any instance IDs at all, the call fails.
0000000000000000000000000000000000000000;;	// If you describe instances and specify only instance IDs that are in an unaffected
0000000000000000000000000000000000000000;;	// zone, the call works normally.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeInstances for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeInstances
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeInstances(input *DescribeInstancesInput) (*DescribeInstancesOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeInstancesRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeInstancesPages iterates over the pages of a DescribeInstances operation,
0000000000000000000000000000000000000000;;	// calling the "fn" function with the response data for each page. To stop
0000000000000000000000000000000000000000;;	// iterating, return false from the fn function.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeInstances method for more information on how to use this operation.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: This operation can generate multiple requests to a service.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example iterating over at most 3 pages of a DescribeInstances operation.
0000000000000000000000000000000000000000;;	//    pageNum := 0
0000000000000000000000000000000000000000;;	//    err := client.DescribeInstancesPages(params,
0000000000000000000000000000000000000000;;	//        func(page *DescribeInstancesOutput, lastPage bool) bool {
0000000000000000000000000000000000000000;;	//            pageNum++
0000000000000000000000000000000000000000;;	//            fmt.Println(page)
0000000000000000000000000000000000000000;;	//            return pageNum <= 3
0000000000000000000000000000000000000000;;	//        })
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeInstancesPages(input *DescribeInstancesInput, fn func(p *DescribeInstancesOutput, lastPage bool) (shouldContinue bool)) error {
0000000000000000000000000000000000000000;;		page, _ := c.DescribeInstancesRequest(input)
0000000000000000000000000000000000000000;;		page.Handlers.Build.PushBack(request.MakeAddToUserAgentFreeFormHandler("Paginator"))
0000000000000000000000000000000000000000;;		return page.EachPage(func(p interface{}, lastPage bool) bool {
0000000000000000000000000000000000000000;;			return fn(p.(*DescribeInstancesOutput), lastPage)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeInternetGateways = "DescribeInternetGateways"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeInternetGatewaysRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeInternetGateways operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeInternetGateways for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeInternetGateways method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeInternetGatewaysRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeInternetGatewaysRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeInternetGateways
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeInternetGatewaysRequest(input *DescribeInternetGatewaysInput) (req *request.Request, output *DescribeInternetGatewaysOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeInternetGateways,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeInternetGatewaysInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeInternetGatewaysOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeInternetGateways API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes one or more of your Internet gateways.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeInternetGateways for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeInternetGateways
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeInternetGateways(input *DescribeInternetGatewaysInput) (*DescribeInternetGatewaysOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeInternetGatewaysRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeKeyPairs = "DescribeKeyPairs"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeKeyPairsRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeKeyPairs operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeKeyPairs for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeKeyPairs method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeKeyPairsRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeKeyPairsRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeKeyPairs
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeKeyPairsRequest(input *DescribeKeyPairsInput) (req *request.Request, output *DescribeKeyPairsOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeKeyPairs,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeKeyPairsInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeKeyPairsOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeKeyPairs API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes one or more of your key pairs.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information about key pairs, see Key Pairs (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeKeyPairs for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeKeyPairs
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeKeyPairs(input *DescribeKeyPairsInput) (*DescribeKeyPairsOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeKeyPairsRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeMovingAddresses = "DescribeMovingAddresses"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeMovingAddressesRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeMovingAddresses operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeMovingAddresses for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeMovingAddresses method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeMovingAddressesRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeMovingAddressesRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeMovingAddresses
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeMovingAddressesRequest(input *DescribeMovingAddressesInput) (req *request.Request, output *DescribeMovingAddressesOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeMovingAddresses,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeMovingAddressesInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeMovingAddressesOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeMovingAddresses API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes your Elastic IP addresses that are being moved to the EC2-VPC platform,
0000000000000000000000000000000000000000;;	// or that are being restored to the EC2-Classic platform. This request does
0000000000000000000000000000000000000000;;	// not return information about any other Elastic IP addresses in your account.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeMovingAddresses for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeMovingAddresses
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeMovingAddresses(input *DescribeMovingAddressesInput) (*DescribeMovingAddressesOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeMovingAddressesRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeNatGateways = "DescribeNatGateways"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeNatGatewaysRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeNatGateways operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeNatGateways for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeNatGateways method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeNatGatewaysRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeNatGatewaysRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeNatGateways
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeNatGatewaysRequest(input *DescribeNatGatewaysInput) (req *request.Request, output *DescribeNatGatewaysOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeNatGateways,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeNatGatewaysInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeNatGatewaysOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeNatGateways API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes one or more of the your NAT gateways.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeNatGateways for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeNatGateways
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeNatGateways(input *DescribeNatGatewaysInput) (*DescribeNatGatewaysOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeNatGatewaysRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeNetworkAcls = "DescribeNetworkAcls"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeNetworkAclsRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeNetworkAcls operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeNetworkAcls for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeNetworkAcls method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeNetworkAclsRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeNetworkAclsRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeNetworkAcls
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeNetworkAclsRequest(input *DescribeNetworkAclsInput) (req *request.Request, output *DescribeNetworkAclsOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeNetworkAcls,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeNetworkAclsInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeNetworkAclsOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeNetworkAcls API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes one or more of your network ACLs.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information about network ACLs, see Network ACLs (http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_ACLs.html)
0000000000000000000000000000000000000000;;	// in the Amazon Virtual Private Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeNetworkAcls for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeNetworkAcls
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeNetworkAcls(input *DescribeNetworkAclsInput) (*DescribeNetworkAclsOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeNetworkAclsRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeNetworkInterfaceAttribute = "DescribeNetworkInterfaceAttribute"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeNetworkInterfaceAttributeRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeNetworkInterfaceAttribute operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeNetworkInterfaceAttribute for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeNetworkInterfaceAttribute method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeNetworkInterfaceAttributeRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeNetworkInterfaceAttributeRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeNetworkInterfaceAttribute
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeNetworkInterfaceAttributeRequest(input *DescribeNetworkInterfaceAttributeInput) (req *request.Request, output *DescribeNetworkInterfaceAttributeOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeNetworkInterfaceAttribute,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeNetworkInterfaceAttributeInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeNetworkInterfaceAttributeOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeNetworkInterfaceAttribute API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes a network interface attribute. You can specify only one attribute
0000000000000000000000000000000000000000;;	// at a time.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeNetworkInterfaceAttribute for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeNetworkInterfaceAttribute
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeNetworkInterfaceAttribute(input *DescribeNetworkInterfaceAttributeInput) (*DescribeNetworkInterfaceAttributeOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeNetworkInterfaceAttributeRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeNetworkInterfaces = "DescribeNetworkInterfaces"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeNetworkInterfacesRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeNetworkInterfaces operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeNetworkInterfaces for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeNetworkInterfaces method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeNetworkInterfacesRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeNetworkInterfacesRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeNetworkInterfaces
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeNetworkInterfacesRequest(input *DescribeNetworkInterfacesInput) (req *request.Request, output *DescribeNetworkInterfacesOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeNetworkInterfaces,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeNetworkInterfacesInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeNetworkInterfacesOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeNetworkInterfaces API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes one or more of your network interfaces.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeNetworkInterfaces for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeNetworkInterfaces
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeNetworkInterfaces(input *DescribeNetworkInterfacesInput) (*DescribeNetworkInterfacesOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeNetworkInterfacesRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribePlacementGroups = "DescribePlacementGroups"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribePlacementGroupsRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribePlacementGroups operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribePlacementGroups for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribePlacementGroups method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribePlacementGroupsRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribePlacementGroupsRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribePlacementGroups
0000000000000000000000000000000000000000;;	func (c *EC2) DescribePlacementGroupsRequest(input *DescribePlacementGroupsInput) (req *request.Request, output *DescribePlacementGroupsOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribePlacementGroups,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribePlacementGroupsInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribePlacementGroupsOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribePlacementGroups API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes one or more of your placement groups. For more information about
0000000000000000000000000000000000000000;;	// placement groups and cluster instances, see Cluster Instances (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using_cluster_computing.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribePlacementGroups for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribePlacementGroups
0000000000000000000000000000000000000000;;	func (c *EC2) DescribePlacementGroups(input *DescribePlacementGroupsInput) (*DescribePlacementGroupsOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribePlacementGroupsRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribePrefixLists = "DescribePrefixLists"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribePrefixListsRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribePrefixLists operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribePrefixLists for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribePrefixLists method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribePrefixListsRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribePrefixListsRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribePrefixLists
0000000000000000000000000000000000000000;;	func (c *EC2) DescribePrefixListsRequest(input *DescribePrefixListsInput) (req *request.Request, output *DescribePrefixListsOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribePrefixLists,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribePrefixListsInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribePrefixListsOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribePrefixLists API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes available AWS services in a prefix list format, which includes
0000000000000000000000000000000000000000;;	// the prefix list name and prefix list ID of the service and the IP address
0000000000000000000000000000000000000000;;	// range for the service. A prefix list ID is required for creating an outbound
0000000000000000000000000000000000000000;;	// security group rule that allows traffic from a VPC to access an AWS service
0000000000000000000000000000000000000000;;	// through a VPC endpoint.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribePrefixLists for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribePrefixLists
0000000000000000000000000000000000000000;;	func (c *EC2) DescribePrefixLists(input *DescribePrefixListsInput) (*DescribePrefixListsOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribePrefixListsRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeRegions = "DescribeRegions"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeRegionsRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeRegions operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeRegions for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeRegions method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeRegionsRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeRegionsRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeRegions
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeRegionsRequest(input *DescribeRegionsInput) (req *request.Request, output *DescribeRegionsOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeRegions,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeRegionsInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeRegionsOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeRegions API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes one or more regions that are currently available to you.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For a list of the regions supported by Amazon EC2, see Regions and Endpoints
0000000000000000000000000000000000000000;;	// (http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeRegions for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeRegions
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeRegions(input *DescribeRegionsInput) (*DescribeRegionsOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeRegionsRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeReservedInstances = "DescribeReservedInstances"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeReservedInstancesRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeReservedInstances operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeReservedInstances for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeReservedInstances method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeReservedInstancesRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeReservedInstancesRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeReservedInstances
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeReservedInstancesRequest(input *DescribeReservedInstancesInput) (req *request.Request, output *DescribeReservedInstancesOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeReservedInstances,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeReservedInstancesInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeReservedInstancesOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeReservedInstances API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes one or more of the Reserved Instances that you purchased.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information about Reserved Instances, see Reserved Instances (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts-on-demand-reserved-instances.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeReservedInstances for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeReservedInstances
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeReservedInstances(input *DescribeReservedInstancesInput) (*DescribeReservedInstancesOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeReservedInstancesRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeReservedInstancesListings = "DescribeReservedInstancesListings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeReservedInstancesListingsRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeReservedInstancesListings operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeReservedInstancesListings for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeReservedInstancesListings method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeReservedInstancesListingsRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeReservedInstancesListingsRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeReservedInstancesListings
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeReservedInstancesListingsRequest(input *DescribeReservedInstancesListingsInput) (req *request.Request, output *DescribeReservedInstancesListingsOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeReservedInstancesListings,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeReservedInstancesListingsInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeReservedInstancesListingsOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeReservedInstancesListings API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes your account's Reserved Instance listings in the Reserved Instance
0000000000000000000000000000000000000000;;	// Marketplace.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The Reserved Instance Marketplace matches sellers who want to resell Reserved
0000000000000000000000000000000000000000;;	// Instance capacity that they no longer need with buyers who want to purchase
0000000000000000000000000000000000000000;;	// additional capacity. Reserved Instances bought and sold through the Reserved
0000000000000000000000000000000000000000;;	// Instance Marketplace work like any other Reserved Instances.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// As a seller, you choose to list some or all of your Reserved Instances, and
0000000000000000000000000000000000000000;;	// you specify the upfront price to receive for them. Your Reserved Instances
0000000000000000000000000000000000000000;;	// are then listed in the Reserved Instance Marketplace and are available for
0000000000000000000000000000000000000000;;	// purchase.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// As a buyer, you specify the configuration of the Reserved Instance to purchase,
0000000000000000000000000000000000000000;;	// and the Marketplace matches what you're searching for with what's available.
0000000000000000000000000000000000000000;;	// The Marketplace first sells the lowest priced Reserved Instances to you,
0000000000000000000000000000000000000000;;	// and continues to sell available Reserved Instance listings to you until your
0000000000000000000000000000000000000000;;	// demand is met. You are charged based on the total price of all of the listings
0000000000000000000000000000000000000000;;	// that you purchase.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information, see Reserved Instance Marketplace (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeReservedInstancesListings for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeReservedInstancesListings
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeReservedInstancesListings(input *DescribeReservedInstancesListingsInput) (*DescribeReservedInstancesListingsOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeReservedInstancesListingsRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeReservedInstancesModifications = "DescribeReservedInstancesModifications"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeReservedInstancesModificationsRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeReservedInstancesModifications operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeReservedInstancesModifications for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeReservedInstancesModifications method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeReservedInstancesModificationsRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeReservedInstancesModificationsRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeReservedInstancesModifications
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeReservedInstancesModificationsRequest(input *DescribeReservedInstancesModificationsInput) (req *request.Request, output *DescribeReservedInstancesModificationsOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeReservedInstancesModifications,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;			Paginator: &request.Paginator{
0000000000000000000000000000000000000000;;				InputTokens:     []string{"NextToken"},
0000000000000000000000000000000000000000;;				OutputTokens:    []string{"NextToken"},
0000000000000000000000000000000000000000;;				LimitToken:      "",
0000000000000000000000000000000000000000;;				TruncationToken: "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeReservedInstancesModificationsInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeReservedInstancesModificationsOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeReservedInstancesModifications API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes the modifications made to your Reserved Instances. If no parameter
0000000000000000000000000000000000000000;;	// is specified, information about all your Reserved Instances modification
0000000000000000000000000000000000000000;;	// requests is returned. If a modification ID is specified, only information
0000000000000000000000000000000000000000;;	// about the specific modification is returned.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information, see Modifying Reserved Instances (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-modifying.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeReservedInstancesModifications for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeReservedInstancesModifications
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeReservedInstancesModifications(input *DescribeReservedInstancesModificationsInput) (*DescribeReservedInstancesModificationsOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeReservedInstancesModificationsRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeReservedInstancesModificationsPages iterates over the pages of a DescribeReservedInstancesModifications operation,
0000000000000000000000000000000000000000;;	// calling the "fn" function with the response data for each page. To stop
0000000000000000000000000000000000000000;;	// iterating, return false from the fn function.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeReservedInstancesModifications method for more information on how to use this operation.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: This operation can generate multiple requests to a service.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example iterating over at most 3 pages of a DescribeReservedInstancesModifications operation.
0000000000000000000000000000000000000000;;	//    pageNum := 0
0000000000000000000000000000000000000000;;	//    err := client.DescribeReservedInstancesModificationsPages(params,
0000000000000000000000000000000000000000;;	//        func(page *DescribeReservedInstancesModificationsOutput, lastPage bool) bool {
0000000000000000000000000000000000000000;;	//            pageNum++
0000000000000000000000000000000000000000;;	//            fmt.Println(page)
0000000000000000000000000000000000000000;;	//            return pageNum <= 3
0000000000000000000000000000000000000000;;	//        })
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeReservedInstancesModificationsPages(input *DescribeReservedInstancesModificationsInput, fn func(p *DescribeReservedInstancesModificationsOutput, lastPage bool) (shouldContinue bool)) error {
0000000000000000000000000000000000000000;;		page, _ := c.DescribeReservedInstancesModificationsRequest(input)
0000000000000000000000000000000000000000;;		page.Handlers.Build.PushBack(request.MakeAddToUserAgentFreeFormHandler("Paginator"))
0000000000000000000000000000000000000000;;		return page.EachPage(func(p interface{}, lastPage bool) bool {
0000000000000000000000000000000000000000;;			return fn(p.(*DescribeReservedInstancesModificationsOutput), lastPage)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeReservedInstancesOfferings = "DescribeReservedInstancesOfferings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeReservedInstancesOfferingsRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeReservedInstancesOfferings operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeReservedInstancesOfferings for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeReservedInstancesOfferings method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeReservedInstancesOfferingsRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeReservedInstancesOfferingsRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeReservedInstancesOfferings
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeReservedInstancesOfferingsRequest(input *DescribeReservedInstancesOfferingsInput) (req *request.Request, output *DescribeReservedInstancesOfferingsOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeReservedInstancesOfferings,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;			Paginator: &request.Paginator{
0000000000000000000000000000000000000000;;				InputTokens:     []string{"NextToken"},
0000000000000000000000000000000000000000;;				OutputTokens:    []string{"NextToken"},
0000000000000000000000000000000000000000;;				LimitToken:      "MaxResults",
0000000000000000000000000000000000000000;;				TruncationToken: "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeReservedInstancesOfferingsInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeReservedInstancesOfferingsOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeReservedInstancesOfferings API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes Reserved Instance offerings that are available for purchase. With
0000000000000000000000000000000000000000;;	// Reserved Instances, you purchase the right to launch instances for a period
0000000000000000000000000000000000000000;;	// of time. During that time period, you do not receive insufficient capacity
0000000000000000000000000000000000000000;;	// errors, and you pay a lower usage rate than the rate charged for On-Demand
0000000000000000000000000000000000000000;;	// instances for the actual time used.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If you have listed your own Reserved Instances for sale in the Reserved Instance
0000000000000000000000000000000000000000;;	// Marketplace, they will be excluded from these results. This is to ensure
0000000000000000000000000000000000000000;;	// that you do not purchase your own Reserved Instances.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information, see Reserved Instance Marketplace (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeReservedInstancesOfferings for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeReservedInstancesOfferings
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeReservedInstancesOfferings(input *DescribeReservedInstancesOfferingsInput) (*DescribeReservedInstancesOfferingsOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeReservedInstancesOfferingsRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeReservedInstancesOfferingsPages iterates over the pages of a DescribeReservedInstancesOfferings operation,
0000000000000000000000000000000000000000;;	// calling the "fn" function with the response data for each page. To stop
0000000000000000000000000000000000000000;;	// iterating, return false from the fn function.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeReservedInstancesOfferings method for more information on how to use this operation.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: This operation can generate multiple requests to a service.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example iterating over at most 3 pages of a DescribeReservedInstancesOfferings operation.
0000000000000000000000000000000000000000;;	//    pageNum := 0
0000000000000000000000000000000000000000;;	//    err := client.DescribeReservedInstancesOfferingsPages(params,
0000000000000000000000000000000000000000;;	//        func(page *DescribeReservedInstancesOfferingsOutput, lastPage bool) bool {
0000000000000000000000000000000000000000;;	//            pageNum++
0000000000000000000000000000000000000000;;	//            fmt.Println(page)
0000000000000000000000000000000000000000;;	//            return pageNum <= 3
0000000000000000000000000000000000000000;;	//        })
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeReservedInstancesOfferingsPages(input *DescribeReservedInstancesOfferingsInput, fn func(p *DescribeReservedInstancesOfferingsOutput, lastPage bool) (shouldContinue bool)) error {
0000000000000000000000000000000000000000;;		page, _ := c.DescribeReservedInstancesOfferingsRequest(input)
0000000000000000000000000000000000000000;;		page.Handlers.Build.PushBack(request.MakeAddToUserAgentFreeFormHandler("Paginator"))
0000000000000000000000000000000000000000;;		return page.EachPage(func(p interface{}, lastPage bool) bool {
0000000000000000000000000000000000000000;;			return fn(p.(*DescribeReservedInstancesOfferingsOutput), lastPage)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeRouteTables = "DescribeRouteTables"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeRouteTablesRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeRouteTables operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeRouteTables for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeRouteTables method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeRouteTablesRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeRouteTablesRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeRouteTables
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeRouteTablesRequest(input *DescribeRouteTablesInput) (req *request.Request, output *DescribeRouteTablesOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeRouteTables,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeRouteTablesInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeRouteTablesOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeRouteTables API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes one or more of your route tables.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Each subnet in your VPC must be associated with a route table. If a subnet
0000000000000000000000000000000000000000;;	// is not explicitly associated with any route table, it is implicitly associated
0000000000000000000000000000000000000000;;	// with the main route table. This command does not return the subnet ID for
0000000000000000000000000000000000000000;;	// implicit associations.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information about route tables, see Route Tables (http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Route_Tables.html)
0000000000000000000000000000000000000000;;	// in the Amazon Virtual Private Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeRouteTables for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeRouteTables
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeRouteTables(input *DescribeRouteTablesInput) (*DescribeRouteTablesOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeRouteTablesRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeScheduledInstanceAvailability = "DescribeScheduledInstanceAvailability"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeScheduledInstanceAvailabilityRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeScheduledInstanceAvailability operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeScheduledInstanceAvailability for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeScheduledInstanceAvailability method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeScheduledInstanceAvailabilityRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeScheduledInstanceAvailabilityRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeScheduledInstanceAvailability
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeScheduledInstanceAvailabilityRequest(input *DescribeScheduledInstanceAvailabilityInput) (req *request.Request, output *DescribeScheduledInstanceAvailabilityOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeScheduledInstanceAvailability,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeScheduledInstanceAvailabilityInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeScheduledInstanceAvailabilityOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeScheduledInstanceAvailability API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Finds available schedules that meet the specified criteria.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// You can search for an available schedule no more than 3 months in advance.
0000000000000000000000000000000000000000;;	// You must meet the minimum required duration of 1,200 hours per year. For
0000000000000000000000000000000000000000;;	// example, the minimum daily schedule is 4 hours, the minimum weekly schedule
0000000000000000000000000000000000000000;;	// is 24 hours, and the minimum monthly schedule is 100 hours.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// After you find a schedule that meets your needs, call PurchaseScheduledInstances
0000000000000000000000000000000000000000;;	// to purchase Scheduled Instances with that schedule.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeScheduledInstanceAvailability for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeScheduledInstanceAvailability
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeScheduledInstanceAvailability(input *DescribeScheduledInstanceAvailabilityInput) (*DescribeScheduledInstanceAvailabilityOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeScheduledInstanceAvailabilityRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeScheduledInstances = "DescribeScheduledInstances"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeScheduledInstancesRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeScheduledInstances operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeScheduledInstances for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeScheduledInstances method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeScheduledInstancesRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeScheduledInstancesRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeScheduledInstances
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeScheduledInstancesRequest(input *DescribeScheduledInstancesInput) (req *request.Request, output *DescribeScheduledInstancesOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeScheduledInstances,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeScheduledInstancesInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeScheduledInstancesOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeScheduledInstances API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes one or more of your Scheduled Instances.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeScheduledInstances for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeScheduledInstances
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeScheduledInstances(input *DescribeScheduledInstancesInput) (*DescribeScheduledInstancesOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeScheduledInstancesRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeSecurityGroupReferences = "DescribeSecurityGroupReferences"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeSecurityGroupReferencesRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeSecurityGroupReferences operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeSecurityGroupReferences for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeSecurityGroupReferences method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeSecurityGroupReferencesRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeSecurityGroupReferencesRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeSecurityGroupReferences
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeSecurityGroupReferencesRequest(input *DescribeSecurityGroupReferencesInput) (req *request.Request, output *DescribeSecurityGroupReferencesOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeSecurityGroupReferences,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeSecurityGroupReferencesInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeSecurityGroupReferencesOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeSecurityGroupReferences API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// [EC2-VPC only] Describes the VPCs on the other side of a VPC peering connection
0000000000000000000000000000000000000000;;	// that are referencing the security groups you've specified in this request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeSecurityGroupReferences for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeSecurityGroupReferences
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeSecurityGroupReferences(input *DescribeSecurityGroupReferencesInput) (*DescribeSecurityGroupReferencesOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeSecurityGroupReferencesRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeSecurityGroups = "DescribeSecurityGroups"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeSecurityGroupsRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeSecurityGroups operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeSecurityGroups for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeSecurityGroups method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeSecurityGroupsRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeSecurityGroupsRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeSecurityGroups
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeSecurityGroupsRequest(input *DescribeSecurityGroupsInput) (req *request.Request, output *DescribeSecurityGroupsOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeSecurityGroups,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeSecurityGroupsInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeSecurityGroupsOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeSecurityGroups API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes one or more of your security groups.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// A security group is for use with instances either in the EC2-Classic platform
0000000000000000000000000000000000000000;;	// or in a specific VPC. For more information, see Amazon EC2 Security Groups
0000000000000000000000000000000000000000;;	// (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide and Security Groups for Your
0000000000000000000000000000000000000000;;	// VPC (http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html)
0000000000000000000000000000000000000000;;	// in the Amazon Virtual Private Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeSecurityGroups for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeSecurityGroups
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeSecurityGroups(input *DescribeSecurityGroupsInput) (*DescribeSecurityGroupsOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeSecurityGroupsRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeSnapshotAttribute = "DescribeSnapshotAttribute"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeSnapshotAttributeRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeSnapshotAttribute operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeSnapshotAttribute for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeSnapshotAttribute method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeSnapshotAttributeRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeSnapshotAttributeRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeSnapshotAttribute
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeSnapshotAttributeRequest(input *DescribeSnapshotAttributeInput) (req *request.Request, output *DescribeSnapshotAttributeOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeSnapshotAttribute,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeSnapshotAttributeInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeSnapshotAttributeOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeSnapshotAttribute API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes the specified attribute of the specified snapshot. You can specify
0000000000000000000000000000000000000000;;	// only one attribute at a time.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information about EBS snapshots, see Amazon EBS Snapshots (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSSnapshots.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeSnapshotAttribute for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeSnapshotAttribute
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeSnapshotAttribute(input *DescribeSnapshotAttributeInput) (*DescribeSnapshotAttributeOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeSnapshotAttributeRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeSnapshots = "DescribeSnapshots"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeSnapshotsRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeSnapshots operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeSnapshots for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeSnapshots method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeSnapshotsRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeSnapshotsRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeSnapshots
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeSnapshotsRequest(input *DescribeSnapshotsInput) (req *request.Request, output *DescribeSnapshotsOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeSnapshots,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;			Paginator: &request.Paginator{
0000000000000000000000000000000000000000;;				InputTokens:     []string{"NextToken"},
0000000000000000000000000000000000000000;;				OutputTokens:    []string{"NextToken"},
0000000000000000000000000000000000000000;;				LimitToken:      "MaxResults",
0000000000000000000000000000000000000000;;				TruncationToken: "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeSnapshotsInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeSnapshotsOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeSnapshots API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes one or more of the EBS snapshots available to you. Available snapshots
0000000000000000000000000000000000000000;;	// include public snapshots available for any AWS account to launch, private
0000000000000000000000000000000000000000;;	// snapshots that you own, and private snapshots owned by another AWS account
0000000000000000000000000000000000000000;;	// but for which you've been given explicit create volume permissions.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The create volume permissions fall into the following categories:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * public: The owner of the snapshot granted create volume permissions
0000000000000000000000000000000000000000;;	//    for the snapshot to the all group. All AWS accounts have create volume
0000000000000000000000000000000000000000;;	//    permissions for these snapshots.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * explicit: The owner of the snapshot granted create volume permissions
0000000000000000000000000000000000000000;;	//    to a specific AWS account.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * implicit: An AWS account has implicit create volume permissions for
0000000000000000000000000000000000000000;;	//    all snapshots it owns.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The list of snapshots returned can be modified by specifying snapshot IDs,
0000000000000000000000000000000000000000;;	// snapshot owners, or AWS accounts with create volume permissions. If no options
0000000000000000000000000000000000000000;;	// are specified, Amazon EC2 returns all snapshots for which you have create
0000000000000000000000000000000000000000;;	// volume permissions.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If you specify one or more snapshot IDs, only snapshots that have the specified
0000000000000000000000000000000000000000;;	// IDs are returned. If you specify an invalid snapshot ID, an error is returned.
0000000000000000000000000000000000000000;;	// If you specify a snapshot ID for which you do not have access, it is not
0000000000000000000000000000000000000000;;	// included in the returned results.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If you specify one or more snapshot owners using the OwnerIds option, only
0000000000000000000000000000000000000000;;	// snapshots from the specified owners and for which you have access are returned.
0000000000000000000000000000000000000000;;	// The results can include the AWS account IDs of the specified owners, amazon
0000000000000000000000000000000000000000;;	// for snapshots owned by Amazon, or self for snapshots that you own.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If you specify a list of restorable users, only snapshots with create snapshot
0000000000000000000000000000000000000000;;	// permissions for those users are returned. You can specify AWS account IDs
0000000000000000000000000000000000000000;;	// (if you own the snapshots), self for snapshots for which you own or have
0000000000000000000000000000000000000000;;	// explicit permissions, or all for public snapshots.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If you are describing a long list of snapshots, you can paginate the output
0000000000000000000000000000000000000000;;	// to make the list more manageable. The MaxResults parameter sets the maximum
0000000000000000000000000000000000000000;;	// number of results returned in a single page. If the list of results exceeds
0000000000000000000000000000000000000000;;	// your MaxResults value, then that number of results is returned along with
0000000000000000000000000000000000000000;;	// a NextToken value that can be passed to a subsequent DescribeSnapshots request
0000000000000000000000000000000000000000;;	// to retrieve the remaining results.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information about EBS snapshots, see Amazon EBS Snapshots (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSSnapshots.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeSnapshots for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeSnapshots
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeSnapshots(input *DescribeSnapshotsInput) (*DescribeSnapshotsOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeSnapshotsRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeSnapshotsPages iterates over the pages of a DescribeSnapshots operation,
0000000000000000000000000000000000000000;;	// calling the "fn" function with the response data for each page. To stop
0000000000000000000000000000000000000000;;	// iterating, return false from the fn function.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeSnapshots method for more information on how to use this operation.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: This operation can generate multiple requests to a service.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example iterating over at most 3 pages of a DescribeSnapshots operation.
0000000000000000000000000000000000000000;;	//    pageNum := 0
0000000000000000000000000000000000000000;;	//    err := client.DescribeSnapshotsPages(params,
0000000000000000000000000000000000000000;;	//        func(page *DescribeSnapshotsOutput, lastPage bool) bool {
0000000000000000000000000000000000000000;;	//            pageNum++
0000000000000000000000000000000000000000;;	//            fmt.Println(page)
0000000000000000000000000000000000000000;;	//            return pageNum <= 3
0000000000000000000000000000000000000000;;	//        })
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeSnapshotsPages(input *DescribeSnapshotsInput, fn func(p *DescribeSnapshotsOutput, lastPage bool) (shouldContinue bool)) error {
0000000000000000000000000000000000000000;;		page, _ := c.DescribeSnapshotsRequest(input)
0000000000000000000000000000000000000000;;		page.Handlers.Build.PushBack(request.MakeAddToUserAgentFreeFormHandler("Paginator"))
0000000000000000000000000000000000000000;;		return page.EachPage(func(p interface{}, lastPage bool) bool {
0000000000000000000000000000000000000000;;			return fn(p.(*DescribeSnapshotsOutput), lastPage)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeSpotDatafeedSubscription = "DescribeSpotDatafeedSubscription"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeSpotDatafeedSubscriptionRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeSpotDatafeedSubscription operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeSpotDatafeedSubscription for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeSpotDatafeedSubscription method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeSpotDatafeedSubscriptionRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeSpotDatafeedSubscriptionRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeSpotDatafeedSubscription
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeSpotDatafeedSubscriptionRequest(input *DescribeSpotDatafeedSubscriptionInput) (req *request.Request, output *DescribeSpotDatafeedSubscriptionOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeSpotDatafeedSubscription,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeSpotDatafeedSubscriptionInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeSpotDatafeedSubscriptionOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeSpotDatafeedSubscription API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes the data feed for Spot instances. For more information, see Spot
0000000000000000000000000000000000000000;;	// Instance Data Feed (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-data-feeds.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeSpotDatafeedSubscription for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeSpotDatafeedSubscription
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeSpotDatafeedSubscription(input *DescribeSpotDatafeedSubscriptionInput) (*DescribeSpotDatafeedSubscriptionOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeSpotDatafeedSubscriptionRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeSpotFleetInstances = "DescribeSpotFleetInstances"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeSpotFleetInstancesRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeSpotFleetInstances operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeSpotFleetInstances for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeSpotFleetInstances method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeSpotFleetInstancesRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeSpotFleetInstancesRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeSpotFleetInstances
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeSpotFleetInstancesRequest(input *DescribeSpotFleetInstancesInput) (req *request.Request, output *DescribeSpotFleetInstancesOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeSpotFleetInstances,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeSpotFleetInstancesInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeSpotFleetInstancesOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeSpotFleetInstances API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes the running instances for the specified Spot fleet.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeSpotFleetInstances for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeSpotFleetInstances
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeSpotFleetInstances(input *DescribeSpotFleetInstancesInput) (*DescribeSpotFleetInstancesOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeSpotFleetInstancesRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeSpotFleetRequestHistory = "DescribeSpotFleetRequestHistory"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeSpotFleetRequestHistoryRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeSpotFleetRequestHistory operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeSpotFleetRequestHistory for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeSpotFleetRequestHistory method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeSpotFleetRequestHistoryRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeSpotFleetRequestHistoryRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeSpotFleetRequestHistory
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeSpotFleetRequestHistoryRequest(input *DescribeSpotFleetRequestHistoryInput) (req *request.Request, output *DescribeSpotFleetRequestHistoryOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeSpotFleetRequestHistory,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeSpotFleetRequestHistoryInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeSpotFleetRequestHistoryOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeSpotFleetRequestHistory API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes the events for the specified Spot fleet request during the specified
0000000000000000000000000000000000000000;;	// time.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Spot fleet events are delayed by up to 30 seconds before they can be described.
0000000000000000000000000000000000000000;;	// This ensures that you can query by the last evaluated time and not miss a
0000000000000000000000000000000000000000;;	// recorded event.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeSpotFleetRequestHistory for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeSpotFleetRequestHistory
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeSpotFleetRequestHistory(input *DescribeSpotFleetRequestHistoryInput) (*DescribeSpotFleetRequestHistoryOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeSpotFleetRequestHistoryRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeSpotFleetRequests = "DescribeSpotFleetRequests"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeSpotFleetRequestsRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeSpotFleetRequests operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeSpotFleetRequests for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeSpotFleetRequests method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeSpotFleetRequestsRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeSpotFleetRequestsRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeSpotFleetRequests
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeSpotFleetRequestsRequest(input *DescribeSpotFleetRequestsInput) (req *request.Request, output *DescribeSpotFleetRequestsOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeSpotFleetRequests,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;			Paginator: &request.Paginator{
0000000000000000000000000000000000000000;;				InputTokens:     []string{"NextToken"},
0000000000000000000000000000000000000000;;				OutputTokens:    []string{"NextToken"},
0000000000000000000000000000000000000000;;				LimitToken:      "MaxResults",
0000000000000000000000000000000000000000;;				TruncationToken: "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeSpotFleetRequestsInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeSpotFleetRequestsOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeSpotFleetRequests API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes your Spot fleet requests.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Spot fleet requests are deleted 48 hours after they are canceled and their
0000000000000000000000000000000000000000;;	// instances are terminated.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeSpotFleetRequests for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeSpotFleetRequests
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeSpotFleetRequests(input *DescribeSpotFleetRequestsInput) (*DescribeSpotFleetRequestsOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeSpotFleetRequestsRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeSpotFleetRequestsPages iterates over the pages of a DescribeSpotFleetRequests operation,
0000000000000000000000000000000000000000;;	// calling the "fn" function with the response data for each page. To stop
0000000000000000000000000000000000000000;;	// iterating, return false from the fn function.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeSpotFleetRequests method for more information on how to use this operation.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: This operation can generate multiple requests to a service.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example iterating over at most 3 pages of a DescribeSpotFleetRequests operation.
0000000000000000000000000000000000000000;;	//    pageNum := 0
0000000000000000000000000000000000000000;;	//    err := client.DescribeSpotFleetRequestsPages(params,
0000000000000000000000000000000000000000;;	//        func(page *DescribeSpotFleetRequestsOutput, lastPage bool) bool {
0000000000000000000000000000000000000000;;	//            pageNum++
0000000000000000000000000000000000000000;;	//            fmt.Println(page)
0000000000000000000000000000000000000000;;	//            return pageNum <= 3
0000000000000000000000000000000000000000;;	//        })
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeSpotFleetRequestsPages(input *DescribeSpotFleetRequestsInput, fn func(p *DescribeSpotFleetRequestsOutput, lastPage bool) (shouldContinue bool)) error {
0000000000000000000000000000000000000000;;		page, _ := c.DescribeSpotFleetRequestsRequest(input)
0000000000000000000000000000000000000000;;		page.Handlers.Build.PushBack(request.MakeAddToUserAgentFreeFormHandler("Paginator"))
0000000000000000000000000000000000000000;;		return page.EachPage(func(p interface{}, lastPage bool) bool {
0000000000000000000000000000000000000000;;			return fn(p.(*DescribeSpotFleetRequestsOutput), lastPage)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeSpotInstanceRequests = "DescribeSpotInstanceRequests"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeSpotInstanceRequestsRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeSpotInstanceRequests operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeSpotInstanceRequests for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeSpotInstanceRequests method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeSpotInstanceRequestsRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeSpotInstanceRequestsRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeSpotInstanceRequests
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeSpotInstanceRequestsRequest(input *DescribeSpotInstanceRequestsInput) (req *request.Request, output *DescribeSpotInstanceRequestsOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeSpotInstanceRequests,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeSpotInstanceRequestsInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeSpotInstanceRequestsOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeSpotInstanceRequests API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes the Spot instance requests that belong to your account. Spot instances
0000000000000000000000000000000000000000;;	// are instances that Amazon EC2 launches when the bid price that you specify
0000000000000000000000000000000000000000;;	// exceeds the current Spot price. Amazon EC2 periodically sets the Spot price
0000000000000000000000000000000000000000;;	// based on available Spot instance capacity and current Spot instance requests.
0000000000000000000000000000000000000000;;	// For more information, see Spot Instance Requests (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-requests.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// You can use DescribeSpotInstanceRequests to find a running Spot instance
0000000000000000000000000000000000000000;;	// by examining the response. If the status of the Spot instance is fulfilled,
0000000000000000000000000000000000000000;;	// the instance ID appears in the response and contains the identifier of the
0000000000000000000000000000000000000000;;	// instance. Alternatively, you can use DescribeInstances with a filter to look
0000000000000000000000000000000000000000;;	// for instances where the instance lifecycle is spot.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Spot instance requests are deleted 4 hours after they are canceled and their
0000000000000000000000000000000000000000;;	// instances are terminated.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeSpotInstanceRequests for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeSpotInstanceRequests
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeSpotInstanceRequests(input *DescribeSpotInstanceRequestsInput) (*DescribeSpotInstanceRequestsOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeSpotInstanceRequestsRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeSpotPriceHistory = "DescribeSpotPriceHistory"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeSpotPriceHistoryRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeSpotPriceHistory operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeSpotPriceHistory for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeSpotPriceHistory method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeSpotPriceHistoryRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeSpotPriceHistoryRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeSpotPriceHistory
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeSpotPriceHistoryRequest(input *DescribeSpotPriceHistoryInput) (req *request.Request, output *DescribeSpotPriceHistoryOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeSpotPriceHistory,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;			Paginator: &request.Paginator{
0000000000000000000000000000000000000000;;				InputTokens:     []string{"NextToken"},
0000000000000000000000000000000000000000;;				OutputTokens:    []string{"NextToken"},
0000000000000000000000000000000000000000;;				LimitToken:      "MaxResults",
0000000000000000000000000000000000000000;;				TruncationToken: "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeSpotPriceHistoryInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeSpotPriceHistoryOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeSpotPriceHistory API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes the Spot price history. For more information, see Spot Instance
0000000000000000000000000000000000000000;;	// Pricing History (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-spot-instances-history.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// When you specify a start and end time, this operation returns the prices
0000000000000000000000000000000000000000;;	// of the instance types within the time range that you specified and the time
0000000000000000000000000000000000000000;;	// when the price changed. The price is valid within the time period that you
0000000000000000000000000000000000000000;;	// specified; the response merely indicates the last time that the price changed.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeSpotPriceHistory for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeSpotPriceHistory
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeSpotPriceHistory(input *DescribeSpotPriceHistoryInput) (*DescribeSpotPriceHistoryOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeSpotPriceHistoryRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeSpotPriceHistoryPages iterates over the pages of a DescribeSpotPriceHistory operation,
0000000000000000000000000000000000000000;;	// calling the "fn" function with the response data for each page. To stop
0000000000000000000000000000000000000000;;	// iterating, return false from the fn function.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeSpotPriceHistory method for more information on how to use this operation.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: This operation can generate multiple requests to a service.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example iterating over at most 3 pages of a DescribeSpotPriceHistory operation.
0000000000000000000000000000000000000000;;	//    pageNum := 0
0000000000000000000000000000000000000000;;	//    err := client.DescribeSpotPriceHistoryPages(params,
0000000000000000000000000000000000000000;;	//        func(page *DescribeSpotPriceHistoryOutput, lastPage bool) bool {
0000000000000000000000000000000000000000;;	//            pageNum++
0000000000000000000000000000000000000000;;	//            fmt.Println(page)
0000000000000000000000000000000000000000;;	//            return pageNum <= 3
0000000000000000000000000000000000000000;;	//        })
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeSpotPriceHistoryPages(input *DescribeSpotPriceHistoryInput, fn func(p *DescribeSpotPriceHistoryOutput, lastPage bool) (shouldContinue bool)) error {
0000000000000000000000000000000000000000;;		page, _ := c.DescribeSpotPriceHistoryRequest(input)
0000000000000000000000000000000000000000;;		page.Handlers.Build.PushBack(request.MakeAddToUserAgentFreeFormHandler("Paginator"))
0000000000000000000000000000000000000000;;		return page.EachPage(func(p interface{}, lastPage bool) bool {
0000000000000000000000000000000000000000;;			return fn(p.(*DescribeSpotPriceHistoryOutput), lastPage)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeStaleSecurityGroups = "DescribeStaleSecurityGroups"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeStaleSecurityGroupsRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeStaleSecurityGroups operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeStaleSecurityGroups for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeStaleSecurityGroups method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeStaleSecurityGroupsRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeStaleSecurityGroupsRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeStaleSecurityGroups
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeStaleSecurityGroupsRequest(input *DescribeStaleSecurityGroupsInput) (req *request.Request, output *DescribeStaleSecurityGroupsOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeStaleSecurityGroups,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeStaleSecurityGroupsInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeStaleSecurityGroupsOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeStaleSecurityGroups API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// [EC2-VPC only] Describes the stale security group rules for security groups
0000000000000000000000000000000000000000;;	// in a specified VPC. Rules are stale when they reference a deleted security
0000000000000000000000000000000000000000;;	// group in a peer VPC, or a security group in a peer VPC for which the VPC
0000000000000000000000000000000000000000;;	// peering connection has been deleted.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeStaleSecurityGroups for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeStaleSecurityGroups
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeStaleSecurityGroups(input *DescribeStaleSecurityGroupsInput) (*DescribeStaleSecurityGroupsOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeStaleSecurityGroupsRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeSubnets = "DescribeSubnets"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeSubnetsRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeSubnets operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeSubnets for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeSubnets method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeSubnetsRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeSubnetsRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeSubnets
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeSubnetsRequest(input *DescribeSubnetsInput) (req *request.Request, output *DescribeSubnetsOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeSubnets,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeSubnetsInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeSubnetsOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeSubnets API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes one or more of your subnets.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information about subnets, see Your VPC and Subnets (http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html)
0000000000000000000000000000000000000000;;	// in the Amazon Virtual Private Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeSubnets for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeSubnets
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeSubnets(input *DescribeSubnetsInput) (*DescribeSubnetsOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeSubnetsRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeTags = "DescribeTags"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeTagsRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeTags operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeTags for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeTags method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeTagsRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeTagsRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeTags
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeTagsRequest(input *DescribeTagsInput) (req *request.Request, output *DescribeTagsOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeTags,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;			Paginator: &request.Paginator{
0000000000000000000000000000000000000000;;				InputTokens:     []string{"NextToken"},
0000000000000000000000000000000000000000;;				OutputTokens:    []string{"NextToken"},
0000000000000000000000000000000000000000;;				LimitToken:      "MaxResults",
0000000000000000000000000000000000000000;;				TruncationToken: "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeTagsInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeTagsOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeTags API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes one or more of the tags for your EC2 resources.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information about tags, see Tagging Your Resources (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeTags for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeTags
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeTags(input *DescribeTagsInput) (*DescribeTagsOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeTagsRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeTagsPages iterates over the pages of a DescribeTags operation,
0000000000000000000000000000000000000000;;	// calling the "fn" function with the response data for each page. To stop
0000000000000000000000000000000000000000;;	// iterating, return false from the fn function.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeTags method for more information on how to use this operation.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: This operation can generate multiple requests to a service.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example iterating over at most 3 pages of a DescribeTags operation.
0000000000000000000000000000000000000000;;	//    pageNum := 0
0000000000000000000000000000000000000000;;	//    err := client.DescribeTagsPages(params,
0000000000000000000000000000000000000000;;	//        func(page *DescribeTagsOutput, lastPage bool) bool {
0000000000000000000000000000000000000000;;	//            pageNum++
0000000000000000000000000000000000000000;;	//            fmt.Println(page)
0000000000000000000000000000000000000000;;	//            return pageNum <= 3
0000000000000000000000000000000000000000;;	//        })
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeTagsPages(input *DescribeTagsInput, fn func(p *DescribeTagsOutput, lastPage bool) (shouldContinue bool)) error {
0000000000000000000000000000000000000000;;		page, _ := c.DescribeTagsRequest(input)
0000000000000000000000000000000000000000;;		page.Handlers.Build.PushBack(request.MakeAddToUserAgentFreeFormHandler("Paginator"))
0000000000000000000000000000000000000000;;		return page.EachPage(func(p interface{}, lastPage bool) bool {
0000000000000000000000000000000000000000;;			return fn(p.(*DescribeTagsOutput), lastPage)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeVolumeAttribute = "DescribeVolumeAttribute"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeVolumeAttributeRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeVolumeAttribute operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeVolumeAttribute for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeVolumeAttribute method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeVolumeAttributeRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeVolumeAttributeRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVolumeAttribute
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeVolumeAttributeRequest(input *DescribeVolumeAttributeInput) (req *request.Request, output *DescribeVolumeAttributeOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeVolumeAttribute,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeVolumeAttributeInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeVolumeAttributeOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeVolumeAttribute API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes the specified attribute of the specified volume. You can specify
0000000000000000000000000000000000000000;;	// only one attribute at a time.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information about EBS volumes, see Amazon EBS Volumes (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumes.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeVolumeAttribute for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVolumeAttribute
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeVolumeAttribute(input *DescribeVolumeAttributeInput) (*DescribeVolumeAttributeOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeVolumeAttributeRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeVolumeStatus = "DescribeVolumeStatus"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeVolumeStatusRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeVolumeStatus operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeVolumeStatus for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeVolumeStatus method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeVolumeStatusRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeVolumeStatusRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVolumeStatus
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeVolumeStatusRequest(input *DescribeVolumeStatusInput) (req *request.Request, output *DescribeVolumeStatusOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeVolumeStatus,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;			Paginator: &request.Paginator{
0000000000000000000000000000000000000000;;				InputTokens:     []string{"NextToken"},
0000000000000000000000000000000000000000;;				OutputTokens:    []string{"NextToken"},
0000000000000000000000000000000000000000;;				LimitToken:      "MaxResults",
0000000000000000000000000000000000000000;;				TruncationToken: "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeVolumeStatusInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeVolumeStatusOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeVolumeStatus API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes the status of the specified volumes. Volume status provides the
0000000000000000000000000000000000000000;;	// result of the checks performed on your volumes to determine events that can
0000000000000000000000000000000000000000;;	// impair the performance of your volumes. The performance of a volume can be
0000000000000000000000000000000000000000;;	// affected if an issue occurs on the volume's underlying host. If the volume's
0000000000000000000000000000000000000000;;	// underlying host experiences a power outage or system issue, after the system
0000000000000000000000000000000000000000;;	// is restored, there could be data inconsistencies on the volume. Volume events
0000000000000000000000000000000000000000;;	// notify you if this occurs. Volume actions notify you if any action needs
0000000000000000000000000000000000000000;;	// to be taken in response to the event.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The DescribeVolumeStatus operation provides the following information about
0000000000000000000000000000000000000000;;	// the specified volumes:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Status: Reflects the current status of the volume. The possible values are
0000000000000000000000000000000000000000;;	// ok, impaired , warning, or insufficient-data. If all checks pass, the overall
0000000000000000000000000000000000000000;;	// status of the volume is ok. If the check fails, the overall status is impaired.
0000000000000000000000000000000000000000;;	// If the status is insufficient-data, then the checks may still be taking place
0000000000000000000000000000000000000000;;	// on your volume at the time. We recommend that you retry the request. For
0000000000000000000000000000000000000000;;	// more information on volume status, see Monitoring the Status of Your Volumes
0000000000000000000000000000000000000000;;	// (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-volume-status.html).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Events: Reflect the cause of a volume status and may require you to take
0000000000000000000000000000000000000000;;	// action. For example, if your volume returns an impaired status, then the
0000000000000000000000000000000000000000;;	// volume event might be potential-data-inconsistency. This means that your
0000000000000000000000000000000000000000;;	// volume has been affected by an issue with the underlying host, has all I/O
0000000000000000000000000000000000000000;;	// operations disabled, and may have inconsistent data.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Actions: Reflect the actions you may have to take in response to an event.
0000000000000000000000000000000000000000;;	// For example, if the status of the volume is impaired and the volume event
0000000000000000000000000000000000000000;;	// shows potential-data-inconsistency, then the action shows enable-volume-io.
0000000000000000000000000000000000000000;;	// This means that you may want to enable the I/O operations for the volume
0000000000000000000000000000000000000000;;	// by calling the EnableVolumeIO action and then check the volume for data consistency.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Volume status is based on the volume status checks, and does not reflect
0000000000000000000000000000000000000000;;	// the volume state. Therefore, volume status does not indicate volumes in the
0000000000000000000000000000000000000000;;	// error state (for example, when a volume is incapable of accepting I/O.)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeVolumeStatus for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVolumeStatus
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeVolumeStatus(input *DescribeVolumeStatusInput) (*DescribeVolumeStatusOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeVolumeStatusRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeVolumeStatusPages iterates over the pages of a DescribeVolumeStatus operation,
0000000000000000000000000000000000000000;;	// calling the "fn" function with the response data for each page. To stop
0000000000000000000000000000000000000000;;	// iterating, return false from the fn function.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeVolumeStatus method for more information on how to use this operation.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: This operation can generate multiple requests to a service.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example iterating over at most 3 pages of a DescribeVolumeStatus operation.
0000000000000000000000000000000000000000;;	//    pageNum := 0
0000000000000000000000000000000000000000;;	//    err := client.DescribeVolumeStatusPages(params,
0000000000000000000000000000000000000000;;	//        func(page *DescribeVolumeStatusOutput, lastPage bool) bool {
0000000000000000000000000000000000000000;;	//            pageNum++
0000000000000000000000000000000000000000;;	//            fmt.Println(page)
0000000000000000000000000000000000000000;;	//            return pageNum <= 3
0000000000000000000000000000000000000000;;	//        })
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeVolumeStatusPages(input *DescribeVolumeStatusInput, fn func(p *DescribeVolumeStatusOutput, lastPage bool) (shouldContinue bool)) error {
0000000000000000000000000000000000000000;;		page, _ := c.DescribeVolumeStatusRequest(input)
0000000000000000000000000000000000000000;;		page.Handlers.Build.PushBack(request.MakeAddToUserAgentFreeFormHandler("Paginator"))
0000000000000000000000000000000000000000;;		return page.EachPage(func(p interface{}, lastPage bool) bool {
0000000000000000000000000000000000000000;;			return fn(p.(*DescribeVolumeStatusOutput), lastPage)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeVolumes = "DescribeVolumes"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeVolumesRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeVolumes operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeVolumes for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeVolumes method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeVolumesRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeVolumesRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVolumes
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeVolumesRequest(input *DescribeVolumesInput) (req *request.Request, output *DescribeVolumesOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeVolumes,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;			Paginator: &request.Paginator{
0000000000000000000000000000000000000000;;				InputTokens:     []string{"NextToken"},
0000000000000000000000000000000000000000;;				OutputTokens:    []string{"NextToken"},
0000000000000000000000000000000000000000;;				LimitToken:      "MaxResults",
0000000000000000000000000000000000000000;;				TruncationToken: "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeVolumesInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeVolumesOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeVolumes API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes the specified EBS volumes.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If you are describing a long list of volumes, you can paginate the output
0000000000000000000000000000000000000000;;	// to make the list more manageable. The MaxResults parameter sets the maximum
0000000000000000000000000000000000000000;;	// number of results returned in a single page. If the list of results exceeds
0000000000000000000000000000000000000000;;	// your MaxResults value, then that number of results is returned along with
0000000000000000000000000000000000000000;;	// a NextToken value that can be passed to a subsequent DescribeVolumes request
0000000000000000000000000000000000000000;;	// to retrieve the remaining results.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information about EBS volumes, see Amazon EBS Volumes (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumes.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeVolumes for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVolumes
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeVolumes(input *DescribeVolumesInput) (*DescribeVolumesOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeVolumesRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeVolumesPages iterates over the pages of a DescribeVolumes operation,
0000000000000000000000000000000000000000;;	// calling the "fn" function with the response data for each page. To stop
0000000000000000000000000000000000000000;;	// iterating, return false from the fn function.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeVolumes method for more information on how to use this operation.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: This operation can generate multiple requests to a service.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example iterating over at most 3 pages of a DescribeVolumes operation.
0000000000000000000000000000000000000000;;	//    pageNum := 0
0000000000000000000000000000000000000000;;	//    err := client.DescribeVolumesPages(params,
0000000000000000000000000000000000000000;;	//        func(page *DescribeVolumesOutput, lastPage bool) bool {
0000000000000000000000000000000000000000;;	//            pageNum++
0000000000000000000000000000000000000000;;	//            fmt.Println(page)
0000000000000000000000000000000000000000;;	//            return pageNum <= 3
0000000000000000000000000000000000000000;;	//        })
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeVolumesPages(input *DescribeVolumesInput, fn func(p *DescribeVolumesOutput, lastPage bool) (shouldContinue bool)) error {
0000000000000000000000000000000000000000;;		page, _ := c.DescribeVolumesRequest(input)
0000000000000000000000000000000000000000;;		page.Handlers.Build.PushBack(request.MakeAddToUserAgentFreeFormHandler("Paginator"))
0000000000000000000000000000000000000000;;		return page.EachPage(func(p interface{}, lastPage bool) bool {
0000000000000000000000000000000000000000;;			return fn(p.(*DescribeVolumesOutput), lastPage)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeVpcAttribute = "DescribeVpcAttribute"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeVpcAttributeRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeVpcAttribute operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeVpcAttribute for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeVpcAttribute method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeVpcAttributeRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeVpcAttributeRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVpcAttribute
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeVpcAttributeRequest(input *DescribeVpcAttributeInput) (req *request.Request, output *DescribeVpcAttributeOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeVpcAttribute,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeVpcAttributeInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeVpcAttributeOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeVpcAttribute API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes the specified attribute of the specified VPC. You can specify only
0000000000000000000000000000000000000000;;	// one attribute at a time.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeVpcAttribute for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVpcAttribute
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeVpcAttribute(input *DescribeVpcAttributeInput) (*DescribeVpcAttributeOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeVpcAttributeRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeVpcClassicLink = "DescribeVpcClassicLink"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeVpcClassicLinkRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeVpcClassicLink operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeVpcClassicLink for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeVpcClassicLink method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeVpcClassicLinkRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeVpcClassicLinkRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVpcClassicLink
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeVpcClassicLinkRequest(input *DescribeVpcClassicLinkInput) (req *request.Request, output *DescribeVpcClassicLinkOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeVpcClassicLink,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeVpcClassicLinkInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeVpcClassicLinkOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeVpcClassicLink API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes the ClassicLink status of one or more VPCs.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeVpcClassicLink for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVpcClassicLink
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeVpcClassicLink(input *DescribeVpcClassicLinkInput) (*DescribeVpcClassicLinkOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeVpcClassicLinkRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeVpcClassicLinkDnsSupport = "DescribeVpcClassicLinkDnsSupport"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeVpcClassicLinkDnsSupportRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeVpcClassicLinkDnsSupport operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeVpcClassicLinkDnsSupport for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeVpcClassicLinkDnsSupport method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeVpcClassicLinkDnsSupportRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeVpcClassicLinkDnsSupportRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVpcClassicLinkDnsSupport
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeVpcClassicLinkDnsSupportRequest(input *DescribeVpcClassicLinkDnsSupportInput) (req *request.Request, output *DescribeVpcClassicLinkDnsSupportOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeVpcClassicLinkDnsSupport,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeVpcClassicLinkDnsSupportInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeVpcClassicLinkDnsSupportOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeVpcClassicLinkDnsSupport API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes the ClassicLink DNS support status of one or more VPCs. If enabled,
0000000000000000000000000000000000000000;;	// the DNS hostname of a linked EC2-Classic instance resolves to its private
0000000000000000000000000000000000000000;;	// IP address when addressed from an instance in the VPC to which it's linked.
0000000000000000000000000000000000000000;;	// Similarly, the DNS hostname of an instance in a VPC resolves to its private
0000000000000000000000000000000000000000;;	// IP address when addressed from a linked EC2-Classic instance. For more information
0000000000000000000000000000000000000000;;	// about ClassicLink, see ClassicLink (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeVpcClassicLinkDnsSupport for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVpcClassicLinkDnsSupport
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeVpcClassicLinkDnsSupport(input *DescribeVpcClassicLinkDnsSupportInput) (*DescribeVpcClassicLinkDnsSupportOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeVpcClassicLinkDnsSupportRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeVpcEndpointServices = "DescribeVpcEndpointServices"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeVpcEndpointServicesRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeVpcEndpointServices operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeVpcEndpointServices for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeVpcEndpointServices method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeVpcEndpointServicesRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeVpcEndpointServicesRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVpcEndpointServices
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeVpcEndpointServicesRequest(input *DescribeVpcEndpointServicesInput) (req *request.Request, output *DescribeVpcEndpointServicesOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeVpcEndpointServices,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeVpcEndpointServicesInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeVpcEndpointServicesOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeVpcEndpointServices API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes all supported AWS services that can be specified when creating
0000000000000000000000000000000000000000;;	// a VPC endpoint.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeVpcEndpointServices for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVpcEndpointServices
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeVpcEndpointServices(input *DescribeVpcEndpointServicesInput) (*DescribeVpcEndpointServicesOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeVpcEndpointServicesRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeVpcEndpoints = "DescribeVpcEndpoints"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeVpcEndpointsRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeVpcEndpoints operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeVpcEndpoints for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeVpcEndpoints method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeVpcEndpointsRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeVpcEndpointsRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVpcEndpoints
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeVpcEndpointsRequest(input *DescribeVpcEndpointsInput) (req *request.Request, output *DescribeVpcEndpointsOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeVpcEndpoints,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeVpcEndpointsInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeVpcEndpointsOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeVpcEndpoints API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes one or more of your VPC endpoints.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeVpcEndpoints for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVpcEndpoints
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeVpcEndpoints(input *DescribeVpcEndpointsInput) (*DescribeVpcEndpointsOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeVpcEndpointsRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeVpcPeeringConnections = "DescribeVpcPeeringConnections"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeVpcPeeringConnectionsRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeVpcPeeringConnections operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeVpcPeeringConnections for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeVpcPeeringConnections method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeVpcPeeringConnectionsRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeVpcPeeringConnectionsRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVpcPeeringConnections
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeVpcPeeringConnectionsRequest(input *DescribeVpcPeeringConnectionsInput) (req *request.Request, output *DescribeVpcPeeringConnectionsOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeVpcPeeringConnections,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeVpcPeeringConnectionsInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeVpcPeeringConnectionsOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeVpcPeeringConnections API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes one or more of your VPC peering connections.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeVpcPeeringConnections for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVpcPeeringConnections
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeVpcPeeringConnections(input *DescribeVpcPeeringConnectionsInput) (*DescribeVpcPeeringConnectionsOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeVpcPeeringConnectionsRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeVpcs = "DescribeVpcs"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeVpcsRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeVpcs operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeVpcs for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeVpcs method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeVpcsRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeVpcsRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVpcs
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeVpcsRequest(input *DescribeVpcsInput) (req *request.Request, output *DescribeVpcsOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeVpcs,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeVpcsInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeVpcsOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeVpcs API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes one or more of your VPCs.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeVpcs for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVpcs
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeVpcs(input *DescribeVpcsInput) (*DescribeVpcsOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeVpcsRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeVpnConnections = "DescribeVpnConnections"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeVpnConnectionsRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeVpnConnections operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeVpnConnections for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeVpnConnections method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeVpnConnectionsRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeVpnConnectionsRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVpnConnections
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeVpnConnectionsRequest(input *DescribeVpnConnectionsInput) (req *request.Request, output *DescribeVpnConnectionsOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeVpnConnections,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeVpnConnectionsInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeVpnConnectionsOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeVpnConnections API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes one or more of your VPN connections.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information about VPN connections, see Adding a Hardware Virtual
0000000000000000000000000000000000000000;;	// Private Gateway to Your VPC (http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_VPN.html)
0000000000000000000000000000000000000000;;	// in the Amazon Virtual Private Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeVpnConnections for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVpnConnections
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeVpnConnections(input *DescribeVpnConnectionsInput) (*DescribeVpnConnectionsOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeVpnConnectionsRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDescribeVpnGateways = "DescribeVpnGateways"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeVpnGatewaysRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DescribeVpnGateways operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DescribeVpnGateways for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DescribeVpnGateways method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DescribeVpnGatewaysRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DescribeVpnGatewaysRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVpnGateways
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeVpnGatewaysRequest(input *DescribeVpnGatewaysInput) (req *request.Request, output *DescribeVpnGatewaysOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDescribeVpnGateways,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DescribeVpnGatewaysInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DescribeVpnGatewaysOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeVpnGateways API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Describes one or more of your virtual private gateways.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information about virtual private gateways, see Adding an IPsec
0000000000000000000000000000000000000000;;	// Hardware VPN to Your VPC (http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_VPN.html)
0000000000000000000000000000000000000000;;	// in the Amazon Virtual Private Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DescribeVpnGateways for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVpnGateways
0000000000000000000000000000000000000000;;	func (c *EC2) DescribeVpnGateways(input *DescribeVpnGatewaysInput) (*DescribeVpnGatewaysOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DescribeVpnGatewaysRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDetachClassicLinkVpc = "DetachClassicLinkVpc"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DetachClassicLinkVpcRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DetachClassicLinkVpc operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DetachClassicLinkVpc for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DetachClassicLinkVpc method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DetachClassicLinkVpcRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DetachClassicLinkVpcRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DetachClassicLinkVpc
0000000000000000000000000000000000000000;;	func (c *EC2) DetachClassicLinkVpcRequest(input *DetachClassicLinkVpcInput) (req *request.Request, output *DetachClassicLinkVpcOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDetachClassicLinkVpc,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DetachClassicLinkVpcInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DetachClassicLinkVpcOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DetachClassicLinkVpc API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unlinks (detaches) a linked EC2-Classic instance from a VPC. After the instance
0000000000000000000000000000000000000000;;	// has been unlinked, the VPC security groups are no longer associated with
0000000000000000000000000000000000000000;;	// it. An instance is automatically unlinked from a VPC when it's stopped.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DetachClassicLinkVpc for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DetachClassicLinkVpc
0000000000000000000000000000000000000000;;	func (c *EC2) DetachClassicLinkVpc(input *DetachClassicLinkVpcInput) (*DetachClassicLinkVpcOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DetachClassicLinkVpcRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDetachInternetGateway = "DetachInternetGateway"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DetachInternetGatewayRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DetachInternetGateway operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DetachInternetGateway for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DetachInternetGateway method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DetachInternetGatewayRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DetachInternetGatewayRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DetachInternetGateway
0000000000000000000000000000000000000000;;	func (c *EC2) DetachInternetGatewayRequest(input *DetachInternetGatewayInput) (req *request.Request, output *DetachInternetGatewayOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDetachInternetGateway,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DetachInternetGatewayInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DetachInternetGatewayOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DetachInternetGateway API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Detaches an Internet gateway from a VPC, disabling connectivity between the
0000000000000000000000000000000000000000;;	// Internet and the VPC. The VPC must not contain any running instances with
0000000000000000000000000000000000000000;;	// Elastic IP addresses.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DetachInternetGateway for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DetachInternetGateway
0000000000000000000000000000000000000000;;	func (c *EC2) DetachInternetGateway(input *DetachInternetGatewayInput) (*DetachInternetGatewayOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DetachInternetGatewayRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDetachNetworkInterface = "DetachNetworkInterface"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DetachNetworkInterfaceRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DetachNetworkInterface operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DetachNetworkInterface for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DetachNetworkInterface method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DetachNetworkInterfaceRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DetachNetworkInterfaceRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DetachNetworkInterface
0000000000000000000000000000000000000000;;	func (c *EC2) DetachNetworkInterfaceRequest(input *DetachNetworkInterfaceInput) (req *request.Request, output *DetachNetworkInterfaceOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDetachNetworkInterface,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DetachNetworkInterfaceInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DetachNetworkInterfaceOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DetachNetworkInterface API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Detaches a network interface from an instance.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DetachNetworkInterface for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DetachNetworkInterface
0000000000000000000000000000000000000000;;	func (c *EC2) DetachNetworkInterface(input *DetachNetworkInterfaceInput) (*DetachNetworkInterfaceOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DetachNetworkInterfaceRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDetachVolume = "DetachVolume"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DetachVolumeRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DetachVolume operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DetachVolume for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DetachVolume method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DetachVolumeRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DetachVolumeRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DetachVolume
0000000000000000000000000000000000000000;;	func (c *EC2) DetachVolumeRequest(input *DetachVolumeInput) (req *request.Request, output *VolumeAttachment) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDetachVolume,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DetachVolumeInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &VolumeAttachment{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DetachVolume API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Detaches an EBS volume from an instance. Make sure to unmount any file systems
0000000000000000000000000000000000000000;;	// on the device within your operating system before detaching the volume. Failure
0000000000000000000000000000000000000000;;	// to do so can result in the volume becoming stuck in the busy state while
0000000000000000000000000000000000000000;;	// detaching. If this happens, detachment can be delayed indefinitely until
0000000000000000000000000000000000000000;;	// you unmount the volume, force detachment, reboot the instance, or all three.
0000000000000000000000000000000000000000;;	// If an EBS volume is the root device of an instance, it can't be detached
0000000000000000000000000000000000000000;;	// while the instance is running. To detach the root volume, stop the instance
0000000000000000000000000000000000000000;;	// first.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// When a volume with an AWS Marketplace product code is detached from an instance,
0000000000000000000000000000000000000000;;	// the product code is no longer associated with the instance.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information, see Detaching an Amazon EBS Volume (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-detaching-volume.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DetachVolume for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DetachVolume
0000000000000000000000000000000000000000;;	func (c *EC2) DetachVolume(input *DetachVolumeInput) (*VolumeAttachment, error) {
0000000000000000000000000000000000000000;;		req, out := c.DetachVolumeRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDetachVpnGateway = "DetachVpnGateway"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DetachVpnGatewayRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DetachVpnGateway operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DetachVpnGateway for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DetachVpnGateway method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DetachVpnGatewayRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DetachVpnGatewayRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DetachVpnGateway
0000000000000000000000000000000000000000;;	func (c *EC2) DetachVpnGatewayRequest(input *DetachVpnGatewayInput) (req *request.Request, output *DetachVpnGatewayOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDetachVpnGateway,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DetachVpnGatewayInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DetachVpnGatewayOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DetachVpnGateway API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Detaches a virtual private gateway from a VPC. You do this if you're planning
0000000000000000000000000000000000000000;;	// to turn off the VPC and not use it anymore. You can confirm a virtual private
0000000000000000000000000000000000000000;;	// gateway has been completely detached from a VPC by describing the virtual
0000000000000000000000000000000000000000;;	// private gateway (any attachments to the virtual private gateway are also
0000000000000000000000000000000000000000;;	// described).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// You must wait for the attachment's state to switch to detached before you
0000000000000000000000000000000000000000;;	// can delete the VPC or attach a different VPC to the virtual private gateway.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DetachVpnGateway for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DetachVpnGateway
0000000000000000000000000000000000000000;;	func (c *EC2) DetachVpnGateway(input *DetachVpnGatewayInput) (*DetachVpnGatewayOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DetachVpnGatewayRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDisableVgwRoutePropagation = "DisableVgwRoutePropagation"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DisableVgwRoutePropagationRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DisableVgwRoutePropagation operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DisableVgwRoutePropagation for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DisableVgwRoutePropagation method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DisableVgwRoutePropagationRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DisableVgwRoutePropagationRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DisableVgwRoutePropagation
0000000000000000000000000000000000000000;;	func (c *EC2) DisableVgwRoutePropagationRequest(input *DisableVgwRoutePropagationInput) (req *request.Request, output *DisableVgwRoutePropagationOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDisableVgwRoutePropagation,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DisableVgwRoutePropagationInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DisableVgwRoutePropagationOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DisableVgwRoutePropagation API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Disables a virtual private gateway (VGW) from propagating routes to a specified
0000000000000000000000000000000000000000;;	// route table of a VPC.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DisableVgwRoutePropagation for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DisableVgwRoutePropagation
0000000000000000000000000000000000000000;;	func (c *EC2) DisableVgwRoutePropagation(input *DisableVgwRoutePropagationInput) (*DisableVgwRoutePropagationOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DisableVgwRoutePropagationRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDisableVpcClassicLink = "DisableVpcClassicLink"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DisableVpcClassicLinkRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DisableVpcClassicLink operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DisableVpcClassicLink for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DisableVpcClassicLink method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DisableVpcClassicLinkRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DisableVpcClassicLinkRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DisableVpcClassicLink
0000000000000000000000000000000000000000;;	func (c *EC2) DisableVpcClassicLinkRequest(input *DisableVpcClassicLinkInput) (req *request.Request, output *DisableVpcClassicLinkOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDisableVpcClassicLink,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DisableVpcClassicLinkInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DisableVpcClassicLinkOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DisableVpcClassicLink API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Disables ClassicLink for a VPC. You cannot disable ClassicLink for a VPC
0000000000000000000000000000000000000000;;	// that has EC2-Classic instances linked to it.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DisableVpcClassicLink for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DisableVpcClassicLink
0000000000000000000000000000000000000000;;	func (c *EC2) DisableVpcClassicLink(input *DisableVpcClassicLinkInput) (*DisableVpcClassicLinkOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DisableVpcClassicLinkRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDisableVpcClassicLinkDnsSupport = "DisableVpcClassicLinkDnsSupport"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DisableVpcClassicLinkDnsSupportRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DisableVpcClassicLinkDnsSupport operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DisableVpcClassicLinkDnsSupport for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DisableVpcClassicLinkDnsSupport method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DisableVpcClassicLinkDnsSupportRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DisableVpcClassicLinkDnsSupportRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DisableVpcClassicLinkDnsSupport
0000000000000000000000000000000000000000;;	func (c *EC2) DisableVpcClassicLinkDnsSupportRequest(input *DisableVpcClassicLinkDnsSupportInput) (req *request.Request, output *DisableVpcClassicLinkDnsSupportOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDisableVpcClassicLinkDnsSupport,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DisableVpcClassicLinkDnsSupportInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DisableVpcClassicLinkDnsSupportOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DisableVpcClassicLinkDnsSupport API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Disables ClassicLink DNS support for a VPC. If disabled, DNS hostnames resolve
0000000000000000000000000000000000000000;;	// to public IP addresses when addressed between a linked EC2-Classic instance
0000000000000000000000000000000000000000;;	// and instances in the VPC to which it's linked. For more information about
0000000000000000000000000000000000000000;;	// ClassicLink, see ClassicLink (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DisableVpcClassicLinkDnsSupport for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DisableVpcClassicLinkDnsSupport
0000000000000000000000000000000000000000;;	func (c *EC2) DisableVpcClassicLinkDnsSupport(input *DisableVpcClassicLinkDnsSupportInput) (*DisableVpcClassicLinkDnsSupportOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DisableVpcClassicLinkDnsSupportRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDisassociateAddress = "DisassociateAddress"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DisassociateAddressRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DisassociateAddress operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DisassociateAddress for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DisassociateAddress method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DisassociateAddressRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DisassociateAddressRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DisassociateAddress
0000000000000000000000000000000000000000;;	func (c *EC2) DisassociateAddressRequest(input *DisassociateAddressInput) (req *request.Request, output *DisassociateAddressOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDisassociateAddress,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DisassociateAddressInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DisassociateAddressOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DisassociateAddress API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Disassociates an Elastic IP address from the instance or network interface
0000000000000000000000000000000000000000;;	// it's associated with.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// An Elastic IP address is for use in either the EC2-Classic platform or in
0000000000000000000000000000000000000000;;	// a VPC. For more information, see Elastic IP Addresses (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This is an idempotent operation. If you perform the operation more than once,
0000000000000000000000000000000000000000;;	// Amazon EC2 doesn't return an error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DisassociateAddress for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DisassociateAddress
0000000000000000000000000000000000000000;;	func (c *EC2) DisassociateAddress(input *DisassociateAddressInput) (*DisassociateAddressOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DisassociateAddressRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDisassociateRouteTable = "DisassociateRouteTable"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DisassociateRouteTableRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DisassociateRouteTable operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DisassociateRouteTable for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DisassociateRouteTable method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DisassociateRouteTableRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DisassociateRouteTableRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DisassociateRouteTable
0000000000000000000000000000000000000000;;	func (c *EC2) DisassociateRouteTableRequest(input *DisassociateRouteTableInput) (req *request.Request, output *DisassociateRouteTableOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDisassociateRouteTable,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DisassociateRouteTableInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DisassociateRouteTableOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DisassociateRouteTable API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Disassociates a subnet from a route table.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// After you perform this action, the subnet no longer uses the routes in the
0000000000000000000000000000000000000000;;	// route table. Instead, it uses the routes in the VPC's main route table. For
0000000000000000000000000000000000000000;;	// more information about route tables, see Route Tables (http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Route_Tables.html)
0000000000000000000000000000000000000000;;	// in the Amazon Virtual Private Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DisassociateRouteTable for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DisassociateRouteTable
0000000000000000000000000000000000000000;;	func (c *EC2) DisassociateRouteTable(input *DisassociateRouteTableInput) (*DisassociateRouteTableOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DisassociateRouteTableRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDisassociateSubnetCidrBlock = "DisassociateSubnetCidrBlock"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DisassociateSubnetCidrBlockRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DisassociateSubnetCidrBlock operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DisassociateSubnetCidrBlock for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DisassociateSubnetCidrBlock method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DisassociateSubnetCidrBlockRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DisassociateSubnetCidrBlockRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DisassociateSubnetCidrBlock
0000000000000000000000000000000000000000;;	func (c *EC2) DisassociateSubnetCidrBlockRequest(input *DisassociateSubnetCidrBlockInput) (req *request.Request, output *DisassociateSubnetCidrBlockOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDisassociateSubnetCidrBlock,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DisassociateSubnetCidrBlockInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DisassociateSubnetCidrBlockOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DisassociateSubnetCidrBlock API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Disassociates a CIDR block from a subnet. Currently, you can disassociate
0000000000000000000000000000000000000000;;	// an IPv6 CIDR block only. You must detach or delete all gateways and resources
0000000000000000000000000000000000000000;;	// that are associated with the CIDR block before you can disassociate it.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DisassociateSubnetCidrBlock for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DisassociateSubnetCidrBlock
0000000000000000000000000000000000000000;;	func (c *EC2) DisassociateSubnetCidrBlock(input *DisassociateSubnetCidrBlockInput) (*DisassociateSubnetCidrBlockOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DisassociateSubnetCidrBlockRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDisassociateVpcCidrBlock = "DisassociateVpcCidrBlock"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DisassociateVpcCidrBlockRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DisassociateVpcCidrBlock operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DisassociateVpcCidrBlock for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DisassociateVpcCidrBlock method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DisassociateVpcCidrBlockRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DisassociateVpcCidrBlockRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DisassociateVpcCidrBlock
0000000000000000000000000000000000000000;;	func (c *EC2) DisassociateVpcCidrBlockRequest(input *DisassociateVpcCidrBlockInput) (req *request.Request, output *DisassociateVpcCidrBlockOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDisassociateVpcCidrBlock,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DisassociateVpcCidrBlockInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DisassociateVpcCidrBlockOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DisassociateVpcCidrBlock API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Disassociates a CIDR block from a VPC. Currently, you can disassociate an
0000000000000000000000000000000000000000;;	// IPv6 CIDR block only. You must detach or delete all gateways and resources
0000000000000000000000000000000000000000;;	// that are associated with the CIDR block before you can disassociate it.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation DisassociateVpcCidrBlock for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DisassociateVpcCidrBlock
0000000000000000000000000000000000000000;;	func (c *EC2) DisassociateVpcCidrBlock(input *DisassociateVpcCidrBlockInput) (*DisassociateVpcCidrBlockOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DisassociateVpcCidrBlockRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opEnableVgwRoutePropagation = "EnableVgwRoutePropagation"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EnableVgwRoutePropagationRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the EnableVgwRoutePropagation operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See EnableVgwRoutePropagation for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the EnableVgwRoutePropagation method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the EnableVgwRoutePropagationRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.EnableVgwRoutePropagationRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/EnableVgwRoutePropagation
0000000000000000000000000000000000000000;;	func (c *EC2) EnableVgwRoutePropagationRequest(input *EnableVgwRoutePropagationInput) (req *request.Request, output *EnableVgwRoutePropagationOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opEnableVgwRoutePropagation,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &EnableVgwRoutePropagationInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &EnableVgwRoutePropagationOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EnableVgwRoutePropagation API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Enables a virtual private gateway (VGW) to propagate routes to the specified
0000000000000000000000000000000000000000;;	// route table of a VPC.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation EnableVgwRoutePropagation for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/EnableVgwRoutePropagation
0000000000000000000000000000000000000000;;	func (c *EC2) EnableVgwRoutePropagation(input *EnableVgwRoutePropagationInput) (*EnableVgwRoutePropagationOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.EnableVgwRoutePropagationRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opEnableVolumeIO = "EnableVolumeIO"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EnableVolumeIORequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the EnableVolumeIO operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See EnableVolumeIO for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the EnableVolumeIO method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the EnableVolumeIORequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.EnableVolumeIORequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/EnableVolumeIO
0000000000000000000000000000000000000000;;	func (c *EC2) EnableVolumeIORequest(input *EnableVolumeIOInput) (req *request.Request, output *EnableVolumeIOOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opEnableVolumeIO,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &EnableVolumeIOInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &EnableVolumeIOOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EnableVolumeIO API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Enables I/O operations for a volume that had I/O operations disabled because
0000000000000000000000000000000000000000;;	// the data on the volume was potentially inconsistent.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation EnableVolumeIO for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/EnableVolumeIO
0000000000000000000000000000000000000000;;	func (c *EC2) EnableVolumeIO(input *EnableVolumeIOInput) (*EnableVolumeIOOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.EnableVolumeIORequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opEnableVpcClassicLink = "EnableVpcClassicLink"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EnableVpcClassicLinkRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the EnableVpcClassicLink operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See EnableVpcClassicLink for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the EnableVpcClassicLink method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the EnableVpcClassicLinkRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.EnableVpcClassicLinkRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/EnableVpcClassicLink
0000000000000000000000000000000000000000;;	func (c *EC2) EnableVpcClassicLinkRequest(input *EnableVpcClassicLinkInput) (req *request.Request, output *EnableVpcClassicLinkOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opEnableVpcClassicLink,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &EnableVpcClassicLinkInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &EnableVpcClassicLinkOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EnableVpcClassicLink API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Enables a VPC for ClassicLink. You can then link EC2-Classic instances to
0000000000000000000000000000000000000000;;	// your ClassicLink-enabled VPC to allow communication over private IP addresses.
0000000000000000000000000000000000000000;;	// You cannot enable your VPC for ClassicLink if any of your VPC's route tables
0000000000000000000000000000000000000000;;	// have existing routes for address ranges within the 10.0.0.0/8 IP address
0000000000000000000000000000000000000000;;	// range, excluding local routes for VPCs in the 10.0.0.0/16 and 10.1.0.0/16
0000000000000000000000000000000000000000;;	// IP address ranges. For more information, see ClassicLink (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation EnableVpcClassicLink for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/EnableVpcClassicLink
0000000000000000000000000000000000000000;;	func (c *EC2) EnableVpcClassicLink(input *EnableVpcClassicLinkInput) (*EnableVpcClassicLinkOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.EnableVpcClassicLinkRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opEnableVpcClassicLinkDnsSupport = "EnableVpcClassicLinkDnsSupport"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EnableVpcClassicLinkDnsSupportRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the EnableVpcClassicLinkDnsSupport operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See EnableVpcClassicLinkDnsSupport for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the EnableVpcClassicLinkDnsSupport method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the EnableVpcClassicLinkDnsSupportRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.EnableVpcClassicLinkDnsSupportRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/EnableVpcClassicLinkDnsSupport
0000000000000000000000000000000000000000;;	func (c *EC2) EnableVpcClassicLinkDnsSupportRequest(input *EnableVpcClassicLinkDnsSupportInput) (req *request.Request, output *EnableVpcClassicLinkDnsSupportOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opEnableVpcClassicLinkDnsSupport,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &EnableVpcClassicLinkDnsSupportInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &EnableVpcClassicLinkDnsSupportOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EnableVpcClassicLinkDnsSupport API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Enables a VPC to support DNS hostname resolution for ClassicLink. If enabled,
0000000000000000000000000000000000000000;;	// the DNS hostname of a linked EC2-Classic instance resolves to its private
0000000000000000000000000000000000000000;;	// IP address when addressed from an instance in the VPC to which it's linked.
0000000000000000000000000000000000000000;;	// Similarly, the DNS hostname of an instance in a VPC resolves to its private
0000000000000000000000000000000000000000;;	// IP address when addressed from a linked EC2-Classic instance. For more information
0000000000000000000000000000000000000000;;	// about ClassicLink, see ClassicLink (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation EnableVpcClassicLinkDnsSupport for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/EnableVpcClassicLinkDnsSupport
0000000000000000000000000000000000000000;;	func (c *EC2) EnableVpcClassicLinkDnsSupport(input *EnableVpcClassicLinkDnsSupportInput) (*EnableVpcClassicLinkDnsSupportOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.EnableVpcClassicLinkDnsSupportRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opGetConsoleOutput = "GetConsoleOutput"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetConsoleOutputRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the GetConsoleOutput operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See GetConsoleOutput for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the GetConsoleOutput method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the GetConsoleOutputRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.GetConsoleOutputRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/GetConsoleOutput
0000000000000000000000000000000000000000;;	func (c *EC2) GetConsoleOutputRequest(input *GetConsoleOutputInput) (req *request.Request, output *GetConsoleOutputOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opGetConsoleOutput,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &GetConsoleOutputInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &GetConsoleOutputOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetConsoleOutput API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Gets the console output for the specified instance.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Instances do not have a physical monitor through which you can view their
0000000000000000000000000000000000000000;;	// console output. They also lack physical controls that allow you to power
0000000000000000000000000000000000000000;;	// up, reboot, or shut them down. To allow these actions, we provide them through
0000000000000000000000000000000000000000;;	// the Amazon EC2 API and command line interface.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Instance console output is buffered and posted shortly after instance boot,
0000000000000000000000000000000000000000;;	// reboot, and termination. Amazon EC2 preserves the most recent 64 KB output
0000000000000000000000000000000000000000;;	// which is available for at least one hour after the most recent post.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For Linux instances, the instance console output displays the exact console
0000000000000000000000000000000000000000;;	// output that would normally be displayed on a physical monitor attached to
0000000000000000000000000000000000000000;;	// a computer. This output is buffered because the instance produces it and
0000000000000000000000000000000000000000;;	// then posts it to a store where the instance's owner can retrieve it.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For Windows instances, the instance console output includes output from the
0000000000000000000000000000000000000000;;	// EC2Config service.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation GetConsoleOutput for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/GetConsoleOutput
0000000000000000000000000000000000000000;;	func (c *EC2) GetConsoleOutput(input *GetConsoleOutputInput) (*GetConsoleOutputOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.GetConsoleOutputRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opGetConsoleScreenshot = "GetConsoleScreenshot"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetConsoleScreenshotRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the GetConsoleScreenshot operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See GetConsoleScreenshot for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the GetConsoleScreenshot method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the GetConsoleScreenshotRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.GetConsoleScreenshotRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/GetConsoleScreenshot
0000000000000000000000000000000000000000;;	func (c *EC2) GetConsoleScreenshotRequest(input *GetConsoleScreenshotInput) (req *request.Request, output *GetConsoleScreenshotOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opGetConsoleScreenshot,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &GetConsoleScreenshotInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &GetConsoleScreenshotOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetConsoleScreenshot API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Retrieve a JPG-format screenshot of a running instance to help with troubleshooting.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The returned content is Base64-encoded.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation GetConsoleScreenshot for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/GetConsoleScreenshot
0000000000000000000000000000000000000000;;	func (c *EC2) GetConsoleScreenshot(input *GetConsoleScreenshotInput) (*GetConsoleScreenshotOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.GetConsoleScreenshotRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opGetHostReservationPurchasePreview = "GetHostReservationPurchasePreview"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetHostReservationPurchasePreviewRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the GetHostReservationPurchasePreview operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See GetHostReservationPurchasePreview for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the GetHostReservationPurchasePreview method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the GetHostReservationPurchasePreviewRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.GetHostReservationPurchasePreviewRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/GetHostReservationPurchasePreview
0000000000000000000000000000000000000000;;	func (c *EC2) GetHostReservationPurchasePreviewRequest(input *GetHostReservationPurchasePreviewInput) (req *request.Request, output *GetHostReservationPurchasePreviewOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opGetHostReservationPurchasePreview,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &GetHostReservationPurchasePreviewInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &GetHostReservationPurchasePreviewOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetHostReservationPurchasePreview API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Preview a reservation purchase with configurations that match those of your
0000000000000000000000000000000000000000;;	// Dedicated Host. You must have active Dedicated Hosts in your account before
0000000000000000000000000000000000000000;;	// you purchase a reservation.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This is a preview of the PurchaseHostReservation action and does not result
0000000000000000000000000000000000000000;;	// in the offering being purchased.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation GetHostReservationPurchasePreview for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/GetHostReservationPurchasePreview
0000000000000000000000000000000000000000;;	func (c *EC2) GetHostReservationPurchasePreview(input *GetHostReservationPurchasePreviewInput) (*GetHostReservationPurchasePreviewOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.GetHostReservationPurchasePreviewRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opGetPasswordData = "GetPasswordData"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetPasswordDataRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the GetPasswordData operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See GetPasswordData for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the GetPasswordData method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the GetPasswordDataRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.GetPasswordDataRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/GetPasswordData
0000000000000000000000000000000000000000;;	func (c *EC2) GetPasswordDataRequest(input *GetPasswordDataInput) (req *request.Request, output *GetPasswordDataOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opGetPasswordData,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &GetPasswordDataInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &GetPasswordDataOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetPasswordData API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Retrieves the encrypted administrator password for an instance running Windows.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The Windows password is generated at boot if the EC2Config service plugin,
0000000000000000000000000000000000000000;;	// Ec2SetPassword, is enabled. This usually only happens the first time an AMI
0000000000000000000000000000000000000000;;	// is launched, and then Ec2SetPassword is automatically disabled. The password
0000000000000000000000000000000000000000;;	// is not generated for rebundled AMIs unless Ec2SetPassword is enabled before
0000000000000000000000000000000000000000;;	// bundling.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The password is encrypted using the key pair that you specified when you
0000000000000000000000000000000000000000;;	// launched the instance. You must provide the corresponding key pair file.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Password generation and encryption takes a few moments. We recommend that
0000000000000000000000000000000000000000;;	// you wait up to 15 minutes after launching an instance before trying to retrieve
0000000000000000000000000000000000000000;;	// the generated password.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation GetPasswordData for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/GetPasswordData
0000000000000000000000000000000000000000;;	func (c *EC2) GetPasswordData(input *GetPasswordDataInput) (*GetPasswordDataOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.GetPasswordDataRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opGetReservedInstancesExchangeQuote = "GetReservedInstancesExchangeQuote"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetReservedInstancesExchangeQuoteRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the GetReservedInstancesExchangeQuote operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See GetReservedInstancesExchangeQuote for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the GetReservedInstancesExchangeQuote method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the GetReservedInstancesExchangeQuoteRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.GetReservedInstancesExchangeQuoteRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/GetReservedInstancesExchangeQuote
0000000000000000000000000000000000000000;;	func (c *EC2) GetReservedInstancesExchangeQuoteRequest(input *GetReservedInstancesExchangeQuoteInput) (req *request.Request, output *GetReservedInstancesExchangeQuoteOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opGetReservedInstancesExchangeQuote,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &GetReservedInstancesExchangeQuoteInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &GetReservedInstancesExchangeQuoteOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetReservedInstancesExchangeQuote API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns details about the values and term of your specified Convertible Reserved
0000000000000000000000000000000000000000;;	// Instances. When a target configuration is specified, it returns information
0000000000000000000000000000000000000000;;	// about whether the exchange is valid and can be performed.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation GetReservedInstancesExchangeQuote for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/GetReservedInstancesExchangeQuote
0000000000000000000000000000000000000000;;	func (c *EC2) GetReservedInstancesExchangeQuote(input *GetReservedInstancesExchangeQuoteInput) (*GetReservedInstancesExchangeQuoteOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.GetReservedInstancesExchangeQuoteRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opImportImage = "ImportImage"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImportImageRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ImportImage operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ImportImage for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ImportImage method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ImportImageRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ImportImageRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ImportImage
0000000000000000000000000000000000000000;;	func (c *EC2) ImportImageRequest(input *ImportImageInput) (req *request.Request, output *ImportImageOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opImportImage,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ImportImageInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ImportImageOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImportImage API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Import single or multi-volume disk images or EBS snapshots into an Amazon
0000000000000000000000000000000000000000;;	// Machine Image (AMI). For more information, see Importing a VM as an Image
0000000000000000000000000000000000000000;;	// Using VM Import/Export (http://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-image-import.html)
0000000000000000000000000000000000000000;;	// in the VM Import/Export User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation ImportImage for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ImportImage
0000000000000000000000000000000000000000;;	func (c *EC2) ImportImage(input *ImportImageInput) (*ImportImageOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ImportImageRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opImportInstance = "ImportInstance"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImportInstanceRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ImportInstance operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ImportInstance for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ImportInstance method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ImportInstanceRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ImportInstanceRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ImportInstance
0000000000000000000000000000000000000000;;	func (c *EC2) ImportInstanceRequest(input *ImportInstanceInput) (req *request.Request, output *ImportInstanceOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opImportInstance,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ImportInstanceInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ImportInstanceOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImportInstance API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creates an import instance task using metadata from the specified disk image.
0000000000000000000000000000000000000000;;	// ImportInstance only supports single-volume VMs. To import multi-volume VMs,
0000000000000000000000000000000000000000;;	// use ImportImage. For more information, see Importing a Virtual Machine Using
0000000000000000000000000000000000000000;;	// the Amazon EC2 CLI (http://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/ec2-cli-vmimport-export.html).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For information about the import manifest referenced by this API action,
0000000000000000000000000000000000000000;;	// see VM Import Manifest (http://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation ImportInstance for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ImportInstance
0000000000000000000000000000000000000000;;	func (c *EC2) ImportInstance(input *ImportInstanceInput) (*ImportInstanceOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ImportInstanceRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opImportKeyPair = "ImportKeyPair"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImportKeyPairRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ImportKeyPair operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ImportKeyPair for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ImportKeyPair method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ImportKeyPairRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ImportKeyPairRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ImportKeyPair
0000000000000000000000000000000000000000;;	func (c *EC2) ImportKeyPairRequest(input *ImportKeyPairInput) (req *request.Request, output *ImportKeyPairOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opImportKeyPair,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ImportKeyPairInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ImportKeyPairOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImportKeyPair API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Imports the public key from an RSA key pair that you created with a third-party
0000000000000000000000000000000000000000;;	// tool. Compare this with CreateKeyPair, in which AWS creates the key pair
0000000000000000000000000000000000000000;;	// and gives the keys to you (AWS keeps a copy of the public key). With ImportKeyPair,
0000000000000000000000000000000000000000;;	// you create the key pair and give AWS just the public key. The private key
0000000000000000000000000000000000000000;;	// is never transferred between you and AWS.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information about key pairs, see Key Pairs (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation ImportKeyPair for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ImportKeyPair
0000000000000000000000000000000000000000;;	func (c *EC2) ImportKeyPair(input *ImportKeyPairInput) (*ImportKeyPairOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ImportKeyPairRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opImportSnapshot = "ImportSnapshot"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImportSnapshotRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ImportSnapshot operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ImportSnapshot for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ImportSnapshot method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ImportSnapshotRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ImportSnapshotRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ImportSnapshot
0000000000000000000000000000000000000000;;	func (c *EC2) ImportSnapshotRequest(input *ImportSnapshotInput) (req *request.Request, output *ImportSnapshotOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opImportSnapshot,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ImportSnapshotInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ImportSnapshotOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImportSnapshot API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Imports a disk into an EBS snapshot.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation ImportSnapshot for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ImportSnapshot
0000000000000000000000000000000000000000;;	func (c *EC2) ImportSnapshot(input *ImportSnapshotInput) (*ImportSnapshotOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ImportSnapshotRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opImportVolume = "ImportVolume"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImportVolumeRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ImportVolume operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ImportVolume for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ImportVolume method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ImportVolumeRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ImportVolumeRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ImportVolume
0000000000000000000000000000000000000000;;	func (c *EC2) ImportVolumeRequest(input *ImportVolumeInput) (req *request.Request, output *ImportVolumeOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opImportVolume,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ImportVolumeInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ImportVolumeOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImportVolume API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creates an import volume task using metadata from the specified disk image.For
0000000000000000000000000000000000000000;;	// more information, see Importing Disks to Amazon EBS (http://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/importing-your-volumes-into-amazon-ebs.html).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For information about the import manifest referenced by this API action,
0000000000000000000000000000000000000000;;	// see VM Import Manifest (http://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation ImportVolume for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ImportVolume
0000000000000000000000000000000000000000;;	func (c *EC2) ImportVolume(input *ImportVolumeInput) (*ImportVolumeOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ImportVolumeRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opModifyHosts = "ModifyHosts"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ModifyHostsRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ModifyHosts operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ModifyHosts for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ModifyHosts method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ModifyHostsRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ModifyHostsRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyHosts
0000000000000000000000000000000000000000;;	func (c *EC2) ModifyHostsRequest(input *ModifyHostsInput) (req *request.Request, output *ModifyHostsOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opModifyHosts,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ModifyHostsInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ModifyHostsOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ModifyHosts API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Modify the auto-placement setting of a Dedicated Host. When auto-placement
0000000000000000000000000000000000000000;;	// is enabled, AWS will place instances that you launch with a tenancy of host,
0000000000000000000000000000000000000000;;	// but without targeting a specific host ID, onto any available Dedicated Host
0000000000000000000000000000000000000000;;	// in your account which has auto-placement enabled. When auto-placement is
0000000000000000000000000000000000000000;;	// disabled, you need to provide a host ID if you want the instance to launch
0000000000000000000000000000000000000000;;	// onto a specific host. If no host ID is provided, the instance will be launched
0000000000000000000000000000000000000000;;	// onto a suitable host which has auto-placement enabled.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation ModifyHosts for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyHosts
0000000000000000000000000000000000000000;;	func (c *EC2) ModifyHosts(input *ModifyHostsInput) (*ModifyHostsOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ModifyHostsRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opModifyIdFormat = "ModifyIdFormat"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ModifyIdFormatRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ModifyIdFormat operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ModifyIdFormat for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ModifyIdFormat method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ModifyIdFormatRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ModifyIdFormatRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyIdFormat
0000000000000000000000000000000000000000;;	func (c *EC2) ModifyIdFormatRequest(input *ModifyIdFormatInput) (req *request.Request, output *ModifyIdFormatOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opModifyIdFormat,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ModifyIdFormatInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ModifyIdFormatOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ModifyIdFormat API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Modifies the ID format for the specified resource on a per-region basis.
0000000000000000000000000000000000000000;;	// You can specify that resources should receive longer IDs (17-character IDs)
0000000000000000000000000000000000000000;;	// when they are created. The following resource types support longer IDs: instance
0000000000000000000000000000000000000000;;	// | reservation | snapshot | volume.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This setting applies to the IAM user who makes the request; it does not apply
0000000000000000000000000000000000000000;;	// to the entire AWS account. By default, an IAM user defaults to the same settings
0000000000000000000000000000000000000000;;	// as the root user. If you're using this action as the root user, then these
0000000000000000000000000000000000000000;;	// settings apply to the entire account, unless an IAM user explicitly overrides
0000000000000000000000000000000000000000;;	// these settings for themselves. For more information, see Resource IDs (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Resources created with longer IDs are visible to all IAM roles and users,
0000000000000000000000000000000000000000;;	// regardless of these settings and provided that they have permission to use
0000000000000000000000000000000000000000;;	// the relevant Describe command for the resource type.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation ModifyIdFormat for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyIdFormat
0000000000000000000000000000000000000000;;	func (c *EC2) ModifyIdFormat(input *ModifyIdFormatInput) (*ModifyIdFormatOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ModifyIdFormatRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opModifyIdentityIdFormat = "ModifyIdentityIdFormat"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ModifyIdentityIdFormatRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ModifyIdentityIdFormat operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ModifyIdentityIdFormat for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ModifyIdentityIdFormat method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ModifyIdentityIdFormatRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ModifyIdentityIdFormatRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyIdentityIdFormat
0000000000000000000000000000000000000000;;	func (c *EC2) ModifyIdentityIdFormatRequest(input *ModifyIdentityIdFormatInput) (req *request.Request, output *ModifyIdentityIdFormatOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opModifyIdentityIdFormat,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ModifyIdentityIdFormatInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ModifyIdentityIdFormatOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ModifyIdentityIdFormat API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Modifies the ID format of a resource for a specified IAM user, IAM role,
0000000000000000000000000000000000000000;;	// or the root user for an account; or all IAM users, IAM roles, and the root
0000000000000000000000000000000000000000;;	// user for an account. You can specify that resources should receive longer
0000000000000000000000000000000000000000;;	// IDs (17-character IDs) when they are created.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The following resource types support longer IDs: instance | reservation |
0000000000000000000000000000000000000000;;	// snapshot | volume. For more information, see Resource IDs (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This setting applies to the principal specified in the request; it does not
0000000000000000000000000000000000000000;;	// apply to the principal that makes the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Resources created with longer IDs are visible to all IAM roles and users,
0000000000000000000000000000000000000000;;	// regardless of these settings and provided that they have permission to use
0000000000000000000000000000000000000000;;	// the relevant Describe command for the resource type.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation ModifyIdentityIdFormat for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyIdentityIdFormat
0000000000000000000000000000000000000000;;	func (c *EC2) ModifyIdentityIdFormat(input *ModifyIdentityIdFormatInput) (*ModifyIdentityIdFormatOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ModifyIdentityIdFormatRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opModifyImageAttribute = "ModifyImageAttribute"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ModifyImageAttributeRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ModifyImageAttribute operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ModifyImageAttribute for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ModifyImageAttribute method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ModifyImageAttributeRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ModifyImageAttributeRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyImageAttribute
0000000000000000000000000000000000000000;;	func (c *EC2) ModifyImageAttributeRequest(input *ModifyImageAttributeInput) (req *request.Request, output *ModifyImageAttributeOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opModifyImageAttribute,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ModifyImageAttributeInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ModifyImageAttributeOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ModifyImageAttribute API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Modifies the specified attribute of the specified AMI. You can specify only
0000000000000000000000000000000000000000;;	// one attribute at a time.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// AWS Marketplace product codes cannot be modified. Images with an AWS Marketplace
0000000000000000000000000000000000000000;;	// product code cannot be made public.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The SriovNetSupport enhanced networking attribute cannot be changed using
0000000000000000000000000000000000000000;;	// this command. Instead, enable SriovNetSupport on an instance and create an
0000000000000000000000000000000000000000;;	// AMI from the instance. This will result in an image with SriovNetSupport
0000000000000000000000000000000000000000;;	// enabled.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation ModifyImageAttribute for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyImageAttribute
0000000000000000000000000000000000000000;;	func (c *EC2) ModifyImageAttribute(input *ModifyImageAttributeInput) (*ModifyImageAttributeOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ModifyImageAttributeRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opModifyInstanceAttribute = "ModifyInstanceAttribute"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ModifyInstanceAttributeRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ModifyInstanceAttribute operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ModifyInstanceAttribute for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ModifyInstanceAttribute method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ModifyInstanceAttributeRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ModifyInstanceAttributeRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyInstanceAttribute
0000000000000000000000000000000000000000;;	func (c *EC2) ModifyInstanceAttributeRequest(input *ModifyInstanceAttributeInput) (req *request.Request, output *ModifyInstanceAttributeOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opModifyInstanceAttribute,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ModifyInstanceAttributeInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ModifyInstanceAttributeOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ModifyInstanceAttribute API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Modifies the specified attribute of the specified instance. You can specify
0000000000000000000000000000000000000000;;	// only one attribute at a time.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// To modify some attributes, the instance must be stopped. For more information,
0000000000000000000000000000000000000000;;	// see Modifying Attributes of a Stopped Instance (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_ChangingAttributesWhileInstanceStopped.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation ModifyInstanceAttribute for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyInstanceAttribute
0000000000000000000000000000000000000000;;	func (c *EC2) ModifyInstanceAttribute(input *ModifyInstanceAttributeInput) (*ModifyInstanceAttributeOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ModifyInstanceAttributeRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opModifyInstancePlacement = "ModifyInstancePlacement"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ModifyInstancePlacementRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ModifyInstancePlacement operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ModifyInstancePlacement for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ModifyInstancePlacement method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ModifyInstancePlacementRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ModifyInstancePlacementRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyInstancePlacement
0000000000000000000000000000000000000000;;	func (c *EC2) ModifyInstancePlacementRequest(input *ModifyInstancePlacementInput) (req *request.Request, output *ModifyInstancePlacementOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opModifyInstancePlacement,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ModifyInstancePlacementInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ModifyInstancePlacementOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ModifyInstancePlacement API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Set the instance affinity value for a specific stopped instance and modify
0000000000000000000000000000000000000000;;	// the instance tenancy setting.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Instance affinity is disabled by default. When instance affinity is host
0000000000000000000000000000000000000000;;	// and it is not associated with a specific Dedicated Host, the next time it
0000000000000000000000000000000000000000;;	// is launched it will automatically be associated with the host it lands on.
0000000000000000000000000000000000000000;;	// This relationship will persist if the instance is stopped/started, or rebooted.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// You can modify the host ID associated with a stopped instance. If a stopped
0000000000000000000000000000000000000000;;	// instance has a new host ID association, the instance will target that host
0000000000000000000000000000000000000000;;	// when restarted.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// You can modify the tenancy of a stopped instance with a tenancy of host or
0000000000000000000000000000000000000000;;	// dedicated.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Affinity, hostID, and tenancy are not required parameters, but at least one
0000000000000000000000000000000000000000;;	// of them must be specified in the request. Affinity and tenancy can be modified
0000000000000000000000000000000000000000;;	// in the same request, but tenancy can only be modified on instances that are
0000000000000000000000000000000000000000;;	// stopped.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation ModifyInstancePlacement for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyInstancePlacement
0000000000000000000000000000000000000000;;	func (c *EC2) ModifyInstancePlacement(input *ModifyInstancePlacementInput) (*ModifyInstancePlacementOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ModifyInstancePlacementRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opModifyNetworkInterfaceAttribute = "ModifyNetworkInterfaceAttribute"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ModifyNetworkInterfaceAttributeRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ModifyNetworkInterfaceAttribute operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ModifyNetworkInterfaceAttribute for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ModifyNetworkInterfaceAttribute method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ModifyNetworkInterfaceAttributeRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ModifyNetworkInterfaceAttributeRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyNetworkInterfaceAttribute
0000000000000000000000000000000000000000;;	func (c *EC2) ModifyNetworkInterfaceAttributeRequest(input *ModifyNetworkInterfaceAttributeInput) (req *request.Request, output *ModifyNetworkInterfaceAttributeOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opModifyNetworkInterfaceAttribute,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ModifyNetworkInterfaceAttributeInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ModifyNetworkInterfaceAttributeOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ModifyNetworkInterfaceAttribute API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Modifies the specified network interface attribute. You can specify only
0000000000000000000000000000000000000000;;	// one attribute at a time.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation ModifyNetworkInterfaceAttribute for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyNetworkInterfaceAttribute
0000000000000000000000000000000000000000;;	func (c *EC2) ModifyNetworkInterfaceAttribute(input *ModifyNetworkInterfaceAttributeInput) (*ModifyNetworkInterfaceAttributeOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ModifyNetworkInterfaceAttributeRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opModifyReservedInstances = "ModifyReservedInstances"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ModifyReservedInstancesRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ModifyReservedInstances operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ModifyReservedInstances for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ModifyReservedInstances method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ModifyReservedInstancesRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ModifyReservedInstancesRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyReservedInstances
0000000000000000000000000000000000000000;;	func (c *EC2) ModifyReservedInstancesRequest(input *ModifyReservedInstancesInput) (req *request.Request, output *ModifyReservedInstancesOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opModifyReservedInstances,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ModifyReservedInstancesInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ModifyReservedInstancesOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ModifyReservedInstances API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Modifies the Availability Zone, instance count, instance type, or network
0000000000000000000000000000000000000000;;	// platform (EC2-Classic or EC2-VPC) of your Standard Reserved Instances. The
0000000000000000000000000000000000000000;;	// Reserved Instances to be modified must be identical, except for Availability
0000000000000000000000000000000000000000;;	// Zone, network platform, and instance type.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information, see Modifying Reserved Instances (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-modifying.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation ModifyReservedInstances for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyReservedInstances
0000000000000000000000000000000000000000;;	func (c *EC2) ModifyReservedInstances(input *ModifyReservedInstancesInput) (*ModifyReservedInstancesOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ModifyReservedInstancesRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opModifySnapshotAttribute = "ModifySnapshotAttribute"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ModifySnapshotAttributeRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ModifySnapshotAttribute operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ModifySnapshotAttribute for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ModifySnapshotAttribute method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ModifySnapshotAttributeRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ModifySnapshotAttributeRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifySnapshotAttribute
0000000000000000000000000000000000000000;;	func (c *EC2) ModifySnapshotAttributeRequest(input *ModifySnapshotAttributeInput) (req *request.Request, output *ModifySnapshotAttributeOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opModifySnapshotAttribute,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ModifySnapshotAttributeInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ModifySnapshotAttributeOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ModifySnapshotAttribute API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Adds or removes permission settings for the specified snapshot. You may add
0000000000000000000000000000000000000000;;	// or remove specified AWS account IDs from a snapshot's list of create volume
0000000000000000000000000000000000000000;;	// permissions, but you cannot do both in a single API call. If you need to
0000000000000000000000000000000000000000;;	// both add and remove account IDs for a snapshot, you must use multiple API
0000000000000000000000000000000000000000;;	// calls.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Encrypted snapshots and snapshots with AWS Marketplace product codes cannot
0000000000000000000000000000000000000000;;	// be made public. Snapshots encrypted with your default CMK cannot be shared
0000000000000000000000000000000000000000;;	// with other accounts.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information on modifying snapshot permissions, see Sharing Snapshots
0000000000000000000000000000000000000000;;	// (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-modifying-snapshot-permissions.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation ModifySnapshotAttribute for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifySnapshotAttribute
0000000000000000000000000000000000000000;;	func (c *EC2) ModifySnapshotAttribute(input *ModifySnapshotAttributeInput) (*ModifySnapshotAttributeOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ModifySnapshotAttributeRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opModifySpotFleetRequest = "ModifySpotFleetRequest"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ModifySpotFleetRequestRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ModifySpotFleetRequest operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ModifySpotFleetRequest for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ModifySpotFleetRequest method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ModifySpotFleetRequestRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ModifySpotFleetRequestRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifySpotFleetRequest
0000000000000000000000000000000000000000;;	func (c *EC2) ModifySpotFleetRequestRequest(input *ModifySpotFleetRequestInput) (req *request.Request, output *ModifySpotFleetRequestOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opModifySpotFleetRequest,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ModifySpotFleetRequestInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ModifySpotFleetRequestOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ModifySpotFleetRequest API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Modifies the specified Spot fleet request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// While the Spot fleet request is being modified, it is in the modifying state.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// To scale up your Spot fleet, increase its target capacity. The Spot fleet
0000000000000000000000000000000000000000;;	// launches the additional Spot instances according to the allocation strategy
0000000000000000000000000000000000000000;;	// for the Spot fleet request. If the allocation strategy is lowestPrice, the
0000000000000000000000000000000000000000;;	// Spot fleet launches instances using the Spot pool with the lowest price.
0000000000000000000000000000000000000000;;	// If the allocation strategy is diversified, the Spot fleet distributes the
0000000000000000000000000000000000000000;;	// instances across the Spot pools.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// To scale down your Spot fleet, decrease its target capacity. First, the Spot
0000000000000000000000000000000000000000;;	// fleet cancels any open bids that exceed the new target capacity. You can
0000000000000000000000000000000000000000;;	// request that the Spot fleet terminate Spot instances until the size of the
0000000000000000000000000000000000000000;;	// fleet no longer exceeds the new target capacity. If the allocation strategy
0000000000000000000000000000000000000000;;	// is lowestPrice, the Spot fleet terminates the instances with the highest
0000000000000000000000000000000000000000;;	// price per unit. If the allocation strategy is diversified, the Spot fleet
0000000000000000000000000000000000000000;;	// terminates instances across the Spot pools. Alternatively, you can request
0000000000000000000000000000000000000000;;	// that the Spot fleet keep the fleet at its current size, but not replace any
0000000000000000000000000000000000000000;;	// Spot instances that are interrupted or that you terminate manually.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation ModifySpotFleetRequest for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifySpotFleetRequest
0000000000000000000000000000000000000000;;	func (c *EC2) ModifySpotFleetRequest(input *ModifySpotFleetRequestInput) (*ModifySpotFleetRequestOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ModifySpotFleetRequestRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opModifySubnetAttribute = "ModifySubnetAttribute"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ModifySubnetAttributeRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ModifySubnetAttribute operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ModifySubnetAttribute for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ModifySubnetAttribute method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ModifySubnetAttributeRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ModifySubnetAttributeRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifySubnetAttribute
0000000000000000000000000000000000000000;;	func (c *EC2) ModifySubnetAttributeRequest(input *ModifySubnetAttributeInput) (req *request.Request, output *ModifySubnetAttributeOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opModifySubnetAttribute,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ModifySubnetAttributeInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ModifySubnetAttributeOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ModifySubnetAttribute API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Modifies a subnet attribute. You can only modify one attribute at a time.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation ModifySubnetAttribute for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifySubnetAttribute
0000000000000000000000000000000000000000;;	func (c *EC2) ModifySubnetAttribute(input *ModifySubnetAttributeInput) (*ModifySubnetAttributeOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ModifySubnetAttributeRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opModifyVolumeAttribute = "ModifyVolumeAttribute"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ModifyVolumeAttributeRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ModifyVolumeAttribute operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ModifyVolumeAttribute for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ModifyVolumeAttribute method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ModifyVolumeAttributeRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ModifyVolumeAttributeRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyVolumeAttribute
0000000000000000000000000000000000000000;;	func (c *EC2) ModifyVolumeAttributeRequest(input *ModifyVolumeAttributeInput) (req *request.Request, output *ModifyVolumeAttributeOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opModifyVolumeAttribute,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ModifyVolumeAttributeInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ModifyVolumeAttributeOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ModifyVolumeAttribute API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Modifies a volume attribute.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// By default, all I/O operations for the volume are suspended when the data
0000000000000000000000000000000000000000;;	// on the volume is determined to be potentially inconsistent, to prevent undetectable,
0000000000000000000000000000000000000000;;	// latent data corruption. The I/O access to the volume can be resumed by first
0000000000000000000000000000000000000000;;	// enabling I/O access and then checking the data consistency on your volume.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// You can change the default behavior to resume I/O operations. We recommend
0000000000000000000000000000000000000000;;	// that you change this only for boot volumes or for volumes that are stateless
0000000000000000000000000000000000000000;;	// or disposable.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation ModifyVolumeAttribute for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyVolumeAttribute
0000000000000000000000000000000000000000;;	func (c *EC2) ModifyVolumeAttribute(input *ModifyVolumeAttributeInput) (*ModifyVolumeAttributeOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ModifyVolumeAttributeRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opModifyVpcAttribute = "ModifyVpcAttribute"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ModifyVpcAttributeRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ModifyVpcAttribute operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ModifyVpcAttribute for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ModifyVpcAttribute method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ModifyVpcAttributeRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ModifyVpcAttributeRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyVpcAttribute
0000000000000000000000000000000000000000;;	func (c *EC2) ModifyVpcAttributeRequest(input *ModifyVpcAttributeInput) (req *request.Request, output *ModifyVpcAttributeOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opModifyVpcAttribute,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ModifyVpcAttributeInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ModifyVpcAttributeOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ModifyVpcAttribute API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Modifies the specified attribute of the specified VPC.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation ModifyVpcAttribute for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyVpcAttribute
0000000000000000000000000000000000000000;;	func (c *EC2) ModifyVpcAttribute(input *ModifyVpcAttributeInput) (*ModifyVpcAttributeOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ModifyVpcAttributeRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opModifyVpcEndpoint = "ModifyVpcEndpoint"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ModifyVpcEndpointRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ModifyVpcEndpoint operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ModifyVpcEndpoint for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ModifyVpcEndpoint method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ModifyVpcEndpointRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ModifyVpcEndpointRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyVpcEndpoint
0000000000000000000000000000000000000000;;	func (c *EC2) ModifyVpcEndpointRequest(input *ModifyVpcEndpointInput) (req *request.Request, output *ModifyVpcEndpointOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opModifyVpcEndpoint,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ModifyVpcEndpointInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ModifyVpcEndpointOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ModifyVpcEndpoint API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Modifies attributes of a specified VPC endpoint. You can modify the policy
0000000000000000000000000000000000000000;;	// associated with the endpoint, and you can add and remove route tables associated
0000000000000000000000000000000000000000;;	// with the endpoint.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation ModifyVpcEndpoint for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyVpcEndpoint
0000000000000000000000000000000000000000;;	func (c *EC2) ModifyVpcEndpoint(input *ModifyVpcEndpointInput) (*ModifyVpcEndpointOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ModifyVpcEndpointRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opModifyVpcPeeringConnectionOptions = "ModifyVpcPeeringConnectionOptions"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ModifyVpcPeeringConnectionOptionsRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ModifyVpcPeeringConnectionOptions operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ModifyVpcPeeringConnectionOptions for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ModifyVpcPeeringConnectionOptions method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ModifyVpcPeeringConnectionOptionsRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ModifyVpcPeeringConnectionOptionsRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyVpcPeeringConnectionOptions
0000000000000000000000000000000000000000;;	func (c *EC2) ModifyVpcPeeringConnectionOptionsRequest(input *ModifyVpcPeeringConnectionOptionsInput) (req *request.Request, output *ModifyVpcPeeringConnectionOptionsOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opModifyVpcPeeringConnectionOptions,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ModifyVpcPeeringConnectionOptionsInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ModifyVpcPeeringConnectionOptionsOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ModifyVpcPeeringConnectionOptions API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Modifies the VPC peering connection options on one side of a VPC peering
0000000000000000000000000000000000000000;;	// connection. You can do the following:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * Enable/disable communication over the peering connection between an
0000000000000000000000000000000000000000;;	//    EC2-Classic instance that's linked to your VPC (using ClassicLink) and
0000000000000000000000000000000000000000;;	//    instances in the peer VPC.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * Enable/disable communication over the peering connection between instances
0000000000000000000000000000000000000000;;	//    in your VPC and an EC2-Classic instance that's linked to the peer VPC.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * Enable/disable a local VPC to resolve public DNS hostnames to private
0000000000000000000000000000000000000000;;	//    IP addresses when queried from instances in the peer VPC.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If the peered VPCs are in different accounts, each owner must initiate a
0000000000000000000000000000000000000000;;	// separate request to modify the peering connection options, depending on whether
0000000000000000000000000000000000000000;;	// their VPC was the requester or accepter for the VPC peering connection. If
0000000000000000000000000000000000000000;;	// the peered VPCs are in the same account, you can modify the requester and
0000000000000000000000000000000000000000;;	// accepter options in the same request. To confirm which VPC is the accepter
0000000000000000000000000000000000000000;;	// and requester for a VPC peering connection, use the DescribeVpcPeeringConnections
0000000000000000000000000000000000000000;;	// command.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation ModifyVpcPeeringConnectionOptions for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyVpcPeeringConnectionOptions
0000000000000000000000000000000000000000;;	func (c *EC2) ModifyVpcPeeringConnectionOptions(input *ModifyVpcPeeringConnectionOptionsInput) (*ModifyVpcPeeringConnectionOptionsOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ModifyVpcPeeringConnectionOptionsRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opMonitorInstances = "MonitorInstances"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MonitorInstancesRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the MonitorInstances operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See MonitorInstances for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the MonitorInstances method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the MonitorInstancesRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.MonitorInstancesRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/MonitorInstances
0000000000000000000000000000000000000000;;	func (c *EC2) MonitorInstancesRequest(input *MonitorInstancesInput) (req *request.Request, output *MonitorInstancesOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opMonitorInstances,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &MonitorInstancesInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &MonitorInstancesOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MonitorInstances API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Enables detailed monitoring for a running instance. Otherwise, basic monitoring
0000000000000000000000000000000000000000;;	// is enabled. For more information, see Monitoring Your Instances and Volumes
0000000000000000000000000000000000000000;;	// (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-cloudwatch.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// To disable detailed monitoring, see .
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation MonitorInstances for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/MonitorInstances
0000000000000000000000000000000000000000;;	func (c *EC2) MonitorInstances(input *MonitorInstancesInput) (*MonitorInstancesOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.MonitorInstancesRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opMoveAddressToVpc = "MoveAddressToVpc"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MoveAddressToVpcRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the MoveAddressToVpc operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See MoveAddressToVpc for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the MoveAddressToVpc method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the MoveAddressToVpcRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.MoveAddressToVpcRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/MoveAddressToVpc
0000000000000000000000000000000000000000;;	func (c *EC2) MoveAddressToVpcRequest(input *MoveAddressToVpcInput) (req *request.Request, output *MoveAddressToVpcOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opMoveAddressToVpc,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &MoveAddressToVpcInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &MoveAddressToVpcOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MoveAddressToVpc API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Moves an Elastic IP address from the EC2-Classic platform to the EC2-VPC
0000000000000000000000000000000000000000;;	// platform. The Elastic IP address must be allocated to your account for more
0000000000000000000000000000000000000000;;	// than 24 hours, and it must not be associated with an instance. After the
0000000000000000000000000000000000000000;;	// Elastic IP address is moved, it is no longer available for use in the EC2-Classic
0000000000000000000000000000000000000000;;	// platform, unless you move it back using the RestoreAddressToClassic request.
0000000000000000000000000000000000000000;;	// You cannot move an Elastic IP address that was originally allocated for use
0000000000000000000000000000000000000000;;	// in the EC2-VPC platform to the EC2-Classic platform.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation MoveAddressToVpc for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/MoveAddressToVpc
0000000000000000000000000000000000000000;;	func (c *EC2) MoveAddressToVpc(input *MoveAddressToVpcInput) (*MoveAddressToVpcOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.MoveAddressToVpcRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opPurchaseHostReservation = "PurchaseHostReservation"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PurchaseHostReservationRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the PurchaseHostReservation operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See PurchaseHostReservation for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the PurchaseHostReservation method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the PurchaseHostReservationRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.PurchaseHostReservationRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/PurchaseHostReservation
0000000000000000000000000000000000000000;;	func (c *EC2) PurchaseHostReservationRequest(input *PurchaseHostReservationInput) (req *request.Request, output *PurchaseHostReservationOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opPurchaseHostReservation,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &PurchaseHostReservationInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &PurchaseHostReservationOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PurchaseHostReservation API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Purchase a reservation with configurations that match those of your Dedicated
0000000000000000000000000000000000000000;;	// Host. You must have active Dedicated Hosts in your account before you purchase
0000000000000000000000000000000000000000;;	// a reservation. This action results in the specified reservation being purchased
0000000000000000000000000000000000000000;;	// and charged to your account.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation PurchaseHostReservation for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/PurchaseHostReservation
0000000000000000000000000000000000000000;;	func (c *EC2) PurchaseHostReservation(input *PurchaseHostReservationInput) (*PurchaseHostReservationOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.PurchaseHostReservationRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opPurchaseReservedInstancesOffering = "PurchaseReservedInstancesOffering"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PurchaseReservedInstancesOfferingRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the PurchaseReservedInstancesOffering operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See PurchaseReservedInstancesOffering for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the PurchaseReservedInstancesOffering method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the PurchaseReservedInstancesOfferingRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.PurchaseReservedInstancesOfferingRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/PurchaseReservedInstancesOffering
0000000000000000000000000000000000000000;;	func (c *EC2) PurchaseReservedInstancesOfferingRequest(input *PurchaseReservedInstancesOfferingInput) (req *request.Request, output *PurchaseReservedInstancesOfferingOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opPurchaseReservedInstancesOffering,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &PurchaseReservedInstancesOfferingInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &PurchaseReservedInstancesOfferingOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PurchaseReservedInstancesOffering API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Purchases a Reserved Instance for use with your account. With Reserved Instances,
0000000000000000000000000000000000000000;;	// you pay a lower hourly rate compared to On-Demand instance pricing.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Use DescribeReservedInstancesOfferings to get a list of Reserved Instance
0000000000000000000000000000000000000000;;	// offerings that match your specifications. After you've purchased a Reserved
0000000000000000000000000000000000000000;;	// Instance, you can check for your new Reserved Instance with DescribeReservedInstances.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information, see Reserved Instances (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts-on-demand-reserved-instances.html)
0000000000000000000000000000000000000000;;	// and Reserved Instance Marketplace (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation PurchaseReservedInstancesOffering for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/PurchaseReservedInstancesOffering
0000000000000000000000000000000000000000;;	func (c *EC2) PurchaseReservedInstancesOffering(input *PurchaseReservedInstancesOfferingInput) (*PurchaseReservedInstancesOfferingOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.PurchaseReservedInstancesOfferingRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opPurchaseScheduledInstances = "PurchaseScheduledInstances"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PurchaseScheduledInstancesRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the PurchaseScheduledInstances operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See PurchaseScheduledInstances for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the PurchaseScheduledInstances method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the PurchaseScheduledInstancesRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.PurchaseScheduledInstancesRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/PurchaseScheduledInstances
0000000000000000000000000000000000000000;;	func (c *EC2) PurchaseScheduledInstancesRequest(input *PurchaseScheduledInstancesInput) (req *request.Request, output *PurchaseScheduledInstancesOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opPurchaseScheduledInstances,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &PurchaseScheduledInstancesInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &PurchaseScheduledInstancesOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PurchaseScheduledInstances API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Purchases one or more Scheduled Instances with the specified schedule.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Scheduled Instances enable you to purchase Amazon EC2 compute capacity by
0000000000000000000000000000000000000000;;	// the hour for a one-year term. Before you can purchase a Scheduled Instance,
0000000000000000000000000000000000000000;;	// you must call DescribeScheduledInstanceAvailability to check for available
0000000000000000000000000000000000000000;;	// schedules and obtain a purchase token. After you purchase a Scheduled Instance,
0000000000000000000000000000000000000000;;	// you must call RunScheduledInstances during each scheduled time period.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// After you purchase a Scheduled Instance, you can't cancel, modify, or resell
0000000000000000000000000000000000000000;;	// your purchase.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation PurchaseScheduledInstances for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/PurchaseScheduledInstances
0000000000000000000000000000000000000000;;	func (c *EC2) PurchaseScheduledInstances(input *PurchaseScheduledInstancesInput) (*PurchaseScheduledInstancesOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.PurchaseScheduledInstancesRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opRebootInstances = "RebootInstances"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RebootInstancesRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the RebootInstances operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See RebootInstances for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the RebootInstances method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the RebootInstancesRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.RebootInstancesRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/RebootInstances
0000000000000000000000000000000000000000;;	func (c *EC2) RebootInstancesRequest(input *RebootInstancesInput) (req *request.Request, output *RebootInstancesOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opRebootInstances,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &RebootInstancesInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &RebootInstancesOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RebootInstances API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Requests a reboot of one or more instances. This operation is asynchronous;
0000000000000000000000000000000000000000;;	// it only queues a request to reboot the specified instances. The operation
0000000000000000000000000000000000000000;;	// succeeds if the instances are valid and belong to you. Requests to reboot
0000000000000000000000000000000000000000;;	// terminated instances are ignored.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If an instance does not cleanly shut down within four minutes, Amazon EC2
0000000000000000000000000000000000000000;;	// performs a hard reboot.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information about troubleshooting, see Getting Console Output and
0000000000000000000000000000000000000000;;	// Rebooting Instances (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-console.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation RebootInstances for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/RebootInstances
0000000000000000000000000000000000000000;;	func (c *EC2) RebootInstances(input *RebootInstancesInput) (*RebootInstancesOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.RebootInstancesRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opRegisterImage = "RegisterImage"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RegisterImageRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the RegisterImage operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See RegisterImage for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the RegisterImage method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the RegisterImageRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.RegisterImageRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/RegisterImage
0000000000000000000000000000000000000000;;	func (c *EC2) RegisterImageRequest(input *RegisterImageInput) (req *request.Request, output *RegisterImageOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opRegisterImage,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &RegisterImageInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &RegisterImageOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RegisterImage API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Registers an AMI. When you're creating an AMI, this is the final step you
0000000000000000000000000000000000000000;;	// must complete before you can launch an instance from the AMI. For more information
0000000000000000000000000000000000000000;;	// about creating AMIs, see Creating Your Own AMIs (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For Amazon EBS-backed instances, CreateImage creates and registers the AMI
0000000000000000000000000000000000000000;;	// in a single request, so you don't have to register the AMI yourself.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// You can also use RegisterImage to create an Amazon EBS-backed Linux AMI from
0000000000000000000000000000000000000000;;	// a snapshot of a root device volume. For more information, see Launching an
0000000000000000000000000000000000000000;;	// Instance from a Snapshot (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_LaunchingInstanceFromSnapshot.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Some Linux distributions, such as Red Hat Enterprise Linux (RHEL) and SUSE
0000000000000000000000000000000000000000;;	// Linux Enterprise Server (SLES), use the EC2 billingProduct code associated
0000000000000000000000000000000000000000;;	// with an AMI to verify subscription status for package updates. Creating an
0000000000000000000000000000000000000000;;	// AMI from an EBS snapshot does not maintain this billing code, and subsequent
0000000000000000000000000000000000000000;;	// instances launched from such an AMI will not be able to connect to package
0000000000000000000000000000000000000000;;	// update infrastructure.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Similarly, although you can create a Windows AMI from a snapshot, you can't
0000000000000000000000000000000000000000;;	// successfully launch an instance from the AMI.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// To create Windows AMIs or to create AMIs for Linux operating systems that
0000000000000000000000000000000000000000;;	// must retain AMI billing codes to work properly, see CreateImage.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If needed, you can deregister an AMI at any time. Any modifications you make
0000000000000000000000000000000000000000;;	// to an AMI backed by an instance store volume invalidates its registration.
0000000000000000000000000000000000000000;;	// If you make changes to an image, deregister the previous image and register
0000000000000000000000000000000000000000;;	// the new image.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// You can't register an image where a secondary (non-root) snapshot has AWS
0000000000000000000000000000000000000000;;	// Marketplace product codes.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation RegisterImage for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/RegisterImage
0000000000000000000000000000000000000000;;	func (c *EC2) RegisterImage(input *RegisterImageInput) (*RegisterImageOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.RegisterImageRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opRejectVpcPeeringConnection = "RejectVpcPeeringConnection"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RejectVpcPeeringConnectionRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the RejectVpcPeeringConnection operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See RejectVpcPeeringConnection for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the RejectVpcPeeringConnection method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the RejectVpcPeeringConnectionRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.RejectVpcPeeringConnectionRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/RejectVpcPeeringConnection
0000000000000000000000000000000000000000;;	func (c *EC2) RejectVpcPeeringConnectionRequest(input *RejectVpcPeeringConnectionInput) (req *request.Request, output *RejectVpcPeeringConnectionOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opRejectVpcPeeringConnection,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &RejectVpcPeeringConnectionInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &RejectVpcPeeringConnectionOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RejectVpcPeeringConnection API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Rejects a VPC peering connection request. The VPC peering connection must
0000000000000000000000000000000000000000;;	// be in the pending-acceptance state. Use the DescribeVpcPeeringConnections
0000000000000000000000000000000000000000;;	// request to view your outstanding VPC peering connection requests. To delete
0000000000000000000000000000000000000000;;	// an active VPC peering connection, or to delete a VPC peering connection request
0000000000000000000000000000000000000000;;	// that you initiated, use DeleteVpcPeeringConnection.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation RejectVpcPeeringConnection for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/RejectVpcPeeringConnection
0000000000000000000000000000000000000000;;	func (c *EC2) RejectVpcPeeringConnection(input *RejectVpcPeeringConnectionInput) (*RejectVpcPeeringConnectionOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.RejectVpcPeeringConnectionRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opReleaseAddress = "ReleaseAddress"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ReleaseAddressRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ReleaseAddress operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ReleaseAddress for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ReleaseAddress method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ReleaseAddressRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ReleaseAddressRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ReleaseAddress
0000000000000000000000000000000000000000;;	func (c *EC2) ReleaseAddressRequest(input *ReleaseAddressInput) (req *request.Request, output *ReleaseAddressOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opReleaseAddress,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ReleaseAddressInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ReleaseAddressOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ReleaseAddress API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Releases the specified Elastic IP address.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// After releasing an Elastic IP address, it is released to the IP address pool
0000000000000000000000000000000000000000;;	// and might be unavailable to you. Be sure to update your DNS records and any
0000000000000000000000000000000000000000;;	// servers or devices that communicate with the address. If you attempt to release
0000000000000000000000000000000000000000;;	// an Elastic IP address that you already released, you'll get an AuthFailure
0000000000000000000000000000000000000000;;	// error if the address is already allocated to another AWS account.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// [EC2-Classic, default VPC] Releasing an Elastic IP address automatically
0000000000000000000000000000000000000000;;	// disassociates it from any instance that it's associated with. To disassociate
0000000000000000000000000000000000000000;;	// an Elastic IP address without releasing it, use DisassociateAddress.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// [Nondefault VPC] You must use DisassociateAddress to disassociate the Elastic
0000000000000000000000000000000000000000;;	// IP address before you try to release it. Otherwise, Amazon EC2 returns an
0000000000000000000000000000000000000000;;	// error (InvalidIPAddress.InUse).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation ReleaseAddress for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ReleaseAddress
0000000000000000000000000000000000000000;;	func (c *EC2) ReleaseAddress(input *ReleaseAddressInput) (*ReleaseAddressOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ReleaseAddressRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opReleaseHosts = "ReleaseHosts"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ReleaseHostsRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ReleaseHosts operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ReleaseHosts for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ReleaseHosts method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ReleaseHostsRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ReleaseHostsRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ReleaseHosts
0000000000000000000000000000000000000000;;	func (c *EC2) ReleaseHostsRequest(input *ReleaseHostsInput) (req *request.Request, output *ReleaseHostsOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opReleaseHosts,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ReleaseHostsInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ReleaseHostsOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ReleaseHosts API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// When you no longer want to use an On-Demand Dedicated Host it can be released.
0000000000000000000000000000000000000000;;	// On-Demand billing is stopped and the host goes into released state. The host
0000000000000000000000000000000000000000;;	// ID of Dedicated Hosts that have been released can no longer be specified
0000000000000000000000000000000000000000;;	// in another request, e.g., ModifyHosts. You must stop or terminate all instances
0000000000000000000000000000000000000000;;	// on a host before it can be released.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// When Dedicated Hosts are released, it make take some time for them to stop
0000000000000000000000000000000000000000;;	// counting toward your limit and you may receive capacity errors when trying
0000000000000000000000000000000000000000;;	// to allocate new Dedicated hosts. Try waiting a few minutes, and then try
0000000000000000000000000000000000000000;;	// again.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Released hosts will still appear in a DescribeHosts response.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation ReleaseHosts for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ReleaseHosts
0000000000000000000000000000000000000000;;	func (c *EC2) ReleaseHosts(input *ReleaseHostsInput) (*ReleaseHostsOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ReleaseHostsRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opReplaceNetworkAclAssociation = "ReplaceNetworkAclAssociation"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ReplaceNetworkAclAssociationRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ReplaceNetworkAclAssociation operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ReplaceNetworkAclAssociation for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ReplaceNetworkAclAssociation method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ReplaceNetworkAclAssociationRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ReplaceNetworkAclAssociationRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ReplaceNetworkAclAssociation
0000000000000000000000000000000000000000;;	func (c *EC2) ReplaceNetworkAclAssociationRequest(input *ReplaceNetworkAclAssociationInput) (req *request.Request, output *ReplaceNetworkAclAssociationOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opReplaceNetworkAclAssociation,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ReplaceNetworkAclAssociationInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ReplaceNetworkAclAssociationOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ReplaceNetworkAclAssociation API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Changes which network ACL a subnet is associated with. By default when you
0000000000000000000000000000000000000000;;	// create a subnet, it's automatically associated with the default network ACL.
0000000000000000000000000000000000000000;;	// For more information about network ACLs, see Network ACLs (http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_ACLs.html)
0000000000000000000000000000000000000000;;	// in the Amazon Virtual Private Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation ReplaceNetworkAclAssociation for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ReplaceNetworkAclAssociation
0000000000000000000000000000000000000000;;	func (c *EC2) ReplaceNetworkAclAssociation(input *ReplaceNetworkAclAssociationInput) (*ReplaceNetworkAclAssociationOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ReplaceNetworkAclAssociationRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opReplaceNetworkAclEntry = "ReplaceNetworkAclEntry"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ReplaceNetworkAclEntryRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ReplaceNetworkAclEntry operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ReplaceNetworkAclEntry for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ReplaceNetworkAclEntry method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ReplaceNetworkAclEntryRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ReplaceNetworkAclEntryRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ReplaceNetworkAclEntry
0000000000000000000000000000000000000000;;	func (c *EC2) ReplaceNetworkAclEntryRequest(input *ReplaceNetworkAclEntryInput) (req *request.Request, output *ReplaceNetworkAclEntryOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opReplaceNetworkAclEntry,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ReplaceNetworkAclEntryInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ReplaceNetworkAclEntryOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ReplaceNetworkAclEntry API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Replaces an entry (rule) in a network ACL. For more information about network
0000000000000000000000000000000000000000;;	// ACLs, see Network ACLs (http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_ACLs.html)
0000000000000000000000000000000000000000;;	// in the Amazon Virtual Private Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation ReplaceNetworkAclEntry for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ReplaceNetworkAclEntry
0000000000000000000000000000000000000000;;	func (c *EC2) ReplaceNetworkAclEntry(input *ReplaceNetworkAclEntryInput) (*ReplaceNetworkAclEntryOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ReplaceNetworkAclEntryRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opReplaceRoute = "ReplaceRoute"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ReplaceRouteRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ReplaceRoute operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ReplaceRoute for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ReplaceRoute method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ReplaceRouteRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ReplaceRouteRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ReplaceRoute
0000000000000000000000000000000000000000;;	func (c *EC2) ReplaceRouteRequest(input *ReplaceRouteInput) (req *request.Request, output *ReplaceRouteOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opReplaceRoute,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ReplaceRouteInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ReplaceRouteOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ReplaceRoute API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Replaces an existing route within a route table in a VPC. You must provide
0000000000000000000000000000000000000000;;	// only one of the following: Internet gateway or virtual private gateway, NAT
0000000000000000000000000000000000000000;;	// instance, NAT gateway, VPC peering connection, network interface, or egress-only
0000000000000000000000000000000000000000;;	// Internet gateway.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information about route tables, see Route Tables (http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Route_Tables.html)
0000000000000000000000000000000000000000;;	// in the Amazon Virtual Private Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation ReplaceRoute for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ReplaceRoute
0000000000000000000000000000000000000000;;	func (c *EC2) ReplaceRoute(input *ReplaceRouteInput) (*ReplaceRouteOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ReplaceRouteRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opReplaceRouteTableAssociation = "ReplaceRouteTableAssociation"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ReplaceRouteTableAssociationRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ReplaceRouteTableAssociation operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ReplaceRouteTableAssociation for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ReplaceRouteTableAssociation method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ReplaceRouteTableAssociationRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ReplaceRouteTableAssociationRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ReplaceRouteTableAssociation
0000000000000000000000000000000000000000;;	func (c *EC2) ReplaceRouteTableAssociationRequest(input *ReplaceRouteTableAssociationInput) (req *request.Request, output *ReplaceRouteTableAssociationOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opReplaceRouteTableAssociation,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ReplaceRouteTableAssociationInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ReplaceRouteTableAssociationOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ReplaceRouteTableAssociation API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Changes the route table associated with a given subnet in a VPC. After the
0000000000000000000000000000000000000000;;	// operation completes, the subnet uses the routes in the new route table it's
0000000000000000000000000000000000000000;;	// associated with. For more information about route tables, see Route Tables
0000000000000000000000000000000000000000;;	// (http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Route_Tables.html)
0000000000000000000000000000000000000000;;	// in the Amazon Virtual Private Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// You can also use ReplaceRouteTableAssociation to change which table is the
0000000000000000000000000000000000000000;;	// main route table in the VPC. You just specify the main route table's association
0000000000000000000000000000000000000000;;	// ID and the route table to be the new main route table.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation ReplaceRouteTableAssociation for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ReplaceRouteTableAssociation
0000000000000000000000000000000000000000;;	func (c *EC2) ReplaceRouteTableAssociation(input *ReplaceRouteTableAssociationInput) (*ReplaceRouteTableAssociationOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ReplaceRouteTableAssociationRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opReportInstanceStatus = "ReportInstanceStatus"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ReportInstanceStatusRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ReportInstanceStatus operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ReportInstanceStatus for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ReportInstanceStatus method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ReportInstanceStatusRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ReportInstanceStatusRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ReportInstanceStatus
0000000000000000000000000000000000000000;;	func (c *EC2) ReportInstanceStatusRequest(input *ReportInstanceStatusInput) (req *request.Request, output *ReportInstanceStatusOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opReportInstanceStatus,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ReportInstanceStatusInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ReportInstanceStatusOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ReportInstanceStatus API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Submits feedback about the status of an instance. The instance must be in
0000000000000000000000000000000000000000;;	// the running state. If your experience with the instance differs from the
0000000000000000000000000000000000000000;;	// instance status returned by DescribeInstanceStatus, use ReportInstanceStatus
0000000000000000000000000000000000000000;;	// to report your experience with the instance. Amazon EC2 collects this information
0000000000000000000000000000000000000000;;	// to improve the accuracy of status checks.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Use of this action does not change the value returned by DescribeInstanceStatus.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation ReportInstanceStatus for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ReportInstanceStatus
0000000000000000000000000000000000000000;;	func (c *EC2) ReportInstanceStatus(input *ReportInstanceStatusInput) (*ReportInstanceStatusOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ReportInstanceStatusRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opRequestSpotFleet = "RequestSpotFleet"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RequestSpotFleetRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the RequestSpotFleet operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See RequestSpotFleet for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the RequestSpotFleet method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the RequestSpotFleetRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.RequestSpotFleetRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/RequestSpotFleet
0000000000000000000000000000000000000000;;	func (c *EC2) RequestSpotFleetRequest(input *RequestSpotFleetInput) (req *request.Request, output *RequestSpotFleetOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opRequestSpotFleet,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &RequestSpotFleetInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &RequestSpotFleetOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RequestSpotFleet API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creates a Spot fleet request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// You can submit a single request that includes multiple launch specifications
0000000000000000000000000000000000000000;;	// that vary by instance type, AMI, Availability Zone, or subnet.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// By default, the Spot fleet requests Spot instances in the Spot pool where
0000000000000000000000000000000000000000;;	// the price per unit is the lowest. Each launch specification can include its
0000000000000000000000000000000000000000;;	// own instance weighting that reflects the value of the instance type to your
0000000000000000000000000000000000000000;;	// application workload.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Alternatively, you can specify that the Spot fleet distribute the target
0000000000000000000000000000000000000000;;	// capacity across the Spot pools included in its launch specifications. By
0000000000000000000000000000000000000000;;	// ensuring that the Spot instances in your Spot fleet are in different Spot
0000000000000000000000000000000000000000;;	// pools, you can improve the availability of your fleet.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information, see Spot Fleet Requests (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-requests.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation RequestSpotFleet for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/RequestSpotFleet
0000000000000000000000000000000000000000;;	func (c *EC2) RequestSpotFleet(input *RequestSpotFleetInput) (*RequestSpotFleetOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.RequestSpotFleetRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opRequestSpotInstances = "RequestSpotInstances"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RequestSpotInstancesRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the RequestSpotInstances operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See RequestSpotInstances for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the RequestSpotInstances method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the RequestSpotInstancesRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.RequestSpotInstancesRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/RequestSpotInstances
0000000000000000000000000000000000000000;;	func (c *EC2) RequestSpotInstancesRequest(input *RequestSpotInstancesInput) (req *request.Request, output *RequestSpotInstancesOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opRequestSpotInstances,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &RequestSpotInstancesInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &RequestSpotInstancesOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RequestSpotInstances API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creates a Spot instance request. Spot instances are instances that Amazon
0000000000000000000000000000000000000000;;	// EC2 launches when the bid price that you specify exceeds the current Spot
0000000000000000000000000000000000000000;;	// price. Amazon EC2 periodically sets the Spot price based on available Spot
0000000000000000000000000000000000000000;;	// Instance capacity and current Spot instance requests. For more information,
0000000000000000000000000000000000000000;;	// see Spot Instance Requests (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-requests.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation RequestSpotInstances for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/RequestSpotInstances
0000000000000000000000000000000000000000;;	func (c *EC2) RequestSpotInstances(input *RequestSpotInstancesInput) (*RequestSpotInstancesOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.RequestSpotInstancesRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opResetImageAttribute = "ResetImageAttribute"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResetImageAttributeRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ResetImageAttribute operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ResetImageAttribute for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ResetImageAttribute method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ResetImageAttributeRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ResetImageAttributeRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ResetImageAttribute
0000000000000000000000000000000000000000;;	func (c *EC2) ResetImageAttributeRequest(input *ResetImageAttributeInput) (req *request.Request, output *ResetImageAttributeOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opResetImageAttribute,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ResetImageAttributeInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ResetImageAttributeOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResetImageAttribute API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Resets an attribute of an AMI to its default value.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The productCodes attribute can't be reset.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation ResetImageAttribute for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ResetImageAttribute
0000000000000000000000000000000000000000;;	func (c *EC2) ResetImageAttribute(input *ResetImageAttributeInput) (*ResetImageAttributeOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ResetImageAttributeRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opResetInstanceAttribute = "ResetInstanceAttribute"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResetInstanceAttributeRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ResetInstanceAttribute operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ResetInstanceAttribute for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ResetInstanceAttribute method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ResetInstanceAttributeRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ResetInstanceAttributeRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ResetInstanceAttribute
0000000000000000000000000000000000000000;;	func (c *EC2) ResetInstanceAttributeRequest(input *ResetInstanceAttributeInput) (req *request.Request, output *ResetInstanceAttributeOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opResetInstanceAttribute,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ResetInstanceAttributeInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ResetInstanceAttributeOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResetInstanceAttribute API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Resets an attribute of an instance to its default value. To reset the kernel
0000000000000000000000000000000000000000;;	// or ramdisk, the instance must be in a stopped state. To reset the sourceDestCheck,
0000000000000000000000000000000000000000;;	// the instance can be either running or stopped.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The sourceDestCheck attribute controls whether source/destination checking
0000000000000000000000000000000000000000;;	// is enabled. The default value is true, which means checking is enabled. This
0000000000000000000000000000000000000000;;	// value must be false for a NAT instance to perform NAT. For more information,
0000000000000000000000000000000000000000;;	// see NAT Instances (http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_NAT_Instance.html)
0000000000000000000000000000000000000000;;	// in the Amazon Virtual Private Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation ResetInstanceAttribute for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ResetInstanceAttribute
0000000000000000000000000000000000000000;;	func (c *EC2) ResetInstanceAttribute(input *ResetInstanceAttributeInput) (*ResetInstanceAttributeOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ResetInstanceAttributeRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opResetNetworkInterfaceAttribute = "ResetNetworkInterfaceAttribute"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResetNetworkInterfaceAttributeRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ResetNetworkInterfaceAttribute operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ResetNetworkInterfaceAttribute for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ResetNetworkInterfaceAttribute method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ResetNetworkInterfaceAttributeRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ResetNetworkInterfaceAttributeRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ResetNetworkInterfaceAttribute
0000000000000000000000000000000000000000;;	func (c *EC2) ResetNetworkInterfaceAttributeRequest(input *ResetNetworkInterfaceAttributeInput) (req *request.Request, output *ResetNetworkInterfaceAttributeOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opResetNetworkInterfaceAttribute,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ResetNetworkInterfaceAttributeInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ResetNetworkInterfaceAttributeOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResetNetworkInterfaceAttribute API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Resets a network interface attribute. You can specify only one attribute
0000000000000000000000000000000000000000;;	// at a time.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation ResetNetworkInterfaceAttribute for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ResetNetworkInterfaceAttribute
0000000000000000000000000000000000000000;;	func (c *EC2) ResetNetworkInterfaceAttribute(input *ResetNetworkInterfaceAttributeInput) (*ResetNetworkInterfaceAttributeOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ResetNetworkInterfaceAttributeRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opResetSnapshotAttribute = "ResetSnapshotAttribute"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResetSnapshotAttributeRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ResetSnapshotAttribute operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ResetSnapshotAttribute for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ResetSnapshotAttribute method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ResetSnapshotAttributeRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ResetSnapshotAttributeRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ResetSnapshotAttribute
0000000000000000000000000000000000000000;;	func (c *EC2) ResetSnapshotAttributeRequest(input *ResetSnapshotAttributeInput) (req *request.Request, output *ResetSnapshotAttributeOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opResetSnapshotAttribute,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ResetSnapshotAttributeInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ResetSnapshotAttributeOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResetSnapshotAttribute API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Resets permission settings for the specified snapshot.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information on modifying snapshot permissions, see Sharing Snapshots
0000000000000000000000000000000000000000;;	// (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-modifying-snapshot-permissions.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation ResetSnapshotAttribute for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ResetSnapshotAttribute
0000000000000000000000000000000000000000;;	func (c *EC2) ResetSnapshotAttribute(input *ResetSnapshotAttributeInput) (*ResetSnapshotAttributeOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ResetSnapshotAttributeRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opRestoreAddressToClassic = "RestoreAddressToClassic"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RestoreAddressToClassicRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the RestoreAddressToClassic operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See RestoreAddressToClassic for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the RestoreAddressToClassic method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the RestoreAddressToClassicRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.RestoreAddressToClassicRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/RestoreAddressToClassic
0000000000000000000000000000000000000000;;	func (c *EC2) RestoreAddressToClassicRequest(input *RestoreAddressToClassicInput) (req *request.Request, output *RestoreAddressToClassicOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opRestoreAddressToClassic,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &RestoreAddressToClassicInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &RestoreAddressToClassicOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RestoreAddressToClassic API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Restores an Elastic IP address that was previously moved to the EC2-VPC platform
0000000000000000000000000000000000000000;;	// back to the EC2-Classic platform. You cannot move an Elastic IP address that
0000000000000000000000000000000000000000;;	// was originally allocated for use in EC2-VPC. The Elastic IP address must
0000000000000000000000000000000000000000;;	// not be associated with an instance or network interface.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation RestoreAddressToClassic for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/RestoreAddressToClassic
0000000000000000000000000000000000000000;;	func (c *EC2) RestoreAddressToClassic(input *RestoreAddressToClassicInput) (*RestoreAddressToClassicOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.RestoreAddressToClassicRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opRevokeSecurityGroupEgress = "RevokeSecurityGroupEgress"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RevokeSecurityGroupEgressRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the RevokeSecurityGroupEgress operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See RevokeSecurityGroupEgress for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the RevokeSecurityGroupEgress method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the RevokeSecurityGroupEgressRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.RevokeSecurityGroupEgressRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/RevokeSecurityGroupEgress
0000000000000000000000000000000000000000;;	func (c *EC2) RevokeSecurityGroupEgressRequest(input *RevokeSecurityGroupEgressInput) (req *request.Request, output *RevokeSecurityGroupEgressOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opRevokeSecurityGroupEgress,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &RevokeSecurityGroupEgressInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &RevokeSecurityGroupEgressOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RevokeSecurityGroupEgress API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// [EC2-VPC only] Removes one or more egress rules from a security group for
0000000000000000000000000000000000000000;;	// EC2-VPC. This action doesn't apply to security groups for use in EC2-Classic.
0000000000000000000000000000000000000000;;	// The values that you specify in the revoke request (for example, ports) must
0000000000000000000000000000000000000000;;	// match the existing rule's values for the rule to be revoked.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Each rule consists of the protocol and the IPv4 or IPv6 CIDR range or source
0000000000000000000000000000000000000000;;	// security group. For the TCP and UDP protocols, you must also specify the
0000000000000000000000000000000000000000;;	// destination port or range of ports. For the ICMP protocol, you must also
0000000000000000000000000000000000000000;;	// specify the ICMP type and code.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Rule changes are propagated to instances within the security group as quickly
0000000000000000000000000000000000000000;;	// as possible. However, a small delay might occur.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation RevokeSecurityGroupEgress for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/RevokeSecurityGroupEgress
0000000000000000000000000000000000000000;;	func (c *EC2) RevokeSecurityGroupEgress(input *RevokeSecurityGroupEgressInput) (*RevokeSecurityGroupEgressOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.RevokeSecurityGroupEgressRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opRevokeSecurityGroupIngress = "RevokeSecurityGroupIngress"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RevokeSecurityGroupIngressRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the RevokeSecurityGroupIngress operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See RevokeSecurityGroupIngress for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the RevokeSecurityGroupIngress method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the RevokeSecurityGroupIngressRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.RevokeSecurityGroupIngressRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/RevokeSecurityGroupIngress
0000000000000000000000000000000000000000;;	func (c *EC2) RevokeSecurityGroupIngressRequest(input *RevokeSecurityGroupIngressInput) (req *request.Request, output *RevokeSecurityGroupIngressOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opRevokeSecurityGroupIngress,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &RevokeSecurityGroupIngressInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &RevokeSecurityGroupIngressOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RevokeSecurityGroupIngress API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Removes one or more ingress rules from a security group. The values that
0000000000000000000000000000000000000000;;	// you specify in the revoke request (for example, ports) must match the existing
0000000000000000000000000000000000000000;;	// rule's values for the rule to be removed.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Each rule consists of the protocol and the CIDR range or source security
0000000000000000000000000000000000000000;;	// group. For the TCP and UDP protocols, you must also specify the destination
0000000000000000000000000000000000000000;;	// port or range of ports. For the ICMP protocol, you must also specify the
0000000000000000000000000000000000000000;;	// ICMP type and code.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Rule changes are propagated to instances within the security group as quickly
0000000000000000000000000000000000000000;;	// as possible. However, a small delay might occur.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation RevokeSecurityGroupIngress for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/RevokeSecurityGroupIngress
0000000000000000000000000000000000000000;;	func (c *EC2) RevokeSecurityGroupIngress(input *RevokeSecurityGroupIngressInput) (*RevokeSecurityGroupIngressOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.RevokeSecurityGroupIngressRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opRunInstances = "RunInstances"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RunInstancesRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the RunInstances operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See RunInstances for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the RunInstances method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the RunInstancesRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.RunInstancesRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/RunInstances
0000000000000000000000000000000000000000;;	func (c *EC2) RunInstancesRequest(input *RunInstancesInput) (req *request.Request, output *Reservation) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opRunInstances,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &RunInstancesInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &Reservation{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RunInstances API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Launches the specified number of instances using an AMI for which you have
0000000000000000000000000000000000000000;;	// permissions.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// You can specify a number of options, or leave the default options. The following
0000000000000000000000000000000000000000;;	// rules apply:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * [EC2-VPC] If you don't specify a subnet ID, we choose a default subnet
0000000000000000000000000000000000000000;;	//    from your default VPC for you. If you don't have a default VPC, you must
0000000000000000000000000000000000000000;;	//    specify a subnet ID in the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * [EC2-Classic] If don't specify an Availability Zone, we choose one for
0000000000000000000000000000000000000000;;	//    you.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * Some instance types must be launched into a VPC. If you do not have
0000000000000000000000000000000000000000;;	//    a default VPC, or if you do not specify a subnet ID, the request fails.
0000000000000000000000000000000000000000;;	//    For more information, see Instance Types Available Only in a VPC (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-vpc.html#vpc-only-instance-types).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * [EC2-VPC] All instances have a network interface with a primary private
0000000000000000000000000000000000000000;;	//    IPv4 address. If you don't specify this address, we choose one from the
0000000000000000000000000000000000000000;;	//    IPv4 range of your subnet.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * Not all instance types support IPv6 addresses. For more information,
0000000000000000000000000000000000000000;;	//    see Amazon EC2 Instance Types (http://aws.amazon.com/ec2/instance-types/).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * If you don't specify a security group ID, we use the default security
0000000000000000000000000000000000000000;;	//    group. For more information, see Security Groups (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * If any of the AMIs have a product code attached for which the user has
0000000000000000000000000000000000000000;;	//    not subscribed, the request fails.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// To ensure faster instance launches, break up large requests into smaller
0000000000000000000000000000000000000000;;	// batches. For example, create 5 separate launch requests for 100 instances
0000000000000000000000000000000000000000;;	// each instead of 1 launch request for 500 instances.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// An instance is ready for you to use when it's in the running state. You can
0000000000000000000000000000000000000000;;	// check the state of your instance using DescribeInstances. After launch, you
0000000000000000000000000000000000000000;;	// can apply tags to your running instance (requires a resource ID). For more
0000000000000000000000000000000000000000;;	// information, see CreateTags and Tagging Your Amazon EC2 Resources (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Linux instances have access to the public key of the key pair at boot. You
0000000000000000000000000000000000000000;;	// can use this key to provide secure access to the instance. Amazon EC2 public
0000000000000000000000000000000000000000;;	// images use this feature to provide secure access without passwords. For more
0000000000000000000000000000000000000000;;	// information, see Key Pairs (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For troubleshooting, see What To Do If An Instance Immediately Terminates
0000000000000000000000000000000000000000;;	// (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_InstanceStraightToTerminated.html),
0000000000000000000000000000000000000000;;	// and Troubleshooting Connecting to Your Instance (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesConnecting.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation RunInstances for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/RunInstances
0000000000000000000000000000000000000000;;	func (c *EC2) RunInstances(input *RunInstancesInput) (*Reservation, error) {
0000000000000000000000000000000000000000;;		req, out := c.RunInstancesRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opRunScheduledInstances = "RunScheduledInstances"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RunScheduledInstancesRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the RunScheduledInstances operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See RunScheduledInstances for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the RunScheduledInstances method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the RunScheduledInstancesRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.RunScheduledInstancesRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/RunScheduledInstances
0000000000000000000000000000000000000000;;	func (c *EC2) RunScheduledInstancesRequest(input *RunScheduledInstancesInput) (req *request.Request, output *RunScheduledInstancesOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opRunScheduledInstances,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &RunScheduledInstancesInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &RunScheduledInstancesOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RunScheduledInstances API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Launches the specified Scheduled Instances.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Before you can launch a Scheduled Instance, you must purchase it and obtain
0000000000000000000000000000000000000000;;	// an identifier using PurchaseScheduledInstances.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// You must launch a Scheduled Instance during its scheduled time period. You
0000000000000000000000000000000000000000;;	// can't stop or reboot a Scheduled Instance, but you can terminate it as needed.
0000000000000000000000000000000000000000;;	// If you terminate a Scheduled Instance before the current scheduled time period
0000000000000000000000000000000000000000;;	// ends, you can launch it again after a few minutes. For more information,
0000000000000000000000000000000000000000;;	// see Scheduled Instances (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-scheduled-instances.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation RunScheduledInstances for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/RunScheduledInstances
0000000000000000000000000000000000000000;;	func (c *EC2) RunScheduledInstances(input *RunScheduledInstancesInput) (*RunScheduledInstancesOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.RunScheduledInstancesRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opStartInstances = "StartInstances"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StartInstancesRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the StartInstances operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See StartInstances for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the StartInstances method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the StartInstancesRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.StartInstancesRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/StartInstances
0000000000000000000000000000000000000000;;	func (c *EC2) StartInstancesRequest(input *StartInstancesInput) (req *request.Request, output *StartInstancesOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opStartInstances,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &StartInstancesInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &StartInstancesOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StartInstances API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Starts an Amazon EBS-backed AMI that you've previously stopped.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Instances that use Amazon EBS volumes as their root devices can be quickly
0000000000000000000000000000000000000000;;	// stopped and started. When an instance is stopped, the compute resources are
0000000000000000000000000000000000000000;;	// released and you are not billed for hourly instance usage. However, your
0000000000000000000000000000000000000000;;	// root partition Amazon EBS volume remains, continues to persist your data,
0000000000000000000000000000000000000000;;	// and you are charged for Amazon EBS volume usage. You can restart your instance
0000000000000000000000000000000000000000;;	// at any time. Each time you transition an instance from stopped to started,
0000000000000000000000000000000000000000;;	// Amazon EC2 charges a full instance hour, even if transitions happen multiple
0000000000000000000000000000000000000000;;	// times within a single hour.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Before stopping an instance, make sure it is in a state from which it can
0000000000000000000000000000000000000000;;	// be restarted. Stopping an instance does not preserve data stored in RAM.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Performing this operation on an instance that uses an instance store as its
0000000000000000000000000000000000000000;;	// root device returns an error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information, see Stopping Instances (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation StartInstances for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/StartInstances
0000000000000000000000000000000000000000;;	func (c *EC2) StartInstances(input *StartInstancesInput) (*StartInstancesOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.StartInstancesRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opStopInstances = "StopInstances"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StopInstancesRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the StopInstances operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See StopInstances for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the StopInstances method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the StopInstancesRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.StopInstancesRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/StopInstances
0000000000000000000000000000000000000000;;	func (c *EC2) StopInstancesRequest(input *StopInstancesInput) (req *request.Request, output *StopInstancesOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opStopInstances,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &StopInstancesInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &StopInstancesOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StopInstances API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Stops an Amazon EBS-backed instance.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// We don't charge hourly usage for a stopped instance, or data transfer fees;
0000000000000000000000000000000000000000;;	// however, your root partition Amazon EBS volume remains, continues to persist
0000000000000000000000000000000000000000;;	// your data, and you are charged for Amazon EBS volume usage. Each time you
0000000000000000000000000000000000000000;;	// transition an instance from stopped to started, Amazon EC2 charges a full
0000000000000000000000000000000000000000;;	// instance hour, even if transitions happen multiple times within a single
0000000000000000000000000000000000000000;;	// hour.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// You can't start or stop Spot instances, and you can't stop instance store-backed
0000000000000000000000000000000000000000;;	// instances.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// When you stop an instance, we shut it down. You can restart your instance
0000000000000000000000000000000000000000;;	// at any time. Before stopping an instance, make sure it is in a state from
0000000000000000000000000000000000000000;;	// which it can be restarted. Stopping an instance does not preserve data stored
0000000000000000000000000000000000000000;;	// in RAM.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Stopping an instance is different to rebooting or terminating it. For example,
0000000000000000000000000000000000000000;;	// when you stop an instance, the root device and any other devices attached
0000000000000000000000000000000000000000;;	// to the instance persist. When you terminate an instance, the root device
0000000000000000000000000000000000000000;;	// and any other devices attached during the instance launch are automatically
0000000000000000000000000000000000000000;;	// deleted. For more information about the differences between rebooting, stopping,
0000000000000000000000000000000000000000;;	// and terminating instances, see Instance Lifecycle (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// When you stop an instance, we attempt to shut it down forcibly after a short
0000000000000000000000000000000000000000;;	// while. If your instance appears stuck in the stopping state after a period
0000000000000000000000000000000000000000;;	// of time, there may be an issue with the underlying host computer. For more
0000000000000000000000000000000000000000;;	// information, see Troubleshooting Stopping Your Instance (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesStopping.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation StopInstances for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/StopInstances
0000000000000000000000000000000000000000;;	func (c *EC2) StopInstances(input *StopInstancesInput) (*StopInstancesOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.StopInstancesRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opTerminateInstances = "TerminateInstances"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TerminateInstancesRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the TerminateInstances operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See TerminateInstances for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the TerminateInstances method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the TerminateInstancesRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.TerminateInstancesRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/TerminateInstances
0000000000000000000000000000000000000000;;	func (c *EC2) TerminateInstancesRequest(input *TerminateInstancesInput) (req *request.Request, output *TerminateInstancesOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opTerminateInstances,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &TerminateInstancesInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &TerminateInstancesOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TerminateInstances API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Shuts down one or more instances. This operation is idempotent; if you terminate
0000000000000000000000000000000000000000;;	// an instance more than once, each call succeeds.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If you specify multiple instances and the request fails (for example, because
0000000000000000000000000000000000000000;;	// of a single incorrect instance ID), none of the instances are terminated.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Terminated instances remain visible after termination (for approximately
0000000000000000000000000000000000000000;;	// one hour).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// By default, Amazon EC2 deletes all EBS volumes that were attached when the
0000000000000000000000000000000000000000;;	// instance launched. Volumes attached after instance launch continue running.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// You can stop, start, and terminate EBS-backed instances. You can only terminate
0000000000000000000000000000000000000000;;	// instance store-backed instances. What happens to an instance differs if you
0000000000000000000000000000000000000000;;	// stop it or terminate it. For example, when you stop an instance, the root
0000000000000000000000000000000000000000;;	// device and any other devices attached to the instance persist. When you terminate
0000000000000000000000000000000000000000;;	// an instance, any attached EBS volumes with the DeleteOnTermination block
0000000000000000000000000000000000000000;;	// device mapping parameter set to true are automatically deleted. For more
0000000000000000000000000000000000000000;;	// information about the differences between stopping and terminating instances,
0000000000000000000000000000000000000000;;	// see Instance Lifecycle (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information about troubleshooting, see Troubleshooting Terminating
0000000000000000000000000000000000000000;;	// Your Instance (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesShuttingDown.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation TerminateInstances for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/TerminateInstances
0000000000000000000000000000000000000000;;	func (c *EC2) TerminateInstances(input *TerminateInstancesInput) (*TerminateInstancesOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.TerminateInstancesRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opUnassignIpv6Addresses = "UnassignIpv6Addresses"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnassignIpv6AddressesRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the UnassignIpv6Addresses operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See UnassignIpv6Addresses for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the UnassignIpv6Addresses method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the UnassignIpv6AddressesRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.UnassignIpv6AddressesRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/UnassignIpv6Addresses
0000000000000000000000000000000000000000;;	func (c *EC2) UnassignIpv6AddressesRequest(input *UnassignIpv6AddressesInput) (req *request.Request, output *UnassignIpv6AddressesOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opUnassignIpv6Addresses,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &UnassignIpv6AddressesInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &UnassignIpv6AddressesOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnassignIpv6Addresses API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unassigns one or more IPv6 addresses from a network interface.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation UnassignIpv6Addresses for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/UnassignIpv6Addresses
0000000000000000000000000000000000000000;;	func (c *EC2) UnassignIpv6Addresses(input *UnassignIpv6AddressesInput) (*UnassignIpv6AddressesOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.UnassignIpv6AddressesRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opUnassignPrivateIpAddresses = "UnassignPrivateIpAddresses"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnassignPrivateIpAddressesRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the UnassignPrivateIpAddresses operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See UnassignPrivateIpAddresses for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the UnassignPrivateIpAddresses method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the UnassignPrivateIpAddressesRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.UnassignPrivateIpAddressesRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/UnassignPrivateIpAddresses
0000000000000000000000000000000000000000;;	func (c *EC2) UnassignPrivateIpAddressesRequest(input *UnassignPrivateIpAddressesInput) (req *request.Request, output *UnassignPrivateIpAddressesOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opUnassignPrivateIpAddresses,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &UnassignPrivateIpAddressesInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &UnassignPrivateIpAddressesOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.Remove(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnassignPrivateIpAddresses API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unassigns one or more secondary private IP addresses from a network interface.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation UnassignPrivateIpAddresses for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/UnassignPrivateIpAddresses
0000000000000000000000000000000000000000;;	func (c *EC2) UnassignPrivateIpAddresses(input *UnassignPrivateIpAddressesInput) (*UnassignPrivateIpAddressesOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.UnassignPrivateIpAddressesRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opUnmonitorInstances = "UnmonitorInstances"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmonitorInstancesRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the UnmonitorInstances operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See UnmonitorInstances for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the UnmonitorInstances method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the UnmonitorInstancesRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.UnmonitorInstancesRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/UnmonitorInstances
0000000000000000000000000000000000000000;;	func (c *EC2) UnmonitorInstancesRequest(input *UnmonitorInstancesInput) (req *request.Request, output *UnmonitorInstancesOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opUnmonitorInstances,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &UnmonitorInstancesInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &UnmonitorInstancesOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmonitorInstances API operation for Amazon Elastic Compute Cloud.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Disables detailed monitoring for a running instance. For more information,
0000000000000000000000000000000000000000;;	// see Monitoring Your Instances and Volumes (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-cloudwatch.html)
0000000000000000000000000000000000000000;;	// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Elastic Compute Cloud's
0000000000000000000000000000000000000000;;	// API operation UnmonitorInstances for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/UnmonitorInstances
0000000000000000000000000000000000000000;;	func (c *EC2) UnmonitorInstances(input *UnmonitorInstancesInput) (*UnmonitorInstancesOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.UnmonitorInstancesRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for accepting the quote.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AcceptReservedInstancesExchangeQuoteRequest
0000000000000000000000000000000000000000;;	type AcceptReservedInstancesExchangeQuoteInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IDs of the Convertible Reserved Instances to exchange for other Convertible
0000000000000000000000000000000000000000;;		// Reserved Instances of the same or higher value.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ReservedInstanceIds is a required field
0000000000000000000000000000000000000000;;		ReservedInstanceIds []*string `locationName:"ReservedInstanceId" locationNameList:"ReservedInstanceId" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The configurations of the Convertible Reserved Instance offerings that you
0000000000000000000000000000000000000000;;		// are purchasing in this exchange.
0000000000000000000000000000000000000000;;		TargetConfigurations []*TargetConfigurationRequest `locationName:"TargetConfiguration" locationNameList:"TargetConfigurationRequest" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AcceptReservedInstancesExchangeQuoteInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AcceptReservedInstancesExchangeQuoteInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *AcceptReservedInstancesExchangeQuoteInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "AcceptReservedInstancesExchangeQuoteInput"}
0000000000000000000000000000000000000000;;		if s.ReservedInstanceIds == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("ReservedInstanceIds"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.TargetConfigurations != nil {
0000000000000000000000000000000000000000;;			for i, v := range s.TargetConfigurations {
0000000000000000000000000000000000000000;;				if v == nil {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if err := v.Validate(); err != nil {
0000000000000000000000000000000000000000;;					invalidParams.AddNested(fmt.Sprintf("%s[%v]", "TargetConfigurations", i), err.(request.ErrInvalidParams))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *AcceptReservedInstancesExchangeQuoteInput) SetDryRun(v bool) *AcceptReservedInstancesExchangeQuoteInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReservedInstanceIds sets the ReservedInstanceIds field's value.
0000000000000000000000000000000000000000;;	func (s *AcceptReservedInstancesExchangeQuoteInput) SetReservedInstanceIds(v []*string) *AcceptReservedInstancesExchangeQuoteInput {
0000000000000000000000000000000000000000;;		s.ReservedInstanceIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTargetConfigurations sets the TargetConfigurations field's value.
0000000000000000000000000000000000000000;;	func (s *AcceptReservedInstancesExchangeQuoteInput) SetTargetConfigurations(v []*TargetConfigurationRequest) *AcceptReservedInstancesExchangeQuoteInput {
0000000000000000000000000000000000000000;;		s.TargetConfigurations = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The result of the exchange and whether it was successful.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AcceptReservedInstancesExchangeQuoteResult
0000000000000000000000000000000000000000;;	type AcceptReservedInstancesExchangeQuoteOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the successful exchange.
0000000000000000000000000000000000000000;;		ExchangeId *string `locationName:"exchangeId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AcceptReservedInstancesExchangeQuoteOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AcceptReservedInstancesExchangeQuoteOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetExchangeId sets the ExchangeId field's value.
0000000000000000000000000000000000000000;;	func (s *AcceptReservedInstancesExchangeQuoteOutput) SetExchangeId(v string) *AcceptReservedInstancesExchangeQuoteOutput {
0000000000000000000000000000000000000000;;		s.ExchangeId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for AcceptVpcPeeringConnection.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AcceptVpcPeeringConnectionRequest
0000000000000000000000000000000000000000;;	type AcceptVpcPeeringConnectionInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC peering connection.
0000000000000000000000000000000000000000;;		VpcPeeringConnectionId *string `locationName:"vpcPeeringConnectionId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AcceptVpcPeeringConnectionInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AcceptVpcPeeringConnectionInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *AcceptVpcPeeringConnectionInput) SetDryRun(v bool) *AcceptVpcPeeringConnectionInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcPeeringConnectionId sets the VpcPeeringConnectionId field's value.
0000000000000000000000000000000000000000;;	func (s *AcceptVpcPeeringConnectionInput) SetVpcPeeringConnectionId(v string) *AcceptVpcPeeringConnectionInput {
0000000000000000000000000000000000000000;;		s.VpcPeeringConnectionId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of AcceptVpcPeeringConnection.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AcceptVpcPeeringConnectionResult
0000000000000000000000000000000000000000;;	type AcceptVpcPeeringConnectionOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the VPC peering connection.
0000000000000000000000000000000000000000;;		VpcPeeringConnection *VpcPeeringConnection `locationName:"vpcPeeringConnection" type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AcceptVpcPeeringConnectionOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AcceptVpcPeeringConnectionOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcPeeringConnection sets the VpcPeeringConnection field's value.
0000000000000000000000000000000000000000;;	func (s *AcceptVpcPeeringConnectionOutput) SetVpcPeeringConnection(v *VpcPeeringConnection) *AcceptVpcPeeringConnectionOutput {
0000000000000000000000000000000000000000;;		s.VpcPeeringConnection = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes an account attribute.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AccountAttribute
0000000000000000000000000000000000000000;;	type AccountAttribute struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the account attribute.
0000000000000000000000000000000000000000;;		AttributeName *string `locationName:"attributeName" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more values for the account attribute.
0000000000000000000000000000000000000000;;		AttributeValues []*AccountAttributeValue `locationName:"attributeValueSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AccountAttribute) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AccountAttribute) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAttributeName sets the AttributeName field's value.
0000000000000000000000000000000000000000;;	func (s *AccountAttribute) SetAttributeName(v string) *AccountAttribute {
0000000000000000000000000000000000000000;;		s.AttributeName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAttributeValues sets the AttributeValues field's value.
0000000000000000000000000000000000000000;;	func (s *AccountAttribute) SetAttributeValues(v []*AccountAttributeValue) *AccountAttribute {
0000000000000000000000000000000000000000;;		s.AttributeValues = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a value of an account attribute.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AccountAttributeValue
0000000000000000000000000000000000000000;;	type AccountAttributeValue struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The value of the attribute.
0000000000000000000000000000000000000000;;		AttributeValue *string `locationName:"attributeValue" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AccountAttributeValue) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AccountAttributeValue) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAttributeValue sets the AttributeValue field's value.
0000000000000000000000000000000000000000;;	func (s *AccountAttributeValue) SetAttributeValue(v string) *AccountAttributeValue {
0000000000000000000000000000000000000000;;		s.AttributeValue = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a running instance in a Spot fleet.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ActiveInstance
0000000000000000000000000000000000000000;;	type ActiveInstance struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the instance.
0000000000000000000000000000000000000000;;		InstanceId *string `locationName:"instanceId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The instance type.
0000000000000000000000000000000000000000;;		InstanceType *string `locationName:"instanceType" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the Spot instance request.
0000000000000000000000000000000000000000;;		SpotInstanceRequestId *string `locationName:"spotInstanceRequestId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ActiveInstance) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ActiveInstance) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceId sets the InstanceId field's value.
0000000000000000000000000000000000000000;;	func (s *ActiveInstance) SetInstanceId(v string) *ActiveInstance {
0000000000000000000000000000000000000000;;		s.InstanceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceType sets the InstanceType field's value.
0000000000000000000000000000000000000000;;	func (s *ActiveInstance) SetInstanceType(v string) *ActiveInstance {
0000000000000000000000000000000000000000;;		s.InstanceType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSpotInstanceRequestId sets the SpotInstanceRequestId field's value.
0000000000000000000000000000000000000000;;	func (s *ActiveInstance) SetSpotInstanceRequestId(v string) *ActiveInstance {
0000000000000000000000000000000000000000;;		s.SpotInstanceRequestId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes an Elastic IP address.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/Address
0000000000000000000000000000000000000000;;	type Address struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID representing the allocation of the address for use with EC2-VPC.
0000000000000000000000000000000000000000;;		AllocationId *string `locationName:"allocationId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID representing the association of the address with an instance in a
0000000000000000000000000000000000000000;;		// VPC.
0000000000000000000000000000000000000000;;		AssociationId *string `locationName:"associationId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether this Elastic IP address is for use with instances in EC2-Classic
0000000000000000000000000000000000000000;;		// (standard) or instances in a VPC (vpc).
0000000000000000000000000000000000000000;;		Domain *string `locationName:"domain" type:"string" enum:"DomainType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the instance that the address is associated with (if any).
0000000000000000000000000000000000000000;;		InstanceId *string `locationName:"instanceId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the network interface.
0000000000000000000000000000000000000000;;		NetworkInterfaceId *string `locationName:"networkInterfaceId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the AWS account that owns the network interface.
0000000000000000000000000000000000000000;;		NetworkInterfaceOwnerId *string `locationName:"networkInterfaceOwnerId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The private IP address associated with the Elastic IP address.
0000000000000000000000000000000000000000;;		PrivateIpAddress *string `locationName:"privateIpAddress" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Elastic IP address.
0000000000000000000000000000000000000000;;		PublicIp *string `locationName:"publicIp" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s Address) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s Address) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAllocationId sets the AllocationId field's value.
0000000000000000000000000000000000000000;;	func (s *Address) SetAllocationId(v string) *Address {
0000000000000000000000000000000000000000;;		s.AllocationId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAssociationId sets the AssociationId field's value.
0000000000000000000000000000000000000000;;	func (s *Address) SetAssociationId(v string) *Address {
0000000000000000000000000000000000000000;;		s.AssociationId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDomain sets the Domain field's value.
0000000000000000000000000000000000000000;;	func (s *Address) SetDomain(v string) *Address {
0000000000000000000000000000000000000000;;		s.Domain = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceId sets the InstanceId field's value.
0000000000000000000000000000000000000000;;	func (s *Address) SetInstanceId(v string) *Address {
0000000000000000000000000000000000000000;;		s.InstanceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNetworkInterfaceId sets the NetworkInterfaceId field's value.
0000000000000000000000000000000000000000;;	func (s *Address) SetNetworkInterfaceId(v string) *Address {
0000000000000000000000000000000000000000;;		s.NetworkInterfaceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNetworkInterfaceOwnerId sets the NetworkInterfaceOwnerId field's value.
0000000000000000000000000000000000000000;;	func (s *Address) SetNetworkInterfaceOwnerId(v string) *Address {
0000000000000000000000000000000000000000;;		s.NetworkInterfaceOwnerId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrivateIpAddress sets the PrivateIpAddress field's value.
0000000000000000000000000000000000000000;;	func (s *Address) SetPrivateIpAddress(v string) *Address {
0000000000000000000000000000000000000000;;		s.PrivateIpAddress = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPublicIp sets the PublicIp field's value.
0000000000000000000000000000000000000000;;	func (s *Address) SetPublicIp(v string) *Address {
0000000000000000000000000000000000000000;;		s.PublicIp = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for AllocateAddress.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AllocateAddressRequest
0000000000000000000000000000000000000000;;	type AllocateAddressInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Set to vpc to allocate the address for use with instances in a VPC.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: The address is for use with instances in EC2-Classic.
0000000000000000000000000000000000000000;;		Domain *string `type:"string" enum:"DomainType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AllocateAddressInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AllocateAddressInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDomain sets the Domain field's value.
0000000000000000000000000000000000000000;;	func (s *AllocateAddressInput) SetDomain(v string) *AllocateAddressInput {
0000000000000000000000000000000000000000;;		s.Domain = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *AllocateAddressInput) SetDryRun(v bool) *AllocateAddressInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of AllocateAddress.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AllocateAddressResult
0000000000000000000000000000000000000000;;	type AllocateAddressOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// [EC2-VPC] The ID that AWS assigns to represent the allocation of the Elastic
0000000000000000000000000000000000000000;;		// IP address for use with instances in a VPC.
0000000000000000000000000000000000000000;;		AllocationId *string `locationName:"allocationId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether this Elastic IP address is for use with instances in EC2-Classic
0000000000000000000000000000000000000000;;		// (standard) or instances in a VPC (vpc).
0000000000000000000000000000000000000000;;		Domain *string `locationName:"domain" type:"string" enum:"DomainType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Elastic IP address.
0000000000000000000000000000000000000000;;		PublicIp *string `locationName:"publicIp" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AllocateAddressOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AllocateAddressOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAllocationId sets the AllocationId field's value.
0000000000000000000000000000000000000000;;	func (s *AllocateAddressOutput) SetAllocationId(v string) *AllocateAddressOutput {
0000000000000000000000000000000000000000;;		s.AllocationId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDomain sets the Domain field's value.
0000000000000000000000000000000000000000;;	func (s *AllocateAddressOutput) SetDomain(v string) *AllocateAddressOutput {
0000000000000000000000000000000000000000;;		s.Domain = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPublicIp sets the PublicIp field's value.
0000000000000000000000000000000000000000;;	func (s *AllocateAddressOutput) SetPublicIp(v string) *AllocateAddressOutput {
0000000000000000000000000000000000000000;;		s.PublicIp = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for AllocateHosts.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AllocateHostsRequest
0000000000000000000000000000000000000000;;	type AllocateHostsInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// This is enabled by default. This property allows instances to be automatically
0000000000000000000000000000000000000000;;		// placed onto available Dedicated Hosts, when you are launching instances without
0000000000000000000000000000000000000000;;		// specifying a host ID.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: Enabled
0000000000000000000000000000000000000000;;		AutoPlacement *string `locationName:"autoPlacement" type:"string" enum:"AutoPlacement"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Availability Zone for the Dedicated Hosts.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// AvailabilityZone is a required field
0000000000000000000000000000000000000000;;		AvailabilityZone *string `locationName:"availabilityZone" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Unique, case-sensitive identifier you provide to ensure idempotency of the
0000000000000000000000000000000000000000;;		// request. For more information, see How to Ensure Idempotency (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html)
0000000000000000000000000000000000000000;;		// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;		ClientToken *string `locationName:"clientToken" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Specify the instance type that you want your Dedicated Hosts to be configured
0000000000000000000000000000000000000000;;		// for. When you specify the instance type, that is the only instance type that
0000000000000000000000000000000000000000;;		// you can launch onto that host.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// InstanceType is a required field
0000000000000000000000000000000000000000;;		InstanceType *string `locationName:"instanceType" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of Dedicated Hosts you want to allocate to your account with these
0000000000000000000000000000000000000000;;		// parameters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Quantity is a required field
0000000000000000000000000000000000000000;;		Quantity *int64 `locationName:"quantity" type:"integer" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AllocateHostsInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AllocateHostsInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *AllocateHostsInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "AllocateHostsInput"}
0000000000000000000000000000000000000000;;		if s.AvailabilityZone == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("AvailabilityZone"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.InstanceType == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("InstanceType"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Quantity == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Quantity"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAutoPlacement sets the AutoPlacement field's value.
0000000000000000000000000000000000000000;;	func (s *AllocateHostsInput) SetAutoPlacement(v string) *AllocateHostsInput {
0000000000000000000000000000000000000000;;		s.AutoPlacement = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAvailabilityZone sets the AvailabilityZone field's value.
0000000000000000000000000000000000000000;;	func (s *AllocateHostsInput) SetAvailabilityZone(v string) *AllocateHostsInput {
0000000000000000000000000000000000000000;;		s.AvailabilityZone = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetClientToken sets the ClientToken field's value.
0000000000000000000000000000000000000000;;	func (s *AllocateHostsInput) SetClientToken(v string) *AllocateHostsInput {
0000000000000000000000000000000000000000;;		s.ClientToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceType sets the InstanceType field's value.
0000000000000000000000000000000000000000;;	func (s *AllocateHostsInput) SetInstanceType(v string) *AllocateHostsInput {
0000000000000000000000000000000000000000;;		s.InstanceType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetQuantity sets the Quantity field's value.
0000000000000000000000000000000000000000;;	func (s *AllocateHostsInput) SetQuantity(v int64) *AllocateHostsInput {
0000000000000000000000000000000000000000;;		s.Quantity = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of AllocateHosts.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AllocateHostsResult
0000000000000000000000000000000000000000;;	type AllocateHostsOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the allocated Dedicated Host. This is used when you want to launch
0000000000000000000000000000000000000000;;		// an instance onto a specific host.
0000000000000000000000000000000000000000;;		HostIds []*string `locationName:"hostIdSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AllocateHostsOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AllocateHostsOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHostIds sets the HostIds field's value.
0000000000000000000000000000000000000000;;	func (s *AllocateHostsOutput) SetHostIds(v []*string) *AllocateHostsOutput {
0000000000000000000000000000000000000000;;		s.HostIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AssignIpv6AddressesRequest
0000000000000000000000000000000000000000;;	type AssignIpv6AddressesInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of IPv6 addresses to assign to the network interface. Amazon EC2
0000000000000000000000000000000000000000;;		// automatically selects the IPv6 addresses from the subnet range. You can't
0000000000000000000000000000000000000000;;		// use this option if specifying specific IPv6 addresses.
0000000000000000000000000000000000000000;;		Ipv6AddressCount *int64 `locationName:"ipv6AddressCount" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more specific IPv6 addresses to be assigned to the network interface.
0000000000000000000000000000000000000000;;		// You can't use this option if you're specifying a number of IPv6 addresses.
0000000000000000000000000000000000000000;;		Ipv6Addresses []*string `locationName:"ipv6Addresses" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the network interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// NetworkInterfaceId is a required field
0000000000000000000000000000000000000000;;		NetworkInterfaceId *string `locationName:"networkInterfaceId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AssignIpv6AddressesInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AssignIpv6AddressesInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *AssignIpv6AddressesInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "AssignIpv6AddressesInput"}
0000000000000000000000000000000000000000;;		if s.NetworkInterfaceId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("NetworkInterfaceId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpv6AddressCount sets the Ipv6AddressCount field's value.
0000000000000000000000000000000000000000;;	func (s *AssignIpv6AddressesInput) SetIpv6AddressCount(v int64) *AssignIpv6AddressesInput {
0000000000000000000000000000000000000000;;		s.Ipv6AddressCount = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpv6Addresses sets the Ipv6Addresses field's value.
0000000000000000000000000000000000000000;;	func (s *AssignIpv6AddressesInput) SetIpv6Addresses(v []*string) *AssignIpv6AddressesInput {
0000000000000000000000000000000000000000;;		s.Ipv6Addresses = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNetworkInterfaceId sets the NetworkInterfaceId field's value.
0000000000000000000000000000000000000000;;	func (s *AssignIpv6AddressesInput) SetNetworkInterfaceId(v string) *AssignIpv6AddressesInput {
0000000000000000000000000000000000000000;;		s.NetworkInterfaceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AssignIpv6AddressesResult
0000000000000000000000000000000000000000;;	type AssignIpv6AddressesOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IPv6 addresses assigned to the network interface.
0000000000000000000000000000000000000000;;		AssignedIpv6Addresses []*string `locationName:"assignedIpv6Addresses" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the network interface.
0000000000000000000000000000000000000000;;		NetworkInterfaceId *string `locationName:"networkInterfaceId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AssignIpv6AddressesOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AssignIpv6AddressesOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAssignedIpv6Addresses sets the AssignedIpv6Addresses field's value.
0000000000000000000000000000000000000000;;	func (s *AssignIpv6AddressesOutput) SetAssignedIpv6Addresses(v []*string) *AssignIpv6AddressesOutput {
0000000000000000000000000000000000000000;;		s.AssignedIpv6Addresses = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNetworkInterfaceId sets the NetworkInterfaceId field's value.
0000000000000000000000000000000000000000;;	func (s *AssignIpv6AddressesOutput) SetNetworkInterfaceId(v string) *AssignIpv6AddressesOutput {
0000000000000000000000000000000000000000;;		s.NetworkInterfaceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for AssignPrivateIpAddresses.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AssignPrivateIpAddressesRequest
0000000000000000000000000000000000000000;;	type AssignPrivateIpAddressesInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether to allow an IP address that is already assigned to another
0000000000000000000000000000000000000000;;		// network interface or instance to be reassigned to the specified network interface.
0000000000000000000000000000000000000000;;		AllowReassignment *bool `locationName:"allowReassignment" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the network interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// NetworkInterfaceId is a required field
0000000000000000000000000000000000000000;;		NetworkInterfaceId *string `locationName:"networkInterfaceId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more IP addresses to be assigned as a secondary private IP address
0000000000000000000000000000000000000000;;		// to the network interface. You can't specify this parameter when also specifying
0000000000000000000000000000000000000000;;		// a number of secondary IP addresses.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If you don't specify an IP address, Amazon EC2 automatically selects an IP
0000000000000000000000000000000000000000;;		// address within the subnet range.
0000000000000000000000000000000000000000;;		PrivateIpAddresses []*string `locationName:"privateIpAddress" locationNameList:"PrivateIpAddress" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of secondary IP addresses to assign to the network interface.
0000000000000000000000000000000000000000;;		// You can't specify this parameter when also specifying private IP addresses.
0000000000000000000000000000000000000000;;		SecondaryPrivateIpAddressCount *int64 `locationName:"secondaryPrivateIpAddressCount" type:"integer"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AssignPrivateIpAddressesInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AssignPrivateIpAddressesInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *AssignPrivateIpAddressesInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "AssignPrivateIpAddressesInput"}
0000000000000000000000000000000000000000;;		if s.NetworkInterfaceId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("NetworkInterfaceId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAllowReassignment sets the AllowReassignment field's value.
0000000000000000000000000000000000000000;;	func (s *AssignPrivateIpAddressesInput) SetAllowReassignment(v bool) *AssignPrivateIpAddressesInput {
0000000000000000000000000000000000000000;;		s.AllowReassignment = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNetworkInterfaceId sets the NetworkInterfaceId field's value.
0000000000000000000000000000000000000000;;	func (s *AssignPrivateIpAddressesInput) SetNetworkInterfaceId(v string) *AssignPrivateIpAddressesInput {
0000000000000000000000000000000000000000;;		s.NetworkInterfaceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrivateIpAddresses sets the PrivateIpAddresses field's value.
0000000000000000000000000000000000000000;;	func (s *AssignPrivateIpAddressesInput) SetPrivateIpAddresses(v []*string) *AssignPrivateIpAddressesInput {
0000000000000000000000000000000000000000;;		s.PrivateIpAddresses = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSecondaryPrivateIpAddressCount sets the SecondaryPrivateIpAddressCount field's value.
0000000000000000000000000000000000000000;;	func (s *AssignPrivateIpAddressesInput) SetSecondaryPrivateIpAddressCount(v int64) *AssignPrivateIpAddressesInput {
0000000000000000000000000000000000000000;;		s.SecondaryPrivateIpAddressCount = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AssignPrivateIpAddressesOutput
0000000000000000000000000000000000000000;;	type AssignPrivateIpAddressesOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AssignPrivateIpAddressesOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AssignPrivateIpAddressesOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for AssociateAddress.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AssociateAddressRequest
0000000000000000000000000000000000000000;;	type AssociateAddressInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// [EC2-VPC] The allocation ID. This is required for EC2-VPC.
0000000000000000000000000000000000000000;;		AllocationId *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// [EC2-VPC] For a VPC in an EC2-Classic account, specify true to allow an Elastic
0000000000000000000000000000000000000000;;		// IP address that is already associated with an instance or network interface
0000000000000000000000000000000000000000;;		// to be reassociated with the specified instance or network interface. Otherwise,
0000000000000000000000000000000000000000;;		// the operation fails. In a VPC in an EC2-VPC-only account, reassociation is
0000000000000000000000000000000000000000;;		// automatic, therefore you can specify false to ensure the operation fails
0000000000000000000000000000000000000000;;		// if the Elastic IP address is already associated with another resource.
0000000000000000000000000000000000000000;;		AllowReassociation *bool `locationName:"allowReassociation" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the instance. This is required for EC2-Classic. For EC2-VPC, you
0000000000000000000000000000000000000000;;		// can specify either the instance ID or the network interface ID, but not both.
0000000000000000000000000000000000000000;;		// The operation fails if you specify an instance ID unless exactly one network
0000000000000000000000000000000000000000;;		// interface is attached.
0000000000000000000000000000000000000000;;		InstanceId *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// [EC2-VPC] The ID of the network interface. If the instance has more than
0000000000000000000000000000000000000000;;		// one network interface, you must specify a network interface ID.
0000000000000000000000000000000000000000;;		NetworkInterfaceId *string `locationName:"networkInterfaceId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// [EC2-VPC] The primary or secondary private IP address to associate with the
0000000000000000000000000000000000000000;;		// Elastic IP address. If no private IP address is specified, the Elastic IP
0000000000000000000000000000000000000000;;		// address is associated with the primary private IP address.
0000000000000000000000000000000000000000;;		PrivateIpAddress *string `locationName:"privateIpAddress" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Elastic IP address. This is required for EC2-Classic.
0000000000000000000000000000000000000000;;		PublicIp *string `type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AssociateAddressInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AssociateAddressInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAllocationId sets the AllocationId field's value.
0000000000000000000000000000000000000000;;	func (s *AssociateAddressInput) SetAllocationId(v string) *AssociateAddressInput {
0000000000000000000000000000000000000000;;		s.AllocationId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAllowReassociation sets the AllowReassociation field's value.
0000000000000000000000000000000000000000;;	func (s *AssociateAddressInput) SetAllowReassociation(v bool) *AssociateAddressInput {
0000000000000000000000000000000000000000;;		s.AllowReassociation = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *AssociateAddressInput) SetDryRun(v bool) *AssociateAddressInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceId sets the InstanceId field's value.
0000000000000000000000000000000000000000;;	func (s *AssociateAddressInput) SetInstanceId(v string) *AssociateAddressInput {
0000000000000000000000000000000000000000;;		s.InstanceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNetworkInterfaceId sets the NetworkInterfaceId field's value.
0000000000000000000000000000000000000000;;	func (s *AssociateAddressInput) SetNetworkInterfaceId(v string) *AssociateAddressInput {
0000000000000000000000000000000000000000;;		s.NetworkInterfaceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrivateIpAddress sets the PrivateIpAddress field's value.
0000000000000000000000000000000000000000;;	func (s *AssociateAddressInput) SetPrivateIpAddress(v string) *AssociateAddressInput {
0000000000000000000000000000000000000000;;		s.PrivateIpAddress = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPublicIp sets the PublicIp field's value.
0000000000000000000000000000000000000000;;	func (s *AssociateAddressInput) SetPublicIp(v string) *AssociateAddressInput {
0000000000000000000000000000000000000000;;		s.PublicIp = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of AssociateAddress.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AssociateAddressResult
0000000000000000000000000000000000000000;;	type AssociateAddressOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// [EC2-VPC] The ID that represents the association of the Elastic IP address
0000000000000000000000000000000000000000;;		// with an instance.
0000000000000000000000000000000000000000;;		AssociationId *string `locationName:"associationId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AssociateAddressOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AssociateAddressOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAssociationId sets the AssociationId field's value.
0000000000000000000000000000000000000000;;	func (s *AssociateAddressOutput) SetAssociationId(v string) *AssociateAddressOutput {
0000000000000000000000000000000000000000;;		s.AssociationId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for AssociateDhcpOptions.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AssociateDhcpOptionsRequest
0000000000000000000000000000000000000000;;	type AssociateDhcpOptionsInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the DHCP options set, or default to associate no DHCP options with
0000000000000000000000000000000000000000;;		// the VPC.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// DhcpOptionsId is a required field
0000000000000000000000000000000000000000;;		DhcpOptionsId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// VpcId is a required field
0000000000000000000000000000000000000000;;		VpcId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AssociateDhcpOptionsInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AssociateDhcpOptionsInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *AssociateDhcpOptionsInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "AssociateDhcpOptionsInput"}
0000000000000000000000000000000000000000;;		if s.DhcpOptionsId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("DhcpOptionsId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.VpcId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("VpcId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDhcpOptionsId sets the DhcpOptionsId field's value.
0000000000000000000000000000000000000000;;	func (s *AssociateDhcpOptionsInput) SetDhcpOptionsId(v string) *AssociateDhcpOptionsInput {
0000000000000000000000000000000000000000;;		s.DhcpOptionsId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *AssociateDhcpOptionsInput) SetDryRun(v bool) *AssociateDhcpOptionsInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcId sets the VpcId field's value.
0000000000000000000000000000000000000000;;	func (s *AssociateDhcpOptionsInput) SetVpcId(v string) *AssociateDhcpOptionsInput {
0000000000000000000000000000000000000000;;		s.VpcId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AssociateDhcpOptionsOutput
0000000000000000000000000000000000000000;;	type AssociateDhcpOptionsOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AssociateDhcpOptionsOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AssociateDhcpOptionsOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for AssociateRouteTable.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AssociateRouteTableRequest
0000000000000000000000000000000000000000;;	type AssociateRouteTableInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the route table.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// RouteTableId is a required field
0000000000000000000000000000000000000000;;		RouteTableId *string `locationName:"routeTableId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the subnet.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// SubnetId is a required field
0000000000000000000000000000000000000000;;		SubnetId *string `locationName:"subnetId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AssociateRouteTableInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AssociateRouteTableInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *AssociateRouteTableInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "AssociateRouteTableInput"}
0000000000000000000000000000000000000000;;		if s.RouteTableId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("RouteTableId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.SubnetId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("SubnetId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *AssociateRouteTableInput) SetDryRun(v bool) *AssociateRouteTableInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRouteTableId sets the RouteTableId field's value.
0000000000000000000000000000000000000000;;	func (s *AssociateRouteTableInput) SetRouteTableId(v string) *AssociateRouteTableInput {
0000000000000000000000000000000000000000;;		s.RouteTableId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSubnetId sets the SubnetId field's value.
0000000000000000000000000000000000000000;;	func (s *AssociateRouteTableInput) SetSubnetId(v string) *AssociateRouteTableInput {
0000000000000000000000000000000000000000;;		s.SubnetId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of AssociateRouteTable.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AssociateRouteTableResult
0000000000000000000000000000000000000000;;	type AssociateRouteTableOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The route table association ID (needed to disassociate the route table).
0000000000000000000000000000000000000000;;		AssociationId *string `locationName:"associationId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AssociateRouteTableOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AssociateRouteTableOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAssociationId sets the AssociationId field's value.
0000000000000000000000000000000000000000;;	func (s *AssociateRouteTableOutput) SetAssociationId(v string) *AssociateRouteTableOutput {
0000000000000000000000000000000000000000;;		s.AssociationId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AssociateSubnetCidrBlockRequest
0000000000000000000000000000000000000000;;	type AssociateSubnetCidrBlockInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IPv6 CIDR block for your subnet. The subnet must have a /64 prefix length.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Ipv6CidrBlock is a required field
0000000000000000000000000000000000000000;;		Ipv6CidrBlock *string `locationName:"ipv6CidrBlock" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of your subnet.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// SubnetId is a required field
0000000000000000000000000000000000000000;;		SubnetId *string `locationName:"subnetId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AssociateSubnetCidrBlockInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AssociateSubnetCidrBlockInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *AssociateSubnetCidrBlockInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "AssociateSubnetCidrBlockInput"}
0000000000000000000000000000000000000000;;		if s.Ipv6CidrBlock == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Ipv6CidrBlock"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.SubnetId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("SubnetId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpv6CidrBlock sets the Ipv6CidrBlock field's value.
0000000000000000000000000000000000000000;;	func (s *AssociateSubnetCidrBlockInput) SetIpv6CidrBlock(v string) *AssociateSubnetCidrBlockInput {
0000000000000000000000000000000000000000;;		s.Ipv6CidrBlock = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSubnetId sets the SubnetId field's value.
0000000000000000000000000000000000000000;;	func (s *AssociateSubnetCidrBlockInput) SetSubnetId(v string) *AssociateSubnetCidrBlockInput {
0000000000000000000000000000000000000000;;		s.SubnetId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AssociateSubnetCidrBlockResult
0000000000000000000000000000000000000000;;	type AssociateSubnetCidrBlockOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the IPv6 CIDR block association.
0000000000000000000000000000000000000000;;		Ipv6CidrBlockAssociation *SubnetIpv6CidrBlockAssociation `locationName:"ipv6CidrBlockAssociation" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the subnet.
0000000000000000000000000000000000000000;;		SubnetId *string `locationName:"subnetId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AssociateSubnetCidrBlockOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AssociateSubnetCidrBlockOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpv6CidrBlockAssociation sets the Ipv6CidrBlockAssociation field's value.
0000000000000000000000000000000000000000;;	func (s *AssociateSubnetCidrBlockOutput) SetIpv6CidrBlockAssociation(v *SubnetIpv6CidrBlockAssociation) *AssociateSubnetCidrBlockOutput {
0000000000000000000000000000000000000000;;		s.Ipv6CidrBlockAssociation = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSubnetId sets the SubnetId field's value.
0000000000000000000000000000000000000000;;	func (s *AssociateSubnetCidrBlockOutput) SetSubnetId(v string) *AssociateSubnetCidrBlockOutput {
0000000000000000000000000000000000000000;;		s.SubnetId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AssociateVpcCidrBlockRequest
0000000000000000000000000000000000000000;;	type AssociateVpcCidrBlockInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for
0000000000000000000000000000000000000000;;		// the VPC. You cannot specify the range of IPv6 addresses, or the size of the
0000000000000000000000000000000000000000;;		// CIDR block.
0000000000000000000000000000000000000000;;		AmazonProvidedIpv6CidrBlock *bool `locationName:"amazonProvidedIpv6CidrBlock" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// VpcId is a required field
0000000000000000000000000000000000000000;;		VpcId *string `locationName:"vpcId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AssociateVpcCidrBlockInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AssociateVpcCidrBlockInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *AssociateVpcCidrBlockInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "AssociateVpcCidrBlockInput"}
0000000000000000000000000000000000000000;;		if s.VpcId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("VpcId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAmazonProvidedIpv6CidrBlock sets the AmazonProvidedIpv6CidrBlock field's value.
0000000000000000000000000000000000000000;;	func (s *AssociateVpcCidrBlockInput) SetAmazonProvidedIpv6CidrBlock(v bool) *AssociateVpcCidrBlockInput {
0000000000000000000000000000000000000000;;		s.AmazonProvidedIpv6CidrBlock = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcId sets the VpcId field's value.
0000000000000000000000000000000000000000;;	func (s *AssociateVpcCidrBlockInput) SetVpcId(v string) *AssociateVpcCidrBlockInput {
0000000000000000000000000000000000000000;;		s.VpcId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AssociateVpcCidrBlockResult
0000000000000000000000000000000000000000;;	type AssociateVpcCidrBlockOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the IPv6 CIDR block association.
0000000000000000000000000000000000000000;;		Ipv6CidrBlockAssociation *VpcIpv6CidrBlockAssociation `locationName:"ipv6CidrBlockAssociation" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC.
0000000000000000000000000000000000000000;;		VpcId *string `locationName:"vpcId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AssociateVpcCidrBlockOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AssociateVpcCidrBlockOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpv6CidrBlockAssociation sets the Ipv6CidrBlockAssociation field's value.
0000000000000000000000000000000000000000;;	func (s *AssociateVpcCidrBlockOutput) SetIpv6CidrBlockAssociation(v *VpcIpv6CidrBlockAssociation) *AssociateVpcCidrBlockOutput {
0000000000000000000000000000000000000000;;		s.Ipv6CidrBlockAssociation = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcId sets the VpcId field's value.
0000000000000000000000000000000000000000;;	func (s *AssociateVpcCidrBlockOutput) SetVpcId(v string) *AssociateVpcCidrBlockOutput {
0000000000000000000000000000000000000000;;		s.VpcId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for AttachClassicLinkVpc.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AttachClassicLinkVpcRequest
0000000000000000000000000000000000000000;;	type AttachClassicLinkVpcInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of one or more of the VPC's security groups. You cannot specify security
0000000000000000000000000000000000000000;;		// groups from a different VPC.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Groups is a required field
0000000000000000000000000000000000000000;;		Groups []*string `locationName:"SecurityGroupId" locationNameList:"groupId" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of an EC2-Classic instance to link to the ClassicLink-enabled VPC.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// InstanceId is a required field
0000000000000000000000000000000000000000;;		InstanceId *string `locationName:"instanceId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of a ClassicLink-enabled VPC.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// VpcId is a required field
0000000000000000000000000000000000000000;;		VpcId *string `locationName:"vpcId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AttachClassicLinkVpcInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AttachClassicLinkVpcInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *AttachClassicLinkVpcInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "AttachClassicLinkVpcInput"}
0000000000000000000000000000000000000000;;		if s.Groups == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Groups"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.InstanceId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("InstanceId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.VpcId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("VpcId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *AttachClassicLinkVpcInput) SetDryRun(v bool) *AttachClassicLinkVpcInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroups sets the Groups field's value.
0000000000000000000000000000000000000000;;	func (s *AttachClassicLinkVpcInput) SetGroups(v []*string) *AttachClassicLinkVpcInput {
0000000000000000000000000000000000000000;;		s.Groups = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceId sets the InstanceId field's value.
0000000000000000000000000000000000000000;;	func (s *AttachClassicLinkVpcInput) SetInstanceId(v string) *AttachClassicLinkVpcInput {
0000000000000000000000000000000000000000;;		s.InstanceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcId sets the VpcId field's value.
0000000000000000000000000000000000000000;;	func (s *AttachClassicLinkVpcInput) SetVpcId(v string) *AttachClassicLinkVpcInput {
0000000000000000000000000000000000000000;;		s.VpcId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of AttachClassicLinkVpc.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AttachClassicLinkVpcResult
0000000000000000000000000000000000000000;;	type AttachClassicLinkVpcOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns true if the request succeeds; otherwise, it returns an error.
0000000000000000000000000000000000000000;;		Return *bool `locationName:"return" type:"boolean"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AttachClassicLinkVpcOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AttachClassicLinkVpcOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReturn sets the Return field's value.
0000000000000000000000000000000000000000;;	func (s *AttachClassicLinkVpcOutput) SetReturn(v bool) *AttachClassicLinkVpcOutput {
0000000000000000000000000000000000000000;;		s.Return = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for AttachInternetGateway.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AttachInternetGatewayRequest
0000000000000000000000000000000000000000;;	type AttachInternetGatewayInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the Internet gateway.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// InternetGatewayId is a required field
0000000000000000000000000000000000000000;;		InternetGatewayId *string `locationName:"internetGatewayId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// VpcId is a required field
0000000000000000000000000000000000000000;;		VpcId *string `locationName:"vpcId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AttachInternetGatewayInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AttachInternetGatewayInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *AttachInternetGatewayInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "AttachInternetGatewayInput"}
0000000000000000000000000000000000000000;;		if s.InternetGatewayId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("InternetGatewayId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.VpcId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("VpcId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *AttachInternetGatewayInput) SetDryRun(v bool) *AttachInternetGatewayInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInternetGatewayId sets the InternetGatewayId field's value.
0000000000000000000000000000000000000000;;	func (s *AttachInternetGatewayInput) SetInternetGatewayId(v string) *AttachInternetGatewayInput {
0000000000000000000000000000000000000000;;		s.InternetGatewayId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcId sets the VpcId field's value.
0000000000000000000000000000000000000000;;	func (s *AttachInternetGatewayInput) SetVpcId(v string) *AttachInternetGatewayInput {
0000000000000000000000000000000000000000;;		s.VpcId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AttachInternetGatewayOutput
0000000000000000000000000000000000000000;;	type AttachInternetGatewayOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AttachInternetGatewayOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AttachInternetGatewayOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for AttachNetworkInterface.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AttachNetworkInterfaceRequest
0000000000000000000000000000000000000000;;	type AttachNetworkInterfaceInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The index of the device for the network interface attachment.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// DeviceIndex is a required field
0000000000000000000000000000000000000000;;		DeviceIndex *int64 `locationName:"deviceIndex" type:"integer" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// InstanceId is a required field
0000000000000000000000000000000000000000;;		InstanceId *string `locationName:"instanceId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the network interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// NetworkInterfaceId is a required field
0000000000000000000000000000000000000000;;		NetworkInterfaceId *string `locationName:"networkInterfaceId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AttachNetworkInterfaceInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AttachNetworkInterfaceInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *AttachNetworkInterfaceInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "AttachNetworkInterfaceInput"}
0000000000000000000000000000000000000000;;		if s.DeviceIndex == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("DeviceIndex"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.InstanceId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("InstanceId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.NetworkInterfaceId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("NetworkInterfaceId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDeviceIndex sets the DeviceIndex field's value.
0000000000000000000000000000000000000000;;	func (s *AttachNetworkInterfaceInput) SetDeviceIndex(v int64) *AttachNetworkInterfaceInput {
0000000000000000000000000000000000000000;;		s.DeviceIndex = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *AttachNetworkInterfaceInput) SetDryRun(v bool) *AttachNetworkInterfaceInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceId sets the InstanceId field's value.
0000000000000000000000000000000000000000;;	func (s *AttachNetworkInterfaceInput) SetInstanceId(v string) *AttachNetworkInterfaceInput {
0000000000000000000000000000000000000000;;		s.InstanceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNetworkInterfaceId sets the NetworkInterfaceId field's value.
0000000000000000000000000000000000000000;;	func (s *AttachNetworkInterfaceInput) SetNetworkInterfaceId(v string) *AttachNetworkInterfaceInput {
0000000000000000000000000000000000000000;;		s.NetworkInterfaceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of AttachNetworkInterface.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AttachNetworkInterfaceResult
0000000000000000000000000000000000000000;;	type AttachNetworkInterfaceOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the network interface attachment.
0000000000000000000000000000000000000000;;		AttachmentId *string `locationName:"attachmentId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AttachNetworkInterfaceOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AttachNetworkInterfaceOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAttachmentId sets the AttachmentId field's value.
0000000000000000000000000000000000000000;;	func (s *AttachNetworkInterfaceOutput) SetAttachmentId(v string) *AttachNetworkInterfaceOutput {
0000000000000000000000000000000000000000;;		s.AttachmentId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for AttachVolume.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AttachVolumeRequest
0000000000000000000000000000000000000000;;	type AttachVolumeInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The device name to expose to the instance (for example, /dev/sdh or xvdh).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Device is a required field
0000000000000000000000000000000000000000;;		Device *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// InstanceId is a required field
0000000000000000000000000000000000000000;;		InstanceId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the EBS volume. The volume and instance must be within the same
0000000000000000000000000000000000000000;;		// Availability Zone.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// VolumeId is a required field
0000000000000000000000000000000000000000;;		VolumeId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AttachVolumeInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AttachVolumeInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *AttachVolumeInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "AttachVolumeInput"}
0000000000000000000000000000000000000000;;		if s.Device == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Device"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.InstanceId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("InstanceId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.VolumeId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("VolumeId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDevice sets the Device field's value.
0000000000000000000000000000000000000000;;	func (s *AttachVolumeInput) SetDevice(v string) *AttachVolumeInput {
0000000000000000000000000000000000000000;;		s.Device = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *AttachVolumeInput) SetDryRun(v bool) *AttachVolumeInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceId sets the InstanceId field's value.
0000000000000000000000000000000000000000;;	func (s *AttachVolumeInput) SetInstanceId(v string) *AttachVolumeInput {
0000000000000000000000000000000000000000;;		s.InstanceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVolumeId sets the VolumeId field's value.
0000000000000000000000000000000000000000;;	func (s *AttachVolumeInput) SetVolumeId(v string) *AttachVolumeInput {
0000000000000000000000000000000000000000;;		s.VolumeId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for AttachVpnGateway.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AttachVpnGatewayRequest
0000000000000000000000000000000000000000;;	type AttachVpnGatewayInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// VpcId is a required field
0000000000000000000000000000000000000000;;		VpcId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the virtual private gateway.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// VpnGatewayId is a required field
0000000000000000000000000000000000000000;;		VpnGatewayId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AttachVpnGatewayInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AttachVpnGatewayInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *AttachVpnGatewayInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "AttachVpnGatewayInput"}
0000000000000000000000000000000000000000;;		if s.VpcId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("VpcId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.VpnGatewayId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("VpnGatewayId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *AttachVpnGatewayInput) SetDryRun(v bool) *AttachVpnGatewayInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcId sets the VpcId field's value.
0000000000000000000000000000000000000000;;	func (s *AttachVpnGatewayInput) SetVpcId(v string) *AttachVpnGatewayInput {
0000000000000000000000000000000000000000;;		s.VpcId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpnGatewayId sets the VpnGatewayId field's value.
0000000000000000000000000000000000000000;;	func (s *AttachVpnGatewayInput) SetVpnGatewayId(v string) *AttachVpnGatewayInput {
0000000000000000000000000000000000000000;;		s.VpnGatewayId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of AttachVpnGateway.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AttachVpnGatewayResult
0000000000000000000000000000000000000000;;	type AttachVpnGatewayOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the attachment.
0000000000000000000000000000000000000000;;		VpcAttachment *VpcAttachment `locationName:"attachment" type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AttachVpnGatewayOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AttachVpnGatewayOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcAttachment sets the VpcAttachment field's value.
0000000000000000000000000000000000000000;;	func (s *AttachVpnGatewayOutput) SetVpcAttachment(v *VpcAttachment) *AttachVpnGatewayOutput {
0000000000000000000000000000000000000000;;		s.VpcAttachment = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a value for a resource attribute that is a Boolean value.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AttributeBooleanValue
0000000000000000000000000000000000000000;;	type AttributeBooleanValue struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The attribute value. The valid values are true or false.
0000000000000000000000000000000000000000;;		Value *bool `locationName:"value" type:"boolean"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AttributeBooleanValue) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AttributeBooleanValue) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetValue sets the Value field's value.
0000000000000000000000000000000000000000;;	func (s *AttributeBooleanValue) SetValue(v bool) *AttributeBooleanValue {
0000000000000000000000000000000000000000;;		s.Value = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a value for a resource attribute that is a String.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AttributeValue
0000000000000000000000000000000000000000;;	type AttributeValue struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The attribute value. Note that the value is case-sensitive.
0000000000000000000000000000000000000000;;		Value *string `locationName:"value" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AttributeValue) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AttributeValue) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetValue sets the Value field's value.
0000000000000000000000000000000000000000;;	func (s *AttributeValue) SetValue(v string) *AttributeValue {
0000000000000000000000000000000000000000;;		s.Value = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for AuthorizeSecurityGroupEgress.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AuthorizeSecurityGroupEgressRequest
0000000000000000000000000000000000000000;;	type AuthorizeSecurityGroupEgressInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The CIDR IPv4 address range. We recommend that you specify the CIDR range
0000000000000000000000000000000000000000;;		// in a set of IP permissions instead.
0000000000000000000000000000000000000000;;		CidrIp *string `locationName:"cidrIp" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The start of port range for the TCP and UDP protocols, or an ICMP type number.
0000000000000000000000000000000000000000;;		// We recommend that you specify the port range in a set of IP permissions instead.
0000000000000000000000000000000000000000;;		FromPort *int64 `locationName:"fromPort" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the security group.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// GroupId is a required field
0000000000000000000000000000000000000000;;		GroupId *string `locationName:"groupId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A set of IP permissions. You can't specify a destination security group and
0000000000000000000000000000000000000000;;		// a CIDR IP address range.
0000000000000000000000000000000000000000;;		IpPermissions []*IpPermission `locationName:"ipPermissions" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IP protocol name or number. We recommend that you specify the protocol
0000000000000000000000000000000000000000;;		// in a set of IP permissions instead.
0000000000000000000000000000000000000000;;		IpProtocol *string `locationName:"ipProtocol" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of a destination security group. To authorize outbound access to
0000000000000000000000000000000000000000;;		// a destination security group, we recommend that you use a set of IP permissions
0000000000000000000000000000000000000000;;		// instead.
0000000000000000000000000000000000000000;;		SourceSecurityGroupName *string `locationName:"sourceSecurityGroupName" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The AWS account number for a destination security group. To authorize outbound
0000000000000000000000000000000000000000;;		// access to a destination security group, we recommend that you use a set of
0000000000000000000000000000000000000000;;		// IP permissions instead.
0000000000000000000000000000000000000000;;		SourceSecurityGroupOwnerId *string `locationName:"sourceSecurityGroupOwnerId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The end of port range for the TCP and UDP protocols, or an ICMP type number.
0000000000000000000000000000000000000000;;		// We recommend that you specify the port range in a set of IP permissions instead.
0000000000000000000000000000000000000000;;		ToPort *int64 `locationName:"toPort" type:"integer"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AuthorizeSecurityGroupEgressInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AuthorizeSecurityGroupEgressInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *AuthorizeSecurityGroupEgressInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "AuthorizeSecurityGroupEgressInput"}
0000000000000000000000000000000000000000;;		if s.GroupId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("GroupId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCidrIp sets the CidrIp field's value.
0000000000000000000000000000000000000000;;	func (s *AuthorizeSecurityGroupEgressInput) SetCidrIp(v string) *AuthorizeSecurityGroupEgressInput {
0000000000000000000000000000000000000000;;		s.CidrIp = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *AuthorizeSecurityGroupEgressInput) SetDryRun(v bool) *AuthorizeSecurityGroupEgressInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFromPort sets the FromPort field's value.
0000000000000000000000000000000000000000;;	func (s *AuthorizeSecurityGroupEgressInput) SetFromPort(v int64) *AuthorizeSecurityGroupEgressInput {
0000000000000000000000000000000000000000;;		s.FromPort = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroupId sets the GroupId field's value.
0000000000000000000000000000000000000000;;	func (s *AuthorizeSecurityGroupEgressInput) SetGroupId(v string) *AuthorizeSecurityGroupEgressInput {
0000000000000000000000000000000000000000;;		s.GroupId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpPermissions sets the IpPermissions field's value.
0000000000000000000000000000000000000000;;	func (s *AuthorizeSecurityGroupEgressInput) SetIpPermissions(v []*IpPermission) *AuthorizeSecurityGroupEgressInput {
0000000000000000000000000000000000000000;;		s.IpPermissions = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpProtocol sets the IpProtocol field's value.
0000000000000000000000000000000000000000;;	func (s *AuthorizeSecurityGroupEgressInput) SetIpProtocol(v string) *AuthorizeSecurityGroupEgressInput {
0000000000000000000000000000000000000000;;		s.IpProtocol = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSourceSecurityGroupName sets the SourceSecurityGroupName field's value.
0000000000000000000000000000000000000000;;	func (s *AuthorizeSecurityGroupEgressInput) SetSourceSecurityGroupName(v string) *AuthorizeSecurityGroupEgressInput {
0000000000000000000000000000000000000000;;		s.SourceSecurityGroupName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSourceSecurityGroupOwnerId sets the SourceSecurityGroupOwnerId field's value.
0000000000000000000000000000000000000000;;	func (s *AuthorizeSecurityGroupEgressInput) SetSourceSecurityGroupOwnerId(v string) *AuthorizeSecurityGroupEgressInput {
0000000000000000000000000000000000000000;;		s.SourceSecurityGroupOwnerId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetToPort sets the ToPort field's value.
0000000000000000000000000000000000000000;;	func (s *AuthorizeSecurityGroupEgressInput) SetToPort(v int64) *AuthorizeSecurityGroupEgressInput {
0000000000000000000000000000000000000000;;		s.ToPort = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AuthorizeSecurityGroupEgressOutput
0000000000000000000000000000000000000000;;	type AuthorizeSecurityGroupEgressOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AuthorizeSecurityGroupEgressOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AuthorizeSecurityGroupEgressOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for AuthorizeSecurityGroupIngress.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AuthorizeSecurityGroupIngressRequest
0000000000000000000000000000000000000000;;	type AuthorizeSecurityGroupIngressInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The CIDR IPv4 address range. You can't specify this parameter when specifying
0000000000000000000000000000000000000000;;		// a source security group.
0000000000000000000000000000000000000000;;		CidrIp *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6
0000000000000000000000000000000000000000;;		// type number. For the ICMP/ICMPv6 type number, use -1 to specify all types.
0000000000000000000000000000000000000000;;		FromPort *int64 `type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the security group. Required for a nondefault VPC.
0000000000000000000000000000000000000000;;		GroupId *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// [EC2-Classic, default VPC] The name of the security group.
0000000000000000000000000000000000000000;;		GroupName *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A set of IP permissions. Can be used to specify multiple rules in a single
0000000000000000000000000000000000000000;;		// command.
0000000000000000000000000000000000000000;;		IpPermissions []*IpPermission `locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IP protocol name (tcp, udp, icmp) or number (see Protocol Numbers (http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml)).
0000000000000000000000000000000000000000;;		// (VPC only) Use -1 to specify all protocols. If you specify -1, or a protocol
0000000000000000000000000000000000000000;;		// number other than tcp, udp, icmp, or 58 (ICMPv6), traffic on all ports is
0000000000000000000000000000000000000000;;		// allowed, regardless of any ports you specify. For tcp, udp, and icmp, you
0000000000000000000000000000000000000000;;		// must specify a port range. For protocol 58 (ICMPv6), you can optionally specify
0000000000000000000000000000000000000000;;		// a port range; if you don't, traffic for all types and codes is allowed.
0000000000000000000000000000000000000000;;		IpProtocol *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// [EC2-Classic, default VPC] The name of the source security group. You can't
0000000000000000000000000000000000000000;;		// specify this parameter in combination with the following parameters: the
0000000000000000000000000000000000000000;;		// CIDR IP address range, the start of the port range, the IP protocol, and
0000000000000000000000000000000000000000;;		// the end of the port range. Creates rules that grant full ICMP, UDP, and TCP
0000000000000000000000000000000000000000;;		// access. To create a rule with a specific IP protocol and port range, use
0000000000000000000000000000000000000000;;		// a set of IP permissions instead. For EC2-VPC, the source security group must
0000000000000000000000000000000000000000;;		// be in the same VPC.
0000000000000000000000000000000000000000;;		SourceSecurityGroupName *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// [EC2-Classic] The AWS account number for the source security group, if the
0000000000000000000000000000000000000000;;		// source security group is in a different account. You can't specify this parameter
0000000000000000000000000000000000000000;;		// in combination with the following parameters: the CIDR IP address range,
0000000000000000000000000000000000000000;;		// the IP protocol, the start of the port range, and the end of the port range.
0000000000000000000000000000000000000000;;		// Creates rules that grant full ICMP, UDP, and TCP access. To create a rule
0000000000000000000000000000000000000000;;		// with a specific IP protocol and port range, use a set of IP permissions instead.
0000000000000000000000000000000000000000;;		SourceSecurityGroupOwnerId *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code
0000000000000000000000000000000000000000;;		// number. For the ICMP/ICMPv6 code number, use -1 to specify all codes.
0000000000000000000000000000000000000000;;		ToPort *int64 `type:"integer"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AuthorizeSecurityGroupIngressInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AuthorizeSecurityGroupIngressInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCidrIp sets the CidrIp field's value.
0000000000000000000000000000000000000000;;	func (s *AuthorizeSecurityGroupIngressInput) SetCidrIp(v string) *AuthorizeSecurityGroupIngressInput {
0000000000000000000000000000000000000000;;		s.CidrIp = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *AuthorizeSecurityGroupIngressInput) SetDryRun(v bool) *AuthorizeSecurityGroupIngressInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFromPort sets the FromPort field's value.
0000000000000000000000000000000000000000;;	func (s *AuthorizeSecurityGroupIngressInput) SetFromPort(v int64) *AuthorizeSecurityGroupIngressInput {
0000000000000000000000000000000000000000;;		s.FromPort = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroupId sets the GroupId field's value.
0000000000000000000000000000000000000000;;	func (s *AuthorizeSecurityGroupIngressInput) SetGroupId(v string) *AuthorizeSecurityGroupIngressInput {
0000000000000000000000000000000000000000;;		s.GroupId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroupName sets the GroupName field's value.
0000000000000000000000000000000000000000;;	func (s *AuthorizeSecurityGroupIngressInput) SetGroupName(v string) *AuthorizeSecurityGroupIngressInput {
0000000000000000000000000000000000000000;;		s.GroupName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpPermissions sets the IpPermissions field's value.
0000000000000000000000000000000000000000;;	func (s *AuthorizeSecurityGroupIngressInput) SetIpPermissions(v []*IpPermission) *AuthorizeSecurityGroupIngressInput {
0000000000000000000000000000000000000000;;		s.IpPermissions = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpProtocol sets the IpProtocol field's value.
0000000000000000000000000000000000000000;;	func (s *AuthorizeSecurityGroupIngressInput) SetIpProtocol(v string) *AuthorizeSecurityGroupIngressInput {
0000000000000000000000000000000000000000;;		s.IpProtocol = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSourceSecurityGroupName sets the SourceSecurityGroupName field's value.
0000000000000000000000000000000000000000;;	func (s *AuthorizeSecurityGroupIngressInput) SetSourceSecurityGroupName(v string) *AuthorizeSecurityGroupIngressInput {
0000000000000000000000000000000000000000;;		s.SourceSecurityGroupName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSourceSecurityGroupOwnerId sets the SourceSecurityGroupOwnerId field's value.
0000000000000000000000000000000000000000;;	func (s *AuthorizeSecurityGroupIngressInput) SetSourceSecurityGroupOwnerId(v string) *AuthorizeSecurityGroupIngressInput {
0000000000000000000000000000000000000000;;		s.SourceSecurityGroupOwnerId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetToPort sets the ToPort field's value.
0000000000000000000000000000000000000000;;	func (s *AuthorizeSecurityGroupIngressInput) SetToPort(v int64) *AuthorizeSecurityGroupIngressInput {
0000000000000000000000000000000000000000;;		s.ToPort = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AuthorizeSecurityGroupIngressOutput
0000000000000000000000000000000000000000;;	type AuthorizeSecurityGroupIngressOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AuthorizeSecurityGroupIngressOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AuthorizeSecurityGroupIngressOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes an Availability Zone.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AvailabilityZone
0000000000000000000000000000000000000000;;	type AvailabilityZone struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Any messages about the Availability Zone.
0000000000000000000000000000000000000000;;		Messages []*AvailabilityZoneMessage `locationName:"messageSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the region.
0000000000000000000000000000000000000000;;		RegionName *string `locationName:"regionName" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The state of the Availability Zone.
0000000000000000000000000000000000000000;;		State *string `locationName:"zoneState" type:"string" enum:"AvailabilityZoneState"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the Availability Zone.
0000000000000000000000000000000000000000;;		ZoneName *string `locationName:"zoneName" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AvailabilityZone) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AvailabilityZone) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMessages sets the Messages field's value.
0000000000000000000000000000000000000000;;	func (s *AvailabilityZone) SetMessages(v []*AvailabilityZoneMessage) *AvailabilityZone {
0000000000000000000000000000000000000000;;		s.Messages = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRegionName sets the RegionName field's value.
0000000000000000000000000000000000000000;;	func (s *AvailabilityZone) SetRegionName(v string) *AvailabilityZone {
0000000000000000000000000000000000000000;;		s.RegionName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetState sets the State field's value.
0000000000000000000000000000000000000000;;	func (s *AvailabilityZone) SetState(v string) *AvailabilityZone {
0000000000000000000000000000000000000000;;		s.State = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetZoneName sets the ZoneName field's value.
0000000000000000000000000000000000000000;;	func (s *AvailabilityZone) SetZoneName(v string) *AvailabilityZone {
0000000000000000000000000000000000000000;;		s.ZoneName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a message about an Availability Zone.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AvailabilityZoneMessage
0000000000000000000000000000000000000000;;	type AvailabilityZoneMessage struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The message about the Availability Zone.
0000000000000000000000000000000000000000;;		Message *string `locationName:"message" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AvailabilityZoneMessage) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AvailabilityZoneMessage) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMessage sets the Message field's value.
0000000000000000000000000000000000000000;;	func (s *AvailabilityZoneMessage) SetMessage(v string) *AvailabilityZoneMessage {
0000000000000000000000000000000000000000;;		s.Message = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The capacity information for instances launched onto the Dedicated Host.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/AvailableCapacity
0000000000000000000000000000000000000000;;	type AvailableCapacity struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The total number of instances that the Dedicated Host supports.
0000000000000000000000000000000000000000;;		AvailableInstanceCapacity []*InstanceCapacity `locationName:"availableInstanceCapacity" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of vCPUs available on the Dedicated Host.
0000000000000000000000000000000000000000;;		AvailableVCpus *int64 `locationName:"availableVCpus" type:"integer"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AvailableCapacity) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AvailableCapacity) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAvailableInstanceCapacity sets the AvailableInstanceCapacity field's value.
0000000000000000000000000000000000000000;;	func (s *AvailableCapacity) SetAvailableInstanceCapacity(v []*InstanceCapacity) *AvailableCapacity {
0000000000000000000000000000000000000000;;		s.AvailableInstanceCapacity = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAvailableVCpus sets the AvailableVCpus field's value.
0000000000000000000000000000000000000000;;	func (s *AvailableCapacity) SetAvailableVCpus(v int64) *AvailableCapacity {
0000000000000000000000000000000000000000;;		s.AvailableVCpus = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/BlobAttributeValue
0000000000000000000000000000000000000000;;	type BlobAttributeValue struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Value is automatically base64 encoded/decoded by the SDK.
0000000000000000000000000000000000000000;;		Value []byte `locationName:"value" type:"blob"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s BlobAttributeValue) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s BlobAttributeValue) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetValue sets the Value field's value.
0000000000000000000000000000000000000000;;	func (s *BlobAttributeValue) SetValue(v []byte) *BlobAttributeValue {
0000000000000000000000000000000000000000;;		s.Value = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a block device mapping.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/BlockDeviceMapping
0000000000000000000000000000000000000000;;	type BlockDeviceMapping struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The device name exposed to the instance (for example, /dev/sdh or xvdh).
0000000000000000000000000000000000000000;;		DeviceName *string `locationName:"deviceName" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Parameters used to automatically set up EBS volumes when the instance is
0000000000000000000000000000000000000000;;		// launched.
0000000000000000000000000000000000000000;;		Ebs *EbsBlockDevice `locationName:"ebs" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Suppresses the specified device included in the block device mapping of the
0000000000000000000000000000000000000000;;		// AMI.
0000000000000000000000000000000000000000;;		NoDevice *string `locationName:"noDevice" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The virtual device name (ephemeralN). Instance store volumes are numbered
0000000000000000000000000000000000000000;;		// starting from 0. An instance type with 2 available instance store volumes
0000000000000000000000000000000000000000;;		// can specify mappings for ephemeral0 and ephemeral1.The number of available
0000000000000000000000000000000000000000;;		// instance store volumes depends on the instance type. After you connect to
0000000000000000000000000000000000000000;;		// the instance, you must mount the volume.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Constraints: For M3 instances, you must specify instance store volumes in
0000000000000000000000000000000000000000;;		// the block device mapping for the instance. When you launch an M3 instance,
0000000000000000000000000000000000000000;;		// we ignore any instance store volumes specified in the block device mapping
0000000000000000000000000000000000000000;;		// for the AMI.
0000000000000000000000000000000000000000;;		VirtualName *string `locationName:"virtualName" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s BlockDeviceMapping) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s BlockDeviceMapping) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDeviceName sets the DeviceName field's value.
0000000000000000000000000000000000000000;;	func (s *BlockDeviceMapping) SetDeviceName(v string) *BlockDeviceMapping {
0000000000000000000000000000000000000000;;		s.DeviceName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEbs sets the Ebs field's value.
0000000000000000000000000000000000000000;;	func (s *BlockDeviceMapping) SetEbs(v *EbsBlockDevice) *BlockDeviceMapping {
0000000000000000000000000000000000000000;;		s.Ebs = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNoDevice sets the NoDevice field's value.
0000000000000000000000000000000000000000;;	func (s *BlockDeviceMapping) SetNoDevice(v string) *BlockDeviceMapping {
0000000000000000000000000000000000000000;;		s.NoDevice = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVirtualName sets the VirtualName field's value.
0000000000000000000000000000000000000000;;	func (s *BlockDeviceMapping) SetVirtualName(v string) *BlockDeviceMapping {
0000000000000000000000000000000000000000;;		s.VirtualName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for BundleInstance.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/BundleInstanceRequest
0000000000000000000000000000000000000000;;	type BundleInstanceInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the instance to bundle.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Type: String
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: None
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Required: Yes
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// InstanceId is a required field
0000000000000000000000000000000000000000;;		InstanceId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The bucket in which to store the AMI. You can specify a bucket that you already
0000000000000000000000000000000000000000;;		// own or a new bucket that Amazon EC2 creates on your behalf. If you specify
0000000000000000000000000000000000000000;;		// a bucket that belongs to someone else, Amazon EC2 returns an error.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Storage is a required field
0000000000000000000000000000000000000000;;		Storage *Storage `type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s BundleInstanceInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s BundleInstanceInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *BundleInstanceInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "BundleInstanceInput"}
0000000000000000000000000000000000000000;;		if s.InstanceId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("InstanceId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Storage == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Storage"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *BundleInstanceInput) SetDryRun(v bool) *BundleInstanceInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceId sets the InstanceId field's value.
0000000000000000000000000000000000000000;;	func (s *BundleInstanceInput) SetInstanceId(v string) *BundleInstanceInput {
0000000000000000000000000000000000000000;;		s.InstanceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStorage sets the Storage field's value.
0000000000000000000000000000000000000000;;	func (s *BundleInstanceInput) SetStorage(v *Storage) *BundleInstanceInput {
0000000000000000000000000000000000000000;;		s.Storage = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of BundleInstance.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/BundleInstanceResult
0000000000000000000000000000000000000000;;	type BundleInstanceOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the bundle task.
0000000000000000000000000000000000000000;;		BundleTask *BundleTask `locationName:"bundleInstanceTask" type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s BundleInstanceOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s BundleInstanceOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetBundleTask sets the BundleTask field's value.
0000000000000000000000000000000000000000;;	func (s *BundleInstanceOutput) SetBundleTask(v *BundleTask) *BundleInstanceOutput {
0000000000000000000000000000000000000000;;		s.BundleTask = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a bundle task.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/BundleTask
0000000000000000000000000000000000000000;;	type BundleTask struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the bundle task.
0000000000000000000000000000000000000000;;		BundleId *string `locationName:"bundleId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If the task fails, a description of the error.
0000000000000000000000000000000000000000;;		BundleTaskError *BundleTaskError `locationName:"error" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the instance associated with this bundle task.
0000000000000000000000000000000000000000;;		InstanceId *string `locationName:"instanceId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The level of task completion, as a percent (for example, 20%).
0000000000000000000000000000000000000000;;		Progress *string `locationName:"progress" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The time this task started.
0000000000000000000000000000000000000000;;		StartTime *time.Time `locationName:"startTime" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The state of the task.
0000000000000000000000000000000000000000;;		State *string `locationName:"state" type:"string" enum:"BundleTaskState"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Amazon S3 storage locations.
0000000000000000000000000000000000000000;;		Storage *Storage `locationName:"storage" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The time of the most recent update for the task.
0000000000000000000000000000000000000000;;		UpdateTime *time.Time `locationName:"updateTime" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s BundleTask) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s BundleTask) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetBundleId sets the BundleId field's value.
0000000000000000000000000000000000000000;;	func (s *BundleTask) SetBundleId(v string) *BundleTask {
0000000000000000000000000000000000000000;;		s.BundleId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetBundleTaskError sets the BundleTaskError field's value.
0000000000000000000000000000000000000000;;	func (s *BundleTask) SetBundleTaskError(v *BundleTaskError) *BundleTask {
0000000000000000000000000000000000000000;;		s.BundleTaskError = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceId sets the InstanceId field's value.
0000000000000000000000000000000000000000;;	func (s *BundleTask) SetInstanceId(v string) *BundleTask {
0000000000000000000000000000000000000000;;		s.InstanceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetProgress sets the Progress field's value.
0000000000000000000000000000000000000000;;	func (s *BundleTask) SetProgress(v string) *BundleTask {
0000000000000000000000000000000000000000;;		s.Progress = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStartTime sets the StartTime field's value.
0000000000000000000000000000000000000000;;	func (s *BundleTask) SetStartTime(v time.Time) *BundleTask {
0000000000000000000000000000000000000000;;		s.StartTime = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetState sets the State field's value.
0000000000000000000000000000000000000000;;	func (s *BundleTask) SetState(v string) *BundleTask {
0000000000000000000000000000000000000000;;		s.State = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStorage sets the Storage field's value.
0000000000000000000000000000000000000000;;	func (s *BundleTask) SetStorage(v *Storage) *BundleTask {
0000000000000000000000000000000000000000;;		s.Storage = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUpdateTime sets the UpdateTime field's value.
0000000000000000000000000000000000000000;;	func (s *BundleTask) SetUpdateTime(v time.Time) *BundleTask {
0000000000000000000000000000000000000000;;		s.UpdateTime = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes an error for BundleInstance.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/BundleTaskError
0000000000000000000000000000000000000000;;	type BundleTaskError struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The error code.
0000000000000000000000000000000000000000;;		Code *string `locationName:"code" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The error message.
0000000000000000000000000000000000000000;;		Message *string `locationName:"message" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s BundleTaskError) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s BundleTaskError) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCode sets the Code field's value.
0000000000000000000000000000000000000000;;	func (s *BundleTaskError) SetCode(v string) *BundleTaskError {
0000000000000000000000000000000000000000;;		s.Code = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMessage sets the Message field's value.
0000000000000000000000000000000000000000;;	func (s *BundleTaskError) SetMessage(v string) *BundleTaskError {
0000000000000000000000000000000000000000;;		s.Message = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for CancelBundleTask.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CancelBundleTaskRequest
0000000000000000000000000000000000000000;;	type CancelBundleTaskInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the bundle task.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// BundleId is a required field
0000000000000000000000000000000000000000;;		BundleId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CancelBundleTaskInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CancelBundleTaskInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *CancelBundleTaskInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "CancelBundleTaskInput"}
0000000000000000000000000000000000000000;;		if s.BundleId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("BundleId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetBundleId sets the BundleId field's value.
0000000000000000000000000000000000000000;;	func (s *CancelBundleTaskInput) SetBundleId(v string) *CancelBundleTaskInput {
0000000000000000000000000000000000000000;;		s.BundleId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *CancelBundleTaskInput) SetDryRun(v bool) *CancelBundleTaskInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of CancelBundleTask.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CancelBundleTaskResult
0000000000000000000000000000000000000000;;	type CancelBundleTaskOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the bundle task.
0000000000000000000000000000000000000000;;		BundleTask *BundleTask `locationName:"bundleInstanceTask" type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CancelBundleTaskOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CancelBundleTaskOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetBundleTask sets the BundleTask field's value.
0000000000000000000000000000000000000000;;	func (s *CancelBundleTaskOutput) SetBundleTask(v *BundleTask) *CancelBundleTaskOutput {
0000000000000000000000000000000000000000;;		s.BundleTask = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for CancelConversionTask.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CancelConversionRequest
0000000000000000000000000000000000000000;;	type CancelConversionTaskInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the conversion task.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ConversionTaskId is a required field
0000000000000000000000000000000000000000;;		ConversionTaskId *string `locationName:"conversionTaskId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The reason for canceling the conversion task.
0000000000000000000000000000000000000000;;		ReasonMessage *string `locationName:"reasonMessage" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CancelConversionTaskInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CancelConversionTaskInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *CancelConversionTaskInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "CancelConversionTaskInput"}
0000000000000000000000000000000000000000;;		if s.ConversionTaskId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("ConversionTaskId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetConversionTaskId sets the ConversionTaskId field's value.
0000000000000000000000000000000000000000;;	func (s *CancelConversionTaskInput) SetConversionTaskId(v string) *CancelConversionTaskInput {
0000000000000000000000000000000000000000;;		s.ConversionTaskId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *CancelConversionTaskInput) SetDryRun(v bool) *CancelConversionTaskInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReasonMessage sets the ReasonMessage field's value.
0000000000000000000000000000000000000000;;	func (s *CancelConversionTaskInput) SetReasonMessage(v string) *CancelConversionTaskInput {
0000000000000000000000000000000000000000;;		s.ReasonMessage = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CancelConversionTaskOutput
0000000000000000000000000000000000000000;;	type CancelConversionTaskOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CancelConversionTaskOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CancelConversionTaskOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for CancelExportTask.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CancelExportTaskRequest
0000000000000000000000000000000000000000;;	type CancelExportTaskInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the export task. This is the ID returned by CreateInstanceExportTask.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ExportTaskId is a required field
0000000000000000000000000000000000000000;;		ExportTaskId *string `locationName:"exportTaskId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CancelExportTaskInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CancelExportTaskInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *CancelExportTaskInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "CancelExportTaskInput"}
0000000000000000000000000000000000000000;;		if s.ExportTaskId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("ExportTaskId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetExportTaskId sets the ExportTaskId field's value.
0000000000000000000000000000000000000000;;	func (s *CancelExportTaskInput) SetExportTaskId(v string) *CancelExportTaskInput {
0000000000000000000000000000000000000000;;		s.ExportTaskId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CancelExportTaskOutput
0000000000000000000000000000000000000000;;	type CancelExportTaskOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CancelExportTaskOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CancelExportTaskOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for CancelImportTask.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CancelImportTaskRequest
0000000000000000000000000000000000000000;;	type CancelImportTaskInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The reason for canceling the task.
0000000000000000000000000000000000000000;;		CancelReason *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the import image or import snapshot task to be canceled.
0000000000000000000000000000000000000000;;		ImportTaskId *string `type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CancelImportTaskInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CancelImportTaskInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCancelReason sets the CancelReason field's value.
0000000000000000000000000000000000000000;;	func (s *CancelImportTaskInput) SetCancelReason(v string) *CancelImportTaskInput {
0000000000000000000000000000000000000000;;		s.CancelReason = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *CancelImportTaskInput) SetDryRun(v bool) *CancelImportTaskInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetImportTaskId sets the ImportTaskId field's value.
0000000000000000000000000000000000000000;;	func (s *CancelImportTaskInput) SetImportTaskId(v string) *CancelImportTaskInput {
0000000000000000000000000000000000000000;;		s.ImportTaskId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output for CancelImportTask.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CancelImportTaskResult
0000000000000000000000000000000000000000;;	type CancelImportTaskOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the task being canceled.
0000000000000000000000000000000000000000;;		ImportTaskId *string `locationName:"importTaskId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The current state of the task being canceled.
0000000000000000000000000000000000000000;;		PreviousState *string `locationName:"previousState" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The current state of the task being canceled.
0000000000000000000000000000000000000000;;		State *string `locationName:"state" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CancelImportTaskOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CancelImportTaskOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetImportTaskId sets the ImportTaskId field's value.
0000000000000000000000000000000000000000;;	func (s *CancelImportTaskOutput) SetImportTaskId(v string) *CancelImportTaskOutput {
0000000000000000000000000000000000000000;;		s.ImportTaskId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPreviousState sets the PreviousState field's value.
0000000000000000000000000000000000000000;;	func (s *CancelImportTaskOutput) SetPreviousState(v string) *CancelImportTaskOutput {
0000000000000000000000000000000000000000;;		s.PreviousState = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetState sets the State field's value.
0000000000000000000000000000000000000000;;	func (s *CancelImportTaskOutput) SetState(v string) *CancelImportTaskOutput {
0000000000000000000000000000000000000000;;		s.State = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for CancelReservedInstancesListing.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CancelReservedInstancesListingRequest
0000000000000000000000000000000000000000;;	type CancelReservedInstancesListingInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the Reserved Instance listing.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ReservedInstancesListingId is a required field
0000000000000000000000000000000000000000;;		ReservedInstancesListingId *string `locationName:"reservedInstancesListingId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CancelReservedInstancesListingInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CancelReservedInstancesListingInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *CancelReservedInstancesListingInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "CancelReservedInstancesListingInput"}
0000000000000000000000000000000000000000;;		if s.ReservedInstancesListingId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("ReservedInstancesListingId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReservedInstancesListingId sets the ReservedInstancesListingId field's value.
0000000000000000000000000000000000000000;;	func (s *CancelReservedInstancesListingInput) SetReservedInstancesListingId(v string) *CancelReservedInstancesListingInput {
0000000000000000000000000000000000000000;;		s.ReservedInstancesListingId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of CancelReservedInstancesListing.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CancelReservedInstancesListingResult
0000000000000000000000000000000000000000;;	type CancelReservedInstancesListingOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Reserved Instance listing.
0000000000000000000000000000000000000000;;		ReservedInstancesListings []*ReservedInstancesListing `locationName:"reservedInstancesListingsSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CancelReservedInstancesListingOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CancelReservedInstancesListingOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReservedInstancesListings sets the ReservedInstancesListings field's value.
0000000000000000000000000000000000000000;;	func (s *CancelReservedInstancesListingOutput) SetReservedInstancesListings(v []*ReservedInstancesListing) *CancelReservedInstancesListingOutput {
0000000000000000000000000000000000000000;;		s.ReservedInstancesListings = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a Spot fleet error.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CancelSpotFleetRequestsError
0000000000000000000000000000000000000000;;	type CancelSpotFleetRequestsError struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The error code.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Code is a required field
0000000000000000000000000000000000000000;;		Code *string `locationName:"code" type:"string" required:"true" enum:"CancelBatchErrorCode"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The description for the error code.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Message is a required field
0000000000000000000000000000000000000000;;		Message *string `locationName:"message" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CancelSpotFleetRequestsError) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CancelSpotFleetRequestsError) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCode sets the Code field's value.
0000000000000000000000000000000000000000;;	func (s *CancelSpotFleetRequestsError) SetCode(v string) *CancelSpotFleetRequestsError {
0000000000000000000000000000000000000000;;		s.Code = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMessage sets the Message field's value.
0000000000000000000000000000000000000000;;	func (s *CancelSpotFleetRequestsError) SetMessage(v string) *CancelSpotFleetRequestsError {
0000000000000000000000000000000000000000;;		s.Message = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a Spot fleet request that was not successfully canceled.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CancelSpotFleetRequestsErrorItem
0000000000000000000000000000000000000000;;	type CancelSpotFleetRequestsErrorItem struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The error.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Error is a required field
0000000000000000000000000000000000000000;;		Error *CancelSpotFleetRequestsError `locationName:"error" type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the Spot fleet request.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// SpotFleetRequestId is a required field
0000000000000000000000000000000000000000;;		SpotFleetRequestId *string `locationName:"spotFleetRequestId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CancelSpotFleetRequestsErrorItem) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CancelSpotFleetRequestsErrorItem) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetError sets the Error field's value.
0000000000000000000000000000000000000000;;	func (s *CancelSpotFleetRequestsErrorItem) SetError(v *CancelSpotFleetRequestsError) *CancelSpotFleetRequestsErrorItem {
0000000000000000000000000000000000000000;;		s.Error = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSpotFleetRequestId sets the SpotFleetRequestId field's value.
0000000000000000000000000000000000000000;;	func (s *CancelSpotFleetRequestsErrorItem) SetSpotFleetRequestId(v string) *CancelSpotFleetRequestsErrorItem {
0000000000000000000000000000000000000000;;		s.SpotFleetRequestId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for CancelSpotFleetRequests.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CancelSpotFleetRequestsRequest
0000000000000000000000000000000000000000;;	type CancelSpotFleetRequestsInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IDs of the Spot fleet requests.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// SpotFleetRequestIds is a required field
0000000000000000000000000000000000000000;;		SpotFleetRequestIds []*string `locationName:"spotFleetRequestId" locationNameList:"item" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether to terminate instances for a Spot fleet request if it is
0000000000000000000000000000000000000000;;		// canceled successfully.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// TerminateInstances is a required field
0000000000000000000000000000000000000000;;		TerminateInstances *bool `locationName:"terminateInstances" type:"boolean" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CancelSpotFleetRequestsInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CancelSpotFleetRequestsInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *CancelSpotFleetRequestsInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "CancelSpotFleetRequestsInput"}
0000000000000000000000000000000000000000;;		if s.SpotFleetRequestIds == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("SpotFleetRequestIds"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.TerminateInstances == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("TerminateInstances"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *CancelSpotFleetRequestsInput) SetDryRun(v bool) *CancelSpotFleetRequestsInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSpotFleetRequestIds sets the SpotFleetRequestIds field's value.
0000000000000000000000000000000000000000;;	func (s *CancelSpotFleetRequestsInput) SetSpotFleetRequestIds(v []*string) *CancelSpotFleetRequestsInput {
0000000000000000000000000000000000000000;;		s.SpotFleetRequestIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTerminateInstances sets the TerminateInstances field's value.
0000000000000000000000000000000000000000;;	func (s *CancelSpotFleetRequestsInput) SetTerminateInstances(v bool) *CancelSpotFleetRequestsInput {
0000000000000000000000000000000000000000;;		s.TerminateInstances = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of CancelSpotFleetRequests.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CancelSpotFleetRequestsResponse
0000000000000000000000000000000000000000;;	type CancelSpotFleetRequestsOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the Spot fleet requests that are successfully canceled.
0000000000000000000000000000000000000000;;		SuccessfulFleetRequests []*CancelSpotFleetRequestsSuccessItem `locationName:"successfulFleetRequestSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the Spot fleet requests that are not successfully canceled.
0000000000000000000000000000000000000000;;		UnsuccessfulFleetRequests []*CancelSpotFleetRequestsErrorItem `locationName:"unsuccessfulFleetRequestSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CancelSpotFleetRequestsOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CancelSpotFleetRequestsOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSuccessfulFleetRequests sets the SuccessfulFleetRequests field's value.
0000000000000000000000000000000000000000;;	func (s *CancelSpotFleetRequestsOutput) SetSuccessfulFleetRequests(v []*CancelSpotFleetRequestsSuccessItem) *CancelSpotFleetRequestsOutput {
0000000000000000000000000000000000000000;;		s.SuccessfulFleetRequests = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUnsuccessfulFleetRequests sets the UnsuccessfulFleetRequests field's value.
0000000000000000000000000000000000000000;;	func (s *CancelSpotFleetRequestsOutput) SetUnsuccessfulFleetRequests(v []*CancelSpotFleetRequestsErrorItem) *CancelSpotFleetRequestsOutput {
0000000000000000000000000000000000000000;;		s.UnsuccessfulFleetRequests = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a Spot fleet request that was successfully canceled.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CancelSpotFleetRequestsSuccessItem
0000000000000000000000000000000000000000;;	type CancelSpotFleetRequestsSuccessItem struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The current state of the Spot fleet request.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// CurrentSpotFleetRequestState is a required field
0000000000000000000000000000000000000000;;		CurrentSpotFleetRequestState *string `locationName:"currentSpotFleetRequestState" type:"string" required:"true" enum:"BatchState"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The previous state of the Spot fleet request.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// PreviousSpotFleetRequestState is a required field
0000000000000000000000000000000000000000;;		PreviousSpotFleetRequestState *string `locationName:"previousSpotFleetRequestState" type:"string" required:"true" enum:"BatchState"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the Spot fleet request.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// SpotFleetRequestId is a required field
0000000000000000000000000000000000000000;;		SpotFleetRequestId *string `locationName:"spotFleetRequestId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CancelSpotFleetRequestsSuccessItem) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CancelSpotFleetRequestsSuccessItem) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCurrentSpotFleetRequestState sets the CurrentSpotFleetRequestState field's value.
0000000000000000000000000000000000000000;;	func (s *CancelSpotFleetRequestsSuccessItem) SetCurrentSpotFleetRequestState(v string) *CancelSpotFleetRequestsSuccessItem {
0000000000000000000000000000000000000000;;		s.CurrentSpotFleetRequestState = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPreviousSpotFleetRequestState sets the PreviousSpotFleetRequestState field's value.
0000000000000000000000000000000000000000;;	func (s *CancelSpotFleetRequestsSuccessItem) SetPreviousSpotFleetRequestState(v string) *CancelSpotFleetRequestsSuccessItem {
0000000000000000000000000000000000000000;;		s.PreviousSpotFleetRequestState = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSpotFleetRequestId sets the SpotFleetRequestId field's value.
0000000000000000000000000000000000000000;;	func (s *CancelSpotFleetRequestsSuccessItem) SetSpotFleetRequestId(v string) *CancelSpotFleetRequestsSuccessItem {
0000000000000000000000000000000000000000;;		s.SpotFleetRequestId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for CancelSpotInstanceRequests.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CancelSpotInstanceRequestsRequest
0000000000000000000000000000000000000000;;	type CancelSpotInstanceRequestsInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more Spot instance request IDs.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// SpotInstanceRequestIds is a required field
0000000000000000000000000000000000000000;;		SpotInstanceRequestIds []*string `locationName:"SpotInstanceRequestId" locationNameList:"SpotInstanceRequestId" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CancelSpotInstanceRequestsInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CancelSpotInstanceRequestsInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *CancelSpotInstanceRequestsInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "CancelSpotInstanceRequestsInput"}
0000000000000000000000000000000000000000;;		if s.SpotInstanceRequestIds == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("SpotInstanceRequestIds"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *CancelSpotInstanceRequestsInput) SetDryRun(v bool) *CancelSpotInstanceRequestsInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSpotInstanceRequestIds sets the SpotInstanceRequestIds field's value.
0000000000000000000000000000000000000000;;	func (s *CancelSpotInstanceRequestsInput) SetSpotInstanceRequestIds(v []*string) *CancelSpotInstanceRequestsInput {
0000000000000000000000000000000000000000;;		s.SpotInstanceRequestIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of CancelSpotInstanceRequests.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CancelSpotInstanceRequestsResult
0000000000000000000000000000000000000000;;	type CancelSpotInstanceRequestsOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more Spot instance requests.
0000000000000000000000000000000000000000;;		CancelledSpotInstanceRequests []*CancelledSpotInstanceRequest `locationName:"spotInstanceRequestSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CancelSpotInstanceRequestsOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CancelSpotInstanceRequestsOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCancelledSpotInstanceRequests sets the CancelledSpotInstanceRequests field's value.
0000000000000000000000000000000000000000;;	func (s *CancelSpotInstanceRequestsOutput) SetCancelledSpotInstanceRequests(v []*CancelledSpotInstanceRequest) *CancelSpotInstanceRequestsOutput {
0000000000000000000000000000000000000000;;		s.CancelledSpotInstanceRequests = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a request to cancel a Spot instance.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CancelledSpotInstanceRequest
0000000000000000000000000000000000000000;;	type CancelledSpotInstanceRequest struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the Spot instance request.
0000000000000000000000000000000000000000;;		SpotInstanceRequestId *string `locationName:"spotInstanceRequestId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The state of the Spot instance request.
0000000000000000000000000000000000000000;;		State *string `locationName:"state" type:"string" enum:"CancelSpotInstanceRequestState"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CancelledSpotInstanceRequest) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CancelledSpotInstanceRequest) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSpotInstanceRequestId sets the SpotInstanceRequestId field's value.
0000000000000000000000000000000000000000;;	func (s *CancelledSpotInstanceRequest) SetSpotInstanceRequestId(v string) *CancelledSpotInstanceRequest {
0000000000000000000000000000000000000000;;		s.SpotInstanceRequestId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetState sets the State field's value.
0000000000000000000000000000000000000000;;	func (s *CancelledSpotInstanceRequest) SetState(v string) *CancelledSpotInstanceRequest {
0000000000000000000000000000000000000000;;		s.State = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the ClassicLink DNS support status of a VPC.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ClassicLinkDnsSupport
0000000000000000000000000000000000000000;;	type ClassicLinkDnsSupport struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether ClassicLink DNS support is enabled for the VPC.
0000000000000000000000000000000000000000;;		ClassicLinkDnsSupported *bool `locationName:"classicLinkDnsSupported" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC.
0000000000000000000000000000000000000000;;		VpcId *string `locationName:"vpcId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ClassicLinkDnsSupport) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ClassicLinkDnsSupport) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetClassicLinkDnsSupported sets the ClassicLinkDnsSupported field's value.
0000000000000000000000000000000000000000;;	func (s *ClassicLinkDnsSupport) SetClassicLinkDnsSupported(v bool) *ClassicLinkDnsSupport {
0000000000000000000000000000000000000000;;		s.ClassicLinkDnsSupported = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcId sets the VpcId field's value.
0000000000000000000000000000000000000000;;	func (s *ClassicLinkDnsSupport) SetVpcId(v string) *ClassicLinkDnsSupport {
0000000000000000000000000000000000000000;;		s.VpcId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a linked EC2-Classic instance.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ClassicLinkInstance
0000000000000000000000000000000000000000;;	type ClassicLinkInstance struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A list of security groups.
0000000000000000000000000000000000000000;;		Groups []*GroupIdentifier `locationName:"groupSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the instance.
0000000000000000000000000000000000000000;;		InstanceId *string `locationName:"instanceId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Any tags assigned to the instance.
0000000000000000000000000000000000000000;;		Tags []*Tag `locationName:"tagSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC.
0000000000000000000000000000000000000000;;		VpcId *string `locationName:"vpcId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ClassicLinkInstance) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ClassicLinkInstance) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroups sets the Groups field's value.
0000000000000000000000000000000000000000;;	func (s *ClassicLinkInstance) SetGroups(v []*GroupIdentifier) *ClassicLinkInstance {
0000000000000000000000000000000000000000;;		s.Groups = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceId sets the InstanceId field's value.
0000000000000000000000000000000000000000;;	func (s *ClassicLinkInstance) SetInstanceId(v string) *ClassicLinkInstance {
0000000000000000000000000000000000000000;;		s.InstanceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTags sets the Tags field's value.
0000000000000000000000000000000000000000;;	func (s *ClassicLinkInstance) SetTags(v []*Tag) *ClassicLinkInstance {
0000000000000000000000000000000000000000;;		s.Tags = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcId sets the VpcId field's value.
0000000000000000000000000000000000000000;;	func (s *ClassicLinkInstance) SetVpcId(v string) *ClassicLinkInstance {
0000000000000000000000000000000000000000;;		s.VpcId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the client-specific data.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ClientData
0000000000000000000000000000000000000000;;	type ClientData struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A user-defined comment about the disk upload.
0000000000000000000000000000000000000000;;		Comment *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The time that the disk upload ends.
0000000000000000000000000000000000000000;;		UploadEnd *time.Time `type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The size of the uploaded disk image, in GiB.
0000000000000000000000000000000000000000;;		UploadSize *float64 `type:"double"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The time that the disk upload starts.
0000000000000000000000000000000000000000;;		UploadStart *time.Time `type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ClientData) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ClientData) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetComment sets the Comment field's value.
0000000000000000000000000000000000000000;;	func (s *ClientData) SetComment(v string) *ClientData {
0000000000000000000000000000000000000000;;		s.Comment = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUploadEnd sets the UploadEnd field's value.
0000000000000000000000000000000000000000;;	func (s *ClientData) SetUploadEnd(v time.Time) *ClientData {
0000000000000000000000000000000000000000;;		s.UploadEnd = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUploadSize sets the UploadSize field's value.
0000000000000000000000000000000000000000;;	func (s *ClientData) SetUploadSize(v float64) *ClientData {
0000000000000000000000000000000000000000;;		s.UploadSize = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUploadStart sets the UploadStart field's value.
0000000000000000000000000000000000000000;;	func (s *ClientData) SetUploadStart(v time.Time) *ClientData {
0000000000000000000000000000000000000000;;		s.UploadStart = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for ConfirmProductInstance.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ConfirmProductInstanceRequest
0000000000000000000000000000000000000000;;	type ConfirmProductInstanceInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// InstanceId is a required field
0000000000000000000000000000000000000000;;		InstanceId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The product code. This must be a product code that you own.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ProductCode is a required field
0000000000000000000000000000000000000000;;		ProductCode *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ConfirmProductInstanceInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ConfirmProductInstanceInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *ConfirmProductInstanceInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "ConfirmProductInstanceInput"}
0000000000000000000000000000000000000000;;		if s.InstanceId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("InstanceId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.ProductCode == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("ProductCode"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *ConfirmProductInstanceInput) SetDryRun(v bool) *ConfirmProductInstanceInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceId sets the InstanceId field's value.
0000000000000000000000000000000000000000;;	func (s *ConfirmProductInstanceInput) SetInstanceId(v string) *ConfirmProductInstanceInput {
0000000000000000000000000000000000000000;;		s.InstanceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetProductCode sets the ProductCode field's value.
0000000000000000000000000000000000000000;;	func (s *ConfirmProductInstanceInput) SetProductCode(v string) *ConfirmProductInstanceInput {
0000000000000000000000000000000000000000;;		s.ProductCode = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of ConfirmProductInstance.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ConfirmProductInstanceResult
0000000000000000000000000000000000000000;;	type ConfirmProductInstanceOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The AWS account ID of the instance owner. This is only present if the product
0000000000000000000000000000000000000000;;		// code is attached to the instance.
0000000000000000000000000000000000000000;;		OwnerId *string `locationName:"ownerId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The return value of the request. Returns true if the specified product code
0000000000000000000000000000000000000000;;		// is owned by the requester and associated with the specified instance.
0000000000000000000000000000000000000000;;		Return *bool `locationName:"return" type:"boolean"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ConfirmProductInstanceOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ConfirmProductInstanceOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetOwnerId sets the OwnerId field's value.
0000000000000000000000000000000000000000;;	func (s *ConfirmProductInstanceOutput) SetOwnerId(v string) *ConfirmProductInstanceOutput {
0000000000000000000000000000000000000000;;		s.OwnerId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReturn sets the Return field's value.
0000000000000000000000000000000000000000;;	func (s *ConfirmProductInstanceOutput) SetReturn(v bool) *ConfirmProductInstanceOutput {
0000000000000000000000000000000000000000;;		s.Return = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a conversion task.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ConversionTask
0000000000000000000000000000000000000000;;	type ConversionTask struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the conversion task.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ConversionTaskId is a required field
0000000000000000000000000000000000000000;;		ConversionTaskId *string `locationName:"conversionTaskId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The time when the task expires. If the upload isn't complete before the expiration
0000000000000000000000000000000000000000;;		// time, we automatically cancel the task.
0000000000000000000000000000000000000000;;		ExpirationTime *string `locationName:"expirationTime" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If the task is for importing an instance, this contains information about
0000000000000000000000000000000000000000;;		// the import instance task.
0000000000000000000000000000000000000000;;		ImportInstance *ImportInstanceTaskDetails `locationName:"importInstance" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If the task is for importing a volume, this contains information about the
0000000000000000000000000000000000000000;;		// import volume task.
0000000000000000000000000000000000000000;;		ImportVolume *ImportVolumeTaskDetails `locationName:"importVolume" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The state of the conversion task.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// State is a required field
0000000000000000000000000000000000000000;;		State *string `locationName:"state" type:"string" required:"true" enum:"ConversionTaskState"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The status message related to the conversion task.
0000000000000000000000000000000000000000;;		StatusMessage *string `locationName:"statusMessage" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Any tags assigned to the task.
0000000000000000000000000000000000000000;;		Tags []*Tag `locationName:"tagSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ConversionTask) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ConversionTask) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetConversionTaskId sets the ConversionTaskId field's value.
0000000000000000000000000000000000000000;;	func (s *ConversionTask) SetConversionTaskId(v string) *ConversionTask {
0000000000000000000000000000000000000000;;		s.ConversionTaskId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetExpirationTime sets the ExpirationTime field's value.
0000000000000000000000000000000000000000;;	func (s *ConversionTask) SetExpirationTime(v string) *ConversionTask {
0000000000000000000000000000000000000000;;		s.ExpirationTime = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetImportInstance sets the ImportInstance field's value.
0000000000000000000000000000000000000000;;	func (s *ConversionTask) SetImportInstance(v *ImportInstanceTaskDetails) *ConversionTask {
0000000000000000000000000000000000000000;;		s.ImportInstance = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetImportVolume sets the ImportVolume field's value.
0000000000000000000000000000000000000000;;	func (s *ConversionTask) SetImportVolume(v *ImportVolumeTaskDetails) *ConversionTask {
0000000000000000000000000000000000000000;;		s.ImportVolume = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetState sets the State field's value.
0000000000000000000000000000000000000000;;	func (s *ConversionTask) SetState(v string) *ConversionTask {
0000000000000000000000000000000000000000;;		s.State = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStatusMessage sets the StatusMessage field's value.
0000000000000000000000000000000000000000;;	func (s *ConversionTask) SetStatusMessage(v string) *ConversionTask {
0000000000000000000000000000000000000000;;		s.StatusMessage = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTags sets the Tags field's value.
0000000000000000000000000000000000000000;;	func (s *ConversionTask) SetTags(v []*Tag) *ConversionTask {
0000000000000000000000000000000000000000;;		s.Tags = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for CopyImage.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CopyImageRequest
0000000000000000000000000000000000000000;;	type CopyImageInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Unique, case-sensitive identifier you provide to ensure idempotency of the
0000000000000000000000000000000000000000;;		// request. For more information, see How to Ensure Idempotency (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html)
0000000000000000000000000000000000000000;;		// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;		ClientToken *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A description for the new AMI in the destination region.
0000000000000000000000000000000000000000;;		Description *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Specifies whether the destination snapshots of the copied image should be
0000000000000000000000000000000000000000;;		// encrypted. The default CMK for EBS is used unless a non-default AWS Key Management
0000000000000000000000000000000000000000;;		// Service (AWS KMS) CMK is specified with KmsKeyId. For more information, see
0000000000000000000000000000000000000000;;		// Amazon EBS Encryption (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html)
0000000000000000000000000000000000000000;;		// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;		Encrypted *bool `locationName:"encrypted" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The full ARN of the AWS Key Management Service (AWS KMS) CMK to use when
0000000000000000000000000000000000000000;;		// encrypting the snapshots of an image during a copy operation. This parameter
0000000000000000000000000000000000000000;;		// is only required if you want to use a non-default CMK; if this parameter
0000000000000000000000000000000000000000;;		// is not specified, the default CMK for EBS is used. The ARN contains the arn:aws:kms
0000000000000000000000000000000000000000;;		// namespace, followed by the region of the CMK, the AWS account ID of the CMK
0000000000000000000000000000000000000000;;		// owner, the key namespace, and then the CMK ID. For example, arn:aws:kms:us-east-1:012345678910:key/abcd1234-a123-456a-a12b-a123b4cd56ef.
0000000000000000000000000000000000000000;;		// The specified CMK must exist in the region that the snapshot is being copied
0000000000000000000000000000000000000000;;		// to. If a KmsKeyId is specified, the Encrypted flag must also be set.
0000000000000000000000000000000000000000;;		KmsKeyId *string `locationName:"kmsKeyId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the new AMI in the destination region.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Name is a required field
0000000000000000000000000000000000000000;;		Name *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the AMI to copy.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// SourceImageId is a required field
0000000000000000000000000000000000000000;;		SourceImageId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the region that contains the AMI to copy.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// SourceRegion is a required field
0000000000000000000000000000000000000000;;		SourceRegion *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CopyImageInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CopyImageInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *CopyImageInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "CopyImageInput"}
0000000000000000000000000000000000000000;;		if s.Name == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Name"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.SourceImageId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("SourceImageId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.SourceRegion == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("SourceRegion"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetClientToken sets the ClientToken field's value.
0000000000000000000000000000000000000000;;	func (s *CopyImageInput) SetClientToken(v string) *CopyImageInput {
0000000000000000000000000000000000000000;;		s.ClientToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDescription sets the Description field's value.
0000000000000000000000000000000000000000;;	func (s *CopyImageInput) SetDescription(v string) *CopyImageInput {
0000000000000000000000000000000000000000;;		s.Description = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *CopyImageInput) SetDryRun(v bool) *CopyImageInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEncrypted sets the Encrypted field's value.
0000000000000000000000000000000000000000;;	func (s *CopyImageInput) SetEncrypted(v bool) *CopyImageInput {
0000000000000000000000000000000000000000;;		s.Encrypted = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetKmsKeyId sets the KmsKeyId field's value.
0000000000000000000000000000000000000000;;	func (s *CopyImageInput) SetKmsKeyId(v string) *CopyImageInput {
0000000000000000000000000000000000000000;;		s.KmsKeyId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetName sets the Name field's value.
0000000000000000000000000000000000000000;;	func (s *CopyImageInput) SetName(v string) *CopyImageInput {
0000000000000000000000000000000000000000;;		s.Name = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSourceImageId sets the SourceImageId field's value.
0000000000000000000000000000000000000000;;	func (s *CopyImageInput) SetSourceImageId(v string) *CopyImageInput {
0000000000000000000000000000000000000000;;		s.SourceImageId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSourceRegion sets the SourceRegion field's value.
0000000000000000000000000000000000000000;;	func (s *CopyImageInput) SetSourceRegion(v string) *CopyImageInput {
0000000000000000000000000000000000000000;;		s.SourceRegion = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of CopyImage.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CopyImageResult
0000000000000000000000000000000000000000;;	type CopyImageOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the new AMI.
0000000000000000000000000000000000000000;;		ImageId *string `locationName:"imageId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CopyImageOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CopyImageOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetImageId sets the ImageId field's value.
0000000000000000000000000000000000000000;;	func (s *CopyImageOutput) SetImageId(v string) *CopyImageOutput {
0000000000000000000000000000000000000000;;		s.ImageId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for CopySnapshot.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CopySnapshotRequest
0000000000000000000000000000000000000000;;	type CopySnapshotInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A description for the EBS snapshot.
0000000000000000000000000000000000000000;;		Description *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The destination region to use in the PresignedUrl parameter of a snapshot
0000000000000000000000000000000000000000;;		// copy operation. This parameter is only valid for specifying the destination
0000000000000000000000000000000000000000;;		// region in a PresignedUrl parameter, where it is required.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// CopySnapshot sends the snapshot copy to the regional endpoint that you send
0000000000000000000000000000000000000000;;		// the HTTP request to, such as ec2.us-east-1.amazonaws.com (in the AWS CLI,
0000000000000000000000000000000000000000;;		// this is specified with the --region parameter or the default region in your
0000000000000000000000000000000000000000;;		// AWS configuration file).
0000000000000000000000000000000000000000;;		DestinationRegion *string `locationName:"destinationRegion" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Specifies whether the destination snapshot should be encrypted. You can encrypt
0000000000000000000000000000000000000000;;		// a copy of an unencrypted snapshot using this flag, but you cannot use it
0000000000000000000000000000000000000000;;		// to create an unencrypted copy from an encrypted snapshot. Your default CMK
0000000000000000000000000000000000000000;;		// for EBS is used unless a non-default AWS Key Management Service (AWS KMS)
0000000000000000000000000000000000000000;;		// CMK is specified with KmsKeyId. For more information, see Amazon EBS Encryption
0000000000000000000000000000000000000000;;		// (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html) in
0000000000000000000000000000000000000000;;		// the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;		Encrypted *bool `locationName:"encrypted" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The full ARN of the AWS Key Management Service (AWS KMS) CMK to use when
0000000000000000000000000000000000000000;;		// creating the snapshot copy. This parameter is only required if you want to
0000000000000000000000000000000000000000;;		// use a non-default CMK; if this parameter is not specified, the default CMK
0000000000000000000000000000000000000000;;		// for EBS is used. The ARN contains the arn:aws:kms namespace, followed by
0000000000000000000000000000000000000000;;		// the region of the CMK, the AWS account ID of the CMK owner, the key namespace,
0000000000000000000000000000000000000000;;		// and then the CMK ID. For example, arn:aws:kms:us-east-1:012345678910:key/abcd1234-a123-456a-a12b-a123b4cd56ef.
0000000000000000000000000000000000000000;;		// The specified CMK must exist in the region that the snapshot is being copied
0000000000000000000000000000000000000000;;		// to. If a KmsKeyId is specified, the Encrypted flag must also be set.
0000000000000000000000000000000000000000;;		KmsKeyId *string `locationName:"kmsKeyId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The pre-signed URL that facilitates copying an encrypted snapshot. This parameter
0000000000000000000000000000000000000000;;		// is only required when copying an encrypted snapshot with the Amazon EC2 Query
0000000000000000000000000000000000000000;;		// API; it is available as an optional parameter in all other cases. The PresignedUrl
0000000000000000000000000000000000000000;;		// should use the snapshot source endpoint, the CopySnapshot action, and include
0000000000000000000000000000000000000000;;		// the SourceRegion, SourceSnapshotId, and DestinationRegion parameters. The
0000000000000000000000000000000000000000;;		// PresignedUrl must be signed using AWS Signature Version 4. Because EBS snapshots
0000000000000000000000000000000000000000;;		// are stored in Amazon S3, the signing algorithm for this parameter uses the
0000000000000000000000000000000000000000;;		// same logic that is described in Authenticating Requests by Using Query Parameters
0000000000000000000000000000000000000000;;		// (AWS Signature Version 4) (http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html)
0000000000000000000000000000000000000000;;		// in the Amazon Simple Storage Service API Reference. An invalid or improperly
0000000000000000000000000000000000000000;;		// signed PresignedUrl will cause the copy operation to fail asynchronously,
0000000000000000000000000000000000000000;;		// and the snapshot will move to an error state.
0000000000000000000000000000000000000000;;		PresignedUrl *string `locationName:"presignedUrl" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the region that contains the snapshot to be copied.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// SourceRegion is a required field
0000000000000000000000000000000000000000;;		SourceRegion *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the EBS snapshot to copy.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// SourceSnapshotId is a required field
0000000000000000000000000000000000000000;;		SourceSnapshotId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CopySnapshotInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CopySnapshotInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *CopySnapshotInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "CopySnapshotInput"}
0000000000000000000000000000000000000000;;		if s.SourceRegion == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("SourceRegion"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.SourceSnapshotId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("SourceSnapshotId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDescription sets the Description field's value.
0000000000000000000000000000000000000000;;	func (s *CopySnapshotInput) SetDescription(v string) *CopySnapshotInput {
0000000000000000000000000000000000000000;;		s.Description = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDestinationRegion sets the DestinationRegion field's value.
0000000000000000000000000000000000000000;;	func (s *CopySnapshotInput) SetDestinationRegion(v string) *CopySnapshotInput {
0000000000000000000000000000000000000000;;		s.DestinationRegion = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *CopySnapshotInput) SetDryRun(v bool) *CopySnapshotInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEncrypted sets the Encrypted field's value.
0000000000000000000000000000000000000000;;	func (s *CopySnapshotInput) SetEncrypted(v bool) *CopySnapshotInput {
0000000000000000000000000000000000000000;;		s.Encrypted = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetKmsKeyId sets the KmsKeyId field's value.
0000000000000000000000000000000000000000;;	func (s *CopySnapshotInput) SetKmsKeyId(v string) *CopySnapshotInput {
0000000000000000000000000000000000000000;;		s.KmsKeyId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPresignedUrl sets the PresignedUrl field's value.
0000000000000000000000000000000000000000;;	func (s *CopySnapshotInput) SetPresignedUrl(v string) *CopySnapshotInput {
0000000000000000000000000000000000000000;;		s.PresignedUrl = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSourceRegion sets the SourceRegion field's value.
0000000000000000000000000000000000000000;;	func (s *CopySnapshotInput) SetSourceRegion(v string) *CopySnapshotInput {
0000000000000000000000000000000000000000;;		s.SourceRegion = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSourceSnapshotId sets the SourceSnapshotId field's value.
0000000000000000000000000000000000000000;;	func (s *CopySnapshotInput) SetSourceSnapshotId(v string) *CopySnapshotInput {
0000000000000000000000000000000000000000;;		s.SourceSnapshotId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of CopySnapshot.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CopySnapshotResult
0000000000000000000000000000000000000000;;	type CopySnapshotOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the new snapshot.
0000000000000000000000000000000000000000;;		SnapshotId *string `locationName:"snapshotId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CopySnapshotOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CopySnapshotOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSnapshotId sets the SnapshotId field's value.
0000000000000000000000000000000000000000;;	func (s *CopySnapshotOutput) SetSnapshotId(v string) *CopySnapshotOutput {
0000000000000000000000000000000000000000;;		s.SnapshotId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for CreateCustomerGateway.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateCustomerGatewayRequest
0000000000000000000000000000000000000000;;	type CreateCustomerGatewayInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// For devices that support BGP, the customer gateway's BGP ASN.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: 65000
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// BgpAsn is a required field
0000000000000000000000000000000000000000;;		BgpAsn *int64 `type:"integer" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Internet-routable IP address for the customer gateway's outside interface.
0000000000000000000000000000000000000000;;		// The address must be static.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// PublicIp is a required field
0000000000000000000000000000000000000000;;		PublicIp *string `locationName:"IpAddress" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The type of VPN connection that this customer gateway supports (ipsec.1).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Type is a required field
0000000000000000000000000000000000000000;;		Type *string `type:"string" required:"true" enum:"GatewayType"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateCustomerGatewayInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateCustomerGatewayInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *CreateCustomerGatewayInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "CreateCustomerGatewayInput"}
0000000000000000000000000000000000000000;;		if s.BgpAsn == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("BgpAsn"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.PublicIp == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("PublicIp"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Type == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Type"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetBgpAsn sets the BgpAsn field's value.
0000000000000000000000000000000000000000;;	func (s *CreateCustomerGatewayInput) SetBgpAsn(v int64) *CreateCustomerGatewayInput {
0000000000000000000000000000000000000000;;		s.BgpAsn = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *CreateCustomerGatewayInput) SetDryRun(v bool) *CreateCustomerGatewayInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPublicIp sets the PublicIp field's value.
0000000000000000000000000000000000000000;;	func (s *CreateCustomerGatewayInput) SetPublicIp(v string) *CreateCustomerGatewayInput {
0000000000000000000000000000000000000000;;		s.PublicIp = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetType sets the Type field's value.
0000000000000000000000000000000000000000;;	func (s *CreateCustomerGatewayInput) SetType(v string) *CreateCustomerGatewayInput {
0000000000000000000000000000000000000000;;		s.Type = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of CreateCustomerGateway.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateCustomerGatewayResult
0000000000000000000000000000000000000000;;	type CreateCustomerGatewayOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the customer gateway.
0000000000000000000000000000000000000000;;		CustomerGateway *CustomerGateway `locationName:"customerGateway" type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateCustomerGatewayOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateCustomerGatewayOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCustomerGateway sets the CustomerGateway field's value.
0000000000000000000000000000000000000000;;	func (s *CreateCustomerGatewayOutput) SetCustomerGateway(v *CustomerGateway) *CreateCustomerGatewayOutput {
0000000000000000000000000000000000000000;;		s.CustomerGateway = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for CreateDhcpOptions.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateDhcpOptionsRequest
0000000000000000000000000000000000000000;;	type CreateDhcpOptionsInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A DHCP configuration option.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// DhcpConfigurations is a required field
0000000000000000000000000000000000000000;;		DhcpConfigurations []*NewDhcpConfiguration `locationName:"dhcpConfiguration" locationNameList:"item" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateDhcpOptionsInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateDhcpOptionsInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *CreateDhcpOptionsInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "CreateDhcpOptionsInput"}
0000000000000000000000000000000000000000;;		if s.DhcpConfigurations == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("DhcpConfigurations"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDhcpConfigurations sets the DhcpConfigurations field's value.
0000000000000000000000000000000000000000;;	func (s *CreateDhcpOptionsInput) SetDhcpConfigurations(v []*NewDhcpConfiguration) *CreateDhcpOptionsInput {
0000000000000000000000000000000000000000;;		s.DhcpConfigurations = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *CreateDhcpOptionsInput) SetDryRun(v bool) *CreateDhcpOptionsInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of CreateDhcpOptions.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateDhcpOptionsResult
0000000000000000000000000000000000000000;;	type CreateDhcpOptionsOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A set of DHCP options.
0000000000000000000000000000000000000000;;		DhcpOptions *DhcpOptions `locationName:"dhcpOptions" type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateDhcpOptionsOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateDhcpOptionsOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDhcpOptions sets the DhcpOptions field's value.
0000000000000000000000000000000000000000;;	func (s *CreateDhcpOptionsOutput) SetDhcpOptions(v *DhcpOptions) *CreateDhcpOptionsOutput {
0000000000000000000000000000000000000000;;		s.DhcpOptions = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateEgressOnlyInternetGatewayRequest
0000000000000000000000000000000000000000;;	type CreateEgressOnlyInternetGatewayInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Unique, case-sensitive identifier you provide to ensure the idempotency of
0000000000000000000000000000000000000000;;		// the request. For more information, see How to Ensure Idempotency (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html).
0000000000000000000000000000000000000000;;		ClientToken *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC for which to create the egress-only Internet gateway.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// VpcId is a required field
0000000000000000000000000000000000000000;;		VpcId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateEgressOnlyInternetGatewayInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateEgressOnlyInternetGatewayInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *CreateEgressOnlyInternetGatewayInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "CreateEgressOnlyInternetGatewayInput"}
0000000000000000000000000000000000000000;;		if s.VpcId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("VpcId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetClientToken sets the ClientToken field's value.
0000000000000000000000000000000000000000;;	func (s *CreateEgressOnlyInternetGatewayInput) SetClientToken(v string) *CreateEgressOnlyInternetGatewayInput {
0000000000000000000000000000000000000000;;		s.ClientToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *CreateEgressOnlyInternetGatewayInput) SetDryRun(v bool) *CreateEgressOnlyInternetGatewayInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcId sets the VpcId field's value.
0000000000000000000000000000000000000000;;	func (s *CreateEgressOnlyInternetGatewayInput) SetVpcId(v string) *CreateEgressOnlyInternetGatewayInput {
0000000000000000000000000000000000000000;;		s.VpcId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateEgressOnlyInternetGatewayResult
0000000000000000000000000000000000000000;;	type CreateEgressOnlyInternetGatewayOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Unique, case-sensitive identifier you provide to ensure the idempotency of
0000000000000000000000000000000000000000;;		// the request.
0000000000000000000000000000000000000000;;		ClientToken *string `locationName:"clientToken" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the egress-only Internet gateway.
0000000000000000000000000000000000000000;;		EgressOnlyInternetGateway *EgressOnlyInternetGateway `locationName:"egressOnlyInternetGateway" type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateEgressOnlyInternetGatewayOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateEgressOnlyInternetGatewayOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetClientToken sets the ClientToken field's value.
0000000000000000000000000000000000000000;;	func (s *CreateEgressOnlyInternetGatewayOutput) SetClientToken(v string) *CreateEgressOnlyInternetGatewayOutput {
0000000000000000000000000000000000000000;;		s.ClientToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEgressOnlyInternetGateway sets the EgressOnlyInternetGateway field's value.
0000000000000000000000000000000000000000;;	func (s *CreateEgressOnlyInternetGatewayOutput) SetEgressOnlyInternetGateway(v *EgressOnlyInternetGateway) *CreateEgressOnlyInternetGatewayOutput {
0000000000000000000000000000000000000000;;		s.EgressOnlyInternetGateway = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for CreateFlowLogs.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateFlowLogsRequest
0000000000000000000000000000000000000000;;	type CreateFlowLogsInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Unique, case-sensitive identifier you provide to ensure the idempotency of
0000000000000000000000000000000000000000;;		// the request. For more information, see How to Ensure Idempotency (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html).
0000000000000000000000000000000000000000;;		ClientToken *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ARN for the IAM role that's used to post flow logs to a CloudWatch Logs
0000000000000000000000000000000000000000;;		// log group.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// DeliverLogsPermissionArn is a required field
0000000000000000000000000000000000000000;;		DeliverLogsPermissionArn *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the CloudWatch log group.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// LogGroupName is a required field
0000000000000000000000000000000000000000;;		LogGroupName *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more subnet, network interface, or VPC IDs.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Constraints: Maximum of 1000 resources
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ResourceIds is a required field
0000000000000000000000000000000000000000;;		ResourceIds []*string `locationName:"ResourceId" locationNameList:"item" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The type of resource on which to create the flow log.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ResourceType is a required field
0000000000000000000000000000000000000000;;		ResourceType *string `type:"string" required:"true" enum:"FlowLogsResourceType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The type of traffic to log.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// TrafficType is a required field
0000000000000000000000000000000000000000;;		TrafficType *string `type:"string" required:"true" enum:"TrafficType"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateFlowLogsInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateFlowLogsInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *CreateFlowLogsInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "CreateFlowLogsInput"}
0000000000000000000000000000000000000000;;		if s.DeliverLogsPermissionArn == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("DeliverLogsPermissionArn"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.LogGroupName == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("LogGroupName"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.ResourceIds == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("ResourceIds"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.ResourceType == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("ResourceType"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.TrafficType == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("TrafficType"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetClientToken sets the ClientToken field's value.
0000000000000000000000000000000000000000;;	func (s *CreateFlowLogsInput) SetClientToken(v string) *CreateFlowLogsInput {
0000000000000000000000000000000000000000;;		s.ClientToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDeliverLogsPermissionArn sets the DeliverLogsPermissionArn field's value.
0000000000000000000000000000000000000000;;	func (s *CreateFlowLogsInput) SetDeliverLogsPermissionArn(v string) *CreateFlowLogsInput {
0000000000000000000000000000000000000000;;		s.DeliverLogsPermissionArn = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetLogGroupName sets the LogGroupName field's value.
0000000000000000000000000000000000000000;;	func (s *CreateFlowLogsInput) SetLogGroupName(v string) *CreateFlowLogsInput {
0000000000000000000000000000000000000000;;		s.LogGroupName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetResourceIds sets the ResourceIds field's value.
0000000000000000000000000000000000000000;;	func (s *CreateFlowLogsInput) SetResourceIds(v []*string) *CreateFlowLogsInput {
0000000000000000000000000000000000000000;;		s.ResourceIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetResourceType sets the ResourceType field's value.
0000000000000000000000000000000000000000;;	func (s *CreateFlowLogsInput) SetResourceType(v string) *CreateFlowLogsInput {
0000000000000000000000000000000000000000;;		s.ResourceType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTrafficType sets the TrafficType field's value.
0000000000000000000000000000000000000000;;	func (s *CreateFlowLogsInput) SetTrafficType(v string) *CreateFlowLogsInput {
0000000000000000000000000000000000000000;;		s.TrafficType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of CreateFlowLogs.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateFlowLogsResult
0000000000000000000000000000000000000000;;	type CreateFlowLogsOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Unique, case-sensitive identifier you provide to ensure the idempotency of
0000000000000000000000000000000000000000;;		// the request.
0000000000000000000000000000000000000000;;		ClientToken *string `locationName:"clientToken" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IDs of the flow logs.
0000000000000000000000000000000000000000;;		FlowLogIds []*string `locationName:"flowLogIdSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the flow logs that could not be created successfully.
0000000000000000000000000000000000000000;;		Unsuccessful []*UnsuccessfulItem `locationName:"unsuccessful" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateFlowLogsOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateFlowLogsOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetClientToken sets the ClientToken field's value.
0000000000000000000000000000000000000000;;	func (s *CreateFlowLogsOutput) SetClientToken(v string) *CreateFlowLogsOutput {
0000000000000000000000000000000000000000;;		s.ClientToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFlowLogIds sets the FlowLogIds field's value.
0000000000000000000000000000000000000000;;	func (s *CreateFlowLogsOutput) SetFlowLogIds(v []*string) *CreateFlowLogsOutput {
0000000000000000000000000000000000000000;;		s.FlowLogIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUnsuccessful sets the Unsuccessful field's value.
0000000000000000000000000000000000000000;;	func (s *CreateFlowLogsOutput) SetUnsuccessful(v []*UnsuccessfulItem) *CreateFlowLogsOutput {
0000000000000000000000000000000000000000;;		s.Unsuccessful = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for CreateImage.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateImageRequest
0000000000000000000000000000000000000000;;	type CreateImageInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about one or more block device mappings.
0000000000000000000000000000000000000000;;		BlockDeviceMappings []*BlockDeviceMapping `locationName:"blockDeviceMapping" locationNameList:"BlockDeviceMapping" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A description for the new image.
0000000000000000000000000000000000000000;;		Description *string `locationName:"description" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// InstanceId is a required field
0000000000000000000000000000000000000000;;		InstanceId *string `locationName:"instanceId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A name for the new image.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Constraints: 3-128 alphanumeric characters, parentheses (()), square brackets
0000000000000000000000000000000000000000;;		// ([]), spaces ( ), periods (.), slashes (/), dashes (-), single quotes ('),
0000000000000000000000000000000000000000;;		// at-signs (@), or underscores(_)
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Name is a required field
0000000000000000000000000000000000000000;;		Name *string `locationName:"name" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// By default, Amazon EC2 attempts to shut down and reboot the instance before
0000000000000000000000000000000000000000;;		// creating the image. If the 'No Reboot' option is set, Amazon EC2 doesn't
0000000000000000000000000000000000000000;;		// shut down the instance before creating the image. When this option is used,
0000000000000000000000000000000000000000;;		// file system integrity on the created image can't be guaranteed.
0000000000000000000000000000000000000000;;		NoReboot *bool `locationName:"noReboot" type:"boolean"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateImageInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateImageInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *CreateImageInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "CreateImageInput"}
0000000000000000000000000000000000000000;;		if s.InstanceId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("InstanceId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Name == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Name"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetBlockDeviceMappings sets the BlockDeviceMappings field's value.
0000000000000000000000000000000000000000;;	func (s *CreateImageInput) SetBlockDeviceMappings(v []*BlockDeviceMapping) *CreateImageInput {
0000000000000000000000000000000000000000;;		s.BlockDeviceMappings = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDescription sets the Description field's value.
0000000000000000000000000000000000000000;;	func (s *CreateImageInput) SetDescription(v string) *CreateImageInput {
0000000000000000000000000000000000000000;;		s.Description = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *CreateImageInput) SetDryRun(v bool) *CreateImageInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceId sets the InstanceId field's value.
0000000000000000000000000000000000000000;;	func (s *CreateImageInput) SetInstanceId(v string) *CreateImageInput {
0000000000000000000000000000000000000000;;		s.InstanceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetName sets the Name field's value.
0000000000000000000000000000000000000000;;	func (s *CreateImageInput) SetName(v string) *CreateImageInput {
0000000000000000000000000000000000000000;;		s.Name = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNoReboot sets the NoReboot field's value.
0000000000000000000000000000000000000000;;	func (s *CreateImageInput) SetNoReboot(v bool) *CreateImageInput {
0000000000000000000000000000000000000000;;		s.NoReboot = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of CreateImage.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateImageResult
0000000000000000000000000000000000000000;;	type CreateImageOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the new AMI.
0000000000000000000000000000000000000000;;		ImageId *string `locationName:"imageId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateImageOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateImageOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetImageId sets the ImageId field's value.
0000000000000000000000000000000000000000;;	func (s *CreateImageOutput) SetImageId(v string) *CreateImageOutput {
0000000000000000000000000000000000000000;;		s.ImageId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for CreateInstanceExportTask.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateInstanceExportTaskRequest
0000000000000000000000000000000000000000;;	type CreateInstanceExportTaskInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A description for the conversion task or the resource being exported. The
0000000000000000000000000000000000000000;;		// maximum length is 255 bytes.
0000000000000000000000000000000000000000;;		Description *string `locationName:"description" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The format and location for an instance export task.
0000000000000000000000000000000000000000;;		ExportToS3Task *ExportToS3TaskSpecification `locationName:"exportToS3" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// InstanceId is a required field
0000000000000000000000000000000000000000;;		InstanceId *string `locationName:"instanceId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The target virtualization environment.
0000000000000000000000000000000000000000;;		TargetEnvironment *string `locationName:"targetEnvironment" type:"string" enum:"ExportEnvironment"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateInstanceExportTaskInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateInstanceExportTaskInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *CreateInstanceExportTaskInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "CreateInstanceExportTaskInput"}
0000000000000000000000000000000000000000;;		if s.InstanceId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("InstanceId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDescription sets the Description field's value.
0000000000000000000000000000000000000000;;	func (s *CreateInstanceExportTaskInput) SetDescription(v string) *CreateInstanceExportTaskInput {
0000000000000000000000000000000000000000;;		s.Description = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetExportToS3Task sets the ExportToS3Task field's value.
0000000000000000000000000000000000000000;;	func (s *CreateInstanceExportTaskInput) SetExportToS3Task(v *ExportToS3TaskSpecification) *CreateInstanceExportTaskInput {
0000000000000000000000000000000000000000;;		s.ExportToS3Task = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceId sets the InstanceId field's value.
0000000000000000000000000000000000000000;;	func (s *CreateInstanceExportTaskInput) SetInstanceId(v string) *CreateInstanceExportTaskInput {
0000000000000000000000000000000000000000;;		s.InstanceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTargetEnvironment sets the TargetEnvironment field's value.
0000000000000000000000000000000000000000;;	func (s *CreateInstanceExportTaskInput) SetTargetEnvironment(v string) *CreateInstanceExportTaskInput {
0000000000000000000000000000000000000000;;		s.TargetEnvironment = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output for CreateInstanceExportTask.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateInstanceExportTaskResult
0000000000000000000000000000000000000000;;	type CreateInstanceExportTaskOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the instance export task.
0000000000000000000000000000000000000000;;		ExportTask *ExportTask `locationName:"exportTask" type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateInstanceExportTaskOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateInstanceExportTaskOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetExportTask sets the ExportTask field's value.
0000000000000000000000000000000000000000;;	func (s *CreateInstanceExportTaskOutput) SetExportTask(v *ExportTask) *CreateInstanceExportTaskOutput {
0000000000000000000000000000000000000000;;		s.ExportTask = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for CreateInternetGateway.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateInternetGatewayRequest
0000000000000000000000000000000000000000;;	type CreateInternetGatewayInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateInternetGatewayInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateInternetGatewayInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *CreateInternetGatewayInput) SetDryRun(v bool) *CreateInternetGatewayInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of CreateInternetGateway.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateInternetGatewayResult
0000000000000000000000000000000000000000;;	type CreateInternetGatewayOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the Internet gateway.
0000000000000000000000000000000000000000;;		InternetGateway *InternetGateway `locationName:"internetGateway" type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateInternetGatewayOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateInternetGatewayOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInternetGateway sets the InternetGateway field's value.
0000000000000000000000000000000000000000;;	func (s *CreateInternetGatewayOutput) SetInternetGateway(v *InternetGateway) *CreateInternetGatewayOutput {
0000000000000000000000000000000000000000;;		s.InternetGateway = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for CreateKeyPair.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateKeyPairRequest
0000000000000000000000000000000000000000;;	type CreateKeyPairInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A unique name for the key pair.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Constraints: Up to 255 ASCII characters
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// KeyName is a required field
0000000000000000000000000000000000000000;;		KeyName *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateKeyPairInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateKeyPairInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *CreateKeyPairInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "CreateKeyPairInput"}
0000000000000000000000000000000000000000;;		if s.KeyName == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("KeyName"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *CreateKeyPairInput) SetDryRun(v bool) *CreateKeyPairInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetKeyName sets the KeyName field's value.
0000000000000000000000000000000000000000;;	func (s *CreateKeyPairInput) SetKeyName(v string) *CreateKeyPairInput {
0000000000000000000000000000000000000000;;		s.KeyName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a key pair.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/KeyPair
0000000000000000000000000000000000000000;;	type CreateKeyPairOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The SHA-1 digest of the DER encoded private key.
0000000000000000000000000000000000000000;;		KeyFingerprint *string `locationName:"keyFingerprint" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// An unencrypted PEM encoded RSA private key.
0000000000000000000000000000000000000000;;		KeyMaterial *string `locationName:"keyMaterial" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the key pair.
0000000000000000000000000000000000000000;;		KeyName *string `locationName:"keyName" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateKeyPairOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateKeyPairOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetKeyFingerprint sets the KeyFingerprint field's value.
0000000000000000000000000000000000000000;;	func (s *CreateKeyPairOutput) SetKeyFingerprint(v string) *CreateKeyPairOutput {
0000000000000000000000000000000000000000;;		s.KeyFingerprint = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetKeyMaterial sets the KeyMaterial field's value.
0000000000000000000000000000000000000000;;	func (s *CreateKeyPairOutput) SetKeyMaterial(v string) *CreateKeyPairOutput {
0000000000000000000000000000000000000000;;		s.KeyMaterial = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetKeyName sets the KeyName field's value.
0000000000000000000000000000000000000000;;	func (s *CreateKeyPairOutput) SetKeyName(v string) *CreateKeyPairOutput {
0000000000000000000000000000000000000000;;		s.KeyName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for CreateNatGateway.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateNatGatewayRequest
0000000000000000000000000000000000000000;;	type CreateNatGatewayInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The allocation ID of an Elastic IP address to associate with the NAT gateway.
0000000000000000000000000000000000000000;;		// If the Elastic IP address is associated with another resource, you must first
0000000000000000000000000000000000000000;;		// disassociate it.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// AllocationId is a required field
0000000000000000000000000000000000000000;;		AllocationId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Unique, case-sensitive identifier you provide to ensure the idempotency of
0000000000000000000000000000000000000000;;		// the request. For more information, see How to Ensure Idempotency (http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Constraint: Maximum 64 ASCII characters.
0000000000000000000000000000000000000000;;		ClientToken *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The subnet in which to create the NAT gateway.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// SubnetId is a required field
0000000000000000000000000000000000000000;;		SubnetId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateNatGatewayInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateNatGatewayInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *CreateNatGatewayInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "CreateNatGatewayInput"}
0000000000000000000000000000000000000000;;		if s.AllocationId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("AllocationId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.SubnetId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("SubnetId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAllocationId sets the AllocationId field's value.
0000000000000000000000000000000000000000;;	func (s *CreateNatGatewayInput) SetAllocationId(v string) *CreateNatGatewayInput {
0000000000000000000000000000000000000000;;		s.AllocationId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetClientToken sets the ClientToken field's value.
0000000000000000000000000000000000000000;;	func (s *CreateNatGatewayInput) SetClientToken(v string) *CreateNatGatewayInput {
0000000000000000000000000000000000000000;;		s.ClientToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSubnetId sets the SubnetId field's value.
0000000000000000000000000000000000000000;;	func (s *CreateNatGatewayInput) SetSubnetId(v string) *CreateNatGatewayInput {
0000000000000000000000000000000000000000;;		s.SubnetId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of CreateNatGateway.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateNatGatewayResult
0000000000000000000000000000000000000000;;	type CreateNatGatewayOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Unique, case-sensitive identifier to ensure the idempotency of the request.
0000000000000000000000000000000000000000;;		// Only returned if a client token was provided in the request.
0000000000000000000000000000000000000000;;		ClientToken *string `locationName:"clientToken" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the NAT gateway.
0000000000000000000000000000000000000000;;		NatGateway *NatGateway `locationName:"natGateway" type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateNatGatewayOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateNatGatewayOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetClientToken sets the ClientToken field's value.
0000000000000000000000000000000000000000;;	func (s *CreateNatGatewayOutput) SetClientToken(v string) *CreateNatGatewayOutput {
0000000000000000000000000000000000000000;;		s.ClientToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNatGateway sets the NatGateway field's value.
0000000000000000000000000000000000000000;;	func (s *CreateNatGatewayOutput) SetNatGateway(v *NatGateway) *CreateNatGatewayOutput {
0000000000000000000000000000000000000000;;		s.NatGateway = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for CreateNetworkAclEntry.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateNetworkAclEntryRequest
0000000000000000000000000000000000000000;;	type CreateNetworkAclEntryInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IPv4 network range to allow or deny, in CIDR notation (for example 172.16.0.0/24).
0000000000000000000000000000000000000000;;		CidrBlock *string `locationName:"cidrBlock" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether this is an egress rule (rule is applied to traffic leaving
0000000000000000000000000000000000000000;;		// the subnet).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Egress is a required field
0000000000000000000000000000000000000000;;		Egress *bool `locationName:"egress" type:"boolean" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ICMP protocol: The ICMP or ICMPv6 type and code. Required if specifying the
0000000000000000000000000000000000000000;;		// ICMP protocol, or protocol 58 (ICMPv6) with an IPv6 CIDR block.
0000000000000000000000000000000000000000;;		IcmpTypeCode *IcmpTypeCode `locationName:"Icmp" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IPv6 network range to allow or deny, in CIDR notation (for example 2001:db8:1234:1a00::/64).
0000000000000000000000000000000000000000;;		Ipv6CidrBlock *string `locationName:"ipv6CidrBlock" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the network ACL.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// NetworkAclId is a required field
0000000000000000000000000000000000000000;;		NetworkAclId *string `locationName:"networkAclId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TCP or UDP protocols: The range of ports the rule applies to.
0000000000000000000000000000000000000000;;		PortRange *PortRange `locationName:"portRange" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The protocol. A value of -1 or all means all protocols. If you specify all,
0000000000000000000000000000000000000000;;		// -1, or a protocol number other than tcp, udp, or icmp, traffic on all ports
0000000000000000000000000000000000000000;;		// is allowed, regardless of any ports or ICMP types or codes you specify. If
0000000000000000000000000000000000000000;;		// you specify protocol 58 (ICMPv6) and specify an IPv4 CIDR block, traffic
0000000000000000000000000000000000000000;;		// for all ICMP types and codes allowed, regardless of any that you specify.
0000000000000000000000000000000000000000;;		// If you specify protocol 58 (ICMPv6) and specify an IPv6 CIDR block, you must
0000000000000000000000000000000000000000;;		// specify an ICMP type and code.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Protocol is a required field
0000000000000000000000000000000000000000;;		Protocol *string `locationName:"protocol" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether to allow or deny the traffic that matches the rule.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// RuleAction is a required field
0000000000000000000000000000000000000000;;		RuleAction *string `locationName:"ruleAction" type:"string" required:"true" enum:"RuleAction"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The rule number for the entry (for example, 100). ACL entries are processed
0000000000000000000000000000000000000000;;		// in ascending order by rule number.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Constraints: Positive integer from 1 to 32766. The range 32767 to 65535 is
0000000000000000000000000000000000000000;;		// reserved for internal use.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// RuleNumber is a required field
0000000000000000000000000000000000000000;;		RuleNumber *int64 `locationName:"ruleNumber" type:"integer" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateNetworkAclEntryInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateNetworkAclEntryInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *CreateNetworkAclEntryInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "CreateNetworkAclEntryInput"}
0000000000000000000000000000000000000000;;		if s.Egress == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Egress"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.NetworkAclId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("NetworkAclId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Protocol == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Protocol"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.RuleAction == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("RuleAction"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.RuleNumber == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("RuleNumber"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCidrBlock sets the CidrBlock field's value.
0000000000000000000000000000000000000000;;	func (s *CreateNetworkAclEntryInput) SetCidrBlock(v string) *CreateNetworkAclEntryInput {
0000000000000000000000000000000000000000;;		s.CidrBlock = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *CreateNetworkAclEntryInput) SetDryRun(v bool) *CreateNetworkAclEntryInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEgress sets the Egress field's value.
0000000000000000000000000000000000000000;;	func (s *CreateNetworkAclEntryInput) SetEgress(v bool) *CreateNetworkAclEntryInput {
0000000000000000000000000000000000000000;;		s.Egress = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIcmpTypeCode sets the IcmpTypeCode field's value.
0000000000000000000000000000000000000000;;	func (s *CreateNetworkAclEntryInput) SetIcmpTypeCode(v *IcmpTypeCode) *CreateNetworkAclEntryInput {
0000000000000000000000000000000000000000;;		s.IcmpTypeCode = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpv6CidrBlock sets the Ipv6CidrBlock field's value.
0000000000000000000000000000000000000000;;	func (s *CreateNetworkAclEntryInput) SetIpv6CidrBlock(v string) *CreateNetworkAclEntryInput {
0000000000000000000000000000000000000000;;		s.Ipv6CidrBlock = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNetworkAclId sets the NetworkAclId field's value.
0000000000000000000000000000000000000000;;	func (s *CreateNetworkAclEntryInput) SetNetworkAclId(v string) *CreateNetworkAclEntryInput {
0000000000000000000000000000000000000000;;		s.NetworkAclId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPortRange sets the PortRange field's value.
0000000000000000000000000000000000000000;;	func (s *CreateNetworkAclEntryInput) SetPortRange(v *PortRange) *CreateNetworkAclEntryInput {
0000000000000000000000000000000000000000;;		s.PortRange = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetProtocol sets the Protocol field's value.
0000000000000000000000000000000000000000;;	func (s *CreateNetworkAclEntryInput) SetProtocol(v string) *CreateNetworkAclEntryInput {
0000000000000000000000000000000000000000;;		s.Protocol = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRuleAction sets the RuleAction field's value.
0000000000000000000000000000000000000000;;	func (s *CreateNetworkAclEntryInput) SetRuleAction(v string) *CreateNetworkAclEntryInput {
0000000000000000000000000000000000000000;;		s.RuleAction = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRuleNumber sets the RuleNumber field's value.
0000000000000000000000000000000000000000;;	func (s *CreateNetworkAclEntryInput) SetRuleNumber(v int64) *CreateNetworkAclEntryInput {
0000000000000000000000000000000000000000;;		s.RuleNumber = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateNetworkAclEntryOutput
0000000000000000000000000000000000000000;;	type CreateNetworkAclEntryOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateNetworkAclEntryOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateNetworkAclEntryOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for CreateNetworkAcl.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateNetworkAclRequest
0000000000000000000000000000000000000000;;	type CreateNetworkAclInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// VpcId is a required field
0000000000000000000000000000000000000000;;		VpcId *string `locationName:"vpcId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateNetworkAclInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateNetworkAclInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *CreateNetworkAclInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "CreateNetworkAclInput"}
0000000000000000000000000000000000000000;;		if s.VpcId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("VpcId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *CreateNetworkAclInput) SetDryRun(v bool) *CreateNetworkAclInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcId sets the VpcId field's value.
0000000000000000000000000000000000000000;;	func (s *CreateNetworkAclInput) SetVpcId(v string) *CreateNetworkAclInput {
0000000000000000000000000000000000000000;;		s.VpcId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of CreateNetworkAcl.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateNetworkAclResult
0000000000000000000000000000000000000000;;	type CreateNetworkAclOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the network ACL.
0000000000000000000000000000000000000000;;		NetworkAcl *NetworkAcl `locationName:"networkAcl" type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateNetworkAclOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateNetworkAclOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNetworkAcl sets the NetworkAcl field's value.
0000000000000000000000000000000000000000;;	func (s *CreateNetworkAclOutput) SetNetworkAcl(v *NetworkAcl) *CreateNetworkAclOutput {
0000000000000000000000000000000000000000;;		s.NetworkAcl = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for CreateNetworkInterface.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateNetworkInterfaceRequest
0000000000000000000000000000000000000000;;	type CreateNetworkInterfaceInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A description for the network interface.
0000000000000000000000000000000000000000;;		Description *string `locationName:"description" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IDs of one or more security groups.
0000000000000000000000000000000000000000;;		Groups []*string `locationName:"SecurityGroupId" locationNameList:"SecurityGroupId" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of IPv6 addresses to assign to a network interface. Amazon EC2
0000000000000000000000000000000000000000;;		// automatically selects the IPv6 addresses from the subnet range. You can't
0000000000000000000000000000000000000000;;		// use this option if specifying specific IPv6 addresses. If your subnet has
0000000000000000000000000000000000000000;;		// the AssignIpv6AddressOnCreation attribute set to true, you can specify 0
0000000000000000000000000000000000000000;;		// to override this setting.
0000000000000000000000000000000000000000;;		Ipv6AddressCount *int64 `locationName:"ipv6AddressCount" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more specific IPv6 addresses from the IPv6 CIDR block range of your
0000000000000000000000000000000000000000;;		// subnet. You can't use this option if you're specifying a number of IPv6 addresses.
0000000000000000000000000000000000000000;;		Ipv6Addresses []*InstanceIpv6Address `locationName:"ipv6Addresses" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The primary private IPv4 address of the network interface. If you don't specify
0000000000000000000000000000000000000000;;		// an IPv4 address, Amazon EC2 selects one for you from the subnet's IPv4 CIDR
0000000000000000000000000000000000000000;;		// range. If you specify an IP address, you cannot indicate any IP addresses
0000000000000000000000000000000000000000;;		// specified in privateIpAddresses as primary (only one IP address can be designated
0000000000000000000000000000000000000000;;		// as primary).
0000000000000000000000000000000000000000;;		PrivateIpAddress *string `locationName:"privateIpAddress" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more private IPv4 addresses.
0000000000000000000000000000000000000000;;		PrivateIpAddresses []*PrivateIpAddressSpecification `locationName:"privateIpAddresses" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of secondary private IPv4 addresses to assign to a network interface.
0000000000000000000000000000000000000000;;		// When you specify a number of secondary IPv4 addresses, Amazon EC2 selects
0000000000000000000000000000000000000000;;		// these IP addresses within the subnet's IPv4 CIDR range. You can't specify
0000000000000000000000000000000000000000;;		// this option and specify more than one private IP address using privateIpAddresses.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// The number of IP addresses you can assign to a network interface varies by
0000000000000000000000000000000000000000;;		// instance type. For more information, see IP Addresses Per ENI Per Instance
0000000000000000000000000000000000000000;;		// Type (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI)
0000000000000000000000000000000000000000;;		// in the Amazon Virtual Private Cloud User Guide.
0000000000000000000000000000000000000000;;		SecondaryPrivateIpAddressCount *int64 `locationName:"secondaryPrivateIpAddressCount" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the subnet to associate with the network interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// SubnetId is a required field
0000000000000000000000000000000000000000;;		SubnetId *string `locationName:"subnetId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateNetworkInterfaceInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateNetworkInterfaceInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *CreateNetworkInterfaceInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "CreateNetworkInterfaceInput"}
0000000000000000000000000000000000000000;;		if s.SubnetId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("SubnetId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.PrivateIpAddresses != nil {
0000000000000000000000000000000000000000;;			for i, v := range s.PrivateIpAddresses {
0000000000000000000000000000000000000000;;				if v == nil {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if err := v.Validate(); err != nil {
0000000000000000000000000000000000000000;;					invalidParams.AddNested(fmt.Sprintf("%s[%v]", "PrivateIpAddresses", i), err.(request.ErrInvalidParams))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDescription sets the Description field's value.
0000000000000000000000000000000000000000;;	func (s *CreateNetworkInterfaceInput) SetDescription(v string) *CreateNetworkInterfaceInput {
0000000000000000000000000000000000000000;;		s.Description = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *CreateNetworkInterfaceInput) SetDryRun(v bool) *CreateNetworkInterfaceInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroups sets the Groups field's value.
0000000000000000000000000000000000000000;;	func (s *CreateNetworkInterfaceInput) SetGroups(v []*string) *CreateNetworkInterfaceInput {
0000000000000000000000000000000000000000;;		s.Groups = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpv6AddressCount sets the Ipv6AddressCount field's value.
0000000000000000000000000000000000000000;;	func (s *CreateNetworkInterfaceInput) SetIpv6AddressCount(v int64) *CreateNetworkInterfaceInput {
0000000000000000000000000000000000000000;;		s.Ipv6AddressCount = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpv6Addresses sets the Ipv6Addresses field's value.
0000000000000000000000000000000000000000;;	func (s *CreateNetworkInterfaceInput) SetIpv6Addresses(v []*InstanceIpv6Address) *CreateNetworkInterfaceInput {
0000000000000000000000000000000000000000;;		s.Ipv6Addresses = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrivateIpAddress sets the PrivateIpAddress field's value.
0000000000000000000000000000000000000000;;	func (s *CreateNetworkInterfaceInput) SetPrivateIpAddress(v string) *CreateNetworkInterfaceInput {
0000000000000000000000000000000000000000;;		s.PrivateIpAddress = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrivateIpAddresses sets the PrivateIpAddresses field's value.
0000000000000000000000000000000000000000;;	func (s *CreateNetworkInterfaceInput) SetPrivateIpAddresses(v []*PrivateIpAddressSpecification) *CreateNetworkInterfaceInput {
0000000000000000000000000000000000000000;;		s.PrivateIpAddresses = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSecondaryPrivateIpAddressCount sets the SecondaryPrivateIpAddressCount field's value.
0000000000000000000000000000000000000000;;	func (s *CreateNetworkInterfaceInput) SetSecondaryPrivateIpAddressCount(v int64) *CreateNetworkInterfaceInput {
0000000000000000000000000000000000000000;;		s.SecondaryPrivateIpAddressCount = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSubnetId sets the SubnetId field's value.
0000000000000000000000000000000000000000;;	func (s *CreateNetworkInterfaceInput) SetSubnetId(v string) *CreateNetworkInterfaceInput {
0000000000000000000000000000000000000000;;		s.SubnetId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of CreateNetworkInterface.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateNetworkInterfaceResult
0000000000000000000000000000000000000000;;	type CreateNetworkInterfaceOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the network interface.
0000000000000000000000000000000000000000;;		NetworkInterface *NetworkInterface `locationName:"networkInterface" type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateNetworkInterfaceOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateNetworkInterfaceOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNetworkInterface sets the NetworkInterface field's value.
0000000000000000000000000000000000000000;;	func (s *CreateNetworkInterfaceOutput) SetNetworkInterface(v *NetworkInterface) *CreateNetworkInterfaceOutput {
0000000000000000000000000000000000000000;;		s.NetworkInterface = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for CreatePlacementGroup.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreatePlacementGroupRequest
0000000000000000000000000000000000000000;;	type CreatePlacementGroupInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A name for the placement group.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Constraints: Up to 255 ASCII characters
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// GroupName is a required field
0000000000000000000000000000000000000000;;		GroupName *string `locationName:"groupName" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The placement strategy.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Strategy is a required field
0000000000000000000000000000000000000000;;		Strategy *string `locationName:"strategy" type:"string" required:"true" enum:"PlacementStrategy"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreatePlacementGroupInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreatePlacementGroupInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *CreatePlacementGroupInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "CreatePlacementGroupInput"}
0000000000000000000000000000000000000000;;		if s.GroupName == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("GroupName"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Strategy == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Strategy"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *CreatePlacementGroupInput) SetDryRun(v bool) *CreatePlacementGroupInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroupName sets the GroupName field's value.
0000000000000000000000000000000000000000;;	func (s *CreatePlacementGroupInput) SetGroupName(v string) *CreatePlacementGroupInput {
0000000000000000000000000000000000000000;;		s.GroupName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStrategy sets the Strategy field's value.
0000000000000000000000000000000000000000;;	func (s *CreatePlacementGroupInput) SetStrategy(v string) *CreatePlacementGroupInput {
0000000000000000000000000000000000000000;;		s.Strategy = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreatePlacementGroupOutput
0000000000000000000000000000000000000000;;	type CreatePlacementGroupOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreatePlacementGroupOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreatePlacementGroupOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for CreateReservedInstancesListing.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateReservedInstancesListingRequest
0000000000000000000000000000000000000000;;	type CreateReservedInstancesListingInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Unique, case-sensitive identifier you provide to ensure idempotency of your
0000000000000000000000000000000000000000;;		// listings. This helps avoid duplicate listings. For more information, see
0000000000000000000000000000000000000000;;		// Ensuring Idempotency (http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ClientToken is a required field
0000000000000000000000000000000000000000;;		ClientToken *string `locationName:"clientToken" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of instances that are a part of a Reserved Instance account to
0000000000000000000000000000000000000000;;		// be listed in the Reserved Instance Marketplace. This number should be less
0000000000000000000000000000000000000000;;		// than or equal to the instance count associated with the Reserved Instance
0000000000000000000000000000000000000000;;		// ID specified in this call.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// InstanceCount is a required field
0000000000000000000000000000000000000000;;		InstanceCount *int64 `locationName:"instanceCount" type:"integer" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A list specifying the price of the Standard Reserved Instance for each month
0000000000000000000000000000000000000000;;		// remaining in the Reserved Instance term.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// PriceSchedules is a required field
0000000000000000000000000000000000000000;;		PriceSchedules []*PriceScheduleSpecification `locationName:"priceSchedules" locationNameList:"item" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the active Standard Reserved Instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ReservedInstancesId is a required field
0000000000000000000000000000000000000000;;		ReservedInstancesId *string `locationName:"reservedInstancesId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateReservedInstancesListingInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateReservedInstancesListingInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *CreateReservedInstancesListingInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "CreateReservedInstancesListingInput"}
0000000000000000000000000000000000000000;;		if s.ClientToken == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("ClientToken"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.InstanceCount == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("InstanceCount"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.PriceSchedules == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("PriceSchedules"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.ReservedInstancesId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("ReservedInstancesId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetClientToken sets the ClientToken field's value.
0000000000000000000000000000000000000000;;	func (s *CreateReservedInstancesListingInput) SetClientToken(v string) *CreateReservedInstancesListingInput {
0000000000000000000000000000000000000000;;		s.ClientToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceCount sets the InstanceCount field's value.
0000000000000000000000000000000000000000;;	func (s *CreateReservedInstancesListingInput) SetInstanceCount(v int64) *CreateReservedInstancesListingInput {
0000000000000000000000000000000000000000;;		s.InstanceCount = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPriceSchedules sets the PriceSchedules field's value.
0000000000000000000000000000000000000000;;	func (s *CreateReservedInstancesListingInput) SetPriceSchedules(v []*PriceScheduleSpecification) *CreateReservedInstancesListingInput {
0000000000000000000000000000000000000000;;		s.PriceSchedules = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReservedInstancesId sets the ReservedInstancesId field's value.
0000000000000000000000000000000000000000;;	func (s *CreateReservedInstancesListingInput) SetReservedInstancesId(v string) *CreateReservedInstancesListingInput {
0000000000000000000000000000000000000000;;		s.ReservedInstancesId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of CreateReservedInstancesListing.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateReservedInstancesListingResult
0000000000000000000000000000000000000000;;	type CreateReservedInstancesListingOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the Standard Reserved Instance listing.
0000000000000000000000000000000000000000;;		ReservedInstancesListings []*ReservedInstancesListing `locationName:"reservedInstancesListingsSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateReservedInstancesListingOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateReservedInstancesListingOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReservedInstancesListings sets the ReservedInstancesListings field's value.
0000000000000000000000000000000000000000;;	func (s *CreateReservedInstancesListingOutput) SetReservedInstancesListings(v []*ReservedInstancesListing) *CreateReservedInstancesListingOutput {
0000000000000000000000000000000000000000;;		s.ReservedInstancesListings = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for CreateRoute.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateRouteRequest
0000000000000000000000000000000000000000;;	type CreateRouteInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IPv4 CIDR address block used for the destination match. Routing decisions
0000000000000000000000000000000000000000;;		// are based on the most specific match.
0000000000000000000000000000000000000000;;		DestinationCidrBlock *string `locationName:"destinationCidrBlock" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IPv6 CIDR block used for the destination match. Routing decisions are
0000000000000000000000000000000000000000;;		// based on the most specific match.
0000000000000000000000000000000000000000;;		DestinationIpv6CidrBlock *string `locationName:"destinationIpv6CidrBlock" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// [IPv6 traffic only] The ID of an egress-only Internet gateway.
0000000000000000000000000000000000000000;;		EgressOnlyInternetGatewayId *string `locationName:"egressOnlyInternetGatewayId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of an Internet gateway or virtual private gateway attached to your
0000000000000000000000000000000000000000;;		// VPC.
0000000000000000000000000000000000000000;;		GatewayId *string `locationName:"gatewayId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of a NAT instance in your VPC. The operation fails if you specify
0000000000000000000000000000000000000000;;		// an instance ID unless exactly one network interface is attached.
0000000000000000000000000000000000000000;;		InstanceId *string `locationName:"instanceId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// [IPv4 traffic only] The ID of a NAT gateway.
0000000000000000000000000000000000000000;;		NatGatewayId *string `locationName:"natGatewayId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of a network interface.
0000000000000000000000000000000000000000;;		NetworkInterfaceId *string `locationName:"networkInterfaceId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the route table for the route.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// RouteTableId is a required field
0000000000000000000000000000000000000000;;		RouteTableId *string `locationName:"routeTableId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of a VPC peering connection.
0000000000000000000000000000000000000000;;		VpcPeeringConnectionId *string `locationName:"vpcPeeringConnectionId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateRouteInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateRouteInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *CreateRouteInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "CreateRouteInput"}
0000000000000000000000000000000000000000;;		if s.RouteTableId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("RouteTableId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDestinationCidrBlock sets the DestinationCidrBlock field's value.
0000000000000000000000000000000000000000;;	func (s *CreateRouteInput) SetDestinationCidrBlock(v string) *CreateRouteInput {
0000000000000000000000000000000000000000;;		s.DestinationCidrBlock = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDestinationIpv6CidrBlock sets the DestinationIpv6CidrBlock field's value.
0000000000000000000000000000000000000000;;	func (s *CreateRouteInput) SetDestinationIpv6CidrBlock(v string) *CreateRouteInput {
0000000000000000000000000000000000000000;;		s.DestinationIpv6CidrBlock = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *CreateRouteInput) SetDryRun(v bool) *CreateRouteInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEgressOnlyInternetGatewayId sets the EgressOnlyInternetGatewayId field's value.
0000000000000000000000000000000000000000;;	func (s *CreateRouteInput) SetEgressOnlyInternetGatewayId(v string) *CreateRouteInput {
0000000000000000000000000000000000000000;;		s.EgressOnlyInternetGatewayId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGatewayId sets the GatewayId field's value.
0000000000000000000000000000000000000000;;	func (s *CreateRouteInput) SetGatewayId(v string) *CreateRouteInput {
0000000000000000000000000000000000000000;;		s.GatewayId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceId sets the InstanceId field's value.
0000000000000000000000000000000000000000;;	func (s *CreateRouteInput) SetInstanceId(v string) *CreateRouteInput {
0000000000000000000000000000000000000000;;		s.InstanceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNatGatewayId sets the NatGatewayId field's value.
0000000000000000000000000000000000000000;;	func (s *CreateRouteInput) SetNatGatewayId(v string) *CreateRouteInput {
0000000000000000000000000000000000000000;;		s.NatGatewayId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNetworkInterfaceId sets the NetworkInterfaceId field's value.
0000000000000000000000000000000000000000;;	func (s *CreateRouteInput) SetNetworkInterfaceId(v string) *CreateRouteInput {
0000000000000000000000000000000000000000;;		s.NetworkInterfaceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRouteTableId sets the RouteTableId field's value.
0000000000000000000000000000000000000000;;	func (s *CreateRouteInput) SetRouteTableId(v string) *CreateRouteInput {
0000000000000000000000000000000000000000;;		s.RouteTableId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcPeeringConnectionId sets the VpcPeeringConnectionId field's value.
0000000000000000000000000000000000000000;;	func (s *CreateRouteInput) SetVpcPeeringConnectionId(v string) *CreateRouteInput {
0000000000000000000000000000000000000000;;		s.VpcPeeringConnectionId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of CreateRoute.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateRouteResult
0000000000000000000000000000000000000000;;	type CreateRouteOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns true if the request succeeds; otherwise, it returns an error.
0000000000000000000000000000000000000000;;		Return *bool `locationName:"return" type:"boolean"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateRouteOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateRouteOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReturn sets the Return field's value.
0000000000000000000000000000000000000000;;	func (s *CreateRouteOutput) SetReturn(v bool) *CreateRouteOutput {
0000000000000000000000000000000000000000;;		s.Return = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for CreateRouteTable.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateRouteTableRequest
0000000000000000000000000000000000000000;;	type CreateRouteTableInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// VpcId is a required field
0000000000000000000000000000000000000000;;		VpcId *string `locationName:"vpcId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateRouteTableInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateRouteTableInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *CreateRouteTableInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "CreateRouteTableInput"}
0000000000000000000000000000000000000000;;		if s.VpcId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("VpcId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *CreateRouteTableInput) SetDryRun(v bool) *CreateRouteTableInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcId sets the VpcId field's value.
0000000000000000000000000000000000000000;;	func (s *CreateRouteTableInput) SetVpcId(v string) *CreateRouteTableInput {
0000000000000000000000000000000000000000;;		s.VpcId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of CreateRouteTable.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateRouteTableResult
0000000000000000000000000000000000000000;;	type CreateRouteTableOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the route table.
0000000000000000000000000000000000000000;;		RouteTable *RouteTable `locationName:"routeTable" type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateRouteTableOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateRouteTableOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRouteTable sets the RouteTable field's value.
0000000000000000000000000000000000000000;;	func (s *CreateRouteTableOutput) SetRouteTable(v *RouteTable) *CreateRouteTableOutput {
0000000000000000000000000000000000000000;;		s.RouteTable = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for CreateSecurityGroup.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateSecurityGroupRequest
0000000000000000000000000000000000000000;;	type CreateSecurityGroupInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A description for the security group. This is informational only.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Constraints: Up to 255 characters in length
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Constraints for EC2-Classic: ASCII characters
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Constraints for EC2-VPC: a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&;{}!$*
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Description is a required field
0000000000000000000000000000000000000000;;		Description *string `locationName:"GroupDescription" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the security group.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Constraints: Up to 255 characters in length
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Constraints for EC2-Classic: ASCII characters
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Constraints for EC2-VPC: a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&;{}!$*
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// GroupName is a required field
0000000000000000000000000000000000000000;;		GroupName *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// [EC2-VPC] The ID of the VPC. Required for EC2-VPC.
0000000000000000000000000000000000000000;;		VpcId *string `type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateSecurityGroupInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateSecurityGroupInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *CreateSecurityGroupInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "CreateSecurityGroupInput"}
0000000000000000000000000000000000000000;;		if s.Description == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Description"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.GroupName == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("GroupName"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDescription sets the Description field's value.
0000000000000000000000000000000000000000;;	func (s *CreateSecurityGroupInput) SetDescription(v string) *CreateSecurityGroupInput {
0000000000000000000000000000000000000000;;		s.Description = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *CreateSecurityGroupInput) SetDryRun(v bool) *CreateSecurityGroupInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroupName sets the GroupName field's value.
0000000000000000000000000000000000000000;;	func (s *CreateSecurityGroupInput) SetGroupName(v string) *CreateSecurityGroupInput {
0000000000000000000000000000000000000000;;		s.GroupName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcId sets the VpcId field's value.
0000000000000000000000000000000000000000;;	func (s *CreateSecurityGroupInput) SetVpcId(v string) *CreateSecurityGroupInput {
0000000000000000000000000000000000000000;;		s.VpcId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of CreateSecurityGroup.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateSecurityGroupResult
0000000000000000000000000000000000000000;;	type CreateSecurityGroupOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the security group.
0000000000000000000000000000000000000000;;		GroupId *string `locationName:"groupId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateSecurityGroupOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateSecurityGroupOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroupId sets the GroupId field's value.
0000000000000000000000000000000000000000;;	func (s *CreateSecurityGroupOutput) SetGroupId(v string) *CreateSecurityGroupOutput {
0000000000000000000000000000000000000000;;		s.GroupId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for CreateSnapshot.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateSnapshotRequest
0000000000000000000000000000000000000000;;	type CreateSnapshotInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A description for the snapshot.
0000000000000000000000000000000000000000;;		Description *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the EBS volume.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// VolumeId is a required field
0000000000000000000000000000000000000000;;		VolumeId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateSnapshotInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateSnapshotInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *CreateSnapshotInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "CreateSnapshotInput"}
0000000000000000000000000000000000000000;;		if s.VolumeId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("VolumeId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDescription sets the Description field's value.
0000000000000000000000000000000000000000;;	func (s *CreateSnapshotInput) SetDescription(v string) *CreateSnapshotInput {
0000000000000000000000000000000000000000;;		s.Description = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *CreateSnapshotInput) SetDryRun(v bool) *CreateSnapshotInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVolumeId sets the VolumeId field's value.
0000000000000000000000000000000000000000;;	func (s *CreateSnapshotInput) SetVolumeId(v string) *CreateSnapshotInput {
0000000000000000000000000000000000000000;;		s.VolumeId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for CreateSpotDatafeedSubscription.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateSpotDatafeedSubscriptionRequest
0000000000000000000000000000000000000000;;	type CreateSpotDatafeedSubscriptionInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Amazon S3 bucket in which to store the Spot instance data feed.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Bucket is a required field
0000000000000000000000000000000000000000;;		Bucket *string `locationName:"bucket" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A prefix for the data feed file names.
0000000000000000000000000000000000000000;;		Prefix *string `locationName:"prefix" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateSpotDatafeedSubscriptionInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateSpotDatafeedSubscriptionInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *CreateSpotDatafeedSubscriptionInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "CreateSpotDatafeedSubscriptionInput"}
0000000000000000000000000000000000000000;;		if s.Bucket == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Bucket"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetBucket sets the Bucket field's value.
0000000000000000000000000000000000000000;;	func (s *CreateSpotDatafeedSubscriptionInput) SetBucket(v string) *CreateSpotDatafeedSubscriptionInput {
0000000000000000000000000000000000000000;;		s.Bucket = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *CreateSpotDatafeedSubscriptionInput) SetDryRun(v bool) *CreateSpotDatafeedSubscriptionInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrefix sets the Prefix field's value.
0000000000000000000000000000000000000000;;	func (s *CreateSpotDatafeedSubscriptionInput) SetPrefix(v string) *CreateSpotDatafeedSubscriptionInput {
0000000000000000000000000000000000000000;;		s.Prefix = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of CreateSpotDatafeedSubscription.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateSpotDatafeedSubscriptionResult
0000000000000000000000000000000000000000;;	type CreateSpotDatafeedSubscriptionOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Spot instance data feed subscription.
0000000000000000000000000000000000000000;;		SpotDatafeedSubscription *SpotDatafeedSubscription `locationName:"spotDatafeedSubscription" type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateSpotDatafeedSubscriptionOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateSpotDatafeedSubscriptionOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSpotDatafeedSubscription sets the SpotDatafeedSubscription field's value.
0000000000000000000000000000000000000000;;	func (s *CreateSpotDatafeedSubscriptionOutput) SetSpotDatafeedSubscription(v *SpotDatafeedSubscription) *CreateSpotDatafeedSubscriptionOutput {
0000000000000000000000000000000000000000;;		s.SpotDatafeedSubscription = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for CreateSubnet.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateSubnetRequest
0000000000000000000000000000000000000000;;	type CreateSubnetInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Availability Zone for the subnet.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: AWS selects one for you. If you create more than one subnet in your
0000000000000000000000000000000000000000;;		// VPC, we may not necessarily select a different zone for each subnet.
0000000000000000000000000000000000000000;;		AvailabilityZone *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IPv4 network range for the subnet, in CIDR notation. For example, 10.0.0.0/24.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// CidrBlock is a required field
0000000000000000000000000000000000000000;;		CidrBlock *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IPv6 network range for the subnet, in CIDR notation. The subnet size
0000000000000000000000000000000000000000;;		// must use a /64 prefix length.
0000000000000000000000000000000000000000;;		Ipv6CidrBlock *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// VpcId is a required field
0000000000000000000000000000000000000000;;		VpcId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateSubnetInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateSubnetInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *CreateSubnetInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "CreateSubnetInput"}
0000000000000000000000000000000000000000;;		if s.CidrBlock == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("CidrBlock"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.VpcId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("VpcId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAvailabilityZone sets the AvailabilityZone field's value.
0000000000000000000000000000000000000000;;	func (s *CreateSubnetInput) SetAvailabilityZone(v string) *CreateSubnetInput {
0000000000000000000000000000000000000000;;		s.AvailabilityZone = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCidrBlock sets the CidrBlock field's value.
0000000000000000000000000000000000000000;;	func (s *CreateSubnetInput) SetCidrBlock(v string) *CreateSubnetInput {
0000000000000000000000000000000000000000;;		s.CidrBlock = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *CreateSubnetInput) SetDryRun(v bool) *CreateSubnetInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpv6CidrBlock sets the Ipv6CidrBlock field's value.
0000000000000000000000000000000000000000;;	func (s *CreateSubnetInput) SetIpv6CidrBlock(v string) *CreateSubnetInput {
0000000000000000000000000000000000000000;;		s.Ipv6CidrBlock = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcId sets the VpcId field's value.
0000000000000000000000000000000000000000;;	func (s *CreateSubnetInput) SetVpcId(v string) *CreateSubnetInput {
0000000000000000000000000000000000000000;;		s.VpcId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of CreateSubnet.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateSubnetResult
0000000000000000000000000000000000000000;;	type CreateSubnetOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the subnet.
0000000000000000000000000000000000000000;;		Subnet *Subnet `locationName:"subnet" type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateSubnetOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateSubnetOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSubnet sets the Subnet field's value.
0000000000000000000000000000000000000000;;	func (s *CreateSubnetOutput) SetSubnet(v *Subnet) *CreateSubnetOutput {
0000000000000000000000000000000000000000;;		s.Subnet = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for CreateTags.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateTagsRequest
0000000000000000000000000000000000000000;;	type CreateTagsInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IDs of one or more resources to tag. For example, ami-1a2b3c4d.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Resources is a required field
0000000000000000000000000000000000000000;;		Resources []*string `locationName:"ResourceId" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more tags. The value parameter is required, but if you don't want
0000000000000000000000000000000000000000;;		// the tag to have a value, specify the parameter with no value, and we set
0000000000000000000000000000000000000000;;		// the value to an empty string.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Tags is a required field
0000000000000000000000000000000000000000;;		Tags []*Tag `locationName:"Tag" locationNameList:"item" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateTagsInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateTagsInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *CreateTagsInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "CreateTagsInput"}
0000000000000000000000000000000000000000;;		if s.Resources == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Resources"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Tags == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Tags"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *CreateTagsInput) SetDryRun(v bool) *CreateTagsInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetResources sets the Resources field's value.
0000000000000000000000000000000000000000;;	func (s *CreateTagsInput) SetResources(v []*string) *CreateTagsInput {
0000000000000000000000000000000000000000;;		s.Resources = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTags sets the Tags field's value.
0000000000000000000000000000000000000000;;	func (s *CreateTagsInput) SetTags(v []*Tag) *CreateTagsInput {
0000000000000000000000000000000000000000;;		s.Tags = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateTagsOutput
0000000000000000000000000000000000000000;;	type CreateTagsOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateTagsOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateTagsOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for CreateVolume.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateVolumeRequest
0000000000000000000000000000000000000000;;	type CreateVolumeInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Availability Zone in which to create the volume. Use DescribeAvailabilityZones
0000000000000000000000000000000000000000;;		// to list the Availability Zones that are currently available to you.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// AvailabilityZone is a required field
0000000000000000000000000000000000000000;;		AvailabilityZone *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Specifies whether the volume should be encrypted. Encrypted Amazon EBS volumes
0000000000000000000000000000000000000000;;		// may only be attached to instances that support Amazon EBS encryption. Volumes
0000000000000000000000000000000000000000;;		// that are created from encrypted snapshots are automatically encrypted. There
0000000000000000000000000000000000000000;;		// is no way to create an encrypted volume from an unencrypted snapshot or vice
0000000000000000000000000000000000000000;;		// versa. If your AMI uses encrypted volumes, you can only launch it on supported
0000000000000000000000000000000000000000;;		// instance types. For more information, see Amazon EBS Encryption (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html)
0000000000000000000000000000000000000000;;		// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;		Encrypted *bool `locationName:"encrypted" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Only valid for Provisioned IOPS SSD volumes. The number of I/O operations
0000000000000000000000000000000000000000;;		// per second (IOPS) to provision for the volume, with a maximum ratio of 50
0000000000000000000000000000000000000000;;		// IOPS/GiB.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Constraint: Range is 100 to 20000 for Provisioned IOPS SSD volumes
0000000000000000000000000000000000000000;;		Iops *int64 `type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The full ARN of the AWS Key Management Service (AWS KMS) customer master
0000000000000000000000000000000000000000;;		// key (CMK) to use when creating the encrypted volume. This parameter is only
0000000000000000000000000000000000000000;;		// required if you want to use a non-default CMK; if this parameter is not specified,
0000000000000000000000000000000000000000;;		// the default CMK for EBS is used. The ARN contains the arn:aws:kms namespace,
0000000000000000000000000000000000000000;;		// followed by the region of the CMK, the AWS account ID of the CMK owner, the
0000000000000000000000000000000000000000;;		// key namespace, and then the CMK ID. For example, arn:aws:kms:us-east-1:012345678910:key/abcd1234-a123-456a-a12b-a123b4cd56ef.
0000000000000000000000000000000000000000;;		// If a KmsKeyId is specified, the Encrypted flag must also be set.
0000000000000000000000000000000000000000;;		KmsKeyId *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The size of the volume, in GiBs.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Constraints: 1-16384 for gp2, 4-16384 for io1, 500-16384 for st1, 500-16384
0000000000000000000000000000000000000000;;		// for sc1, and 1-1024 for standard. If you specify a snapshot, the volume size
0000000000000000000000000000000000000000;;		// must be equal to or larger than the snapshot size.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: If you're creating the volume from a snapshot and don't specify
0000000000000000000000000000000000000000;;		// a volume size, the default is the snapshot size.
0000000000000000000000000000000000000000;;		Size *int64 `type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The snapshot from which to create the volume.
0000000000000000000000000000000000000000;;		SnapshotId *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The volume type. This can be gp2 for General Purpose SSD, io1 for Provisioned
0000000000000000000000000000000000000000;;		// IOPS SSD, st1 for Throughput Optimized HDD, sc1 for Cold HDD, or standard
0000000000000000000000000000000000000000;;		// for Magnetic volumes.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: standard
0000000000000000000000000000000000000000;;		VolumeType *string `type:"string" enum:"VolumeType"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateVolumeInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateVolumeInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *CreateVolumeInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "CreateVolumeInput"}
0000000000000000000000000000000000000000;;		if s.AvailabilityZone == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("AvailabilityZone"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAvailabilityZone sets the AvailabilityZone field's value.
0000000000000000000000000000000000000000;;	func (s *CreateVolumeInput) SetAvailabilityZone(v string) *CreateVolumeInput {
0000000000000000000000000000000000000000;;		s.AvailabilityZone = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *CreateVolumeInput) SetDryRun(v bool) *CreateVolumeInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEncrypted sets the Encrypted field's value.
0000000000000000000000000000000000000000;;	func (s *CreateVolumeInput) SetEncrypted(v bool) *CreateVolumeInput {
0000000000000000000000000000000000000000;;		s.Encrypted = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIops sets the Iops field's value.
0000000000000000000000000000000000000000;;	func (s *CreateVolumeInput) SetIops(v int64) *CreateVolumeInput {
0000000000000000000000000000000000000000;;		s.Iops = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetKmsKeyId sets the KmsKeyId field's value.
0000000000000000000000000000000000000000;;	func (s *CreateVolumeInput) SetKmsKeyId(v string) *CreateVolumeInput {
0000000000000000000000000000000000000000;;		s.KmsKeyId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSize sets the Size field's value.
0000000000000000000000000000000000000000;;	func (s *CreateVolumeInput) SetSize(v int64) *CreateVolumeInput {
0000000000000000000000000000000000000000;;		s.Size = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSnapshotId sets the SnapshotId field's value.
0000000000000000000000000000000000000000;;	func (s *CreateVolumeInput) SetSnapshotId(v string) *CreateVolumeInput {
0000000000000000000000000000000000000000;;		s.SnapshotId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVolumeType sets the VolumeType field's value.
0000000000000000000000000000000000000000;;	func (s *CreateVolumeInput) SetVolumeType(v string) *CreateVolumeInput {
0000000000000000000000000000000000000000;;		s.VolumeType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the user or group to be added or removed from the permissions for
0000000000000000000000000000000000000000;;	// a volume.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateVolumePermission
0000000000000000000000000000000000000000;;	type CreateVolumePermission struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The specific group that is to be added or removed from a volume's list of
0000000000000000000000000000000000000000;;		// create volume permissions.
0000000000000000000000000000000000000000;;		Group *string `locationName:"group" type:"string" enum:"PermissionGroup"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The specific AWS account ID that is to be added or removed from a volume's
0000000000000000000000000000000000000000;;		// list of create volume permissions.
0000000000000000000000000000000000000000;;		UserId *string `locationName:"userId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateVolumePermission) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateVolumePermission) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroup sets the Group field's value.
0000000000000000000000000000000000000000;;	func (s *CreateVolumePermission) SetGroup(v string) *CreateVolumePermission {
0000000000000000000000000000000000000000;;		s.Group = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUserId sets the UserId field's value.
0000000000000000000000000000000000000000;;	func (s *CreateVolumePermission) SetUserId(v string) *CreateVolumePermission {
0000000000000000000000000000000000000000;;		s.UserId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes modifications to the permissions for a volume.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateVolumePermissionModifications
0000000000000000000000000000000000000000;;	type CreateVolumePermissionModifications struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Adds a specific AWS account ID or group to a volume's list of create volume
0000000000000000000000000000000000000000;;		// permissions.
0000000000000000000000000000000000000000;;		Add []*CreateVolumePermission `locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Removes a specific AWS account ID or group from a volume's list of create
0000000000000000000000000000000000000000;;		// volume permissions.
0000000000000000000000000000000000000000;;		Remove []*CreateVolumePermission `locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateVolumePermissionModifications) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateVolumePermissionModifications) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAdd sets the Add field's value.
0000000000000000000000000000000000000000;;	func (s *CreateVolumePermissionModifications) SetAdd(v []*CreateVolumePermission) *CreateVolumePermissionModifications {
0000000000000000000000000000000000000000;;		s.Add = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRemove sets the Remove field's value.
0000000000000000000000000000000000000000;;	func (s *CreateVolumePermissionModifications) SetRemove(v []*CreateVolumePermission) *CreateVolumePermissionModifications {
0000000000000000000000000000000000000000;;		s.Remove = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for CreateVpcEndpoint.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateVpcEndpointRequest
0000000000000000000000000000000000000000;;	type CreateVpcEndpointInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Unique, case-sensitive identifier you provide to ensure the idempotency of
0000000000000000000000000000000000000000;;		// the request. For more information, see How to Ensure Idempotency (http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
0000000000000000000000000000000000000000;;		ClientToken *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A policy to attach to the endpoint that controls access to the service. The
0000000000000000000000000000000000000000;;		// policy must be in valid JSON format. If this parameter is not specified,
0000000000000000000000000000000000000000;;		// we attach a default policy that allows full access to the service.
0000000000000000000000000000000000000000;;		PolicyDocument *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more route table IDs.
0000000000000000000000000000000000000000;;		RouteTableIds []*string `locationName:"RouteTableId" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The AWS service name, in the form com.amazonaws.region.service. To get a
0000000000000000000000000000000000000000;;		// list of available services, use the DescribeVpcEndpointServices request.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ServiceName is a required field
0000000000000000000000000000000000000000;;		ServiceName *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC in which the endpoint will be used.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// VpcId is a required field
0000000000000000000000000000000000000000;;		VpcId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateVpcEndpointInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateVpcEndpointInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *CreateVpcEndpointInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "CreateVpcEndpointInput"}
0000000000000000000000000000000000000000;;		if s.ServiceName == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("ServiceName"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.VpcId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("VpcId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetClientToken sets the ClientToken field's value.
0000000000000000000000000000000000000000;;	func (s *CreateVpcEndpointInput) SetClientToken(v string) *CreateVpcEndpointInput {
0000000000000000000000000000000000000000;;		s.ClientToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *CreateVpcEndpointInput) SetDryRun(v bool) *CreateVpcEndpointInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPolicyDocument sets the PolicyDocument field's value.
0000000000000000000000000000000000000000;;	func (s *CreateVpcEndpointInput) SetPolicyDocument(v string) *CreateVpcEndpointInput {
0000000000000000000000000000000000000000;;		s.PolicyDocument = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRouteTableIds sets the RouteTableIds field's value.
0000000000000000000000000000000000000000;;	func (s *CreateVpcEndpointInput) SetRouteTableIds(v []*string) *CreateVpcEndpointInput {
0000000000000000000000000000000000000000;;		s.RouteTableIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetServiceName sets the ServiceName field's value.
0000000000000000000000000000000000000000;;	func (s *CreateVpcEndpointInput) SetServiceName(v string) *CreateVpcEndpointInput {
0000000000000000000000000000000000000000;;		s.ServiceName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcId sets the VpcId field's value.
0000000000000000000000000000000000000000;;	func (s *CreateVpcEndpointInput) SetVpcId(v string) *CreateVpcEndpointInput {
0000000000000000000000000000000000000000;;		s.VpcId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of CreateVpcEndpoint.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateVpcEndpointResult
0000000000000000000000000000000000000000;;	type CreateVpcEndpointOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Unique, case-sensitive identifier you provide to ensure the idempotency of
0000000000000000000000000000000000000000;;		// the request.
0000000000000000000000000000000000000000;;		ClientToken *string `locationName:"clientToken" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the endpoint.
0000000000000000000000000000000000000000;;		VpcEndpoint *VpcEndpoint `locationName:"vpcEndpoint" type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateVpcEndpointOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateVpcEndpointOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetClientToken sets the ClientToken field's value.
0000000000000000000000000000000000000000;;	func (s *CreateVpcEndpointOutput) SetClientToken(v string) *CreateVpcEndpointOutput {
0000000000000000000000000000000000000000;;		s.ClientToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcEndpoint sets the VpcEndpoint field's value.
0000000000000000000000000000000000000000;;	func (s *CreateVpcEndpointOutput) SetVpcEndpoint(v *VpcEndpoint) *CreateVpcEndpointOutput {
0000000000000000000000000000000000000000;;		s.VpcEndpoint = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for CreateVpc.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateVpcRequest
0000000000000000000000000000000000000000;;	type CreateVpcInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for
0000000000000000000000000000000000000000;;		// the VPC. You cannot specify the range of IP addresses, or the size of the
0000000000000000000000000000000000000000;;		// CIDR block.
0000000000000000000000000000000000000000;;		AmazonProvidedIpv6CidrBlock *bool `locationName:"amazonProvidedIpv6CidrBlock" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IPv4 network range for the VPC, in CIDR notation. For example, 10.0.0.0/16.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// CidrBlock is a required field
0000000000000000000000000000000000000000;;		CidrBlock *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The tenancy options for instances launched into the VPC. For default, instances
0000000000000000000000000000000000000000;;		// are launched with shared tenancy by default. You can launch instances with
0000000000000000000000000000000000000000;;		// any tenancy into a shared tenancy VPC. For dedicated, instances are launched
0000000000000000000000000000000000000000;;		// as dedicated tenancy instances by default. You can only launch instances
0000000000000000000000000000000000000000;;		// with a tenancy of dedicated or host into a dedicated tenancy VPC.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Important: The host value cannot be used with this parameter. Use the default
0000000000000000000000000000000000000000;;		// or dedicated values only.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: default
0000000000000000000000000000000000000000;;		InstanceTenancy *string `locationName:"instanceTenancy" type:"string" enum:"Tenancy"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateVpcInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateVpcInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *CreateVpcInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "CreateVpcInput"}
0000000000000000000000000000000000000000;;		if s.CidrBlock == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("CidrBlock"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAmazonProvidedIpv6CidrBlock sets the AmazonProvidedIpv6CidrBlock field's value.
0000000000000000000000000000000000000000;;	func (s *CreateVpcInput) SetAmazonProvidedIpv6CidrBlock(v bool) *CreateVpcInput {
0000000000000000000000000000000000000000;;		s.AmazonProvidedIpv6CidrBlock = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCidrBlock sets the CidrBlock field's value.
0000000000000000000000000000000000000000;;	func (s *CreateVpcInput) SetCidrBlock(v string) *CreateVpcInput {
0000000000000000000000000000000000000000;;		s.CidrBlock = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *CreateVpcInput) SetDryRun(v bool) *CreateVpcInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceTenancy sets the InstanceTenancy field's value.
0000000000000000000000000000000000000000;;	func (s *CreateVpcInput) SetInstanceTenancy(v string) *CreateVpcInput {
0000000000000000000000000000000000000000;;		s.InstanceTenancy = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of CreateVpc.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateVpcResult
0000000000000000000000000000000000000000;;	type CreateVpcOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the VPC.
0000000000000000000000000000000000000000;;		Vpc *Vpc `locationName:"vpc" type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateVpcOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateVpcOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpc sets the Vpc field's value.
0000000000000000000000000000000000000000;;	func (s *CreateVpcOutput) SetVpc(v *Vpc) *CreateVpcOutput {
0000000000000000000000000000000000000000;;		s.Vpc = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for CreateVpcPeeringConnection.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateVpcPeeringConnectionRequest
0000000000000000000000000000000000000000;;	type CreateVpcPeeringConnectionInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The AWS account ID of the owner of the peer VPC.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: Your AWS account ID
0000000000000000000000000000000000000000;;		PeerOwnerId *string `locationName:"peerOwnerId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC with which you are creating the VPC peering connection.
0000000000000000000000000000000000000000;;		PeerVpcId *string `locationName:"peerVpcId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the requester VPC.
0000000000000000000000000000000000000000;;		VpcId *string `locationName:"vpcId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateVpcPeeringConnectionInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateVpcPeeringConnectionInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *CreateVpcPeeringConnectionInput) SetDryRun(v bool) *CreateVpcPeeringConnectionInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPeerOwnerId sets the PeerOwnerId field's value.
0000000000000000000000000000000000000000;;	func (s *CreateVpcPeeringConnectionInput) SetPeerOwnerId(v string) *CreateVpcPeeringConnectionInput {
0000000000000000000000000000000000000000;;		s.PeerOwnerId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPeerVpcId sets the PeerVpcId field's value.
0000000000000000000000000000000000000000;;	func (s *CreateVpcPeeringConnectionInput) SetPeerVpcId(v string) *CreateVpcPeeringConnectionInput {
0000000000000000000000000000000000000000;;		s.PeerVpcId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcId sets the VpcId field's value.
0000000000000000000000000000000000000000;;	func (s *CreateVpcPeeringConnectionInput) SetVpcId(v string) *CreateVpcPeeringConnectionInput {
0000000000000000000000000000000000000000;;		s.VpcId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of CreateVpcPeeringConnection.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateVpcPeeringConnectionResult
0000000000000000000000000000000000000000;;	type CreateVpcPeeringConnectionOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the VPC peering connection.
0000000000000000000000000000000000000000;;		VpcPeeringConnection *VpcPeeringConnection `locationName:"vpcPeeringConnection" type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateVpcPeeringConnectionOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateVpcPeeringConnectionOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcPeeringConnection sets the VpcPeeringConnection field's value.
0000000000000000000000000000000000000000;;	func (s *CreateVpcPeeringConnectionOutput) SetVpcPeeringConnection(v *VpcPeeringConnection) *CreateVpcPeeringConnectionOutput {
0000000000000000000000000000000000000000;;		s.VpcPeeringConnection = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for CreateVpnConnection.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateVpnConnectionRequest
0000000000000000000000000000000000000000;;	type CreateVpnConnectionInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the customer gateway.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// CustomerGatewayId is a required field
0000000000000000000000000000000000000000;;		CustomerGatewayId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether the VPN connection requires static routes. If you are creating
0000000000000000000000000000000000000000;;		// a VPN connection for a device that does not support BGP, you must specify
0000000000000000000000000000000000000000;;		// true.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: false
0000000000000000000000000000000000000000;;		Options *VpnConnectionOptionsSpecification `locationName:"options" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The type of VPN connection (ipsec.1).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Type is a required field
0000000000000000000000000000000000000000;;		Type *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the virtual private gateway.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// VpnGatewayId is a required field
0000000000000000000000000000000000000000;;		VpnGatewayId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateVpnConnectionInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateVpnConnectionInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *CreateVpnConnectionInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "CreateVpnConnectionInput"}
0000000000000000000000000000000000000000;;		if s.CustomerGatewayId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("CustomerGatewayId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Type == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Type"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.VpnGatewayId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("VpnGatewayId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCustomerGatewayId sets the CustomerGatewayId field's value.
0000000000000000000000000000000000000000;;	func (s *CreateVpnConnectionInput) SetCustomerGatewayId(v string) *CreateVpnConnectionInput {
0000000000000000000000000000000000000000;;		s.CustomerGatewayId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *CreateVpnConnectionInput) SetDryRun(v bool) *CreateVpnConnectionInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetOptions sets the Options field's value.
0000000000000000000000000000000000000000;;	func (s *CreateVpnConnectionInput) SetOptions(v *VpnConnectionOptionsSpecification) *CreateVpnConnectionInput {
0000000000000000000000000000000000000000;;		s.Options = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetType sets the Type field's value.
0000000000000000000000000000000000000000;;	func (s *CreateVpnConnectionInput) SetType(v string) *CreateVpnConnectionInput {
0000000000000000000000000000000000000000;;		s.Type = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpnGatewayId sets the VpnGatewayId field's value.
0000000000000000000000000000000000000000;;	func (s *CreateVpnConnectionInput) SetVpnGatewayId(v string) *CreateVpnConnectionInput {
0000000000000000000000000000000000000000;;		s.VpnGatewayId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of CreateVpnConnection.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateVpnConnectionResult
0000000000000000000000000000000000000000;;	type CreateVpnConnectionOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the VPN connection.
0000000000000000000000000000000000000000;;		VpnConnection *VpnConnection `locationName:"vpnConnection" type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateVpnConnectionOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateVpnConnectionOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpnConnection sets the VpnConnection field's value.
0000000000000000000000000000000000000000;;	func (s *CreateVpnConnectionOutput) SetVpnConnection(v *VpnConnection) *CreateVpnConnectionOutput {
0000000000000000000000000000000000000000;;		s.VpnConnection = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for CreateVpnConnectionRoute.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateVpnConnectionRouteRequest
0000000000000000000000000000000000000000;;	type CreateVpnConnectionRouteInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The CIDR block associated with the local subnet of the customer network.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// DestinationCidrBlock is a required field
0000000000000000000000000000000000000000;;		DestinationCidrBlock *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPN connection.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// VpnConnectionId is a required field
0000000000000000000000000000000000000000;;		VpnConnectionId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateVpnConnectionRouteInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateVpnConnectionRouteInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *CreateVpnConnectionRouteInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "CreateVpnConnectionRouteInput"}
0000000000000000000000000000000000000000;;		if s.DestinationCidrBlock == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("DestinationCidrBlock"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.VpnConnectionId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("VpnConnectionId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDestinationCidrBlock sets the DestinationCidrBlock field's value.
0000000000000000000000000000000000000000;;	func (s *CreateVpnConnectionRouteInput) SetDestinationCidrBlock(v string) *CreateVpnConnectionRouteInput {
0000000000000000000000000000000000000000;;		s.DestinationCidrBlock = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpnConnectionId sets the VpnConnectionId field's value.
0000000000000000000000000000000000000000;;	func (s *CreateVpnConnectionRouteInput) SetVpnConnectionId(v string) *CreateVpnConnectionRouteInput {
0000000000000000000000000000000000000000;;		s.VpnConnectionId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateVpnConnectionRouteOutput
0000000000000000000000000000000000000000;;	type CreateVpnConnectionRouteOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateVpnConnectionRouteOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateVpnConnectionRouteOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for CreateVpnGateway.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateVpnGatewayRequest
0000000000000000000000000000000000000000;;	type CreateVpnGatewayInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Availability Zone for the virtual private gateway.
0000000000000000000000000000000000000000;;		AvailabilityZone *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The type of VPN connection this virtual private gateway supports.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Type is a required field
0000000000000000000000000000000000000000;;		Type *string `type:"string" required:"true" enum:"GatewayType"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateVpnGatewayInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateVpnGatewayInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *CreateVpnGatewayInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "CreateVpnGatewayInput"}
0000000000000000000000000000000000000000;;		if s.Type == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Type"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAvailabilityZone sets the AvailabilityZone field's value.
0000000000000000000000000000000000000000;;	func (s *CreateVpnGatewayInput) SetAvailabilityZone(v string) *CreateVpnGatewayInput {
0000000000000000000000000000000000000000;;		s.AvailabilityZone = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *CreateVpnGatewayInput) SetDryRun(v bool) *CreateVpnGatewayInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetType sets the Type field's value.
0000000000000000000000000000000000000000;;	func (s *CreateVpnGatewayInput) SetType(v string) *CreateVpnGatewayInput {
0000000000000000000000000000000000000000;;		s.Type = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of CreateVpnGateway.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CreateVpnGatewayResult
0000000000000000000000000000000000000000;;	type CreateVpnGatewayOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the virtual private gateway.
0000000000000000000000000000000000000000;;		VpnGateway *VpnGateway `locationName:"vpnGateway" type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateVpnGatewayOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateVpnGatewayOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpnGateway sets the VpnGateway field's value.
0000000000000000000000000000000000000000;;	func (s *CreateVpnGatewayOutput) SetVpnGateway(v *VpnGateway) *CreateVpnGatewayOutput {
0000000000000000000000000000000000000000;;		s.VpnGateway = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a customer gateway.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/CustomerGateway
0000000000000000000000000000000000000000;;	type CustomerGateway struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The customer gateway's Border Gateway Protocol (BGP) Autonomous System Number
0000000000000000000000000000000000000000;;		// (ASN).
0000000000000000000000000000000000000000;;		BgpAsn *string `locationName:"bgpAsn" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the customer gateway.
0000000000000000000000000000000000000000;;		CustomerGatewayId *string `locationName:"customerGatewayId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Internet-routable IP address of the customer gateway's outside interface.
0000000000000000000000000000000000000000;;		IpAddress *string `locationName:"ipAddress" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The current state of the customer gateway (pending | available | deleting
0000000000000000000000000000000000000000;;		// | deleted).
0000000000000000000000000000000000000000;;		State *string `locationName:"state" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Any tags assigned to the customer gateway.
0000000000000000000000000000000000000000;;		Tags []*Tag `locationName:"tagSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The type of VPN connection the customer gateway supports (ipsec.1).
0000000000000000000000000000000000000000;;		Type *string `locationName:"type" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CustomerGateway) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CustomerGateway) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetBgpAsn sets the BgpAsn field's value.
0000000000000000000000000000000000000000;;	func (s *CustomerGateway) SetBgpAsn(v string) *CustomerGateway {
0000000000000000000000000000000000000000;;		s.BgpAsn = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCustomerGatewayId sets the CustomerGatewayId field's value.
0000000000000000000000000000000000000000;;	func (s *CustomerGateway) SetCustomerGatewayId(v string) *CustomerGateway {
0000000000000000000000000000000000000000;;		s.CustomerGatewayId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpAddress sets the IpAddress field's value.
0000000000000000000000000000000000000000;;	func (s *CustomerGateway) SetIpAddress(v string) *CustomerGateway {
0000000000000000000000000000000000000000;;		s.IpAddress = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetState sets the State field's value.
0000000000000000000000000000000000000000;;	func (s *CustomerGateway) SetState(v string) *CustomerGateway {
0000000000000000000000000000000000000000;;		s.State = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTags sets the Tags field's value.
0000000000000000000000000000000000000000;;	func (s *CustomerGateway) SetTags(v []*Tag) *CustomerGateway {
0000000000000000000000000000000000000000;;		s.Tags = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetType sets the Type field's value.
0000000000000000000000000000000000000000;;	func (s *CustomerGateway) SetType(v string) *CustomerGateway {
0000000000000000000000000000000000000000;;		s.Type = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DeleteCustomerGateway.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteCustomerGatewayRequest
0000000000000000000000000000000000000000;;	type DeleteCustomerGatewayInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the customer gateway.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// CustomerGatewayId is a required field
0000000000000000000000000000000000000000;;		CustomerGatewayId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteCustomerGatewayInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteCustomerGatewayInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DeleteCustomerGatewayInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DeleteCustomerGatewayInput"}
0000000000000000000000000000000000000000;;		if s.CustomerGatewayId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("CustomerGatewayId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCustomerGatewayId sets the CustomerGatewayId field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteCustomerGatewayInput) SetCustomerGatewayId(v string) *DeleteCustomerGatewayInput {
0000000000000000000000000000000000000000;;		s.CustomerGatewayId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteCustomerGatewayInput) SetDryRun(v bool) *DeleteCustomerGatewayInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteCustomerGatewayOutput
0000000000000000000000000000000000000000;;	type DeleteCustomerGatewayOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteCustomerGatewayOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteCustomerGatewayOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DeleteDhcpOptions.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteDhcpOptionsRequest
0000000000000000000000000000000000000000;;	type DeleteDhcpOptionsInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the DHCP options set.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// DhcpOptionsId is a required field
0000000000000000000000000000000000000000;;		DhcpOptionsId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteDhcpOptionsInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteDhcpOptionsInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DeleteDhcpOptionsInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DeleteDhcpOptionsInput"}
0000000000000000000000000000000000000000;;		if s.DhcpOptionsId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("DhcpOptionsId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDhcpOptionsId sets the DhcpOptionsId field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteDhcpOptionsInput) SetDhcpOptionsId(v string) *DeleteDhcpOptionsInput {
0000000000000000000000000000000000000000;;		s.DhcpOptionsId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteDhcpOptionsInput) SetDryRun(v bool) *DeleteDhcpOptionsInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteDhcpOptionsOutput
0000000000000000000000000000000000000000;;	type DeleteDhcpOptionsOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteDhcpOptionsOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteDhcpOptionsOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteEgressOnlyInternetGatewayRequest
0000000000000000000000000000000000000000;;	type DeleteEgressOnlyInternetGatewayInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the egress-only Internet gateway.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// EgressOnlyInternetGatewayId is a required field
0000000000000000000000000000000000000000;;		EgressOnlyInternetGatewayId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteEgressOnlyInternetGatewayInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteEgressOnlyInternetGatewayInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DeleteEgressOnlyInternetGatewayInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DeleteEgressOnlyInternetGatewayInput"}
0000000000000000000000000000000000000000;;		if s.EgressOnlyInternetGatewayId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("EgressOnlyInternetGatewayId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteEgressOnlyInternetGatewayInput) SetDryRun(v bool) *DeleteEgressOnlyInternetGatewayInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEgressOnlyInternetGatewayId sets the EgressOnlyInternetGatewayId field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteEgressOnlyInternetGatewayInput) SetEgressOnlyInternetGatewayId(v string) *DeleteEgressOnlyInternetGatewayInput {
0000000000000000000000000000000000000000;;		s.EgressOnlyInternetGatewayId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteEgressOnlyInternetGatewayResult
0000000000000000000000000000000000000000;;	type DeleteEgressOnlyInternetGatewayOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns true if the request succeeds; otherwise, it returns an error.
0000000000000000000000000000000000000000;;		ReturnCode *bool `locationName:"returnCode" type:"boolean"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteEgressOnlyInternetGatewayOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteEgressOnlyInternetGatewayOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReturnCode sets the ReturnCode field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteEgressOnlyInternetGatewayOutput) SetReturnCode(v bool) *DeleteEgressOnlyInternetGatewayOutput {
0000000000000000000000000000000000000000;;		s.ReturnCode = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DeleteFlowLogs.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteFlowLogsRequest
0000000000000000000000000000000000000000;;	type DeleteFlowLogsInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more flow log IDs.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// FlowLogIds is a required field
0000000000000000000000000000000000000000;;		FlowLogIds []*string `locationName:"FlowLogId" locationNameList:"item" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteFlowLogsInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteFlowLogsInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DeleteFlowLogsInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DeleteFlowLogsInput"}
0000000000000000000000000000000000000000;;		if s.FlowLogIds == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("FlowLogIds"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFlowLogIds sets the FlowLogIds field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteFlowLogsInput) SetFlowLogIds(v []*string) *DeleteFlowLogsInput {
0000000000000000000000000000000000000000;;		s.FlowLogIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DeleteFlowLogs.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteFlowLogsResult
0000000000000000000000000000000000000000;;	type DeleteFlowLogsOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the flow logs that could not be deleted successfully.
0000000000000000000000000000000000000000;;		Unsuccessful []*UnsuccessfulItem `locationName:"unsuccessful" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteFlowLogsOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteFlowLogsOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUnsuccessful sets the Unsuccessful field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteFlowLogsOutput) SetUnsuccessful(v []*UnsuccessfulItem) *DeleteFlowLogsOutput {
0000000000000000000000000000000000000000;;		s.Unsuccessful = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DeleteInternetGateway.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteInternetGatewayRequest
0000000000000000000000000000000000000000;;	type DeleteInternetGatewayInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the Internet gateway.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// InternetGatewayId is a required field
0000000000000000000000000000000000000000;;		InternetGatewayId *string `locationName:"internetGatewayId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteInternetGatewayInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteInternetGatewayInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DeleteInternetGatewayInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DeleteInternetGatewayInput"}
0000000000000000000000000000000000000000;;		if s.InternetGatewayId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("InternetGatewayId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteInternetGatewayInput) SetDryRun(v bool) *DeleteInternetGatewayInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInternetGatewayId sets the InternetGatewayId field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteInternetGatewayInput) SetInternetGatewayId(v string) *DeleteInternetGatewayInput {
0000000000000000000000000000000000000000;;		s.InternetGatewayId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteInternetGatewayOutput
0000000000000000000000000000000000000000;;	type DeleteInternetGatewayOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteInternetGatewayOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteInternetGatewayOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DeleteKeyPair.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteKeyPairRequest
0000000000000000000000000000000000000000;;	type DeleteKeyPairInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the key pair.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// KeyName is a required field
0000000000000000000000000000000000000000;;		KeyName *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteKeyPairInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteKeyPairInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DeleteKeyPairInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DeleteKeyPairInput"}
0000000000000000000000000000000000000000;;		if s.KeyName == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("KeyName"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteKeyPairInput) SetDryRun(v bool) *DeleteKeyPairInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetKeyName sets the KeyName field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteKeyPairInput) SetKeyName(v string) *DeleteKeyPairInput {
0000000000000000000000000000000000000000;;		s.KeyName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteKeyPairOutput
0000000000000000000000000000000000000000;;	type DeleteKeyPairOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteKeyPairOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteKeyPairOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DeleteNatGateway.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteNatGatewayRequest
0000000000000000000000000000000000000000;;	type DeleteNatGatewayInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the NAT gateway.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// NatGatewayId is a required field
0000000000000000000000000000000000000000;;		NatGatewayId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteNatGatewayInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteNatGatewayInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DeleteNatGatewayInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DeleteNatGatewayInput"}
0000000000000000000000000000000000000000;;		if s.NatGatewayId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("NatGatewayId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNatGatewayId sets the NatGatewayId field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteNatGatewayInput) SetNatGatewayId(v string) *DeleteNatGatewayInput {
0000000000000000000000000000000000000000;;		s.NatGatewayId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DeleteNatGateway.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteNatGatewayResult
0000000000000000000000000000000000000000;;	type DeleteNatGatewayOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the NAT gateway.
0000000000000000000000000000000000000000;;		NatGatewayId *string `locationName:"natGatewayId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteNatGatewayOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteNatGatewayOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNatGatewayId sets the NatGatewayId field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteNatGatewayOutput) SetNatGatewayId(v string) *DeleteNatGatewayOutput {
0000000000000000000000000000000000000000;;		s.NatGatewayId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DeleteNetworkAclEntry.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteNetworkAclEntryRequest
0000000000000000000000000000000000000000;;	type DeleteNetworkAclEntryInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether the rule is an egress rule.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Egress is a required field
0000000000000000000000000000000000000000;;		Egress *bool `locationName:"egress" type:"boolean" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the network ACL.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// NetworkAclId is a required field
0000000000000000000000000000000000000000;;		NetworkAclId *string `locationName:"networkAclId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The rule number of the entry to delete.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// RuleNumber is a required field
0000000000000000000000000000000000000000;;		RuleNumber *int64 `locationName:"ruleNumber" type:"integer" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteNetworkAclEntryInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteNetworkAclEntryInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DeleteNetworkAclEntryInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DeleteNetworkAclEntryInput"}
0000000000000000000000000000000000000000;;		if s.Egress == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Egress"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.NetworkAclId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("NetworkAclId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.RuleNumber == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("RuleNumber"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteNetworkAclEntryInput) SetDryRun(v bool) *DeleteNetworkAclEntryInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEgress sets the Egress field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteNetworkAclEntryInput) SetEgress(v bool) *DeleteNetworkAclEntryInput {
0000000000000000000000000000000000000000;;		s.Egress = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNetworkAclId sets the NetworkAclId field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteNetworkAclEntryInput) SetNetworkAclId(v string) *DeleteNetworkAclEntryInput {
0000000000000000000000000000000000000000;;		s.NetworkAclId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRuleNumber sets the RuleNumber field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteNetworkAclEntryInput) SetRuleNumber(v int64) *DeleteNetworkAclEntryInput {
0000000000000000000000000000000000000000;;		s.RuleNumber = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteNetworkAclEntryOutput
0000000000000000000000000000000000000000;;	type DeleteNetworkAclEntryOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteNetworkAclEntryOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteNetworkAclEntryOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DeleteNetworkAcl.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteNetworkAclRequest
0000000000000000000000000000000000000000;;	type DeleteNetworkAclInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the network ACL.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// NetworkAclId is a required field
0000000000000000000000000000000000000000;;		NetworkAclId *string `locationName:"networkAclId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteNetworkAclInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteNetworkAclInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DeleteNetworkAclInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DeleteNetworkAclInput"}
0000000000000000000000000000000000000000;;		if s.NetworkAclId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("NetworkAclId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteNetworkAclInput) SetDryRun(v bool) *DeleteNetworkAclInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNetworkAclId sets the NetworkAclId field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteNetworkAclInput) SetNetworkAclId(v string) *DeleteNetworkAclInput {
0000000000000000000000000000000000000000;;		s.NetworkAclId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteNetworkAclOutput
0000000000000000000000000000000000000000;;	type DeleteNetworkAclOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteNetworkAclOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteNetworkAclOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DeleteNetworkInterface.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteNetworkInterfaceRequest
0000000000000000000000000000000000000000;;	type DeleteNetworkInterfaceInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the network interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// NetworkInterfaceId is a required field
0000000000000000000000000000000000000000;;		NetworkInterfaceId *string `locationName:"networkInterfaceId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteNetworkInterfaceInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteNetworkInterfaceInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DeleteNetworkInterfaceInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DeleteNetworkInterfaceInput"}
0000000000000000000000000000000000000000;;		if s.NetworkInterfaceId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("NetworkInterfaceId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteNetworkInterfaceInput) SetDryRun(v bool) *DeleteNetworkInterfaceInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNetworkInterfaceId sets the NetworkInterfaceId field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteNetworkInterfaceInput) SetNetworkInterfaceId(v string) *DeleteNetworkInterfaceInput {
0000000000000000000000000000000000000000;;		s.NetworkInterfaceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteNetworkInterfaceOutput
0000000000000000000000000000000000000000;;	type DeleteNetworkInterfaceOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteNetworkInterfaceOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteNetworkInterfaceOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DeletePlacementGroup.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeletePlacementGroupRequest
0000000000000000000000000000000000000000;;	type DeletePlacementGroupInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the placement group.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// GroupName is a required field
0000000000000000000000000000000000000000;;		GroupName *string `locationName:"groupName" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeletePlacementGroupInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeletePlacementGroupInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DeletePlacementGroupInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DeletePlacementGroupInput"}
0000000000000000000000000000000000000000;;		if s.GroupName == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("GroupName"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DeletePlacementGroupInput) SetDryRun(v bool) *DeletePlacementGroupInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroupName sets the GroupName field's value.
0000000000000000000000000000000000000000;;	func (s *DeletePlacementGroupInput) SetGroupName(v string) *DeletePlacementGroupInput {
0000000000000000000000000000000000000000;;		s.GroupName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeletePlacementGroupOutput
0000000000000000000000000000000000000000;;	type DeletePlacementGroupOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeletePlacementGroupOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeletePlacementGroupOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DeleteRoute.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteRouteRequest
0000000000000000000000000000000000000000;;	type DeleteRouteInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IPv4 CIDR range for the route. The value you specify must match the CIDR
0000000000000000000000000000000000000000;;		// for the route exactly.
0000000000000000000000000000000000000000;;		DestinationCidrBlock *string `locationName:"destinationCidrBlock" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IPv6 CIDR range for the route. The value you specify must match the CIDR
0000000000000000000000000000000000000000;;		// for the route exactly.
0000000000000000000000000000000000000000;;		DestinationIpv6CidrBlock *string `locationName:"destinationIpv6CidrBlock" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the route table.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// RouteTableId is a required field
0000000000000000000000000000000000000000;;		RouteTableId *string `locationName:"routeTableId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteRouteInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteRouteInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DeleteRouteInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DeleteRouteInput"}
0000000000000000000000000000000000000000;;		if s.RouteTableId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("RouteTableId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDestinationCidrBlock sets the DestinationCidrBlock field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteRouteInput) SetDestinationCidrBlock(v string) *DeleteRouteInput {
0000000000000000000000000000000000000000;;		s.DestinationCidrBlock = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDestinationIpv6CidrBlock sets the DestinationIpv6CidrBlock field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteRouteInput) SetDestinationIpv6CidrBlock(v string) *DeleteRouteInput {
0000000000000000000000000000000000000000;;		s.DestinationIpv6CidrBlock = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteRouteInput) SetDryRun(v bool) *DeleteRouteInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRouteTableId sets the RouteTableId field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteRouteInput) SetRouteTableId(v string) *DeleteRouteInput {
0000000000000000000000000000000000000000;;		s.RouteTableId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteRouteOutput
0000000000000000000000000000000000000000;;	type DeleteRouteOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteRouteOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteRouteOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DeleteRouteTable.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteRouteTableRequest
0000000000000000000000000000000000000000;;	type DeleteRouteTableInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the route table.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// RouteTableId is a required field
0000000000000000000000000000000000000000;;		RouteTableId *string `locationName:"routeTableId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteRouteTableInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteRouteTableInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DeleteRouteTableInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DeleteRouteTableInput"}
0000000000000000000000000000000000000000;;		if s.RouteTableId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("RouteTableId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteRouteTableInput) SetDryRun(v bool) *DeleteRouteTableInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRouteTableId sets the RouteTableId field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteRouteTableInput) SetRouteTableId(v string) *DeleteRouteTableInput {
0000000000000000000000000000000000000000;;		s.RouteTableId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteRouteTableOutput
0000000000000000000000000000000000000000;;	type DeleteRouteTableOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteRouteTableOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteRouteTableOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DeleteSecurityGroup.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteSecurityGroupRequest
0000000000000000000000000000000000000000;;	type DeleteSecurityGroupInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the security group. Required for a nondefault VPC.
0000000000000000000000000000000000000000;;		GroupId *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// [EC2-Classic, default VPC] The name of the security group. You can specify
0000000000000000000000000000000000000000;;		// either the security group name or the security group ID.
0000000000000000000000000000000000000000;;		GroupName *string `type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteSecurityGroupInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteSecurityGroupInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteSecurityGroupInput) SetDryRun(v bool) *DeleteSecurityGroupInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroupId sets the GroupId field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteSecurityGroupInput) SetGroupId(v string) *DeleteSecurityGroupInput {
0000000000000000000000000000000000000000;;		s.GroupId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroupName sets the GroupName field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteSecurityGroupInput) SetGroupName(v string) *DeleteSecurityGroupInput {
0000000000000000000000000000000000000000;;		s.GroupName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteSecurityGroupOutput
0000000000000000000000000000000000000000;;	type DeleteSecurityGroupOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteSecurityGroupOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteSecurityGroupOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DeleteSnapshot.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteSnapshotRequest
0000000000000000000000000000000000000000;;	type DeleteSnapshotInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the EBS snapshot.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// SnapshotId is a required field
0000000000000000000000000000000000000000;;		SnapshotId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteSnapshotInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteSnapshotInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DeleteSnapshotInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DeleteSnapshotInput"}
0000000000000000000000000000000000000000;;		if s.SnapshotId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("SnapshotId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteSnapshotInput) SetDryRun(v bool) *DeleteSnapshotInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSnapshotId sets the SnapshotId field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteSnapshotInput) SetSnapshotId(v string) *DeleteSnapshotInput {
0000000000000000000000000000000000000000;;		s.SnapshotId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteSnapshotOutput
0000000000000000000000000000000000000000;;	type DeleteSnapshotOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteSnapshotOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteSnapshotOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DeleteSpotDatafeedSubscription.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteSpotDatafeedSubscriptionRequest
0000000000000000000000000000000000000000;;	type DeleteSpotDatafeedSubscriptionInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteSpotDatafeedSubscriptionInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteSpotDatafeedSubscriptionInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteSpotDatafeedSubscriptionInput) SetDryRun(v bool) *DeleteSpotDatafeedSubscriptionInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteSpotDatafeedSubscriptionOutput
0000000000000000000000000000000000000000;;	type DeleteSpotDatafeedSubscriptionOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteSpotDatafeedSubscriptionOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteSpotDatafeedSubscriptionOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DeleteSubnet.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteSubnetRequest
0000000000000000000000000000000000000000;;	type DeleteSubnetInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the subnet.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// SubnetId is a required field
0000000000000000000000000000000000000000;;		SubnetId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteSubnetInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteSubnetInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DeleteSubnetInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DeleteSubnetInput"}
0000000000000000000000000000000000000000;;		if s.SubnetId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("SubnetId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteSubnetInput) SetDryRun(v bool) *DeleteSubnetInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSubnetId sets the SubnetId field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteSubnetInput) SetSubnetId(v string) *DeleteSubnetInput {
0000000000000000000000000000000000000000;;		s.SubnetId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteSubnetOutput
0000000000000000000000000000000000000000;;	type DeleteSubnetOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteSubnetOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteSubnetOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DeleteTags.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteTagsRequest
0000000000000000000000000000000000000000;;	type DeleteTagsInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the resource. For example, ami-1a2b3c4d. You can specify more than
0000000000000000000000000000000000000000;;		// one resource ID.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Resources is a required field
0000000000000000000000000000000000000000;;		Resources []*string `locationName:"resourceId" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more tags to delete. If you omit the value parameter, we delete the
0000000000000000000000000000000000000000;;		// tag regardless of its value. If you specify this parameter with an empty
0000000000000000000000000000000000000000;;		// string as the value, we delete the key only if its value is an empty string.
0000000000000000000000000000000000000000;;		Tags []*Tag `locationName:"tag" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteTagsInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteTagsInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DeleteTagsInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DeleteTagsInput"}
0000000000000000000000000000000000000000;;		if s.Resources == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Resources"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteTagsInput) SetDryRun(v bool) *DeleteTagsInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetResources sets the Resources field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteTagsInput) SetResources(v []*string) *DeleteTagsInput {
0000000000000000000000000000000000000000;;		s.Resources = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTags sets the Tags field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteTagsInput) SetTags(v []*Tag) *DeleteTagsInput {
0000000000000000000000000000000000000000;;		s.Tags = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteTagsOutput
0000000000000000000000000000000000000000;;	type DeleteTagsOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteTagsOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteTagsOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DeleteVolume.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteVolumeRequest
0000000000000000000000000000000000000000;;	type DeleteVolumeInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the volume.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// VolumeId is a required field
0000000000000000000000000000000000000000;;		VolumeId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteVolumeInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteVolumeInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DeleteVolumeInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DeleteVolumeInput"}
0000000000000000000000000000000000000000;;		if s.VolumeId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("VolumeId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteVolumeInput) SetDryRun(v bool) *DeleteVolumeInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVolumeId sets the VolumeId field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteVolumeInput) SetVolumeId(v string) *DeleteVolumeInput {
0000000000000000000000000000000000000000;;		s.VolumeId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteVolumeOutput
0000000000000000000000000000000000000000;;	type DeleteVolumeOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteVolumeOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteVolumeOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DeleteVpcEndpoints.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteVpcEndpointsRequest
0000000000000000000000000000000000000000;;	type DeleteVpcEndpointsInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more endpoint IDs.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// VpcEndpointIds is a required field
0000000000000000000000000000000000000000;;		VpcEndpointIds []*string `locationName:"VpcEndpointId" locationNameList:"item" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteVpcEndpointsInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteVpcEndpointsInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DeleteVpcEndpointsInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DeleteVpcEndpointsInput"}
0000000000000000000000000000000000000000;;		if s.VpcEndpointIds == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("VpcEndpointIds"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteVpcEndpointsInput) SetDryRun(v bool) *DeleteVpcEndpointsInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcEndpointIds sets the VpcEndpointIds field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteVpcEndpointsInput) SetVpcEndpointIds(v []*string) *DeleteVpcEndpointsInput {
0000000000000000000000000000000000000000;;		s.VpcEndpointIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DeleteVpcEndpoints.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteVpcEndpointsResult
0000000000000000000000000000000000000000;;	type DeleteVpcEndpointsOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the endpoints that were not successfully deleted.
0000000000000000000000000000000000000000;;		Unsuccessful []*UnsuccessfulItem `locationName:"unsuccessful" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteVpcEndpointsOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteVpcEndpointsOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUnsuccessful sets the Unsuccessful field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteVpcEndpointsOutput) SetUnsuccessful(v []*UnsuccessfulItem) *DeleteVpcEndpointsOutput {
0000000000000000000000000000000000000000;;		s.Unsuccessful = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DeleteVpc.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteVpcRequest
0000000000000000000000000000000000000000;;	type DeleteVpcInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// VpcId is a required field
0000000000000000000000000000000000000000;;		VpcId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteVpcInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteVpcInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DeleteVpcInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DeleteVpcInput"}
0000000000000000000000000000000000000000;;		if s.VpcId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("VpcId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteVpcInput) SetDryRun(v bool) *DeleteVpcInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcId sets the VpcId field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteVpcInput) SetVpcId(v string) *DeleteVpcInput {
0000000000000000000000000000000000000000;;		s.VpcId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteVpcOutput
0000000000000000000000000000000000000000;;	type DeleteVpcOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteVpcOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteVpcOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DeleteVpcPeeringConnection.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteVpcPeeringConnectionRequest
0000000000000000000000000000000000000000;;	type DeleteVpcPeeringConnectionInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC peering connection.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// VpcPeeringConnectionId is a required field
0000000000000000000000000000000000000000;;		VpcPeeringConnectionId *string `locationName:"vpcPeeringConnectionId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteVpcPeeringConnectionInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteVpcPeeringConnectionInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DeleteVpcPeeringConnectionInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DeleteVpcPeeringConnectionInput"}
0000000000000000000000000000000000000000;;		if s.VpcPeeringConnectionId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("VpcPeeringConnectionId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteVpcPeeringConnectionInput) SetDryRun(v bool) *DeleteVpcPeeringConnectionInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcPeeringConnectionId sets the VpcPeeringConnectionId field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteVpcPeeringConnectionInput) SetVpcPeeringConnectionId(v string) *DeleteVpcPeeringConnectionInput {
0000000000000000000000000000000000000000;;		s.VpcPeeringConnectionId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DeleteVpcPeeringConnection.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteVpcPeeringConnectionResult
0000000000000000000000000000000000000000;;	type DeleteVpcPeeringConnectionOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns true if the request succeeds; otherwise, it returns an error.
0000000000000000000000000000000000000000;;		Return *bool `locationName:"return" type:"boolean"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteVpcPeeringConnectionOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteVpcPeeringConnectionOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReturn sets the Return field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteVpcPeeringConnectionOutput) SetReturn(v bool) *DeleteVpcPeeringConnectionOutput {
0000000000000000000000000000000000000000;;		s.Return = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DeleteVpnConnection.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteVpnConnectionRequest
0000000000000000000000000000000000000000;;	type DeleteVpnConnectionInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPN connection.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// VpnConnectionId is a required field
0000000000000000000000000000000000000000;;		VpnConnectionId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteVpnConnectionInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteVpnConnectionInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DeleteVpnConnectionInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DeleteVpnConnectionInput"}
0000000000000000000000000000000000000000;;		if s.VpnConnectionId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("VpnConnectionId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteVpnConnectionInput) SetDryRun(v bool) *DeleteVpnConnectionInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpnConnectionId sets the VpnConnectionId field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteVpnConnectionInput) SetVpnConnectionId(v string) *DeleteVpnConnectionInput {
0000000000000000000000000000000000000000;;		s.VpnConnectionId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteVpnConnectionOutput
0000000000000000000000000000000000000000;;	type DeleteVpnConnectionOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteVpnConnectionOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteVpnConnectionOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DeleteVpnConnectionRoute.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteVpnConnectionRouteRequest
0000000000000000000000000000000000000000;;	type DeleteVpnConnectionRouteInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The CIDR block associated with the local subnet of the customer network.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// DestinationCidrBlock is a required field
0000000000000000000000000000000000000000;;		DestinationCidrBlock *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPN connection.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// VpnConnectionId is a required field
0000000000000000000000000000000000000000;;		VpnConnectionId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteVpnConnectionRouteInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteVpnConnectionRouteInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DeleteVpnConnectionRouteInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DeleteVpnConnectionRouteInput"}
0000000000000000000000000000000000000000;;		if s.DestinationCidrBlock == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("DestinationCidrBlock"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.VpnConnectionId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("VpnConnectionId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDestinationCidrBlock sets the DestinationCidrBlock field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteVpnConnectionRouteInput) SetDestinationCidrBlock(v string) *DeleteVpnConnectionRouteInput {
0000000000000000000000000000000000000000;;		s.DestinationCidrBlock = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpnConnectionId sets the VpnConnectionId field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteVpnConnectionRouteInput) SetVpnConnectionId(v string) *DeleteVpnConnectionRouteInput {
0000000000000000000000000000000000000000;;		s.VpnConnectionId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteVpnConnectionRouteOutput
0000000000000000000000000000000000000000;;	type DeleteVpnConnectionRouteOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteVpnConnectionRouteOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteVpnConnectionRouteOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DeleteVpnGateway.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteVpnGatewayRequest
0000000000000000000000000000000000000000;;	type DeleteVpnGatewayInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the virtual private gateway.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// VpnGatewayId is a required field
0000000000000000000000000000000000000000;;		VpnGatewayId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteVpnGatewayInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteVpnGatewayInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DeleteVpnGatewayInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DeleteVpnGatewayInput"}
0000000000000000000000000000000000000000;;		if s.VpnGatewayId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("VpnGatewayId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteVpnGatewayInput) SetDryRun(v bool) *DeleteVpnGatewayInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpnGatewayId sets the VpnGatewayId field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteVpnGatewayInput) SetVpnGatewayId(v string) *DeleteVpnGatewayInput {
0000000000000000000000000000000000000000;;		s.VpnGatewayId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeleteVpnGatewayOutput
0000000000000000000000000000000000000000;;	type DeleteVpnGatewayOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteVpnGatewayOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteVpnGatewayOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DeregisterImage.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeregisterImageRequest
0000000000000000000000000000000000000000;;	type DeregisterImageInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the AMI.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ImageId is a required field
0000000000000000000000000000000000000000;;		ImageId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeregisterImageInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeregisterImageInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DeregisterImageInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DeregisterImageInput"}
0000000000000000000000000000000000000000;;		if s.ImageId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("ImageId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DeregisterImageInput) SetDryRun(v bool) *DeregisterImageInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetImageId sets the ImageId field's value.
0000000000000000000000000000000000000000;;	func (s *DeregisterImageInput) SetImageId(v string) *DeregisterImageInput {
0000000000000000000000000000000000000000;;		s.ImageId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DeregisterImageOutput
0000000000000000000000000000000000000000;;	type DeregisterImageOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeregisterImageOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeregisterImageOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeAccountAttributes.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeAccountAttributesRequest
0000000000000000000000000000000000000000;;	type DescribeAccountAttributesInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more account attribute names.
0000000000000000000000000000000000000000;;		AttributeNames []*string `locationName:"attributeName" locationNameList:"attributeName" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeAccountAttributesInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeAccountAttributesInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAttributeNames sets the AttributeNames field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeAccountAttributesInput) SetAttributeNames(v []*string) *DescribeAccountAttributesInput {
0000000000000000000000000000000000000000;;		s.AttributeNames = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeAccountAttributesInput) SetDryRun(v bool) *DescribeAccountAttributesInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeAccountAttributes.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeAccountAttributesResult
0000000000000000000000000000000000000000;;	type DescribeAccountAttributesOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about one or more account attributes.
0000000000000000000000000000000000000000;;		AccountAttributes []*AccountAttribute `locationName:"accountAttributeSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeAccountAttributesOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeAccountAttributesOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAccountAttributes sets the AccountAttributes field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeAccountAttributesOutput) SetAccountAttributes(v []*AccountAttribute) *DescribeAccountAttributesOutput {
0000000000000000000000000000000000000000;;		s.AccountAttributes = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeAddresses.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeAddressesRequest
0000000000000000000000000000000000000000;;	type DescribeAddressesInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// [EC2-VPC] One or more allocation IDs.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: Describes all your Elastic IP addresses.
0000000000000000000000000000000000000000;;		AllocationIds []*string `locationName:"AllocationId" locationNameList:"AllocationId" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more filters. Filter names and values are case-sensitive.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * allocation-id - [EC2-VPC] The allocation ID for the address.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * association-id - [EC2-VPC] The association ID for the address.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * domain - Indicates whether the address is for use in EC2-Classic (standard)
0000000000000000000000000000000000000000;;		//    or in a VPC (vpc).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * instance-id - The ID of the instance the address is associated with,
0000000000000000000000000000000000000000;;		//    if any.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * network-interface-id - [EC2-VPC] The ID of the network interface that
0000000000000000000000000000000000000000;;		//    the address is associated with, if any.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * network-interface-owner-id - The AWS account ID of the owner.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * private-ip-address - [EC2-VPC] The private IP address associated with
0000000000000000000000000000000000000000;;		//    the Elastic IP address.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * public-ip - The Elastic IP address.
0000000000000000000000000000000000000000;;		Filters []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// [EC2-Classic] One or more Elastic IP addresses.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: Describes all your Elastic IP addresses.
0000000000000000000000000000000000000000;;		PublicIps []*string `locationName:"PublicIp" locationNameList:"PublicIp" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeAddressesInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeAddressesInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAllocationIds sets the AllocationIds field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeAddressesInput) SetAllocationIds(v []*string) *DescribeAddressesInput {
0000000000000000000000000000000000000000;;		s.AllocationIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeAddressesInput) SetDryRun(v bool) *DescribeAddressesInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFilters sets the Filters field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeAddressesInput) SetFilters(v []*Filter) *DescribeAddressesInput {
0000000000000000000000000000000000000000;;		s.Filters = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPublicIps sets the PublicIps field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeAddressesInput) SetPublicIps(v []*string) *DescribeAddressesInput {
0000000000000000000000000000000000000000;;		s.PublicIps = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeAddresses.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeAddressesResult
0000000000000000000000000000000000000000;;	type DescribeAddressesOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about one or more Elastic IP addresses.
0000000000000000000000000000000000000000;;		Addresses []*Address `locationName:"addressesSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeAddressesOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeAddressesOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAddresses sets the Addresses field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeAddressesOutput) SetAddresses(v []*Address) *DescribeAddressesOutput {
0000000000000000000000000000000000000000;;		s.Addresses = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeAvailabilityZones.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeAvailabilityZonesRequest
0000000000000000000000000000000000000000;;	type DescribeAvailabilityZonesInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more filters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * message - Information about the Availability Zone.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * region-name - The name of the region for the Availability Zone (for
0000000000000000000000000000000000000000;;		//    example, us-east-1).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * state - The state of the Availability Zone (available | information
0000000000000000000000000000000000000000;;		//    | impaired | unavailable).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * zone-name - The name of the Availability Zone (for example, us-east-1a).
0000000000000000000000000000000000000000;;		Filters []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The names of one or more Availability Zones.
0000000000000000000000000000000000000000;;		ZoneNames []*string `locationName:"ZoneName" locationNameList:"ZoneName" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeAvailabilityZonesInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeAvailabilityZonesInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeAvailabilityZonesInput) SetDryRun(v bool) *DescribeAvailabilityZonesInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFilters sets the Filters field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeAvailabilityZonesInput) SetFilters(v []*Filter) *DescribeAvailabilityZonesInput {
0000000000000000000000000000000000000000;;		s.Filters = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetZoneNames sets the ZoneNames field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeAvailabilityZonesInput) SetZoneNames(v []*string) *DescribeAvailabilityZonesInput {
0000000000000000000000000000000000000000;;		s.ZoneNames = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeAvailabiltyZones.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeAvailabilityZonesResult
0000000000000000000000000000000000000000;;	type DescribeAvailabilityZonesOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about one or more Availability Zones.
0000000000000000000000000000000000000000;;		AvailabilityZones []*AvailabilityZone `locationName:"availabilityZoneInfo" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeAvailabilityZonesOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeAvailabilityZonesOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAvailabilityZones sets the AvailabilityZones field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeAvailabilityZonesOutput) SetAvailabilityZones(v []*AvailabilityZone) *DescribeAvailabilityZonesOutput {
0000000000000000000000000000000000000000;;		s.AvailabilityZones = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeBundleTasks.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeBundleTasksRequest
0000000000000000000000000000000000000000;;	type DescribeBundleTasksInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more bundle task IDs.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: Describes all your bundle tasks.
0000000000000000000000000000000000000000;;		BundleIds []*string `locationName:"BundleId" locationNameList:"BundleId" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more filters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * bundle-id - The ID of the bundle task.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * error-code - If the task failed, the error code returned.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * error-message - If the task failed, the error message returned.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * instance-id - The ID of the instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * progress - The level of task completion, as a percentage (for example,
0000000000000000000000000000000000000000;;		//    20%).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * s3-bucket - The Amazon S3 bucket to store the AMI.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * s3-prefix - The beginning of the AMI name.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * start-time - The time the task started (for example, 2013-09-15T17:15:20.000Z).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * state - The state of the task (pending | waiting-for-shutdown | bundling
0000000000000000000000000000000000000000;;		//    | storing | cancelling | complete | failed).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * update-time - The time of the most recent update for the task.
0000000000000000000000000000000000000000;;		Filters []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeBundleTasksInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeBundleTasksInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetBundleIds sets the BundleIds field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeBundleTasksInput) SetBundleIds(v []*string) *DescribeBundleTasksInput {
0000000000000000000000000000000000000000;;		s.BundleIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeBundleTasksInput) SetDryRun(v bool) *DescribeBundleTasksInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFilters sets the Filters field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeBundleTasksInput) SetFilters(v []*Filter) *DescribeBundleTasksInput {
0000000000000000000000000000000000000000;;		s.Filters = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeBundleTasks.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeBundleTasksResult
0000000000000000000000000000000000000000;;	type DescribeBundleTasksOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about one or more bundle tasks.
0000000000000000000000000000000000000000;;		BundleTasks []*BundleTask `locationName:"bundleInstanceTasksSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeBundleTasksOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeBundleTasksOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetBundleTasks sets the BundleTasks field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeBundleTasksOutput) SetBundleTasks(v []*BundleTask) *DescribeBundleTasksOutput {
0000000000000000000000000000000000000000;;		s.BundleTasks = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeClassicLinkInstances.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeClassicLinkInstancesRequest
0000000000000000000000000000000000000000;;	type DescribeClassicLinkInstancesInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more filters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * group-id - The ID of a VPC security group that's associated with the
0000000000000000000000000000000000000000;;		//    instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * instance-id - The ID of the instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag:key=value - The key/value combination of a tag assigned to the resource.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag-key - The key of a tag assigned to the resource. This filter is
0000000000000000000000000000000000000000;;		//    independent of the tag-value filter. For example, if you use both the
0000000000000000000000000000000000000000;;		//    filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources
0000000000000000000000000000000000000000;;		//    assigned both the tag key Purpose (regardless of what the tag's value
0000000000000000000000000000000000000000;;		//    is), and the tag value X (regardless of what the tag's key is). If you
0000000000000000000000000000000000000000;;		//    want to list only resources where Purpose is X, see the tag:key=value
0000000000000000000000000000000000000000;;		//    filter.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag-value - The value of a tag assigned to the resource. This filter
0000000000000000000000000000000000000000;;		//    is independent of the tag-key filter.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * vpc-id - The ID of the VPC that the instance is linked to.
0000000000000000000000000000000000000000;;		Filters []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more instance IDs. Must be instances linked to a VPC through ClassicLink.
0000000000000000000000000000000000000000;;		InstanceIds []*string `locationName:"InstanceId" locationNameList:"InstanceId" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum number of results to return for the request in a single page.
0000000000000000000000000000000000000000;;		// The remaining results of the initial request can be seen by sending another
0000000000000000000000000000000000000000;;		// request with the returned NextToken value. This value can be between 5 and
0000000000000000000000000000000000000000;;		// 1000; if MaxResults is given a value larger than 1000, only 1000 results
0000000000000000000000000000000000000000;;		// are returned. You cannot specify this parameter and the instance IDs parameter
0000000000000000000000000000000000000000;;		// in the same request.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Constraint: If the value is greater than 1000, we return only 1000 items.
0000000000000000000000000000000000000000;;		MaxResults *int64 `locationName:"maxResults" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token to retrieve the next page of results.
0000000000000000000000000000000000000000;;		NextToken *string `locationName:"nextToken" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeClassicLinkInstancesInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeClassicLinkInstancesInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeClassicLinkInstancesInput) SetDryRun(v bool) *DescribeClassicLinkInstancesInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFilters sets the Filters field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeClassicLinkInstancesInput) SetFilters(v []*Filter) *DescribeClassicLinkInstancesInput {
0000000000000000000000000000000000000000;;		s.Filters = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceIds sets the InstanceIds field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeClassicLinkInstancesInput) SetInstanceIds(v []*string) *DescribeClassicLinkInstancesInput {
0000000000000000000000000000000000000000;;		s.InstanceIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxResults sets the MaxResults field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeClassicLinkInstancesInput) SetMaxResults(v int64) *DescribeClassicLinkInstancesInput {
0000000000000000000000000000000000000000;;		s.MaxResults = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeClassicLinkInstancesInput) SetNextToken(v string) *DescribeClassicLinkInstancesInput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeClassicLinkInstances.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeClassicLinkInstancesResult
0000000000000000000000000000000000000000;;	type DescribeClassicLinkInstancesOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about one or more linked EC2-Classic instances.
0000000000000000000000000000000000000000;;		Instances []*ClassicLinkInstance `locationName:"instancesSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token to use to retrieve the next page of results. This value is null
0000000000000000000000000000000000000000;;		// when there are no more results to return.
0000000000000000000000000000000000000000;;		NextToken *string `locationName:"nextToken" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeClassicLinkInstancesOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeClassicLinkInstancesOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstances sets the Instances field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeClassicLinkInstancesOutput) SetInstances(v []*ClassicLinkInstance) *DescribeClassicLinkInstancesOutput {
0000000000000000000000000000000000000000;;		s.Instances = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeClassicLinkInstancesOutput) SetNextToken(v string) *DescribeClassicLinkInstancesOutput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeConversionTasks.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeConversionTasksRequest
0000000000000000000000000000000000000000;;	type DescribeConversionTasksInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more conversion task IDs.
0000000000000000000000000000000000000000;;		ConversionTaskIds []*string `locationName:"conversionTaskId" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeConversionTasksInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeConversionTasksInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetConversionTaskIds sets the ConversionTaskIds field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeConversionTasksInput) SetConversionTaskIds(v []*string) *DescribeConversionTasksInput {
0000000000000000000000000000000000000000;;		s.ConversionTaskIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeConversionTasksInput) SetDryRun(v bool) *DescribeConversionTasksInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output for DescribeConversionTasks.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeConversionTasksResult
0000000000000000000000000000000000000000;;	type DescribeConversionTasksOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the conversion tasks.
0000000000000000000000000000000000000000;;		ConversionTasks []*ConversionTask `locationName:"conversionTasks" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeConversionTasksOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeConversionTasksOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetConversionTasks sets the ConversionTasks field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeConversionTasksOutput) SetConversionTasks(v []*ConversionTask) *DescribeConversionTasksOutput {
0000000000000000000000000000000000000000;;		s.ConversionTasks = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeCustomerGateways.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeCustomerGatewaysRequest
0000000000000000000000000000000000000000;;	type DescribeCustomerGatewaysInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more customer gateway IDs.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: Describes all your customer gateways.
0000000000000000000000000000000000000000;;		CustomerGatewayIds []*string `locationName:"CustomerGatewayId" locationNameList:"CustomerGatewayId" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more filters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * bgp-asn - The customer gateway's Border Gateway Protocol (BGP) Autonomous
0000000000000000000000000000000000000000;;		//    System Number (ASN).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * customer-gateway-id - The ID of the customer gateway.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * ip-address - The IP address of the customer gateway's Internet-routable
0000000000000000000000000000000000000000;;		//    external interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * state - The state of the customer gateway (pending | available | deleting
0000000000000000000000000000000000000000;;		//    | deleted).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * type - The type of customer gateway. Currently, the only supported type
0000000000000000000000000000000000000000;;		//    is ipsec.1.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag:key=value - The key/value combination of a tag assigned to the resource.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag-key - The key of a tag assigned to the resource. This filter is
0000000000000000000000000000000000000000;;		//    independent of the tag-value filter. For example, if you use both the
0000000000000000000000000000000000000000;;		//    filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources
0000000000000000000000000000000000000000;;		//    assigned both the tag key Purpose (regardless of what the tag's value
0000000000000000000000000000000000000000;;		//    is), and the tag value X (regardless of what the tag's key is). If you
0000000000000000000000000000000000000000;;		//    want to list only resources where Purpose is X, see the tag:key=value
0000000000000000000000000000000000000000;;		//    filter.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag-value - The value of a tag assigned to the resource. This filter
0000000000000000000000000000000000000000;;		//    is independent of the tag-key filter.
0000000000000000000000000000000000000000;;		Filters []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeCustomerGatewaysInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeCustomerGatewaysInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCustomerGatewayIds sets the CustomerGatewayIds field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeCustomerGatewaysInput) SetCustomerGatewayIds(v []*string) *DescribeCustomerGatewaysInput {
0000000000000000000000000000000000000000;;		s.CustomerGatewayIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeCustomerGatewaysInput) SetDryRun(v bool) *DescribeCustomerGatewaysInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFilters sets the Filters field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeCustomerGatewaysInput) SetFilters(v []*Filter) *DescribeCustomerGatewaysInput {
0000000000000000000000000000000000000000;;		s.Filters = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeCustomerGateways.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeCustomerGatewaysResult
0000000000000000000000000000000000000000;;	type DescribeCustomerGatewaysOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about one or more customer gateways.
0000000000000000000000000000000000000000;;		CustomerGateways []*CustomerGateway `locationName:"customerGatewaySet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeCustomerGatewaysOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeCustomerGatewaysOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCustomerGateways sets the CustomerGateways field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeCustomerGatewaysOutput) SetCustomerGateways(v []*CustomerGateway) *DescribeCustomerGatewaysOutput {
0000000000000000000000000000000000000000;;		s.CustomerGateways = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeDhcpOptions.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeDhcpOptionsRequest
0000000000000000000000000000000000000000;;	type DescribeDhcpOptionsInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IDs of one or more DHCP options sets.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: Describes all your DHCP options sets.
0000000000000000000000000000000000000000;;		DhcpOptionsIds []*string `locationName:"DhcpOptionsId" locationNameList:"DhcpOptionsId" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more filters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * dhcp-options-id - The ID of a set of DHCP options.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * key - The key for one of the options (for example, domain-name).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * value - The value for one of the options.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag:key=value - The key/value combination of a tag assigned to the resource.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag-key - The key of a tag assigned to the resource. This filter is
0000000000000000000000000000000000000000;;		//    independent of the tag-value filter. For example, if you use both the
0000000000000000000000000000000000000000;;		//    filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources
0000000000000000000000000000000000000000;;		//    assigned both the tag key Purpose (regardless of what the tag's value
0000000000000000000000000000000000000000;;		//    is), and the tag value X (regardless of what the tag's key is). If you
0000000000000000000000000000000000000000;;		//    want to list only resources where Purpose is X, see the tag:key=value
0000000000000000000000000000000000000000;;		//    filter.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag-value - The value of a tag assigned to the resource. This filter
0000000000000000000000000000000000000000;;		//    is independent of the tag-key filter.
0000000000000000000000000000000000000000;;		Filters []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeDhcpOptionsInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeDhcpOptionsInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDhcpOptionsIds sets the DhcpOptionsIds field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeDhcpOptionsInput) SetDhcpOptionsIds(v []*string) *DescribeDhcpOptionsInput {
0000000000000000000000000000000000000000;;		s.DhcpOptionsIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeDhcpOptionsInput) SetDryRun(v bool) *DescribeDhcpOptionsInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFilters sets the Filters field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeDhcpOptionsInput) SetFilters(v []*Filter) *DescribeDhcpOptionsInput {
0000000000000000000000000000000000000000;;		s.Filters = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeDhcpOptions.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeDhcpOptionsResult
0000000000000000000000000000000000000000;;	type DescribeDhcpOptionsOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about one or more DHCP options sets.
0000000000000000000000000000000000000000;;		DhcpOptions []*DhcpOptions `locationName:"dhcpOptionsSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeDhcpOptionsOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeDhcpOptionsOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDhcpOptions sets the DhcpOptions field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeDhcpOptionsOutput) SetDhcpOptions(v []*DhcpOptions) *DescribeDhcpOptionsOutput {
0000000000000000000000000000000000000000;;		s.DhcpOptions = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeEgressOnlyInternetGatewaysRequest
0000000000000000000000000000000000000000;;	type DescribeEgressOnlyInternetGatewaysInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more egress-only Internet gateway IDs.
0000000000000000000000000000000000000000;;		EgressOnlyInternetGatewayIds []*string `locationName:"EgressOnlyInternetGatewayId" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum number of results to return for the request in a single page.
0000000000000000000000000000000000000000;;		// The remaining results can be seen by sending another request with the returned
0000000000000000000000000000000000000000;;		// NextToken value. This value can be between 5 and 1000; if MaxResults is given
0000000000000000000000000000000000000000;;		// a value larger than 1000, only 1000 results are returned.
0000000000000000000000000000000000000000;;		MaxResults *int64 `type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token to retrieve the next page of results.
0000000000000000000000000000000000000000;;		NextToken *string `type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeEgressOnlyInternetGatewaysInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeEgressOnlyInternetGatewaysInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeEgressOnlyInternetGatewaysInput) SetDryRun(v bool) *DescribeEgressOnlyInternetGatewaysInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEgressOnlyInternetGatewayIds sets the EgressOnlyInternetGatewayIds field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeEgressOnlyInternetGatewaysInput) SetEgressOnlyInternetGatewayIds(v []*string) *DescribeEgressOnlyInternetGatewaysInput {
0000000000000000000000000000000000000000;;		s.EgressOnlyInternetGatewayIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxResults sets the MaxResults field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeEgressOnlyInternetGatewaysInput) SetMaxResults(v int64) *DescribeEgressOnlyInternetGatewaysInput {
0000000000000000000000000000000000000000;;		s.MaxResults = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeEgressOnlyInternetGatewaysInput) SetNextToken(v string) *DescribeEgressOnlyInternetGatewaysInput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeEgressOnlyInternetGatewaysResult
0000000000000000000000000000000000000000;;	type DescribeEgressOnlyInternetGatewaysOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the egress-only Internet gateways.
0000000000000000000000000000000000000000;;		EgressOnlyInternetGateways []*EgressOnlyInternetGateway `locationName:"egressOnlyInternetGatewaySet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token to use to retrieve the next page of results.
0000000000000000000000000000000000000000;;		NextToken *string `locationName:"nextToken" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeEgressOnlyInternetGatewaysOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeEgressOnlyInternetGatewaysOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEgressOnlyInternetGateways sets the EgressOnlyInternetGateways field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeEgressOnlyInternetGatewaysOutput) SetEgressOnlyInternetGateways(v []*EgressOnlyInternetGateway) *DescribeEgressOnlyInternetGatewaysOutput {
0000000000000000000000000000000000000000;;		s.EgressOnlyInternetGateways = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeEgressOnlyInternetGatewaysOutput) SetNextToken(v string) *DescribeEgressOnlyInternetGatewaysOutput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeExportTasks.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeExportTasksRequest
0000000000000000000000000000000000000000;;	type DescribeExportTasksInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more export task IDs.
0000000000000000000000000000000000000000;;		ExportTaskIds []*string `locationName:"exportTaskId" locationNameList:"ExportTaskId" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeExportTasksInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeExportTasksInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetExportTaskIds sets the ExportTaskIds field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeExportTasksInput) SetExportTaskIds(v []*string) *DescribeExportTasksInput {
0000000000000000000000000000000000000000;;		s.ExportTaskIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output for DescribeExportTasks.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeExportTasksResult
0000000000000000000000000000000000000000;;	type DescribeExportTasksOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the export tasks.
0000000000000000000000000000000000000000;;		ExportTasks []*ExportTask `locationName:"exportTaskSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeExportTasksOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeExportTasksOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetExportTasks sets the ExportTasks field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeExportTasksOutput) SetExportTasks(v []*ExportTask) *DescribeExportTasksOutput {
0000000000000000000000000000000000000000;;		s.ExportTasks = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeFlowLogs.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeFlowLogsRequest
0000000000000000000000000000000000000000;;	type DescribeFlowLogsInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more filters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * deliver-log-status - The status of the logs delivery (SUCCESS | FAILED).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * flow-log-id - The ID of the flow log.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * log-group-name - The name of the log group.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * resource-id - The ID of the VPC, subnet, or network interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * traffic-type - The type of traffic (ACCEPT | REJECT | ALL)
0000000000000000000000000000000000000000;;		Filter []*Filter `locationNameList:"Filter" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more flow log IDs.
0000000000000000000000000000000000000000;;		FlowLogIds []*string `locationName:"FlowLogId" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum number of results to return for the request in a single page.
0000000000000000000000000000000000000000;;		// The remaining results can be seen by sending another request with the returned
0000000000000000000000000000000000000000;;		// NextToken value. This value can be between 5 and 1000; if MaxResults is given
0000000000000000000000000000000000000000;;		// a value larger than 1000, only 1000 results are returned. You cannot specify
0000000000000000000000000000000000000000;;		// this parameter and the flow log IDs parameter in the same request.
0000000000000000000000000000000000000000;;		MaxResults *int64 `type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token to retrieve the next page of results.
0000000000000000000000000000000000000000;;		NextToken *string `type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeFlowLogsInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeFlowLogsInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFilter sets the Filter field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeFlowLogsInput) SetFilter(v []*Filter) *DescribeFlowLogsInput {
0000000000000000000000000000000000000000;;		s.Filter = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFlowLogIds sets the FlowLogIds field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeFlowLogsInput) SetFlowLogIds(v []*string) *DescribeFlowLogsInput {
0000000000000000000000000000000000000000;;		s.FlowLogIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxResults sets the MaxResults field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeFlowLogsInput) SetMaxResults(v int64) *DescribeFlowLogsInput {
0000000000000000000000000000000000000000;;		s.MaxResults = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeFlowLogsInput) SetNextToken(v string) *DescribeFlowLogsInput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeFlowLogs.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeFlowLogsResult
0000000000000000000000000000000000000000;;	type DescribeFlowLogsOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the flow logs.
0000000000000000000000000000000000000000;;		FlowLogs []*FlowLog `locationName:"flowLogSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token to use to retrieve the next page of results. This value is null
0000000000000000000000000000000000000000;;		// when there are no more results to return.
0000000000000000000000000000000000000000;;		NextToken *string `locationName:"nextToken" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeFlowLogsOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeFlowLogsOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFlowLogs sets the FlowLogs field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeFlowLogsOutput) SetFlowLogs(v []*FlowLog) *DescribeFlowLogsOutput {
0000000000000000000000000000000000000000;;		s.FlowLogs = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeFlowLogsOutput) SetNextToken(v string) *DescribeFlowLogsOutput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeHostReservationOfferingsRequest
0000000000000000000000000000000000000000;;	type DescribeHostReservationOfferingsInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more filters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * instance-family - The instance family of the offering (e.g., m4).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * payment-option - The payment option (No Upfront | Partial Upfront |
0000000000000000000000000000000000000000;;		//    All Upfront).
0000000000000000000000000000000000000000;;		Filter []*Filter `locationNameList:"Filter" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// This is the maximum duration of the reservation you'd like to purchase, specified
0000000000000000000000000000000000000000;;		// in seconds. Reservations are available in one-year and three-year terms.
0000000000000000000000000000000000000000;;		// The number of seconds specified must be the number of seconds in a year (365x24x60x60)
0000000000000000000000000000000000000000;;		// times one of the supported durations (1 or 3). For example, specify 94608000
0000000000000000000000000000000000000000;;		// for three years.
0000000000000000000000000000000000000000;;		MaxDuration *int64 `type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum number of results to return for the request in a single page.
0000000000000000000000000000000000000000;;		// The remaining results can be seen by sending another request with the returned
0000000000000000000000000000000000000000;;		// nextToken value. This value can be between 5 and 500; if maxResults is given
0000000000000000000000000000000000000000;;		// a larger value than 500, you will receive an error.
0000000000000000000000000000000000000000;;		MaxResults *int64 `type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// This is the minimum duration of the reservation you'd like to purchase, specified
0000000000000000000000000000000000000000;;		// in seconds. Reservations are available in one-year and three-year terms.
0000000000000000000000000000000000000000;;		// The number of seconds specified must be the number of seconds in a year (365x24x60x60)
0000000000000000000000000000000000000000;;		// times one of the supported durations (1 or 3). For example, specify 31536000
0000000000000000000000000000000000000000;;		// for one year.
0000000000000000000000000000000000000000;;		MinDuration *int64 `type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token to use to retrieve the next page of results.
0000000000000000000000000000000000000000;;		NextToken *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the reservation offering.
0000000000000000000000000000000000000000;;		OfferingId *string `type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeHostReservationOfferingsInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeHostReservationOfferingsInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFilter sets the Filter field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeHostReservationOfferingsInput) SetFilter(v []*Filter) *DescribeHostReservationOfferingsInput {
0000000000000000000000000000000000000000;;		s.Filter = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxDuration sets the MaxDuration field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeHostReservationOfferingsInput) SetMaxDuration(v int64) *DescribeHostReservationOfferingsInput {
0000000000000000000000000000000000000000;;		s.MaxDuration = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxResults sets the MaxResults field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeHostReservationOfferingsInput) SetMaxResults(v int64) *DescribeHostReservationOfferingsInput {
0000000000000000000000000000000000000000;;		s.MaxResults = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMinDuration sets the MinDuration field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeHostReservationOfferingsInput) SetMinDuration(v int64) *DescribeHostReservationOfferingsInput {
0000000000000000000000000000000000000000;;		s.MinDuration = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeHostReservationOfferingsInput) SetNextToken(v string) *DescribeHostReservationOfferingsInput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetOfferingId sets the OfferingId field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeHostReservationOfferingsInput) SetOfferingId(v string) *DescribeHostReservationOfferingsInput {
0000000000000000000000000000000000000000;;		s.OfferingId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeHostReservationOfferingsResult
0000000000000000000000000000000000000000;;	type DescribeHostReservationOfferingsOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token to use to retrieve the next page of results. This value is null
0000000000000000000000000000000000000000;;		// when there are no more results to return.
0000000000000000000000000000000000000000;;		NextToken *string `locationName:"nextToken" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the offerings.
0000000000000000000000000000000000000000;;		OfferingSet []*HostOffering `locationName:"offeringSet" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeHostReservationOfferingsOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeHostReservationOfferingsOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeHostReservationOfferingsOutput) SetNextToken(v string) *DescribeHostReservationOfferingsOutput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetOfferingSet sets the OfferingSet field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeHostReservationOfferingsOutput) SetOfferingSet(v []*HostOffering) *DescribeHostReservationOfferingsOutput {
0000000000000000000000000000000000000000;;		s.OfferingSet = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeHostReservationsRequest
0000000000000000000000000000000000000000;;	type DescribeHostReservationsInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more filters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * instance-family - The instance family (e.g., m4).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * payment-option - The payment option (No Upfront | Partial Upfront |
0000000000000000000000000000000000000000;;		//    All Upfront).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * state - The state of the reservation (payment-pending | payment-failed
0000000000000000000000000000000000000000;;		//    | active | retired).
0000000000000000000000000000000000000000;;		Filter []*Filter `locationNameList:"Filter" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more host reservation IDs.
0000000000000000000000000000000000000000;;		HostReservationIdSet []*string `locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum number of results to return for the request in a single page.
0000000000000000000000000000000000000000;;		// The remaining results can be seen by sending another request with the returned
0000000000000000000000000000000000000000;;		// nextToken value. This value can be between 5 and 500; if maxResults is given
0000000000000000000000000000000000000000;;		// a larger value than 500, you will receive an error.
0000000000000000000000000000000000000000;;		MaxResults *int64 `type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token to use to retrieve the next page of results.
0000000000000000000000000000000000000000;;		NextToken *string `type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeHostReservationsInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeHostReservationsInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFilter sets the Filter field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeHostReservationsInput) SetFilter(v []*Filter) *DescribeHostReservationsInput {
0000000000000000000000000000000000000000;;		s.Filter = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHostReservationIdSet sets the HostReservationIdSet field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeHostReservationsInput) SetHostReservationIdSet(v []*string) *DescribeHostReservationsInput {
0000000000000000000000000000000000000000;;		s.HostReservationIdSet = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxResults sets the MaxResults field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeHostReservationsInput) SetMaxResults(v int64) *DescribeHostReservationsInput {
0000000000000000000000000000000000000000;;		s.MaxResults = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeHostReservationsInput) SetNextToken(v string) *DescribeHostReservationsInput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeHostReservationsResult
0000000000000000000000000000000000000000;;	type DescribeHostReservationsOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Details about the reservation's configuration.
0000000000000000000000000000000000000000;;		HostReservationSet []*HostReservation `locationName:"hostReservationSet" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token to use to retrieve the next page of results. This value is null
0000000000000000000000000000000000000000;;		// when there are no more results to return.
0000000000000000000000000000000000000000;;		NextToken *string `locationName:"nextToken" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeHostReservationsOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeHostReservationsOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHostReservationSet sets the HostReservationSet field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeHostReservationsOutput) SetHostReservationSet(v []*HostReservation) *DescribeHostReservationsOutput {
0000000000000000000000000000000000000000;;		s.HostReservationSet = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeHostReservationsOutput) SetNextToken(v string) *DescribeHostReservationsOutput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeHosts.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeHostsRequest
0000000000000000000000000000000000000000;;	type DescribeHostsInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more filters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * instance-type - The instance type size that the Dedicated Host is configured
0000000000000000000000000000000000000000;;		//    to support.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * auto-placement - Whether auto-placement is enabled or disabled (on |
0000000000000000000000000000000000000000;;		//    off).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * host-reservation-id - The ID of the reservation assigned to this host.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * client-token - The idempotency token you provided when you launched
0000000000000000000000000000000000000000;;		//    the instance
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * state- The allocation state of the Dedicated Host (available | under-assessment
0000000000000000000000000000000000000000;;		//    | permanent-failure | released | released-permanent-failure).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * availability-zone - The Availability Zone of the host.
0000000000000000000000000000000000000000;;		Filter []*Filter `locationName:"filter" locationNameList:"Filter" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IDs of the Dedicated Hosts. The IDs are used for targeted instance launches.
0000000000000000000000000000000000000000;;		HostIds []*string `locationName:"hostId" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum number of results to return for the request in a single page.
0000000000000000000000000000000000000000;;		// The remaining results can be seen by sending another request with the returned
0000000000000000000000000000000000000000;;		// nextToken value. This value can be between 5 and 500; if maxResults is given
0000000000000000000000000000000000000000;;		// a larger value than 500, you will receive an error. You cannot specify this
0000000000000000000000000000000000000000;;		// parameter and the host IDs parameter in the same request.
0000000000000000000000000000000000000000;;		MaxResults *int64 `locationName:"maxResults" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token to retrieve the next page of results.
0000000000000000000000000000000000000000;;		NextToken *string `locationName:"nextToken" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeHostsInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeHostsInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFilter sets the Filter field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeHostsInput) SetFilter(v []*Filter) *DescribeHostsInput {
0000000000000000000000000000000000000000;;		s.Filter = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHostIds sets the HostIds field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeHostsInput) SetHostIds(v []*string) *DescribeHostsInput {
0000000000000000000000000000000000000000;;		s.HostIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxResults sets the MaxResults field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeHostsInput) SetMaxResults(v int64) *DescribeHostsInput {
0000000000000000000000000000000000000000;;		s.MaxResults = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeHostsInput) SetNextToken(v string) *DescribeHostsInput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeHosts.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeHostsResult
0000000000000000000000000000000000000000;;	type DescribeHostsOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the Dedicated Hosts.
0000000000000000000000000000000000000000;;		Hosts []*Host `locationName:"hostSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token to use to retrieve the next page of results. This value is null
0000000000000000000000000000000000000000;;		// when there are no more results to return.
0000000000000000000000000000000000000000;;		NextToken *string `locationName:"nextToken" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeHostsOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeHostsOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHosts sets the Hosts field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeHostsOutput) SetHosts(v []*Host) *DescribeHostsOutput {
0000000000000000000000000000000000000000;;		s.Hosts = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeHostsOutput) SetNextToken(v string) *DescribeHostsOutput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeIdFormat.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeIdFormatRequest
0000000000000000000000000000000000000000;;	type DescribeIdFormatInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The type of resource: instance | reservation | snapshot | volume
0000000000000000000000000000000000000000;;		Resource *string `type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeIdFormatInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeIdFormatInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetResource sets the Resource field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeIdFormatInput) SetResource(v string) *DescribeIdFormatInput {
0000000000000000000000000000000000000000;;		s.Resource = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeIdFormat.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeIdFormatResult
0000000000000000000000000000000000000000;;	type DescribeIdFormatOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the ID format for the resource.
0000000000000000000000000000000000000000;;		Statuses []*IdFormat `locationName:"statusSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeIdFormatOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeIdFormatOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStatuses sets the Statuses field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeIdFormatOutput) SetStatuses(v []*IdFormat) *DescribeIdFormatOutput {
0000000000000000000000000000000000000000;;		s.Statuses = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeIdentityIdFormat.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeIdentityIdFormatRequest
0000000000000000000000000000000000000000;;	type DescribeIdentityIdFormatInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ARN of the principal, which can be an IAM role, IAM user, or the root
0000000000000000000000000000000000000000;;		// user.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// PrincipalArn is a required field
0000000000000000000000000000000000000000;;		PrincipalArn *string `locationName:"principalArn" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The type of resource: instance | reservation | snapshot | volume
0000000000000000000000000000000000000000;;		Resource *string `locationName:"resource" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeIdentityIdFormatInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeIdentityIdFormatInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DescribeIdentityIdFormatInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DescribeIdentityIdFormatInput"}
0000000000000000000000000000000000000000;;		if s.PrincipalArn == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("PrincipalArn"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrincipalArn sets the PrincipalArn field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeIdentityIdFormatInput) SetPrincipalArn(v string) *DescribeIdentityIdFormatInput {
0000000000000000000000000000000000000000;;		s.PrincipalArn = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetResource sets the Resource field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeIdentityIdFormatInput) SetResource(v string) *DescribeIdentityIdFormatInput {
0000000000000000000000000000000000000000;;		s.Resource = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeIdentityIdFormat.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeIdentityIdFormatResult
0000000000000000000000000000000000000000;;	type DescribeIdentityIdFormatOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the ID format for the resources.
0000000000000000000000000000000000000000;;		Statuses []*IdFormat `locationName:"statusSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeIdentityIdFormatOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeIdentityIdFormatOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStatuses sets the Statuses field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeIdentityIdFormatOutput) SetStatuses(v []*IdFormat) *DescribeIdentityIdFormatOutput {
0000000000000000000000000000000000000000;;		s.Statuses = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeImageAttribute.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeImageAttributeRequest
0000000000000000000000000000000000000000;;	type DescribeImageAttributeInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The AMI attribute.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Note: Depending on your account privileges, the blockDeviceMapping attribute
0000000000000000000000000000000000000000;;		// may return a Client.AuthFailure error. If this happens, use DescribeImages
0000000000000000000000000000000000000000;;		// to get information about the block device mapping for the AMI.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Attribute is a required field
0000000000000000000000000000000000000000;;		Attribute *string `type:"string" required:"true" enum:"ImageAttributeName"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the AMI.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ImageId is a required field
0000000000000000000000000000000000000000;;		ImageId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeImageAttributeInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeImageAttributeInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DescribeImageAttributeInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DescribeImageAttributeInput"}
0000000000000000000000000000000000000000;;		if s.Attribute == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Attribute"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.ImageId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("ImageId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAttribute sets the Attribute field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeImageAttributeInput) SetAttribute(v string) *DescribeImageAttributeInput {
0000000000000000000000000000000000000000;;		s.Attribute = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeImageAttributeInput) SetDryRun(v bool) *DescribeImageAttributeInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetImageId sets the ImageId field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeImageAttributeInput) SetImageId(v string) *DescribeImageAttributeInput {
0000000000000000000000000000000000000000;;		s.ImageId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes an image attribute.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ImageAttribute
0000000000000000000000000000000000000000;;	type DescribeImageAttributeOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more block device mapping entries.
0000000000000000000000000000000000000000;;		BlockDeviceMappings []*BlockDeviceMapping `locationName:"blockDeviceMapping" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A description for the AMI.
0000000000000000000000000000000000000000;;		Description *AttributeValue `locationName:"description" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the AMI.
0000000000000000000000000000000000000000;;		ImageId *string `locationName:"imageId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The kernel ID.
0000000000000000000000000000000000000000;;		KernelId *AttributeValue `locationName:"kernel" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more launch permissions.
0000000000000000000000000000000000000000;;		LaunchPermissions []*LaunchPermission `locationName:"launchPermission" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more product codes.
0000000000000000000000000000000000000000;;		ProductCodes []*ProductCode `locationName:"productCodes" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The RAM disk ID.
0000000000000000000000000000000000000000;;		RamdiskId *AttributeValue `locationName:"ramdisk" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether enhanced networking with the Intel 82599 Virtual Function
0000000000000000000000000000000000000000;;		// interface is enabled.
0000000000000000000000000000000000000000;;		SriovNetSupport *AttributeValue `locationName:"sriovNetSupport" type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeImageAttributeOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeImageAttributeOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetBlockDeviceMappings sets the BlockDeviceMappings field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeImageAttributeOutput) SetBlockDeviceMappings(v []*BlockDeviceMapping) *DescribeImageAttributeOutput {
0000000000000000000000000000000000000000;;		s.BlockDeviceMappings = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDescription sets the Description field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeImageAttributeOutput) SetDescription(v *AttributeValue) *DescribeImageAttributeOutput {
0000000000000000000000000000000000000000;;		s.Description = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetImageId sets the ImageId field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeImageAttributeOutput) SetImageId(v string) *DescribeImageAttributeOutput {
0000000000000000000000000000000000000000;;		s.ImageId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetKernelId sets the KernelId field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeImageAttributeOutput) SetKernelId(v *AttributeValue) *DescribeImageAttributeOutput {
0000000000000000000000000000000000000000;;		s.KernelId = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetLaunchPermissions sets the LaunchPermissions field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeImageAttributeOutput) SetLaunchPermissions(v []*LaunchPermission) *DescribeImageAttributeOutput {
0000000000000000000000000000000000000000;;		s.LaunchPermissions = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetProductCodes sets the ProductCodes field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeImageAttributeOutput) SetProductCodes(v []*ProductCode) *DescribeImageAttributeOutput {
0000000000000000000000000000000000000000;;		s.ProductCodes = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRamdiskId sets the RamdiskId field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeImageAttributeOutput) SetRamdiskId(v *AttributeValue) *DescribeImageAttributeOutput {
0000000000000000000000000000000000000000;;		s.RamdiskId = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSriovNetSupport sets the SriovNetSupport field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeImageAttributeOutput) SetSriovNetSupport(v *AttributeValue) *DescribeImageAttributeOutput {
0000000000000000000000000000000000000000;;		s.SriovNetSupport = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeImages.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeImagesRequest
0000000000000000000000000000000000000000;;	type DescribeImagesInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Scopes the images by users with explicit launch permissions. Specify an AWS
0000000000000000000000000000000000000000;;		// account ID, self (the sender of the request), or all (public AMIs).
0000000000000000000000000000000000000000;;		ExecutableUsers []*string `locationName:"ExecutableBy" locationNameList:"ExecutableBy" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more filters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * architecture - The image architecture (i386 | x86_64).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * block-device-mapping.delete-on-termination - A Boolean value that indicates
0000000000000000000000000000000000000000;;		//    whether the Amazon EBS volume is deleted on instance termination.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * block-device-mapping.device-name - The device name for the EBS volume
0000000000000000000000000000000000000000;;		//    (for example, /dev/sdh).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * block-device-mapping.snapshot-id - The ID of the snapshot used for the
0000000000000000000000000000000000000000;;		//    EBS volume.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * block-device-mapping.volume-size - The volume size of the EBS volume,
0000000000000000000000000000000000000000;;		//    in GiB.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * block-device-mapping.volume-type - The volume type of the EBS volume
0000000000000000000000000000000000000000;;		//    (gp2 | io1 | st1 | sc1 | standard).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * description - The description of the image (provided during image creation).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * ena-support - A Boolean that indicates whether enhanced networking with
0000000000000000000000000000000000000000;;		//    ENA is enabled.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * hypervisor - The hypervisor type (ovm | xen).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * image-id - The ID of the image.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * image-type - The image type (machine | kernel | ramdisk).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * is-public - A Boolean that indicates whether the image is public.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * kernel-id - The kernel ID.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * manifest-location - The location of the image manifest.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * name - The name of the AMI (provided during image creation).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * owner-alias - String value from an Amazon-maintained list (amazon |
0000000000000000000000000000000000000000;;		//    aws-marketplace | microsoft) of snapshot owners. Not to be confused with
0000000000000000000000000000000000000000;;		//    the user-configured AWS account alias, which is set from the IAM console.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * owner-id - The AWS account ID of the image owner.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * platform - The platform. To only list Windows-based AMIs, use windows.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * product-code - The product code.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * product-code.type - The type of the product code (devpay | marketplace).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * ramdisk-id - The RAM disk ID.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * root-device-name - The name of the root device volume (for example,
0000000000000000000000000000000000000000;;		//    /dev/sda1).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * root-device-type - The type of the root device volume (ebs | instance-store).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * state - The state of the image (available | pending | failed).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * state-reason-code - The reason code for the state change.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * state-reason-message - The message for the state change.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag:key=value - The key/value combination of a tag assigned to the resource.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag-key - The key of a tag assigned to the resource. This filter is
0000000000000000000000000000000000000000;;		//    independent of the tag-value filter. For example, if you use both the
0000000000000000000000000000000000000000;;		//    filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources
0000000000000000000000000000000000000000;;		//    assigned both the tag key Purpose (regardless of what the tag's value
0000000000000000000000000000000000000000;;		//    is), and the tag value X (regardless of what the tag's key is). If you
0000000000000000000000000000000000000000;;		//    want to list only resources where Purpose is X, see the tag:key=value
0000000000000000000000000000000000000000;;		//    filter.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag-value - The value of a tag assigned to the resource. This filter
0000000000000000000000000000000000000000;;		//    is independent of the tag-key filter.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * virtualization-type - The virtualization type (paravirtual | hvm).
0000000000000000000000000000000000000000;;		Filters []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more image IDs.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: Describes all images available to you.
0000000000000000000000000000000000000000;;		ImageIds []*string `locationName:"ImageId" locationNameList:"ImageId" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Filters the images by the owner. Specify an AWS account ID, self (owner is
0000000000000000000000000000000000000000;;		// the sender of the request), or an AWS owner alias (valid values are amazon
0000000000000000000000000000000000000000;;		// | aws-marketplace | microsoft). Omitting this option returns all images for
0000000000000000000000000000000000000000;;		// which you have launch permissions, regardless of ownership.
0000000000000000000000000000000000000000;;		Owners []*string `locationName:"Owner" locationNameList:"Owner" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeImagesInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeImagesInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeImagesInput) SetDryRun(v bool) *DescribeImagesInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetExecutableUsers sets the ExecutableUsers field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeImagesInput) SetExecutableUsers(v []*string) *DescribeImagesInput {
0000000000000000000000000000000000000000;;		s.ExecutableUsers = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFilters sets the Filters field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeImagesInput) SetFilters(v []*Filter) *DescribeImagesInput {
0000000000000000000000000000000000000000;;		s.Filters = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetImageIds sets the ImageIds field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeImagesInput) SetImageIds(v []*string) *DescribeImagesInput {
0000000000000000000000000000000000000000;;		s.ImageIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetOwners sets the Owners field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeImagesInput) SetOwners(v []*string) *DescribeImagesInput {
0000000000000000000000000000000000000000;;		s.Owners = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeImages.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeImagesResult
0000000000000000000000000000000000000000;;	type DescribeImagesOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about one or more images.
0000000000000000000000000000000000000000;;		Images []*Image `locationName:"imagesSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeImagesOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeImagesOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetImages sets the Images field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeImagesOutput) SetImages(v []*Image) *DescribeImagesOutput {
0000000000000000000000000000000000000000;;		s.Images = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeImportImageTasks.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeImportImageTasksRequest
0000000000000000000000000000000000000000;;	type DescribeImportImageTasksInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Filter tasks using the task-state filter and one of the following values:
0000000000000000000000000000000000000000;;		// active, completed, deleting, deleted.
0000000000000000000000000000000000000000;;		Filters []*Filter `locationNameList:"Filter" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A list of import image task IDs.
0000000000000000000000000000000000000000;;		ImportTaskIds []*string `locationName:"ImportTaskId" locationNameList:"ImportTaskId" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum number of results to return in a single call. To retrieve the
0000000000000000000000000000000000000000;;		// remaining results, make another call with the returned NextToken value.
0000000000000000000000000000000000000000;;		MaxResults *int64 `type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A token that indicates the next page of results.
0000000000000000000000000000000000000000;;		NextToken *string `type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeImportImageTasksInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeImportImageTasksInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeImportImageTasksInput) SetDryRun(v bool) *DescribeImportImageTasksInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFilters sets the Filters field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeImportImageTasksInput) SetFilters(v []*Filter) *DescribeImportImageTasksInput {
0000000000000000000000000000000000000000;;		s.Filters = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetImportTaskIds sets the ImportTaskIds field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeImportImageTasksInput) SetImportTaskIds(v []*string) *DescribeImportImageTasksInput {
0000000000000000000000000000000000000000;;		s.ImportTaskIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxResults sets the MaxResults field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeImportImageTasksInput) SetMaxResults(v int64) *DescribeImportImageTasksInput {
0000000000000000000000000000000000000000;;		s.MaxResults = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeImportImageTasksInput) SetNextToken(v string) *DescribeImportImageTasksInput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output for DescribeImportImageTasks.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeImportImageTasksResult
0000000000000000000000000000000000000000;;	type DescribeImportImageTasksOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A list of zero or more import image tasks that are currently active or were
0000000000000000000000000000000000000000;;		// completed or canceled in the previous 7 days.
0000000000000000000000000000000000000000;;		ImportImageTasks []*ImportImageTask `locationName:"importImageTaskSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token to use to get the next page of results. This value is null when
0000000000000000000000000000000000000000;;		// there are no more results to return.
0000000000000000000000000000000000000000;;		NextToken *string `locationName:"nextToken" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeImportImageTasksOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeImportImageTasksOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetImportImageTasks sets the ImportImageTasks field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeImportImageTasksOutput) SetImportImageTasks(v []*ImportImageTask) *DescribeImportImageTasksOutput {
0000000000000000000000000000000000000000;;		s.ImportImageTasks = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeImportImageTasksOutput) SetNextToken(v string) *DescribeImportImageTasksOutput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeImportSnapshotTasks.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeImportSnapshotTasksRequest
0000000000000000000000000000000000000000;;	type DescribeImportSnapshotTasksInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more filters.
0000000000000000000000000000000000000000;;		Filters []*Filter `locationNameList:"Filter" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A list of import snapshot task IDs.
0000000000000000000000000000000000000000;;		ImportTaskIds []*string `locationName:"ImportTaskId" locationNameList:"ImportTaskId" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum number of results to return in a single call. To retrieve the
0000000000000000000000000000000000000000;;		// remaining results, make another call with the returned NextToken value.
0000000000000000000000000000000000000000;;		MaxResults *int64 `type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A token that indicates the next page of results.
0000000000000000000000000000000000000000;;		NextToken *string `type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeImportSnapshotTasksInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeImportSnapshotTasksInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeImportSnapshotTasksInput) SetDryRun(v bool) *DescribeImportSnapshotTasksInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFilters sets the Filters field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeImportSnapshotTasksInput) SetFilters(v []*Filter) *DescribeImportSnapshotTasksInput {
0000000000000000000000000000000000000000;;		s.Filters = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetImportTaskIds sets the ImportTaskIds field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeImportSnapshotTasksInput) SetImportTaskIds(v []*string) *DescribeImportSnapshotTasksInput {
0000000000000000000000000000000000000000;;		s.ImportTaskIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxResults sets the MaxResults field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeImportSnapshotTasksInput) SetMaxResults(v int64) *DescribeImportSnapshotTasksInput {
0000000000000000000000000000000000000000;;		s.MaxResults = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeImportSnapshotTasksInput) SetNextToken(v string) *DescribeImportSnapshotTasksInput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output for DescribeImportSnapshotTasks.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeImportSnapshotTasksResult
0000000000000000000000000000000000000000;;	type DescribeImportSnapshotTasksOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A list of zero or more import snapshot tasks that are currently active or
0000000000000000000000000000000000000000;;		// were completed or canceled in the previous 7 days.
0000000000000000000000000000000000000000;;		ImportSnapshotTasks []*ImportSnapshotTask `locationName:"importSnapshotTaskSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token to use to get the next page of results. This value is null when
0000000000000000000000000000000000000000;;		// there are no more results to return.
0000000000000000000000000000000000000000;;		NextToken *string `locationName:"nextToken" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeImportSnapshotTasksOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeImportSnapshotTasksOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetImportSnapshotTasks sets the ImportSnapshotTasks field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeImportSnapshotTasksOutput) SetImportSnapshotTasks(v []*ImportSnapshotTask) *DescribeImportSnapshotTasksOutput {
0000000000000000000000000000000000000000;;		s.ImportSnapshotTasks = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeImportSnapshotTasksOutput) SetNextToken(v string) *DescribeImportSnapshotTasksOutput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeInstanceAttribute.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeInstanceAttributeRequest
0000000000000000000000000000000000000000;;	type DescribeInstanceAttributeInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The instance attribute.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Note: The enaSupport attribute is not supported at this time.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Attribute is a required field
0000000000000000000000000000000000000000;;		Attribute *string `locationName:"attribute" type:"string" required:"true" enum:"InstanceAttributeName"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// InstanceId is a required field
0000000000000000000000000000000000000000;;		InstanceId *string `locationName:"instanceId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeInstanceAttributeInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeInstanceAttributeInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DescribeInstanceAttributeInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DescribeInstanceAttributeInput"}
0000000000000000000000000000000000000000;;		if s.Attribute == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Attribute"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.InstanceId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("InstanceId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAttribute sets the Attribute field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeInstanceAttributeInput) SetAttribute(v string) *DescribeInstanceAttributeInput {
0000000000000000000000000000000000000000;;		s.Attribute = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeInstanceAttributeInput) SetDryRun(v bool) *DescribeInstanceAttributeInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceId sets the InstanceId field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeInstanceAttributeInput) SetInstanceId(v string) *DescribeInstanceAttributeInput {
0000000000000000000000000000000000000000;;		s.InstanceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes an instance attribute.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/InstanceAttribute
0000000000000000000000000000000000000000;;	type DescribeInstanceAttributeOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The block device mapping of the instance.
0000000000000000000000000000000000000000;;		BlockDeviceMappings []*InstanceBlockDeviceMapping `locationName:"blockDeviceMapping" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If the value is true, you can't terminate the instance through the Amazon
0000000000000000000000000000000000000000;;		// EC2 console, CLI, or API; otherwise, you can.
0000000000000000000000000000000000000000;;		DisableApiTermination *AttributeBooleanValue `locationName:"disableApiTermination" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether the instance is optimized for EBS I/O.
0000000000000000000000000000000000000000;;		EbsOptimized *AttributeBooleanValue `locationName:"ebsOptimized" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether enhanced networking with ENA is enabled.
0000000000000000000000000000000000000000;;		EnaSupport *AttributeBooleanValue `locationName:"enaSupport" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The security groups associated with the instance.
0000000000000000000000000000000000000000;;		Groups []*GroupIdentifier `locationName:"groupSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the instance.
0000000000000000000000000000000000000000;;		InstanceId *string `locationName:"instanceId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether an instance stops or terminates when you initiate shutdown
0000000000000000000000000000000000000000;;		// from the instance (using the operating system command for system shutdown).
0000000000000000000000000000000000000000;;		InstanceInitiatedShutdownBehavior *AttributeValue `locationName:"instanceInitiatedShutdownBehavior" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The instance type.
0000000000000000000000000000000000000000;;		InstanceType *AttributeValue `locationName:"instanceType" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The kernel ID.
0000000000000000000000000000000000000000;;		KernelId *AttributeValue `locationName:"kernel" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A list of product codes.
0000000000000000000000000000000000000000;;		ProductCodes []*ProductCode `locationName:"productCodes" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The RAM disk ID.
0000000000000000000000000000000000000000;;		RamdiskId *AttributeValue `locationName:"ramdisk" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the root device (for example, /dev/sda1 or /dev/xvda).
0000000000000000000000000000000000000000;;		RootDeviceName *AttributeValue `locationName:"rootDeviceName" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether source/destination checking is enabled. A value of true
0000000000000000000000000000000000000000;;		// means checking is enabled, and false means checking is disabled. This value
0000000000000000000000000000000000000000;;		// must be false for a NAT instance to perform NAT.
0000000000000000000000000000000000000000;;		SourceDestCheck *AttributeBooleanValue `locationName:"sourceDestCheck" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether enhanced networking with the Intel 82599 Virtual Function
0000000000000000000000000000000000000000;;		// interface is enabled.
0000000000000000000000000000000000000000;;		SriovNetSupport *AttributeValue `locationName:"sriovNetSupport" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The user data.
0000000000000000000000000000000000000000;;		UserData *AttributeValue `locationName:"userData" type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeInstanceAttributeOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeInstanceAttributeOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetBlockDeviceMappings sets the BlockDeviceMappings field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeInstanceAttributeOutput) SetBlockDeviceMappings(v []*InstanceBlockDeviceMapping) *DescribeInstanceAttributeOutput {
0000000000000000000000000000000000000000;;		s.BlockDeviceMappings = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDisableApiTermination sets the DisableApiTermination field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeInstanceAttributeOutput) SetDisableApiTermination(v *AttributeBooleanValue) *DescribeInstanceAttributeOutput {
0000000000000000000000000000000000000000;;		s.DisableApiTermination = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEbsOptimized sets the EbsOptimized field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeInstanceAttributeOutput) SetEbsOptimized(v *AttributeBooleanValue) *DescribeInstanceAttributeOutput {
0000000000000000000000000000000000000000;;		s.EbsOptimized = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEnaSupport sets the EnaSupport field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeInstanceAttributeOutput) SetEnaSupport(v *AttributeBooleanValue) *DescribeInstanceAttributeOutput {
0000000000000000000000000000000000000000;;		s.EnaSupport = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroups sets the Groups field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeInstanceAttributeOutput) SetGroups(v []*GroupIdentifier) *DescribeInstanceAttributeOutput {
0000000000000000000000000000000000000000;;		s.Groups = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceId sets the InstanceId field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeInstanceAttributeOutput) SetInstanceId(v string) *DescribeInstanceAttributeOutput {
0000000000000000000000000000000000000000;;		s.InstanceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceInitiatedShutdownBehavior sets the InstanceInitiatedShutdownBehavior field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeInstanceAttributeOutput) SetInstanceInitiatedShutdownBehavior(v *AttributeValue) *DescribeInstanceAttributeOutput {
0000000000000000000000000000000000000000;;		s.InstanceInitiatedShutdownBehavior = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceType sets the InstanceType field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeInstanceAttributeOutput) SetInstanceType(v *AttributeValue) *DescribeInstanceAttributeOutput {
0000000000000000000000000000000000000000;;		s.InstanceType = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetKernelId sets the KernelId field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeInstanceAttributeOutput) SetKernelId(v *AttributeValue) *DescribeInstanceAttributeOutput {
0000000000000000000000000000000000000000;;		s.KernelId = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetProductCodes sets the ProductCodes field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeInstanceAttributeOutput) SetProductCodes(v []*ProductCode) *DescribeInstanceAttributeOutput {
0000000000000000000000000000000000000000;;		s.ProductCodes = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRamdiskId sets the RamdiskId field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeInstanceAttributeOutput) SetRamdiskId(v *AttributeValue) *DescribeInstanceAttributeOutput {
0000000000000000000000000000000000000000;;		s.RamdiskId = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRootDeviceName sets the RootDeviceName field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeInstanceAttributeOutput) SetRootDeviceName(v *AttributeValue) *DescribeInstanceAttributeOutput {
0000000000000000000000000000000000000000;;		s.RootDeviceName = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSourceDestCheck sets the SourceDestCheck field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeInstanceAttributeOutput) SetSourceDestCheck(v *AttributeBooleanValue) *DescribeInstanceAttributeOutput {
0000000000000000000000000000000000000000;;		s.SourceDestCheck = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSriovNetSupport sets the SriovNetSupport field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeInstanceAttributeOutput) SetSriovNetSupport(v *AttributeValue) *DescribeInstanceAttributeOutput {
0000000000000000000000000000000000000000;;		s.SriovNetSupport = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUserData sets the UserData field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeInstanceAttributeOutput) SetUserData(v *AttributeValue) *DescribeInstanceAttributeOutput {
0000000000000000000000000000000000000000;;		s.UserData = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeInstanceStatus.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeInstanceStatusRequest
0000000000000000000000000000000000000000;;	type DescribeInstanceStatusInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more filters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * availability-zone - The Availability Zone of the instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * event.code - The code for the scheduled event (instance-reboot | system-reboot
0000000000000000000000000000000000000000;;		//    | system-maintenance | instance-retirement | instance-stop).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * event.description - A description of the event.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * event.not-after - The latest end time for the scheduled event (for example,
0000000000000000000000000000000000000000;;		//    2014-09-15T17:15:20.000Z).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * event.not-before - The earliest start time for the scheduled event (for
0000000000000000000000000000000000000000;;		//    example, 2014-09-15T17:15:20.000Z).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * instance-state-code - The code for the instance state, as a 16-bit unsigned
0000000000000000000000000000000000000000;;		//    integer. The high byte is an opaque internal value and should be ignored.
0000000000000000000000000000000000000000;;		//    The low byte is set based on the state represented. The valid values are
0000000000000000000000000000000000000000;;		//    0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping),
0000000000000000000000000000000000000000;;		//    and 80 (stopped).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * instance-state-name - The state of the instance (pending | running |
0000000000000000000000000000000000000000;;		//    shutting-down | terminated | stopping | stopped).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * instance-status.reachability - Filters on instance status where the
0000000000000000000000000000000000000000;;		//    name is reachability (passed | failed | initializing | insufficient-data).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * instance-status.status - The status of the instance (ok | impaired |
0000000000000000000000000000000000000000;;		//    initializing | insufficient-data | not-applicable).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * system-status.reachability - Filters on system status where the name
0000000000000000000000000000000000000000;;		//    is reachability (passed | failed | initializing | insufficient-data).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * system-status.status - The system status of the instance (ok | impaired
0000000000000000000000000000000000000000;;		//    | initializing | insufficient-data | not-applicable).
0000000000000000000000000000000000000000;;		Filters []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// When true, includes the health status for all instances. When false, includes
0000000000000000000000000000000000000000;;		// the health status for running instances only.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: false
0000000000000000000000000000000000000000;;		IncludeAllInstances *bool `locationName:"includeAllInstances" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more instance IDs.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: Describes all your instances.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Constraints: Maximum 100 explicitly specified instance IDs.
0000000000000000000000000000000000000000;;		InstanceIds []*string `locationName:"InstanceId" locationNameList:"InstanceId" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum number of results to return in a single call. To retrieve the
0000000000000000000000000000000000000000;;		// remaining results, make another call with the returned NextToken value. This
0000000000000000000000000000000000000000;;		// value can be between 5 and 1000. You cannot specify this parameter and the
0000000000000000000000000000000000000000;;		// instance IDs parameter in the same call.
0000000000000000000000000000000000000000;;		MaxResults *int64 `type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token to retrieve the next page of results.
0000000000000000000000000000000000000000;;		NextToken *string `type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeInstanceStatusInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeInstanceStatusInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeInstanceStatusInput) SetDryRun(v bool) *DescribeInstanceStatusInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFilters sets the Filters field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeInstanceStatusInput) SetFilters(v []*Filter) *DescribeInstanceStatusInput {
0000000000000000000000000000000000000000;;		s.Filters = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIncludeAllInstances sets the IncludeAllInstances field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeInstanceStatusInput) SetIncludeAllInstances(v bool) *DescribeInstanceStatusInput {
0000000000000000000000000000000000000000;;		s.IncludeAllInstances = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceIds sets the InstanceIds field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeInstanceStatusInput) SetInstanceIds(v []*string) *DescribeInstanceStatusInput {
0000000000000000000000000000000000000000;;		s.InstanceIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxResults sets the MaxResults field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeInstanceStatusInput) SetMaxResults(v int64) *DescribeInstanceStatusInput {
0000000000000000000000000000000000000000;;		s.MaxResults = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeInstanceStatusInput) SetNextToken(v string) *DescribeInstanceStatusInput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeInstanceStatus.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeInstanceStatusResult
0000000000000000000000000000000000000000;;	type DescribeInstanceStatusOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more instance status descriptions.
0000000000000000000000000000000000000000;;		InstanceStatuses []*InstanceStatus `locationName:"instanceStatusSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token to use to retrieve the next page of results. This value is null
0000000000000000000000000000000000000000;;		// when there are no more results to return.
0000000000000000000000000000000000000000;;		NextToken *string `locationName:"nextToken" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeInstanceStatusOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeInstanceStatusOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceStatuses sets the InstanceStatuses field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeInstanceStatusOutput) SetInstanceStatuses(v []*InstanceStatus) *DescribeInstanceStatusOutput {
0000000000000000000000000000000000000000;;		s.InstanceStatuses = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeInstanceStatusOutput) SetNextToken(v string) *DescribeInstanceStatusOutput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeInstances.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeInstancesRequest
0000000000000000000000000000000000000000;;	type DescribeInstancesInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more filters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * affinity - The affinity setting for an instance running on a Dedicated
0000000000000000000000000000000000000000;;		//    Host (default | host).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * architecture - The instance architecture (i386 | x86_64).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * association.public-ip - The address of the Elastic IP address (IPv4)
0000000000000000000000000000000000000000;;		//    bound to the network interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * association.ip-owner-id - The owner of the Elastic IP address (IPv4)
0000000000000000000000000000000000000000;;		//    associated with the network interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * association.allocation-id - The allocation ID returned when you allocated
0000000000000000000000000000000000000000;;		//    the Elastic IP address (IPv4) for your network interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * association.association-id - The association ID returned when the network
0000000000000000000000000000000000000000;;		//    interface was associated with an IPv4 address.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * availability-zone - The Availability Zone of the instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * block-device-mapping.attach-time - The attach time for an EBS volume
0000000000000000000000000000000000000000;;		//    mapped to the instance, for example, 2010-09-15T17:15:20.000Z.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * block-device-mapping.delete-on-termination - A Boolean that indicates
0000000000000000000000000000000000000000;;		//    whether the EBS volume is deleted on instance termination.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * block-device-mapping.device-name - The device name for the EBS volume
0000000000000000000000000000000000000000;;		//    (for example, /dev/sdh or xvdh).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * block-device-mapping.status - The status for the EBS volume (attaching
0000000000000000000000000000000000000000;;		//    | attached | detaching | detached).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * block-device-mapping.volume-id - The volume ID of the EBS volume.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * client-token - The idempotency token you provided when you launched
0000000000000000000000000000000000000000;;		//    the instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * dns-name - The public DNS name of the instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * group-id - The ID of the security group for the instance. EC2-Classic
0000000000000000000000000000000000000000;;		//    only.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * group-name - The name of the security group for the instance. EC2-Classic
0000000000000000000000000000000000000000;;		//    only.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * host-id - The ID of the Dedicated Host on which the instance is running,
0000000000000000000000000000000000000000;;		//    if applicable.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * hypervisor - The hypervisor type of the instance (ovm | xen).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * iam-instance-profile.arn - The instance profile associated with the
0000000000000000000000000000000000000000;;		//    instance. Specified as an ARN.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * image-id - The ID of the image used to launch the instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * instance-id - The ID of the instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * instance-lifecycle - Indicates whether this is a Spot Instance or a
0000000000000000000000000000000000000000;;		//    Scheduled Instance (spot | scheduled).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * instance-state-code - The state of the instance, as a 16-bit unsigned
0000000000000000000000000000000000000000;;		//    integer. The high byte is an opaque internal value and should be ignored.
0000000000000000000000000000000000000000;;		//    The low byte is set based on the state represented. The valid values are:
0000000000000000000000000000000000000000;;		//    0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping),
0000000000000000000000000000000000000000;;		//    and 80 (stopped).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * instance-state-name - The state of the instance (pending | running |
0000000000000000000000000000000000000000;;		//    shutting-down | terminated | stopping | stopped).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * instance-type - The type of instance (for example, t2.micro).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * instance.group-id - The ID of the security group for the instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * instance.group-name - The name of the security group for the instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * ip-address - The public IPv4 address of the instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * kernel-id - The kernel ID.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * key-name - The name of the key pair used when the instance was launched.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * launch-index - When launching multiple instances, this is the index
0000000000000000000000000000000000000000;;		//    for the instance in the launch group (for example, 0, 1, 2, and so on).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * launch-time - The time when the instance was launched.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * monitoring-state - Indicates whether detailed monitoring is enabled
0000000000000000000000000000000000000000;;		//    (disabled | enabled).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * network-interface.addresses.private-ip-address - The private IPv4 address
0000000000000000000000000000000000000000;;		//    associated with the network interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * network-interface.addresses.primary - Specifies whether the IPv4 address
0000000000000000000000000000000000000000;;		//    of the network interface is the primary private IPv4 address.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * network-interface.addresses.association.public-ip - The ID of the association
0000000000000000000000000000000000000000;;		//    of an Elastic IP address (IPv4) with a network interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * network-interface.addresses.association.ip-owner-id - The owner ID of
0000000000000000000000000000000000000000;;		//    the private IPv4 address associated with the network interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * network-interface.attachment.attachment-id - The ID of the interface
0000000000000000000000000000000000000000;;		//    attachment.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * network-interface.attachment.instance-id - The ID of the instance to
0000000000000000000000000000000000000000;;		//    which the network interface is attached.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * network-interface.attachment.instance-owner-id - The owner ID of the
0000000000000000000000000000000000000000;;		//    instance to which the network interface is attached.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * network-interface.attachment.device-index - The device index to which
0000000000000000000000000000000000000000;;		//    the network interface is attached.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * network-interface.attachment.status - The status of the attachment (attaching
0000000000000000000000000000000000000000;;		//    | attached | detaching | detached).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * network-interface.attachment.attach-time - The time that the network
0000000000000000000000000000000000000000;;		//    interface was attached to an instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * network-interface.attachment.delete-on-termination - Specifies whether
0000000000000000000000000000000000000000;;		//    the attachment is deleted when an instance is terminated.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * network-interface.availability-zone - The Availability Zone for the
0000000000000000000000000000000000000000;;		//    network interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * network-interface.description - The description of the network interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * network-interface.group-id - The ID of a security group associated with
0000000000000000000000000000000000000000;;		//    the network interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * network-interface.group-name - The name of a security group associated
0000000000000000000000000000000000000000;;		//    with the network interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * network-interface.ipv6-addresses.ipv6-address - The IPv6 address associated
0000000000000000000000000000000000000000;;		//    with the network interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * network-interface.mac-address - The MAC address of the network interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * network-interface.network-interface-id - The ID of the network interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * network-interface.owner-id - The ID of the owner of the network interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * network-interface.private-dns-name - The private DNS name of the network
0000000000000000000000000000000000000000;;		//    interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * network-interface.requester-id - The requester ID for the network interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * network-interface.requester-managed - Indicates whether the network
0000000000000000000000000000000000000000;;		//    interface is being managed by AWS.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * network-interface.status - The status of the network interface (available)
0000000000000000000000000000000000000000;;		//    | in-use).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * network-interface.source-dest-check - Whether the network interface
0000000000000000000000000000000000000000;;		//    performs source/destination checking. A value of true means checking is
0000000000000000000000000000000000000000;;		//    enabled, and false means checking is disabled. The value must be false
0000000000000000000000000000000000000000;;		//    for the network interface to perform network address translation (NAT)
0000000000000000000000000000000000000000;;		//    in your VPC.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * network-interface.subnet-id - The ID of the subnet for the network interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * network-interface.vpc-id - The ID of the VPC for the network interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * owner-id - The AWS account ID of the instance owner.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * placement-group-name - The name of the placement group for the instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * platform - The platform. Use windows if you have Windows instances;
0000000000000000000000000000000000000000;;		//    otherwise, leave blank.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * private-dns-name - The private IPv4 DNS name of the instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * private-ip-address - The private IPv4 address of the instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * product-code - The product code associated with the AMI used to launch
0000000000000000000000000000000000000000;;		//    the instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * product-code.type - The type of product code (devpay | marketplace).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * ramdisk-id - The RAM disk ID.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * reason - The reason for the current state of the instance (for example,
0000000000000000000000000000000000000000;;		//    shows "User Initiated [date]" when you stop or terminate the instance).
0000000000000000000000000000000000000000;;		//    Similar to the state-reason-code filter.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * requester-id - The ID of the entity that launched the instance on your
0000000000000000000000000000000000000000;;		//    behalf (for example, AWS Management Console, Auto Scaling, and so on).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * reservation-id - The ID of the instance's reservation. A reservation
0000000000000000000000000000000000000000;;		//    ID is created any time you launch an instance. A reservation ID has a
0000000000000000000000000000000000000000;;		//    one-to-one relationship with an instance launch request, but can be associated
0000000000000000000000000000000000000000;;		//    with more than one instance if you launch multiple instances using the
0000000000000000000000000000000000000000;;		//    same launch request. For example, if you launch one instance, you'll get
0000000000000000000000000000000000000000;;		//    one reservation ID. If you launch ten instances using the same launch
0000000000000000000000000000000000000000;;		//    request, you'll also get one reservation ID.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * root-device-name - The name of the root device for the instance (for
0000000000000000000000000000000000000000;;		//    example, /dev/sda1 or /dev/xvda).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * root-device-type - The type of root device that the instance uses (ebs
0000000000000000000000000000000000000000;;		//    | instance-store).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * source-dest-check - Indicates whether the instance performs source/destination
0000000000000000000000000000000000000000;;		//    checking. A value of true means that checking is enabled, and false means
0000000000000000000000000000000000000000;;		//    checking is disabled. The value must be false for the instance to perform
0000000000000000000000000000000000000000;;		//    network address translation (NAT) in your VPC.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * spot-instance-request-id - The ID of the Spot instance request.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * state-reason-code - The reason code for the state change.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * state-reason-message - A message that describes the state change.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * subnet-id - The ID of the subnet for the instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag:key=value - The key/value combination of a tag assigned to the resource,
0000000000000000000000000000000000000000;;		//    where tag:key is the tag's key.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag-key - The key of a tag assigned to the resource. This filter is
0000000000000000000000000000000000000000;;		//    independent of the tag-value filter. For example, if you use both the
0000000000000000000000000000000000000000;;		//    filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources
0000000000000000000000000000000000000000;;		//    assigned both the tag key Purpose (regardless of what the tag's value
0000000000000000000000000000000000000000;;		//    is), and the tag value X (regardless of what the tag's key is). If you
0000000000000000000000000000000000000000;;		//    want to list only resources where Purpose is X, see the tag:key=value
0000000000000000000000000000000000000000;;		//    filter.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag-value - The value of a tag assigned to the resource. This filter
0000000000000000000000000000000000000000;;		//    is independent of the tag-key filter.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tenancy - The tenancy of an instance (dedicated | default | host).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * virtualization-type - The virtualization type of the instance (paravirtual
0000000000000000000000000000000000000000;;		//    | hvm).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * vpc-id - The ID of the VPC that the instance is running in.
0000000000000000000000000000000000000000;;		Filters []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more instance IDs.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: Describes all your instances.
0000000000000000000000000000000000000000;;		InstanceIds []*string `locationName:"InstanceId" locationNameList:"InstanceId" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum number of results to return in a single call. To retrieve the
0000000000000000000000000000000000000000;;		// remaining results, make another call with the returned NextToken value. This
0000000000000000000000000000000000000000;;		// value can be between 5 and 1000. You cannot specify this parameter and the
0000000000000000000000000000000000000000;;		// instance IDs parameter or tag filters in the same call.
0000000000000000000000000000000000000000;;		MaxResults *int64 `locationName:"maxResults" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token to request the next page of results.
0000000000000000000000000000000000000000;;		NextToken *string `locationName:"nextToken" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeInstancesInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeInstancesInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeInstancesInput) SetDryRun(v bool) *DescribeInstancesInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFilters sets the Filters field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeInstancesInput) SetFilters(v []*Filter) *DescribeInstancesInput {
0000000000000000000000000000000000000000;;		s.Filters = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceIds sets the InstanceIds field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeInstancesInput) SetInstanceIds(v []*string) *DescribeInstancesInput {
0000000000000000000000000000000000000000;;		s.InstanceIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxResults sets the MaxResults field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeInstancesInput) SetMaxResults(v int64) *DescribeInstancesInput {
0000000000000000000000000000000000000000;;		s.MaxResults = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeInstancesInput) SetNextToken(v string) *DescribeInstancesInput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeInstances.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeInstancesResult
0000000000000000000000000000000000000000;;	type DescribeInstancesOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token to use to retrieve the next page of results. This value is null
0000000000000000000000000000000000000000;;		// when there are no more results to return.
0000000000000000000000000000000000000000;;		NextToken *string `locationName:"nextToken" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Zero or more reservations.
0000000000000000000000000000000000000000;;		Reservations []*Reservation `locationName:"reservationSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeInstancesOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeInstancesOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeInstancesOutput) SetNextToken(v string) *DescribeInstancesOutput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReservations sets the Reservations field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeInstancesOutput) SetReservations(v []*Reservation) *DescribeInstancesOutput {
0000000000000000000000000000000000000000;;		s.Reservations = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeInternetGateways.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeInternetGatewaysRequest
0000000000000000000000000000000000000000;;	type DescribeInternetGatewaysInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more filters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * attachment.state - The current state of the attachment between the gateway
0000000000000000000000000000000000000000;;		//    and the VPC (available). Present only if a VPC is attached.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * attachment.vpc-id - The ID of an attached VPC.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * internet-gateway-id - The ID of the Internet gateway.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag:key=value - The key/value combination of a tag assigned to the resource.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag-key - The key of a tag assigned to the resource. This filter is
0000000000000000000000000000000000000000;;		//    independent of the tag-value filter. For example, if you use both the
0000000000000000000000000000000000000000;;		//    filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources
0000000000000000000000000000000000000000;;		//    assigned both the tag key Purpose (regardless of what the tag's value
0000000000000000000000000000000000000000;;		//    is), and the tag value X (regardless of what the tag's key is). If you
0000000000000000000000000000000000000000;;		//    want to list only resources where Purpose is X, see the tag:key=value
0000000000000000000000000000000000000000;;		//    filter.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag-value - The value of a tag assigned to the resource. This filter
0000000000000000000000000000000000000000;;		//    is independent of the tag-key filter.
0000000000000000000000000000000000000000;;		Filters []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more Internet gateway IDs.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: Describes all your Internet gateways.
0000000000000000000000000000000000000000;;		InternetGatewayIds []*string `locationName:"internetGatewayId" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeInternetGatewaysInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeInternetGatewaysInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeInternetGatewaysInput) SetDryRun(v bool) *DescribeInternetGatewaysInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFilters sets the Filters field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeInternetGatewaysInput) SetFilters(v []*Filter) *DescribeInternetGatewaysInput {
0000000000000000000000000000000000000000;;		s.Filters = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInternetGatewayIds sets the InternetGatewayIds field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeInternetGatewaysInput) SetInternetGatewayIds(v []*string) *DescribeInternetGatewaysInput {
0000000000000000000000000000000000000000;;		s.InternetGatewayIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeInternetGateways.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeInternetGatewaysResult
0000000000000000000000000000000000000000;;	type DescribeInternetGatewaysOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about one or more Internet gateways.
0000000000000000000000000000000000000000;;		InternetGateways []*InternetGateway `locationName:"internetGatewaySet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeInternetGatewaysOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeInternetGatewaysOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInternetGateways sets the InternetGateways field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeInternetGatewaysOutput) SetInternetGateways(v []*InternetGateway) *DescribeInternetGatewaysOutput {
0000000000000000000000000000000000000000;;		s.InternetGateways = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeKeyPairs.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeKeyPairsRequest
0000000000000000000000000000000000000000;;	type DescribeKeyPairsInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more filters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * fingerprint - The fingerprint of the key pair.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * key-name - The name of the key pair.
0000000000000000000000000000000000000000;;		Filters []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more key pair names.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: Describes all your key pairs.
0000000000000000000000000000000000000000;;		KeyNames []*string `locationName:"KeyName" locationNameList:"KeyName" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeKeyPairsInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeKeyPairsInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeKeyPairsInput) SetDryRun(v bool) *DescribeKeyPairsInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFilters sets the Filters field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeKeyPairsInput) SetFilters(v []*Filter) *DescribeKeyPairsInput {
0000000000000000000000000000000000000000;;		s.Filters = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetKeyNames sets the KeyNames field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeKeyPairsInput) SetKeyNames(v []*string) *DescribeKeyPairsInput {
0000000000000000000000000000000000000000;;		s.KeyNames = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeKeyPairs.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeKeyPairsResult
0000000000000000000000000000000000000000;;	type DescribeKeyPairsOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about one or more key pairs.
0000000000000000000000000000000000000000;;		KeyPairs []*KeyPairInfo `locationName:"keySet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeKeyPairsOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeKeyPairsOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetKeyPairs sets the KeyPairs field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeKeyPairsOutput) SetKeyPairs(v []*KeyPairInfo) *DescribeKeyPairsOutput {
0000000000000000000000000000000000000000;;		s.KeyPairs = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeMovingAddresses.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeMovingAddressesRequest
0000000000000000000000000000000000000000;;	type DescribeMovingAddressesInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more filters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * moving-status - The status of the Elastic IP address (MovingToVpc |
0000000000000000000000000000000000000000;;		//    RestoringToClassic).
0000000000000000000000000000000000000000;;		Filters []*Filter `locationName:"filter" locationNameList:"Filter" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum number of results to return for the request in a single page.
0000000000000000000000000000000000000000;;		// The remaining results of the initial request can be seen by sending another
0000000000000000000000000000000000000000;;		// request with the returned NextToken value. This value can be between 5 and
0000000000000000000000000000000000000000;;		// 1000; if MaxResults is given a value outside of this range, an error is returned.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: If no value is provided, the default is 1000.
0000000000000000000000000000000000000000;;		MaxResults *int64 `locationName:"maxResults" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token to use to retrieve the next page of results.
0000000000000000000000000000000000000000;;		NextToken *string `locationName:"nextToken" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more Elastic IP addresses.
0000000000000000000000000000000000000000;;		PublicIps []*string `locationName:"publicIp" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeMovingAddressesInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeMovingAddressesInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeMovingAddressesInput) SetDryRun(v bool) *DescribeMovingAddressesInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFilters sets the Filters field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeMovingAddressesInput) SetFilters(v []*Filter) *DescribeMovingAddressesInput {
0000000000000000000000000000000000000000;;		s.Filters = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxResults sets the MaxResults field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeMovingAddressesInput) SetMaxResults(v int64) *DescribeMovingAddressesInput {
0000000000000000000000000000000000000000;;		s.MaxResults = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeMovingAddressesInput) SetNextToken(v string) *DescribeMovingAddressesInput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPublicIps sets the PublicIps field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeMovingAddressesInput) SetPublicIps(v []*string) *DescribeMovingAddressesInput {
0000000000000000000000000000000000000000;;		s.PublicIps = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeMovingAddresses.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeMovingAddressesResult
0000000000000000000000000000000000000000;;	type DescribeMovingAddressesOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The status for each Elastic IP address.
0000000000000000000000000000000000000000;;		MovingAddressStatuses []*MovingAddressStatus `locationName:"movingAddressStatusSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token to use to retrieve the next page of results. This value is null
0000000000000000000000000000000000000000;;		// when there are no more results to return.
0000000000000000000000000000000000000000;;		NextToken *string `locationName:"nextToken" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeMovingAddressesOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeMovingAddressesOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMovingAddressStatuses sets the MovingAddressStatuses field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeMovingAddressesOutput) SetMovingAddressStatuses(v []*MovingAddressStatus) *DescribeMovingAddressesOutput {
0000000000000000000000000000000000000000;;		s.MovingAddressStatuses = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeMovingAddressesOutput) SetNextToken(v string) *DescribeMovingAddressesOutput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeNatGateways.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeNatGatewaysRequest
0000000000000000000000000000000000000000;;	type DescribeNatGatewaysInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more filters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * nat-gateway-id - The ID of the NAT gateway.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * state - The state of the NAT gateway (pending | failed | available |
0000000000000000000000000000000000000000;;		//    deleting | deleted).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * subnet-id - The ID of the subnet in which the NAT gateway resides.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * vpc-id - The ID of the VPC in which the NAT gateway resides.
0000000000000000000000000000000000000000;;		Filter []*Filter `locationNameList:"Filter" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum number of items to return for this request. The request returns
0000000000000000000000000000000000000000;;		// a token that you can specify in a subsequent call to get the next set of
0000000000000000000000000000000000000000;;		// results.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Constraint: If the value specified is greater than 1000, we return only 1000
0000000000000000000000000000000000000000;;		// items.
0000000000000000000000000000000000000000;;		MaxResults *int64 `type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more NAT gateway IDs.
0000000000000000000000000000000000000000;;		NatGatewayIds []*string `locationName:"NatGatewayId" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token to retrieve the next page of results.
0000000000000000000000000000000000000000;;		NextToken *string `type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeNatGatewaysInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeNatGatewaysInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFilter sets the Filter field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeNatGatewaysInput) SetFilter(v []*Filter) *DescribeNatGatewaysInput {
0000000000000000000000000000000000000000;;		s.Filter = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxResults sets the MaxResults field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeNatGatewaysInput) SetMaxResults(v int64) *DescribeNatGatewaysInput {
0000000000000000000000000000000000000000;;		s.MaxResults = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNatGatewayIds sets the NatGatewayIds field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeNatGatewaysInput) SetNatGatewayIds(v []*string) *DescribeNatGatewaysInput {
0000000000000000000000000000000000000000;;		s.NatGatewayIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeNatGatewaysInput) SetNextToken(v string) *DescribeNatGatewaysInput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeNatGateways.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeNatGatewaysResult
0000000000000000000000000000000000000000;;	type DescribeNatGatewaysOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the NAT gateways.
0000000000000000000000000000000000000000;;		NatGateways []*NatGateway `locationName:"natGatewaySet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token to use to retrieve the next page of results. This value is null
0000000000000000000000000000000000000000;;		// when there are no more results to return.
0000000000000000000000000000000000000000;;		NextToken *string `locationName:"nextToken" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeNatGatewaysOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeNatGatewaysOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNatGateways sets the NatGateways field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeNatGatewaysOutput) SetNatGateways(v []*NatGateway) *DescribeNatGatewaysOutput {
0000000000000000000000000000000000000000;;		s.NatGateways = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeNatGatewaysOutput) SetNextToken(v string) *DescribeNatGatewaysOutput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeNetworkAcls.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeNetworkAclsRequest
0000000000000000000000000000000000000000;;	type DescribeNetworkAclsInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more filters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * association.association-id - The ID of an association ID for the ACL.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * association.network-acl-id - The ID of the network ACL involved in the
0000000000000000000000000000000000000000;;		//    association.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * association.subnet-id - The ID of the subnet involved in the association.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * default - Indicates whether the ACL is the default network ACL for the
0000000000000000000000000000000000000000;;		//    VPC.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * entry.cidr - The IPv4 CIDR range specified in the entry.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * entry.egress - Indicates whether the entry applies to egress traffic.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * entry.icmp.code - The ICMP code specified in the entry, if any.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * entry.icmp.type - The ICMP type specified in the entry, if any.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * entry.ipv6-cidr - The IPv6 CIDR range specified in the entry.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * entry.port-range.from - The start of the port range specified in the
0000000000000000000000000000000000000000;;		//    entry.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * entry.port-range.to - The end of the port range specified in the entry.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * entry.protocol - The protocol specified in the entry (tcp | udp | icmp
0000000000000000000000000000000000000000;;		//    or a protocol number).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * entry.rule-action - Allows or denies the matching traffic (allow | deny).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * entry.rule-number - The number of an entry (in other words, rule) in
0000000000000000000000000000000000000000;;		//    the ACL's set of entries.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * network-acl-id - The ID of the network ACL.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag:key=value - The key/value combination of a tag assigned to the resource.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag-key - The key of a tag assigned to the resource. This filter is
0000000000000000000000000000000000000000;;		//    independent of the tag-value filter. For example, if you use both the
0000000000000000000000000000000000000000;;		//    filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources
0000000000000000000000000000000000000000;;		//    assigned both the tag key Purpose (regardless of what the tag's value
0000000000000000000000000000000000000000;;		//    is), and the tag value X (regardless of what the tag's key is). If you
0000000000000000000000000000000000000000;;		//    want to list only resources where Purpose is X, see the tag:key=value
0000000000000000000000000000000000000000;;		//    filter.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag-value - The value of a tag assigned to the resource. This filter
0000000000000000000000000000000000000000;;		//    is independent of the tag-key filter.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * vpc-id - The ID of the VPC for the network ACL.
0000000000000000000000000000000000000000;;		Filters []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more network ACL IDs.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: Describes all your network ACLs.
0000000000000000000000000000000000000000;;		NetworkAclIds []*string `locationName:"NetworkAclId" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeNetworkAclsInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeNetworkAclsInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeNetworkAclsInput) SetDryRun(v bool) *DescribeNetworkAclsInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFilters sets the Filters field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeNetworkAclsInput) SetFilters(v []*Filter) *DescribeNetworkAclsInput {
0000000000000000000000000000000000000000;;		s.Filters = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNetworkAclIds sets the NetworkAclIds field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeNetworkAclsInput) SetNetworkAclIds(v []*string) *DescribeNetworkAclsInput {
0000000000000000000000000000000000000000;;		s.NetworkAclIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeNetworkAcls.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeNetworkAclsResult
0000000000000000000000000000000000000000;;	type DescribeNetworkAclsOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about one or more network ACLs.
0000000000000000000000000000000000000000;;		NetworkAcls []*NetworkAcl `locationName:"networkAclSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeNetworkAclsOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeNetworkAclsOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNetworkAcls sets the NetworkAcls field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeNetworkAclsOutput) SetNetworkAcls(v []*NetworkAcl) *DescribeNetworkAclsOutput {
0000000000000000000000000000000000000000;;		s.NetworkAcls = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeNetworkInterfaceAttribute.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeNetworkInterfaceAttributeRequest
0000000000000000000000000000000000000000;;	type DescribeNetworkInterfaceAttributeInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The attribute of the network interface.
0000000000000000000000000000000000000000;;		Attribute *string `locationName:"attribute" type:"string" enum:"NetworkInterfaceAttribute"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the network interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// NetworkInterfaceId is a required field
0000000000000000000000000000000000000000;;		NetworkInterfaceId *string `locationName:"networkInterfaceId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeNetworkInterfaceAttributeInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeNetworkInterfaceAttributeInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DescribeNetworkInterfaceAttributeInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DescribeNetworkInterfaceAttributeInput"}
0000000000000000000000000000000000000000;;		if s.NetworkInterfaceId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("NetworkInterfaceId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAttribute sets the Attribute field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeNetworkInterfaceAttributeInput) SetAttribute(v string) *DescribeNetworkInterfaceAttributeInput {
0000000000000000000000000000000000000000;;		s.Attribute = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeNetworkInterfaceAttributeInput) SetDryRun(v bool) *DescribeNetworkInterfaceAttributeInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNetworkInterfaceId sets the NetworkInterfaceId field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeNetworkInterfaceAttributeInput) SetNetworkInterfaceId(v string) *DescribeNetworkInterfaceAttributeInput {
0000000000000000000000000000000000000000;;		s.NetworkInterfaceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeNetworkInterfaceAttribute.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeNetworkInterfaceAttributeResult
0000000000000000000000000000000000000000;;	type DescribeNetworkInterfaceAttributeOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The attachment (if any) of the network interface.
0000000000000000000000000000000000000000;;		Attachment *NetworkInterfaceAttachment `locationName:"attachment" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The description of the network interface.
0000000000000000000000000000000000000000;;		Description *AttributeValue `locationName:"description" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The security groups associated with the network interface.
0000000000000000000000000000000000000000;;		Groups []*GroupIdentifier `locationName:"groupSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the network interface.
0000000000000000000000000000000000000000;;		NetworkInterfaceId *string `locationName:"networkInterfaceId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether source/destination checking is enabled.
0000000000000000000000000000000000000000;;		SourceDestCheck *AttributeBooleanValue `locationName:"sourceDestCheck" type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeNetworkInterfaceAttributeOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeNetworkInterfaceAttributeOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAttachment sets the Attachment field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeNetworkInterfaceAttributeOutput) SetAttachment(v *NetworkInterfaceAttachment) *DescribeNetworkInterfaceAttributeOutput {
0000000000000000000000000000000000000000;;		s.Attachment = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDescription sets the Description field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeNetworkInterfaceAttributeOutput) SetDescription(v *AttributeValue) *DescribeNetworkInterfaceAttributeOutput {
0000000000000000000000000000000000000000;;		s.Description = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroups sets the Groups field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeNetworkInterfaceAttributeOutput) SetGroups(v []*GroupIdentifier) *DescribeNetworkInterfaceAttributeOutput {
0000000000000000000000000000000000000000;;		s.Groups = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNetworkInterfaceId sets the NetworkInterfaceId field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeNetworkInterfaceAttributeOutput) SetNetworkInterfaceId(v string) *DescribeNetworkInterfaceAttributeOutput {
0000000000000000000000000000000000000000;;		s.NetworkInterfaceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSourceDestCheck sets the SourceDestCheck field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeNetworkInterfaceAttributeOutput) SetSourceDestCheck(v *AttributeBooleanValue) *DescribeNetworkInterfaceAttributeOutput {
0000000000000000000000000000000000000000;;		s.SourceDestCheck = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeNetworkInterfaces.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeNetworkInterfacesRequest
0000000000000000000000000000000000000000;;	type DescribeNetworkInterfacesInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more filters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * addresses.private-ip-address - The private IPv4 addresses associated
0000000000000000000000000000000000000000;;		//    with the network interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * addresses.primary - Whether the private IPv4 address is the primary
0000000000000000000000000000000000000000;;		//    IP address associated with the network interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * addresses.association.public-ip - The association ID returned when the
0000000000000000000000000000000000000000;;		//    network interface was associated with the Elastic IP address (IPv4).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * addresses.association.owner-id - The owner ID of the addresses associated
0000000000000000000000000000000000000000;;		//    with the network interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * association.association-id - The association ID returned when the network
0000000000000000000000000000000000000000;;		//    interface was associated with an IPv4 address.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * association.allocation-id - The allocation ID returned when you allocated
0000000000000000000000000000000000000000;;		//    the Elastic IP address (IPv4) for your network interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * association.ip-owner-id - The owner of the Elastic IP address (IPv4)
0000000000000000000000000000000000000000;;		//    associated with the network interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * association.public-ip - The address of the Elastic IP address (IPv4)
0000000000000000000000000000000000000000;;		//    bound to the network interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * association.public-dns-name - The public DNS name for the network interface
0000000000000000000000000000000000000000;;		//    (IPv4).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * attachment.attachment-id - The ID of the interface attachment.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * attachment.attach.time - The time that the network interface was attached
0000000000000000000000000000000000000000;;		//    to an instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * attachment.delete-on-termination - Indicates whether the attachment
0000000000000000000000000000000000000000;;		//    is deleted when an instance is terminated.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * attachment.device-index - The device index to which the network interface
0000000000000000000000000000000000000000;;		//    is attached.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * attachment.instance-id - The ID of the instance to which the network
0000000000000000000000000000000000000000;;		//    interface is attached.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * attachment.instance-owner-id - The owner ID of the instance to which
0000000000000000000000000000000000000000;;		//    the network interface is attached.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * attachment.nat-gateway-id - The ID of the NAT gateway to which the network
0000000000000000000000000000000000000000;;		//    interface is attached.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * attachment.status - The status of the attachment (attaching | attached
0000000000000000000000000000000000000000;;		//    | detaching | detached).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * availability-zone - The Availability Zone of the network interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * description - The description of the network interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * group-id - The ID of a security group associated with the network interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * group-name - The name of a security group associated with the network
0000000000000000000000000000000000000000;;		//    interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * ipv6-addresses.ipv6-address - An IPv6 address associated with the network
0000000000000000000000000000000000000000;;		//    interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * mac-address - The MAC address of the network interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * network-interface-id - The ID of the network interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * owner-id - The AWS account ID of the network interface owner.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * private-ip-address - The private IPv4 address or addresses of the network
0000000000000000000000000000000000000000;;		//    interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * private-dns-name - The private DNS name of the network interface (IPv4).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * requester-id - The ID of the entity that launched the instance on your
0000000000000000000000000000000000000000;;		//    behalf (for example, AWS Management Console, Auto Scaling, and so on).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * requester-managed - Indicates whether the network interface is being
0000000000000000000000000000000000000000;;		//    managed by an AWS service (for example, AWS Management Console, Auto Scaling,
0000000000000000000000000000000000000000;;		//    and so on).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * source-desk-check - Indicates whether the network interface performs
0000000000000000000000000000000000000000;;		//    source/destination checking. A value of true means checking is enabled,
0000000000000000000000000000000000000000;;		//    and false means checking is disabled. The value must be false for the
0000000000000000000000000000000000000000;;		//    network interface to perform network address translation (NAT) in your
0000000000000000000000000000000000000000;;		//    VPC.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * status - The status of the network interface. If the network interface
0000000000000000000000000000000000000000;;		//    is not attached to an instance, the status is available; if a network
0000000000000000000000000000000000000000;;		//    interface is attached to an instance the status is in-use.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * subnet-id - The ID of the subnet for the network interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag:key=value - The key/value combination of a tag assigned to the resource.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag-key - The key of a tag assigned to the resource. This filter is
0000000000000000000000000000000000000000;;		//    independent of the tag-value filter. For example, if you use both the
0000000000000000000000000000000000000000;;		//    filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources
0000000000000000000000000000000000000000;;		//    assigned both the tag key Purpose (regardless of what the tag's value
0000000000000000000000000000000000000000;;		//    is), and the tag value X (regardless of what the tag's key is). If you
0000000000000000000000000000000000000000;;		//    want to list only resources where Purpose is X, see the tag:key=value
0000000000000000000000000000000000000000;;		//    filter.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag-value - The value of a tag assigned to the resource. This filter
0000000000000000000000000000000000000000;;		//    is independent of the tag-key filter.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * vpc-id - The ID of the VPC for the network interface.
0000000000000000000000000000000000000000;;		Filters []*Filter `locationName:"filter" locationNameList:"Filter" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more network interface IDs.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: Describes all your network interfaces.
0000000000000000000000000000000000000000;;		NetworkInterfaceIds []*string `locationName:"NetworkInterfaceId" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeNetworkInterfacesInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeNetworkInterfacesInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeNetworkInterfacesInput) SetDryRun(v bool) *DescribeNetworkInterfacesInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFilters sets the Filters field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeNetworkInterfacesInput) SetFilters(v []*Filter) *DescribeNetworkInterfacesInput {
0000000000000000000000000000000000000000;;		s.Filters = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNetworkInterfaceIds sets the NetworkInterfaceIds field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeNetworkInterfacesInput) SetNetworkInterfaceIds(v []*string) *DescribeNetworkInterfacesInput {
0000000000000000000000000000000000000000;;		s.NetworkInterfaceIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeNetworkInterfaces.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeNetworkInterfacesResult
0000000000000000000000000000000000000000;;	type DescribeNetworkInterfacesOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about one or more network interfaces.
0000000000000000000000000000000000000000;;		NetworkInterfaces []*NetworkInterface `locationName:"networkInterfaceSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeNetworkInterfacesOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeNetworkInterfacesOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNetworkInterfaces sets the NetworkInterfaces field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeNetworkInterfacesOutput) SetNetworkInterfaces(v []*NetworkInterface) *DescribeNetworkInterfacesOutput {
0000000000000000000000000000000000000000;;		s.NetworkInterfaces = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribePlacementGroups.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribePlacementGroupsRequest
0000000000000000000000000000000000000000;;	type DescribePlacementGroupsInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more filters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * group-name - The name of the placement group.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * state - The state of the placement group (pending | available | deleting
0000000000000000000000000000000000000000;;		//    | deleted).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * strategy - The strategy of the placement group (cluster).
0000000000000000000000000000000000000000;;		Filters []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more placement group names.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: Describes all your placement groups, or only those otherwise specified.
0000000000000000000000000000000000000000;;		GroupNames []*string `locationName:"groupName" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribePlacementGroupsInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribePlacementGroupsInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribePlacementGroupsInput) SetDryRun(v bool) *DescribePlacementGroupsInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFilters sets the Filters field's value.
0000000000000000000000000000000000000000;;	func (s *DescribePlacementGroupsInput) SetFilters(v []*Filter) *DescribePlacementGroupsInput {
0000000000000000000000000000000000000000;;		s.Filters = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroupNames sets the GroupNames field's value.
0000000000000000000000000000000000000000;;	func (s *DescribePlacementGroupsInput) SetGroupNames(v []*string) *DescribePlacementGroupsInput {
0000000000000000000000000000000000000000;;		s.GroupNames = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribePlacementGroups.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribePlacementGroupsResult
0000000000000000000000000000000000000000;;	type DescribePlacementGroupsOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more placement groups.
0000000000000000000000000000000000000000;;		PlacementGroups []*PlacementGroup `locationName:"placementGroupSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribePlacementGroupsOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribePlacementGroupsOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPlacementGroups sets the PlacementGroups field's value.
0000000000000000000000000000000000000000;;	func (s *DescribePlacementGroupsOutput) SetPlacementGroups(v []*PlacementGroup) *DescribePlacementGroupsOutput {
0000000000000000000000000000000000000000;;		s.PlacementGroups = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribePrefixLists.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribePrefixListsRequest
0000000000000000000000000000000000000000;;	type DescribePrefixListsInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more filters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * prefix-list-id: The ID of a prefix list.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * prefix-list-name: The name of a prefix list.
0000000000000000000000000000000000000000;;		Filters []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum number of items to return for this request. The request returns
0000000000000000000000000000000000000000;;		// a token that you can specify in a subsequent call to get the next set of
0000000000000000000000000000000000000000;;		// results.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Constraint: If the value specified is greater than 1000, we return only 1000
0000000000000000000000000000000000000000;;		// items.
0000000000000000000000000000000000000000;;		MaxResults *int64 `type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token for the next set of items to return. (You received this token from
0000000000000000000000000000000000000000;;		// a prior call.)
0000000000000000000000000000000000000000;;		NextToken *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more prefix list IDs.
0000000000000000000000000000000000000000;;		PrefixListIds []*string `locationName:"PrefixListId" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribePrefixListsInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribePrefixListsInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribePrefixListsInput) SetDryRun(v bool) *DescribePrefixListsInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFilters sets the Filters field's value.
0000000000000000000000000000000000000000;;	func (s *DescribePrefixListsInput) SetFilters(v []*Filter) *DescribePrefixListsInput {
0000000000000000000000000000000000000000;;		s.Filters = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxResults sets the MaxResults field's value.
0000000000000000000000000000000000000000;;	func (s *DescribePrefixListsInput) SetMaxResults(v int64) *DescribePrefixListsInput {
0000000000000000000000000000000000000000;;		s.MaxResults = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribePrefixListsInput) SetNextToken(v string) *DescribePrefixListsInput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrefixListIds sets the PrefixListIds field's value.
0000000000000000000000000000000000000000;;	func (s *DescribePrefixListsInput) SetPrefixListIds(v []*string) *DescribePrefixListsInput {
0000000000000000000000000000000000000000;;		s.PrefixListIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribePrefixLists.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribePrefixListsResult
0000000000000000000000000000000000000000;;	type DescribePrefixListsOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token to use when requesting the next set of items. If there are no additional
0000000000000000000000000000000000000000;;		// items to return, the string is empty.
0000000000000000000000000000000000000000;;		NextToken *string `locationName:"nextToken" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// All available prefix lists.
0000000000000000000000000000000000000000;;		PrefixLists []*PrefixList `locationName:"prefixListSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribePrefixListsOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribePrefixListsOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribePrefixListsOutput) SetNextToken(v string) *DescribePrefixListsOutput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrefixLists sets the PrefixLists field's value.
0000000000000000000000000000000000000000;;	func (s *DescribePrefixListsOutput) SetPrefixLists(v []*PrefixList) *DescribePrefixListsOutput {
0000000000000000000000000000000000000000;;		s.PrefixLists = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeRegions.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeRegionsRequest
0000000000000000000000000000000000000000;;	type DescribeRegionsInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more filters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * endpoint - The endpoint of the region (for example, ec2.us-east-1.amazonaws.com).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * region-name - The name of the region (for example, us-east-1).
0000000000000000000000000000000000000000;;		Filters []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The names of one or more regions.
0000000000000000000000000000000000000000;;		RegionNames []*string `locationName:"RegionName" locationNameList:"RegionName" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeRegionsInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeRegionsInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeRegionsInput) SetDryRun(v bool) *DescribeRegionsInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFilters sets the Filters field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeRegionsInput) SetFilters(v []*Filter) *DescribeRegionsInput {
0000000000000000000000000000000000000000;;		s.Filters = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRegionNames sets the RegionNames field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeRegionsInput) SetRegionNames(v []*string) *DescribeRegionsInput {
0000000000000000000000000000000000000000;;		s.RegionNames = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeRegions.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeRegionsResult
0000000000000000000000000000000000000000;;	type DescribeRegionsOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about one or more regions.
0000000000000000000000000000000000000000;;		Regions []*Region `locationName:"regionInfo" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeRegionsOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeRegionsOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRegions sets the Regions field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeRegionsOutput) SetRegions(v []*Region) *DescribeRegionsOutput {
0000000000000000000000000000000000000000;;		s.Regions = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeReservedInstances.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeReservedInstancesRequest
0000000000000000000000000000000000000000;;	type DescribeReservedInstancesInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more filters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * availability-zone - The Availability Zone where the Reserved Instance
0000000000000000000000000000000000000000;;		//    can be used.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * duration - The duration of the Reserved Instance (one year or three
0000000000000000000000000000000000000000;;		//    years), in seconds (31536000 | 94608000).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * end - The time when the Reserved Instance expires (for example, 2015-08-07T11:54:42.000Z).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * fixed-price - The purchase price of the Reserved Instance (for example,
0000000000000000000000000000000000000000;;		//    9800.0).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * instance-type - The instance type that is covered by the reservation.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * scope - The scope of the Reserved Instance (Region or Availability Zone).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * product-description - The Reserved Instance product platform description.
0000000000000000000000000000000000000000;;		//    Instances that include (Amazon VPC) in the product platform description
0000000000000000000000000000000000000000;;		//    will only be displayed to EC2-Classic account holders and are for use
0000000000000000000000000000000000000000;;		//    with Amazon VPC (Linux/UNIX | Linux/UNIX (Amazon VPC) | SUSE Linux | SUSE
0000000000000000000000000000000000000000;;		//    Linux (Amazon VPC) | Red Hat Enterprise Linux | Red Hat Enterprise Linux
0000000000000000000000000000000000000000;;		//    (Amazon VPC) | Windows | Windows (Amazon VPC) | Windows with SQL Server
0000000000000000000000000000000000000000;;		//    Standard | Windows with SQL Server Standard (Amazon VPC) | Windows with
0000000000000000000000000000000000000000;;		//    SQL Server Web | Windows with SQL Server Web (Amazon VPC) | Windows with
0000000000000000000000000000000000000000;;		//    SQL Server Enterprise | Windows with SQL Server Enterprise (Amazon VPC)).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * reserved-instances-id - The ID of the Reserved Instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * start - The time at which the Reserved Instance purchase request was
0000000000000000000000000000000000000000;;		//    placed (for example, 2014-08-07T11:54:42.000Z).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * state - The state of the Reserved Instance (payment-pending | active
0000000000000000000000000000000000000000;;		//    | payment-failed | retired).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag:key=value - The key/value combination of a tag assigned to the resource.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag-key - The key of a tag assigned to the resource. This filter is
0000000000000000000000000000000000000000;;		//    independent of the tag-value filter. For example, if you use both the
0000000000000000000000000000000000000000;;		//    filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources
0000000000000000000000000000000000000000;;		//    assigned both the tag key Purpose (regardless of what the tag's value
0000000000000000000000000000000000000000;;		//    is), and the tag value X (regardless of what the tag's key is). If you
0000000000000000000000000000000000000000;;		//    want to list only resources where Purpose is X, see the tag:key=value
0000000000000000000000000000000000000000;;		//    filter.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag-value - The value of a tag assigned to the resource. This filter
0000000000000000000000000000000000000000;;		//    is independent of the tag-key filter.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * usage-price - The usage price of the Reserved Instance, per hour (for
0000000000000000000000000000000000000000;;		//    example, 0.84).
0000000000000000000000000000000000000000;;		Filters []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Describes whether the Reserved Instance is Standard or Convertible.
0000000000000000000000000000000000000000;;		OfferingClass *string `type:"string" enum:"OfferingClassType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Reserved Instance offering type. If you are using tools that predate
0000000000000000000000000000000000000000;;		// the 2011-11-01 API version, you only have access to the Medium Utilization
0000000000000000000000000000000000000000;;		// Reserved Instance offering type.
0000000000000000000000000000000000000000;;		OfferingType *string `locationName:"offeringType" type:"string" enum:"OfferingTypeValues"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more Reserved Instance IDs.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: Describes all your Reserved Instances, or only those otherwise specified.
0000000000000000000000000000000000000000;;		ReservedInstancesIds []*string `locationName:"ReservedInstancesId" locationNameList:"ReservedInstancesId" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeReservedInstancesInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeReservedInstancesInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeReservedInstancesInput) SetDryRun(v bool) *DescribeReservedInstancesInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFilters sets the Filters field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeReservedInstancesInput) SetFilters(v []*Filter) *DescribeReservedInstancesInput {
0000000000000000000000000000000000000000;;		s.Filters = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetOfferingClass sets the OfferingClass field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeReservedInstancesInput) SetOfferingClass(v string) *DescribeReservedInstancesInput {
0000000000000000000000000000000000000000;;		s.OfferingClass = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetOfferingType sets the OfferingType field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeReservedInstancesInput) SetOfferingType(v string) *DescribeReservedInstancesInput {
0000000000000000000000000000000000000000;;		s.OfferingType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReservedInstancesIds sets the ReservedInstancesIds field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeReservedInstancesInput) SetReservedInstancesIds(v []*string) *DescribeReservedInstancesInput {
0000000000000000000000000000000000000000;;		s.ReservedInstancesIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeReservedInstancesListings.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeReservedInstancesListingsRequest
0000000000000000000000000000000000000000;;	type DescribeReservedInstancesListingsInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more filters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * reserved-instances-id - The ID of the Reserved Instances.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * reserved-instances-listing-id - The ID of the Reserved Instances listing.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * status - The status of the Reserved Instance listing (pending | active
0000000000000000000000000000000000000000;;		//    | cancelled | closed).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * status-message - The reason for the status.
0000000000000000000000000000000000000000;;		Filters []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more Reserved Instance IDs.
0000000000000000000000000000000000000000;;		ReservedInstancesId *string `locationName:"reservedInstancesId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more Reserved Instance listing IDs.
0000000000000000000000000000000000000000;;		ReservedInstancesListingId *string `locationName:"reservedInstancesListingId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeReservedInstancesListingsInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeReservedInstancesListingsInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFilters sets the Filters field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeReservedInstancesListingsInput) SetFilters(v []*Filter) *DescribeReservedInstancesListingsInput {
0000000000000000000000000000000000000000;;		s.Filters = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReservedInstancesId sets the ReservedInstancesId field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeReservedInstancesListingsInput) SetReservedInstancesId(v string) *DescribeReservedInstancesListingsInput {
0000000000000000000000000000000000000000;;		s.ReservedInstancesId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReservedInstancesListingId sets the ReservedInstancesListingId field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeReservedInstancesListingsInput) SetReservedInstancesListingId(v string) *DescribeReservedInstancesListingsInput {
0000000000000000000000000000000000000000;;		s.ReservedInstancesListingId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeReservedInstancesListings.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeReservedInstancesListingsResult
0000000000000000000000000000000000000000;;	type DescribeReservedInstancesListingsOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the Reserved Instance listing.
0000000000000000000000000000000000000000;;		ReservedInstancesListings []*ReservedInstancesListing `locationName:"reservedInstancesListingsSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeReservedInstancesListingsOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeReservedInstancesListingsOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReservedInstancesListings sets the ReservedInstancesListings field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeReservedInstancesListingsOutput) SetReservedInstancesListings(v []*ReservedInstancesListing) *DescribeReservedInstancesListingsOutput {
0000000000000000000000000000000000000000;;		s.ReservedInstancesListings = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeReservedInstancesModifications.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeReservedInstancesModificationsRequest
0000000000000000000000000000000000000000;;	type DescribeReservedInstancesModificationsInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more filters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * client-token - The idempotency token for the modification request.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * create-date - The time when the modification request was created.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * effective-date - The time when the modification becomes effective.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * modification-result.reserved-instances-id - The ID for the Reserved
0000000000000000000000000000000000000000;;		//    Instances created as part of the modification request. This ID is only
0000000000000000000000000000000000000000;;		//    available when the status of the modification is fulfilled.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * modification-result.target-configuration.availability-zone - The Availability
0000000000000000000000000000000000000000;;		//    Zone for the new Reserved Instances.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * modification-result.target-configuration.instance-count  - The number
0000000000000000000000000000000000000000;;		//    of new Reserved Instances.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * modification-result.target-configuration.instance-type - The instance
0000000000000000000000000000000000000000;;		//    type of the new Reserved Instances.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * modification-result.target-configuration.platform - The network platform
0000000000000000000000000000000000000000;;		//    of the new Reserved Instances (EC2-Classic | EC2-VPC).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * reserved-instances-id - The ID of the Reserved Instances modified.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * reserved-instances-modification-id - The ID of the modification request.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * status - The status of the Reserved Instances modification request (processing
0000000000000000000000000000000000000000;;		//    | fulfilled | failed).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * status-message - The reason for the status.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * update-date - The time when the modification request was last updated.
0000000000000000000000000000000000000000;;		Filters []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token to retrieve the next page of results.
0000000000000000000000000000000000000000;;		NextToken *string `locationName:"nextToken" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// IDs for the submitted modification request.
0000000000000000000000000000000000000000;;		ReservedInstancesModificationIds []*string `locationName:"ReservedInstancesModificationId" locationNameList:"ReservedInstancesModificationId" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeReservedInstancesModificationsInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeReservedInstancesModificationsInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFilters sets the Filters field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeReservedInstancesModificationsInput) SetFilters(v []*Filter) *DescribeReservedInstancesModificationsInput {
0000000000000000000000000000000000000000;;		s.Filters = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeReservedInstancesModificationsInput) SetNextToken(v string) *DescribeReservedInstancesModificationsInput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReservedInstancesModificationIds sets the ReservedInstancesModificationIds field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeReservedInstancesModificationsInput) SetReservedInstancesModificationIds(v []*string) *DescribeReservedInstancesModificationsInput {
0000000000000000000000000000000000000000;;		s.ReservedInstancesModificationIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeReservedInstancesModifications.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeReservedInstancesModificationsResult
0000000000000000000000000000000000000000;;	type DescribeReservedInstancesModificationsOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token to use to retrieve the next page of results. This value is null
0000000000000000000000000000000000000000;;		// when there are no more results to return.
0000000000000000000000000000000000000000;;		NextToken *string `locationName:"nextToken" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Reserved Instance modification information.
0000000000000000000000000000000000000000;;		ReservedInstancesModifications []*ReservedInstancesModification `locationName:"reservedInstancesModificationsSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeReservedInstancesModificationsOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeReservedInstancesModificationsOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeReservedInstancesModificationsOutput) SetNextToken(v string) *DescribeReservedInstancesModificationsOutput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReservedInstancesModifications sets the ReservedInstancesModifications field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeReservedInstancesModificationsOutput) SetReservedInstancesModifications(v []*ReservedInstancesModification) *DescribeReservedInstancesModificationsOutput {
0000000000000000000000000000000000000000;;		s.ReservedInstancesModifications = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeReservedInstancesOfferings.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeReservedInstancesOfferingsRequest
0000000000000000000000000000000000000000;;	type DescribeReservedInstancesOfferingsInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Availability Zone in which the Reserved Instance can be used.
0000000000000000000000000000000000000000;;		AvailabilityZone *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more filters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * availability-zone - The Availability Zone where the Reserved Instance
0000000000000000000000000000000000000000;;		//    can be used.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * duration - The duration of the Reserved Instance (for example, one year
0000000000000000000000000000000000000000;;		//    or three years), in seconds (31536000 | 94608000).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * fixed-price - The purchase price of the Reserved Instance (for example,
0000000000000000000000000000000000000000;;		//    9800.0).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * instance-type - The instance type that is covered by the reservation.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * marketplace - Set to true to show only Reserved Instance Marketplace
0000000000000000000000000000000000000000;;		//    offerings. When this filter is not used, which is the default behavior,
0000000000000000000000000000000000000000;;		//    all offerings from both AWS and the Reserved Instance Marketplace are
0000000000000000000000000000000000000000;;		//    listed.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * product-description - The Reserved Instance product platform description.
0000000000000000000000000000000000000000;;		//    Instances that include (Amazon VPC) in the product platform description
0000000000000000000000000000000000000000;;		//    will only be displayed to EC2-Classic account holders and are for use
0000000000000000000000000000000000000000;;		//    with Amazon VPC. (Linux/UNIX | Linux/UNIX (Amazon VPC) | SUSE Linux |
0000000000000000000000000000000000000000;;		//    SUSE Linux (Amazon VPC) | Red Hat Enterprise Linux | Red Hat Enterprise
0000000000000000000000000000000000000000;;		//    Linux (Amazon VPC) | Windows | Windows (Amazon VPC) | Windows with SQL
0000000000000000000000000000000000000000;;		//    Server Standard | Windows with SQL Server Standard (Amazon VPC) | Windows
0000000000000000000000000000000000000000;;		//    with SQL Server Web |  Windows with SQL Server Web (Amazon VPC) | Windows
0000000000000000000000000000000000000000;;		//    with SQL Server Enterprise | Windows with SQL Server Enterprise (Amazon
0000000000000000000000000000000000000000;;		//    VPC))
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * reserved-instances-offering-id - The Reserved Instances offering ID.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * scope - The scope of the Reserved Instance (Availability Zone or Region).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * usage-price - The usage price of the Reserved Instance, per hour (for
0000000000000000000000000000000000000000;;		//    example, 0.84).
0000000000000000000000000000000000000000;;		Filters []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Include Reserved Instance Marketplace offerings in the response.
0000000000000000000000000000000000000000;;		IncludeMarketplace *bool `type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The tenancy of the instances covered by the reservation. A Reserved Instance
0000000000000000000000000000000000000000;;		// with a tenancy of dedicated is applied to instances that run in a VPC on
0000000000000000000000000000000000000000;;		// single-tenant hardware (i.e., Dedicated Instances).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: default
0000000000000000000000000000000000000000;;		InstanceTenancy *string `locationName:"instanceTenancy" type:"string" enum:"Tenancy"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The instance type that the reservation will cover (for example, m1.small).
0000000000000000000000000000000000000000;;		// For more information, see Instance Types (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html)
0000000000000000000000000000000000000000;;		// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;		InstanceType *string `type:"string" enum:"InstanceType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum duration (in seconds) to filter when searching for offerings.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: 94608000 (3 years)
0000000000000000000000000000000000000000;;		MaxDuration *int64 `type:"long"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum number of instances to filter when searching for offerings.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: 20
0000000000000000000000000000000000000000;;		MaxInstanceCount *int64 `type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum number of results to return for the request in a single page.
0000000000000000000000000000000000000000;;		// The remaining results of the initial request can be seen by sending another
0000000000000000000000000000000000000000;;		// request with the returned NextToken value. The maximum is 100.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: 100
0000000000000000000000000000000000000000;;		MaxResults *int64 `locationName:"maxResults" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The minimum duration (in seconds) to filter when searching for offerings.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: 2592000 (1 month)
0000000000000000000000000000000000000000;;		MinDuration *int64 `type:"long"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token to retrieve the next page of results.
0000000000000000000000000000000000000000;;		NextToken *string `locationName:"nextToken" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The offering class of the Reserved Instance. Can be standard or convertible.
0000000000000000000000000000000000000000;;		OfferingClass *string `type:"string" enum:"OfferingClassType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Reserved Instance offering type. If you are using tools that predate
0000000000000000000000000000000000000000;;		// the 2011-11-01 API version, you only have access to the Medium Utilization
0000000000000000000000000000000000000000;;		// Reserved Instance offering type.
0000000000000000000000000000000000000000;;		OfferingType *string `locationName:"offeringType" type:"string" enum:"OfferingTypeValues"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Reserved Instance product platform description. Instances that include
0000000000000000000000000000000000000000;;		// (Amazon VPC) in the description are for use with Amazon VPC.
0000000000000000000000000000000000000000;;		ProductDescription *string `type:"string" enum:"RIProductDescription"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more Reserved Instances offering IDs.
0000000000000000000000000000000000000000;;		ReservedInstancesOfferingIds []*string `locationName:"ReservedInstancesOfferingId" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeReservedInstancesOfferingsInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeReservedInstancesOfferingsInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAvailabilityZone sets the AvailabilityZone field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeReservedInstancesOfferingsInput) SetAvailabilityZone(v string) *DescribeReservedInstancesOfferingsInput {
0000000000000000000000000000000000000000;;		s.AvailabilityZone = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeReservedInstancesOfferingsInput) SetDryRun(v bool) *DescribeReservedInstancesOfferingsInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFilters sets the Filters field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeReservedInstancesOfferingsInput) SetFilters(v []*Filter) *DescribeReservedInstancesOfferingsInput {
0000000000000000000000000000000000000000;;		s.Filters = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIncludeMarketplace sets the IncludeMarketplace field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeReservedInstancesOfferingsInput) SetIncludeMarketplace(v bool) *DescribeReservedInstancesOfferingsInput {
0000000000000000000000000000000000000000;;		s.IncludeMarketplace = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceTenancy sets the InstanceTenancy field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeReservedInstancesOfferingsInput) SetInstanceTenancy(v string) *DescribeReservedInstancesOfferingsInput {
0000000000000000000000000000000000000000;;		s.InstanceTenancy = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceType sets the InstanceType field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeReservedInstancesOfferingsInput) SetInstanceType(v string) *DescribeReservedInstancesOfferingsInput {
0000000000000000000000000000000000000000;;		s.InstanceType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxDuration sets the MaxDuration field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeReservedInstancesOfferingsInput) SetMaxDuration(v int64) *DescribeReservedInstancesOfferingsInput {
0000000000000000000000000000000000000000;;		s.MaxDuration = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxInstanceCount sets the MaxInstanceCount field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeReservedInstancesOfferingsInput) SetMaxInstanceCount(v int64) *DescribeReservedInstancesOfferingsInput {
0000000000000000000000000000000000000000;;		s.MaxInstanceCount = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxResults sets the MaxResults field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeReservedInstancesOfferingsInput) SetMaxResults(v int64) *DescribeReservedInstancesOfferingsInput {
0000000000000000000000000000000000000000;;		s.MaxResults = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMinDuration sets the MinDuration field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeReservedInstancesOfferingsInput) SetMinDuration(v int64) *DescribeReservedInstancesOfferingsInput {
0000000000000000000000000000000000000000;;		s.MinDuration = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeReservedInstancesOfferingsInput) SetNextToken(v string) *DescribeReservedInstancesOfferingsInput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetOfferingClass sets the OfferingClass field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeReservedInstancesOfferingsInput) SetOfferingClass(v string) *DescribeReservedInstancesOfferingsInput {
0000000000000000000000000000000000000000;;		s.OfferingClass = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetOfferingType sets the OfferingType field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeReservedInstancesOfferingsInput) SetOfferingType(v string) *DescribeReservedInstancesOfferingsInput {
0000000000000000000000000000000000000000;;		s.OfferingType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetProductDescription sets the ProductDescription field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeReservedInstancesOfferingsInput) SetProductDescription(v string) *DescribeReservedInstancesOfferingsInput {
0000000000000000000000000000000000000000;;		s.ProductDescription = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReservedInstancesOfferingIds sets the ReservedInstancesOfferingIds field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeReservedInstancesOfferingsInput) SetReservedInstancesOfferingIds(v []*string) *DescribeReservedInstancesOfferingsInput {
0000000000000000000000000000000000000000;;		s.ReservedInstancesOfferingIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeReservedInstancesOfferings.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeReservedInstancesOfferingsResult
0000000000000000000000000000000000000000;;	type DescribeReservedInstancesOfferingsOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token to use to retrieve the next page of results. This value is null
0000000000000000000000000000000000000000;;		// when there are no more results to return.
0000000000000000000000000000000000000000;;		NextToken *string `locationName:"nextToken" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A list of Reserved Instances offerings.
0000000000000000000000000000000000000000;;		ReservedInstancesOfferings []*ReservedInstancesOffering `locationName:"reservedInstancesOfferingsSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeReservedInstancesOfferingsOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeReservedInstancesOfferingsOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeReservedInstancesOfferingsOutput) SetNextToken(v string) *DescribeReservedInstancesOfferingsOutput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReservedInstancesOfferings sets the ReservedInstancesOfferings field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeReservedInstancesOfferingsOutput) SetReservedInstancesOfferings(v []*ReservedInstancesOffering) *DescribeReservedInstancesOfferingsOutput {
0000000000000000000000000000000000000000;;		s.ReservedInstancesOfferings = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output for DescribeReservedInstances.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeReservedInstancesResult
0000000000000000000000000000000000000000;;	type DescribeReservedInstancesOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A list of Reserved Instances.
0000000000000000000000000000000000000000;;		ReservedInstances []*ReservedInstances `locationName:"reservedInstancesSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeReservedInstancesOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeReservedInstancesOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReservedInstances sets the ReservedInstances field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeReservedInstancesOutput) SetReservedInstances(v []*ReservedInstances) *DescribeReservedInstancesOutput {
0000000000000000000000000000000000000000;;		s.ReservedInstances = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeRouteTables.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeRouteTablesRequest
0000000000000000000000000000000000000000;;	type DescribeRouteTablesInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more filters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * association.route-table-association-id - The ID of an association ID
0000000000000000000000000000000000000000;;		//    for the route table.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * association.route-table-id - The ID of the route table involved in the
0000000000000000000000000000000000000000;;		//    association.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * association.subnet-id - The ID of the subnet involved in the association.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * association.main - Indicates whether the route table is the main route
0000000000000000000000000000000000000000;;		//    table for the VPC (true | false).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * route-table-id - The ID of the route table.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * route.destination-cidr-block - The IPv4 CIDR range specified in a route
0000000000000000000000000000000000000000;;		//    in the table.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * route.destination-ipv6-cidr-block - The IPv6 CIDR range specified in
0000000000000000000000000000000000000000;;		//    a route in the route table.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * route.destination-prefix-list-id - The ID (prefix) of the AWS service
0000000000000000000000000000000000000000;;		//    specified in a route in the table.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * route.egress-only-internet-gateway-id - The ID of an egress-only Internet
0000000000000000000000000000000000000000;;		//    gateway specified in a route in the route table.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * route.gateway-id - The ID of a gateway specified in a route in the table.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * route.instance-id - The ID of an instance specified in a route in the
0000000000000000000000000000000000000000;;		//    table.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * route.nat-gateway-id - The ID of a NAT gateway.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * route.origin - Describes how the route was created. CreateRouteTable
0000000000000000000000000000000000000000;;		//    indicates that the route was automatically created when the route table
0000000000000000000000000000000000000000;;		//    was created; CreateRoute indicates that the route was manually added to
0000000000000000000000000000000000000000;;		//    the route table; EnableVgwRoutePropagation indicates that the route was
0000000000000000000000000000000000000000;;		//    propagated by route propagation.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * route.state - The state of a route in the route table (active | blackhole).
0000000000000000000000000000000000000000;;		//    The blackhole state indicates that the route's target isn't available
0000000000000000000000000000000000000000;;		//    (for example, the specified gateway isn't attached to the VPC, the specified
0000000000000000000000000000000000000000;;		//    NAT instance has been terminated, and so on).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * route.vpc-peering-connection-id - The ID of a VPC peering connection
0000000000000000000000000000000000000000;;		//    specified in a route in the table.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag:key=value - The key/value combination of a tag assigned to the resource.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag-key - The key of a tag assigned to the resource. This filter is
0000000000000000000000000000000000000000;;		//    independent of the tag-value filter. For example, if you use both the
0000000000000000000000000000000000000000;;		//    filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources
0000000000000000000000000000000000000000;;		//    assigned both the tag key Purpose (regardless of what the tag's value
0000000000000000000000000000000000000000;;		//    is), and the tag value X (regardless of what the tag's key is). If you
0000000000000000000000000000000000000000;;		//    want to list only resources where Purpose is X, see the tag:key=value
0000000000000000000000000000000000000000;;		//    filter.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag-value - The value of a tag assigned to the resource. This filter
0000000000000000000000000000000000000000;;		//    is independent of the tag-key filter.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * vpc-id - The ID of the VPC for the route table.
0000000000000000000000000000000000000000;;		Filters []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more route table IDs.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: Describes all your route tables.
0000000000000000000000000000000000000000;;		RouteTableIds []*string `locationName:"RouteTableId" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeRouteTablesInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeRouteTablesInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeRouteTablesInput) SetDryRun(v bool) *DescribeRouteTablesInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFilters sets the Filters field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeRouteTablesInput) SetFilters(v []*Filter) *DescribeRouteTablesInput {
0000000000000000000000000000000000000000;;		s.Filters = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRouteTableIds sets the RouteTableIds field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeRouteTablesInput) SetRouteTableIds(v []*string) *DescribeRouteTablesInput {
0000000000000000000000000000000000000000;;		s.RouteTableIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeRouteTables.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeRouteTablesResult
0000000000000000000000000000000000000000;;	type DescribeRouteTablesOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about one or more route tables.
0000000000000000000000000000000000000000;;		RouteTables []*RouteTable `locationName:"routeTableSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeRouteTablesOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeRouteTablesOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRouteTables sets the RouteTables field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeRouteTablesOutput) SetRouteTables(v []*RouteTable) *DescribeRouteTablesOutput {
0000000000000000000000000000000000000000;;		s.RouteTables = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeScheduledInstanceAvailability.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeScheduledInstanceAvailabilityRequest
0000000000000000000000000000000000000000;;	type DescribeScheduledInstanceAvailabilityInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more filters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * availability-zone - The Availability Zone (for example, us-west-2a).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * instance-type - The instance type (for example, c4.large).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * network-platform - The network platform (EC2-Classic or EC2-VPC).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * platform - The platform (Linux/UNIX or Windows).
0000000000000000000000000000000000000000;;		Filters []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The time period for the first schedule to start.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// FirstSlotStartTimeRange is a required field
0000000000000000000000000000000000000000;;		FirstSlotStartTimeRange *SlotDateTimeRangeRequest `type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum number of results to return in a single call. This value can
0000000000000000000000000000000000000000;;		// be between 5 and 300. The default value is 300. To retrieve the remaining
0000000000000000000000000000000000000000;;		// results, make another call with the returned NextToken value.
0000000000000000000000000000000000000000;;		MaxResults *int64 `type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum available duration, in hours. This value must be greater than
0000000000000000000000000000000000000000;;		// MinSlotDurationInHours and less than 1,720.
0000000000000000000000000000000000000000;;		MaxSlotDurationInHours *int64 `type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The minimum available duration, in hours. The minimum required duration is
0000000000000000000000000000000000000000;;		// 1,200 hours per year. For example, the minimum daily schedule is 4 hours,
0000000000000000000000000000000000000000;;		// the minimum weekly schedule is 24 hours, and the minimum monthly schedule
0000000000000000000000000000000000000000;;		// is 100 hours.
0000000000000000000000000000000000000000;;		MinSlotDurationInHours *int64 `type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token for the next set of results.
0000000000000000000000000000000000000000;;		NextToken *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The schedule recurrence.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Recurrence is a required field
0000000000000000000000000000000000000000;;		Recurrence *ScheduledInstanceRecurrenceRequest `type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeScheduledInstanceAvailabilityInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeScheduledInstanceAvailabilityInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DescribeScheduledInstanceAvailabilityInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DescribeScheduledInstanceAvailabilityInput"}
0000000000000000000000000000000000000000;;		if s.FirstSlotStartTimeRange == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("FirstSlotStartTimeRange"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Recurrence == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Recurrence"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.FirstSlotStartTimeRange != nil {
0000000000000000000000000000000000000000;;			if err := s.FirstSlotStartTimeRange.Validate(); err != nil {
0000000000000000000000000000000000000000;;				invalidParams.AddNested("FirstSlotStartTimeRange", err.(request.ErrInvalidParams))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeScheduledInstanceAvailabilityInput) SetDryRun(v bool) *DescribeScheduledInstanceAvailabilityInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFilters sets the Filters field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeScheduledInstanceAvailabilityInput) SetFilters(v []*Filter) *DescribeScheduledInstanceAvailabilityInput {
0000000000000000000000000000000000000000;;		s.Filters = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFirstSlotStartTimeRange sets the FirstSlotStartTimeRange field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeScheduledInstanceAvailabilityInput) SetFirstSlotStartTimeRange(v *SlotDateTimeRangeRequest) *DescribeScheduledInstanceAvailabilityInput {
0000000000000000000000000000000000000000;;		s.FirstSlotStartTimeRange = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxResults sets the MaxResults field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeScheduledInstanceAvailabilityInput) SetMaxResults(v int64) *DescribeScheduledInstanceAvailabilityInput {
0000000000000000000000000000000000000000;;		s.MaxResults = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxSlotDurationInHours sets the MaxSlotDurationInHours field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeScheduledInstanceAvailabilityInput) SetMaxSlotDurationInHours(v int64) *DescribeScheduledInstanceAvailabilityInput {
0000000000000000000000000000000000000000;;		s.MaxSlotDurationInHours = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMinSlotDurationInHours sets the MinSlotDurationInHours field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeScheduledInstanceAvailabilityInput) SetMinSlotDurationInHours(v int64) *DescribeScheduledInstanceAvailabilityInput {
0000000000000000000000000000000000000000;;		s.MinSlotDurationInHours = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeScheduledInstanceAvailabilityInput) SetNextToken(v string) *DescribeScheduledInstanceAvailabilityInput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRecurrence sets the Recurrence field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeScheduledInstanceAvailabilityInput) SetRecurrence(v *ScheduledInstanceRecurrenceRequest) *DescribeScheduledInstanceAvailabilityInput {
0000000000000000000000000000000000000000;;		s.Recurrence = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeScheduledInstanceAvailability.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeScheduledInstanceAvailabilityResult
0000000000000000000000000000000000000000;;	type DescribeScheduledInstanceAvailabilityOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token required to retrieve the next set of results. This value is null
0000000000000000000000000000000000000000;;		// when there are no more results to return.
0000000000000000000000000000000000000000;;		NextToken *string `locationName:"nextToken" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the available Scheduled Instances.
0000000000000000000000000000000000000000;;		ScheduledInstanceAvailabilitySet []*ScheduledInstanceAvailability `locationName:"scheduledInstanceAvailabilitySet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeScheduledInstanceAvailabilityOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeScheduledInstanceAvailabilityOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeScheduledInstanceAvailabilityOutput) SetNextToken(v string) *DescribeScheduledInstanceAvailabilityOutput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetScheduledInstanceAvailabilitySet sets the ScheduledInstanceAvailabilitySet field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeScheduledInstanceAvailabilityOutput) SetScheduledInstanceAvailabilitySet(v []*ScheduledInstanceAvailability) *DescribeScheduledInstanceAvailabilityOutput {
0000000000000000000000000000000000000000;;		s.ScheduledInstanceAvailabilitySet = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeScheduledInstances.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeScheduledInstancesRequest
0000000000000000000000000000000000000000;;	type DescribeScheduledInstancesInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more filters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * availability-zone - The Availability Zone (for example, us-west-2a).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * instance-type - The instance type (for example, c4.large).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * network-platform - The network platform (EC2-Classic or EC2-VPC).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * platform - The platform (Linux/UNIX or Windows).
0000000000000000000000000000000000000000;;		Filters []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum number of results to return in a single call. This value can
0000000000000000000000000000000000000000;;		// be between 5 and 300. The default value is 100. To retrieve the remaining
0000000000000000000000000000000000000000;;		// results, make another call with the returned NextToken value.
0000000000000000000000000000000000000000;;		MaxResults *int64 `type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token for the next set of results.
0000000000000000000000000000000000000000;;		NextToken *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more Scheduled Instance IDs.
0000000000000000000000000000000000000000;;		ScheduledInstanceIds []*string `locationName:"ScheduledInstanceId" locationNameList:"ScheduledInstanceId" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The time period for the first schedule to start.
0000000000000000000000000000000000000000;;		SlotStartTimeRange *SlotStartTimeRangeRequest `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeScheduledInstancesInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeScheduledInstancesInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeScheduledInstancesInput) SetDryRun(v bool) *DescribeScheduledInstancesInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFilters sets the Filters field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeScheduledInstancesInput) SetFilters(v []*Filter) *DescribeScheduledInstancesInput {
0000000000000000000000000000000000000000;;		s.Filters = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxResults sets the MaxResults field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeScheduledInstancesInput) SetMaxResults(v int64) *DescribeScheduledInstancesInput {
0000000000000000000000000000000000000000;;		s.MaxResults = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeScheduledInstancesInput) SetNextToken(v string) *DescribeScheduledInstancesInput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetScheduledInstanceIds sets the ScheduledInstanceIds field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeScheduledInstancesInput) SetScheduledInstanceIds(v []*string) *DescribeScheduledInstancesInput {
0000000000000000000000000000000000000000;;		s.ScheduledInstanceIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSlotStartTimeRange sets the SlotStartTimeRange field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeScheduledInstancesInput) SetSlotStartTimeRange(v *SlotStartTimeRangeRequest) *DescribeScheduledInstancesInput {
0000000000000000000000000000000000000000;;		s.SlotStartTimeRange = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeScheduledInstances.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeScheduledInstancesResult
0000000000000000000000000000000000000000;;	type DescribeScheduledInstancesOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token required to retrieve the next set of results. This value is null
0000000000000000000000000000000000000000;;		// when there are no more results to return.
0000000000000000000000000000000000000000;;		NextToken *string `locationName:"nextToken" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the Scheduled Instances.
0000000000000000000000000000000000000000;;		ScheduledInstanceSet []*ScheduledInstance `locationName:"scheduledInstanceSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeScheduledInstancesOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeScheduledInstancesOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeScheduledInstancesOutput) SetNextToken(v string) *DescribeScheduledInstancesOutput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetScheduledInstanceSet sets the ScheduledInstanceSet field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeScheduledInstancesOutput) SetScheduledInstanceSet(v []*ScheduledInstance) *DescribeScheduledInstancesOutput {
0000000000000000000000000000000000000000;;		s.ScheduledInstanceSet = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeSecurityGroupReferencesRequest
0000000000000000000000000000000000000000;;	type DescribeSecurityGroupReferencesInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the operation, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more security group IDs in your account.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// GroupId is a required field
0000000000000000000000000000000000000000;;		GroupId []*string `locationNameList:"item" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeSecurityGroupReferencesInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeSecurityGroupReferencesInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DescribeSecurityGroupReferencesInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DescribeSecurityGroupReferencesInput"}
0000000000000000000000000000000000000000;;		if s.GroupId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("GroupId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSecurityGroupReferencesInput) SetDryRun(v bool) *DescribeSecurityGroupReferencesInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroupId sets the GroupId field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSecurityGroupReferencesInput) SetGroupId(v []*string) *DescribeSecurityGroupReferencesInput {
0000000000000000000000000000000000000000;;		s.GroupId = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeSecurityGroupReferencesResult
0000000000000000000000000000000000000000;;	type DescribeSecurityGroupReferencesOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the VPCs with the referencing security groups.
0000000000000000000000000000000000000000;;		SecurityGroupReferenceSet []*SecurityGroupReference `locationName:"securityGroupReferenceSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeSecurityGroupReferencesOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeSecurityGroupReferencesOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSecurityGroupReferenceSet sets the SecurityGroupReferenceSet field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSecurityGroupReferencesOutput) SetSecurityGroupReferenceSet(v []*SecurityGroupReference) *DescribeSecurityGroupReferencesOutput {
0000000000000000000000000000000000000000;;		s.SecurityGroupReferenceSet = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeSecurityGroups.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeSecurityGroupsRequest
0000000000000000000000000000000000000000;;	type DescribeSecurityGroupsInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more filters. If using multiple filters for rules, the results include
0000000000000000000000000000000000000000;;		// security groups for which any combination of rules - not necessarily a single
0000000000000000000000000000000000000000;;		// rule - match all filters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * description - The description of the security group.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * egress.ip-permission.prefix-list-id - The ID (prefix) of the AWS service
0000000000000000000000000000000000000000;;		//    to which the security group allows access.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * group-id - The ID of the security group.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * group-name - The name of the security group.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * ip-permission.cidr - An IPv4 CIDR range that has been granted permission
0000000000000000000000000000000000000000;;		//    in a security group rule.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * ip-permission.from-port - The start of port range for the TCP and UDP
0000000000000000000000000000000000000000;;		//    protocols, or an ICMP type number.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * ip-permission.group-id - The ID of a security group that has been granted
0000000000000000000000000000000000000000;;		//    permission.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * ip-permission.group-name - The name of a security group that has been
0000000000000000000000000000000000000000;;		//    granted permission.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * ip-permission.ipv6-cidr - An IPv6 CIDR range that has been granted permission
0000000000000000000000000000000000000000;;		//    in a security group rule.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * ip-permission.protocol - The IP protocol for the permission (tcp | udp
0000000000000000000000000000000000000000;;		//    | icmp or a protocol number).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * ip-permission.to-port - The end of port range for the TCP and UDP protocols,
0000000000000000000000000000000000000000;;		//    or an ICMP code.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * ip-permission.user-id - The ID of an AWS account that has been granted
0000000000000000000000000000000000000000;;		//    permission.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * owner-id - The AWS account ID of the owner of the security group.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag-key - The key of a tag assigned to the security group.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag-value - The value of a tag assigned to the security group.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * vpc-id - The ID of the VPC specified when the security group was created.
0000000000000000000000000000000000000000;;		Filters []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more security group IDs. Required for security groups in a nondefault
0000000000000000000000000000000000000000;;		// VPC.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: Describes all your security groups.
0000000000000000000000000000000000000000;;		GroupIds []*string `locationName:"GroupId" locationNameList:"groupId" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// [EC2-Classic and default VPC only] One or more security group names. You
0000000000000000000000000000000000000000;;		// can specify either the security group name or the security group ID. For
0000000000000000000000000000000000000000;;		// security groups in a nondefault VPC, use the group-name filter to describe
0000000000000000000000000000000000000000;;		// security groups by name.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: Describes all your security groups.
0000000000000000000000000000000000000000;;		GroupNames []*string `locationName:"GroupName" locationNameList:"GroupName" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeSecurityGroupsInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeSecurityGroupsInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSecurityGroupsInput) SetDryRun(v bool) *DescribeSecurityGroupsInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFilters sets the Filters field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSecurityGroupsInput) SetFilters(v []*Filter) *DescribeSecurityGroupsInput {
0000000000000000000000000000000000000000;;		s.Filters = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroupIds sets the GroupIds field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSecurityGroupsInput) SetGroupIds(v []*string) *DescribeSecurityGroupsInput {
0000000000000000000000000000000000000000;;		s.GroupIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroupNames sets the GroupNames field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSecurityGroupsInput) SetGroupNames(v []*string) *DescribeSecurityGroupsInput {
0000000000000000000000000000000000000000;;		s.GroupNames = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeSecurityGroups.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeSecurityGroupsResult
0000000000000000000000000000000000000000;;	type DescribeSecurityGroupsOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about one or more security groups.
0000000000000000000000000000000000000000;;		SecurityGroups []*SecurityGroup `locationName:"securityGroupInfo" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeSecurityGroupsOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeSecurityGroupsOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSecurityGroups sets the SecurityGroups field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSecurityGroupsOutput) SetSecurityGroups(v []*SecurityGroup) *DescribeSecurityGroupsOutput {
0000000000000000000000000000000000000000;;		s.SecurityGroups = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeSnapshotAttribute.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeSnapshotAttributeRequest
0000000000000000000000000000000000000000;;	type DescribeSnapshotAttributeInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The snapshot attribute you would like to view.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Attribute is a required field
0000000000000000000000000000000000000000;;		Attribute *string `type:"string" required:"true" enum:"SnapshotAttributeName"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the EBS snapshot.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// SnapshotId is a required field
0000000000000000000000000000000000000000;;		SnapshotId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeSnapshotAttributeInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeSnapshotAttributeInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DescribeSnapshotAttributeInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DescribeSnapshotAttributeInput"}
0000000000000000000000000000000000000000;;		if s.Attribute == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Attribute"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.SnapshotId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("SnapshotId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAttribute sets the Attribute field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSnapshotAttributeInput) SetAttribute(v string) *DescribeSnapshotAttributeInput {
0000000000000000000000000000000000000000;;		s.Attribute = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSnapshotAttributeInput) SetDryRun(v bool) *DescribeSnapshotAttributeInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSnapshotId sets the SnapshotId field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSnapshotAttributeInput) SetSnapshotId(v string) *DescribeSnapshotAttributeInput {
0000000000000000000000000000000000000000;;		s.SnapshotId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeSnapshotAttribute.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeSnapshotAttributeResult
0000000000000000000000000000000000000000;;	type DescribeSnapshotAttributeOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A list of permissions for creating volumes from the snapshot.
0000000000000000000000000000000000000000;;		CreateVolumePermissions []*CreateVolumePermission `locationName:"createVolumePermission" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A list of product codes.
0000000000000000000000000000000000000000;;		ProductCodes []*ProductCode `locationName:"productCodes" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the EBS snapshot.
0000000000000000000000000000000000000000;;		SnapshotId *string `locationName:"snapshotId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeSnapshotAttributeOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeSnapshotAttributeOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCreateVolumePermissions sets the CreateVolumePermissions field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSnapshotAttributeOutput) SetCreateVolumePermissions(v []*CreateVolumePermission) *DescribeSnapshotAttributeOutput {
0000000000000000000000000000000000000000;;		s.CreateVolumePermissions = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetProductCodes sets the ProductCodes field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSnapshotAttributeOutput) SetProductCodes(v []*ProductCode) *DescribeSnapshotAttributeOutput {
0000000000000000000000000000000000000000;;		s.ProductCodes = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSnapshotId sets the SnapshotId field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSnapshotAttributeOutput) SetSnapshotId(v string) *DescribeSnapshotAttributeOutput {
0000000000000000000000000000000000000000;;		s.SnapshotId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeSnapshots.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeSnapshotsRequest
0000000000000000000000000000000000000000;;	type DescribeSnapshotsInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more filters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * description - A description of the snapshot.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * owner-alias - Value from an Amazon-maintained list (amazon | aws-marketplace
0000000000000000000000000000000000000000;;		//    | microsoft) of snapshot owners. Not to be confused with the user-configured
0000000000000000000000000000000000000000;;		//    AWS account alias, which is set from the IAM consolew.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * owner-id - The ID of the AWS account that owns the snapshot.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * progress - The progress of the snapshot, as a percentage (for example,
0000000000000000000000000000000000000000;;		//    80%).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * snapshot-id - The snapshot ID.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * start-time - The time stamp when the snapshot was initiated.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * status - The status of the snapshot (pending | completed | error).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag:key=value - The key/value combination of a tag assigned to the resource.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag-key - The key of a tag assigned to the resource. This filter is
0000000000000000000000000000000000000000;;		//    independent of the tag-value filter. For example, if you use both the
0000000000000000000000000000000000000000;;		//    filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources
0000000000000000000000000000000000000000;;		//    assigned both the tag key Purpose (regardless of what the tag's value
0000000000000000000000000000000000000000;;		//    is), and the tag value X (regardless of what the tag's key is). If you
0000000000000000000000000000000000000000;;		//    want to list only resources where Purpose is X, see the tag:key=value
0000000000000000000000000000000000000000;;		//    filter.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag-value - The value of a tag assigned to the resource. This filter
0000000000000000000000000000000000000000;;		//    is independent of the tag-key filter.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * volume-id - The ID of the volume the snapshot is for.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * volume-size - The size of the volume, in GiB.
0000000000000000000000000000000000000000;;		Filters []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum number of snapshot results returned by DescribeSnapshots in paginated
0000000000000000000000000000000000000000;;		// output. When this parameter is used, DescribeSnapshots only returns MaxResults
0000000000000000000000000000000000000000;;		// results in a single page along with a NextToken response element. The remaining
0000000000000000000000000000000000000000;;		// results of the initial request can be seen by sending another DescribeSnapshots
0000000000000000000000000000000000000000;;		// request with the returned NextToken value. This value can be between 5 and
0000000000000000000000000000000000000000;;		// 1000; if MaxResults is given a value larger than 1000, only 1000 results
0000000000000000000000000000000000000000;;		// are returned. If this parameter is not used, then DescribeSnapshots returns
0000000000000000000000000000000000000000;;		// all results. You cannot specify this parameter and the snapshot IDs parameter
0000000000000000000000000000000000000000;;		// in the same request.
0000000000000000000000000000000000000000;;		MaxResults *int64 `type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The NextToken value returned from a previous paginated DescribeSnapshots
0000000000000000000000000000000000000000;;		// request where MaxResults was used and the results exceeded the value of that
0000000000000000000000000000000000000000;;		// parameter. Pagination continues from the end of the previous results that
0000000000000000000000000000000000000000;;		// returned the NextToken value. This value is null when there are no more results
0000000000000000000000000000000000000000;;		// to return.
0000000000000000000000000000000000000000;;		NextToken *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns the snapshots owned by the specified owner. Multiple owners can be
0000000000000000000000000000000000000000;;		// specified.
0000000000000000000000000000000000000000;;		OwnerIds []*string `locationName:"Owner" locationNameList:"Owner" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more AWS accounts IDs that can create volumes from the snapshot.
0000000000000000000000000000000000000000;;		RestorableByUserIds []*string `locationName:"RestorableBy" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more snapshot IDs.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: Describes snapshots for which you have launch permissions.
0000000000000000000000000000000000000000;;		SnapshotIds []*string `locationName:"SnapshotId" locationNameList:"SnapshotId" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeSnapshotsInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeSnapshotsInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSnapshotsInput) SetDryRun(v bool) *DescribeSnapshotsInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFilters sets the Filters field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSnapshotsInput) SetFilters(v []*Filter) *DescribeSnapshotsInput {
0000000000000000000000000000000000000000;;		s.Filters = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxResults sets the MaxResults field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSnapshotsInput) SetMaxResults(v int64) *DescribeSnapshotsInput {
0000000000000000000000000000000000000000;;		s.MaxResults = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSnapshotsInput) SetNextToken(v string) *DescribeSnapshotsInput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetOwnerIds sets the OwnerIds field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSnapshotsInput) SetOwnerIds(v []*string) *DescribeSnapshotsInput {
0000000000000000000000000000000000000000;;		s.OwnerIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRestorableByUserIds sets the RestorableByUserIds field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSnapshotsInput) SetRestorableByUserIds(v []*string) *DescribeSnapshotsInput {
0000000000000000000000000000000000000000;;		s.RestorableByUserIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSnapshotIds sets the SnapshotIds field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSnapshotsInput) SetSnapshotIds(v []*string) *DescribeSnapshotsInput {
0000000000000000000000000000000000000000;;		s.SnapshotIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeSnapshots.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeSnapshotsResult
0000000000000000000000000000000000000000;;	type DescribeSnapshotsOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The NextToken value to include in a future DescribeSnapshots request. When
0000000000000000000000000000000000000000;;		// the results of a DescribeSnapshots request exceed MaxResults, this value
0000000000000000000000000000000000000000;;		// can be used to retrieve the next page of results. This value is null when
0000000000000000000000000000000000000000;;		// there are no more results to return.
0000000000000000000000000000000000000000;;		NextToken *string `locationName:"nextToken" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the snapshots.
0000000000000000000000000000000000000000;;		Snapshots []*Snapshot `locationName:"snapshotSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeSnapshotsOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeSnapshotsOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSnapshotsOutput) SetNextToken(v string) *DescribeSnapshotsOutput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSnapshots sets the Snapshots field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSnapshotsOutput) SetSnapshots(v []*Snapshot) *DescribeSnapshotsOutput {
0000000000000000000000000000000000000000;;		s.Snapshots = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeSpotDatafeedSubscription.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeSpotDatafeedSubscriptionRequest
0000000000000000000000000000000000000000;;	type DescribeSpotDatafeedSubscriptionInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeSpotDatafeedSubscriptionInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeSpotDatafeedSubscriptionInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSpotDatafeedSubscriptionInput) SetDryRun(v bool) *DescribeSpotDatafeedSubscriptionInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeSpotDatafeedSubscription.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeSpotDatafeedSubscriptionResult
0000000000000000000000000000000000000000;;	type DescribeSpotDatafeedSubscriptionOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Spot instance data feed subscription.
0000000000000000000000000000000000000000;;		SpotDatafeedSubscription *SpotDatafeedSubscription `locationName:"spotDatafeedSubscription" type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeSpotDatafeedSubscriptionOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeSpotDatafeedSubscriptionOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSpotDatafeedSubscription sets the SpotDatafeedSubscription field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSpotDatafeedSubscriptionOutput) SetSpotDatafeedSubscription(v *SpotDatafeedSubscription) *DescribeSpotDatafeedSubscriptionOutput {
0000000000000000000000000000000000000000;;		s.SpotDatafeedSubscription = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeSpotFleetInstances.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeSpotFleetInstancesRequest
0000000000000000000000000000000000000000;;	type DescribeSpotFleetInstancesInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum number of results to return in a single call. Specify a value
0000000000000000000000000000000000000000;;		// between 1 and 1000. The default value is 1000. To retrieve the remaining
0000000000000000000000000000000000000000;;		// results, make another call with the returned NextToken value.
0000000000000000000000000000000000000000;;		MaxResults *int64 `locationName:"maxResults" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token for the next set of results.
0000000000000000000000000000000000000000;;		NextToken *string `locationName:"nextToken" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the Spot fleet request.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// SpotFleetRequestId is a required field
0000000000000000000000000000000000000000;;		SpotFleetRequestId *string `locationName:"spotFleetRequestId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeSpotFleetInstancesInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeSpotFleetInstancesInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DescribeSpotFleetInstancesInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DescribeSpotFleetInstancesInput"}
0000000000000000000000000000000000000000;;		if s.SpotFleetRequestId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("SpotFleetRequestId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSpotFleetInstancesInput) SetDryRun(v bool) *DescribeSpotFleetInstancesInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxResults sets the MaxResults field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSpotFleetInstancesInput) SetMaxResults(v int64) *DescribeSpotFleetInstancesInput {
0000000000000000000000000000000000000000;;		s.MaxResults = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSpotFleetInstancesInput) SetNextToken(v string) *DescribeSpotFleetInstancesInput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSpotFleetRequestId sets the SpotFleetRequestId field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSpotFleetInstancesInput) SetSpotFleetRequestId(v string) *DescribeSpotFleetInstancesInput {
0000000000000000000000000000000000000000;;		s.SpotFleetRequestId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeSpotFleetInstances.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeSpotFleetInstancesResponse
0000000000000000000000000000000000000000;;	type DescribeSpotFleetInstancesOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The running instances. Note that this list is refreshed periodically and
0000000000000000000000000000000000000000;;		// might be out of date.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ActiveInstances is a required field
0000000000000000000000000000000000000000;;		ActiveInstances []*ActiveInstance `locationName:"activeInstanceSet" locationNameList:"item" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token required to retrieve the next set of results. This value is null
0000000000000000000000000000000000000000;;		// when there are no more results to return.
0000000000000000000000000000000000000000;;		NextToken *string `locationName:"nextToken" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the Spot fleet request.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// SpotFleetRequestId is a required field
0000000000000000000000000000000000000000;;		SpotFleetRequestId *string `locationName:"spotFleetRequestId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeSpotFleetInstancesOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeSpotFleetInstancesOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetActiveInstances sets the ActiveInstances field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSpotFleetInstancesOutput) SetActiveInstances(v []*ActiveInstance) *DescribeSpotFleetInstancesOutput {
0000000000000000000000000000000000000000;;		s.ActiveInstances = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSpotFleetInstancesOutput) SetNextToken(v string) *DescribeSpotFleetInstancesOutput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSpotFleetRequestId sets the SpotFleetRequestId field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSpotFleetInstancesOutput) SetSpotFleetRequestId(v string) *DescribeSpotFleetInstancesOutput {
0000000000000000000000000000000000000000;;		s.SpotFleetRequestId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeSpotFleetRequestHistory.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeSpotFleetRequestHistoryRequest
0000000000000000000000000000000000000000;;	type DescribeSpotFleetRequestHistoryInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The type of events to describe. By default, all events are described.
0000000000000000000000000000000000000000;;		EventType *string `locationName:"eventType" type:"string" enum:"EventType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum number of results to return in a single call. Specify a value
0000000000000000000000000000000000000000;;		// between 1 and 1000. The default value is 1000. To retrieve the remaining
0000000000000000000000000000000000000000;;		// results, make another call with the returned NextToken value.
0000000000000000000000000000000000000000;;		MaxResults *int64 `locationName:"maxResults" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token for the next set of results.
0000000000000000000000000000000000000000;;		NextToken *string `locationName:"nextToken" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the Spot fleet request.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// SpotFleetRequestId is a required field
0000000000000000000000000000000000000000;;		SpotFleetRequestId *string `locationName:"spotFleetRequestId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The starting date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// StartTime is a required field
0000000000000000000000000000000000000000;;		StartTime *time.Time `locationName:"startTime" type:"timestamp" timestampFormat:"iso8601" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeSpotFleetRequestHistoryInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeSpotFleetRequestHistoryInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DescribeSpotFleetRequestHistoryInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DescribeSpotFleetRequestHistoryInput"}
0000000000000000000000000000000000000000;;		if s.SpotFleetRequestId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("SpotFleetRequestId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.StartTime == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("StartTime"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSpotFleetRequestHistoryInput) SetDryRun(v bool) *DescribeSpotFleetRequestHistoryInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEventType sets the EventType field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSpotFleetRequestHistoryInput) SetEventType(v string) *DescribeSpotFleetRequestHistoryInput {
0000000000000000000000000000000000000000;;		s.EventType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxResults sets the MaxResults field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSpotFleetRequestHistoryInput) SetMaxResults(v int64) *DescribeSpotFleetRequestHistoryInput {
0000000000000000000000000000000000000000;;		s.MaxResults = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSpotFleetRequestHistoryInput) SetNextToken(v string) *DescribeSpotFleetRequestHistoryInput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSpotFleetRequestId sets the SpotFleetRequestId field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSpotFleetRequestHistoryInput) SetSpotFleetRequestId(v string) *DescribeSpotFleetRequestHistoryInput {
0000000000000000000000000000000000000000;;		s.SpotFleetRequestId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStartTime sets the StartTime field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSpotFleetRequestHistoryInput) SetStartTime(v time.Time) *DescribeSpotFleetRequestHistoryInput {
0000000000000000000000000000000000000000;;		s.StartTime = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeSpotFleetRequestHistory.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeSpotFleetRequestHistoryResponse
0000000000000000000000000000000000000000;;	type DescribeSpotFleetRequestHistoryOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the events in the history of the Spot fleet request.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// HistoryRecords is a required field
0000000000000000000000000000000000000000;;		HistoryRecords []*HistoryRecord `locationName:"historyRecordSet" locationNameList:"item" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The last date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
0000000000000000000000000000000000000000;;		// All records up to this time were retrieved.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If nextToken indicates that there are more results, this value is not present.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// LastEvaluatedTime is a required field
0000000000000000000000000000000000000000;;		LastEvaluatedTime *time.Time `locationName:"lastEvaluatedTime" type:"timestamp" timestampFormat:"iso8601" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token required to retrieve the next set of results. This value is null
0000000000000000000000000000000000000000;;		// when there are no more results to return.
0000000000000000000000000000000000000000;;		NextToken *string `locationName:"nextToken" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the Spot fleet request.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// SpotFleetRequestId is a required field
0000000000000000000000000000000000000000;;		SpotFleetRequestId *string `locationName:"spotFleetRequestId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The starting date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// StartTime is a required field
0000000000000000000000000000000000000000;;		StartTime *time.Time `locationName:"startTime" type:"timestamp" timestampFormat:"iso8601" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeSpotFleetRequestHistoryOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeSpotFleetRequestHistoryOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHistoryRecords sets the HistoryRecords field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSpotFleetRequestHistoryOutput) SetHistoryRecords(v []*HistoryRecord) *DescribeSpotFleetRequestHistoryOutput {
0000000000000000000000000000000000000000;;		s.HistoryRecords = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetLastEvaluatedTime sets the LastEvaluatedTime field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSpotFleetRequestHistoryOutput) SetLastEvaluatedTime(v time.Time) *DescribeSpotFleetRequestHistoryOutput {
0000000000000000000000000000000000000000;;		s.LastEvaluatedTime = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSpotFleetRequestHistoryOutput) SetNextToken(v string) *DescribeSpotFleetRequestHistoryOutput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSpotFleetRequestId sets the SpotFleetRequestId field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSpotFleetRequestHistoryOutput) SetSpotFleetRequestId(v string) *DescribeSpotFleetRequestHistoryOutput {
0000000000000000000000000000000000000000;;		s.SpotFleetRequestId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStartTime sets the StartTime field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSpotFleetRequestHistoryOutput) SetStartTime(v time.Time) *DescribeSpotFleetRequestHistoryOutput {
0000000000000000000000000000000000000000;;		s.StartTime = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeSpotFleetRequests.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeSpotFleetRequestsRequest
0000000000000000000000000000000000000000;;	type DescribeSpotFleetRequestsInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum number of results to return in a single call. Specify a value
0000000000000000000000000000000000000000;;		// between 1 and 1000. The default value is 1000. To retrieve the remaining
0000000000000000000000000000000000000000;;		// results, make another call with the returned NextToken value.
0000000000000000000000000000000000000000;;		MaxResults *int64 `locationName:"maxResults" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token for the next set of results.
0000000000000000000000000000000000000000;;		NextToken *string `locationName:"nextToken" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IDs of the Spot fleet requests.
0000000000000000000000000000000000000000;;		SpotFleetRequestIds []*string `locationName:"spotFleetRequestId" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeSpotFleetRequestsInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeSpotFleetRequestsInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSpotFleetRequestsInput) SetDryRun(v bool) *DescribeSpotFleetRequestsInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxResults sets the MaxResults field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSpotFleetRequestsInput) SetMaxResults(v int64) *DescribeSpotFleetRequestsInput {
0000000000000000000000000000000000000000;;		s.MaxResults = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSpotFleetRequestsInput) SetNextToken(v string) *DescribeSpotFleetRequestsInput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSpotFleetRequestIds sets the SpotFleetRequestIds field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSpotFleetRequestsInput) SetSpotFleetRequestIds(v []*string) *DescribeSpotFleetRequestsInput {
0000000000000000000000000000000000000000;;		s.SpotFleetRequestIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeSpotFleetRequests.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeSpotFleetRequestsResponse
0000000000000000000000000000000000000000;;	type DescribeSpotFleetRequestsOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token required to retrieve the next set of results. This value is null
0000000000000000000000000000000000000000;;		// when there are no more results to return.
0000000000000000000000000000000000000000;;		NextToken *string `locationName:"nextToken" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the configuration of your Spot fleet.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// SpotFleetRequestConfigs is a required field
0000000000000000000000000000000000000000;;		SpotFleetRequestConfigs []*SpotFleetRequestConfig `locationName:"spotFleetRequestConfigSet" locationNameList:"item" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeSpotFleetRequestsOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeSpotFleetRequestsOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSpotFleetRequestsOutput) SetNextToken(v string) *DescribeSpotFleetRequestsOutput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSpotFleetRequestConfigs sets the SpotFleetRequestConfigs field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSpotFleetRequestsOutput) SetSpotFleetRequestConfigs(v []*SpotFleetRequestConfig) *DescribeSpotFleetRequestsOutput {
0000000000000000000000000000000000000000;;		s.SpotFleetRequestConfigs = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeSpotInstanceRequests.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeSpotInstanceRequestsRequest
0000000000000000000000000000000000000000;;	type DescribeSpotInstanceRequestsInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more filters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * availability-zone-group - The Availability Zone group.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * create-time - The time stamp when the Spot instance request was created.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * fault-code - The fault code related to the request.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * fault-message - The fault message related to the request.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * instance-id - The ID of the instance that fulfilled the request.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * launch-group - The Spot instance launch group.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * launch.block-device-mapping.delete-on-termination - Indicates whether
0000000000000000000000000000000000000000;;		//    the Amazon EBS volume is deleted on instance termination.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * launch.block-device-mapping.device-name - The device name for the Amazon
0000000000000000000000000000000000000000;;		//    EBS volume (for example, /dev/sdh).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * launch.block-device-mapping.snapshot-id - The ID of the snapshot used
0000000000000000000000000000000000000000;;		//    for the Amazon EBS volume.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * launch.block-device-mapping.volume-size - The size of the Amazon EBS
0000000000000000000000000000000000000000;;		//    volume, in GiB.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * launch.block-device-mapping.volume-type - The type of the Amazon EBS
0000000000000000000000000000000000000000;;		//    volume: gp2 for General Purpose SSD, io1 for Provisioned IOPS SSD, st1
0000000000000000000000000000000000000000;;		//    for Throughput Optimized HDD, sc1for Cold HDD, or standard for Magnetic.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * launch.group-id - The security group for the instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * launch.image-id - The ID of the AMI.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * launch.instance-type - The type of instance (for example, m3.medium).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * launch.kernel-id - The kernel ID.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * launch.key-name - The name of the key pair the instance launched with.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * launch.monitoring-enabled - Whether monitoring is enabled for the Spot
0000000000000000000000000000000000000000;;		//    instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * launch.ramdisk-id - The RAM disk ID.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * network-interface.network-interface-id - The ID of the network interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * network-interface.device-index - The index of the device for the network
0000000000000000000000000000000000000000;;		//    interface attachment on the instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * network-interface.subnet-id - The ID of the subnet for the instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * network-interface.description - A description of the network interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * network-interface.private-ip-address - The primary private IP address
0000000000000000000000000000000000000000;;		//    of the network interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * network-interface.delete-on-termination - Indicates whether the network
0000000000000000000000000000000000000000;;		//    interface is deleted when the instance is terminated.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * network-interface.group-id - The ID of the security group associated
0000000000000000000000000000000000000000;;		//    with the network interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * network-interface.group-name - The name of the security group associated
0000000000000000000000000000000000000000;;		//    with the network interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * network-interface.addresses.primary - Indicates whether the IP address
0000000000000000000000000000000000000000;;		//    is the primary private IP address.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * product-description - The product description associated with the instance
0000000000000000000000000000000000000000;;		//    (Linux/UNIX | Windows).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * spot-instance-request-id - The Spot instance request ID.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * spot-price - The maximum hourly price for any Spot instance launched
0000000000000000000000000000000000000000;;		//    to fulfill the request.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * state - The state of the Spot instance request (open | active | closed
0000000000000000000000000000000000000000;;		//    | cancelled | failed). Spot bid status information can help you track
0000000000000000000000000000000000000000;;		//    your Amazon EC2 Spot instance requests. For more information, see Spot
0000000000000000000000000000000000000000;;		//    Bid Status (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-bid-status.html)
0000000000000000000000000000000000000000;;		//    in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * status-code - The short code describing the most recent evaluation of
0000000000000000000000000000000000000000;;		//    your Spot instance request.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * status-message - The message explaining the status of the Spot instance
0000000000000000000000000000000000000000;;		//    request.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag:key=value - The key/value combination of a tag assigned to the resource.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag-key - The key of a tag assigned to the resource. This filter is
0000000000000000000000000000000000000000;;		//    independent of the tag-value filter. For example, if you use both the
0000000000000000000000000000000000000000;;		//    filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources
0000000000000000000000000000000000000000;;		//    assigned both the tag key Purpose (regardless of what the tag's value
0000000000000000000000000000000000000000;;		//    is), and the tag value X (regardless of what the tag's key is). If you
0000000000000000000000000000000000000000;;		//    want to list only resources where Purpose is X, see the tag:key=value
0000000000000000000000000000000000000000;;		//    filter.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag-value - The value of a tag assigned to the resource. This filter
0000000000000000000000000000000000000000;;		//    is independent of the tag-key filter.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * type - The type of Spot instance request (one-time | persistent).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * launched-availability-zone - The Availability Zone in which the bid
0000000000000000000000000000000000000000;;		//    is launched.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * valid-from - The start date of the request.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * valid-until - The end date of the request.
0000000000000000000000000000000000000000;;		Filters []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more Spot instance request IDs.
0000000000000000000000000000000000000000;;		SpotInstanceRequestIds []*string `locationName:"SpotInstanceRequestId" locationNameList:"SpotInstanceRequestId" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeSpotInstanceRequestsInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeSpotInstanceRequestsInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSpotInstanceRequestsInput) SetDryRun(v bool) *DescribeSpotInstanceRequestsInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFilters sets the Filters field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSpotInstanceRequestsInput) SetFilters(v []*Filter) *DescribeSpotInstanceRequestsInput {
0000000000000000000000000000000000000000;;		s.Filters = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSpotInstanceRequestIds sets the SpotInstanceRequestIds field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSpotInstanceRequestsInput) SetSpotInstanceRequestIds(v []*string) *DescribeSpotInstanceRequestsInput {
0000000000000000000000000000000000000000;;		s.SpotInstanceRequestIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeSpotInstanceRequests.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeSpotInstanceRequestsResult
0000000000000000000000000000000000000000;;	type DescribeSpotInstanceRequestsOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more Spot instance requests.
0000000000000000000000000000000000000000;;		SpotInstanceRequests []*SpotInstanceRequest `locationName:"spotInstanceRequestSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeSpotInstanceRequestsOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeSpotInstanceRequestsOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSpotInstanceRequests sets the SpotInstanceRequests field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSpotInstanceRequestsOutput) SetSpotInstanceRequests(v []*SpotInstanceRequest) *DescribeSpotInstanceRequestsOutput {
0000000000000000000000000000000000000000;;		s.SpotInstanceRequests = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeSpotPriceHistory.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeSpotPriceHistoryRequest
0000000000000000000000000000000000000000;;	type DescribeSpotPriceHistoryInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Filters the results by the specified Availability Zone.
0000000000000000000000000000000000000000;;		AvailabilityZone *string `locationName:"availabilityZone" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The date and time, up to the current date, from which to stop retrieving
0000000000000000000000000000000000000000;;		// the price history data, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
0000000000000000000000000000000000000000;;		EndTime *time.Time `locationName:"endTime" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more filters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * availability-zone - The Availability Zone for which prices should be
0000000000000000000000000000000000000000;;		//    returned.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * instance-type - The type of instance (for example, m3.medium).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * product-description - The product description for the Spot price (Linux/UNIX
0000000000000000000000000000000000000000;;		//    | SUSE Linux | Windows | Linux/UNIX (Amazon VPC) | SUSE Linux (Amazon
0000000000000000000000000000000000000000;;		//    VPC) | Windows (Amazon VPC)).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * spot-price - The Spot price. The value must match exactly (or use wildcards;
0000000000000000000000000000000000000000;;		//    greater than or less than comparison is not supported).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * timestamp - The timestamp of the Spot price history, in UTC format (for
0000000000000000000000000000000000000000;;		//    example, YYYY-MM-DDTHH:MM:SSZ). You can use wildcards (* and ?). Greater
0000000000000000000000000000000000000000;;		//    than or less than comparison is not supported.
0000000000000000000000000000000000000000;;		Filters []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Filters the results by the specified instance types. Note that T2 and HS1
0000000000000000000000000000000000000000;;		// instance types are not supported.
0000000000000000000000000000000000000000;;		InstanceTypes []*string `locationName:"InstanceType" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum number of results to return in a single call. Specify a value
0000000000000000000000000000000000000000;;		// between 1 and 1000. The default value is 1000. To retrieve the remaining
0000000000000000000000000000000000000000;;		// results, make another call with the returned NextToken value.
0000000000000000000000000000000000000000;;		MaxResults *int64 `locationName:"maxResults" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token for the next set of results.
0000000000000000000000000000000000000000;;		NextToken *string `locationName:"nextToken" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Filters the results by the specified basic product descriptions.
0000000000000000000000000000000000000000;;		ProductDescriptions []*string `locationName:"ProductDescription" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The date and time, up to the past 90 days, from which to start retrieving
0000000000000000000000000000000000000000;;		// the price history data, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
0000000000000000000000000000000000000000;;		StartTime *time.Time `locationName:"startTime" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeSpotPriceHistoryInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeSpotPriceHistoryInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAvailabilityZone sets the AvailabilityZone field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSpotPriceHistoryInput) SetAvailabilityZone(v string) *DescribeSpotPriceHistoryInput {
0000000000000000000000000000000000000000;;		s.AvailabilityZone = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSpotPriceHistoryInput) SetDryRun(v bool) *DescribeSpotPriceHistoryInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEndTime sets the EndTime field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSpotPriceHistoryInput) SetEndTime(v time.Time) *DescribeSpotPriceHistoryInput {
0000000000000000000000000000000000000000;;		s.EndTime = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFilters sets the Filters field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSpotPriceHistoryInput) SetFilters(v []*Filter) *DescribeSpotPriceHistoryInput {
0000000000000000000000000000000000000000;;		s.Filters = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceTypes sets the InstanceTypes field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSpotPriceHistoryInput) SetInstanceTypes(v []*string) *DescribeSpotPriceHistoryInput {
0000000000000000000000000000000000000000;;		s.InstanceTypes = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxResults sets the MaxResults field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSpotPriceHistoryInput) SetMaxResults(v int64) *DescribeSpotPriceHistoryInput {
0000000000000000000000000000000000000000;;		s.MaxResults = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSpotPriceHistoryInput) SetNextToken(v string) *DescribeSpotPriceHistoryInput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetProductDescriptions sets the ProductDescriptions field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSpotPriceHistoryInput) SetProductDescriptions(v []*string) *DescribeSpotPriceHistoryInput {
0000000000000000000000000000000000000000;;		s.ProductDescriptions = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStartTime sets the StartTime field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSpotPriceHistoryInput) SetStartTime(v time.Time) *DescribeSpotPriceHistoryInput {
0000000000000000000000000000000000000000;;		s.StartTime = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeSpotPriceHistory.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeSpotPriceHistoryResult
0000000000000000000000000000000000000000;;	type DescribeSpotPriceHistoryOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token required to retrieve the next set of results. This value is null
0000000000000000000000000000000000000000;;		// when there are no more results to return.
0000000000000000000000000000000000000000;;		NextToken *string `locationName:"nextToken" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The historical Spot prices.
0000000000000000000000000000000000000000;;		SpotPriceHistory []*SpotPrice `locationName:"spotPriceHistorySet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeSpotPriceHistoryOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeSpotPriceHistoryOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSpotPriceHistoryOutput) SetNextToken(v string) *DescribeSpotPriceHistoryOutput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSpotPriceHistory sets the SpotPriceHistory field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSpotPriceHistoryOutput) SetSpotPriceHistory(v []*SpotPrice) *DescribeSpotPriceHistoryOutput {
0000000000000000000000000000000000000000;;		s.SpotPriceHistory = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeStaleSecurityGroupsRequest
0000000000000000000000000000000000000000;;	type DescribeStaleSecurityGroupsInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the operation, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum number of items to return for this request. The request returns
0000000000000000000000000000000000000000;;		// a token that you can specify in a subsequent call to get the next set of
0000000000000000000000000000000000000000;;		// results.
0000000000000000000000000000000000000000;;		MaxResults *int64 `min:"5" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token for the next set of items to return. (You received this token from
0000000000000000000000000000000000000000;;		// a prior call.)
0000000000000000000000000000000000000000;;		NextToken *string `min:"1" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// VpcId is a required field
0000000000000000000000000000000000000000;;		VpcId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeStaleSecurityGroupsInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeStaleSecurityGroupsInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DescribeStaleSecurityGroupsInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DescribeStaleSecurityGroupsInput"}
0000000000000000000000000000000000000000;;		if s.MaxResults != nil && *s.MaxResults < 5 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinValue("MaxResults", 5))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.NextToken != nil && len(*s.NextToken) < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("NextToken", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.VpcId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("VpcId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeStaleSecurityGroupsInput) SetDryRun(v bool) *DescribeStaleSecurityGroupsInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxResults sets the MaxResults field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeStaleSecurityGroupsInput) SetMaxResults(v int64) *DescribeStaleSecurityGroupsInput {
0000000000000000000000000000000000000000;;		s.MaxResults = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeStaleSecurityGroupsInput) SetNextToken(v string) *DescribeStaleSecurityGroupsInput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcId sets the VpcId field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeStaleSecurityGroupsInput) SetVpcId(v string) *DescribeStaleSecurityGroupsInput {
0000000000000000000000000000000000000000;;		s.VpcId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeStaleSecurityGroupsResult
0000000000000000000000000000000000000000;;	type DescribeStaleSecurityGroupsOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token to use when requesting the next set of items. If there are no additional
0000000000000000000000000000000000000000;;		// items to return, the string is empty.
0000000000000000000000000000000000000000;;		NextToken *string `locationName:"nextToken" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the stale security groups.
0000000000000000000000000000000000000000;;		StaleSecurityGroupSet []*StaleSecurityGroup `locationName:"staleSecurityGroupSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeStaleSecurityGroupsOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeStaleSecurityGroupsOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeStaleSecurityGroupsOutput) SetNextToken(v string) *DescribeStaleSecurityGroupsOutput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStaleSecurityGroupSet sets the StaleSecurityGroupSet field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeStaleSecurityGroupsOutput) SetStaleSecurityGroupSet(v []*StaleSecurityGroup) *DescribeStaleSecurityGroupsOutput {
0000000000000000000000000000000000000000;;		s.StaleSecurityGroupSet = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeSubnets.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeSubnetsRequest
0000000000000000000000000000000000000000;;	type DescribeSubnetsInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more filters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * availabilityZone - The Availability Zone for the subnet. You can also
0000000000000000000000000000000000000000;;		//    use availability-zone as the filter name.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * available-ip-address-count - The number of IPv4 addresses in the subnet
0000000000000000000000000000000000000000;;		//    that are available.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * cidrBlock - The IPv4 CIDR block of the subnet. The CIDR block you specify
0000000000000000000000000000000000000000;;		//    must exactly match the subnet's CIDR block for information to be returned
0000000000000000000000000000000000000000;;		//    for the subnet. You can also use cidr or cidr-block as the filter names.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * defaultForAz - Indicates whether this is the default subnet for the
0000000000000000000000000000000000000000;;		//    Availability Zone. You can also use default-for-az as the filter name.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * ipv6-cidr-block-association.ipv6-cidr-block - An IPv6 CIDR block associated
0000000000000000000000000000000000000000;;		//    with the subnet.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * ipv6-cidr-block-association.association-id - An association ID for an
0000000000000000000000000000000000000000;;		//    IPv6 CIDR block associated with the subnet.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * ipv6-cidr-block-association.state - The state of an IPv6 CIDR block
0000000000000000000000000000000000000000;;		//    associated with the subnet.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * state - The state of the subnet (pending | available).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * subnet-id - The ID of the subnet.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag:key=value - The key/value combination of a tag assigned to the resource.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag-key - The key of a tag assigned to the resource. This filter is
0000000000000000000000000000000000000000;;		//    independent of the tag-value filter. For example, if you use both the
0000000000000000000000000000000000000000;;		//    filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources
0000000000000000000000000000000000000000;;		//    assigned both the tag key Purpose (regardless of what the tag's value
0000000000000000000000000000000000000000;;		//    is), and the tag value X (regardless of what the tag's key is). If you
0000000000000000000000000000000000000000;;		//    want to list only resources where Purpose is X, see the tag:key=value
0000000000000000000000000000000000000000;;		//    filter.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag-value - The value of a tag assigned to the resource. This filter
0000000000000000000000000000000000000000;;		//    is independent of the tag-key filter.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * vpc-id - The ID of the VPC for the subnet.
0000000000000000000000000000000000000000;;		Filters []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more subnet IDs.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: Describes all your subnets.
0000000000000000000000000000000000000000;;		SubnetIds []*string `locationName:"SubnetId" locationNameList:"SubnetId" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeSubnetsInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeSubnetsInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSubnetsInput) SetDryRun(v bool) *DescribeSubnetsInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFilters sets the Filters field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSubnetsInput) SetFilters(v []*Filter) *DescribeSubnetsInput {
0000000000000000000000000000000000000000;;		s.Filters = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSubnetIds sets the SubnetIds field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSubnetsInput) SetSubnetIds(v []*string) *DescribeSubnetsInput {
0000000000000000000000000000000000000000;;		s.SubnetIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeSubnets.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeSubnetsResult
0000000000000000000000000000000000000000;;	type DescribeSubnetsOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about one or more subnets.
0000000000000000000000000000000000000000;;		Subnets []*Subnet `locationName:"subnetSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeSubnetsOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeSubnetsOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSubnets sets the Subnets field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeSubnetsOutput) SetSubnets(v []*Subnet) *DescribeSubnetsOutput {
0000000000000000000000000000000000000000;;		s.Subnets = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeTags.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeTagsRequest
0000000000000000000000000000000000000000;;	type DescribeTagsInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more filters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * key - The tag key.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * resource-id - The resource ID.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * resource-type - The resource type (customer-gateway | dhcp-options |
0000000000000000000000000000000000000000;;		//    image | instance | internet-gateway | network-acl | network-interface
0000000000000000000000000000000000000000;;		//    | reserved-instances | route-table | security-group | snapshot | spot-instances-request
0000000000000000000000000000000000000000;;		//    | subnet | volume | vpc | vpn-connection | vpn-gateway).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * value - The tag value.
0000000000000000000000000000000000000000;;		Filters []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum number of results to return in a single call. This value can
0000000000000000000000000000000000000000;;		// be between 5 and 1000. To retrieve the remaining results, make another call
0000000000000000000000000000000000000000;;		// with the returned NextToken value.
0000000000000000000000000000000000000000;;		MaxResults *int64 `locationName:"maxResults" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token to retrieve the next page of results.
0000000000000000000000000000000000000000;;		NextToken *string `locationName:"nextToken" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeTagsInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeTagsInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeTagsInput) SetDryRun(v bool) *DescribeTagsInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFilters sets the Filters field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeTagsInput) SetFilters(v []*Filter) *DescribeTagsInput {
0000000000000000000000000000000000000000;;		s.Filters = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxResults sets the MaxResults field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeTagsInput) SetMaxResults(v int64) *DescribeTagsInput {
0000000000000000000000000000000000000000;;		s.MaxResults = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeTagsInput) SetNextToken(v string) *DescribeTagsInput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeTags.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeTagsResult
0000000000000000000000000000000000000000;;	type DescribeTagsOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token to use to retrieve the next page of results. This value is null
0000000000000000000000000000000000000000;;		// when there are no more results to return..
0000000000000000000000000000000000000000;;		NextToken *string `locationName:"nextToken" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A list of tags.
0000000000000000000000000000000000000000;;		Tags []*TagDescription `locationName:"tagSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeTagsOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeTagsOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeTagsOutput) SetNextToken(v string) *DescribeTagsOutput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTags sets the Tags field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeTagsOutput) SetTags(v []*TagDescription) *DescribeTagsOutput {
0000000000000000000000000000000000000000;;		s.Tags = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeVolumeAttribute.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVolumeAttributeRequest
0000000000000000000000000000000000000000;;	type DescribeVolumeAttributeInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The instance attribute.
0000000000000000000000000000000000000000;;		Attribute *string `type:"string" enum:"VolumeAttributeName"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the volume.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// VolumeId is a required field
0000000000000000000000000000000000000000;;		VolumeId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVolumeAttributeInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVolumeAttributeInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DescribeVolumeAttributeInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DescribeVolumeAttributeInput"}
0000000000000000000000000000000000000000;;		if s.VolumeId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("VolumeId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAttribute sets the Attribute field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVolumeAttributeInput) SetAttribute(v string) *DescribeVolumeAttributeInput {
0000000000000000000000000000000000000000;;		s.Attribute = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVolumeAttributeInput) SetDryRun(v bool) *DescribeVolumeAttributeInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVolumeId sets the VolumeId field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVolumeAttributeInput) SetVolumeId(v string) *DescribeVolumeAttributeInput {
0000000000000000000000000000000000000000;;		s.VolumeId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeVolumeAttribute.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVolumeAttributeResult
0000000000000000000000000000000000000000;;	type DescribeVolumeAttributeOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The state of autoEnableIO attribute.
0000000000000000000000000000000000000000;;		AutoEnableIO *AttributeBooleanValue `locationName:"autoEnableIO" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A list of product codes.
0000000000000000000000000000000000000000;;		ProductCodes []*ProductCode `locationName:"productCodes" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the volume.
0000000000000000000000000000000000000000;;		VolumeId *string `locationName:"volumeId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVolumeAttributeOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVolumeAttributeOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAutoEnableIO sets the AutoEnableIO field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVolumeAttributeOutput) SetAutoEnableIO(v *AttributeBooleanValue) *DescribeVolumeAttributeOutput {
0000000000000000000000000000000000000000;;		s.AutoEnableIO = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetProductCodes sets the ProductCodes field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVolumeAttributeOutput) SetProductCodes(v []*ProductCode) *DescribeVolumeAttributeOutput {
0000000000000000000000000000000000000000;;		s.ProductCodes = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVolumeId sets the VolumeId field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVolumeAttributeOutput) SetVolumeId(v string) *DescribeVolumeAttributeOutput {
0000000000000000000000000000000000000000;;		s.VolumeId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeVolumeStatus.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVolumeStatusRequest
0000000000000000000000000000000000000000;;	type DescribeVolumeStatusInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more filters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * action.code - The action code for the event (for example, enable-volume-io).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * action.description - A description of the action.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * action.event-id - The event ID associated with the action.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * availability-zone - The Availability Zone of the instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * event.description - A description of the event.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * event.event-id - The event ID.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * event.event-type - The event type (for io-enabled: passed | failed;
0000000000000000000000000000000000000000;;		//    for io-performance: io-performance:degraded | io-performance:severely-degraded
0000000000000000000000000000000000000000;;		//    | io-performance:stalled).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * event.not-after - The latest end time for the event.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * event.not-before - The earliest start time for the event.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * volume-status.details-name - The cause for volume-status.status (io-enabled
0000000000000000000000000000000000000000;;		//    | io-performance).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * volume-status.details-status - The status of volume-status.details-name
0000000000000000000000000000000000000000;;		//    (for io-enabled: passed | failed; for io-performance: normal | degraded
0000000000000000000000000000000000000000;;		//    | severely-degraded | stalled).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * volume-status.status - The status of the volume (ok | impaired | warning
0000000000000000000000000000000000000000;;		//    | insufficient-data).
0000000000000000000000000000000000000000;;		Filters []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum number of volume results returned by DescribeVolumeStatus in
0000000000000000000000000000000000000000;;		// paginated output. When this parameter is used, the request only returns MaxResults
0000000000000000000000000000000000000000;;		// results in a single page along with a NextToken response element. The remaining
0000000000000000000000000000000000000000;;		// results of the initial request can be seen by sending another request with
0000000000000000000000000000000000000000;;		// the returned NextToken value. This value can be between 5 and 1000; if MaxResults
0000000000000000000000000000000000000000;;		// is given a value larger than 1000, only 1000 results are returned. If this
0000000000000000000000000000000000000000;;		// parameter is not used, then DescribeVolumeStatus returns all results. You
0000000000000000000000000000000000000000;;		// cannot specify this parameter and the volume IDs parameter in the same request.
0000000000000000000000000000000000000000;;		MaxResults *int64 `type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The NextToken value to include in a future DescribeVolumeStatus request.
0000000000000000000000000000000000000000;;		// When the results of the request exceed MaxResults, this value can be used
0000000000000000000000000000000000000000;;		// to retrieve the next page of results. This value is null when there are no
0000000000000000000000000000000000000000;;		// more results to return.
0000000000000000000000000000000000000000;;		NextToken *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more volume IDs.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: Describes all your volumes.
0000000000000000000000000000000000000000;;		VolumeIds []*string `locationName:"VolumeId" locationNameList:"VolumeId" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVolumeStatusInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVolumeStatusInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVolumeStatusInput) SetDryRun(v bool) *DescribeVolumeStatusInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFilters sets the Filters field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVolumeStatusInput) SetFilters(v []*Filter) *DescribeVolumeStatusInput {
0000000000000000000000000000000000000000;;		s.Filters = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxResults sets the MaxResults field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVolumeStatusInput) SetMaxResults(v int64) *DescribeVolumeStatusInput {
0000000000000000000000000000000000000000;;		s.MaxResults = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVolumeStatusInput) SetNextToken(v string) *DescribeVolumeStatusInput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVolumeIds sets the VolumeIds field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVolumeStatusInput) SetVolumeIds(v []*string) *DescribeVolumeStatusInput {
0000000000000000000000000000000000000000;;		s.VolumeIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeVolumeStatus.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVolumeStatusResult
0000000000000000000000000000000000000000;;	type DescribeVolumeStatusOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token to use to retrieve the next page of results. This value is null
0000000000000000000000000000000000000000;;		// when there are no more results to return.
0000000000000000000000000000000000000000;;		NextToken *string `locationName:"nextToken" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A list of volumes.
0000000000000000000000000000000000000000;;		VolumeStatuses []*VolumeStatusItem `locationName:"volumeStatusSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVolumeStatusOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVolumeStatusOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVolumeStatusOutput) SetNextToken(v string) *DescribeVolumeStatusOutput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVolumeStatuses sets the VolumeStatuses field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVolumeStatusOutput) SetVolumeStatuses(v []*VolumeStatusItem) *DescribeVolumeStatusOutput {
0000000000000000000000000000000000000000;;		s.VolumeStatuses = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeVolumes.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVolumesRequest
0000000000000000000000000000000000000000;;	type DescribeVolumesInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more filters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * attachment.attach-time - The time stamp when the attachment initiated.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * attachment.delete-on-termination - Whether the volume is deleted on
0000000000000000000000000000000000000000;;		//    instance termination.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * attachment.device - The device name that is exposed to the instance
0000000000000000000000000000000000000000;;		//    (for example, /dev/sda1).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * attachment.instance-id - The ID of the instance the volume is attached
0000000000000000000000000000000000000000;;		//    to.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * attachment.status - The attachment state (attaching | attached | detaching
0000000000000000000000000000000000000000;;		//    | detached).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * availability-zone - The Availability Zone in which the volume was created.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * create-time - The time stamp when the volume was created.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * encrypted - The encryption status of the volume.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * size - The size of the volume, in GiB.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * snapshot-id - The snapshot from which the volume was created.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * status - The status of the volume (creating | available | in-use | deleting
0000000000000000000000000000000000000000;;		//    | deleted | error).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag:key=value - The key/value combination of a tag assigned to the resource.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag-key - The key of a tag assigned to the resource. This filter is
0000000000000000000000000000000000000000;;		//    independent of the tag-value filter. For example, if you use both the
0000000000000000000000000000000000000000;;		//    filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources
0000000000000000000000000000000000000000;;		//    assigned both the tag key Purpose (regardless of what the tag's value
0000000000000000000000000000000000000000;;		//    is), and the tag value X (regardless of what the tag's key is). If you
0000000000000000000000000000000000000000;;		//    want to list only resources where Purpose is X, see the tag:key=value
0000000000000000000000000000000000000000;;		//    filter.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag-value - The value of a tag assigned to the resource. This filter
0000000000000000000000000000000000000000;;		//    is independent of the tag-key filter.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * volume-id - The volume ID.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * volume-type - The Amazon EBS volume type. This can be gp2 for General
0000000000000000000000000000000000000000;;		//    Purpose SSD, io1 for Provisioned IOPS SSD, st1 for Throughput Optimized
0000000000000000000000000000000000000000;;		//    HDD, sc1 for Cold HDD, or standard for Magnetic volumes.
0000000000000000000000000000000000000000;;		Filters []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum number of volume results returned by DescribeVolumes in paginated
0000000000000000000000000000000000000000;;		// output. When this parameter is used, DescribeVolumes only returns MaxResults
0000000000000000000000000000000000000000;;		// results in a single page along with a NextToken response element. The remaining
0000000000000000000000000000000000000000;;		// results of the initial request can be seen by sending another DescribeVolumes
0000000000000000000000000000000000000000;;		// request with the returned NextToken value. This value can be between 5 and
0000000000000000000000000000000000000000;;		// 1000; if MaxResults is given a value larger than 1000, only 1000 results
0000000000000000000000000000000000000000;;		// are returned. If this parameter is not used, then DescribeVolumes returns
0000000000000000000000000000000000000000;;		// all results. You cannot specify this parameter and the volume IDs parameter
0000000000000000000000000000000000000000;;		// in the same request.
0000000000000000000000000000000000000000;;		MaxResults *int64 `locationName:"maxResults" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The NextToken value returned from a previous paginated DescribeVolumes request
0000000000000000000000000000000000000000;;		// where MaxResults was used and the results exceeded the value of that parameter.
0000000000000000000000000000000000000000;;		// Pagination continues from the end of the previous results that returned the
0000000000000000000000000000000000000000;;		// NextToken value. This value is null when there are no more results to return.
0000000000000000000000000000000000000000;;		NextToken *string `locationName:"nextToken" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more volume IDs.
0000000000000000000000000000000000000000;;		VolumeIds []*string `locationName:"VolumeId" locationNameList:"VolumeId" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVolumesInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVolumesInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVolumesInput) SetDryRun(v bool) *DescribeVolumesInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFilters sets the Filters field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVolumesInput) SetFilters(v []*Filter) *DescribeVolumesInput {
0000000000000000000000000000000000000000;;		s.Filters = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxResults sets the MaxResults field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVolumesInput) SetMaxResults(v int64) *DescribeVolumesInput {
0000000000000000000000000000000000000000;;		s.MaxResults = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVolumesInput) SetNextToken(v string) *DescribeVolumesInput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVolumeIds sets the VolumeIds field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVolumesInput) SetVolumeIds(v []*string) *DescribeVolumesInput {
0000000000000000000000000000000000000000;;		s.VolumeIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeVolumes.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVolumesResult
0000000000000000000000000000000000000000;;	type DescribeVolumesOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The NextToken value to include in a future DescribeVolumes request. When
0000000000000000000000000000000000000000;;		// the results of a DescribeVolumes request exceed MaxResults, this value can
0000000000000000000000000000000000000000;;		// be used to retrieve the next page of results. This value is null when there
0000000000000000000000000000000000000000;;		// are no more results to return.
0000000000000000000000000000000000000000;;		NextToken *string `locationName:"nextToken" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the volumes.
0000000000000000000000000000000000000000;;		Volumes []*Volume `locationName:"volumeSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVolumesOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVolumesOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVolumesOutput) SetNextToken(v string) *DescribeVolumesOutput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVolumes sets the Volumes field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVolumesOutput) SetVolumes(v []*Volume) *DescribeVolumesOutput {
0000000000000000000000000000000000000000;;		s.Volumes = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeVpcAttribute.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVpcAttributeRequest
0000000000000000000000000000000000000000;;	type DescribeVpcAttributeInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The VPC attribute.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Attribute is a required field
0000000000000000000000000000000000000000;;		Attribute *string `type:"string" required:"true" enum:"VpcAttributeName"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// VpcId is a required field
0000000000000000000000000000000000000000;;		VpcId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVpcAttributeInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVpcAttributeInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DescribeVpcAttributeInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DescribeVpcAttributeInput"}
0000000000000000000000000000000000000000;;		if s.Attribute == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Attribute"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.VpcId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("VpcId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAttribute sets the Attribute field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVpcAttributeInput) SetAttribute(v string) *DescribeVpcAttributeInput {
0000000000000000000000000000000000000000;;		s.Attribute = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVpcAttributeInput) SetDryRun(v bool) *DescribeVpcAttributeInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcId sets the VpcId field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVpcAttributeInput) SetVpcId(v string) *DescribeVpcAttributeInput {
0000000000000000000000000000000000000000;;		s.VpcId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeVpcAttribute.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVpcAttributeResult
0000000000000000000000000000000000000000;;	type DescribeVpcAttributeOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether the instances launched in the VPC get DNS hostnames. If
0000000000000000000000000000000000000000;;		// this attribute is true, instances in the VPC get DNS hostnames; otherwise,
0000000000000000000000000000000000000000;;		// they do not.
0000000000000000000000000000000000000000;;		EnableDnsHostnames *AttributeBooleanValue `locationName:"enableDnsHostnames" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether DNS resolution is enabled for the VPC. If this attribute
0000000000000000000000000000000000000000;;		// is true, the Amazon DNS server resolves DNS hostnames for your instances
0000000000000000000000000000000000000000;;		// to their corresponding IP addresses; otherwise, it does not.
0000000000000000000000000000000000000000;;		EnableDnsSupport *AttributeBooleanValue `locationName:"enableDnsSupport" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC.
0000000000000000000000000000000000000000;;		VpcId *string `locationName:"vpcId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVpcAttributeOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVpcAttributeOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEnableDnsHostnames sets the EnableDnsHostnames field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVpcAttributeOutput) SetEnableDnsHostnames(v *AttributeBooleanValue) *DescribeVpcAttributeOutput {
0000000000000000000000000000000000000000;;		s.EnableDnsHostnames = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEnableDnsSupport sets the EnableDnsSupport field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVpcAttributeOutput) SetEnableDnsSupport(v *AttributeBooleanValue) *DescribeVpcAttributeOutput {
0000000000000000000000000000000000000000;;		s.EnableDnsSupport = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcId sets the VpcId field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVpcAttributeOutput) SetVpcId(v string) *DescribeVpcAttributeOutput {
0000000000000000000000000000000000000000;;		s.VpcId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeVpcClassicLinkDnsSupport.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVpcClassicLinkDnsSupportRequest
0000000000000000000000000000000000000000;;	type DescribeVpcClassicLinkDnsSupportInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum number of items to return for this request. The request returns
0000000000000000000000000000000000000000;;		// a token that you can specify in a subsequent call to get the next set of
0000000000000000000000000000000000000000;;		// results.
0000000000000000000000000000000000000000;;		MaxResults *int64 `locationName:"maxResults" min:"5" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token for the next set of items to return. (You received this token from
0000000000000000000000000000000000000000;;		// a prior call.)
0000000000000000000000000000000000000000;;		NextToken *string `locationName:"nextToken" min:"1" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more VPC IDs.
0000000000000000000000000000000000000000;;		VpcIds []*string `locationNameList:"VpcId" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVpcClassicLinkDnsSupportInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVpcClassicLinkDnsSupportInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DescribeVpcClassicLinkDnsSupportInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DescribeVpcClassicLinkDnsSupportInput"}
0000000000000000000000000000000000000000;;		if s.MaxResults != nil && *s.MaxResults < 5 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinValue("MaxResults", 5))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.NextToken != nil && len(*s.NextToken) < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("NextToken", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxResults sets the MaxResults field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVpcClassicLinkDnsSupportInput) SetMaxResults(v int64) *DescribeVpcClassicLinkDnsSupportInput {
0000000000000000000000000000000000000000;;		s.MaxResults = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVpcClassicLinkDnsSupportInput) SetNextToken(v string) *DescribeVpcClassicLinkDnsSupportInput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcIds sets the VpcIds field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVpcClassicLinkDnsSupportInput) SetVpcIds(v []*string) *DescribeVpcClassicLinkDnsSupportInput {
0000000000000000000000000000000000000000;;		s.VpcIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeVpcClassicLinkDnsSupport.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVpcClassicLinkDnsSupportResult
0000000000000000000000000000000000000000;;	type DescribeVpcClassicLinkDnsSupportOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token to use when requesting the next set of items.
0000000000000000000000000000000000000000;;		NextToken *string `locationName:"nextToken" min:"1" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the ClassicLink DNS support status of the VPCs.
0000000000000000000000000000000000000000;;		Vpcs []*ClassicLinkDnsSupport `locationName:"vpcs" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVpcClassicLinkDnsSupportOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVpcClassicLinkDnsSupportOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVpcClassicLinkDnsSupportOutput) SetNextToken(v string) *DescribeVpcClassicLinkDnsSupportOutput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcs sets the Vpcs field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVpcClassicLinkDnsSupportOutput) SetVpcs(v []*ClassicLinkDnsSupport) *DescribeVpcClassicLinkDnsSupportOutput {
0000000000000000000000000000000000000000;;		s.Vpcs = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeVpcClassicLink.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVpcClassicLinkRequest
0000000000000000000000000000000000000000;;	type DescribeVpcClassicLinkInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more filters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * is-classic-link-enabled - Whether the VPC is enabled for ClassicLink
0000000000000000000000000000000000000000;;		//    (true | false).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag:key=value - The key/value combination of a tag assigned to the resource.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag-key - The key of a tag assigned to the resource. This filter is
0000000000000000000000000000000000000000;;		//    independent of the tag-value filter. For example, if you use both the
0000000000000000000000000000000000000000;;		//    filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources
0000000000000000000000000000000000000000;;		//    assigned both the tag key Purpose (regardless of what the tag's value
0000000000000000000000000000000000000000;;		//    is), and the tag value X (regardless of what the tag's key is). If you
0000000000000000000000000000000000000000;;		//    want to list only resources where Purpose is X, see the tag:key=value
0000000000000000000000000000000000000000;;		//    filter.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag-value - The value of a tag assigned to the resource. This filter
0000000000000000000000000000000000000000;;		//    is independent of the tag-key filter.
0000000000000000000000000000000000000000;;		Filters []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more VPCs for which you want to describe the ClassicLink status.
0000000000000000000000000000000000000000;;		VpcIds []*string `locationName:"VpcId" locationNameList:"VpcId" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVpcClassicLinkInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVpcClassicLinkInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVpcClassicLinkInput) SetDryRun(v bool) *DescribeVpcClassicLinkInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFilters sets the Filters field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVpcClassicLinkInput) SetFilters(v []*Filter) *DescribeVpcClassicLinkInput {
0000000000000000000000000000000000000000;;		s.Filters = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcIds sets the VpcIds field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVpcClassicLinkInput) SetVpcIds(v []*string) *DescribeVpcClassicLinkInput {
0000000000000000000000000000000000000000;;		s.VpcIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeVpcClassicLink.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVpcClassicLinkResult
0000000000000000000000000000000000000000;;	type DescribeVpcClassicLinkOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ClassicLink status of one or more VPCs.
0000000000000000000000000000000000000000;;		Vpcs []*VpcClassicLink `locationName:"vpcSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVpcClassicLinkOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVpcClassicLinkOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcs sets the Vpcs field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVpcClassicLinkOutput) SetVpcs(v []*VpcClassicLink) *DescribeVpcClassicLinkOutput {
0000000000000000000000000000000000000000;;		s.Vpcs = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeVpcEndpointServices.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVpcEndpointServicesRequest
0000000000000000000000000000000000000000;;	type DescribeVpcEndpointServicesInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum number of items to return for this request. The request returns
0000000000000000000000000000000000000000;;		// a token that you can specify in a subsequent call to get the next set of
0000000000000000000000000000000000000000;;		// results.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Constraint: If the value is greater than 1000, we return only 1000 items.
0000000000000000000000000000000000000000;;		MaxResults *int64 `type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token for the next set of items to return. (You received this token from
0000000000000000000000000000000000000000;;		// a prior call.)
0000000000000000000000000000000000000000;;		NextToken *string `type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVpcEndpointServicesInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVpcEndpointServicesInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVpcEndpointServicesInput) SetDryRun(v bool) *DescribeVpcEndpointServicesInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxResults sets the MaxResults field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVpcEndpointServicesInput) SetMaxResults(v int64) *DescribeVpcEndpointServicesInput {
0000000000000000000000000000000000000000;;		s.MaxResults = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVpcEndpointServicesInput) SetNextToken(v string) *DescribeVpcEndpointServicesInput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeVpcEndpointServices.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVpcEndpointServicesResult
0000000000000000000000000000000000000000;;	type DescribeVpcEndpointServicesOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token to use when requesting the next set of items. If there are no additional
0000000000000000000000000000000000000000;;		// items to return, the string is empty.
0000000000000000000000000000000000000000;;		NextToken *string `locationName:"nextToken" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A list of supported AWS services.
0000000000000000000000000000000000000000;;		ServiceNames []*string `locationName:"serviceNameSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVpcEndpointServicesOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVpcEndpointServicesOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVpcEndpointServicesOutput) SetNextToken(v string) *DescribeVpcEndpointServicesOutput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetServiceNames sets the ServiceNames field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVpcEndpointServicesOutput) SetServiceNames(v []*string) *DescribeVpcEndpointServicesOutput {
0000000000000000000000000000000000000000;;		s.ServiceNames = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeVpcEndpoints.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVpcEndpointsRequest
0000000000000000000000000000000000000000;;	type DescribeVpcEndpointsInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more filters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * service-name: The name of the AWS service.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * vpc-id: The ID of the VPC in which the endpoint resides.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * vpc-endpoint-id: The ID of the endpoint.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * vpc-endpoint-state: The state of the endpoint. (pending | available
0000000000000000000000000000000000000000;;		//    | deleting | deleted)
0000000000000000000000000000000000000000;;		Filters []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum number of items to return for this request. The request returns
0000000000000000000000000000000000000000;;		// a token that you can specify in a subsequent call to get the next set of
0000000000000000000000000000000000000000;;		// results.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Constraint: If the value is greater than 1000, we return only 1000 items.
0000000000000000000000000000000000000000;;		MaxResults *int64 `type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token for the next set of items to return. (You received this token from
0000000000000000000000000000000000000000;;		// a prior call.)
0000000000000000000000000000000000000000;;		NextToken *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more endpoint IDs.
0000000000000000000000000000000000000000;;		VpcEndpointIds []*string `locationName:"VpcEndpointId" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVpcEndpointsInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVpcEndpointsInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVpcEndpointsInput) SetDryRun(v bool) *DescribeVpcEndpointsInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFilters sets the Filters field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVpcEndpointsInput) SetFilters(v []*Filter) *DescribeVpcEndpointsInput {
0000000000000000000000000000000000000000;;		s.Filters = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxResults sets the MaxResults field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVpcEndpointsInput) SetMaxResults(v int64) *DescribeVpcEndpointsInput {
0000000000000000000000000000000000000000;;		s.MaxResults = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVpcEndpointsInput) SetNextToken(v string) *DescribeVpcEndpointsInput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcEndpointIds sets the VpcEndpointIds field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVpcEndpointsInput) SetVpcEndpointIds(v []*string) *DescribeVpcEndpointsInput {
0000000000000000000000000000000000000000;;		s.VpcEndpointIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeVpcEndpoints.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVpcEndpointsResult
0000000000000000000000000000000000000000;;	type DescribeVpcEndpointsOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token to use when requesting the next set of items. If there are no additional
0000000000000000000000000000000000000000;;		// items to return, the string is empty.
0000000000000000000000000000000000000000;;		NextToken *string `locationName:"nextToken" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the endpoints.
0000000000000000000000000000000000000000;;		VpcEndpoints []*VpcEndpoint `locationName:"vpcEndpointSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVpcEndpointsOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVpcEndpointsOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVpcEndpointsOutput) SetNextToken(v string) *DescribeVpcEndpointsOutput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcEndpoints sets the VpcEndpoints field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVpcEndpointsOutput) SetVpcEndpoints(v []*VpcEndpoint) *DescribeVpcEndpointsOutput {
0000000000000000000000000000000000000000;;		s.VpcEndpoints = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeVpcPeeringConnections.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVpcPeeringConnectionsRequest
0000000000000000000000000000000000000000;;	type DescribeVpcPeeringConnectionsInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more filters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * accepter-vpc-info.cidr-block - The IPv4 CIDR block of the peer VPC.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * accepter-vpc-info.owner-id - The AWS account ID of the owner of the
0000000000000000000000000000000000000000;;		//    peer VPC.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * accepter-vpc-info.vpc-id - The ID of the peer VPC.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * expiration-time - The expiration date and time for the VPC peering connection.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * requester-vpc-info.cidr-block - The IPv4 CIDR block of the requester's
0000000000000000000000000000000000000000;;		//    VPC.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * requester-vpc-info.owner-id - The AWS account ID of the owner of the
0000000000000000000000000000000000000000;;		//    requester VPC.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * requester-vpc-info.vpc-id - The ID of the requester VPC.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * status-code - The status of the VPC peering connection (pending-acceptance
0000000000000000000000000000000000000000;;		//    | failed | expired | provisioning | active | deleted | rejected).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * status-message - A message that provides more information about the
0000000000000000000000000000000000000000;;		//    status of the VPC peering connection, if applicable.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag:key=value - The key/value combination of a tag assigned to the resource.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag-key - The key of a tag assigned to the resource. This filter is
0000000000000000000000000000000000000000;;		//    independent of the tag-value filter. For example, if you use both the
0000000000000000000000000000000000000000;;		//    filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources
0000000000000000000000000000000000000000;;		//    assigned both the tag key Purpose (regardless of what the tag's value
0000000000000000000000000000000000000000;;		//    is), and the tag value X (regardless of what the tag's key is). If you
0000000000000000000000000000000000000000;;		//    want to list only resources where Purpose is X, see the tag:key=value
0000000000000000000000000000000000000000;;		//    filter.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag-value - The value of a tag assigned to the resource. This filter
0000000000000000000000000000000000000000;;		//    is independent of the tag-key filter.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * vpc-peering-connection-id - The ID of the VPC peering connection.
0000000000000000000000000000000000000000;;		Filters []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more VPC peering connection IDs.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: Describes all your VPC peering connections.
0000000000000000000000000000000000000000;;		VpcPeeringConnectionIds []*string `locationName:"VpcPeeringConnectionId" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVpcPeeringConnectionsInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVpcPeeringConnectionsInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVpcPeeringConnectionsInput) SetDryRun(v bool) *DescribeVpcPeeringConnectionsInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFilters sets the Filters field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVpcPeeringConnectionsInput) SetFilters(v []*Filter) *DescribeVpcPeeringConnectionsInput {
0000000000000000000000000000000000000000;;		s.Filters = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcPeeringConnectionIds sets the VpcPeeringConnectionIds field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVpcPeeringConnectionsInput) SetVpcPeeringConnectionIds(v []*string) *DescribeVpcPeeringConnectionsInput {
0000000000000000000000000000000000000000;;		s.VpcPeeringConnectionIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeVpcPeeringConnections.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVpcPeeringConnectionsResult
0000000000000000000000000000000000000000;;	type DescribeVpcPeeringConnectionsOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the VPC peering connections.
0000000000000000000000000000000000000000;;		VpcPeeringConnections []*VpcPeeringConnection `locationName:"vpcPeeringConnectionSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVpcPeeringConnectionsOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVpcPeeringConnectionsOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcPeeringConnections sets the VpcPeeringConnections field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVpcPeeringConnectionsOutput) SetVpcPeeringConnections(v []*VpcPeeringConnection) *DescribeVpcPeeringConnectionsOutput {
0000000000000000000000000000000000000000;;		s.VpcPeeringConnections = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeVpcs.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVpcsRequest
0000000000000000000000000000000000000000;;	type DescribeVpcsInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more filters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * cidr - The IPv4 CIDR block of the VPC. The CIDR block you specify must
0000000000000000000000000000000000000000;;		//    exactly match the VPC's CIDR block for information to be returned for
0000000000000000000000000000000000000000;;		//    the VPC. Must contain the slash followed by one or two digits (for example,
0000000000000000000000000000000000000000;;		//    /28).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * dhcp-options-id - The ID of a set of DHCP options.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * ipv6-cidr-block-association.ipv6-cidr-block - An IPv6 CIDR block associated
0000000000000000000000000000000000000000;;		//    with the VPC.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * ipv6-cidr-block-association.association-id - The association ID for
0000000000000000000000000000000000000000;;		//    an IPv6 CIDR block associated with the VPC.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * ipv6-cidr-block-association.state - The state of an IPv6 CIDR block
0000000000000000000000000000000000000000;;		//    associated with the VPC.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * isDefault - Indicates whether the VPC is the default VPC.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * state - The state of the VPC (pending | available).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag:key=value - The key/value combination of a tag assigned to the resource.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag-key - The key of a tag assigned to the resource. This filter is
0000000000000000000000000000000000000000;;		//    independent of the tag-value filter. For example, if you use both the
0000000000000000000000000000000000000000;;		//    filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources
0000000000000000000000000000000000000000;;		//    assigned both the tag key Purpose (regardless of what the tag's value
0000000000000000000000000000000000000000;;		//    is), and the tag value X (regardless of what the tag's key is). If you
0000000000000000000000000000000000000000;;		//    want to list only resources where Purpose is X, see the tag:key=value
0000000000000000000000000000000000000000;;		//    filter.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag-value - The value of a tag assigned to the resource. This filter
0000000000000000000000000000000000000000;;		//    is independent of the tag-key filter.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * vpc-id - The ID of the VPC.
0000000000000000000000000000000000000000;;		Filters []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more VPC IDs.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: Describes all your VPCs.
0000000000000000000000000000000000000000;;		VpcIds []*string `locationName:"VpcId" locationNameList:"VpcId" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVpcsInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVpcsInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVpcsInput) SetDryRun(v bool) *DescribeVpcsInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFilters sets the Filters field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVpcsInput) SetFilters(v []*Filter) *DescribeVpcsInput {
0000000000000000000000000000000000000000;;		s.Filters = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcIds sets the VpcIds field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVpcsInput) SetVpcIds(v []*string) *DescribeVpcsInput {
0000000000000000000000000000000000000000;;		s.VpcIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeVpcs.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVpcsResult
0000000000000000000000000000000000000000;;	type DescribeVpcsOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about one or more VPCs.
0000000000000000000000000000000000000000;;		Vpcs []*Vpc `locationName:"vpcSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVpcsOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVpcsOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcs sets the Vpcs field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVpcsOutput) SetVpcs(v []*Vpc) *DescribeVpcsOutput {
0000000000000000000000000000000000000000;;		s.Vpcs = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeVpnConnections.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVpnConnectionsRequest
0000000000000000000000000000000000000000;;	type DescribeVpnConnectionsInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more filters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * customer-gateway-configuration - The configuration information for the
0000000000000000000000000000000000000000;;		//    customer gateway.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * customer-gateway-id - The ID of a customer gateway associated with the
0000000000000000000000000000000000000000;;		//    VPN connection.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * state - The state of the VPN connection (pending | available | deleting
0000000000000000000000000000000000000000;;		//    | deleted).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * option.static-routes-only - Indicates whether the connection has static
0000000000000000000000000000000000000000;;		//    routes only. Used for devices that do not support Border Gateway Protocol
0000000000000000000000000000000000000000;;		//    (BGP).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * route.destination-cidr-block - The destination CIDR block. This corresponds
0000000000000000000000000000000000000000;;		//    to the subnet used in a customer data center.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * bgp-asn - The BGP Autonomous System Number (ASN) associated with a BGP
0000000000000000000000000000000000000000;;		//    device.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag:key=value - The key/value combination of a tag assigned to the resource.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag-key - The key of a tag assigned to the resource. This filter is
0000000000000000000000000000000000000000;;		//    independent of the tag-value filter. For example, if you use both the
0000000000000000000000000000000000000000;;		//    filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources
0000000000000000000000000000000000000000;;		//    assigned both the tag key Purpose (regardless of what the tag's value
0000000000000000000000000000000000000000;;		//    is), and the tag value X (regardless of what the tag's key is). If you
0000000000000000000000000000000000000000;;		//    want to list only resources where Purpose is X, see the tag:key=value
0000000000000000000000000000000000000000;;		//    filter.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag-value - The value of a tag assigned to the resource. This filter
0000000000000000000000000000000000000000;;		//    is independent of the tag-key filter.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * type - The type of VPN connection. Currently the only supported type
0000000000000000000000000000000000000000;;		//    is ipsec.1.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * vpn-connection-id - The ID of the VPN connection.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * vpn-gateway-id - The ID of a virtual private gateway associated with
0000000000000000000000000000000000000000;;		//    the VPN connection.
0000000000000000000000000000000000000000;;		Filters []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more VPN connection IDs.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: Describes your VPN connections.
0000000000000000000000000000000000000000;;		VpnConnectionIds []*string `locationName:"VpnConnectionId" locationNameList:"VpnConnectionId" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVpnConnectionsInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVpnConnectionsInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVpnConnectionsInput) SetDryRun(v bool) *DescribeVpnConnectionsInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFilters sets the Filters field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVpnConnectionsInput) SetFilters(v []*Filter) *DescribeVpnConnectionsInput {
0000000000000000000000000000000000000000;;		s.Filters = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpnConnectionIds sets the VpnConnectionIds field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVpnConnectionsInput) SetVpnConnectionIds(v []*string) *DescribeVpnConnectionsInput {
0000000000000000000000000000000000000000;;		s.VpnConnectionIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeVpnConnections.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVpnConnectionsResult
0000000000000000000000000000000000000000;;	type DescribeVpnConnectionsOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about one or more VPN connections.
0000000000000000000000000000000000000000;;		VpnConnections []*VpnConnection `locationName:"vpnConnectionSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVpnConnectionsOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVpnConnectionsOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpnConnections sets the VpnConnections field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVpnConnectionsOutput) SetVpnConnections(v []*VpnConnection) *DescribeVpnConnectionsOutput {
0000000000000000000000000000000000000000;;		s.VpnConnections = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DescribeVpnGateways.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVpnGatewaysRequest
0000000000000000000000000000000000000000;;	type DescribeVpnGatewaysInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more filters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * attachment.state - The current state of the attachment between the gateway
0000000000000000000000000000000000000000;;		//    and the VPC (attaching | attached | detaching | detached).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * attachment.vpc-id - The ID of an attached VPC.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * availability-zone - The Availability Zone for the virtual private gateway
0000000000000000000000000000000000000000;;		//    (if applicable).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * state - The state of the virtual private gateway (pending | available
0000000000000000000000000000000000000000;;		//    | deleting | deleted).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag:key=value - The key/value combination of a tag assigned to the resource.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag-key - The key of a tag assigned to the resource. This filter is
0000000000000000000000000000000000000000;;		//    independent of the tag-value filter. For example, if you use both the
0000000000000000000000000000000000000000;;		//    filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources
0000000000000000000000000000000000000000;;		//    assigned both the tag key Purpose (regardless of what the tag's value
0000000000000000000000000000000000000000;;		//    is), and the tag value X (regardless of what the tag's key is). If you
0000000000000000000000000000000000000000;;		//    want to list only resources where Purpose is X, see the tag:key=value
0000000000000000000000000000000000000000;;		//    filter.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * tag-value - The value of a tag assigned to the resource. This filter
0000000000000000000000000000000000000000;;		//    is independent of the tag-key filter.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * type - The type of virtual private gateway. Currently the only supported
0000000000000000000000000000000000000000;;		//    type is ipsec.1.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * vpn-gateway-id - The ID of the virtual private gateway.
0000000000000000000000000000000000000000;;		Filters []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more virtual private gateway IDs.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: Describes all your virtual private gateways.
0000000000000000000000000000000000000000;;		VpnGatewayIds []*string `locationName:"VpnGatewayId" locationNameList:"VpnGatewayId" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVpnGatewaysInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVpnGatewaysInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVpnGatewaysInput) SetDryRun(v bool) *DescribeVpnGatewaysInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFilters sets the Filters field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVpnGatewaysInput) SetFilters(v []*Filter) *DescribeVpnGatewaysInput {
0000000000000000000000000000000000000000;;		s.Filters = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpnGatewayIds sets the VpnGatewayIds field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVpnGatewaysInput) SetVpnGatewayIds(v []*string) *DescribeVpnGatewaysInput {
0000000000000000000000000000000000000000;;		s.VpnGatewayIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DescribeVpnGateways.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DescribeVpnGatewaysResult
0000000000000000000000000000000000000000;;	type DescribeVpnGatewaysOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about one or more virtual private gateways.
0000000000000000000000000000000000000000;;		VpnGateways []*VpnGateway `locationName:"vpnGatewaySet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVpnGatewaysOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DescribeVpnGatewaysOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpnGateways sets the VpnGateways field's value.
0000000000000000000000000000000000000000;;	func (s *DescribeVpnGatewaysOutput) SetVpnGateways(v []*VpnGateway) *DescribeVpnGatewaysOutput {
0000000000000000000000000000000000000000;;		s.VpnGateways = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DetachClassicLinkVpc.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DetachClassicLinkVpcRequest
0000000000000000000000000000000000000000;;	type DetachClassicLinkVpcInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the instance to unlink from the VPC.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// InstanceId is a required field
0000000000000000000000000000000000000000;;		InstanceId *string `locationName:"instanceId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC to which the instance is linked.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// VpcId is a required field
0000000000000000000000000000000000000000;;		VpcId *string `locationName:"vpcId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DetachClassicLinkVpcInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DetachClassicLinkVpcInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DetachClassicLinkVpcInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DetachClassicLinkVpcInput"}
0000000000000000000000000000000000000000;;		if s.InstanceId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("InstanceId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.VpcId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("VpcId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DetachClassicLinkVpcInput) SetDryRun(v bool) *DetachClassicLinkVpcInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceId sets the InstanceId field's value.
0000000000000000000000000000000000000000;;	func (s *DetachClassicLinkVpcInput) SetInstanceId(v string) *DetachClassicLinkVpcInput {
0000000000000000000000000000000000000000;;		s.InstanceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcId sets the VpcId field's value.
0000000000000000000000000000000000000000;;	func (s *DetachClassicLinkVpcInput) SetVpcId(v string) *DetachClassicLinkVpcInput {
0000000000000000000000000000000000000000;;		s.VpcId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DetachClassicLinkVpc.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DetachClassicLinkVpcResult
0000000000000000000000000000000000000000;;	type DetachClassicLinkVpcOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns true if the request succeeds; otherwise, it returns an error.
0000000000000000000000000000000000000000;;		Return *bool `locationName:"return" type:"boolean"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DetachClassicLinkVpcOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DetachClassicLinkVpcOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReturn sets the Return field's value.
0000000000000000000000000000000000000000;;	func (s *DetachClassicLinkVpcOutput) SetReturn(v bool) *DetachClassicLinkVpcOutput {
0000000000000000000000000000000000000000;;		s.Return = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DetachInternetGateway.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DetachInternetGatewayRequest
0000000000000000000000000000000000000000;;	type DetachInternetGatewayInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the Internet gateway.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// InternetGatewayId is a required field
0000000000000000000000000000000000000000;;		InternetGatewayId *string `locationName:"internetGatewayId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// VpcId is a required field
0000000000000000000000000000000000000000;;		VpcId *string `locationName:"vpcId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DetachInternetGatewayInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DetachInternetGatewayInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DetachInternetGatewayInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DetachInternetGatewayInput"}
0000000000000000000000000000000000000000;;		if s.InternetGatewayId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("InternetGatewayId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.VpcId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("VpcId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DetachInternetGatewayInput) SetDryRun(v bool) *DetachInternetGatewayInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInternetGatewayId sets the InternetGatewayId field's value.
0000000000000000000000000000000000000000;;	func (s *DetachInternetGatewayInput) SetInternetGatewayId(v string) *DetachInternetGatewayInput {
0000000000000000000000000000000000000000;;		s.InternetGatewayId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcId sets the VpcId field's value.
0000000000000000000000000000000000000000;;	func (s *DetachInternetGatewayInput) SetVpcId(v string) *DetachInternetGatewayInput {
0000000000000000000000000000000000000000;;		s.VpcId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DetachInternetGatewayOutput
0000000000000000000000000000000000000000;;	type DetachInternetGatewayOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DetachInternetGatewayOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DetachInternetGatewayOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DetachNetworkInterface.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DetachNetworkInterfaceRequest
0000000000000000000000000000000000000000;;	type DetachNetworkInterfaceInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the attachment.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// AttachmentId is a required field
0000000000000000000000000000000000000000;;		AttachmentId *string `locationName:"attachmentId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Specifies whether to force a detachment.
0000000000000000000000000000000000000000;;		Force *bool `locationName:"force" type:"boolean"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DetachNetworkInterfaceInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DetachNetworkInterfaceInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DetachNetworkInterfaceInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DetachNetworkInterfaceInput"}
0000000000000000000000000000000000000000;;		if s.AttachmentId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("AttachmentId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAttachmentId sets the AttachmentId field's value.
0000000000000000000000000000000000000000;;	func (s *DetachNetworkInterfaceInput) SetAttachmentId(v string) *DetachNetworkInterfaceInput {
0000000000000000000000000000000000000000;;		s.AttachmentId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DetachNetworkInterfaceInput) SetDryRun(v bool) *DetachNetworkInterfaceInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetForce sets the Force field's value.
0000000000000000000000000000000000000000;;	func (s *DetachNetworkInterfaceInput) SetForce(v bool) *DetachNetworkInterfaceInput {
0000000000000000000000000000000000000000;;		s.Force = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DetachNetworkInterfaceOutput
0000000000000000000000000000000000000000;;	type DetachNetworkInterfaceOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DetachNetworkInterfaceOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DetachNetworkInterfaceOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DetachVolume.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DetachVolumeRequest
0000000000000000000000000000000000000000;;	type DetachVolumeInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The device name.
0000000000000000000000000000000000000000;;		Device *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Forces detachment if the previous detachment attempt did not occur cleanly
0000000000000000000000000000000000000000;;		// (for example, logging into an instance, unmounting the volume, and detaching
0000000000000000000000000000000000000000;;		// normally). This option can lead to data loss or a corrupted file system.
0000000000000000000000000000000000000000;;		// Use this option only as a last resort to detach a volume from a failed instance.
0000000000000000000000000000000000000000;;		// The instance won't have an opportunity to flush file system caches or file
0000000000000000000000000000000000000000;;		// system metadata. If you use this option, you must perform file system check
0000000000000000000000000000000000000000;;		// and repair procedures.
0000000000000000000000000000000000000000;;		Force *bool `type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the instance.
0000000000000000000000000000000000000000;;		InstanceId *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the volume.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// VolumeId is a required field
0000000000000000000000000000000000000000;;		VolumeId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DetachVolumeInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DetachVolumeInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DetachVolumeInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DetachVolumeInput"}
0000000000000000000000000000000000000000;;		if s.VolumeId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("VolumeId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDevice sets the Device field's value.
0000000000000000000000000000000000000000;;	func (s *DetachVolumeInput) SetDevice(v string) *DetachVolumeInput {
0000000000000000000000000000000000000000;;		s.Device = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DetachVolumeInput) SetDryRun(v bool) *DetachVolumeInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetForce sets the Force field's value.
0000000000000000000000000000000000000000;;	func (s *DetachVolumeInput) SetForce(v bool) *DetachVolumeInput {
0000000000000000000000000000000000000000;;		s.Force = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceId sets the InstanceId field's value.
0000000000000000000000000000000000000000;;	func (s *DetachVolumeInput) SetInstanceId(v string) *DetachVolumeInput {
0000000000000000000000000000000000000000;;		s.InstanceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVolumeId sets the VolumeId field's value.
0000000000000000000000000000000000000000;;	func (s *DetachVolumeInput) SetVolumeId(v string) *DetachVolumeInput {
0000000000000000000000000000000000000000;;		s.VolumeId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DetachVpnGateway.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DetachVpnGatewayRequest
0000000000000000000000000000000000000000;;	type DetachVpnGatewayInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// VpcId is a required field
0000000000000000000000000000000000000000;;		VpcId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the virtual private gateway.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// VpnGatewayId is a required field
0000000000000000000000000000000000000000;;		VpnGatewayId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DetachVpnGatewayInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DetachVpnGatewayInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DetachVpnGatewayInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DetachVpnGatewayInput"}
0000000000000000000000000000000000000000;;		if s.VpcId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("VpcId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.VpnGatewayId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("VpnGatewayId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DetachVpnGatewayInput) SetDryRun(v bool) *DetachVpnGatewayInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcId sets the VpcId field's value.
0000000000000000000000000000000000000000;;	func (s *DetachVpnGatewayInput) SetVpcId(v string) *DetachVpnGatewayInput {
0000000000000000000000000000000000000000;;		s.VpcId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpnGatewayId sets the VpnGatewayId field's value.
0000000000000000000000000000000000000000;;	func (s *DetachVpnGatewayInput) SetVpnGatewayId(v string) *DetachVpnGatewayInput {
0000000000000000000000000000000000000000;;		s.VpnGatewayId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DetachVpnGatewayOutput
0000000000000000000000000000000000000000;;	type DetachVpnGatewayOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DetachVpnGatewayOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DetachVpnGatewayOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a DHCP configuration option.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DhcpConfiguration
0000000000000000000000000000000000000000;;	type DhcpConfiguration struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of a DHCP option.
0000000000000000000000000000000000000000;;		Key *string `locationName:"key" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more values for the DHCP option.
0000000000000000000000000000000000000000;;		Values []*AttributeValue `locationName:"valueSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DhcpConfiguration) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DhcpConfiguration) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetKey sets the Key field's value.
0000000000000000000000000000000000000000;;	func (s *DhcpConfiguration) SetKey(v string) *DhcpConfiguration {
0000000000000000000000000000000000000000;;		s.Key = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetValues sets the Values field's value.
0000000000000000000000000000000000000000;;	func (s *DhcpConfiguration) SetValues(v []*AttributeValue) *DhcpConfiguration {
0000000000000000000000000000000000000000;;		s.Values = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a set of DHCP options.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DhcpOptions
0000000000000000000000000000000000000000;;	type DhcpOptions struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more DHCP options in the set.
0000000000000000000000000000000000000000;;		DhcpConfigurations []*DhcpConfiguration `locationName:"dhcpConfigurationSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the set of DHCP options.
0000000000000000000000000000000000000000;;		DhcpOptionsId *string `locationName:"dhcpOptionsId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Any tags assigned to the DHCP options set.
0000000000000000000000000000000000000000;;		Tags []*Tag `locationName:"tagSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DhcpOptions) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DhcpOptions) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDhcpConfigurations sets the DhcpConfigurations field's value.
0000000000000000000000000000000000000000;;	func (s *DhcpOptions) SetDhcpConfigurations(v []*DhcpConfiguration) *DhcpOptions {
0000000000000000000000000000000000000000;;		s.DhcpConfigurations = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDhcpOptionsId sets the DhcpOptionsId field's value.
0000000000000000000000000000000000000000;;	func (s *DhcpOptions) SetDhcpOptionsId(v string) *DhcpOptions {
0000000000000000000000000000000000000000;;		s.DhcpOptionsId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTags sets the Tags field's value.
0000000000000000000000000000000000000000;;	func (s *DhcpOptions) SetTags(v []*Tag) *DhcpOptions {
0000000000000000000000000000000000000000;;		s.Tags = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DisableVgwRoutePropagation.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DisableVgwRoutePropagationRequest
0000000000000000000000000000000000000000;;	type DisableVgwRoutePropagationInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the virtual private gateway.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// GatewayId is a required field
0000000000000000000000000000000000000000;;		GatewayId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the route table.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// RouteTableId is a required field
0000000000000000000000000000000000000000;;		RouteTableId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DisableVgwRoutePropagationInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DisableVgwRoutePropagationInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DisableVgwRoutePropagationInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DisableVgwRoutePropagationInput"}
0000000000000000000000000000000000000000;;		if s.GatewayId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("GatewayId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.RouteTableId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("RouteTableId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGatewayId sets the GatewayId field's value.
0000000000000000000000000000000000000000;;	func (s *DisableVgwRoutePropagationInput) SetGatewayId(v string) *DisableVgwRoutePropagationInput {
0000000000000000000000000000000000000000;;		s.GatewayId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRouteTableId sets the RouteTableId field's value.
0000000000000000000000000000000000000000;;	func (s *DisableVgwRoutePropagationInput) SetRouteTableId(v string) *DisableVgwRoutePropagationInput {
0000000000000000000000000000000000000000;;		s.RouteTableId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DisableVgwRoutePropagationOutput
0000000000000000000000000000000000000000;;	type DisableVgwRoutePropagationOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DisableVgwRoutePropagationOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DisableVgwRoutePropagationOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DisableVpcClassicLinkDnsSupport.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DisableVpcClassicLinkDnsSupportRequest
0000000000000000000000000000000000000000;;	type DisableVpcClassicLinkDnsSupportInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC.
0000000000000000000000000000000000000000;;		VpcId *string `type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DisableVpcClassicLinkDnsSupportInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DisableVpcClassicLinkDnsSupportInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcId sets the VpcId field's value.
0000000000000000000000000000000000000000;;	func (s *DisableVpcClassicLinkDnsSupportInput) SetVpcId(v string) *DisableVpcClassicLinkDnsSupportInput {
0000000000000000000000000000000000000000;;		s.VpcId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DisableVpcClassicLinkDnsSupport.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DisableVpcClassicLinkDnsSupportResult
0000000000000000000000000000000000000000;;	type DisableVpcClassicLinkDnsSupportOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns true if the request succeeds; otherwise, it returns an error.
0000000000000000000000000000000000000000;;		Return *bool `locationName:"return" type:"boolean"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DisableVpcClassicLinkDnsSupportOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DisableVpcClassicLinkDnsSupportOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReturn sets the Return field's value.
0000000000000000000000000000000000000000;;	func (s *DisableVpcClassicLinkDnsSupportOutput) SetReturn(v bool) *DisableVpcClassicLinkDnsSupportOutput {
0000000000000000000000000000000000000000;;		s.Return = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DisableVpcClassicLink.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DisableVpcClassicLinkRequest
0000000000000000000000000000000000000000;;	type DisableVpcClassicLinkInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// VpcId is a required field
0000000000000000000000000000000000000000;;		VpcId *string `locationName:"vpcId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DisableVpcClassicLinkInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DisableVpcClassicLinkInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DisableVpcClassicLinkInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DisableVpcClassicLinkInput"}
0000000000000000000000000000000000000000;;		if s.VpcId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("VpcId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DisableVpcClassicLinkInput) SetDryRun(v bool) *DisableVpcClassicLinkInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcId sets the VpcId field's value.
0000000000000000000000000000000000000000;;	func (s *DisableVpcClassicLinkInput) SetVpcId(v string) *DisableVpcClassicLinkInput {
0000000000000000000000000000000000000000;;		s.VpcId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of DisableVpcClassicLink.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DisableVpcClassicLinkResult
0000000000000000000000000000000000000000;;	type DisableVpcClassicLinkOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns true if the request succeeds; otherwise, it returns an error.
0000000000000000000000000000000000000000;;		Return *bool `locationName:"return" type:"boolean"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DisableVpcClassicLinkOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DisableVpcClassicLinkOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReturn sets the Return field's value.
0000000000000000000000000000000000000000;;	func (s *DisableVpcClassicLinkOutput) SetReturn(v bool) *DisableVpcClassicLinkOutput {
0000000000000000000000000000000000000000;;		s.Return = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DisassociateAddress.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DisassociateAddressRequest
0000000000000000000000000000000000000000;;	type DisassociateAddressInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// [EC2-VPC] The association ID. Required for EC2-VPC.
0000000000000000000000000000000000000000;;		AssociationId *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// [EC2-Classic] The Elastic IP address. Required for EC2-Classic.
0000000000000000000000000000000000000000;;		PublicIp *string `type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DisassociateAddressInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DisassociateAddressInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAssociationId sets the AssociationId field's value.
0000000000000000000000000000000000000000;;	func (s *DisassociateAddressInput) SetAssociationId(v string) *DisassociateAddressInput {
0000000000000000000000000000000000000000;;		s.AssociationId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DisassociateAddressInput) SetDryRun(v bool) *DisassociateAddressInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPublicIp sets the PublicIp field's value.
0000000000000000000000000000000000000000;;	func (s *DisassociateAddressInput) SetPublicIp(v string) *DisassociateAddressInput {
0000000000000000000000000000000000000000;;		s.PublicIp = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DisassociateAddressOutput
0000000000000000000000000000000000000000;;	type DisassociateAddressOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DisassociateAddressOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DisassociateAddressOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for DisassociateRouteTable.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DisassociateRouteTableRequest
0000000000000000000000000000000000000000;;	type DisassociateRouteTableInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The association ID representing the current association between the route
0000000000000000000000000000000000000000;;		// table and subnet.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// AssociationId is a required field
0000000000000000000000000000000000000000;;		AssociationId *string `locationName:"associationId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DisassociateRouteTableInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DisassociateRouteTableInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DisassociateRouteTableInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DisassociateRouteTableInput"}
0000000000000000000000000000000000000000;;		if s.AssociationId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("AssociationId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAssociationId sets the AssociationId field's value.
0000000000000000000000000000000000000000;;	func (s *DisassociateRouteTableInput) SetAssociationId(v string) *DisassociateRouteTableInput {
0000000000000000000000000000000000000000;;		s.AssociationId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *DisassociateRouteTableInput) SetDryRun(v bool) *DisassociateRouteTableInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DisassociateRouteTableOutput
0000000000000000000000000000000000000000;;	type DisassociateRouteTableOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DisassociateRouteTableOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DisassociateRouteTableOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DisassociateSubnetCidrBlockRequest
0000000000000000000000000000000000000000;;	type DisassociateSubnetCidrBlockInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The association ID for the CIDR block.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// AssociationId is a required field
0000000000000000000000000000000000000000;;		AssociationId *string `locationName:"associationId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DisassociateSubnetCidrBlockInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DisassociateSubnetCidrBlockInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DisassociateSubnetCidrBlockInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DisassociateSubnetCidrBlockInput"}
0000000000000000000000000000000000000000;;		if s.AssociationId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("AssociationId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAssociationId sets the AssociationId field's value.
0000000000000000000000000000000000000000;;	func (s *DisassociateSubnetCidrBlockInput) SetAssociationId(v string) *DisassociateSubnetCidrBlockInput {
0000000000000000000000000000000000000000;;		s.AssociationId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DisassociateSubnetCidrBlockResult
0000000000000000000000000000000000000000;;	type DisassociateSubnetCidrBlockOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the IPv6 CIDR block association.
0000000000000000000000000000000000000000;;		Ipv6CidrBlockAssociation *SubnetIpv6CidrBlockAssociation `locationName:"ipv6CidrBlockAssociation" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the subnet.
0000000000000000000000000000000000000000;;		SubnetId *string `locationName:"subnetId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DisassociateSubnetCidrBlockOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DisassociateSubnetCidrBlockOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpv6CidrBlockAssociation sets the Ipv6CidrBlockAssociation field's value.
0000000000000000000000000000000000000000;;	func (s *DisassociateSubnetCidrBlockOutput) SetIpv6CidrBlockAssociation(v *SubnetIpv6CidrBlockAssociation) *DisassociateSubnetCidrBlockOutput {
0000000000000000000000000000000000000000;;		s.Ipv6CidrBlockAssociation = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSubnetId sets the SubnetId field's value.
0000000000000000000000000000000000000000;;	func (s *DisassociateSubnetCidrBlockOutput) SetSubnetId(v string) *DisassociateSubnetCidrBlockOutput {
0000000000000000000000000000000000000000;;		s.SubnetId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DisassociateVpcCidrBlockRequest
0000000000000000000000000000000000000000;;	type DisassociateVpcCidrBlockInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The association ID for the CIDR block.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// AssociationId is a required field
0000000000000000000000000000000000000000;;		AssociationId *string `locationName:"associationId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DisassociateVpcCidrBlockInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DisassociateVpcCidrBlockInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DisassociateVpcCidrBlockInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DisassociateVpcCidrBlockInput"}
0000000000000000000000000000000000000000;;		if s.AssociationId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("AssociationId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAssociationId sets the AssociationId field's value.
0000000000000000000000000000000000000000;;	func (s *DisassociateVpcCidrBlockInput) SetAssociationId(v string) *DisassociateVpcCidrBlockInput {
0000000000000000000000000000000000000000;;		s.AssociationId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DisassociateVpcCidrBlockResult
0000000000000000000000000000000000000000;;	type DisassociateVpcCidrBlockOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the IPv6 CIDR block association.
0000000000000000000000000000000000000000;;		Ipv6CidrBlockAssociation *VpcIpv6CidrBlockAssociation `locationName:"ipv6CidrBlockAssociation" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC.
0000000000000000000000000000000000000000;;		VpcId *string `locationName:"vpcId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DisassociateVpcCidrBlockOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DisassociateVpcCidrBlockOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpv6CidrBlockAssociation sets the Ipv6CidrBlockAssociation field's value.
0000000000000000000000000000000000000000;;	func (s *DisassociateVpcCidrBlockOutput) SetIpv6CidrBlockAssociation(v *VpcIpv6CidrBlockAssociation) *DisassociateVpcCidrBlockOutput {
0000000000000000000000000000000000000000;;		s.Ipv6CidrBlockAssociation = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcId sets the VpcId field's value.
0000000000000000000000000000000000000000;;	func (s *DisassociateVpcCidrBlockOutput) SetVpcId(v string) *DisassociateVpcCidrBlockOutput {
0000000000000000000000000000000000000000;;		s.VpcId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a disk image.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DiskImage
0000000000000000000000000000000000000000;;	type DiskImage struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A description of the disk image.
0000000000000000000000000000000000000000;;		Description *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the disk image.
0000000000000000000000000000000000000000;;		Image *DiskImageDetail `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the volume.
0000000000000000000000000000000000000000;;		Volume *VolumeDetail `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DiskImage) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DiskImage) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DiskImage) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DiskImage"}
0000000000000000000000000000000000000000;;		if s.Image != nil {
0000000000000000000000000000000000000000;;			if err := s.Image.Validate(); err != nil {
0000000000000000000000000000000000000000;;				invalidParams.AddNested("Image", err.(request.ErrInvalidParams))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Volume != nil {
0000000000000000000000000000000000000000;;			if err := s.Volume.Validate(); err != nil {
0000000000000000000000000000000000000000;;				invalidParams.AddNested("Volume", err.(request.ErrInvalidParams))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDescription sets the Description field's value.
0000000000000000000000000000000000000000;;	func (s *DiskImage) SetDescription(v string) *DiskImage {
0000000000000000000000000000000000000000;;		s.Description = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetImage sets the Image field's value.
0000000000000000000000000000000000000000;;	func (s *DiskImage) SetImage(v *DiskImageDetail) *DiskImage {
0000000000000000000000000000000000000000;;		s.Image = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVolume sets the Volume field's value.
0000000000000000000000000000000000000000;;	func (s *DiskImage) SetVolume(v *VolumeDetail) *DiskImage {
0000000000000000000000000000000000000000;;		s.Volume = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a disk image.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DiskImageDescription
0000000000000000000000000000000000000000;;	type DiskImageDescription struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The checksum computed for the disk image.
0000000000000000000000000000000000000000;;		Checksum *string `locationName:"checksum" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The disk image format.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Format is a required field
0000000000000000000000000000000000000000;;		Format *string `locationName:"format" type:"string" required:"true" enum:"DiskImageFormat"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A presigned URL for the import manifest stored in Amazon S3. For information
0000000000000000000000000000000000000000;;		// about creating a presigned URL for an Amazon S3 object, read the "Query String
0000000000000000000000000000000000000000;;		// Request Authentication Alternative" section of the Authenticating REST Requests
0000000000000000000000000000000000000000;;		// (http://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html)
0000000000000000000000000000000000000000;;		// topic in the Amazon Simple Storage Service Developer Guide.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// For information about the import manifest referenced by this API action,
0000000000000000000000000000000000000000;;		// see VM Import Manifest (http://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ImportManifestUrl is a required field
0000000000000000000000000000000000000000;;		ImportManifestUrl *string `locationName:"importManifestUrl" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The size of the disk image, in GiB.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Size is a required field
0000000000000000000000000000000000000000;;		Size *int64 `locationName:"size" type:"long" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DiskImageDescription) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DiskImageDescription) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetChecksum sets the Checksum field's value.
0000000000000000000000000000000000000000;;	func (s *DiskImageDescription) SetChecksum(v string) *DiskImageDescription {
0000000000000000000000000000000000000000;;		s.Checksum = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFormat sets the Format field's value.
0000000000000000000000000000000000000000;;	func (s *DiskImageDescription) SetFormat(v string) *DiskImageDescription {
0000000000000000000000000000000000000000;;		s.Format = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetImportManifestUrl sets the ImportManifestUrl field's value.
0000000000000000000000000000000000000000;;	func (s *DiskImageDescription) SetImportManifestUrl(v string) *DiskImageDescription {
0000000000000000000000000000000000000000;;		s.ImportManifestUrl = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSize sets the Size field's value.
0000000000000000000000000000000000000000;;	func (s *DiskImageDescription) SetSize(v int64) *DiskImageDescription {
0000000000000000000000000000000000000000;;		s.Size = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a disk image.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DiskImageDetail
0000000000000000000000000000000000000000;;	type DiskImageDetail struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The size of the disk image, in GiB.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Bytes is a required field
0000000000000000000000000000000000000000;;		Bytes *int64 `locationName:"bytes" type:"long" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The disk image format.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Format is a required field
0000000000000000000000000000000000000000;;		Format *string `locationName:"format" type:"string" required:"true" enum:"DiskImageFormat"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A presigned URL for the import manifest stored in Amazon S3 and presented
0000000000000000000000000000000000000000;;		// here as an Amazon S3 presigned URL. For information about creating a presigned
0000000000000000000000000000000000000000;;		// URL for an Amazon S3 object, read the "Query String Request Authentication
0000000000000000000000000000000000000000;;		// Alternative" section of the Authenticating REST Requests (http://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html)
0000000000000000000000000000000000000000;;		// topic in the Amazon Simple Storage Service Developer Guide.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// For information about the import manifest referenced by this API action,
0000000000000000000000000000000000000000;;		// see VM Import Manifest (http://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ImportManifestUrl is a required field
0000000000000000000000000000000000000000;;		ImportManifestUrl *string `locationName:"importManifestUrl" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DiskImageDetail) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DiskImageDetail) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DiskImageDetail) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DiskImageDetail"}
0000000000000000000000000000000000000000;;		if s.Bytes == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Bytes"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Format == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Format"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.ImportManifestUrl == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("ImportManifestUrl"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetBytes sets the Bytes field's value.
0000000000000000000000000000000000000000;;	func (s *DiskImageDetail) SetBytes(v int64) *DiskImageDetail {
0000000000000000000000000000000000000000;;		s.Bytes = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFormat sets the Format field's value.
0000000000000000000000000000000000000000;;	func (s *DiskImageDetail) SetFormat(v string) *DiskImageDetail {
0000000000000000000000000000000000000000;;		s.Format = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetImportManifestUrl sets the ImportManifestUrl field's value.
0000000000000000000000000000000000000000;;	func (s *DiskImageDetail) SetImportManifestUrl(v string) *DiskImageDetail {
0000000000000000000000000000000000000000;;		s.ImportManifestUrl = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a disk image volume.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/DiskImageVolumeDescription
0000000000000000000000000000000000000000;;	type DiskImageVolumeDescription struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The volume identifier.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Id is a required field
0000000000000000000000000000000000000000;;		Id *string `locationName:"id" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The size of the volume, in GiB.
0000000000000000000000000000000000000000;;		Size *int64 `locationName:"size" type:"long"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DiskImageVolumeDescription) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DiskImageVolumeDescription) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetId sets the Id field's value.
0000000000000000000000000000000000000000;;	func (s *DiskImageVolumeDescription) SetId(v string) *DiskImageVolumeDescription {
0000000000000000000000000000000000000000;;		s.Id = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSize sets the Size field's value.
0000000000000000000000000000000000000000;;	func (s *DiskImageVolumeDescription) SetSize(v int64) *DiskImageVolumeDescription {
0000000000000000000000000000000000000000;;		s.Size = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a block device for an EBS volume.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/EbsBlockDevice
0000000000000000000000000000000000000000;;	type EbsBlockDevice struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether the EBS volume is deleted on instance termination.
0000000000000000000000000000000000000000;;		DeleteOnTermination *bool `locationName:"deleteOnTermination" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether the EBS volume is encrypted. Encrypted Amazon EBS volumes
0000000000000000000000000000000000000000;;		// may only be attached to instances that support Amazon EBS encryption.
0000000000000000000000000000000000000000;;		Encrypted *bool `locationName:"encrypted" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of I/O operations per second (IOPS) that the volume supports.
0000000000000000000000000000000000000000;;		// For io1, this represents the number of IOPS that are provisioned for the
0000000000000000000000000000000000000000;;		// volume. For gp2, this represents the baseline performance of the volume and
0000000000000000000000000000000000000000;;		// the rate at which the volume accumulates I/O credits for bursting. For more
0000000000000000000000000000000000000000;;		// information about General Purpose SSD baseline performance, I/O credits,
0000000000000000000000000000000000000000;;		// and bursting, see Amazon EBS Volume Types (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html)
0000000000000000000000000000000000000000;;		// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Constraint: Range is 100-20000 IOPS for io1 volumes and 100-10000 IOPS for
0000000000000000000000000000000000000000;;		// gp2 volumes.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Condition: This parameter is required for requests to create io1 volumes;
0000000000000000000000000000000000000000;;		// it is not used in requests to create gp2, st1, sc1, or standard volumes.
0000000000000000000000000000000000000000;;		Iops *int64 `locationName:"iops" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the snapshot.
0000000000000000000000000000000000000000;;		SnapshotId *string `locationName:"snapshotId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The size of the volume, in GiB.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Constraints: 1-16384 for General Purpose SSD (gp2), 4-16384 for Provisioned
0000000000000000000000000000000000000000;;		// IOPS SSD (io1), 500-16384 for Throughput Optimized HDD (st1), 500-16384 for
0000000000000000000000000000000000000000;;		// Cold HDD (sc1), and 1-1024 for Magnetic (standard) volumes. If you specify
0000000000000000000000000000000000000000;;		// a snapshot, the volume size must be equal to or larger than the snapshot
0000000000000000000000000000000000000000;;		// size.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: If you're creating the volume from a snapshot and don't specify
0000000000000000000000000000000000000000;;		// a volume size, the default is the snapshot size.
0000000000000000000000000000000000000000;;		VolumeSize *int64 `locationName:"volumeSize" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The volume type: gp2, io1, st1, sc1, or standard.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: standard
0000000000000000000000000000000000000000;;		VolumeType *string `locationName:"volumeType" type:"string" enum:"VolumeType"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s EbsBlockDevice) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s EbsBlockDevice) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDeleteOnTermination sets the DeleteOnTermination field's value.
0000000000000000000000000000000000000000;;	func (s *EbsBlockDevice) SetDeleteOnTermination(v bool) *EbsBlockDevice {
0000000000000000000000000000000000000000;;		s.DeleteOnTermination = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEncrypted sets the Encrypted field's value.
0000000000000000000000000000000000000000;;	func (s *EbsBlockDevice) SetEncrypted(v bool) *EbsBlockDevice {
0000000000000000000000000000000000000000;;		s.Encrypted = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIops sets the Iops field's value.
0000000000000000000000000000000000000000;;	func (s *EbsBlockDevice) SetIops(v int64) *EbsBlockDevice {
0000000000000000000000000000000000000000;;		s.Iops = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSnapshotId sets the SnapshotId field's value.
0000000000000000000000000000000000000000;;	func (s *EbsBlockDevice) SetSnapshotId(v string) *EbsBlockDevice {
0000000000000000000000000000000000000000;;		s.SnapshotId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVolumeSize sets the VolumeSize field's value.
0000000000000000000000000000000000000000;;	func (s *EbsBlockDevice) SetVolumeSize(v int64) *EbsBlockDevice {
0000000000000000000000000000000000000000;;		s.VolumeSize = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVolumeType sets the VolumeType field's value.
0000000000000000000000000000000000000000;;	func (s *EbsBlockDevice) SetVolumeType(v string) *EbsBlockDevice {
0000000000000000000000000000000000000000;;		s.VolumeType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a parameter used to set up an EBS volume in a block device mapping.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/EbsInstanceBlockDevice
0000000000000000000000000000000000000000;;	type EbsInstanceBlockDevice struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The time stamp when the attachment initiated.
0000000000000000000000000000000000000000;;		AttachTime *time.Time `locationName:"attachTime" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether the volume is deleted on instance termination.
0000000000000000000000000000000000000000;;		DeleteOnTermination *bool `locationName:"deleteOnTermination" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The attachment state.
0000000000000000000000000000000000000000;;		Status *string `locationName:"status" type:"string" enum:"AttachmentStatus"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the EBS volume.
0000000000000000000000000000000000000000;;		VolumeId *string `locationName:"volumeId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s EbsInstanceBlockDevice) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s EbsInstanceBlockDevice) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAttachTime sets the AttachTime field's value.
0000000000000000000000000000000000000000;;	func (s *EbsInstanceBlockDevice) SetAttachTime(v time.Time) *EbsInstanceBlockDevice {
0000000000000000000000000000000000000000;;		s.AttachTime = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDeleteOnTermination sets the DeleteOnTermination field's value.
0000000000000000000000000000000000000000;;	func (s *EbsInstanceBlockDevice) SetDeleteOnTermination(v bool) *EbsInstanceBlockDevice {
0000000000000000000000000000000000000000;;		s.DeleteOnTermination = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStatus sets the Status field's value.
0000000000000000000000000000000000000000;;	func (s *EbsInstanceBlockDevice) SetStatus(v string) *EbsInstanceBlockDevice {
0000000000000000000000000000000000000000;;		s.Status = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVolumeId sets the VolumeId field's value.
0000000000000000000000000000000000000000;;	func (s *EbsInstanceBlockDevice) SetVolumeId(v string) *EbsInstanceBlockDevice {
0000000000000000000000000000000000000000;;		s.VolumeId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes information used to set up an EBS volume specified in a block device
0000000000000000000000000000000000000000;;	// mapping.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/EbsInstanceBlockDeviceSpecification
0000000000000000000000000000000000000000;;	type EbsInstanceBlockDeviceSpecification struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether the volume is deleted on instance termination.
0000000000000000000000000000000000000000;;		DeleteOnTermination *bool `locationName:"deleteOnTermination" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the EBS volume.
0000000000000000000000000000000000000000;;		VolumeId *string `locationName:"volumeId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s EbsInstanceBlockDeviceSpecification) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s EbsInstanceBlockDeviceSpecification) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDeleteOnTermination sets the DeleteOnTermination field's value.
0000000000000000000000000000000000000000;;	func (s *EbsInstanceBlockDeviceSpecification) SetDeleteOnTermination(v bool) *EbsInstanceBlockDeviceSpecification {
0000000000000000000000000000000000000000;;		s.DeleteOnTermination = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVolumeId sets the VolumeId field's value.
0000000000000000000000000000000000000000;;	func (s *EbsInstanceBlockDeviceSpecification) SetVolumeId(v string) *EbsInstanceBlockDeviceSpecification {
0000000000000000000000000000000000000000;;		s.VolumeId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes an egress-only Internet gateway.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/EgressOnlyInternetGateway
0000000000000000000000000000000000000000;;	type EgressOnlyInternetGateway struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the attachment of the egress-only Internet gateway.
0000000000000000000000000000000000000000;;		Attachments []*InternetGatewayAttachment `locationName:"attachmentSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the egress-only Internet gateway.
0000000000000000000000000000000000000000;;		EgressOnlyInternetGatewayId *string `locationName:"egressOnlyInternetGatewayId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s EgressOnlyInternetGateway) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s EgressOnlyInternetGateway) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAttachments sets the Attachments field's value.
0000000000000000000000000000000000000000;;	func (s *EgressOnlyInternetGateway) SetAttachments(v []*InternetGatewayAttachment) *EgressOnlyInternetGateway {
0000000000000000000000000000000000000000;;		s.Attachments = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEgressOnlyInternetGatewayId sets the EgressOnlyInternetGatewayId field's value.
0000000000000000000000000000000000000000;;	func (s *EgressOnlyInternetGateway) SetEgressOnlyInternetGatewayId(v string) *EgressOnlyInternetGateway {
0000000000000000000000000000000000000000;;		s.EgressOnlyInternetGatewayId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for EnableVgwRoutePropagation.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/EnableVgwRoutePropagationRequest
0000000000000000000000000000000000000000;;	type EnableVgwRoutePropagationInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the virtual private gateway.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// GatewayId is a required field
0000000000000000000000000000000000000000;;		GatewayId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the route table.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// RouteTableId is a required field
0000000000000000000000000000000000000000;;		RouteTableId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s EnableVgwRoutePropagationInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s EnableVgwRoutePropagationInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *EnableVgwRoutePropagationInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "EnableVgwRoutePropagationInput"}
0000000000000000000000000000000000000000;;		if s.GatewayId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("GatewayId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.RouteTableId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("RouteTableId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGatewayId sets the GatewayId field's value.
0000000000000000000000000000000000000000;;	func (s *EnableVgwRoutePropagationInput) SetGatewayId(v string) *EnableVgwRoutePropagationInput {
0000000000000000000000000000000000000000;;		s.GatewayId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRouteTableId sets the RouteTableId field's value.
0000000000000000000000000000000000000000;;	func (s *EnableVgwRoutePropagationInput) SetRouteTableId(v string) *EnableVgwRoutePropagationInput {
0000000000000000000000000000000000000000;;		s.RouteTableId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/EnableVgwRoutePropagationOutput
0000000000000000000000000000000000000000;;	type EnableVgwRoutePropagationOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s EnableVgwRoutePropagationOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s EnableVgwRoutePropagationOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for EnableVolumeIO.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/EnableVolumeIORequest
0000000000000000000000000000000000000000;;	type EnableVolumeIOInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the volume.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// VolumeId is a required field
0000000000000000000000000000000000000000;;		VolumeId *string `locationName:"volumeId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s EnableVolumeIOInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s EnableVolumeIOInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *EnableVolumeIOInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "EnableVolumeIOInput"}
0000000000000000000000000000000000000000;;		if s.VolumeId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("VolumeId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *EnableVolumeIOInput) SetDryRun(v bool) *EnableVolumeIOInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVolumeId sets the VolumeId field's value.
0000000000000000000000000000000000000000;;	func (s *EnableVolumeIOInput) SetVolumeId(v string) *EnableVolumeIOInput {
0000000000000000000000000000000000000000;;		s.VolumeId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/EnableVolumeIOOutput
0000000000000000000000000000000000000000;;	type EnableVolumeIOOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s EnableVolumeIOOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s EnableVolumeIOOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for EnableVpcClassicLinkDnsSupport.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/EnableVpcClassicLinkDnsSupportRequest
0000000000000000000000000000000000000000;;	type EnableVpcClassicLinkDnsSupportInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC.
0000000000000000000000000000000000000000;;		VpcId *string `type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s EnableVpcClassicLinkDnsSupportInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s EnableVpcClassicLinkDnsSupportInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcId sets the VpcId field's value.
0000000000000000000000000000000000000000;;	func (s *EnableVpcClassicLinkDnsSupportInput) SetVpcId(v string) *EnableVpcClassicLinkDnsSupportInput {
0000000000000000000000000000000000000000;;		s.VpcId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of EnableVpcClassicLinkDnsSupport.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/EnableVpcClassicLinkDnsSupportResult
0000000000000000000000000000000000000000;;	type EnableVpcClassicLinkDnsSupportOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns true if the request succeeds; otherwise, it returns an error.
0000000000000000000000000000000000000000;;		Return *bool `locationName:"return" type:"boolean"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s EnableVpcClassicLinkDnsSupportOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s EnableVpcClassicLinkDnsSupportOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReturn sets the Return field's value.
0000000000000000000000000000000000000000;;	func (s *EnableVpcClassicLinkDnsSupportOutput) SetReturn(v bool) *EnableVpcClassicLinkDnsSupportOutput {
0000000000000000000000000000000000000000;;		s.Return = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for EnableVpcClassicLink.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/EnableVpcClassicLinkRequest
0000000000000000000000000000000000000000;;	type EnableVpcClassicLinkInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// VpcId is a required field
0000000000000000000000000000000000000000;;		VpcId *string `locationName:"vpcId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s EnableVpcClassicLinkInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s EnableVpcClassicLinkInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *EnableVpcClassicLinkInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "EnableVpcClassicLinkInput"}
0000000000000000000000000000000000000000;;		if s.VpcId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("VpcId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *EnableVpcClassicLinkInput) SetDryRun(v bool) *EnableVpcClassicLinkInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcId sets the VpcId field's value.
0000000000000000000000000000000000000000;;	func (s *EnableVpcClassicLinkInput) SetVpcId(v string) *EnableVpcClassicLinkInput {
0000000000000000000000000000000000000000;;		s.VpcId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of EnableVpcClassicLink.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/EnableVpcClassicLinkResult
0000000000000000000000000000000000000000;;	type EnableVpcClassicLinkOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns true if the request succeeds; otherwise, it returns an error.
0000000000000000000000000000000000000000;;		Return *bool `locationName:"return" type:"boolean"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s EnableVpcClassicLinkOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s EnableVpcClassicLinkOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReturn sets the Return field's value.
0000000000000000000000000000000000000000;;	func (s *EnableVpcClassicLinkOutput) SetReturn(v bool) *EnableVpcClassicLinkOutput {
0000000000000000000000000000000000000000;;		s.Return = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a Spot fleet event.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/EventInformation
0000000000000000000000000000000000000000;;	type EventInformation struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The description of the event.
0000000000000000000000000000000000000000;;		EventDescription *string `locationName:"eventDescription" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The event.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// The following are the error events.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * iamFleetRoleInvalid - The Spot fleet did not have the required permissions
0000000000000000000000000000000000000000;;		//    either to launch or terminate an instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * launchSpecTemporarilyBlacklisted - The configuration is not valid and
0000000000000000000000000000000000000000;;		//    several attempts to launch instances have failed. For more information,
0000000000000000000000000000000000000000;;		//    see the description of the event.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * spotFleetRequestConfigurationInvalid - The configuration is not valid.
0000000000000000000000000000000000000000;;		//    For more information, see the description of the event.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * spotInstanceCountLimitExceeded - You've reached the limit on the number
0000000000000000000000000000000000000000;;		//    of Spot instances that you can launch.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// The following are the fleetRequestChange events.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * active - The Spot fleet has been validated and Amazon EC2 is attempting
0000000000000000000000000000000000000000;;		//    to maintain the target number of running Spot instances.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * cancelled - The Spot fleet is canceled and has no running Spot instances.
0000000000000000000000000000000000000000;;		//    The Spot fleet will be deleted two days after its instances were terminated.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * cancelled_running - The Spot fleet is canceled and will not launch additional
0000000000000000000000000000000000000000;;		//    Spot instances, but its existing Spot instances continue to run until
0000000000000000000000000000000000000000;;		//    they are interrupted or terminated.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * cancelled_terminating - The Spot fleet is canceled and its Spot instances
0000000000000000000000000000000000000000;;		//    are terminating.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * expired - The Spot fleet request has expired. A subsequent event indicates
0000000000000000000000000000000000000000;;		//    that the instances were terminated, if the request was created with TerminateInstancesWithExpiration
0000000000000000000000000000000000000000;;		//    set.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * modify_in_progress - A request to modify the Spot fleet request was
0000000000000000000000000000000000000000;;		//    accepted and is in progress.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * modify_successful - The Spot fleet request was modified.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * price_update - The bid price for a launch configuration was adjusted
0000000000000000000000000000000000000000;;		//    because it was too high. This change is permanent.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * submitted - The Spot fleet request is being evaluated and Amazon EC2
0000000000000000000000000000000000000000;;		//    is preparing to launch the target number of Spot instances.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// The following are the instanceChange events.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * launched - A bid was fulfilled and a new instance was launched.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * terminated - An instance was terminated by the user.
0000000000000000000000000000000000000000;;		EventSubType *string `locationName:"eventSubType" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the instance. This information is available only for instanceChange
0000000000000000000000000000000000000000;;		// events.
0000000000000000000000000000000000000000;;		InstanceId *string `locationName:"instanceId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s EventInformation) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s EventInformation) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEventDescription sets the EventDescription field's value.
0000000000000000000000000000000000000000;;	func (s *EventInformation) SetEventDescription(v string) *EventInformation {
0000000000000000000000000000000000000000;;		s.EventDescription = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEventSubType sets the EventSubType field's value.
0000000000000000000000000000000000000000;;	func (s *EventInformation) SetEventSubType(v string) *EventInformation {
0000000000000000000000000000000000000000;;		s.EventSubType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceId sets the InstanceId field's value.
0000000000000000000000000000000000000000;;	func (s *EventInformation) SetInstanceId(v string) *EventInformation {
0000000000000000000000000000000000000000;;		s.InstanceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes an instance export task.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ExportTask
0000000000000000000000000000000000000000;;	type ExportTask struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A description of the resource being exported.
0000000000000000000000000000000000000000;;		Description *string `locationName:"description" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the export task.
0000000000000000000000000000000000000000;;		ExportTaskId *string `locationName:"exportTaskId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the export task.
0000000000000000000000000000000000000000;;		ExportToS3Task *ExportToS3Task `locationName:"exportToS3" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the instance to export.
0000000000000000000000000000000000000000;;		InstanceExportDetails *InstanceExportDetails `locationName:"instanceExport" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The state of the export task.
0000000000000000000000000000000000000000;;		State *string `locationName:"state" type:"string" enum:"ExportTaskState"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The status message related to the export task.
0000000000000000000000000000000000000000;;		StatusMessage *string `locationName:"statusMessage" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ExportTask) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ExportTask) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDescription sets the Description field's value.
0000000000000000000000000000000000000000;;	func (s *ExportTask) SetDescription(v string) *ExportTask {
0000000000000000000000000000000000000000;;		s.Description = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetExportTaskId sets the ExportTaskId field's value.
0000000000000000000000000000000000000000;;	func (s *ExportTask) SetExportTaskId(v string) *ExportTask {
0000000000000000000000000000000000000000;;		s.ExportTaskId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetExportToS3Task sets the ExportToS3Task field's value.
0000000000000000000000000000000000000000;;	func (s *ExportTask) SetExportToS3Task(v *ExportToS3Task) *ExportTask {
0000000000000000000000000000000000000000;;		s.ExportToS3Task = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceExportDetails sets the InstanceExportDetails field's value.
0000000000000000000000000000000000000000;;	func (s *ExportTask) SetInstanceExportDetails(v *InstanceExportDetails) *ExportTask {
0000000000000000000000000000000000000000;;		s.InstanceExportDetails = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetState sets the State field's value.
0000000000000000000000000000000000000000;;	func (s *ExportTask) SetState(v string) *ExportTask {
0000000000000000000000000000000000000000;;		s.State = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStatusMessage sets the StatusMessage field's value.
0000000000000000000000000000000000000000;;	func (s *ExportTask) SetStatusMessage(v string) *ExportTask {
0000000000000000000000000000000000000000;;		s.StatusMessage = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the format and location for an instance export task.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ExportToS3Task
0000000000000000000000000000000000000000;;	type ExportToS3Task struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The container format used to combine disk images with metadata (such as OVF).
0000000000000000000000000000000000000000;;		// If absent, only the disk image is exported.
0000000000000000000000000000000000000000;;		ContainerFormat *string `locationName:"containerFormat" type:"string" enum:"ContainerFormat"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The format for the exported image.
0000000000000000000000000000000000000000;;		DiskImageFormat *string `locationName:"diskImageFormat" type:"string" enum:"DiskImageFormat"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The S3 bucket for the destination image. The destination bucket must exist
0000000000000000000000000000000000000000;;		// and grant WRITE and READ_ACP permissions to the AWS account vm-import-export@amazon.com.
0000000000000000000000000000000000000000;;		S3Bucket *string `locationName:"s3Bucket" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The encryption key for your S3 bucket.
0000000000000000000000000000000000000000;;		S3Key *string `locationName:"s3Key" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ExportToS3Task) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ExportToS3Task) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetContainerFormat sets the ContainerFormat field's value.
0000000000000000000000000000000000000000;;	func (s *ExportToS3Task) SetContainerFormat(v string) *ExportToS3Task {
0000000000000000000000000000000000000000;;		s.ContainerFormat = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDiskImageFormat sets the DiskImageFormat field's value.
0000000000000000000000000000000000000000;;	func (s *ExportToS3Task) SetDiskImageFormat(v string) *ExportToS3Task {
0000000000000000000000000000000000000000;;		s.DiskImageFormat = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetS3Bucket sets the S3Bucket field's value.
0000000000000000000000000000000000000000;;	func (s *ExportToS3Task) SetS3Bucket(v string) *ExportToS3Task {
0000000000000000000000000000000000000000;;		s.S3Bucket = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetS3Key sets the S3Key field's value.
0000000000000000000000000000000000000000;;	func (s *ExportToS3Task) SetS3Key(v string) *ExportToS3Task {
0000000000000000000000000000000000000000;;		s.S3Key = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes an instance export task.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ExportToS3TaskSpecification
0000000000000000000000000000000000000000;;	type ExportToS3TaskSpecification struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The container format used to combine disk images with metadata (such as OVF).
0000000000000000000000000000000000000000;;		// If absent, only the disk image is exported.
0000000000000000000000000000000000000000;;		ContainerFormat *string `locationName:"containerFormat" type:"string" enum:"ContainerFormat"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The format for the exported image.
0000000000000000000000000000000000000000;;		DiskImageFormat *string `locationName:"diskImageFormat" type:"string" enum:"DiskImageFormat"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The S3 bucket for the destination image. The destination bucket must exist
0000000000000000000000000000000000000000;;		// and grant WRITE and READ_ACP permissions to the AWS account vm-import-export@amazon.com.
0000000000000000000000000000000000000000;;		S3Bucket *string `locationName:"s3Bucket" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The image is written to a single object in the S3 bucket at the S3 key s3prefix
0000000000000000000000000000000000000000;;		// + exportTaskId + '.' + diskImageFormat.
0000000000000000000000000000000000000000;;		S3Prefix *string `locationName:"s3Prefix" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ExportToS3TaskSpecification) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ExportToS3TaskSpecification) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetContainerFormat sets the ContainerFormat field's value.
0000000000000000000000000000000000000000;;	func (s *ExportToS3TaskSpecification) SetContainerFormat(v string) *ExportToS3TaskSpecification {
0000000000000000000000000000000000000000;;		s.ContainerFormat = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDiskImageFormat sets the DiskImageFormat field's value.
0000000000000000000000000000000000000000;;	func (s *ExportToS3TaskSpecification) SetDiskImageFormat(v string) *ExportToS3TaskSpecification {
0000000000000000000000000000000000000000;;		s.DiskImageFormat = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetS3Bucket sets the S3Bucket field's value.
0000000000000000000000000000000000000000;;	func (s *ExportToS3TaskSpecification) SetS3Bucket(v string) *ExportToS3TaskSpecification {
0000000000000000000000000000000000000000;;		s.S3Bucket = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetS3Prefix sets the S3Prefix field's value.
0000000000000000000000000000000000000000;;	func (s *ExportToS3TaskSpecification) SetS3Prefix(v string) *ExportToS3TaskSpecification {
0000000000000000000000000000000000000000;;		s.S3Prefix = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A filter name and value pair that is used to return a more specific list
0000000000000000000000000000000000000000;;	// of results. Filters can be used to match a set of resources by various criteria,
0000000000000000000000000000000000000000;;	// such as tags, attributes, or IDs.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/Filter
0000000000000000000000000000000000000000;;	type Filter struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the filter. Filter names are case-sensitive.
0000000000000000000000000000000000000000;;		Name *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more filter values. Filter values are case-sensitive.
0000000000000000000000000000000000000000;;		Values []*string `locationName:"Value" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s Filter) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s Filter) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetName sets the Name field's value.
0000000000000000000000000000000000000000;;	func (s *Filter) SetName(v string) *Filter {
0000000000000000000000000000000000000000;;		s.Name = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetValues sets the Values field's value.
0000000000000000000000000000000000000000;;	func (s *Filter) SetValues(v []*string) *Filter {
0000000000000000000000000000000000000000;;		s.Values = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a flow log.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/FlowLog
0000000000000000000000000000000000000000;;	type FlowLog struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The date and time the flow log was created.
0000000000000000000000000000000000000000;;		CreationTime *time.Time `locationName:"creationTime" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the error that occurred. Rate limited indicates that CloudWatch
0000000000000000000000000000000000000000;;		// logs throttling has been applied for one or more network interfaces, or that
0000000000000000000000000000000000000000;;		// you've reached the limit on the number of CloudWatch Logs log groups that
0000000000000000000000000000000000000000;;		// you can create. Access error indicates that the IAM role associated with
0000000000000000000000000000000000000000;;		// the flow log does not have sufficient permissions to publish to CloudWatch
0000000000000000000000000000000000000000;;		// Logs. Unknown error indicates an internal error.
0000000000000000000000000000000000000000;;		DeliverLogsErrorMessage *string `locationName:"deliverLogsErrorMessage" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ARN of the IAM role that posts logs to CloudWatch Logs.
0000000000000000000000000000000000000000;;		DeliverLogsPermissionArn *string `locationName:"deliverLogsPermissionArn" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The status of the logs delivery (SUCCESS | FAILED).
0000000000000000000000000000000000000000;;		DeliverLogsStatus *string `locationName:"deliverLogsStatus" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The flow log ID.
0000000000000000000000000000000000000000;;		FlowLogId *string `locationName:"flowLogId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The status of the flow log (ACTIVE).
0000000000000000000000000000000000000000;;		FlowLogStatus *string `locationName:"flowLogStatus" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the flow log group.
0000000000000000000000000000000000000000;;		LogGroupName *string `locationName:"logGroupName" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the resource on which the flow log was created.
0000000000000000000000000000000000000000;;		ResourceId *string `locationName:"resourceId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The type of traffic captured for the flow log.
0000000000000000000000000000000000000000;;		TrafficType *string `locationName:"trafficType" type:"string" enum:"TrafficType"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s FlowLog) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s FlowLog) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCreationTime sets the CreationTime field's value.
0000000000000000000000000000000000000000;;	func (s *FlowLog) SetCreationTime(v time.Time) *FlowLog {
0000000000000000000000000000000000000000;;		s.CreationTime = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDeliverLogsErrorMessage sets the DeliverLogsErrorMessage field's value.
0000000000000000000000000000000000000000;;	func (s *FlowLog) SetDeliverLogsErrorMessage(v string) *FlowLog {
0000000000000000000000000000000000000000;;		s.DeliverLogsErrorMessage = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDeliverLogsPermissionArn sets the DeliverLogsPermissionArn field's value.
0000000000000000000000000000000000000000;;	func (s *FlowLog) SetDeliverLogsPermissionArn(v string) *FlowLog {
0000000000000000000000000000000000000000;;		s.DeliverLogsPermissionArn = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDeliverLogsStatus sets the DeliverLogsStatus field's value.
0000000000000000000000000000000000000000;;	func (s *FlowLog) SetDeliverLogsStatus(v string) *FlowLog {
0000000000000000000000000000000000000000;;		s.DeliverLogsStatus = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFlowLogId sets the FlowLogId field's value.
0000000000000000000000000000000000000000;;	func (s *FlowLog) SetFlowLogId(v string) *FlowLog {
0000000000000000000000000000000000000000;;		s.FlowLogId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFlowLogStatus sets the FlowLogStatus field's value.
0000000000000000000000000000000000000000;;	func (s *FlowLog) SetFlowLogStatus(v string) *FlowLog {
0000000000000000000000000000000000000000;;		s.FlowLogStatus = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetLogGroupName sets the LogGroupName field's value.
0000000000000000000000000000000000000000;;	func (s *FlowLog) SetLogGroupName(v string) *FlowLog {
0000000000000000000000000000000000000000;;		s.LogGroupName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetResourceId sets the ResourceId field's value.
0000000000000000000000000000000000000000;;	func (s *FlowLog) SetResourceId(v string) *FlowLog {
0000000000000000000000000000000000000000;;		s.ResourceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTrafficType sets the TrafficType field's value.
0000000000000000000000000000000000000000;;	func (s *FlowLog) SetTrafficType(v string) *FlowLog {
0000000000000000000000000000000000000000;;		s.TrafficType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for GetConsoleOutput.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/GetConsoleOutputRequest
0000000000000000000000000000000000000000;;	type GetConsoleOutputInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// InstanceId is a required field
0000000000000000000000000000000000000000;;		InstanceId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s GetConsoleOutputInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s GetConsoleOutputInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *GetConsoleOutputInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "GetConsoleOutputInput"}
0000000000000000000000000000000000000000;;		if s.InstanceId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("InstanceId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *GetConsoleOutputInput) SetDryRun(v bool) *GetConsoleOutputInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceId sets the InstanceId field's value.
0000000000000000000000000000000000000000;;	func (s *GetConsoleOutputInput) SetInstanceId(v string) *GetConsoleOutputInput {
0000000000000000000000000000000000000000;;		s.InstanceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of GetConsoleOutput.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/GetConsoleOutputResult
0000000000000000000000000000000000000000;;	type GetConsoleOutputOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the instance.
0000000000000000000000000000000000000000;;		InstanceId *string `locationName:"instanceId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The console output, Base64-encoded. If using a command line tool, the tool
0000000000000000000000000000000000000000;;		// decodes the output for you.
0000000000000000000000000000000000000000;;		Output *string `locationName:"output" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The time the output was last updated.
0000000000000000000000000000000000000000;;		Timestamp *time.Time `locationName:"timestamp" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s GetConsoleOutputOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s GetConsoleOutputOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceId sets the InstanceId field's value.
0000000000000000000000000000000000000000;;	func (s *GetConsoleOutputOutput) SetInstanceId(v string) *GetConsoleOutputOutput {
0000000000000000000000000000000000000000;;		s.InstanceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetOutput sets the Output field's value.
0000000000000000000000000000000000000000;;	func (s *GetConsoleOutputOutput) SetOutput(v string) *GetConsoleOutputOutput {
0000000000000000000000000000000000000000;;		s.Output = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTimestamp sets the Timestamp field's value.
0000000000000000000000000000000000000000;;	func (s *GetConsoleOutputOutput) SetTimestamp(v time.Time) *GetConsoleOutputOutput {
0000000000000000000000000000000000000000;;		s.Timestamp = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for the request.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/GetConsoleScreenshotRequest
0000000000000000000000000000000000000000;;	type GetConsoleScreenshotInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// InstanceId is a required field
0000000000000000000000000000000000000000;;		InstanceId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// When set to true, acts as keystroke input and wakes up an instance that's
0000000000000000000000000000000000000000;;		// in standby or "sleep" mode.
0000000000000000000000000000000000000000;;		WakeUp *bool `type:"boolean"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s GetConsoleScreenshotInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s GetConsoleScreenshotInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *GetConsoleScreenshotInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "GetConsoleScreenshotInput"}
0000000000000000000000000000000000000000;;		if s.InstanceId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("InstanceId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *GetConsoleScreenshotInput) SetDryRun(v bool) *GetConsoleScreenshotInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceId sets the InstanceId field's value.
0000000000000000000000000000000000000000;;	func (s *GetConsoleScreenshotInput) SetInstanceId(v string) *GetConsoleScreenshotInput {
0000000000000000000000000000000000000000;;		s.InstanceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetWakeUp sets the WakeUp field's value.
0000000000000000000000000000000000000000;;	func (s *GetConsoleScreenshotInput) SetWakeUp(v bool) *GetConsoleScreenshotInput {
0000000000000000000000000000000000000000;;		s.WakeUp = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of the request.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/GetConsoleScreenshotResult
0000000000000000000000000000000000000000;;	type GetConsoleScreenshotOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The data that comprises the image.
0000000000000000000000000000000000000000;;		ImageData *string `locationName:"imageData" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the instance.
0000000000000000000000000000000000000000;;		InstanceId *string `locationName:"instanceId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s GetConsoleScreenshotOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s GetConsoleScreenshotOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetImageData sets the ImageData field's value.
0000000000000000000000000000000000000000;;	func (s *GetConsoleScreenshotOutput) SetImageData(v string) *GetConsoleScreenshotOutput {
0000000000000000000000000000000000000000;;		s.ImageData = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceId sets the InstanceId field's value.
0000000000000000000000000000000000000000;;	func (s *GetConsoleScreenshotOutput) SetInstanceId(v string) *GetConsoleScreenshotOutput {
0000000000000000000000000000000000000000;;		s.InstanceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/GetHostReservationPurchasePreviewRequest
0000000000000000000000000000000000000000;;	type GetHostReservationPurchasePreviewInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID/s of the Dedicated Host/s that the reservation will be associated
0000000000000000000000000000000000000000;;		// with.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// HostIdSet is a required field
0000000000000000000000000000000000000000;;		HostIdSet []*string `locationNameList:"item" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The offering ID of the reservation.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// OfferingId is a required field
0000000000000000000000000000000000000000;;		OfferingId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s GetHostReservationPurchasePreviewInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s GetHostReservationPurchasePreviewInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *GetHostReservationPurchasePreviewInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "GetHostReservationPurchasePreviewInput"}
0000000000000000000000000000000000000000;;		if s.HostIdSet == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("HostIdSet"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.OfferingId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("OfferingId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHostIdSet sets the HostIdSet field's value.
0000000000000000000000000000000000000000;;	func (s *GetHostReservationPurchasePreviewInput) SetHostIdSet(v []*string) *GetHostReservationPurchasePreviewInput {
0000000000000000000000000000000000000000;;		s.HostIdSet = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetOfferingId sets the OfferingId field's value.
0000000000000000000000000000000000000000;;	func (s *GetHostReservationPurchasePreviewInput) SetOfferingId(v string) *GetHostReservationPurchasePreviewInput {
0000000000000000000000000000000000000000;;		s.OfferingId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/GetHostReservationPurchasePreviewResult
0000000000000000000000000000000000000000;;	type GetHostReservationPurchasePreviewOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The currency in which the totalUpfrontPrice and totalHourlyPrice amounts
0000000000000000000000000000000000000000;;		// are specified. At this time, the only supported currency is USD.
0000000000000000000000000000000000000000;;		CurrencyCode *string `locationName:"currencyCode" type:"string" enum:"CurrencyCodeValues"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The purchase information of the Dedicated Host Reservation and the Dedicated
0000000000000000000000000000000000000000;;		// Hosts associated with it.
0000000000000000000000000000000000000000;;		Purchase []*Purchase `locationName:"purchase" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The potential total hourly price of the reservation per hour.
0000000000000000000000000000000000000000;;		TotalHourlyPrice *string `locationName:"totalHourlyPrice" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The potential total upfront price. This is billed immediately.
0000000000000000000000000000000000000000;;		TotalUpfrontPrice *string `locationName:"totalUpfrontPrice" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s GetHostReservationPurchasePreviewOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s GetHostReservationPurchasePreviewOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCurrencyCode sets the CurrencyCode field's value.
0000000000000000000000000000000000000000;;	func (s *GetHostReservationPurchasePreviewOutput) SetCurrencyCode(v string) *GetHostReservationPurchasePreviewOutput {
0000000000000000000000000000000000000000;;		s.CurrencyCode = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPurchase sets the Purchase field's value.
0000000000000000000000000000000000000000;;	func (s *GetHostReservationPurchasePreviewOutput) SetPurchase(v []*Purchase) *GetHostReservationPurchasePreviewOutput {
0000000000000000000000000000000000000000;;		s.Purchase = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTotalHourlyPrice sets the TotalHourlyPrice field's value.
0000000000000000000000000000000000000000;;	func (s *GetHostReservationPurchasePreviewOutput) SetTotalHourlyPrice(v string) *GetHostReservationPurchasePreviewOutput {
0000000000000000000000000000000000000000;;		s.TotalHourlyPrice = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTotalUpfrontPrice sets the TotalUpfrontPrice field's value.
0000000000000000000000000000000000000000;;	func (s *GetHostReservationPurchasePreviewOutput) SetTotalUpfrontPrice(v string) *GetHostReservationPurchasePreviewOutput {
0000000000000000000000000000000000000000;;		s.TotalUpfrontPrice = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for GetPasswordData.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/GetPasswordDataRequest
0000000000000000000000000000000000000000;;	type GetPasswordDataInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the Windows instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// InstanceId is a required field
0000000000000000000000000000000000000000;;		InstanceId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s GetPasswordDataInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s GetPasswordDataInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *GetPasswordDataInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "GetPasswordDataInput"}
0000000000000000000000000000000000000000;;		if s.InstanceId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("InstanceId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *GetPasswordDataInput) SetDryRun(v bool) *GetPasswordDataInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceId sets the InstanceId field's value.
0000000000000000000000000000000000000000;;	func (s *GetPasswordDataInput) SetInstanceId(v string) *GetPasswordDataInput {
0000000000000000000000000000000000000000;;		s.InstanceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of GetPasswordData.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/GetPasswordDataResult
0000000000000000000000000000000000000000;;	type GetPasswordDataOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the Windows instance.
0000000000000000000000000000000000000000;;		InstanceId *string `locationName:"instanceId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The password of the instance.
0000000000000000000000000000000000000000;;		PasswordData *string `locationName:"passwordData" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The time the data was last updated.
0000000000000000000000000000000000000000;;		Timestamp *time.Time `locationName:"timestamp" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s GetPasswordDataOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s GetPasswordDataOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceId sets the InstanceId field's value.
0000000000000000000000000000000000000000;;	func (s *GetPasswordDataOutput) SetInstanceId(v string) *GetPasswordDataOutput {
0000000000000000000000000000000000000000;;		s.InstanceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPasswordData sets the PasswordData field's value.
0000000000000000000000000000000000000000;;	func (s *GetPasswordDataOutput) SetPasswordData(v string) *GetPasswordDataOutput {
0000000000000000000000000000000000000000;;		s.PasswordData = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTimestamp sets the Timestamp field's value.
0000000000000000000000000000000000000000;;	func (s *GetPasswordDataOutput) SetTimestamp(v time.Time) *GetPasswordDataOutput {
0000000000000000000000000000000000000000;;		s.Timestamp = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for GetReservedInstanceExchangeQuote.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/GetReservedInstancesExchangeQuoteRequest
0000000000000000000000000000000000000000;;	type GetReservedInstancesExchangeQuoteInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IDs of the Convertible Reserved Instances to exchange.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ReservedInstanceIds is a required field
0000000000000000000000000000000000000000;;		ReservedInstanceIds []*string `locationName:"ReservedInstanceId" locationNameList:"ReservedInstanceId" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The configuration requirements of the Convertible Reserved Instances to exchange
0000000000000000000000000000000000000000;;		// for your current Convertible Reserved Instances.
0000000000000000000000000000000000000000;;		TargetConfigurations []*TargetConfigurationRequest `locationName:"TargetConfiguration" locationNameList:"TargetConfigurationRequest" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s GetReservedInstancesExchangeQuoteInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s GetReservedInstancesExchangeQuoteInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *GetReservedInstancesExchangeQuoteInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "GetReservedInstancesExchangeQuoteInput"}
0000000000000000000000000000000000000000;;		if s.ReservedInstanceIds == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("ReservedInstanceIds"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.TargetConfigurations != nil {
0000000000000000000000000000000000000000;;			for i, v := range s.TargetConfigurations {
0000000000000000000000000000000000000000;;				if v == nil {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if err := v.Validate(); err != nil {
0000000000000000000000000000000000000000;;					invalidParams.AddNested(fmt.Sprintf("%s[%v]", "TargetConfigurations", i), err.(request.ErrInvalidParams))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *GetReservedInstancesExchangeQuoteInput) SetDryRun(v bool) *GetReservedInstancesExchangeQuoteInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReservedInstanceIds sets the ReservedInstanceIds field's value.
0000000000000000000000000000000000000000;;	func (s *GetReservedInstancesExchangeQuoteInput) SetReservedInstanceIds(v []*string) *GetReservedInstancesExchangeQuoteInput {
0000000000000000000000000000000000000000;;		s.ReservedInstanceIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTargetConfigurations sets the TargetConfigurations field's value.
0000000000000000000000000000000000000000;;	func (s *GetReservedInstancesExchangeQuoteInput) SetTargetConfigurations(v []*TargetConfigurationRequest) *GetReservedInstancesExchangeQuoteInput {
0000000000000000000000000000000000000000;;		s.TargetConfigurations = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of GetReservedInstancesExchangeQuote.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/GetReservedInstancesExchangeQuoteResult
0000000000000000000000000000000000000000;;	type GetReservedInstancesExchangeQuoteOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The currency of the transaction.
0000000000000000000000000000000000000000;;		CurrencyCode *string `locationName:"currencyCode" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If true, the exchange is valid. If false, the exchange cannot be completed.
0000000000000000000000000000000000000000;;		IsValidExchange *bool `locationName:"isValidExchange" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The new end date of the reservation term.
0000000000000000000000000000000000000000;;		OutputReservedInstancesWillExpireAt *time.Time `locationName:"outputReservedInstancesWillExpireAt" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The total true upfront charge for the exchange.
0000000000000000000000000000000000000000;;		PaymentDue *string `locationName:"paymentDue" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The cost associated with the Reserved Instance.
0000000000000000000000000000000000000000;;		ReservedInstanceValueRollup *ReservationValue `locationName:"reservedInstanceValueRollup" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The configuration of your Convertible Reserved Instances.
0000000000000000000000000000000000000000;;		ReservedInstanceValueSet []*ReservedInstanceReservationValue `locationName:"reservedInstanceValueSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The cost associated with the Reserved Instance.
0000000000000000000000000000000000000000;;		TargetConfigurationValueRollup *ReservationValue `locationName:"targetConfigurationValueRollup" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The values of the target Convertible Reserved Instances.
0000000000000000000000000000000000000000;;		TargetConfigurationValueSet []*TargetReservationValue `locationName:"targetConfigurationValueSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Describes the reason why the exchange cannot be completed.
0000000000000000000000000000000000000000;;		ValidationFailureReason *string `locationName:"validationFailureReason" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s GetReservedInstancesExchangeQuoteOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s GetReservedInstancesExchangeQuoteOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCurrencyCode sets the CurrencyCode field's value.
0000000000000000000000000000000000000000;;	func (s *GetReservedInstancesExchangeQuoteOutput) SetCurrencyCode(v string) *GetReservedInstancesExchangeQuoteOutput {
0000000000000000000000000000000000000000;;		s.CurrencyCode = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIsValidExchange sets the IsValidExchange field's value.
0000000000000000000000000000000000000000;;	func (s *GetReservedInstancesExchangeQuoteOutput) SetIsValidExchange(v bool) *GetReservedInstancesExchangeQuoteOutput {
0000000000000000000000000000000000000000;;		s.IsValidExchange = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetOutputReservedInstancesWillExpireAt sets the OutputReservedInstancesWillExpireAt field's value.
0000000000000000000000000000000000000000;;	func (s *GetReservedInstancesExchangeQuoteOutput) SetOutputReservedInstancesWillExpireAt(v time.Time) *GetReservedInstancesExchangeQuoteOutput {
0000000000000000000000000000000000000000;;		s.OutputReservedInstancesWillExpireAt = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPaymentDue sets the PaymentDue field's value.
0000000000000000000000000000000000000000;;	func (s *GetReservedInstancesExchangeQuoteOutput) SetPaymentDue(v string) *GetReservedInstancesExchangeQuoteOutput {
0000000000000000000000000000000000000000;;		s.PaymentDue = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReservedInstanceValueRollup sets the ReservedInstanceValueRollup field's value.
0000000000000000000000000000000000000000;;	func (s *GetReservedInstancesExchangeQuoteOutput) SetReservedInstanceValueRollup(v *ReservationValue) *GetReservedInstancesExchangeQuoteOutput {
0000000000000000000000000000000000000000;;		s.ReservedInstanceValueRollup = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReservedInstanceValueSet sets the ReservedInstanceValueSet field's value.
0000000000000000000000000000000000000000;;	func (s *GetReservedInstancesExchangeQuoteOutput) SetReservedInstanceValueSet(v []*ReservedInstanceReservationValue) *GetReservedInstancesExchangeQuoteOutput {
0000000000000000000000000000000000000000;;		s.ReservedInstanceValueSet = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTargetConfigurationValueRollup sets the TargetConfigurationValueRollup field's value.
0000000000000000000000000000000000000000;;	func (s *GetReservedInstancesExchangeQuoteOutput) SetTargetConfigurationValueRollup(v *ReservationValue) *GetReservedInstancesExchangeQuoteOutput {
0000000000000000000000000000000000000000;;		s.TargetConfigurationValueRollup = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTargetConfigurationValueSet sets the TargetConfigurationValueSet field's value.
0000000000000000000000000000000000000000;;	func (s *GetReservedInstancesExchangeQuoteOutput) SetTargetConfigurationValueSet(v []*TargetReservationValue) *GetReservedInstancesExchangeQuoteOutput {
0000000000000000000000000000000000000000;;		s.TargetConfigurationValueSet = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetValidationFailureReason sets the ValidationFailureReason field's value.
0000000000000000000000000000000000000000;;	func (s *GetReservedInstancesExchangeQuoteOutput) SetValidationFailureReason(v string) *GetReservedInstancesExchangeQuoteOutput {
0000000000000000000000000000000000000000;;		s.ValidationFailureReason = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a security group.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/GroupIdentifier
0000000000000000000000000000000000000000;;	type GroupIdentifier struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the security group.
0000000000000000000000000000000000000000;;		GroupId *string `locationName:"groupId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the security group.
0000000000000000000000000000000000000000;;		GroupName *string `locationName:"groupName" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s GroupIdentifier) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s GroupIdentifier) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroupId sets the GroupId field's value.
0000000000000000000000000000000000000000;;	func (s *GroupIdentifier) SetGroupId(v string) *GroupIdentifier {
0000000000000000000000000000000000000000;;		s.GroupId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroupName sets the GroupName field's value.
0000000000000000000000000000000000000000;;	func (s *GroupIdentifier) SetGroupName(v string) *GroupIdentifier {
0000000000000000000000000000000000000000;;		s.GroupName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes an event in the history of the Spot fleet request.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/HistoryRecord
0000000000000000000000000000000000000000;;	type HistoryRecord struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the event.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// EventInformation is a required field
0000000000000000000000000000000000000000;;		EventInformation *EventInformation `locationName:"eventInformation" type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The event type.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * error - Indicates an error with the Spot fleet request.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * fleetRequestChange - Indicates a change in the status or configuration
0000000000000000000000000000000000000000;;		//    of the Spot fleet request.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * instanceChange - Indicates that an instance was launched or terminated.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// EventType is a required field
0000000000000000000000000000000000000000;;		EventType *string `locationName:"eventType" type:"string" required:"true" enum:"EventType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The date and time of the event, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Timestamp is a required field
0000000000000000000000000000000000000000;;		Timestamp *time.Time `locationName:"timestamp" type:"timestamp" timestampFormat:"iso8601" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s HistoryRecord) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s HistoryRecord) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEventInformation sets the EventInformation field's value.
0000000000000000000000000000000000000000;;	func (s *HistoryRecord) SetEventInformation(v *EventInformation) *HistoryRecord {
0000000000000000000000000000000000000000;;		s.EventInformation = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEventType sets the EventType field's value.
0000000000000000000000000000000000000000;;	func (s *HistoryRecord) SetEventType(v string) *HistoryRecord {
0000000000000000000000000000000000000000;;		s.EventType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTimestamp sets the Timestamp field's value.
0000000000000000000000000000000000000000;;	func (s *HistoryRecord) SetTimestamp(v time.Time) *HistoryRecord {
0000000000000000000000000000000000000000;;		s.Timestamp = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the properties of the Dedicated Host.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/Host
0000000000000000000000000000000000000000;;	type Host struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Whether auto-placement is on or off.
0000000000000000000000000000000000000000;;		AutoPlacement *string `locationName:"autoPlacement" type:"string" enum:"AutoPlacement"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Availability Zone of the Dedicated Host.
0000000000000000000000000000000000000000;;		AvailabilityZone *string `locationName:"availabilityZone" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of new instances that can be launched onto the Dedicated Host.
0000000000000000000000000000000000000000;;		AvailableCapacity *AvailableCapacity `locationName:"availableCapacity" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Unique, case-sensitive identifier you provide to ensure idempotency of the
0000000000000000000000000000000000000000;;		// request. For more information, see How to Ensure Idempotency (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html)
0000000000000000000000000000000000000000;;		// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;		ClientToken *string `locationName:"clientToken" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the Dedicated Host.
0000000000000000000000000000000000000000;;		HostId *string `locationName:"hostId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The hardware specifications of the Dedicated Host.
0000000000000000000000000000000000000000;;		HostProperties *HostProperties `locationName:"hostProperties" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The reservation ID of the Dedicated Host. This returns a null response if
0000000000000000000000000000000000000000;;		// the Dedicated Host doesn't have an associated reservation.
0000000000000000000000000000000000000000;;		HostReservationId *string `locationName:"hostReservationId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IDs and instance type that are currently running on the Dedicated Host.
0000000000000000000000000000000000000000;;		Instances []*HostInstance `locationName:"instances" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Dedicated Host's state.
0000000000000000000000000000000000000000;;		State *string `locationName:"state" type:"string" enum:"AllocationState"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s Host) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s Host) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAutoPlacement sets the AutoPlacement field's value.
0000000000000000000000000000000000000000;;	func (s *Host) SetAutoPlacement(v string) *Host {
0000000000000000000000000000000000000000;;		s.AutoPlacement = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAvailabilityZone sets the AvailabilityZone field's value.
0000000000000000000000000000000000000000;;	func (s *Host) SetAvailabilityZone(v string) *Host {
0000000000000000000000000000000000000000;;		s.AvailabilityZone = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAvailableCapacity sets the AvailableCapacity field's value.
0000000000000000000000000000000000000000;;	func (s *Host) SetAvailableCapacity(v *AvailableCapacity) *Host {
0000000000000000000000000000000000000000;;		s.AvailableCapacity = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetClientToken sets the ClientToken field's value.
0000000000000000000000000000000000000000;;	func (s *Host) SetClientToken(v string) *Host {
0000000000000000000000000000000000000000;;		s.ClientToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHostId sets the HostId field's value.
0000000000000000000000000000000000000000;;	func (s *Host) SetHostId(v string) *Host {
0000000000000000000000000000000000000000;;		s.HostId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHostProperties sets the HostProperties field's value.
0000000000000000000000000000000000000000;;	func (s *Host) SetHostProperties(v *HostProperties) *Host {
0000000000000000000000000000000000000000;;		s.HostProperties = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHostReservationId sets the HostReservationId field's value.
0000000000000000000000000000000000000000;;	func (s *Host) SetHostReservationId(v string) *Host {
0000000000000000000000000000000000000000;;		s.HostReservationId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstances sets the Instances field's value.
0000000000000000000000000000000000000000;;	func (s *Host) SetInstances(v []*HostInstance) *Host {
0000000000000000000000000000000000000000;;		s.Instances = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetState sets the State field's value.
0000000000000000000000000000000000000000;;	func (s *Host) SetState(v string) *Host {
0000000000000000000000000000000000000000;;		s.State = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes an instance running on a Dedicated Host.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/HostInstance
0000000000000000000000000000000000000000;;	type HostInstance struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// the IDs of instances that are running on the Dedicated Host.
0000000000000000000000000000000000000000;;		InstanceId *string `locationName:"instanceId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The instance type size (for example, m3.medium) of the running instance.
0000000000000000000000000000000000000000;;		InstanceType *string `locationName:"instanceType" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s HostInstance) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s HostInstance) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceId sets the InstanceId field's value.
0000000000000000000000000000000000000000;;	func (s *HostInstance) SetInstanceId(v string) *HostInstance {
0000000000000000000000000000000000000000;;		s.InstanceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceType sets the InstanceType field's value.
0000000000000000000000000000000000000000;;	func (s *HostInstance) SetInstanceType(v string) *HostInstance {
0000000000000000000000000000000000000000;;		s.InstanceType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Details about the Dedicated Host Reservation offering.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/HostOffering
0000000000000000000000000000000000000000;;	type HostOffering struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The currency of the offering.
0000000000000000000000000000000000000000;;		CurrencyCode *string `locationName:"currencyCode" type:"string" enum:"CurrencyCodeValues"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The duration of the offering (in seconds).
0000000000000000000000000000000000000000;;		Duration *int64 `locationName:"duration" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The hourly price of the offering.
0000000000000000000000000000000000000000;;		HourlyPrice *string `locationName:"hourlyPrice" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The instance family of the offering.
0000000000000000000000000000000000000000;;		InstanceFamily *string `locationName:"instanceFamily" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the offering.
0000000000000000000000000000000000000000;;		OfferingId *string `locationName:"offeringId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The available payment option.
0000000000000000000000000000000000000000;;		PaymentOption *string `locationName:"paymentOption" type:"string" enum:"PaymentOption"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The upfront price of the offering. Does not apply to No Upfront offerings.
0000000000000000000000000000000000000000;;		UpfrontPrice *string `locationName:"upfrontPrice" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s HostOffering) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s HostOffering) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCurrencyCode sets the CurrencyCode field's value.
0000000000000000000000000000000000000000;;	func (s *HostOffering) SetCurrencyCode(v string) *HostOffering {
0000000000000000000000000000000000000000;;		s.CurrencyCode = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDuration sets the Duration field's value.
0000000000000000000000000000000000000000;;	func (s *HostOffering) SetDuration(v int64) *HostOffering {
0000000000000000000000000000000000000000;;		s.Duration = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHourlyPrice sets the HourlyPrice field's value.
0000000000000000000000000000000000000000;;	func (s *HostOffering) SetHourlyPrice(v string) *HostOffering {
0000000000000000000000000000000000000000;;		s.HourlyPrice = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceFamily sets the InstanceFamily field's value.
0000000000000000000000000000000000000000;;	func (s *HostOffering) SetInstanceFamily(v string) *HostOffering {
0000000000000000000000000000000000000000;;		s.InstanceFamily = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetOfferingId sets the OfferingId field's value.
0000000000000000000000000000000000000000;;	func (s *HostOffering) SetOfferingId(v string) *HostOffering {
0000000000000000000000000000000000000000;;		s.OfferingId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPaymentOption sets the PaymentOption field's value.
0000000000000000000000000000000000000000;;	func (s *HostOffering) SetPaymentOption(v string) *HostOffering {
0000000000000000000000000000000000000000;;		s.PaymentOption = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUpfrontPrice sets the UpfrontPrice field's value.
0000000000000000000000000000000000000000;;	func (s *HostOffering) SetUpfrontPrice(v string) *HostOffering {
0000000000000000000000000000000000000000;;		s.UpfrontPrice = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes properties of a Dedicated Host.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/HostProperties
0000000000000000000000000000000000000000;;	type HostProperties struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of cores on the Dedicated Host.
0000000000000000000000000000000000000000;;		Cores *int64 `locationName:"cores" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The instance type size that the Dedicated Host supports (for example, m3.medium).
0000000000000000000000000000000000000000;;		InstanceType *string `locationName:"instanceType" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of sockets on the Dedicated Host.
0000000000000000000000000000000000000000;;		Sockets *int64 `locationName:"sockets" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of vCPUs on the Dedicated Host.
0000000000000000000000000000000000000000;;		TotalVCpus *int64 `locationName:"totalVCpus" type:"integer"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s HostProperties) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s HostProperties) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCores sets the Cores field's value.
0000000000000000000000000000000000000000;;	func (s *HostProperties) SetCores(v int64) *HostProperties {
0000000000000000000000000000000000000000;;		s.Cores = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceType sets the InstanceType field's value.
0000000000000000000000000000000000000000;;	func (s *HostProperties) SetInstanceType(v string) *HostProperties {
0000000000000000000000000000000000000000;;		s.InstanceType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSockets sets the Sockets field's value.
0000000000000000000000000000000000000000;;	func (s *HostProperties) SetSockets(v int64) *HostProperties {
0000000000000000000000000000000000000000;;		s.Sockets = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTotalVCpus sets the TotalVCpus field's value.
0000000000000000000000000000000000000000;;	func (s *HostProperties) SetTotalVCpus(v int64) *HostProperties {
0000000000000000000000000000000000000000;;		s.TotalVCpus = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Details about the Dedicated Host Reservation and associated Dedicated Hosts.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/HostReservation
0000000000000000000000000000000000000000;;	type HostReservation struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of Dedicated Hosts the reservation is associated with.
0000000000000000000000000000000000000000;;		Count *int64 `locationName:"count" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The currency in which the upfrontPrice and hourlyPrice amounts are specified.
0000000000000000000000000000000000000000;;		// At this time, the only supported currency is USD.
0000000000000000000000000000000000000000;;		CurrencyCode *string `locationName:"currencyCode" type:"string" enum:"CurrencyCodeValues"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The length of the reservation's term, specified in seconds. Can be 31536000
0000000000000000000000000000000000000000;;		// (1 year) | 94608000 (3 years).
0000000000000000000000000000000000000000;;		Duration *int64 `locationName:"duration" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The date and time that the reservation ends.
0000000000000000000000000000000000000000;;		End *time.Time `locationName:"end" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IDs of the Dedicated Hosts associated with the reservation.
0000000000000000000000000000000000000000;;		HostIdSet []*string `locationName:"hostIdSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the reservation that specifies the associated Dedicated Hosts.
0000000000000000000000000000000000000000;;		HostReservationId *string `locationName:"hostReservationId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The hourly price of the reservation.
0000000000000000000000000000000000000000;;		HourlyPrice *string `locationName:"hourlyPrice" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The instance family of the Dedicated Host Reservation. The instance family
0000000000000000000000000000000000000000;;		// on the Dedicated Host must be the same in order for it to benefit from the
0000000000000000000000000000000000000000;;		// reservation.
0000000000000000000000000000000000000000;;		InstanceFamily *string `locationName:"instanceFamily" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the reservation. This remains the same regardless of which Dedicated
0000000000000000000000000000000000000000;;		// Hosts are associated with it.
0000000000000000000000000000000000000000;;		OfferingId *string `locationName:"offeringId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The payment option selected for this reservation.
0000000000000000000000000000000000000000;;		PaymentOption *string `locationName:"paymentOption" type:"string" enum:"PaymentOption"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The date and time that the reservation started.
0000000000000000000000000000000000000000;;		Start *time.Time `locationName:"start" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The state of the reservation.
0000000000000000000000000000000000000000;;		State *string `locationName:"state" type:"string" enum:"ReservationState"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The upfront price of the reservation.
0000000000000000000000000000000000000000;;		UpfrontPrice *string `locationName:"upfrontPrice" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s HostReservation) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s HostReservation) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCount sets the Count field's value.
0000000000000000000000000000000000000000;;	func (s *HostReservation) SetCount(v int64) *HostReservation {
0000000000000000000000000000000000000000;;		s.Count = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCurrencyCode sets the CurrencyCode field's value.
0000000000000000000000000000000000000000;;	func (s *HostReservation) SetCurrencyCode(v string) *HostReservation {
0000000000000000000000000000000000000000;;		s.CurrencyCode = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDuration sets the Duration field's value.
0000000000000000000000000000000000000000;;	func (s *HostReservation) SetDuration(v int64) *HostReservation {
0000000000000000000000000000000000000000;;		s.Duration = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEnd sets the End field's value.
0000000000000000000000000000000000000000;;	func (s *HostReservation) SetEnd(v time.Time) *HostReservation {
0000000000000000000000000000000000000000;;		s.End = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHostIdSet sets the HostIdSet field's value.
0000000000000000000000000000000000000000;;	func (s *HostReservation) SetHostIdSet(v []*string) *HostReservation {
0000000000000000000000000000000000000000;;		s.HostIdSet = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHostReservationId sets the HostReservationId field's value.
0000000000000000000000000000000000000000;;	func (s *HostReservation) SetHostReservationId(v string) *HostReservation {
0000000000000000000000000000000000000000;;		s.HostReservationId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHourlyPrice sets the HourlyPrice field's value.
0000000000000000000000000000000000000000;;	func (s *HostReservation) SetHourlyPrice(v string) *HostReservation {
0000000000000000000000000000000000000000;;		s.HourlyPrice = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceFamily sets the InstanceFamily field's value.
0000000000000000000000000000000000000000;;	func (s *HostReservation) SetInstanceFamily(v string) *HostReservation {
0000000000000000000000000000000000000000;;		s.InstanceFamily = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetOfferingId sets the OfferingId field's value.
0000000000000000000000000000000000000000;;	func (s *HostReservation) SetOfferingId(v string) *HostReservation {
0000000000000000000000000000000000000000;;		s.OfferingId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPaymentOption sets the PaymentOption field's value.
0000000000000000000000000000000000000000;;	func (s *HostReservation) SetPaymentOption(v string) *HostReservation {
0000000000000000000000000000000000000000;;		s.PaymentOption = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStart sets the Start field's value.
0000000000000000000000000000000000000000;;	func (s *HostReservation) SetStart(v time.Time) *HostReservation {
0000000000000000000000000000000000000000;;		s.Start = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetState sets the State field's value.
0000000000000000000000000000000000000000;;	func (s *HostReservation) SetState(v string) *HostReservation {
0000000000000000000000000000000000000000;;		s.State = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUpfrontPrice sets the UpfrontPrice field's value.
0000000000000000000000000000000000000000;;	func (s *HostReservation) SetUpfrontPrice(v string) *HostReservation {
0000000000000000000000000000000000000000;;		s.UpfrontPrice = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes an IAM instance profile.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/IamInstanceProfile
0000000000000000000000000000000000000000;;	type IamInstanceProfile struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Amazon Resource Name (ARN) of the instance profile.
0000000000000000000000000000000000000000;;		Arn *string `locationName:"arn" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the instance profile.
0000000000000000000000000000000000000000;;		Id *string `locationName:"id" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s IamInstanceProfile) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s IamInstanceProfile) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetArn sets the Arn field's value.
0000000000000000000000000000000000000000;;	func (s *IamInstanceProfile) SetArn(v string) *IamInstanceProfile {
0000000000000000000000000000000000000000;;		s.Arn = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetId sets the Id field's value.
0000000000000000000000000000000000000000;;	func (s *IamInstanceProfile) SetId(v string) *IamInstanceProfile {
0000000000000000000000000000000000000000;;		s.Id = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes an IAM instance profile.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/IamInstanceProfileSpecification
0000000000000000000000000000000000000000;;	type IamInstanceProfileSpecification struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Amazon Resource Name (ARN) of the instance profile.
0000000000000000000000000000000000000000;;		Arn *string `locationName:"arn" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the instance profile.
0000000000000000000000000000000000000000;;		Name *string `locationName:"name" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s IamInstanceProfileSpecification) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s IamInstanceProfileSpecification) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetArn sets the Arn field's value.
0000000000000000000000000000000000000000;;	func (s *IamInstanceProfileSpecification) SetArn(v string) *IamInstanceProfileSpecification {
0000000000000000000000000000000000000000;;		s.Arn = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetName sets the Name field's value.
0000000000000000000000000000000000000000;;	func (s *IamInstanceProfileSpecification) SetName(v string) *IamInstanceProfileSpecification {
0000000000000000000000000000000000000000;;		s.Name = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the ICMP type and code.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/IcmpTypeCode
0000000000000000000000000000000000000000;;	type IcmpTypeCode struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ICMP code. A value of -1 means all codes for the specified ICMP type.
0000000000000000000000000000000000000000;;		Code *int64 `locationName:"code" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ICMP type. A value of -1 means all types.
0000000000000000000000000000000000000000;;		Type *int64 `locationName:"type" type:"integer"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s IcmpTypeCode) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s IcmpTypeCode) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCode sets the Code field's value.
0000000000000000000000000000000000000000;;	func (s *IcmpTypeCode) SetCode(v int64) *IcmpTypeCode {
0000000000000000000000000000000000000000;;		s.Code = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetType sets the Type field's value.
0000000000000000000000000000000000000000;;	func (s *IcmpTypeCode) SetType(v int64) *IcmpTypeCode {
0000000000000000000000000000000000000000;;		s.Type = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the ID format for a resource.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/IdFormat
0000000000000000000000000000000000000000;;	type IdFormat struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The date in UTC at which you are permanently switched over to using longer
0000000000000000000000000000000000000000;;		// IDs. If a deadline is not yet available for this resource type, this field
0000000000000000000000000000000000000000;;		// is not returned.
0000000000000000000000000000000000000000;;		Deadline *time.Time `locationName:"deadline" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The type of resource.
0000000000000000000000000000000000000000;;		Resource *string `locationName:"resource" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether longer IDs (17-character IDs) are enabled for the resource.
0000000000000000000000000000000000000000;;		UseLongIds *bool `locationName:"useLongIds" type:"boolean"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s IdFormat) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s IdFormat) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDeadline sets the Deadline field's value.
0000000000000000000000000000000000000000;;	func (s *IdFormat) SetDeadline(v time.Time) *IdFormat {
0000000000000000000000000000000000000000;;		s.Deadline = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetResource sets the Resource field's value.
0000000000000000000000000000000000000000;;	func (s *IdFormat) SetResource(v string) *IdFormat {
0000000000000000000000000000000000000000;;		s.Resource = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUseLongIds sets the UseLongIds field's value.
0000000000000000000000000000000000000000;;	func (s *IdFormat) SetUseLongIds(v bool) *IdFormat {
0000000000000000000000000000000000000000;;		s.UseLongIds = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes an image.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/Image
0000000000000000000000000000000000000000;;	type Image struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The architecture of the image.
0000000000000000000000000000000000000000;;		Architecture *string `locationName:"architecture" type:"string" enum:"ArchitectureValues"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Any block device mapping entries.
0000000000000000000000000000000000000000;;		BlockDeviceMappings []*BlockDeviceMapping `locationName:"blockDeviceMapping" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The date and time the image was created.
0000000000000000000000000000000000000000;;		CreationDate *string `locationName:"creationDate" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The description of the AMI that was provided during image creation.
0000000000000000000000000000000000000000;;		Description *string `locationName:"description" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Specifies whether enhanced networking with ENA is enabled.
0000000000000000000000000000000000000000;;		EnaSupport *bool `locationName:"enaSupport" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The hypervisor type of the image.
0000000000000000000000000000000000000000;;		Hypervisor *string `locationName:"hypervisor" type:"string" enum:"HypervisorType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the AMI.
0000000000000000000000000000000000000000;;		ImageId *string `locationName:"imageId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The location of the AMI.
0000000000000000000000000000000000000000;;		ImageLocation *string `locationName:"imageLocation" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The AWS account alias (for example, amazon, self) or the AWS account ID of
0000000000000000000000000000000000000000;;		// the AMI owner.
0000000000000000000000000000000000000000;;		ImageOwnerAlias *string `locationName:"imageOwnerAlias" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The type of image.
0000000000000000000000000000000000000000;;		ImageType *string `locationName:"imageType" type:"string" enum:"ImageTypeValues"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The kernel associated with the image, if any. Only applicable for machine
0000000000000000000000000000000000000000;;		// images.
0000000000000000000000000000000000000000;;		KernelId *string `locationName:"kernelId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the AMI that was provided during image creation.
0000000000000000000000000000000000000000;;		Name *string `locationName:"name" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The AWS account ID of the image owner.
0000000000000000000000000000000000000000;;		OwnerId *string `locationName:"imageOwnerId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The value is Windows for Windows AMIs; otherwise blank.
0000000000000000000000000000000000000000;;		Platform *string `locationName:"platform" type:"string" enum:"PlatformValues"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Any product codes associated with the AMI.
0000000000000000000000000000000000000000;;		ProductCodes []*ProductCode `locationName:"productCodes" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether the image has public launch permissions. The value is true
0000000000000000000000000000000000000000;;		// if this image has public launch permissions or false if it has only implicit
0000000000000000000000000000000000000000;;		// and explicit launch permissions.
0000000000000000000000000000000000000000;;		Public *bool `locationName:"isPublic" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The RAM disk associated with the image, if any. Only applicable for machine
0000000000000000000000000000000000000000;;		// images.
0000000000000000000000000000000000000000;;		RamdiskId *string `locationName:"ramdiskId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The device name of the root device (for example, /dev/sda1 or /dev/xvda).
0000000000000000000000000000000000000000;;		RootDeviceName *string `locationName:"rootDeviceName" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The type of root device used by the AMI. The AMI can use an EBS volume or
0000000000000000000000000000000000000000;;		// an instance store volume.
0000000000000000000000000000000000000000;;		RootDeviceType *string `locationName:"rootDeviceType" type:"string" enum:"DeviceType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Specifies whether enhanced networking with the Intel 82599 Virtual Function
0000000000000000000000000000000000000000;;		// interface is enabled.
0000000000000000000000000000000000000000;;		SriovNetSupport *string `locationName:"sriovNetSupport" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The current state of the AMI. If the state is available, the image is successfully
0000000000000000000000000000000000000000;;		// registered and can be used to launch an instance.
0000000000000000000000000000000000000000;;		State *string `locationName:"imageState" type:"string" enum:"ImageState"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The reason for the state change.
0000000000000000000000000000000000000000;;		StateReason *StateReason `locationName:"stateReason" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Any tags assigned to the image.
0000000000000000000000000000000000000000;;		Tags []*Tag `locationName:"tagSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The type of virtualization of the AMI.
0000000000000000000000000000000000000000;;		VirtualizationType *string `locationName:"virtualizationType" type:"string" enum:"VirtualizationType"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s Image) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s Image) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetArchitecture sets the Architecture field's value.
0000000000000000000000000000000000000000;;	func (s *Image) SetArchitecture(v string) *Image {
0000000000000000000000000000000000000000;;		s.Architecture = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetBlockDeviceMappings sets the BlockDeviceMappings field's value.
0000000000000000000000000000000000000000;;	func (s *Image) SetBlockDeviceMappings(v []*BlockDeviceMapping) *Image {
0000000000000000000000000000000000000000;;		s.BlockDeviceMappings = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCreationDate sets the CreationDate field's value.
0000000000000000000000000000000000000000;;	func (s *Image) SetCreationDate(v string) *Image {
0000000000000000000000000000000000000000;;		s.CreationDate = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDescription sets the Description field's value.
0000000000000000000000000000000000000000;;	func (s *Image) SetDescription(v string) *Image {
0000000000000000000000000000000000000000;;		s.Description = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEnaSupport sets the EnaSupport field's value.
0000000000000000000000000000000000000000;;	func (s *Image) SetEnaSupport(v bool) *Image {
0000000000000000000000000000000000000000;;		s.EnaSupport = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHypervisor sets the Hypervisor field's value.
0000000000000000000000000000000000000000;;	func (s *Image) SetHypervisor(v string) *Image {
0000000000000000000000000000000000000000;;		s.Hypervisor = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetImageId sets the ImageId field's value.
0000000000000000000000000000000000000000;;	func (s *Image) SetImageId(v string) *Image {
0000000000000000000000000000000000000000;;		s.ImageId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetImageLocation sets the ImageLocation field's value.
0000000000000000000000000000000000000000;;	func (s *Image) SetImageLocation(v string) *Image {
0000000000000000000000000000000000000000;;		s.ImageLocation = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetImageOwnerAlias sets the ImageOwnerAlias field's value.
0000000000000000000000000000000000000000;;	func (s *Image) SetImageOwnerAlias(v string) *Image {
0000000000000000000000000000000000000000;;		s.ImageOwnerAlias = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetImageType sets the ImageType field's value.
0000000000000000000000000000000000000000;;	func (s *Image) SetImageType(v string) *Image {
0000000000000000000000000000000000000000;;		s.ImageType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetKernelId sets the KernelId field's value.
0000000000000000000000000000000000000000;;	func (s *Image) SetKernelId(v string) *Image {
0000000000000000000000000000000000000000;;		s.KernelId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetName sets the Name field's value.
0000000000000000000000000000000000000000;;	func (s *Image) SetName(v string) *Image {
0000000000000000000000000000000000000000;;		s.Name = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetOwnerId sets the OwnerId field's value.
0000000000000000000000000000000000000000;;	func (s *Image) SetOwnerId(v string) *Image {
0000000000000000000000000000000000000000;;		s.OwnerId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPlatform sets the Platform field's value.
0000000000000000000000000000000000000000;;	func (s *Image) SetPlatform(v string) *Image {
0000000000000000000000000000000000000000;;		s.Platform = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetProductCodes sets the ProductCodes field's value.
0000000000000000000000000000000000000000;;	func (s *Image) SetProductCodes(v []*ProductCode) *Image {
0000000000000000000000000000000000000000;;		s.ProductCodes = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPublic sets the Public field's value.
0000000000000000000000000000000000000000;;	func (s *Image) SetPublic(v bool) *Image {
0000000000000000000000000000000000000000;;		s.Public = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRamdiskId sets the RamdiskId field's value.
0000000000000000000000000000000000000000;;	func (s *Image) SetRamdiskId(v string) *Image {
0000000000000000000000000000000000000000;;		s.RamdiskId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRootDeviceName sets the RootDeviceName field's value.
0000000000000000000000000000000000000000;;	func (s *Image) SetRootDeviceName(v string) *Image {
0000000000000000000000000000000000000000;;		s.RootDeviceName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRootDeviceType sets the RootDeviceType field's value.
0000000000000000000000000000000000000000;;	func (s *Image) SetRootDeviceType(v string) *Image {
0000000000000000000000000000000000000000;;		s.RootDeviceType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSriovNetSupport sets the SriovNetSupport field's value.
0000000000000000000000000000000000000000;;	func (s *Image) SetSriovNetSupport(v string) *Image {
0000000000000000000000000000000000000000;;		s.SriovNetSupport = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetState sets the State field's value.
0000000000000000000000000000000000000000;;	func (s *Image) SetState(v string) *Image {
0000000000000000000000000000000000000000;;		s.State = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStateReason sets the StateReason field's value.
0000000000000000000000000000000000000000;;	func (s *Image) SetStateReason(v *StateReason) *Image {
0000000000000000000000000000000000000000;;		s.StateReason = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTags sets the Tags field's value.
0000000000000000000000000000000000000000;;	func (s *Image) SetTags(v []*Tag) *Image {
0000000000000000000000000000000000000000;;		s.Tags = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVirtualizationType sets the VirtualizationType field's value.
0000000000000000000000000000000000000000;;	func (s *Image) SetVirtualizationType(v string) *Image {
0000000000000000000000000000000000000000;;		s.VirtualizationType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the disk container object for an import image task.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ImageDiskContainer
0000000000000000000000000000000000000000;;	type ImageDiskContainer struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The description of the disk image.
0000000000000000000000000000000000000000;;		Description *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The block device mapping for the disk.
0000000000000000000000000000000000000000;;		DeviceName *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The format of the disk image being imported.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Valid values: RAW | VHD | VMDK | OVA
0000000000000000000000000000000000000000;;		Format *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the EBS snapshot to be used for importing the snapshot.
0000000000000000000000000000000000000000;;		SnapshotId *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The URL to the Amazon S3-based disk image being imported. The URL can either
0000000000000000000000000000000000000000;;		// be a https URL (https://..) or an Amazon S3 URL (s3://..)
0000000000000000000000000000000000000000;;		Url *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The S3 bucket for the disk image.
0000000000000000000000000000000000000000;;		UserBucket *UserBucket `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ImageDiskContainer) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ImageDiskContainer) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDescription sets the Description field's value.
0000000000000000000000000000000000000000;;	func (s *ImageDiskContainer) SetDescription(v string) *ImageDiskContainer {
0000000000000000000000000000000000000000;;		s.Description = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDeviceName sets the DeviceName field's value.
0000000000000000000000000000000000000000;;	func (s *ImageDiskContainer) SetDeviceName(v string) *ImageDiskContainer {
0000000000000000000000000000000000000000;;		s.DeviceName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFormat sets the Format field's value.
0000000000000000000000000000000000000000;;	func (s *ImageDiskContainer) SetFormat(v string) *ImageDiskContainer {
0000000000000000000000000000000000000000;;		s.Format = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSnapshotId sets the SnapshotId field's value.
0000000000000000000000000000000000000000;;	func (s *ImageDiskContainer) SetSnapshotId(v string) *ImageDiskContainer {
0000000000000000000000000000000000000000;;		s.SnapshotId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUrl sets the Url field's value.
0000000000000000000000000000000000000000;;	func (s *ImageDiskContainer) SetUrl(v string) *ImageDiskContainer {
0000000000000000000000000000000000000000;;		s.Url = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUserBucket sets the UserBucket field's value.
0000000000000000000000000000000000000000;;	func (s *ImageDiskContainer) SetUserBucket(v *UserBucket) *ImageDiskContainer {
0000000000000000000000000000000000000000;;		s.UserBucket = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for ImportImage.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ImportImageRequest
0000000000000000000000000000000000000000;;	type ImportImageInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The architecture of the virtual machine.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Valid values: i386 | x86_64
0000000000000000000000000000000000000000;;		Architecture *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The client-specific data.
0000000000000000000000000000000000000000;;		ClientData *ClientData `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token to enable idempotency for VM import requests.
0000000000000000000000000000000000000000;;		ClientToken *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A description string for the import image task.
0000000000000000000000000000000000000000;;		Description *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the disk containers.
0000000000000000000000000000000000000000;;		DiskContainers []*ImageDiskContainer `locationName:"DiskContainer" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The target hypervisor platform.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Valid values: xen
0000000000000000000000000000000000000000;;		Hypervisor *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The license type to be used for the Amazon Machine Image (AMI) after importing.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Note: You may only use BYOL if you have existing licenses with rights to
0000000000000000000000000000000000000000;;		// use these licenses in a third party cloud like AWS. For more information,
0000000000000000000000000000000000000000;;		// see Prerequisites (http://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-image-import.html#prerequisites-image)
0000000000000000000000000000000000000000;;		// in the VM Import/Export User Guide.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Valid values: AWS | BYOL
0000000000000000000000000000000000000000;;		LicenseType *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The operating system of the virtual machine.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Valid values: Windows | Linux
0000000000000000000000000000000000000000;;		Platform *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the role to use when not using the default role, 'vmimport'.
0000000000000000000000000000000000000000;;		RoleName *string `type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ImportImageInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ImportImageInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetArchitecture sets the Architecture field's value.
0000000000000000000000000000000000000000;;	func (s *ImportImageInput) SetArchitecture(v string) *ImportImageInput {
0000000000000000000000000000000000000000;;		s.Architecture = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetClientData sets the ClientData field's value.
0000000000000000000000000000000000000000;;	func (s *ImportImageInput) SetClientData(v *ClientData) *ImportImageInput {
0000000000000000000000000000000000000000;;		s.ClientData = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetClientToken sets the ClientToken field's value.
0000000000000000000000000000000000000000;;	func (s *ImportImageInput) SetClientToken(v string) *ImportImageInput {
0000000000000000000000000000000000000000;;		s.ClientToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDescription sets the Description field's value.
0000000000000000000000000000000000000000;;	func (s *ImportImageInput) SetDescription(v string) *ImportImageInput {
0000000000000000000000000000000000000000;;		s.Description = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDiskContainers sets the DiskContainers field's value.
0000000000000000000000000000000000000000;;	func (s *ImportImageInput) SetDiskContainers(v []*ImageDiskContainer) *ImportImageInput {
0000000000000000000000000000000000000000;;		s.DiskContainers = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *ImportImageInput) SetDryRun(v bool) *ImportImageInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHypervisor sets the Hypervisor field's value.
0000000000000000000000000000000000000000;;	func (s *ImportImageInput) SetHypervisor(v string) *ImportImageInput {
0000000000000000000000000000000000000000;;		s.Hypervisor = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetLicenseType sets the LicenseType field's value.
0000000000000000000000000000000000000000;;	func (s *ImportImageInput) SetLicenseType(v string) *ImportImageInput {
0000000000000000000000000000000000000000;;		s.LicenseType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPlatform sets the Platform field's value.
0000000000000000000000000000000000000000;;	func (s *ImportImageInput) SetPlatform(v string) *ImportImageInput {
0000000000000000000000000000000000000000;;		s.Platform = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRoleName sets the RoleName field's value.
0000000000000000000000000000000000000000;;	func (s *ImportImageInput) SetRoleName(v string) *ImportImageInput {
0000000000000000000000000000000000000000;;		s.RoleName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output for ImportImage.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ImportImageResult
0000000000000000000000000000000000000000;;	type ImportImageOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The architecture of the virtual machine.
0000000000000000000000000000000000000000;;		Architecture *string `locationName:"architecture" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A description of the import task.
0000000000000000000000000000000000000000;;		Description *string `locationName:"description" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The target hypervisor of the import task.
0000000000000000000000000000000000000000;;		Hypervisor *string `locationName:"hypervisor" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the Amazon Machine Image (AMI) created by the import task.
0000000000000000000000000000000000000000;;		ImageId *string `locationName:"imageId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The task ID of the import image task.
0000000000000000000000000000000000000000;;		ImportTaskId *string `locationName:"importTaskId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The license type of the virtual machine.
0000000000000000000000000000000000000000;;		LicenseType *string `locationName:"licenseType" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The operating system of the virtual machine.
0000000000000000000000000000000000000000;;		Platform *string `locationName:"platform" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The progress of the task.
0000000000000000000000000000000000000000;;		Progress *string `locationName:"progress" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the snapshots.
0000000000000000000000000000000000000000;;		SnapshotDetails []*SnapshotDetail `locationName:"snapshotDetailSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A brief status of the task.
0000000000000000000000000000000000000000;;		Status *string `locationName:"status" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A detailed status message of the import task.
0000000000000000000000000000000000000000;;		StatusMessage *string `locationName:"statusMessage" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ImportImageOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ImportImageOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetArchitecture sets the Architecture field's value.
0000000000000000000000000000000000000000;;	func (s *ImportImageOutput) SetArchitecture(v string) *ImportImageOutput {
0000000000000000000000000000000000000000;;		s.Architecture = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDescription sets the Description field's value.
0000000000000000000000000000000000000000;;	func (s *ImportImageOutput) SetDescription(v string) *ImportImageOutput {
0000000000000000000000000000000000000000;;		s.Description = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHypervisor sets the Hypervisor field's value.
0000000000000000000000000000000000000000;;	func (s *ImportImageOutput) SetHypervisor(v string) *ImportImageOutput {
0000000000000000000000000000000000000000;;		s.Hypervisor = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetImageId sets the ImageId field's value.
0000000000000000000000000000000000000000;;	func (s *ImportImageOutput) SetImageId(v string) *ImportImageOutput {
0000000000000000000000000000000000000000;;		s.ImageId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetImportTaskId sets the ImportTaskId field's value.
0000000000000000000000000000000000000000;;	func (s *ImportImageOutput) SetImportTaskId(v string) *ImportImageOutput {
0000000000000000000000000000000000000000;;		s.ImportTaskId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetLicenseType sets the LicenseType field's value.
0000000000000000000000000000000000000000;;	func (s *ImportImageOutput) SetLicenseType(v string) *ImportImageOutput {
0000000000000000000000000000000000000000;;		s.LicenseType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPlatform sets the Platform field's value.
0000000000000000000000000000000000000000;;	func (s *ImportImageOutput) SetPlatform(v string) *ImportImageOutput {
0000000000000000000000000000000000000000;;		s.Platform = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetProgress sets the Progress field's value.
0000000000000000000000000000000000000000;;	func (s *ImportImageOutput) SetProgress(v string) *ImportImageOutput {
0000000000000000000000000000000000000000;;		s.Progress = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSnapshotDetails sets the SnapshotDetails field's value.
0000000000000000000000000000000000000000;;	func (s *ImportImageOutput) SetSnapshotDetails(v []*SnapshotDetail) *ImportImageOutput {
0000000000000000000000000000000000000000;;		s.SnapshotDetails = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStatus sets the Status field's value.
0000000000000000000000000000000000000000;;	func (s *ImportImageOutput) SetStatus(v string) *ImportImageOutput {
0000000000000000000000000000000000000000;;		s.Status = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStatusMessage sets the StatusMessage field's value.
0000000000000000000000000000000000000000;;	func (s *ImportImageOutput) SetStatusMessage(v string) *ImportImageOutput {
0000000000000000000000000000000000000000;;		s.StatusMessage = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes an import image task.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ImportImageTask
0000000000000000000000000000000000000000;;	type ImportImageTask struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The architecture of the virtual machine.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Valid values: i386 | x86_64
0000000000000000000000000000000000000000;;		Architecture *string `locationName:"architecture" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A description of the import task.
0000000000000000000000000000000000000000;;		Description *string `locationName:"description" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The target hypervisor for the import task.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Valid values: xen
0000000000000000000000000000000000000000;;		Hypervisor *string `locationName:"hypervisor" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the Amazon Machine Image (AMI) of the imported virtual machine.
0000000000000000000000000000000000000000;;		ImageId *string `locationName:"imageId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the import image task.
0000000000000000000000000000000000000000;;		ImportTaskId *string `locationName:"importTaskId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The license type of the virtual machine.
0000000000000000000000000000000000000000;;		LicenseType *string `locationName:"licenseType" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The description string for the import image task.
0000000000000000000000000000000000000000;;		Platform *string `locationName:"platform" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The percentage of progress of the import image task.
0000000000000000000000000000000000000000;;		Progress *string `locationName:"progress" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the snapshots.
0000000000000000000000000000000000000000;;		SnapshotDetails []*SnapshotDetail `locationName:"snapshotDetailSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A brief status for the import image task.
0000000000000000000000000000000000000000;;		Status *string `locationName:"status" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A descriptive status message for the import image task.
0000000000000000000000000000000000000000;;		StatusMessage *string `locationName:"statusMessage" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ImportImageTask) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ImportImageTask) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetArchitecture sets the Architecture field's value.
0000000000000000000000000000000000000000;;	func (s *ImportImageTask) SetArchitecture(v string) *ImportImageTask {
0000000000000000000000000000000000000000;;		s.Architecture = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDescription sets the Description field's value.
0000000000000000000000000000000000000000;;	func (s *ImportImageTask) SetDescription(v string) *ImportImageTask {
0000000000000000000000000000000000000000;;		s.Description = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHypervisor sets the Hypervisor field's value.
0000000000000000000000000000000000000000;;	func (s *ImportImageTask) SetHypervisor(v string) *ImportImageTask {
0000000000000000000000000000000000000000;;		s.Hypervisor = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetImageId sets the ImageId field's value.
0000000000000000000000000000000000000000;;	func (s *ImportImageTask) SetImageId(v string) *ImportImageTask {
0000000000000000000000000000000000000000;;		s.ImageId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetImportTaskId sets the ImportTaskId field's value.
0000000000000000000000000000000000000000;;	func (s *ImportImageTask) SetImportTaskId(v string) *ImportImageTask {
0000000000000000000000000000000000000000;;		s.ImportTaskId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetLicenseType sets the LicenseType field's value.
0000000000000000000000000000000000000000;;	func (s *ImportImageTask) SetLicenseType(v string) *ImportImageTask {
0000000000000000000000000000000000000000;;		s.LicenseType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPlatform sets the Platform field's value.
0000000000000000000000000000000000000000;;	func (s *ImportImageTask) SetPlatform(v string) *ImportImageTask {
0000000000000000000000000000000000000000;;		s.Platform = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetProgress sets the Progress field's value.
0000000000000000000000000000000000000000;;	func (s *ImportImageTask) SetProgress(v string) *ImportImageTask {
0000000000000000000000000000000000000000;;		s.Progress = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSnapshotDetails sets the SnapshotDetails field's value.
0000000000000000000000000000000000000000;;	func (s *ImportImageTask) SetSnapshotDetails(v []*SnapshotDetail) *ImportImageTask {
0000000000000000000000000000000000000000;;		s.SnapshotDetails = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStatus sets the Status field's value.
0000000000000000000000000000000000000000;;	func (s *ImportImageTask) SetStatus(v string) *ImportImageTask {
0000000000000000000000000000000000000000;;		s.Status = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStatusMessage sets the StatusMessage field's value.
0000000000000000000000000000000000000000;;	func (s *ImportImageTask) SetStatusMessage(v string) *ImportImageTask {
0000000000000000000000000000000000000000;;		s.StatusMessage = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for ImportInstance.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ImportInstanceRequest
0000000000000000000000000000000000000000;;	type ImportInstanceInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A description for the instance being imported.
0000000000000000000000000000000000000000;;		Description *string `locationName:"description" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The disk image.
0000000000000000000000000000000000000000;;		DiskImages []*DiskImage `locationName:"diskImage" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The launch specification.
0000000000000000000000000000000000000000;;		LaunchSpecification *ImportInstanceLaunchSpecification `locationName:"launchSpecification" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The instance operating system.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Platform is a required field
0000000000000000000000000000000000000000;;		Platform *string `locationName:"platform" type:"string" required:"true" enum:"PlatformValues"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ImportInstanceInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ImportInstanceInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *ImportInstanceInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "ImportInstanceInput"}
0000000000000000000000000000000000000000;;		if s.Platform == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Platform"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.DiskImages != nil {
0000000000000000000000000000000000000000;;			for i, v := range s.DiskImages {
0000000000000000000000000000000000000000;;				if v == nil {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if err := v.Validate(); err != nil {
0000000000000000000000000000000000000000;;					invalidParams.AddNested(fmt.Sprintf("%s[%v]", "DiskImages", i), err.(request.ErrInvalidParams))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDescription sets the Description field's value.
0000000000000000000000000000000000000000;;	func (s *ImportInstanceInput) SetDescription(v string) *ImportInstanceInput {
0000000000000000000000000000000000000000;;		s.Description = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDiskImages sets the DiskImages field's value.
0000000000000000000000000000000000000000;;	func (s *ImportInstanceInput) SetDiskImages(v []*DiskImage) *ImportInstanceInput {
0000000000000000000000000000000000000000;;		s.DiskImages = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *ImportInstanceInput) SetDryRun(v bool) *ImportInstanceInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetLaunchSpecification sets the LaunchSpecification field's value.
0000000000000000000000000000000000000000;;	func (s *ImportInstanceInput) SetLaunchSpecification(v *ImportInstanceLaunchSpecification) *ImportInstanceInput {
0000000000000000000000000000000000000000;;		s.LaunchSpecification = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPlatform sets the Platform field's value.
0000000000000000000000000000000000000000;;	func (s *ImportInstanceInput) SetPlatform(v string) *ImportInstanceInput {
0000000000000000000000000000000000000000;;		s.Platform = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the launch specification for VM import.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ImportInstanceLaunchSpecification
0000000000000000000000000000000000000000;;	type ImportInstanceLaunchSpecification struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Reserved.
0000000000000000000000000000000000000000;;		AdditionalInfo *string `locationName:"additionalInfo" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The architecture of the instance.
0000000000000000000000000000000000000000;;		Architecture *string `locationName:"architecture" type:"string" enum:"ArchitectureValues"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more security group IDs.
0000000000000000000000000000000000000000;;		GroupIds []*string `locationName:"GroupId" locationNameList:"SecurityGroupId" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more security group names.
0000000000000000000000000000000000000000;;		GroupNames []*string `locationName:"GroupName" locationNameList:"SecurityGroup" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether an instance stops or terminates when you initiate shutdown
0000000000000000000000000000000000000000;;		// from the instance (using the operating system command for system shutdown).
0000000000000000000000000000000000000000;;		InstanceInitiatedShutdownBehavior *string `locationName:"instanceInitiatedShutdownBehavior" type:"string" enum:"ShutdownBehavior"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The instance type. For more information about the instance types that you
0000000000000000000000000000000000000000;;		// can import, see Instance Types (http://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-image-import.html#vmimport-instance-types)
0000000000000000000000000000000000000000;;		// in the VM Import/Export User Guide.
0000000000000000000000000000000000000000;;		InstanceType *string `locationName:"instanceType" type:"string" enum:"InstanceType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether monitoring is enabled.
0000000000000000000000000000000000000000;;		Monitoring *bool `locationName:"monitoring" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The placement information for the instance.
0000000000000000000000000000000000000000;;		Placement *Placement `locationName:"placement" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// [EC2-VPC] An available IP address from the IP address range of the subnet.
0000000000000000000000000000000000000000;;		PrivateIpAddress *string `locationName:"privateIpAddress" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// [EC2-VPC] The ID of the subnet in which to launch the instance.
0000000000000000000000000000000000000000;;		SubnetId *string `locationName:"subnetId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The user data to make available to the instance. If you are using an AWS
0000000000000000000000000000000000000000;;		// SDK or command line tool, Base64-encoding is performed for you, and you can
0000000000000000000000000000000000000000;;		// load the text from a file. Otherwise, you must provide Base64-encoded text.
0000000000000000000000000000000000000000;;		UserData *UserData `locationName:"userData" type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ImportInstanceLaunchSpecification) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ImportInstanceLaunchSpecification) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAdditionalInfo sets the AdditionalInfo field's value.
0000000000000000000000000000000000000000;;	func (s *ImportInstanceLaunchSpecification) SetAdditionalInfo(v string) *ImportInstanceLaunchSpecification {
0000000000000000000000000000000000000000;;		s.AdditionalInfo = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetArchitecture sets the Architecture field's value.
0000000000000000000000000000000000000000;;	func (s *ImportInstanceLaunchSpecification) SetArchitecture(v string) *ImportInstanceLaunchSpecification {
0000000000000000000000000000000000000000;;		s.Architecture = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroupIds sets the GroupIds field's value.
0000000000000000000000000000000000000000;;	func (s *ImportInstanceLaunchSpecification) SetGroupIds(v []*string) *ImportInstanceLaunchSpecification {
0000000000000000000000000000000000000000;;		s.GroupIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroupNames sets the GroupNames field's value.
0000000000000000000000000000000000000000;;	func (s *ImportInstanceLaunchSpecification) SetGroupNames(v []*string) *ImportInstanceLaunchSpecification {
0000000000000000000000000000000000000000;;		s.GroupNames = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceInitiatedShutdownBehavior sets the InstanceInitiatedShutdownBehavior field's value.
0000000000000000000000000000000000000000;;	func (s *ImportInstanceLaunchSpecification) SetInstanceInitiatedShutdownBehavior(v string) *ImportInstanceLaunchSpecification {
0000000000000000000000000000000000000000;;		s.InstanceInitiatedShutdownBehavior = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceType sets the InstanceType field's value.
0000000000000000000000000000000000000000;;	func (s *ImportInstanceLaunchSpecification) SetInstanceType(v string) *ImportInstanceLaunchSpecification {
0000000000000000000000000000000000000000;;		s.InstanceType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMonitoring sets the Monitoring field's value.
0000000000000000000000000000000000000000;;	func (s *ImportInstanceLaunchSpecification) SetMonitoring(v bool) *ImportInstanceLaunchSpecification {
0000000000000000000000000000000000000000;;		s.Monitoring = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPlacement sets the Placement field's value.
0000000000000000000000000000000000000000;;	func (s *ImportInstanceLaunchSpecification) SetPlacement(v *Placement) *ImportInstanceLaunchSpecification {
0000000000000000000000000000000000000000;;		s.Placement = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrivateIpAddress sets the PrivateIpAddress field's value.
0000000000000000000000000000000000000000;;	func (s *ImportInstanceLaunchSpecification) SetPrivateIpAddress(v string) *ImportInstanceLaunchSpecification {
0000000000000000000000000000000000000000;;		s.PrivateIpAddress = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSubnetId sets the SubnetId field's value.
0000000000000000000000000000000000000000;;	func (s *ImportInstanceLaunchSpecification) SetSubnetId(v string) *ImportInstanceLaunchSpecification {
0000000000000000000000000000000000000000;;		s.SubnetId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUserData sets the UserData field's value.
0000000000000000000000000000000000000000;;	func (s *ImportInstanceLaunchSpecification) SetUserData(v *UserData) *ImportInstanceLaunchSpecification {
0000000000000000000000000000000000000000;;		s.UserData = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output for ImportInstance.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ImportInstanceResult
0000000000000000000000000000000000000000;;	type ImportInstanceOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the conversion task.
0000000000000000000000000000000000000000;;		ConversionTask *ConversionTask `locationName:"conversionTask" type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ImportInstanceOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ImportInstanceOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetConversionTask sets the ConversionTask field's value.
0000000000000000000000000000000000000000;;	func (s *ImportInstanceOutput) SetConversionTask(v *ConversionTask) *ImportInstanceOutput {
0000000000000000000000000000000000000000;;		s.ConversionTask = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes an import instance task.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ImportInstanceTaskDetails
0000000000000000000000000000000000000000;;	type ImportInstanceTaskDetails struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A description of the task.
0000000000000000000000000000000000000000;;		Description *string `locationName:"description" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the instance.
0000000000000000000000000000000000000000;;		InstanceId *string `locationName:"instanceId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The instance operating system.
0000000000000000000000000000000000000000;;		Platform *string `locationName:"platform" type:"string" enum:"PlatformValues"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more volumes.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Volumes is a required field
0000000000000000000000000000000000000000;;		Volumes []*ImportInstanceVolumeDetailItem `locationName:"volumes" locationNameList:"item" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ImportInstanceTaskDetails) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ImportInstanceTaskDetails) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDescription sets the Description field's value.
0000000000000000000000000000000000000000;;	func (s *ImportInstanceTaskDetails) SetDescription(v string) *ImportInstanceTaskDetails {
0000000000000000000000000000000000000000;;		s.Description = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceId sets the InstanceId field's value.
0000000000000000000000000000000000000000;;	func (s *ImportInstanceTaskDetails) SetInstanceId(v string) *ImportInstanceTaskDetails {
0000000000000000000000000000000000000000;;		s.InstanceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPlatform sets the Platform field's value.
0000000000000000000000000000000000000000;;	func (s *ImportInstanceTaskDetails) SetPlatform(v string) *ImportInstanceTaskDetails {
0000000000000000000000000000000000000000;;		s.Platform = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVolumes sets the Volumes field's value.
0000000000000000000000000000000000000000;;	func (s *ImportInstanceTaskDetails) SetVolumes(v []*ImportInstanceVolumeDetailItem) *ImportInstanceTaskDetails {
0000000000000000000000000000000000000000;;		s.Volumes = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes an import volume task.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ImportInstanceVolumeDetailItem
0000000000000000000000000000000000000000;;	type ImportInstanceVolumeDetailItem struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Availability Zone where the resulting instance will reside.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// AvailabilityZone is a required field
0000000000000000000000000000000000000000;;		AvailabilityZone *string `locationName:"availabilityZone" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of bytes converted so far.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// BytesConverted is a required field
0000000000000000000000000000000000000000;;		BytesConverted *int64 `locationName:"bytesConverted" type:"long" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A description of the task.
0000000000000000000000000000000000000000;;		Description *string `locationName:"description" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The image.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Image is a required field
0000000000000000000000000000000000000000;;		Image *DiskImageDescription `locationName:"image" type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The status of the import of this particular disk image.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Status is a required field
0000000000000000000000000000000000000000;;		Status *string `locationName:"status" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The status information or errors related to the disk image.
0000000000000000000000000000000000000000;;		StatusMessage *string `locationName:"statusMessage" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The volume.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Volume is a required field
0000000000000000000000000000000000000000;;		Volume *DiskImageVolumeDescription `locationName:"volume" type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ImportInstanceVolumeDetailItem) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ImportInstanceVolumeDetailItem) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAvailabilityZone sets the AvailabilityZone field's value.
0000000000000000000000000000000000000000;;	func (s *ImportInstanceVolumeDetailItem) SetAvailabilityZone(v string) *ImportInstanceVolumeDetailItem {
0000000000000000000000000000000000000000;;		s.AvailabilityZone = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetBytesConverted sets the BytesConverted field's value.
0000000000000000000000000000000000000000;;	func (s *ImportInstanceVolumeDetailItem) SetBytesConverted(v int64) *ImportInstanceVolumeDetailItem {
0000000000000000000000000000000000000000;;		s.BytesConverted = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDescription sets the Description field's value.
0000000000000000000000000000000000000000;;	func (s *ImportInstanceVolumeDetailItem) SetDescription(v string) *ImportInstanceVolumeDetailItem {
0000000000000000000000000000000000000000;;		s.Description = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetImage sets the Image field's value.
0000000000000000000000000000000000000000;;	func (s *ImportInstanceVolumeDetailItem) SetImage(v *DiskImageDescription) *ImportInstanceVolumeDetailItem {
0000000000000000000000000000000000000000;;		s.Image = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStatus sets the Status field's value.
0000000000000000000000000000000000000000;;	func (s *ImportInstanceVolumeDetailItem) SetStatus(v string) *ImportInstanceVolumeDetailItem {
0000000000000000000000000000000000000000;;		s.Status = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStatusMessage sets the StatusMessage field's value.
0000000000000000000000000000000000000000;;	func (s *ImportInstanceVolumeDetailItem) SetStatusMessage(v string) *ImportInstanceVolumeDetailItem {
0000000000000000000000000000000000000000;;		s.StatusMessage = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVolume sets the Volume field's value.
0000000000000000000000000000000000000000;;	func (s *ImportInstanceVolumeDetailItem) SetVolume(v *DiskImageVolumeDescription) *ImportInstanceVolumeDetailItem {
0000000000000000000000000000000000000000;;		s.Volume = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for ImportKeyPair.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ImportKeyPairRequest
0000000000000000000000000000000000000000;;	type ImportKeyPairInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A unique name for the key pair.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// KeyName is a required field
0000000000000000000000000000000000000000;;		KeyName *string `locationName:"keyName" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The public key. For API calls, the text must be base64-encoded. For command
0000000000000000000000000000000000000000;;		// line tools, base64 encoding is performed for you.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// PublicKeyMaterial is automatically base64 encoded/decoded by the SDK.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// PublicKeyMaterial is a required field
0000000000000000000000000000000000000000;;		PublicKeyMaterial []byte `locationName:"publicKeyMaterial" type:"blob" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ImportKeyPairInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ImportKeyPairInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *ImportKeyPairInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "ImportKeyPairInput"}
0000000000000000000000000000000000000000;;		if s.KeyName == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("KeyName"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.PublicKeyMaterial == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("PublicKeyMaterial"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *ImportKeyPairInput) SetDryRun(v bool) *ImportKeyPairInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetKeyName sets the KeyName field's value.
0000000000000000000000000000000000000000;;	func (s *ImportKeyPairInput) SetKeyName(v string) *ImportKeyPairInput {
0000000000000000000000000000000000000000;;		s.KeyName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPublicKeyMaterial sets the PublicKeyMaterial field's value.
0000000000000000000000000000000000000000;;	func (s *ImportKeyPairInput) SetPublicKeyMaterial(v []byte) *ImportKeyPairInput {
0000000000000000000000000000000000000000;;		s.PublicKeyMaterial = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of ImportKeyPair.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ImportKeyPairResult
0000000000000000000000000000000000000000;;	type ImportKeyPairOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The MD5 public key fingerprint as specified in section 4 of RFC 4716.
0000000000000000000000000000000000000000;;		KeyFingerprint *string `locationName:"keyFingerprint" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The key pair name you provided.
0000000000000000000000000000000000000000;;		KeyName *string `locationName:"keyName" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ImportKeyPairOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ImportKeyPairOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetKeyFingerprint sets the KeyFingerprint field's value.
0000000000000000000000000000000000000000;;	func (s *ImportKeyPairOutput) SetKeyFingerprint(v string) *ImportKeyPairOutput {
0000000000000000000000000000000000000000;;		s.KeyFingerprint = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetKeyName sets the KeyName field's value.
0000000000000000000000000000000000000000;;	func (s *ImportKeyPairOutput) SetKeyName(v string) *ImportKeyPairOutput {
0000000000000000000000000000000000000000;;		s.KeyName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for ImportSnapshot.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ImportSnapshotRequest
0000000000000000000000000000000000000000;;	type ImportSnapshotInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The client-specific data.
0000000000000000000000000000000000000000;;		ClientData *ClientData `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Token to enable idempotency for VM import requests.
0000000000000000000000000000000000000000;;		ClientToken *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The description string for the import snapshot task.
0000000000000000000000000000000000000000;;		Description *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the disk container.
0000000000000000000000000000000000000000;;		DiskContainer *SnapshotDiskContainer `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the role to use when not using the default role, 'vmimport'.
0000000000000000000000000000000000000000;;		RoleName *string `type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ImportSnapshotInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ImportSnapshotInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetClientData sets the ClientData field's value.
0000000000000000000000000000000000000000;;	func (s *ImportSnapshotInput) SetClientData(v *ClientData) *ImportSnapshotInput {
0000000000000000000000000000000000000000;;		s.ClientData = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetClientToken sets the ClientToken field's value.
0000000000000000000000000000000000000000;;	func (s *ImportSnapshotInput) SetClientToken(v string) *ImportSnapshotInput {
0000000000000000000000000000000000000000;;		s.ClientToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDescription sets the Description field's value.
0000000000000000000000000000000000000000;;	func (s *ImportSnapshotInput) SetDescription(v string) *ImportSnapshotInput {
0000000000000000000000000000000000000000;;		s.Description = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDiskContainer sets the DiskContainer field's value.
0000000000000000000000000000000000000000;;	func (s *ImportSnapshotInput) SetDiskContainer(v *SnapshotDiskContainer) *ImportSnapshotInput {
0000000000000000000000000000000000000000;;		s.DiskContainer = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *ImportSnapshotInput) SetDryRun(v bool) *ImportSnapshotInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRoleName sets the RoleName field's value.
0000000000000000000000000000000000000000;;	func (s *ImportSnapshotInput) SetRoleName(v string) *ImportSnapshotInput {
0000000000000000000000000000000000000000;;		s.RoleName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output for ImportSnapshot.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ImportSnapshotResult
0000000000000000000000000000000000000000;;	type ImportSnapshotOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A description of the import snapshot task.
0000000000000000000000000000000000000000;;		Description *string `locationName:"description" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the import snapshot task.
0000000000000000000000000000000000000000;;		ImportTaskId *string `locationName:"importTaskId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the import snapshot task.
0000000000000000000000000000000000000000;;		SnapshotTaskDetail *SnapshotTaskDetail `locationName:"snapshotTaskDetail" type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ImportSnapshotOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ImportSnapshotOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDescription sets the Description field's value.
0000000000000000000000000000000000000000;;	func (s *ImportSnapshotOutput) SetDescription(v string) *ImportSnapshotOutput {
0000000000000000000000000000000000000000;;		s.Description = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetImportTaskId sets the ImportTaskId field's value.
0000000000000000000000000000000000000000;;	func (s *ImportSnapshotOutput) SetImportTaskId(v string) *ImportSnapshotOutput {
0000000000000000000000000000000000000000;;		s.ImportTaskId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSnapshotTaskDetail sets the SnapshotTaskDetail field's value.
0000000000000000000000000000000000000000;;	func (s *ImportSnapshotOutput) SetSnapshotTaskDetail(v *SnapshotTaskDetail) *ImportSnapshotOutput {
0000000000000000000000000000000000000000;;		s.SnapshotTaskDetail = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes an import snapshot task.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ImportSnapshotTask
0000000000000000000000000000000000000000;;	type ImportSnapshotTask struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A description of the import snapshot task.
0000000000000000000000000000000000000000;;		Description *string `locationName:"description" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the import snapshot task.
0000000000000000000000000000000000000000;;		ImportTaskId *string `locationName:"importTaskId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Describes an import snapshot task.
0000000000000000000000000000000000000000;;		SnapshotTaskDetail *SnapshotTaskDetail `locationName:"snapshotTaskDetail" type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ImportSnapshotTask) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ImportSnapshotTask) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDescription sets the Description field's value.
0000000000000000000000000000000000000000;;	func (s *ImportSnapshotTask) SetDescription(v string) *ImportSnapshotTask {
0000000000000000000000000000000000000000;;		s.Description = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetImportTaskId sets the ImportTaskId field's value.
0000000000000000000000000000000000000000;;	func (s *ImportSnapshotTask) SetImportTaskId(v string) *ImportSnapshotTask {
0000000000000000000000000000000000000000;;		s.ImportTaskId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSnapshotTaskDetail sets the SnapshotTaskDetail field's value.
0000000000000000000000000000000000000000;;	func (s *ImportSnapshotTask) SetSnapshotTaskDetail(v *SnapshotTaskDetail) *ImportSnapshotTask {
0000000000000000000000000000000000000000;;		s.SnapshotTaskDetail = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for ImportVolume.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ImportVolumeRequest
0000000000000000000000000000000000000000;;	type ImportVolumeInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Availability Zone for the resulting EBS volume.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// AvailabilityZone is a required field
0000000000000000000000000000000000000000;;		AvailabilityZone *string `locationName:"availabilityZone" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A description of the volume.
0000000000000000000000000000000000000000;;		Description *string `locationName:"description" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The disk image.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Image is a required field
0000000000000000000000000000000000000000;;		Image *DiskImageDetail `locationName:"image" type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The volume size.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Volume is a required field
0000000000000000000000000000000000000000;;		Volume *VolumeDetail `locationName:"volume" type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ImportVolumeInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ImportVolumeInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *ImportVolumeInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "ImportVolumeInput"}
0000000000000000000000000000000000000000;;		if s.AvailabilityZone == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("AvailabilityZone"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Image == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Image"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Volume == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Volume"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Image != nil {
0000000000000000000000000000000000000000;;			if err := s.Image.Validate(); err != nil {
0000000000000000000000000000000000000000;;				invalidParams.AddNested("Image", err.(request.ErrInvalidParams))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Volume != nil {
0000000000000000000000000000000000000000;;			if err := s.Volume.Validate(); err != nil {
0000000000000000000000000000000000000000;;				invalidParams.AddNested("Volume", err.(request.ErrInvalidParams))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAvailabilityZone sets the AvailabilityZone field's value.
0000000000000000000000000000000000000000;;	func (s *ImportVolumeInput) SetAvailabilityZone(v string) *ImportVolumeInput {
0000000000000000000000000000000000000000;;		s.AvailabilityZone = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDescription sets the Description field's value.
0000000000000000000000000000000000000000;;	func (s *ImportVolumeInput) SetDescription(v string) *ImportVolumeInput {
0000000000000000000000000000000000000000;;		s.Description = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *ImportVolumeInput) SetDryRun(v bool) *ImportVolumeInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetImage sets the Image field's value.
0000000000000000000000000000000000000000;;	func (s *ImportVolumeInput) SetImage(v *DiskImageDetail) *ImportVolumeInput {
0000000000000000000000000000000000000000;;		s.Image = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVolume sets the Volume field's value.
0000000000000000000000000000000000000000;;	func (s *ImportVolumeInput) SetVolume(v *VolumeDetail) *ImportVolumeInput {
0000000000000000000000000000000000000000;;		s.Volume = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output for ImportVolume.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ImportVolumeResult
0000000000000000000000000000000000000000;;	type ImportVolumeOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the conversion task.
0000000000000000000000000000000000000000;;		ConversionTask *ConversionTask `locationName:"conversionTask" type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ImportVolumeOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ImportVolumeOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetConversionTask sets the ConversionTask field's value.
0000000000000000000000000000000000000000;;	func (s *ImportVolumeOutput) SetConversionTask(v *ConversionTask) *ImportVolumeOutput {
0000000000000000000000000000000000000000;;		s.ConversionTask = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes an import volume task.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ImportVolumeTaskDetails
0000000000000000000000000000000000000000;;	type ImportVolumeTaskDetails struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Availability Zone where the resulting volume will reside.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// AvailabilityZone is a required field
0000000000000000000000000000000000000000;;		AvailabilityZone *string `locationName:"availabilityZone" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of bytes converted so far.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// BytesConverted is a required field
0000000000000000000000000000000000000000;;		BytesConverted *int64 `locationName:"bytesConverted" type:"long" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The description you provided when starting the import volume task.
0000000000000000000000000000000000000000;;		Description *string `locationName:"description" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The image.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Image is a required field
0000000000000000000000000000000000000000;;		Image *DiskImageDescription `locationName:"image" type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The volume.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Volume is a required field
0000000000000000000000000000000000000000;;		Volume *DiskImageVolumeDescription `locationName:"volume" type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ImportVolumeTaskDetails) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ImportVolumeTaskDetails) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAvailabilityZone sets the AvailabilityZone field's value.
0000000000000000000000000000000000000000;;	func (s *ImportVolumeTaskDetails) SetAvailabilityZone(v string) *ImportVolumeTaskDetails {
0000000000000000000000000000000000000000;;		s.AvailabilityZone = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetBytesConverted sets the BytesConverted field's value.
0000000000000000000000000000000000000000;;	func (s *ImportVolumeTaskDetails) SetBytesConverted(v int64) *ImportVolumeTaskDetails {
0000000000000000000000000000000000000000;;		s.BytesConverted = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDescription sets the Description field's value.
0000000000000000000000000000000000000000;;	func (s *ImportVolumeTaskDetails) SetDescription(v string) *ImportVolumeTaskDetails {
0000000000000000000000000000000000000000;;		s.Description = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetImage sets the Image field's value.
0000000000000000000000000000000000000000;;	func (s *ImportVolumeTaskDetails) SetImage(v *DiskImageDescription) *ImportVolumeTaskDetails {
0000000000000000000000000000000000000000;;		s.Image = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVolume sets the Volume field's value.
0000000000000000000000000000000000000000;;	func (s *ImportVolumeTaskDetails) SetVolume(v *DiskImageVolumeDescription) *ImportVolumeTaskDetails {
0000000000000000000000000000000000000000;;		s.Volume = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes an instance.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/Instance
0000000000000000000000000000000000000000;;	type Instance struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The AMI launch index, which can be used to find this instance in the launch
0000000000000000000000000000000000000000;;		// group.
0000000000000000000000000000000000000000;;		AmiLaunchIndex *int64 `locationName:"amiLaunchIndex" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The architecture of the image.
0000000000000000000000000000000000000000;;		Architecture *string `locationName:"architecture" type:"string" enum:"ArchitectureValues"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Any block device mapping entries for the instance.
0000000000000000000000000000000000000000;;		BlockDeviceMappings []*InstanceBlockDeviceMapping `locationName:"blockDeviceMapping" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The idempotency token you provided when you launched the instance, if applicable.
0000000000000000000000000000000000000000;;		ClientToken *string `locationName:"clientToken" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether the instance is optimized for EBS I/O. This optimization
0000000000000000000000000000000000000000;;		// provides dedicated throughput to Amazon EBS and an optimized configuration
0000000000000000000000000000000000000000;;		// stack to provide optimal I/O performance. This optimization isn't available
0000000000000000000000000000000000000000;;		// with all instance types. Additional usage charges apply when using an EBS
0000000000000000000000000000000000000000;;		// Optimized instance.
0000000000000000000000000000000000000000;;		EbsOptimized *bool `locationName:"ebsOptimized" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Specifies whether enhanced networking with ENA is enabled.
0000000000000000000000000000000000000000;;		EnaSupport *bool `locationName:"enaSupport" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The hypervisor type of the instance.
0000000000000000000000000000000000000000;;		Hypervisor *string `locationName:"hypervisor" type:"string" enum:"HypervisorType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IAM instance profile associated with the instance, if applicable.
0000000000000000000000000000000000000000;;		IamInstanceProfile *IamInstanceProfile `locationName:"iamInstanceProfile" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the AMI used to launch the instance.
0000000000000000000000000000000000000000;;		ImageId *string `locationName:"imageId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the instance.
0000000000000000000000000000000000000000;;		InstanceId *string `locationName:"instanceId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether this is a Spot instance or a Scheduled Instance.
0000000000000000000000000000000000000000;;		InstanceLifecycle *string `locationName:"instanceLifecycle" type:"string" enum:"InstanceLifecycleType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The instance type.
0000000000000000000000000000000000000000;;		InstanceType *string `locationName:"instanceType" type:"string" enum:"InstanceType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The kernel associated with this instance, if applicable.
0000000000000000000000000000000000000000;;		KernelId *string `locationName:"kernelId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the key pair, if this instance was launched with an associated
0000000000000000000000000000000000000000;;		// key pair.
0000000000000000000000000000000000000000;;		KeyName *string `locationName:"keyName" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The time the instance was launched.
0000000000000000000000000000000000000000;;		LaunchTime *time.Time `locationName:"launchTime" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The monitoring for the instance.
0000000000000000000000000000000000000000;;		Monitoring *Monitoring `locationName:"monitoring" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// [EC2-VPC] One or more network interfaces for the instance.
0000000000000000000000000000000000000000;;		NetworkInterfaces []*InstanceNetworkInterface `locationName:"networkInterfaceSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The location where the instance launched, if applicable.
0000000000000000000000000000000000000000;;		Placement *Placement `locationName:"placement" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The value is Windows for Windows instances; otherwise blank.
0000000000000000000000000000000000000000;;		Platform *string `locationName:"platform" type:"string" enum:"PlatformValues"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// (IPv4 only) The private DNS hostname name assigned to the instance. This
0000000000000000000000000000000000000000;;		// DNS hostname can only be used inside the Amazon EC2 network. This name is
0000000000000000000000000000000000000000;;		// not available until the instance enters the running state.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// [EC2-VPC] The Amazon-provided DNS server will resolve Amazon-provided private
0000000000000000000000000000000000000000;;		// DNS hostnames if you've enabled DNS resolution and DNS hostnames in your
0000000000000000000000000000000000000000;;		// VPC. If you are not using the Amazon-provided DNS server in your VPC, your
0000000000000000000000000000000000000000;;		// custom domain name servers must resolve the hostname as appropriate.
0000000000000000000000000000000000000000;;		PrivateDnsName *string `locationName:"privateDnsName" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The private IPv4 address assigned to the instance.
0000000000000000000000000000000000000000;;		PrivateIpAddress *string `locationName:"privateIpAddress" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The product codes attached to this instance, if applicable.
0000000000000000000000000000000000000000;;		ProductCodes []*ProductCode `locationName:"productCodes" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// (IPv4 only) The public DNS name assigned to the instance. This name is not
0000000000000000000000000000000000000000;;		// available until the instance enters the running state. For EC2-VPC, this
0000000000000000000000000000000000000000;;		// name is only available if you've enabled DNS hostnames for your VPC.
0000000000000000000000000000000000000000;;		PublicDnsName *string `locationName:"dnsName" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The public IPv4 address assigned to the instance, if applicable.
0000000000000000000000000000000000000000;;		PublicIpAddress *string `locationName:"ipAddress" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The RAM disk associated with this instance, if applicable.
0000000000000000000000000000000000000000;;		RamdiskId *string `locationName:"ramdiskId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The root device name (for example, /dev/sda1 or /dev/xvda).
0000000000000000000000000000000000000000;;		RootDeviceName *string `locationName:"rootDeviceName" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The root device type used by the AMI. The AMI can use an EBS volume or an
0000000000000000000000000000000000000000;;		// instance store volume.
0000000000000000000000000000000000000000;;		RootDeviceType *string `locationName:"rootDeviceType" type:"string" enum:"DeviceType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more security groups for the instance.
0000000000000000000000000000000000000000;;		SecurityGroups []*GroupIdentifier `locationName:"groupSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Specifies whether to enable an instance launched in a VPC to perform NAT.
0000000000000000000000000000000000000000;;		// This controls whether source/destination checking is enabled on the instance.
0000000000000000000000000000000000000000;;		// A value of true means checking is enabled, and false means checking is disabled.
0000000000000000000000000000000000000000;;		// The value must be false for the instance to perform NAT. For more information,
0000000000000000000000000000000000000000;;		// see NAT Instances (http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_NAT_Instance.html)
0000000000000000000000000000000000000000;;		// in the Amazon Virtual Private Cloud User Guide.
0000000000000000000000000000000000000000;;		SourceDestCheck *bool `locationName:"sourceDestCheck" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If the request is a Spot instance request, the ID of the request.
0000000000000000000000000000000000000000;;		SpotInstanceRequestId *string `locationName:"spotInstanceRequestId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Specifies whether enhanced networking with the Intel 82599 Virtual Function
0000000000000000000000000000000000000000;;		// interface is enabled.
0000000000000000000000000000000000000000;;		SriovNetSupport *string `locationName:"sriovNetSupport" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The current state of the instance.
0000000000000000000000000000000000000000;;		State *InstanceState `locationName:"instanceState" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The reason for the most recent state transition.
0000000000000000000000000000000000000000;;		StateReason *StateReason `locationName:"stateReason" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The reason for the most recent state transition. This might be an empty string.
0000000000000000000000000000000000000000;;		StateTransitionReason *string `locationName:"reason" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// [EC2-VPC] The ID of the subnet in which the instance is running.
0000000000000000000000000000000000000000;;		SubnetId *string `locationName:"subnetId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Any tags assigned to the instance.
0000000000000000000000000000000000000000;;		Tags []*Tag `locationName:"tagSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The virtualization type of the instance.
0000000000000000000000000000000000000000;;		VirtualizationType *string `locationName:"virtualizationType" type:"string" enum:"VirtualizationType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// [EC2-VPC] The ID of the VPC in which the instance is running.
0000000000000000000000000000000000000000;;		VpcId *string `locationName:"vpcId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s Instance) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s Instance) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAmiLaunchIndex sets the AmiLaunchIndex field's value.
0000000000000000000000000000000000000000;;	func (s *Instance) SetAmiLaunchIndex(v int64) *Instance {
0000000000000000000000000000000000000000;;		s.AmiLaunchIndex = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetArchitecture sets the Architecture field's value.
0000000000000000000000000000000000000000;;	func (s *Instance) SetArchitecture(v string) *Instance {
0000000000000000000000000000000000000000;;		s.Architecture = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetBlockDeviceMappings sets the BlockDeviceMappings field's value.
0000000000000000000000000000000000000000;;	func (s *Instance) SetBlockDeviceMappings(v []*InstanceBlockDeviceMapping) *Instance {
0000000000000000000000000000000000000000;;		s.BlockDeviceMappings = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetClientToken sets the ClientToken field's value.
0000000000000000000000000000000000000000;;	func (s *Instance) SetClientToken(v string) *Instance {
0000000000000000000000000000000000000000;;		s.ClientToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEbsOptimized sets the EbsOptimized field's value.
0000000000000000000000000000000000000000;;	func (s *Instance) SetEbsOptimized(v bool) *Instance {
0000000000000000000000000000000000000000;;		s.EbsOptimized = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEnaSupport sets the EnaSupport field's value.
0000000000000000000000000000000000000000;;	func (s *Instance) SetEnaSupport(v bool) *Instance {
0000000000000000000000000000000000000000;;		s.EnaSupport = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHypervisor sets the Hypervisor field's value.
0000000000000000000000000000000000000000;;	func (s *Instance) SetHypervisor(v string) *Instance {
0000000000000000000000000000000000000000;;		s.Hypervisor = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIamInstanceProfile sets the IamInstanceProfile field's value.
0000000000000000000000000000000000000000;;	func (s *Instance) SetIamInstanceProfile(v *IamInstanceProfile) *Instance {
0000000000000000000000000000000000000000;;		s.IamInstanceProfile = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetImageId sets the ImageId field's value.
0000000000000000000000000000000000000000;;	func (s *Instance) SetImageId(v string) *Instance {
0000000000000000000000000000000000000000;;		s.ImageId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceId sets the InstanceId field's value.
0000000000000000000000000000000000000000;;	func (s *Instance) SetInstanceId(v string) *Instance {
0000000000000000000000000000000000000000;;		s.InstanceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceLifecycle sets the InstanceLifecycle field's value.
0000000000000000000000000000000000000000;;	func (s *Instance) SetInstanceLifecycle(v string) *Instance {
0000000000000000000000000000000000000000;;		s.InstanceLifecycle = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceType sets the InstanceType field's value.
0000000000000000000000000000000000000000;;	func (s *Instance) SetInstanceType(v string) *Instance {
0000000000000000000000000000000000000000;;		s.InstanceType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetKernelId sets the KernelId field's value.
0000000000000000000000000000000000000000;;	func (s *Instance) SetKernelId(v string) *Instance {
0000000000000000000000000000000000000000;;		s.KernelId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetKeyName sets the KeyName field's value.
0000000000000000000000000000000000000000;;	func (s *Instance) SetKeyName(v string) *Instance {
0000000000000000000000000000000000000000;;		s.KeyName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetLaunchTime sets the LaunchTime field's value.
0000000000000000000000000000000000000000;;	func (s *Instance) SetLaunchTime(v time.Time) *Instance {
0000000000000000000000000000000000000000;;		s.LaunchTime = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMonitoring sets the Monitoring field's value.
0000000000000000000000000000000000000000;;	func (s *Instance) SetMonitoring(v *Monitoring) *Instance {
0000000000000000000000000000000000000000;;		s.Monitoring = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNetworkInterfaces sets the NetworkInterfaces field's value.
0000000000000000000000000000000000000000;;	func (s *Instance) SetNetworkInterfaces(v []*InstanceNetworkInterface) *Instance {
0000000000000000000000000000000000000000;;		s.NetworkInterfaces = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPlacement sets the Placement field's value.
0000000000000000000000000000000000000000;;	func (s *Instance) SetPlacement(v *Placement) *Instance {
0000000000000000000000000000000000000000;;		s.Placement = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPlatform sets the Platform field's value.
0000000000000000000000000000000000000000;;	func (s *Instance) SetPlatform(v string) *Instance {
0000000000000000000000000000000000000000;;		s.Platform = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrivateDnsName sets the PrivateDnsName field's value.
0000000000000000000000000000000000000000;;	func (s *Instance) SetPrivateDnsName(v string) *Instance {
0000000000000000000000000000000000000000;;		s.PrivateDnsName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrivateIpAddress sets the PrivateIpAddress field's value.
0000000000000000000000000000000000000000;;	func (s *Instance) SetPrivateIpAddress(v string) *Instance {
0000000000000000000000000000000000000000;;		s.PrivateIpAddress = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetProductCodes sets the ProductCodes field's value.
0000000000000000000000000000000000000000;;	func (s *Instance) SetProductCodes(v []*ProductCode) *Instance {
0000000000000000000000000000000000000000;;		s.ProductCodes = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPublicDnsName sets the PublicDnsName field's value.
0000000000000000000000000000000000000000;;	func (s *Instance) SetPublicDnsName(v string) *Instance {
0000000000000000000000000000000000000000;;		s.PublicDnsName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPublicIpAddress sets the PublicIpAddress field's value.
0000000000000000000000000000000000000000;;	func (s *Instance) SetPublicIpAddress(v string) *Instance {
0000000000000000000000000000000000000000;;		s.PublicIpAddress = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRamdiskId sets the RamdiskId field's value.
0000000000000000000000000000000000000000;;	func (s *Instance) SetRamdiskId(v string) *Instance {
0000000000000000000000000000000000000000;;		s.RamdiskId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRootDeviceName sets the RootDeviceName field's value.
0000000000000000000000000000000000000000;;	func (s *Instance) SetRootDeviceName(v string) *Instance {
0000000000000000000000000000000000000000;;		s.RootDeviceName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRootDeviceType sets the RootDeviceType field's value.
0000000000000000000000000000000000000000;;	func (s *Instance) SetRootDeviceType(v string) *Instance {
0000000000000000000000000000000000000000;;		s.RootDeviceType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSecurityGroups sets the SecurityGroups field's value.
0000000000000000000000000000000000000000;;	func (s *Instance) SetSecurityGroups(v []*GroupIdentifier) *Instance {
0000000000000000000000000000000000000000;;		s.SecurityGroups = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSourceDestCheck sets the SourceDestCheck field's value.
0000000000000000000000000000000000000000;;	func (s *Instance) SetSourceDestCheck(v bool) *Instance {
0000000000000000000000000000000000000000;;		s.SourceDestCheck = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSpotInstanceRequestId sets the SpotInstanceRequestId field's value.
0000000000000000000000000000000000000000;;	func (s *Instance) SetSpotInstanceRequestId(v string) *Instance {
0000000000000000000000000000000000000000;;		s.SpotInstanceRequestId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSriovNetSupport sets the SriovNetSupport field's value.
0000000000000000000000000000000000000000;;	func (s *Instance) SetSriovNetSupport(v string) *Instance {
0000000000000000000000000000000000000000;;		s.SriovNetSupport = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetState sets the State field's value.
0000000000000000000000000000000000000000;;	func (s *Instance) SetState(v *InstanceState) *Instance {
0000000000000000000000000000000000000000;;		s.State = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStateReason sets the StateReason field's value.
0000000000000000000000000000000000000000;;	func (s *Instance) SetStateReason(v *StateReason) *Instance {
0000000000000000000000000000000000000000;;		s.StateReason = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStateTransitionReason sets the StateTransitionReason field's value.
0000000000000000000000000000000000000000;;	func (s *Instance) SetStateTransitionReason(v string) *Instance {
0000000000000000000000000000000000000000;;		s.StateTransitionReason = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSubnetId sets the SubnetId field's value.
0000000000000000000000000000000000000000;;	func (s *Instance) SetSubnetId(v string) *Instance {
0000000000000000000000000000000000000000;;		s.SubnetId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTags sets the Tags field's value.
0000000000000000000000000000000000000000;;	func (s *Instance) SetTags(v []*Tag) *Instance {
0000000000000000000000000000000000000000;;		s.Tags = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVirtualizationType sets the VirtualizationType field's value.
0000000000000000000000000000000000000000;;	func (s *Instance) SetVirtualizationType(v string) *Instance {
0000000000000000000000000000000000000000;;		s.VirtualizationType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcId sets the VpcId field's value.
0000000000000000000000000000000000000000;;	func (s *Instance) SetVpcId(v string) *Instance {
0000000000000000000000000000000000000000;;		s.VpcId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a block device mapping.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/InstanceBlockDeviceMapping
0000000000000000000000000000000000000000;;	type InstanceBlockDeviceMapping struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The device name exposed to the instance (for example, /dev/sdh or xvdh).
0000000000000000000000000000000000000000;;		DeviceName *string `locationName:"deviceName" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Parameters used to automatically set up EBS volumes when the instance is
0000000000000000000000000000000000000000;;		// launched.
0000000000000000000000000000000000000000;;		Ebs *EbsInstanceBlockDevice `locationName:"ebs" type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s InstanceBlockDeviceMapping) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s InstanceBlockDeviceMapping) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDeviceName sets the DeviceName field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceBlockDeviceMapping) SetDeviceName(v string) *InstanceBlockDeviceMapping {
0000000000000000000000000000000000000000;;		s.DeviceName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEbs sets the Ebs field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceBlockDeviceMapping) SetEbs(v *EbsInstanceBlockDevice) *InstanceBlockDeviceMapping {
0000000000000000000000000000000000000000;;		s.Ebs = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a block device mapping entry.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/InstanceBlockDeviceMappingSpecification
0000000000000000000000000000000000000000;;	type InstanceBlockDeviceMappingSpecification struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The device name exposed to the instance (for example, /dev/sdh or xvdh).
0000000000000000000000000000000000000000;;		DeviceName *string `locationName:"deviceName" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Parameters used to automatically set up EBS volumes when the instance is
0000000000000000000000000000000000000000;;		// launched.
0000000000000000000000000000000000000000;;		Ebs *EbsInstanceBlockDeviceSpecification `locationName:"ebs" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// suppress the specified device included in the block device mapping.
0000000000000000000000000000000000000000;;		NoDevice *string `locationName:"noDevice" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The virtual device name.
0000000000000000000000000000000000000000;;		VirtualName *string `locationName:"virtualName" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s InstanceBlockDeviceMappingSpecification) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s InstanceBlockDeviceMappingSpecification) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDeviceName sets the DeviceName field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceBlockDeviceMappingSpecification) SetDeviceName(v string) *InstanceBlockDeviceMappingSpecification {
0000000000000000000000000000000000000000;;		s.DeviceName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEbs sets the Ebs field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceBlockDeviceMappingSpecification) SetEbs(v *EbsInstanceBlockDeviceSpecification) *InstanceBlockDeviceMappingSpecification {
0000000000000000000000000000000000000000;;		s.Ebs = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNoDevice sets the NoDevice field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceBlockDeviceMappingSpecification) SetNoDevice(v string) *InstanceBlockDeviceMappingSpecification {
0000000000000000000000000000000000000000;;		s.NoDevice = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVirtualName sets the VirtualName field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceBlockDeviceMappingSpecification) SetVirtualName(v string) *InstanceBlockDeviceMappingSpecification {
0000000000000000000000000000000000000000;;		s.VirtualName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Information about the instance type that the Dedicated Host supports.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/InstanceCapacity
0000000000000000000000000000000000000000;;	type InstanceCapacity struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of instances that can still be launched onto the Dedicated Host.
0000000000000000000000000000000000000000;;		AvailableCapacity *int64 `locationName:"availableCapacity" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The instance type size supported by the Dedicated Host.
0000000000000000000000000000000000000000;;		InstanceType *string `locationName:"instanceType" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The total number of instances that can be launched onto the Dedicated Host.
0000000000000000000000000000000000000000;;		TotalCapacity *int64 `locationName:"totalCapacity" type:"integer"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s InstanceCapacity) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s InstanceCapacity) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAvailableCapacity sets the AvailableCapacity field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceCapacity) SetAvailableCapacity(v int64) *InstanceCapacity {
0000000000000000000000000000000000000000;;		s.AvailableCapacity = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceType sets the InstanceType field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceCapacity) SetInstanceType(v string) *InstanceCapacity {
0000000000000000000000000000000000000000;;		s.InstanceType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTotalCapacity sets the TotalCapacity field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceCapacity) SetTotalCapacity(v int64) *InstanceCapacity {
0000000000000000000000000000000000000000;;		s.TotalCapacity = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a Reserved Instance listing state.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/InstanceCount
0000000000000000000000000000000000000000;;	type InstanceCount struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of listed Reserved Instances in the state specified by the state.
0000000000000000000000000000000000000000;;		InstanceCount *int64 `locationName:"instanceCount" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The states of the listed Reserved Instances.
0000000000000000000000000000000000000000;;		State *string `locationName:"state" type:"string" enum:"ListingState"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s InstanceCount) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s InstanceCount) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceCount sets the InstanceCount field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceCount) SetInstanceCount(v int64) *InstanceCount {
0000000000000000000000000000000000000000;;		s.InstanceCount = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetState sets the State field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceCount) SetState(v string) *InstanceCount {
0000000000000000000000000000000000000000;;		s.State = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes an instance to export.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/InstanceExportDetails
0000000000000000000000000000000000000000;;	type InstanceExportDetails struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the resource being exported.
0000000000000000000000000000000000000000;;		InstanceId *string `locationName:"instanceId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The target virtualization environment.
0000000000000000000000000000000000000000;;		TargetEnvironment *string `locationName:"targetEnvironment" type:"string" enum:"ExportEnvironment"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s InstanceExportDetails) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s InstanceExportDetails) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceId sets the InstanceId field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceExportDetails) SetInstanceId(v string) *InstanceExportDetails {
0000000000000000000000000000000000000000;;		s.InstanceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTargetEnvironment sets the TargetEnvironment field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceExportDetails) SetTargetEnvironment(v string) *InstanceExportDetails {
0000000000000000000000000000000000000000;;		s.TargetEnvironment = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes an IPv6 address.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/InstanceIpv6Address
0000000000000000000000000000000000000000;;	type InstanceIpv6Address struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IPv6 address.
0000000000000000000000000000000000000000;;		Ipv6Address *string `locationName:"ipv6Address" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s InstanceIpv6Address) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s InstanceIpv6Address) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpv6Address sets the Ipv6Address field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceIpv6Address) SetIpv6Address(v string) *InstanceIpv6Address {
0000000000000000000000000000000000000000;;		s.Ipv6Address = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the monitoring of an instance.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/InstanceMonitoring
0000000000000000000000000000000000000000;;	type InstanceMonitoring struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the instance.
0000000000000000000000000000000000000000;;		InstanceId *string `locationName:"instanceId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The monitoring for the instance.
0000000000000000000000000000000000000000;;		Monitoring *Monitoring `locationName:"monitoring" type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s InstanceMonitoring) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s InstanceMonitoring) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceId sets the InstanceId field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceMonitoring) SetInstanceId(v string) *InstanceMonitoring {
0000000000000000000000000000000000000000;;		s.InstanceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMonitoring sets the Monitoring field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceMonitoring) SetMonitoring(v *Monitoring) *InstanceMonitoring {
0000000000000000000000000000000000000000;;		s.Monitoring = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a network interface.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/InstanceNetworkInterface
0000000000000000000000000000000000000000;;	type InstanceNetworkInterface struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The association information for an Elastic IPv4 associated with the network
0000000000000000000000000000000000000000;;		// interface.
0000000000000000000000000000000000000000;;		Association *InstanceNetworkInterfaceAssociation `locationName:"association" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The network interface attachment.
0000000000000000000000000000000000000000;;		Attachment *InstanceNetworkInterfaceAttachment `locationName:"attachment" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The description.
0000000000000000000000000000000000000000;;		Description *string `locationName:"description" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more security groups.
0000000000000000000000000000000000000000;;		Groups []*GroupIdentifier `locationName:"groupSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more IPv6 addresses associated with the network interface.
0000000000000000000000000000000000000000;;		Ipv6Addresses []*InstanceIpv6Address `locationName:"ipv6AddressesSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The MAC address.
0000000000000000000000000000000000000000;;		MacAddress *string `locationName:"macAddress" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the network interface.
0000000000000000000000000000000000000000;;		NetworkInterfaceId *string `locationName:"networkInterfaceId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the AWS account that created the network interface.
0000000000000000000000000000000000000000;;		OwnerId *string `locationName:"ownerId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The private DNS name.
0000000000000000000000000000000000000000;;		PrivateDnsName *string `locationName:"privateDnsName" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IPv4 address of the network interface within the subnet.
0000000000000000000000000000000000000000;;		PrivateIpAddress *string `locationName:"privateIpAddress" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more private IPv4 addresses associated with the network interface.
0000000000000000000000000000000000000000;;		PrivateIpAddresses []*InstancePrivateIpAddress `locationName:"privateIpAddressesSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether to validate network traffic to or from this network interface.
0000000000000000000000000000000000000000;;		SourceDestCheck *bool `locationName:"sourceDestCheck" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The status of the network interface.
0000000000000000000000000000000000000000;;		Status *string `locationName:"status" type:"string" enum:"NetworkInterfaceStatus"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the subnet.
0000000000000000000000000000000000000000;;		SubnetId *string `locationName:"subnetId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC.
0000000000000000000000000000000000000000;;		VpcId *string `locationName:"vpcId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s InstanceNetworkInterface) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s InstanceNetworkInterface) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAssociation sets the Association field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceNetworkInterface) SetAssociation(v *InstanceNetworkInterfaceAssociation) *InstanceNetworkInterface {
0000000000000000000000000000000000000000;;		s.Association = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAttachment sets the Attachment field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceNetworkInterface) SetAttachment(v *InstanceNetworkInterfaceAttachment) *InstanceNetworkInterface {
0000000000000000000000000000000000000000;;		s.Attachment = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDescription sets the Description field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceNetworkInterface) SetDescription(v string) *InstanceNetworkInterface {
0000000000000000000000000000000000000000;;		s.Description = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroups sets the Groups field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceNetworkInterface) SetGroups(v []*GroupIdentifier) *InstanceNetworkInterface {
0000000000000000000000000000000000000000;;		s.Groups = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpv6Addresses sets the Ipv6Addresses field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceNetworkInterface) SetIpv6Addresses(v []*InstanceIpv6Address) *InstanceNetworkInterface {
0000000000000000000000000000000000000000;;		s.Ipv6Addresses = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMacAddress sets the MacAddress field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceNetworkInterface) SetMacAddress(v string) *InstanceNetworkInterface {
0000000000000000000000000000000000000000;;		s.MacAddress = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNetworkInterfaceId sets the NetworkInterfaceId field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceNetworkInterface) SetNetworkInterfaceId(v string) *InstanceNetworkInterface {
0000000000000000000000000000000000000000;;		s.NetworkInterfaceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetOwnerId sets the OwnerId field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceNetworkInterface) SetOwnerId(v string) *InstanceNetworkInterface {
0000000000000000000000000000000000000000;;		s.OwnerId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrivateDnsName sets the PrivateDnsName field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceNetworkInterface) SetPrivateDnsName(v string) *InstanceNetworkInterface {
0000000000000000000000000000000000000000;;		s.PrivateDnsName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrivateIpAddress sets the PrivateIpAddress field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceNetworkInterface) SetPrivateIpAddress(v string) *InstanceNetworkInterface {
0000000000000000000000000000000000000000;;		s.PrivateIpAddress = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrivateIpAddresses sets the PrivateIpAddresses field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceNetworkInterface) SetPrivateIpAddresses(v []*InstancePrivateIpAddress) *InstanceNetworkInterface {
0000000000000000000000000000000000000000;;		s.PrivateIpAddresses = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSourceDestCheck sets the SourceDestCheck field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceNetworkInterface) SetSourceDestCheck(v bool) *InstanceNetworkInterface {
0000000000000000000000000000000000000000;;		s.SourceDestCheck = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStatus sets the Status field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceNetworkInterface) SetStatus(v string) *InstanceNetworkInterface {
0000000000000000000000000000000000000000;;		s.Status = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSubnetId sets the SubnetId field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceNetworkInterface) SetSubnetId(v string) *InstanceNetworkInterface {
0000000000000000000000000000000000000000;;		s.SubnetId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcId sets the VpcId field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceNetworkInterface) SetVpcId(v string) *InstanceNetworkInterface {
0000000000000000000000000000000000000000;;		s.VpcId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes association information for an Elastic IP address (IPv4).
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/InstanceNetworkInterfaceAssociation
0000000000000000000000000000000000000000;;	type InstanceNetworkInterfaceAssociation struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the owner of the Elastic IP address.
0000000000000000000000000000000000000000;;		IpOwnerId *string `locationName:"ipOwnerId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The public DNS name.
0000000000000000000000000000000000000000;;		PublicDnsName *string `locationName:"publicDnsName" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The public IP address or Elastic IP address bound to the network interface.
0000000000000000000000000000000000000000;;		PublicIp *string `locationName:"publicIp" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s InstanceNetworkInterfaceAssociation) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s InstanceNetworkInterfaceAssociation) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpOwnerId sets the IpOwnerId field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceNetworkInterfaceAssociation) SetIpOwnerId(v string) *InstanceNetworkInterfaceAssociation {
0000000000000000000000000000000000000000;;		s.IpOwnerId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPublicDnsName sets the PublicDnsName field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceNetworkInterfaceAssociation) SetPublicDnsName(v string) *InstanceNetworkInterfaceAssociation {
0000000000000000000000000000000000000000;;		s.PublicDnsName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPublicIp sets the PublicIp field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceNetworkInterfaceAssociation) SetPublicIp(v string) *InstanceNetworkInterfaceAssociation {
0000000000000000000000000000000000000000;;		s.PublicIp = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a network interface attachment.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/InstanceNetworkInterfaceAttachment
0000000000000000000000000000000000000000;;	type InstanceNetworkInterfaceAttachment struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The time stamp when the attachment initiated.
0000000000000000000000000000000000000000;;		AttachTime *time.Time `locationName:"attachTime" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the network interface attachment.
0000000000000000000000000000000000000000;;		AttachmentId *string `locationName:"attachmentId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether the network interface is deleted when the instance is terminated.
0000000000000000000000000000000000000000;;		DeleteOnTermination *bool `locationName:"deleteOnTermination" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The index of the device on the instance for the network interface attachment.
0000000000000000000000000000000000000000;;		DeviceIndex *int64 `locationName:"deviceIndex" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The attachment state.
0000000000000000000000000000000000000000;;		Status *string `locationName:"status" type:"string" enum:"AttachmentStatus"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s InstanceNetworkInterfaceAttachment) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s InstanceNetworkInterfaceAttachment) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAttachTime sets the AttachTime field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceNetworkInterfaceAttachment) SetAttachTime(v time.Time) *InstanceNetworkInterfaceAttachment {
0000000000000000000000000000000000000000;;		s.AttachTime = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAttachmentId sets the AttachmentId field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceNetworkInterfaceAttachment) SetAttachmentId(v string) *InstanceNetworkInterfaceAttachment {
0000000000000000000000000000000000000000;;		s.AttachmentId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDeleteOnTermination sets the DeleteOnTermination field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceNetworkInterfaceAttachment) SetDeleteOnTermination(v bool) *InstanceNetworkInterfaceAttachment {
0000000000000000000000000000000000000000;;		s.DeleteOnTermination = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDeviceIndex sets the DeviceIndex field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceNetworkInterfaceAttachment) SetDeviceIndex(v int64) *InstanceNetworkInterfaceAttachment {
0000000000000000000000000000000000000000;;		s.DeviceIndex = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStatus sets the Status field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceNetworkInterfaceAttachment) SetStatus(v string) *InstanceNetworkInterfaceAttachment {
0000000000000000000000000000000000000000;;		s.Status = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a network interface.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/InstanceNetworkInterfaceSpecification
0000000000000000000000000000000000000000;;	type InstanceNetworkInterfaceSpecification struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether to assign a public IPv4 address to an instance you launch
0000000000000000000000000000000000000000;;		// in a VPC. The public IP address can only be assigned to a network interface
0000000000000000000000000000000000000000;;		// for eth0, and can only be assigned to a new network interface, not an existing
0000000000000000000000000000000000000000;;		// one. You cannot specify more than one network interface in the request. If
0000000000000000000000000000000000000000;;		// launching into a default subnet, the default value is true.
0000000000000000000000000000000000000000;;		AssociatePublicIpAddress *bool `locationName:"associatePublicIpAddress" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If set to true, the interface is deleted when the instance is terminated.
0000000000000000000000000000000000000000;;		// You can specify true only if creating a new network interface when launching
0000000000000000000000000000000000000000;;		// an instance.
0000000000000000000000000000000000000000;;		DeleteOnTermination *bool `locationName:"deleteOnTermination" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The description of the network interface. Applies only if creating a network
0000000000000000000000000000000000000000;;		// interface when launching an instance.
0000000000000000000000000000000000000000;;		Description *string `locationName:"description" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The index of the device on the instance for the network interface attachment.
0000000000000000000000000000000000000000;;		// If you are specifying a network interface in a RunInstances request, you
0000000000000000000000000000000000000000;;		// must provide the device index.
0000000000000000000000000000000000000000;;		DeviceIndex *int64 `locationName:"deviceIndex" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IDs of the security groups for the network interface. Applies only if
0000000000000000000000000000000000000000;;		// creating a network interface when launching an instance.
0000000000000000000000000000000000000000;;		Groups []*string `locationName:"SecurityGroupId" locationNameList:"SecurityGroupId" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A number of IPv6 addresses to assign to the network interface. Amazon EC2
0000000000000000000000000000000000000000;;		// chooses the IPv6 addresses from the range of the subnet. You cannot specify
0000000000000000000000000000000000000000;;		// this option and the option to assign specific IPv6 addresses in the same
0000000000000000000000000000000000000000;;		// request. You can specify this option if you've specified a minimum number
0000000000000000000000000000000000000000;;		// of instances to launch.
0000000000000000000000000000000000000000;;		Ipv6AddressCount *int64 `locationName:"ipv6AddressCount" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more IPv6 addresses to assign to the network interface. You cannot
0000000000000000000000000000000000000000;;		// specify this option and the option to assign a number of IPv6 addresses in
0000000000000000000000000000000000000000;;		// the same request. You cannot specify this option if you've specified a minimum
0000000000000000000000000000000000000000;;		// number of instances to launch.
0000000000000000000000000000000000000000;;		Ipv6Addresses []*InstanceIpv6Address `locationName:"ipv6AddressesSet" queryName:"Ipv6Addresses" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the network interface.
0000000000000000000000000000000000000000;;		NetworkInterfaceId *string `locationName:"networkInterfaceId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The private IPv4 address of the network interface. Applies only if creating
0000000000000000000000000000000000000000;;		// a network interface when launching an instance. You cannot specify this option
0000000000000000000000000000000000000000;;		// if you're launching more than one instance in a RunInstances request.
0000000000000000000000000000000000000000;;		PrivateIpAddress *string `locationName:"privateIpAddress" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more private IPv4 addresses to assign to the network interface. Only
0000000000000000000000000000000000000000;;		// one private IPv4 address can be designated as primary. You cannot specify
0000000000000000000000000000000000000000;;		// this option if you're launching more than one instance in a RunInstances
0000000000000000000000000000000000000000;;		// request.
0000000000000000000000000000000000000000;;		PrivateIpAddresses []*PrivateIpAddressSpecification `locationName:"privateIpAddressesSet" queryName:"PrivateIpAddresses" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of secondary private IPv4 addresses. You can't specify this option
0000000000000000000000000000000000000000;;		// and specify more than one private IP address using the private IP addresses
0000000000000000000000000000000000000000;;		// option. You cannot specify this option if you're launching more than one
0000000000000000000000000000000000000000;;		// instance in a RunInstances request.
0000000000000000000000000000000000000000;;		SecondaryPrivateIpAddressCount *int64 `locationName:"secondaryPrivateIpAddressCount" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the subnet associated with the network string. Applies only if
0000000000000000000000000000000000000000;;		// creating a network interface when launching an instance.
0000000000000000000000000000000000000000;;		SubnetId *string `locationName:"subnetId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s InstanceNetworkInterfaceSpecification) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s InstanceNetworkInterfaceSpecification) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *InstanceNetworkInterfaceSpecification) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "InstanceNetworkInterfaceSpecification"}
0000000000000000000000000000000000000000;;		if s.PrivateIpAddresses != nil {
0000000000000000000000000000000000000000;;			for i, v := range s.PrivateIpAddresses {
0000000000000000000000000000000000000000;;				if v == nil {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if err := v.Validate(); err != nil {
0000000000000000000000000000000000000000;;					invalidParams.AddNested(fmt.Sprintf("%s[%v]", "PrivateIpAddresses", i), err.(request.ErrInvalidParams))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAssociatePublicIpAddress sets the AssociatePublicIpAddress field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceNetworkInterfaceSpecification) SetAssociatePublicIpAddress(v bool) *InstanceNetworkInterfaceSpecification {
0000000000000000000000000000000000000000;;		s.AssociatePublicIpAddress = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDeleteOnTermination sets the DeleteOnTermination field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceNetworkInterfaceSpecification) SetDeleteOnTermination(v bool) *InstanceNetworkInterfaceSpecification {
0000000000000000000000000000000000000000;;		s.DeleteOnTermination = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDescription sets the Description field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceNetworkInterfaceSpecification) SetDescription(v string) *InstanceNetworkInterfaceSpecification {
0000000000000000000000000000000000000000;;		s.Description = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDeviceIndex sets the DeviceIndex field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceNetworkInterfaceSpecification) SetDeviceIndex(v int64) *InstanceNetworkInterfaceSpecification {
0000000000000000000000000000000000000000;;		s.DeviceIndex = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroups sets the Groups field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceNetworkInterfaceSpecification) SetGroups(v []*string) *InstanceNetworkInterfaceSpecification {
0000000000000000000000000000000000000000;;		s.Groups = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpv6AddressCount sets the Ipv6AddressCount field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceNetworkInterfaceSpecification) SetIpv6AddressCount(v int64) *InstanceNetworkInterfaceSpecification {
0000000000000000000000000000000000000000;;		s.Ipv6AddressCount = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpv6Addresses sets the Ipv6Addresses field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceNetworkInterfaceSpecification) SetIpv6Addresses(v []*InstanceIpv6Address) *InstanceNetworkInterfaceSpecification {
0000000000000000000000000000000000000000;;		s.Ipv6Addresses = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNetworkInterfaceId sets the NetworkInterfaceId field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceNetworkInterfaceSpecification) SetNetworkInterfaceId(v string) *InstanceNetworkInterfaceSpecification {
0000000000000000000000000000000000000000;;		s.NetworkInterfaceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrivateIpAddress sets the PrivateIpAddress field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceNetworkInterfaceSpecification) SetPrivateIpAddress(v string) *InstanceNetworkInterfaceSpecification {
0000000000000000000000000000000000000000;;		s.PrivateIpAddress = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrivateIpAddresses sets the PrivateIpAddresses field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceNetworkInterfaceSpecification) SetPrivateIpAddresses(v []*PrivateIpAddressSpecification) *InstanceNetworkInterfaceSpecification {
0000000000000000000000000000000000000000;;		s.PrivateIpAddresses = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSecondaryPrivateIpAddressCount sets the SecondaryPrivateIpAddressCount field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceNetworkInterfaceSpecification) SetSecondaryPrivateIpAddressCount(v int64) *InstanceNetworkInterfaceSpecification {
0000000000000000000000000000000000000000;;		s.SecondaryPrivateIpAddressCount = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSubnetId sets the SubnetId field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceNetworkInterfaceSpecification) SetSubnetId(v string) *InstanceNetworkInterfaceSpecification {
0000000000000000000000000000000000000000;;		s.SubnetId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a private IPv4 address.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/InstancePrivateIpAddress
0000000000000000000000000000000000000000;;	type InstancePrivateIpAddress struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The association information for an Elastic IP address for the network interface.
0000000000000000000000000000000000000000;;		Association *InstanceNetworkInterfaceAssociation `locationName:"association" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether this IPv4 address is the primary private IP address of
0000000000000000000000000000000000000000;;		// the network interface.
0000000000000000000000000000000000000000;;		Primary *bool `locationName:"primary" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The private IPv4 DNS name.
0000000000000000000000000000000000000000;;		PrivateDnsName *string `locationName:"privateDnsName" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The private IPv4 address of the network interface.
0000000000000000000000000000000000000000;;		PrivateIpAddress *string `locationName:"privateIpAddress" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s InstancePrivateIpAddress) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s InstancePrivateIpAddress) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAssociation sets the Association field's value.
0000000000000000000000000000000000000000;;	func (s *InstancePrivateIpAddress) SetAssociation(v *InstanceNetworkInterfaceAssociation) *InstancePrivateIpAddress {
0000000000000000000000000000000000000000;;		s.Association = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrimary sets the Primary field's value.
0000000000000000000000000000000000000000;;	func (s *InstancePrivateIpAddress) SetPrimary(v bool) *InstancePrivateIpAddress {
0000000000000000000000000000000000000000;;		s.Primary = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrivateDnsName sets the PrivateDnsName field's value.
0000000000000000000000000000000000000000;;	func (s *InstancePrivateIpAddress) SetPrivateDnsName(v string) *InstancePrivateIpAddress {
0000000000000000000000000000000000000000;;		s.PrivateDnsName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrivateIpAddress sets the PrivateIpAddress field's value.
0000000000000000000000000000000000000000;;	func (s *InstancePrivateIpAddress) SetPrivateIpAddress(v string) *InstancePrivateIpAddress {
0000000000000000000000000000000000000000;;		s.PrivateIpAddress = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the current state of an instance.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/InstanceState
0000000000000000000000000000000000000000;;	type InstanceState struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The low byte represents the state. The high byte is an opaque internal value
0000000000000000000000000000000000000000;;		// and should be ignored.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * 0 : pending
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * 16 : running
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * 32 : shutting-down
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * 48 : terminated
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * 64 : stopping
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * 80 : stopped
0000000000000000000000000000000000000000;;		Code *int64 `locationName:"code" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The current state of the instance.
0000000000000000000000000000000000000000;;		Name *string `locationName:"name" type:"string" enum:"InstanceStateName"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s InstanceState) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s InstanceState) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCode sets the Code field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceState) SetCode(v int64) *InstanceState {
0000000000000000000000000000000000000000;;		s.Code = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetName sets the Name field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceState) SetName(v string) *InstanceState {
0000000000000000000000000000000000000000;;		s.Name = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes an instance state change.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/InstanceStateChange
0000000000000000000000000000000000000000;;	type InstanceStateChange struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The current state of the instance.
0000000000000000000000000000000000000000;;		CurrentState *InstanceState `locationName:"currentState" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the instance.
0000000000000000000000000000000000000000;;		InstanceId *string `locationName:"instanceId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The previous state of the instance.
0000000000000000000000000000000000000000;;		PreviousState *InstanceState `locationName:"previousState" type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s InstanceStateChange) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s InstanceStateChange) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCurrentState sets the CurrentState field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceStateChange) SetCurrentState(v *InstanceState) *InstanceStateChange {
0000000000000000000000000000000000000000;;		s.CurrentState = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceId sets the InstanceId field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceStateChange) SetInstanceId(v string) *InstanceStateChange {
0000000000000000000000000000000000000000;;		s.InstanceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPreviousState sets the PreviousState field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceStateChange) SetPreviousState(v *InstanceState) *InstanceStateChange {
0000000000000000000000000000000000000000;;		s.PreviousState = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the status of an instance.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/InstanceStatus
0000000000000000000000000000000000000000;;	type InstanceStatus struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Availability Zone of the instance.
0000000000000000000000000000000000000000;;		AvailabilityZone *string `locationName:"availabilityZone" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Any scheduled events associated with the instance.
0000000000000000000000000000000000000000;;		Events []*InstanceStatusEvent `locationName:"eventsSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the instance.
0000000000000000000000000000000000000000;;		InstanceId *string `locationName:"instanceId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The intended state of the instance. DescribeInstanceStatus requires that
0000000000000000000000000000000000000000;;		// an instance be in the running state.
0000000000000000000000000000000000000000;;		InstanceState *InstanceState `locationName:"instanceState" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Reports impaired functionality that stems from issues internal to the instance,
0000000000000000000000000000000000000000;;		// such as impaired reachability.
0000000000000000000000000000000000000000;;		InstanceStatus *InstanceStatusSummary `locationName:"instanceStatus" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Reports impaired functionality that stems from issues related to the systems
0000000000000000000000000000000000000000;;		// that support an instance, such as hardware failures and network connectivity
0000000000000000000000000000000000000000;;		// problems.
0000000000000000000000000000000000000000;;		SystemStatus *InstanceStatusSummary `locationName:"systemStatus" type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s InstanceStatus) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s InstanceStatus) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAvailabilityZone sets the AvailabilityZone field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceStatus) SetAvailabilityZone(v string) *InstanceStatus {
0000000000000000000000000000000000000000;;		s.AvailabilityZone = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEvents sets the Events field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceStatus) SetEvents(v []*InstanceStatusEvent) *InstanceStatus {
0000000000000000000000000000000000000000;;		s.Events = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceId sets the InstanceId field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceStatus) SetInstanceId(v string) *InstanceStatus {
0000000000000000000000000000000000000000;;		s.InstanceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceState sets the InstanceState field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceStatus) SetInstanceState(v *InstanceState) *InstanceStatus {
0000000000000000000000000000000000000000;;		s.InstanceState = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceStatus sets the InstanceStatus field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceStatus) SetInstanceStatus(v *InstanceStatusSummary) *InstanceStatus {
0000000000000000000000000000000000000000;;		s.InstanceStatus = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSystemStatus sets the SystemStatus field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceStatus) SetSystemStatus(v *InstanceStatusSummary) *InstanceStatus {
0000000000000000000000000000000000000000;;		s.SystemStatus = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the instance status.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/InstanceStatusDetails
0000000000000000000000000000000000000000;;	type InstanceStatusDetails struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The time when a status check failed. For an instance that was launched and
0000000000000000000000000000000000000000;;		// impaired, this is the time when the instance was launched.
0000000000000000000000000000000000000000;;		ImpairedSince *time.Time `locationName:"impairedSince" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The type of instance status.
0000000000000000000000000000000000000000;;		Name *string `locationName:"name" type:"string" enum:"StatusName"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The status.
0000000000000000000000000000000000000000;;		Status *string `locationName:"status" type:"string" enum:"StatusType"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s InstanceStatusDetails) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s InstanceStatusDetails) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetImpairedSince sets the ImpairedSince field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceStatusDetails) SetImpairedSince(v time.Time) *InstanceStatusDetails {
0000000000000000000000000000000000000000;;		s.ImpairedSince = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetName sets the Name field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceStatusDetails) SetName(v string) *InstanceStatusDetails {
0000000000000000000000000000000000000000;;		s.Name = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStatus sets the Status field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceStatusDetails) SetStatus(v string) *InstanceStatusDetails {
0000000000000000000000000000000000000000;;		s.Status = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a scheduled event for an instance.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/InstanceStatusEvent
0000000000000000000000000000000000000000;;	type InstanceStatusEvent struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The event code.
0000000000000000000000000000000000000000;;		Code *string `locationName:"code" type:"string" enum:"EventCode"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A description of the event.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// After a scheduled event is completed, it can still be described for up to
0000000000000000000000000000000000000000;;		// a week. If the event has been completed, this description starts with the
0000000000000000000000000000000000000000;;		// following text: [Completed].
0000000000000000000000000000000000000000;;		Description *string `locationName:"description" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The latest scheduled end time for the event.
0000000000000000000000000000000000000000;;		NotAfter *time.Time `locationName:"notAfter" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The earliest scheduled start time for the event.
0000000000000000000000000000000000000000;;		NotBefore *time.Time `locationName:"notBefore" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s InstanceStatusEvent) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s InstanceStatusEvent) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCode sets the Code field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceStatusEvent) SetCode(v string) *InstanceStatusEvent {
0000000000000000000000000000000000000000;;		s.Code = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDescription sets the Description field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceStatusEvent) SetDescription(v string) *InstanceStatusEvent {
0000000000000000000000000000000000000000;;		s.Description = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNotAfter sets the NotAfter field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceStatusEvent) SetNotAfter(v time.Time) *InstanceStatusEvent {
0000000000000000000000000000000000000000;;		s.NotAfter = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNotBefore sets the NotBefore field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceStatusEvent) SetNotBefore(v time.Time) *InstanceStatusEvent {
0000000000000000000000000000000000000000;;		s.NotBefore = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the status of an instance.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/InstanceStatusSummary
0000000000000000000000000000000000000000;;	type InstanceStatusSummary struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The system instance health or application instance health.
0000000000000000000000000000000000000000;;		Details []*InstanceStatusDetails `locationName:"details" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The status.
0000000000000000000000000000000000000000;;		Status *string `locationName:"status" type:"string" enum:"SummaryStatus"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s InstanceStatusSummary) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s InstanceStatusSummary) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDetails sets the Details field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceStatusSummary) SetDetails(v []*InstanceStatusDetails) *InstanceStatusSummary {
0000000000000000000000000000000000000000;;		s.Details = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStatus sets the Status field's value.
0000000000000000000000000000000000000000;;	func (s *InstanceStatusSummary) SetStatus(v string) *InstanceStatusSummary {
0000000000000000000000000000000000000000;;		s.Status = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes an Internet gateway.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/InternetGateway
0000000000000000000000000000000000000000;;	type InternetGateway struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Any VPCs attached to the Internet gateway.
0000000000000000000000000000000000000000;;		Attachments []*InternetGatewayAttachment `locationName:"attachmentSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the Internet gateway.
0000000000000000000000000000000000000000;;		InternetGatewayId *string `locationName:"internetGatewayId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Any tags assigned to the Internet gateway.
0000000000000000000000000000000000000000;;		Tags []*Tag `locationName:"tagSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s InternetGateway) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s InternetGateway) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAttachments sets the Attachments field's value.
0000000000000000000000000000000000000000;;	func (s *InternetGateway) SetAttachments(v []*InternetGatewayAttachment) *InternetGateway {
0000000000000000000000000000000000000000;;		s.Attachments = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInternetGatewayId sets the InternetGatewayId field's value.
0000000000000000000000000000000000000000;;	func (s *InternetGateway) SetInternetGatewayId(v string) *InternetGateway {
0000000000000000000000000000000000000000;;		s.InternetGatewayId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTags sets the Tags field's value.
0000000000000000000000000000000000000000;;	func (s *InternetGateway) SetTags(v []*Tag) *InternetGateway {
0000000000000000000000000000000000000000;;		s.Tags = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the attachment of a VPC to an Internet gateway or an egress-only
0000000000000000000000000000000000000000;;	// Internet gateway.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/InternetGatewayAttachment
0000000000000000000000000000000000000000;;	type InternetGatewayAttachment struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The current state of the attachment.
0000000000000000000000000000000000000000;;		State *string `locationName:"state" type:"string" enum:"AttachmentStatus"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC.
0000000000000000000000000000000000000000;;		VpcId *string `locationName:"vpcId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s InternetGatewayAttachment) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s InternetGatewayAttachment) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetState sets the State field's value.
0000000000000000000000000000000000000000;;	func (s *InternetGatewayAttachment) SetState(v string) *InternetGatewayAttachment {
0000000000000000000000000000000000000000;;		s.State = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcId sets the VpcId field's value.
0000000000000000000000000000000000000000;;	func (s *InternetGatewayAttachment) SetVpcId(v string) *InternetGatewayAttachment {
0000000000000000000000000000000000000000;;		s.VpcId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a security group rule.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/IpPermission
0000000000000000000000000000000000000000;;	type IpPermission struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6
0000000000000000000000000000000000000000;;		// type number. A value of -1 indicates all ICMP/ICMPv6 types.
0000000000000000000000000000000000000000;;		FromPort *int64 `locationName:"fromPort" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IP protocol name (tcp, udp, icmp) or number (see Protocol Numbers (http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml)).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// [EC2-VPC only] Use -1 to specify all protocols. When authorizing security
0000000000000000000000000000000000000000;;		// group rules, specifying -1 or a protocol number other than tcp, udp, icmp,
0000000000000000000000000000000000000000;;		// or 58 (ICMPv6) allows traffic on all ports, regardless of any port range
0000000000000000000000000000000000000000;;		// you specify. For tcp, udp, and icmp, you must specify a port range. For 58
0000000000000000000000000000000000000000;;		// (ICMPv6), you can optionally specify a port range; if you don't, traffic
0000000000000000000000000000000000000000;;		// for all types and codes is allowed when authorizing rules.
0000000000000000000000000000000000000000;;		IpProtocol *string `locationName:"ipProtocol" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more IPv4 ranges.
0000000000000000000000000000000000000000;;		IpRanges []*IpRange `locationName:"ipRanges" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// [EC2-VPC only] One or more IPv6 ranges.
0000000000000000000000000000000000000000;;		Ipv6Ranges []*Ipv6Range `locationName:"ipv6Ranges" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// (Valid for AuthorizeSecurityGroupEgress, RevokeSecurityGroupEgress and DescribeSecurityGroups
0000000000000000000000000000000000000000;;		// only) One or more prefix list IDs for an AWS service. In an AuthorizeSecurityGroupEgress
0000000000000000000000000000000000000000;;		// request, this is the AWS service that you want to access through a VPC endpoint
0000000000000000000000000000000000000000;;		// from instances associated with the security group.
0000000000000000000000000000000000000000;;		PrefixListIds []*PrefixListId `locationName:"prefixListIds" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code.
0000000000000000000000000000000000000000;;		// A value of -1 indicates all ICMP/ICMPv6 codes for the specified ICMP type.
0000000000000000000000000000000000000000;;		ToPort *int64 `locationName:"toPort" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more security group and AWS account ID pairs.
0000000000000000000000000000000000000000;;		UserIdGroupPairs []*UserIdGroupPair `locationName:"groups" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s IpPermission) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s IpPermission) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFromPort sets the FromPort field's value.
0000000000000000000000000000000000000000;;	func (s *IpPermission) SetFromPort(v int64) *IpPermission {
0000000000000000000000000000000000000000;;		s.FromPort = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpProtocol sets the IpProtocol field's value.
0000000000000000000000000000000000000000;;	func (s *IpPermission) SetIpProtocol(v string) *IpPermission {
0000000000000000000000000000000000000000;;		s.IpProtocol = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpRanges sets the IpRanges field's value.
0000000000000000000000000000000000000000;;	func (s *IpPermission) SetIpRanges(v []*IpRange) *IpPermission {
0000000000000000000000000000000000000000;;		s.IpRanges = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpv6Ranges sets the Ipv6Ranges field's value.
0000000000000000000000000000000000000000;;	func (s *IpPermission) SetIpv6Ranges(v []*Ipv6Range) *IpPermission {
0000000000000000000000000000000000000000;;		s.Ipv6Ranges = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrefixListIds sets the PrefixListIds field's value.
0000000000000000000000000000000000000000;;	func (s *IpPermission) SetPrefixListIds(v []*PrefixListId) *IpPermission {
0000000000000000000000000000000000000000;;		s.PrefixListIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetToPort sets the ToPort field's value.
0000000000000000000000000000000000000000;;	func (s *IpPermission) SetToPort(v int64) *IpPermission {
0000000000000000000000000000000000000000;;		s.ToPort = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUserIdGroupPairs sets the UserIdGroupPairs field's value.
0000000000000000000000000000000000000000;;	func (s *IpPermission) SetUserIdGroupPairs(v []*UserIdGroupPair) *IpPermission {
0000000000000000000000000000000000000000;;		s.UserIdGroupPairs = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes an IPv4 range.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/IpRange
0000000000000000000000000000000000000000;;	type IpRange struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IPv4 CIDR range. You can either specify a CIDR range or a source security
0000000000000000000000000000000000000000;;		// group, not both. To specify a single IPv4 address, use the /32 prefix.
0000000000000000000000000000000000000000;;		CidrIp *string `locationName:"cidrIp" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s IpRange) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s IpRange) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCidrIp sets the CidrIp field's value.
0000000000000000000000000000000000000000;;	func (s *IpRange) SetCidrIp(v string) *IpRange {
0000000000000000000000000000000000000000;;		s.CidrIp = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes an IPv6 CIDR block.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/Ipv6CidrBlock
0000000000000000000000000000000000000000;;	type Ipv6CidrBlock struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IPv6 CIDR block.
0000000000000000000000000000000000000000;;		Ipv6CidrBlock *string `locationName:"ipv6CidrBlock" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s Ipv6CidrBlock) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s Ipv6CidrBlock) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpv6CidrBlock sets the Ipv6CidrBlock field's value.
0000000000000000000000000000000000000000;;	func (s *Ipv6CidrBlock) SetIpv6CidrBlock(v string) *Ipv6CidrBlock {
0000000000000000000000000000000000000000;;		s.Ipv6CidrBlock = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// [EC2-VPC only] Describes an IPv6 range.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/Ipv6Range
0000000000000000000000000000000000000000;;	type Ipv6Range struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IPv6 CIDR range. You can either specify a CIDR range or a source security
0000000000000000000000000000000000000000;;		// group, not both. To specify a single IPv6 address, use the /128 prefix.
0000000000000000000000000000000000000000;;		CidrIpv6 *string `locationName:"cidrIpv6" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s Ipv6Range) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s Ipv6Range) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCidrIpv6 sets the CidrIpv6 field's value.
0000000000000000000000000000000000000000;;	func (s *Ipv6Range) SetCidrIpv6(v string) *Ipv6Range {
0000000000000000000000000000000000000000;;		s.CidrIpv6 = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a key pair.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/KeyPairInfo
0000000000000000000000000000000000000000;;	type KeyPairInfo struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If you used CreateKeyPair to create the key pair, this is the SHA-1 digest
0000000000000000000000000000000000000000;;		// of the DER encoded private key. If you used ImportKeyPair to provide AWS
0000000000000000000000000000000000000000;;		// the public key, this is the MD5 public key fingerprint as specified in section
0000000000000000000000000000000000000000;;		// 4 of RFC4716.
0000000000000000000000000000000000000000;;		KeyFingerprint *string `locationName:"keyFingerprint" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the key pair.
0000000000000000000000000000000000000000;;		KeyName *string `locationName:"keyName" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s KeyPairInfo) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s KeyPairInfo) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetKeyFingerprint sets the KeyFingerprint field's value.
0000000000000000000000000000000000000000;;	func (s *KeyPairInfo) SetKeyFingerprint(v string) *KeyPairInfo {
0000000000000000000000000000000000000000;;		s.KeyFingerprint = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetKeyName sets the KeyName field's value.
0000000000000000000000000000000000000000;;	func (s *KeyPairInfo) SetKeyName(v string) *KeyPairInfo {
0000000000000000000000000000000000000000;;		s.KeyName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a launch permission.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/LaunchPermission
0000000000000000000000000000000000000000;;	type LaunchPermission struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the group.
0000000000000000000000000000000000000000;;		Group *string `locationName:"group" type:"string" enum:"PermissionGroup"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The AWS account ID.
0000000000000000000000000000000000000000;;		UserId *string `locationName:"userId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s LaunchPermission) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s LaunchPermission) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroup sets the Group field's value.
0000000000000000000000000000000000000000;;	func (s *LaunchPermission) SetGroup(v string) *LaunchPermission {
0000000000000000000000000000000000000000;;		s.Group = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUserId sets the UserId field's value.
0000000000000000000000000000000000000000;;	func (s *LaunchPermission) SetUserId(v string) *LaunchPermission {
0000000000000000000000000000000000000000;;		s.UserId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a launch permission modification.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/LaunchPermissionModifications
0000000000000000000000000000000000000000;;	type LaunchPermissionModifications struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The AWS account ID to add to the list of launch permissions for the AMI.
0000000000000000000000000000000000000000;;		Add []*LaunchPermission `locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The AWS account ID to remove from the list of launch permissions for the
0000000000000000000000000000000000000000;;		// AMI.
0000000000000000000000000000000000000000;;		Remove []*LaunchPermission `locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s LaunchPermissionModifications) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s LaunchPermissionModifications) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAdd sets the Add field's value.
0000000000000000000000000000000000000000;;	func (s *LaunchPermissionModifications) SetAdd(v []*LaunchPermission) *LaunchPermissionModifications {
0000000000000000000000000000000000000000;;		s.Add = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRemove sets the Remove field's value.
0000000000000000000000000000000000000000;;	func (s *LaunchPermissionModifications) SetRemove(v []*LaunchPermission) *LaunchPermissionModifications {
0000000000000000000000000000000000000000;;		s.Remove = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the launch specification for an instance.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/LaunchSpecification
0000000000000000000000000000000000000000;;	type LaunchSpecification struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Deprecated.
0000000000000000000000000000000000000000;;		AddressingType *string `locationName:"addressingType" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more block device mapping entries.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Although you can specify encrypted EBS volumes in this block device mapping
0000000000000000000000000000000000000000;;		// for your Spot Instances, these volumes are not encrypted.
0000000000000000000000000000000000000000;;		BlockDeviceMappings []*BlockDeviceMapping `locationName:"blockDeviceMapping" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether the instance is optimized for EBS I/O. This optimization
0000000000000000000000000000000000000000;;		// provides dedicated throughput to Amazon EBS and an optimized configuration
0000000000000000000000000000000000000000;;		// stack to provide optimal EBS I/O performance. This optimization isn't available
0000000000000000000000000000000000000000;;		// with all instance types. Additional usage charges apply when using an EBS
0000000000000000000000000000000000000000;;		// Optimized instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: false
0000000000000000000000000000000000000000;;		EbsOptimized *bool `locationName:"ebsOptimized" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IAM instance profile.
0000000000000000000000000000000000000000;;		IamInstanceProfile *IamInstanceProfileSpecification `locationName:"iamInstanceProfile" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the AMI.
0000000000000000000000000000000000000000;;		ImageId *string `locationName:"imageId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The instance type.
0000000000000000000000000000000000000000;;		InstanceType *string `locationName:"instanceType" type:"string" enum:"InstanceType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the kernel.
0000000000000000000000000000000000000000;;		KernelId *string `locationName:"kernelId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the key pair.
0000000000000000000000000000000000000000;;		KeyName *string `locationName:"keyName" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Describes the monitoring of an instance.
0000000000000000000000000000000000000000;;		Monitoring *RunInstancesMonitoringEnabled `locationName:"monitoring" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more network interfaces. If you specify a network interface, you must
0000000000000000000000000000000000000000;;		// specify subnet IDs and security group IDs using the network interface.
0000000000000000000000000000000000000000;;		NetworkInterfaces []*InstanceNetworkInterfaceSpecification `locationName:"networkInterfaceSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The placement information for the instance.
0000000000000000000000000000000000000000;;		Placement *SpotPlacement `locationName:"placement" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the RAM disk.
0000000000000000000000000000000000000000;;		RamdiskId *string `locationName:"ramdiskId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more security groups. When requesting instances in a VPC, you must
0000000000000000000000000000000000000000;;		// specify the IDs of the security groups. When requesting instances in EC2-Classic,
0000000000000000000000000000000000000000;;		// you can specify the names or the IDs of the security groups.
0000000000000000000000000000000000000000;;		SecurityGroups []*GroupIdentifier `locationName:"groupSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the subnet in which to launch the instance.
0000000000000000000000000000000000000000;;		SubnetId *string `locationName:"subnetId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The user data to make available to the instances. If you are using an AWS
0000000000000000000000000000000000000000;;		// SDK or command line tool, Base64-encoding is performed for you, and you can
0000000000000000000000000000000000000000;;		// load the text from a file. Otherwise, you must provide Base64-encoded text.
0000000000000000000000000000000000000000;;		UserData *string `locationName:"userData" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s LaunchSpecification) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s LaunchSpecification) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAddressingType sets the AddressingType field's value.
0000000000000000000000000000000000000000;;	func (s *LaunchSpecification) SetAddressingType(v string) *LaunchSpecification {
0000000000000000000000000000000000000000;;		s.AddressingType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetBlockDeviceMappings sets the BlockDeviceMappings field's value.
0000000000000000000000000000000000000000;;	func (s *LaunchSpecification) SetBlockDeviceMappings(v []*BlockDeviceMapping) *LaunchSpecification {
0000000000000000000000000000000000000000;;		s.BlockDeviceMappings = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEbsOptimized sets the EbsOptimized field's value.
0000000000000000000000000000000000000000;;	func (s *LaunchSpecification) SetEbsOptimized(v bool) *LaunchSpecification {
0000000000000000000000000000000000000000;;		s.EbsOptimized = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIamInstanceProfile sets the IamInstanceProfile field's value.
0000000000000000000000000000000000000000;;	func (s *LaunchSpecification) SetIamInstanceProfile(v *IamInstanceProfileSpecification) *LaunchSpecification {
0000000000000000000000000000000000000000;;		s.IamInstanceProfile = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetImageId sets the ImageId field's value.
0000000000000000000000000000000000000000;;	func (s *LaunchSpecification) SetImageId(v string) *LaunchSpecification {
0000000000000000000000000000000000000000;;		s.ImageId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceType sets the InstanceType field's value.
0000000000000000000000000000000000000000;;	func (s *LaunchSpecification) SetInstanceType(v string) *LaunchSpecification {
0000000000000000000000000000000000000000;;		s.InstanceType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetKernelId sets the KernelId field's value.
0000000000000000000000000000000000000000;;	func (s *LaunchSpecification) SetKernelId(v string) *LaunchSpecification {
0000000000000000000000000000000000000000;;		s.KernelId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetKeyName sets the KeyName field's value.
0000000000000000000000000000000000000000;;	func (s *LaunchSpecification) SetKeyName(v string) *LaunchSpecification {
0000000000000000000000000000000000000000;;		s.KeyName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMonitoring sets the Monitoring field's value.
0000000000000000000000000000000000000000;;	func (s *LaunchSpecification) SetMonitoring(v *RunInstancesMonitoringEnabled) *LaunchSpecification {
0000000000000000000000000000000000000000;;		s.Monitoring = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNetworkInterfaces sets the NetworkInterfaces field's value.
0000000000000000000000000000000000000000;;	func (s *LaunchSpecification) SetNetworkInterfaces(v []*InstanceNetworkInterfaceSpecification) *LaunchSpecification {
0000000000000000000000000000000000000000;;		s.NetworkInterfaces = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPlacement sets the Placement field's value.
0000000000000000000000000000000000000000;;	func (s *LaunchSpecification) SetPlacement(v *SpotPlacement) *LaunchSpecification {
0000000000000000000000000000000000000000;;		s.Placement = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRamdiskId sets the RamdiskId field's value.
0000000000000000000000000000000000000000;;	func (s *LaunchSpecification) SetRamdiskId(v string) *LaunchSpecification {
0000000000000000000000000000000000000000;;		s.RamdiskId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSecurityGroups sets the SecurityGroups field's value.
0000000000000000000000000000000000000000;;	func (s *LaunchSpecification) SetSecurityGroups(v []*GroupIdentifier) *LaunchSpecification {
0000000000000000000000000000000000000000;;		s.SecurityGroups = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSubnetId sets the SubnetId field's value.
0000000000000000000000000000000000000000;;	func (s *LaunchSpecification) SetSubnetId(v string) *LaunchSpecification {
0000000000000000000000000000000000000000;;		s.SubnetId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUserData sets the UserData field's value.
0000000000000000000000000000000000000000;;	func (s *LaunchSpecification) SetUserData(v string) *LaunchSpecification {
0000000000000000000000000000000000000000;;		s.UserData = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for ModifyHosts.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyHostsRequest
0000000000000000000000000000000000000000;;	type ModifyHostsInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Specify whether to enable or disable auto-placement.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// AutoPlacement is a required field
0000000000000000000000000000000000000000;;		AutoPlacement *string `locationName:"autoPlacement" type:"string" required:"true" enum:"AutoPlacement"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The host IDs of the Dedicated Hosts you want to modify.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// HostIds is a required field
0000000000000000000000000000000000000000;;		HostIds []*string `locationName:"hostId" locationNameList:"item" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyHostsInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyHostsInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *ModifyHostsInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "ModifyHostsInput"}
0000000000000000000000000000000000000000;;		if s.AutoPlacement == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("AutoPlacement"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.HostIds == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("HostIds"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAutoPlacement sets the AutoPlacement field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyHostsInput) SetAutoPlacement(v string) *ModifyHostsInput {
0000000000000000000000000000000000000000;;		s.AutoPlacement = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHostIds sets the HostIds field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyHostsInput) SetHostIds(v []*string) *ModifyHostsInput {
0000000000000000000000000000000000000000;;		s.HostIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of ModifyHosts.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyHostsResult
0000000000000000000000000000000000000000;;	type ModifyHostsOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IDs of the Dedicated Hosts that were successfully modified.
0000000000000000000000000000000000000000;;		Successful []*string `locationName:"successful" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IDs of the Dedicated Hosts that could not be modified. Check whether
0000000000000000000000000000000000000000;;		// the setting you requested can be used.
0000000000000000000000000000000000000000;;		Unsuccessful []*UnsuccessfulItem `locationName:"unsuccessful" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyHostsOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyHostsOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSuccessful sets the Successful field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyHostsOutput) SetSuccessful(v []*string) *ModifyHostsOutput {
0000000000000000000000000000000000000000;;		s.Successful = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUnsuccessful sets the Unsuccessful field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyHostsOutput) SetUnsuccessful(v []*UnsuccessfulItem) *ModifyHostsOutput {
0000000000000000000000000000000000000000;;		s.Unsuccessful = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters of ModifyIdFormat.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyIdFormatRequest
0000000000000000000000000000000000000000;;	type ModifyIdFormatInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The type of resource: instance | reservation | snapshot | volume
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Resource is a required field
0000000000000000000000000000000000000000;;		Resource *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicate whether the resource should use longer IDs (17-character IDs).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// UseLongIds is a required field
0000000000000000000000000000000000000000;;		UseLongIds *bool `type:"boolean" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyIdFormatInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyIdFormatInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *ModifyIdFormatInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "ModifyIdFormatInput"}
0000000000000000000000000000000000000000;;		if s.Resource == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Resource"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.UseLongIds == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("UseLongIds"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetResource sets the Resource field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyIdFormatInput) SetResource(v string) *ModifyIdFormatInput {
0000000000000000000000000000000000000000;;		s.Resource = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUseLongIds sets the UseLongIds field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyIdFormatInput) SetUseLongIds(v bool) *ModifyIdFormatInput {
0000000000000000000000000000000000000000;;		s.UseLongIds = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyIdFormatOutput
0000000000000000000000000000000000000000;;	type ModifyIdFormatOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyIdFormatOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyIdFormatOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters of ModifyIdentityIdFormat.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyIdentityIdFormatRequest
0000000000000000000000000000000000000000;;	type ModifyIdentityIdFormatInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ARN of the principal, which can be an IAM user, IAM role, or the root
0000000000000000000000000000000000000000;;		// user. Specify all to modify the ID format for all IAM users, IAM roles, and
0000000000000000000000000000000000000000;;		// the root user of the account.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// PrincipalArn is a required field
0000000000000000000000000000000000000000;;		PrincipalArn *string `locationName:"principalArn" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The type of resource: instance | reservation | snapshot | volume
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Resource is a required field
0000000000000000000000000000000000000000;;		Resource *string `locationName:"resource" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether the resource should use longer IDs (17-character IDs)
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// UseLongIds is a required field
0000000000000000000000000000000000000000;;		UseLongIds *bool `locationName:"useLongIds" type:"boolean" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyIdentityIdFormatInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyIdentityIdFormatInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *ModifyIdentityIdFormatInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "ModifyIdentityIdFormatInput"}
0000000000000000000000000000000000000000;;		if s.PrincipalArn == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("PrincipalArn"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Resource == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Resource"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.UseLongIds == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("UseLongIds"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrincipalArn sets the PrincipalArn field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyIdentityIdFormatInput) SetPrincipalArn(v string) *ModifyIdentityIdFormatInput {
0000000000000000000000000000000000000000;;		s.PrincipalArn = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetResource sets the Resource field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyIdentityIdFormatInput) SetResource(v string) *ModifyIdentityIdFormatInput {
0000000000000000000000000000000000000000;;		s.Resource = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUseLongIds sets the UseLongIds field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyIdentityIdFormatInput) SetUseLongIds(v bool) *ModifyIdentityIdFormatInput {
0000000000000000000000000000000000000000;;		s.UseLongIds = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyIdentityIdFormatOutput
0000000000000000000000000000000000000000;;	type ModifyIdentityIdFormatOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyIdentityIdFormatOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyIdentityIdFormatOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for ModifyImageAttribute.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyImageAttributeRequest
0000000000000000000000000000000000000000;;	type ModifyImageAttributeInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the attribute to modify.
0000000000000000000000000000000000000000;;		Attribute *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A description for the AMI.
0000000000000000000000000000000000000000;;		Description *AttributeValue `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the AMI.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ImageId is a required field
0000000000000000000000000000000000000000;;		ImageId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A launch permission modification.
0000000000000000000000000000000000000000;;		LaunchPermission *LaunchPermissionModifications `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The operation type.
0000000000000000000000000000000000000000;;		OperationType *string `type:"string" enum:"OperationType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more product codes. After you add a product code to an AMI, it can't
0000000000000000000000000000000000000000;;		// be removed. This is only valid when modifying the productCodes attribute.
0000000000000000000000000000000000000000;;		ProductCodes []*string `locationName:"ProductCode" locationNameList:"ProductCode" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more user groups. This is only valid when modifying the launchPermission
0000000000000000000000000000000000000000;;		// attribute.
0000000000000000000000000000000000000000;;		UserGroups []*string `locationName:"UserGroup" locationNameList:"UserGroup" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more AWS account IDs. This is only valid when modifying the launchPermission
0000000000000000000000000000000000000000;;		// attribute.
0000000000000000000000000000000000000000;;		UserIds []*string `locationName:"UserId" locationNameList:"UserId" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The value of the attribute being modified. This is only valid when modifying
0000000000000000000000000000000000000000;;		// the description attribute.
0000000000000000000000000000000000000000;;		Value *string `type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyImageAttributeInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyImageAttributeInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *ModifyImageAttributeInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "ModifyImageAttributeInput"}
0000000000000000000000000000000000000000;;		if s.ImageId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("ImageId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAttribute sets the Attribute field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyImageAttributeInput) SetAttribute(v string) *ModifyImageAttributeInput {
0000000000000000000000000000000000000000;;		s.Attribute = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDescription sets the Description field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyImageAttributeInput) SetDescription(v *AttributeValue) *ModifyImageAttributeInput {
0000000000000000000000000000000000000000;;		s.Description = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyImageAttributeInput) SetDryRun(v bool) *ModifyImageAttributeInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetImageId sets the ImageId field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyImageAttributeInput) SetImageId(v string) *ModifyImageAttributeInput {
0000000000000000000000000000000000000000;;		s.ImageId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetLaunchPermission sets the LaunchPermission field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyImageAttributeInput) SetLaunchPermission(v *LaunchPermissionModifications) *ModifyImageAttributeInput {
0000000000000000000000000000000000000000;;		s.LaunchPermission = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetOperationType sets the OperationType field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyImageAttributeInput) SetOperationType(v string) *ModifyImageAttributeInput {
0000000000000000000000000000000000000000;;		s.OperationType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetProductCodes sets the ProductCodes field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyImageAttributeInput) SetProductCodes(v []*string) *ModifyImageAttributeInput {
0000000000000000000000000000000000000000;;		s.ProductCodes = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUserGroups sets the UserGroups field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyImageAttributeInput) SetUserGroups(v []*string) *ModifyImageAttributeInput {
0000000000000000000000000000000000000000;;		s.UserGroups = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUserIds sets the UserIds field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyImageAttributeInput) SetUserIds(v []*string) *ModifyImageAttributeInput {
0000000000000000000000000000000000000000;;		s.UserIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetValue sets the Value field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyImageAttributeInput) SetValue(v string) *ModifyImageAttributeInput {
0000000000000000000000000000000000000000;;		s.Value = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyImageAttributeOutput
0000000000000000000000000000000000000000;;	type ModifyImageAttributeOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyImageAttributeOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyImageAttributeOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for ModifyInstanceAttribute.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyInstanceAttributeRequest
0000000000000000000000000000000000000000;;	type ModifyInstanceAttributeInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the attribute.
0000000000000000000000000000000000000000;;		Attribute *string `locationName:"attribute" type:"string" enum:"InstanceAttributeName"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Modifies the DeleteOnTermination attribute for volumes that are currently
0000000000000000000000000000000000000000;;		// attached. The volume must be owned by the caller. If no value is specified
0000000000000000000000000000000000000000;;		// for DeleteOnTermination, the default is true and the volume is deleted when
0000000000000000000000000000000000000000;;		// the instance is terminated.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// To add instance store volumes to an Amazon EBS-backed instance, you must
0000000000000000000000000000000000000000;;		// add them when you launch the instance. For more information, see Updating
0000000000000000000000000000000000000000;;		// the Block Device Mapping when Launching an Instance (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html#Using_OverridingAMIBDM)
0000000000000000000000000000000000000000;;		// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;		BlockDeviceMappings []*InstanceBlockDeviceMappingSpecification `locationName:"blockDeviceMapping" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If the value is true, you can't terminate the instance using the Amazon EC2
0000000000000000000000000000000000000000;;		// console, CLI, or API; otherwise, you can. You cannot use this paramater for
0000000000000000000000000000000000000000;;		// Spot Instances.
0000000000000000000000000000000000000000;;		DisableApiTermination *AttributeBooleanValue `locationName:"disableApiTermination" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Specifies whether the instance is optimized for EBS I/O. This optimization
0000000000000000000000000000000000000000;;		// provides dedicated throughput to Amazon EBS and an optimized configuration
0000000000000000000000000000000000000000;;		// stack to provide optimal EBS I/O performance. This optimization isn't available
0000000000000000000000000000000000000000;;		// with all instance types. Additional usage charges apply when using an EBS
0000000000000000000000000000000000000000;;		// Optimized instance.
0000000000000000000000000000000000000000;;		EbsOptimized *AttributeBooleanValue `locationName:"ebsOptimized" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Set to true to enable enhanced networking with ENA for the instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// This option is supported only for HVM instances. Specifying this option with
0000000000000000000000000000000000000000;;		// a PV instance can make it unreachable.
0000000000000000000000000000000000000000;;		EnaSupport *AttributeBooleanValue `locationName:"enaSupport" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// [EC2-VPC] Changes the security groups of the instance. You must specify at
0000000000000000000000000000000000000000;;		// least one security group, even if it's just the default security group for
0000000000000000000000000000000000000000;;		// the VPC. You must specify the security group ID, not the security group name.
0000000000000000000000000000000000000000;;		Groups []*string `locationName:"GroupId" locationNameList:"groupId" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// InstanceId is a required field
0000000000000000000000000000000000000000;;		InstanceId *string `locationName:"instanceId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Specifies whether an instance stops or terminates when you initiate shutdown
0000000000000000000000000000000000000000;;		// from the instance (using the operating system command for system shutdown).
0000000000000000000000000000000000000000;;		InstanceInitiatedShutdownBehavior *AttributeValue `locationName:"instanceInitiatedShutdownBehavior" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Changes the instance type to the specified value. For more information, see
0000000000000000000000000000000000000000;;		// Instance Types (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html).
0000000000000000000000000000000000000000;;		// If the instance type is not valid, the error returned is InvalidInstanceAttributeValue.
0000000000000000000000000000000000000000;;		InstanceType *AttributeValue `locationName:"instanceType" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Changes the instance's kernel to the specified value. We recommend that you
0000000000000000000000000000000000000000;;		// use PV-GRUB instead of kernels and RAM disks. For more information, see PV-GRUB
0000000000000000000000000000000000000000;;		// (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedKernels.html).
0000000000000000000000000000000000000000;;		Kernel *AttributeValue `locationName:"kernel" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Changes the instance's RAM disk to the specified value. We recommend that
0000000000000000000000000000000000000000;;		// you use PV-GRUB instead of kernels and RAM disks. For more information, see
0000000000000000000000000000000000000000;;		// PV-GRUB (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedKernels.html).
0000000000000000000000000000000000000000;;		Ramdisk *AttributeValue `locationName:"ramdisk" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Specifies whether source/destination checking is enabled. A value of true
0000000000000000000000000000000000000000;;		// means that checking is enabled, and false means checking is disabled. This
0000000000000000000000000000000000000000;;		// value must be false for a NAT instance to perform NAT.
0000000000000000000000000000000000000000;;		SourceDestCheck *AttributeBooleanValue `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Set to simple to enable enhanced networking with the Intel 82599 Virtual
0000000000000000000000000000000000000000;;		// Function interface for the instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// There is no way to disable enhanced networking with the Intel 82599 Virtual
0000000000000000000000000000000000000000;;		// Function interface at this time.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// This option is supported only for HVM instances. Specifying this option with
0000000000000000000000000000000000000000;;		// a PV instance can make it unreachable.
0000000000000000000000000000000000000000;;		SriovNetSupport *AttributeValue `locationName:"sriovNetSupport" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Changes the instance's user data to the specified value. If you are using
0000000000000000000000000000000000000000;;		// an AWS SDK or command line tool, Base64-encoding is performed for you, and
0000000000000000000000000000000000000000;;		// you can load the text from a file. Otherwise, you must provide Base64-encoded
0000000000000000000000000000000000000000;;		// text.
0000000000000000000000000000000000000000;;		UserData *BlobAttributeValue `locationName:"userData" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A new value for the attribute. Use only with the kernel, ramdisk, userData,
0000000000000000000000000000000000000000;;		// disableApiTermination, or instanceInitiatedShutdownBehavior attribute.
0000000000000000000000000000000000000000;;		Value *string `locationName:"value" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyInstanceAttributeInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyInstanceAttributeInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *ModifyInstanceAttributeInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "ModifyInstanceAttributeInput"}
0000000000000000000000000000000000000000;;		if s.InstanceId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("InstanceId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAttribute sets the Attribute field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyInstanceAttributeInput) SetAttribute(v string) *ModifyInstanceAttributeInput {
0000000000000000000000000000000000000000;;		s.Attribute = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetBlockDeviceMappings sets the BlockDeviceMappings field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyInstanceAttributeInput) SetBlockDeviceMappings(v []*InstanceBlockDeviceMappingSpecification) *ModifyInstanceAttributeInput {
0000000000000000000000000000000000000000;;		s.BlockDeviceMappings = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDisableApiTermination sets the DisableApiTermination field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyInstanceAttributeInput) SetDisableApiTermination(v *AttributeBooleanValue) *ModifyInstanceAttributeInput {
0000000000000000000000000000000000000000;;		s.DisableApiTermination = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyInstanceAttributeInput) SetDryRun(v bool) *ModifyInstanceAttributeInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEbsOptimized sets the EbsOptimized field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyInstanceAttributeInput) SetEbsOptimized(v *AttributeBooleanValue) *ModifyInstanceAttributeInput {
0000000000000000000000000000000000000000;;		s.EbsOptimized = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEnaSupport sets the EnaSupport field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyInstanceAttributeInput) SetEnaSupport(v *AttributeBooleanValue) *ModifyInstanceAttributeInput {
0000000000000000000000000000000000000000;;		s.EnaSupport = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroups sets the Groups field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyInstanceAttributeInput) SetGroups(v []*string) *ModifyInstanceAttributeInput {
0000000000000000000000000000000000000000;;		s.Groups = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceId sets the InstanceId field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyInstanceAttributeInput) SetInstanceId(v string) *ModifyInstanceAttributeInput {
0000000000000000000000000000000000000000;;		s.InstanceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceInitiatedShutdownBehavior sets the InstanceInitiatedShutdownBehavior field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyInstanceAttributeInput) SetInstanceInitiatedShutdownBehavior(v *AttributeValue) *ModifyInstanceAttributeInput {
0000000000000000000000000000000000000000;;		s.InstanceInitiatedShutdownBehavior = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceType sets the InstanceType field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyInstanceAttributeInput) SetInstanceType(v *AttributeValue) *ModifyInstanceAttributeInput {
0000000000000000000000000000000000000000;;		s.InstanceType = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetKernel sets the Kernel field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyInstanceAttributeInput) SetKernel(v *AttributeValue) *ModifyInstanceAttributeInput {
0000000000000000000000000000000000000000;;		s.Kernel = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRamdisk sets the Ramdisk field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyInstanceAttributeInput) SetRamdisk(v *AttributeValue) *ModifyInstanceAttributeInput {
0000000000000000000000000000000000000000;;		s.Ramdisk = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSourceDestCheck sets the SourceDestCheck field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyInstanceAttributeInput) SetSourceDestCheck(v *AttributeBooleanValue) *ModifyInstanceAttributeInput {
0000000000000000000000000000000000000000;;		s.SourceDestCheck = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSriovNetSupport sets the SriovNetSupport field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyInstanceAttributeInput) SetSriovNetSupport(v *AttributeValue) *ModifyInstanceAttributeInput {
0000000000000000000000000000000000000000;;		s.SriovNetSupport = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUserData sets the UserData field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyInstanceAttributeInput) SetUserData(v *BlobAttributeValue) *ModifyInstanceAttributeInput {
0000000000000000000000000000000000000000;;		s.UserData = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetValue sets the Value field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyInstanceAttributeInput) SetValue(v string) *ModifyInstanceAttributeInput {
0000000000000000000000000000000000000000;;		s.Value = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyInstanceAttributeOutput
0000000000000000000000000000000000000000;;	type ModifyInstanceAttributeOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyInstanceAttributeOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyInstanceAttributeOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for ModifyInstancePlacement.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyInstancePlacementRequest
0000000000000000000000000000000000000000;;	type ModifyInstancePlacementInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The new affinity setting for the instance.
0000000000000000000000000000000000000000;;		Affinity *string `locationName:"affinity" type:"string" enum:"Affinity"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the Dedicated Host that the instance will have affinity with.
0000000000000000000000000000000000000000;;		HostId *string `locationName:"hostId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the instance that you are modifying.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// InstanceId is a required field
0000000000000000000000000000000000000000;;		InstanceId *string `locationName:"instanceId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The tenancy of the instance that you are modifying.
0000000000000000000000000000000000000000;;		Tenancy *string `locationName:"tenancy" type:"string" enum:"HostTenancy"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyInstancePlacementInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyInstancePlacementInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *ModifyInstancePlacementInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "ModifyInstancePlacementInput"}
0000000000000000000000000000000000000000;;		if s.InstanceId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("InstanceId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAffinity sets the Affinity field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyInstancePlacementInput) SetAffinity(v string) *ModifyInstancePlacementInput {
0000000000000000000000000000000000000000;;		s.Affinity = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHostId sets the HostId field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyInstancePlacementInput) SetHostId(v string) *ModifyInstancePlacementInput {
0000000000000000000000000000000000000000;;		s.HostId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceId sets the InstanceId field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyInstancePlacementInput) SetInstanceId(v string) *ModifyInstancePlacementInput {
0000000000000000000000000000000000000000;;		s.InstanceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTenancy sets the Tenancy field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyInstancePlacementInput) SetTenancy(v string) *ModifyInstancePlacementInput {
0000000000000000000000000000000000000000;;		s.Tenancy = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of ModifyInstancePlacement.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyInstancePlacementResult
0000000000000000000000000000000000000000;;	type ModifyInstancePlacementOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Is true if the request succeeds, and an error otherwise.
0000000000000000000000000000000000000000;;		Return *bool `locationName:"return" type:"boolean"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyInstancePlacementOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyInstancePlacementOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReturn sets the Return field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyInstancePlacementOutput) SetReturn(v bool) *ModifyInstancePlacementOutput {
0000000000000000000000000000000000000000;;		s.Return = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for ModifyNetworkInterfaceAttribute.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyNetworkInterfaceAttributeRequest
0000000000000000000000000000000000000000;;	type ModifyNetworkInterfaceAttributeInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the interface attachment. If modifying the 'delete on termination'
0000000000000000000000000000000000000000;;		// attribute, you must specify the ID of the interface attachment.
0000000000000000000000000000000000000000;;		Attachment *NetworkInterfaceAttachmentChanges `locationName:"attachment" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A description for the network interface.
0000000000000000000000000000000000000000;;		Description *AttributeValue `locationName:"description" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Changes the security groups for the network interface. The new set of groups
0000000000000000000000000000000000000000;;		// you specify replaces the current set. You must specify at least one group,
0000000000000000000000000000000000000000;;		// even if it's just the default security group in the VPC. You must specify
0000000000000000000000000000000000000000;;		// the ID of the security group, not the name.
0000000000000000000000000000000000000000;;		Groups []*string `locationName:"SecurityGroupId" locationNameList:"SecurityGroupId" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the network interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// NetworkInterfaceId is a required field
0000000000000000000000000000000000000000;;		NetworkInterfaceId *string `locationName:"networkInterfaceId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether source/destination checking is enabled. A value of true
0000000000000000000000000000000000000000;;		// means checking is enabled, and false means checking is disabled. This value
0000000000000000000000000000000000000000;;		// must be false for a NAT instance to perform NAT. For more information, see
0000000000000000000000000000000000000000;;		// NAT Instances (http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_NAT_Instance.html)
0000000000000000000000000000000000000000;;		// in the Amazon Virtual Private Cloud User Guide.
0000000000000000000000000000000000000000;;		SourceDestCheck *AttributeBooleanValue `locationName:"sourceDestCheck" type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyNetworkInterfaceAttributeInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyNetworkInterfaceAttributeInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *ModifyNetworkInterfaceAttributeInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "ModifyNetworkInterfaceAttributeInput"}
0000000000000000000000000000000000000000;;		if s.NetworkInterfaceId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("NetworkInterfaceId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAttachment sets the Attachment field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyNetworkInterfaceAttributeInput) SetAttachment(v *NetworkInterfaceAttachmentChanges) *ModifyNetworkInterfaceAttributeInput {
0000000000000000000000000000000000000000;;		s.Attachment = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDescription sets the Description field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyNetworkInterfaceAttributeInput) SetDescription(v *AttributeValue) *ModifyNetworkInterfaceAttributeInput {
0000000000000000000000000000000000000000;;		s.Description = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyNetworkInterfaceAttributeInput) SetDryRun(v bool) *ModifyNetworkInterfaceAttributeInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroups sets the Groups field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyNetworkInterfaceAttributeInput) SetGroups(v []*string) *ModifyNetworkInterfaceAttributeInput {
0000000000000000000000000000000000000000;;		s.Groups = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNetworkInterfaceId sets the NetworkInterfaceId field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyNetworkInterfaceAttributeInput) SetNetworkInterfaceId(v string) *ModifyNetworkInterfaceAttributeInput {
0000000000000000000000000000000000000000;;		s.NetworkInterfaceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSourceDestCheck sets the SourceDestCheck field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyNetworkInterfaceAttributeInput) SetSourceDestCheck(v *AttributeBooleanValue) *ModifyNetworkInterfaceAttributeInput {
0000000000000000000000000000000000000000;;		s.SourceDestCheck = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyNetworkInterfaceAttributeOutput
0000000000000000000000000000000000000000;;	type ModifyNetworkInterfaceAttributeOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyNetworkInterfaceAttributeOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyNetworkInterfaceAttributeOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for ModifyReservedInstances.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyReservedInstancesRequest
0000000000000000000000000000000000000000;;	type ModifyReservedInstancesInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A unique, case-sensitive token you provide to ensure idempotency of your
0000000000000000000000000000000000000000;;		// modification request. For more information, see Ensuring Idempotency (http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
0000000000000000000000000000000000000000;;		ClientToken *string `locationName:"clientToken" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IDs of the Reserved Instances to modify.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ReservedInstancesIds is a required field
0000000000000000000000000000000000000000;;		ReservedInstancesIds []*string `locationName:"ReservedInstancesId" locationNameList:"ReservedInstancesId" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The configuration settings for the Reserved Instances to modify.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// TargetConfigurations is a required field
0000000000000000000000000000000000000000;;		TargetConfigurations []*ReservedInstancesConfiguration `locationName:"ReservedInstancesConfigurationSetItemType" locationNameList:"item" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyReservedInstancesInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyReservedInstancesInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *ModifyReservedInstancesInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "ModifyReservedInstancesInput"}
0000000000000000000000000000000000000000;;		if s.ReservedInstancesIds == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("ReservedInstancesIds"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.TargetConfigurations == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("TargetConfigurations"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetClientToken sets the ClientToken field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyReservedInstancesInput) SetClientToken(v string) *ModifyReservedInstancesInput {
0000000000000000000000000000000000000000;;		s.ClientToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReservedInstancesIds sets the ReservedInstancesIds field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyReservedInstancesInput) SetReservedInstancesIds(v []*string) *ModifyReservedInstancesInput {
0000000000000000000000000000000000000000;;		s.ReservedInstancesIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTargetConfigurations sets the TargetConfigurations field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyReservedInstancesInput) SetTargetConfigurations(v []*ReservedInstancesConfiguration) *ModifyReservedInstancesInput {
0000000000000000000000000000000000000000;;		s.TargetConfigurations = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of ModifyReservedInstances.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyReservedInstancesResult
0000000000000000000000000000000000000000;;	type ModifyReservedInstancesOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID for the modification.
0000000000000000000000000000000000000000;;		ReservedInstancesModificationId *string `locationName:"reservedInstancesModificationId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyReservedInstancesOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyReservedInstancesOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReservedInstancesModificationId sets the ReservedInstancesModificationId field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyReservedInstancesOutput) SetReservedInstancesModificationId(v string) *ModifyReservedInstancesOutput {
0000000000000000000000000000000000000000;;		s.ReservedInstancesModificationId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for ModifySnapshotAttribute.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifySnapshotAttributeRequest
0000000000000000000000000000000000000000;;	type ModifySnapshotAttributeInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The snapshot attribute to modify.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Only volume creation permissions may be modified at the customer level.
0000000000000000000000000000000000000000;;		Attribute *string `type:"string" enum:"SnapshotAttributeName"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A JSON representation of the snapshot attribute modification.
0000000000000000000000000000000000000000;;		CreateVolumePermission *CreateVolumePermissionModifications `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The group to modify for the snapshot.
0000000000000000000000000000000000000000;;		GroupNames []*string `locationName:"UserGroup" locationNameList:"GroupName" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The type of operation to perform to the attribute.
0000000000000000000000000000000000000000;;		OperationType *string `type:"string" enum:"OperationType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the snapshot.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// SnapshotId is a required field
0000000000000000000000000000000000000000;;		SnapshotId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The account ID to modify for the snapshot.
0000000000000000000000000000000000000000;;		UserIds []*string `locationName:"UserId" locationNameList:"UserId" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifySnapshotAttributeInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifySnapshotAttributeInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *ModifySnapshotAttributeInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "ModifySnapshotAttributeInput"}
0000000000000000000000000000000000000000;;		if s.SnapshotId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("SnapshotId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAttribute sets the Attribute field's value.
0000000000000000000000000000000000000000;;	func (s *ModifySnapshotAttributeInput) SetAttribute(v string) *ModifySnapshotAttributeInput {
0000000000000000000000000000000000000000;;		s.Attribute = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCreateVolumePermission sets the CreateVolumePermission field's value.
0000000000000000000000000000000000000000;;	func (s *ModifySnapshotAttributeInput) SetCreateVolumePermission(v *CreateVolumePermissionModifications) *ModifySnapshotAttributeInput {
0000000000000000000000000000000000000000;;		s.CreateVolumePermission = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *ModifySnapshotAttributeInput) SetDryRun(v bool) *ModifySnapshotAttributeInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroupNames sets the GroupNames field's value.
0000000000000000000000000000000000000000;;	func (s *ModifySnapshotAttributeInput) SetGroupNames(v []*string) *ModifySnapshotAttributeInput {
0000000000000000000000000000000000000000;;		s.GroupNames = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetOperationType sets the OperationType field's value.
0000000000000000000000000000000000000000;;	func (s *ModifySnapshotAttributeInput) SetOperationType(v string) *ModifySnapshotAttributeInput {
0000000000000000000000000000000000000000;;		s.OperationType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSnapshotId sets the SnapshotId field's value.
0000000000000000000000000000000000000000;;	func (s *ModifySnapshotAttributeInput) SetSnapshotId(v string) *ModifySnapshotAttributeInput {
0000000000000000000000000000000000000000;;		s.SnapshotId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUserIds sets the UserIds field's value.
0000000000000000000000000000000000000000;;	func (s *ModifySnapshotAttributeInput) SetUserIds(v []*string) *ModifySnapshotAttributeInput {
0000000000000000000000000000000000000000;;		s.UserIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifySnapshotAttributeOutput
0000000000000000000000000000000000000000;;	type ModifySnapshotAttributeOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifySnapshotAttributeOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifySnapshotAttributeOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for ModifySpotFleetRequest.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifySpotFleetRequestRequest
0000000000000000000000000000000000000000;;	type ModifySpotFleetRequestInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether running Spot instances should be terminated if the target
0000000000000000000000000000000000000000;;		// capacity of the Spot fleet request is decreased below the current size of
0000000000000000000000000000000000000000;;		// the Spot fleet.
0000000000000000000000000000000000000000;;		ExcessCapacityTerminationPolicy *string `locationName:"excessCapacityTerminationPolicy" type:"string" enum:"ExcessCapacityTerminationPolicy"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the Spot fleet request.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// SpotFleetRequestId is a required field
0000000000000000000000000000000000000000;;		SpotFleetRequestId *string `locationName:"spotFleetRequestId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The size of the fleet.
0000000000000000000000000000000000000000;;		TargetCapacity *int64 `locationName:"targetCapacity" type:"integer"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifySpotFleetRequestInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifySpotFleetRequestInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *ModifySpotFleetRequestInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "ModifySpotFleetRequestInput"}
0000000000000000000000000000000000000000;;		if s.SpotFleetRequestId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("SpotFleetRequestId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetExcessCapacityTerminationPolicy sets the ExcessCapacityTerminationPolicy field's value.
0000000000000000000000000000000000000000;;	func (s *ModifySpotFleetRequestInput) SetExcessCapacityTerminationPolicy(v string) *ModifySpotFleetRequestInput {
0000000000000000000000000000000000000000;;		s.ExcessCapacityTerminationPolicy = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSpotFleetRequestId sets the SpotFleetRequestId field's value.
0000000000000000000000000000000000000000;;	func (s *ModifySpotFleetRequestInput) SetSpotFleetRequestId(v string) *ModifySpotFleetRequestInput {
0000000000000000000000000000000000000000;;		s.SpotFleetRequestId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTargetCapacity sets the TargetCapacity field's value.
0000000000000000000000000000000000000000;;	func (s *ModifySpotFleetRequestInput) SetTargetCapacity(v int64) *ModifySpotFleetRequestInput {
0000000000000000000000000000000000000000;;		s.TargetCapacity = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of ModifySpotFleetRequest.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifySpotFleetRequestResponse
0000000000000000000000000000000000000000;;	type ModifySpotFleetRequestOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Is true if the request succeeds, and an error otherwise.
0000000000000000000000000000000000000000;;		Return *bool `locationName:"return" type:"boolean"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifySpotFleetRequestOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifySpotFleetRequestOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReturn sets the Return field's value.
0000000000000000000000000000000000000000;;	func (s *ModifySpotFleetRequestOutput) SetReturn(v bool) *ModifySpotFleetRequestOutput {
0000000000000000000000000000000000000000;;		s.Return = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for ModifySubnetAttribute.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifySubnetAttributeRequest
0000000000000000000000000000000000000000;;	type ModifySubnetAttributeInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Specify true to indicate that network interfaces created in the specified
0000000000000000000000000000000000000000;;		// subnet should be assigned an IPv6 address. This includes a network interface
0000000000000000000000000000000000000000;;		// that's created when launching an instance into the subnet (the instance therefore
0000000000000000000000000000000000000000;;		// receives an IPv6 address).
0000000000000000000000000000000000000000;;		AssignIpv6AddressOnCreation *AttributeBooleanValue `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Specify true to indicate that network interfaces created in the specified
0000000000000000000000000000000000000000;;		// subnet should be assigned a public IPv4 address. This includes a network
0000000000000000000000000000000000000000;;		// interface that's created when launching an instance into the subnet (the
0000000000000000000000000000000000000000;;		// instance therefore receives a public IPv4 address).
0000000000000000000000000000000000000000;;		MapPublicIpOnLaunch *AttributeBooleanValue `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the subnet.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// SubnetId is a required field
0000000000000000000000000000000000000000;;		SubnetId *string `locationName:"subnetId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifySubnetAttributeInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifySubnetAttributeInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *ModifySubnetAttributeInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "ModifySubnetAttributeInput"}
0000000000000000000000000000000000000000;;		if s.SubnetId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("SubnetId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAssignIpv6AddressOnCreation sets the AssignIpv6AddressOnCreation field's value.
0000000000000000000000000000000000000000;;	func (s *ModifySubnetAttributeInput) SetAssignIpv6AddressOnCreation(v *AttributeBooleanValue) *ModifySubnetAttributeInput {
0000000000000000000000000000000000000000;;		s.AssignIpv6AddressOnCreation = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMapPublicIpOnLaunch sets the MapPublicIpOnLaunch field's value.
0000000000000000000000000000000000000000;;	func (s *ModifySubnetAttributeInput) SetMapPublicIpOnLaunch(v *AttributeBooleanValue) *ModifySubnetAttributeInput {
0000000000000000000000000000000000000000;;		s.MapPublicIpOnLaunch = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSubnetId sets the SubnetId field's value.
0000000000000000000000000000000000000000;;	func (s *ModifySubnetAttributeInput) SetSubnetId(v string) *ModifySubnetAttributeInput {
0000000000000000000000000000000000000000;;		s.SubnetId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifySubnetAttributeOutput
0000000000000000000000000000000000000000;;	type ModifySubnetAttributeOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifySubnetAttributeOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifySubnetAttributeOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for ModifyVolumeAttribute.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyVolumeAttributeRequest
0000000000000000000000000000000000000000;;	type ModifyVolumeAttributeInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether the volume should be auto-enabled for I/O operations.
0000000000000000000000000000000000000000;;		AutoEnableIO *AttributeBooleanValue `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the volume.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// VolumeId is a required field
0000000000000000000000000000000000000000;;		VolumeId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyVolumeAttributeInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyVolumeAttributeInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *ModifyVolumeAttributeInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "ModifyVolumeAttributeInput"}
0000000000000000000000000000000000000000;;		if s.VolumeId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("VolumeId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAutoEnableIO sets the AutoEnableIO field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyVolumeAttributeInput) SetAutoEnableIO(v *AttributeBooleanValue) *ModifyVolumeAttributeInput {
0000000000000000000000000000000000000000;;		s.AutoEnableIO = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyVolumeAttributeInput) SetDryRun(v bool) *ModifyVolumeAttributeInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVolumeId sets the VolumeId field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyVolumeAttributeInput) SetVolumeId(v string) *ModifyVolumeAttributeInput {
0000000000000000000000000000000000000000;;		s.VolumeId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyVolumeAttributeOutput
0000000000000000000000000000000000000000;;	type ModifyVolumeAttributeOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyVolumeAttributeOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyVolumeAttributeOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for ModifyVpcAttribute.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyVpcAttributeRequest
0000000000000000000000000000000000000000;;	type ModifyVpcAttributeInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether the instances launched in the VPC get DNS hostnames. If
0000000000000000000000000000000000000000;;		// enabled, instances in the VPC get DNS hostnames; otherwise, they do not.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// You cannot modify the DNS resolution and DNS hostnames attributes in the
0000000000000000000000000000000000000000;;		// same request. Use separate requests for each attribute. You can only enable
0000000000000000000000000000000000000000;;		// DNS hostnames if you've enabled DNS support.
0000000000000000000000000000000000000000;;		EnableDnsHostnames *AttributeBooleanValue `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether the DNS resolution is supported for the VPC. If enabled,
0000000000000000000000000000000000000000;;		// queries to the Amazon provided DNS server at the 169.254.169.253 IP address,
0000000000000000000000000000000000000000;;		// or the reserved IP address at the base of the VPC network range "plus two"
0000000000000000000000000000000000000000;;		// will succeed. If disabled, the Amazon provided DNS service in the VPC that
0000000000000000000000000000000000000000;;		// resolves public DNS hostnames to IP addresses is not enabled.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// You cannot modify the DNS resolution and DNS hostnames attributes in the
0000000000000000000000000000000000000000;;		// same request. Use separate requests for each attribute.
0000000000000000000000000000000000000000;;		EnableDnsSupport *AttributeBooleanValue `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// VpcId is a required field
0000000000000000000000000000000000000000;;		VpcId *string `locationName:"vpcId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyVpcAttributeInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyVpcAttributeInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *ModifyVpcAttributeInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "ModifyVpcAttributeInput"}
0000000000000000000000000000000000000000;;		if s.VpcId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("VpcId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEnableDnsHostnames sets the EnableDnsHostnames field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyVpcAttributeInput) SetEnableDnsHostnames(v *AttributeBooleanValue) *ModifyVpcAttributeInput {
0000000000000000000000000000000000000000;;		s.EnableDnsHostnames = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEnableDnsSupport sets the EnableDnsSupport field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyVpcAttributeInput) SetEnableDnsSupport(v *AttributeBooleanValue) *ModifyVpcAttributeInput {
0000000000000000000000000000000000000000;;		s.EnableDnsSupport = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcId sets the VpcId field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyVpcAttributeInput) SetVpcId(v string) *ModifyVpcAttributeInput {
0000000000000000000000000000000000000000;;		s.VpcId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyVpcAttributeOutput
0000000000000000000000000000000000000000;;	type ModifyVpcAttributeOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyVpcAttributeOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyVpcAttributeOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for ModifyVpcEndpoint.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyVpcEndpointRequest
0000000000000000000000000000000000000000;;	type ModifyVpcEndpointInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more route tables IDs to associate with the endpoint.
0000000000000000000000000000000000000000;;		AddRouteTableIds []*string `locationName:"AddRouteTableId" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A policy document to attach to the endpoint. The policy must be in valid
0000000000000000000000000000000000000000;;		// JSON format.
0000000000000000000000000000000000000000;;		PolicyDocument *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more route table IDs to disassociate from the endpoint.
0000000000000000000000000000000000000000;;		RemoveRouteTableIds []*string `locationName:"RemoveRouteTableId" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Specify true to reset the policy document to the default policy. The default
0000000000000000000000000000000000000000;;		// policy allows access to the service.
0000000000000000000000000000000000000000;;		ResetPolicy *bool `type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the endpoint.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// VpcEndpointId is a required field
0000000000000000000000000000000000000000;;		VpcEndpointId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyVpcEndpointInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyVpcEndpointInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *ModifyVpcEndpointInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "ModifyVpcEndpointInput"}
0000000000000000000000000000000000000000;;		if s.VpcEndpointId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("VpcEndpointId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAddRouteTableIds sets the AddRouteTableIds field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyVpcEndpointInput) SetAddRouteTableIds(v []*string) *ModifyVpcEndpointInput {
0000000000000000000000000000000000000000;;		s.AddRouteTableIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyVpcEndpointInput) SetDryRun(v bool) *ModifyVpcEndpointInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPolicyDocument sets the PolicyDocument field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyVpcEndpointInput) SetPolicyDocument(v string) *ModifyVpcEndpointInput {
0000000000000000000000000000000000000000;;		s.PolicyDocument = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRemoveRouteTableIds sets the RemoveRouteTableIds field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyVpcEndpointInput) SetRemoveRouteTableIds(v []*string) *ModifyVpcEndpointInput {
0000000000000000000000000000000000000000;;		s.RemoveRouteTableIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetResetPolicy sets the ResetPolicy field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyVpcEndpointInput) SetResetPolicy(v bool) *ModifyVpcEndpointInput {
0000000000000000000000000000000000000000;;		s.ResetPolicy = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcEndpointId sets the VpcEndpointId field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyVpcEndpointInput) SetVpcEndpointId(v string) *ModifyVpcEndpointInput {
0000000000000000000000000000000000000000;;		s.VpcEndpointId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of ModifyVpcEndpoint.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyVpcEndpointResult
0000000000000000000000000000000000000000;;	type ModifyVpcEndpointOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns true if the request succeeds; otherwise, it returns an error.
0000000000000000000000000000000000000000;;		Return *bool `locationName:"return" type:"boolean"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyVpcEndpointOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyVpcEndpointOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReturn sets the Return field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyVpcEndpointOutput) SetReturn(v bool) *ModifyVpcEndpointOutput {
0000000000000000000000000000000000000000;;		s.Return = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyVpcPeeringConnectionOptionsRequest
0000000000000000000000000000000000000000;;	type ModifyVpcPeeringConnectionOptionsInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The VPC peering connection options for the accepter VPC.
0000000000000000000000000000000000000000;;		AccepterPeeringConnectionOptions *PeeringConnectionOptionsRequest `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the operation, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The VPC peering connection options for the requester VPC.
0000000000000000000000000000000000000000;;		RequesterPeeringConnectionOptions *PeeringConnectionOptionsRequest `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC peering connection.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// VpcPeeringConnectionId is a required field
0000000000000000000000000000000000000000;;		VpcPeeringConnectionId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyVpcPeeringConnectionOptionsInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyVpcPeeringConnectionOptionsInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *ModifyVpcPeeringConnectionOptionsInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "ModifyVpcPeeringConnectionOptionsInput"}
0000000000000000000000000000000000000000;;		if s.VpcPeeringConnectionId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("VpcPeeringConnectionId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAccepterPeeringConnectionOptions sets the AccepterPeeringConnectionOptions field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyVpcPeeringConnectionOptionsInput) SetAccepterPeeringConnectionOptions(v *PeeringConnectionOptionsRequest) *ModifyVpcPeeringConnectionOptionsInput {
0000000000000000000000000000000000000000;;		s.AccepterPeeringConnectionOptions = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyVpcPeeringConnectionOptionsInput) SetDryRun(v bool) *ModifyVpcPeeringConnectionOptionsInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRequesterPeeringConnectionOptions sets the RequesterPeeringConnectionOptions field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyVpcPeeringConnectionOptionsInput) SetRequesterPeeringConnectionOptions(v *PeeringConnectionOptionsRequest) *ModifyVpcPeeringConnectionOptionsInput {
0000000000000000000000000000000000000000;;		s.RequesterPeeringConnectionOptions = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcPeeringConnectionId sets the VpcPeeringConnectionId field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyVpcPeeringConnectionOptionsInput) SetVpcPeeringConnectionId(v string) *ModifyVpcPeeringConnectionOptionsInput {
0000000000000000000000000000000000000000;;		s.VpcPeeringConnectionId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ModifyVpcPeeringConnectionOptionsResult
0000000000000000000000000000000000000000;;	type ModifyVpcPeeringConnectionOptionsOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the VPC peering connection options for the accepter VPC.
0000000000000000000000000000000000000000;;		AccepterPeeringConnectionOptions *PeeringConnectionOptions `locationName:"accepterPeeringConnectionOptions" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the VPC peering connection options for the requester VPC.
0000000000000000000000000000000000000000;;		RequesterPeeringConnectionOptions *PeeringConnectionOptions `locationName:"requesterPeeringConnectionOptions" type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyVpcPeeringConnectionOptionsOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ModifyVpcPeeringConnectionOptionsOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAccepterPeeringConnectionOptions sets the AccepterPeeringConnectionOptions field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyVpcPeeringConnectionOptionsOutput) SetAccepterPeeringConnectionOptions(v *PeeringConnectionOptions) *ModifyVpcPeeringConnectionOptionsOutput {
0000000000000000000000000000000000000000;;		s.AccepterPeeringConnectionOptions = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRequesterPeeringConnectionOptions sets the RequesterPeeringConnectionOptions field's value.
0000000000000000000000000000000000000000;;	func (s *ModifyVpcPeeringConnectionOptionsOutput) SetRequesterPeeringConnectionOptions(v *PeeringConnectionOptions) *ModifyVpcPeeringConnectionOptionsOutput {
0000000000000000000000000000000000000000;;		s.RequesterPeeringConnectionOptions = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for MonitorInstances.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/MonitorInstancesRequest
0000000000000000000000000000000000000000;;	type MonitorInstancesInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more instance IDs.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// InstanceIds is a required field
0000000000000000000000000000000000000000;;		InstanceIds []*string `locationName:"InstanceId" locationNameList:"InstanceId" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s MonitorInstancesInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s MonitorInstancesInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *MonitorInstancesInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "MonitorInstancesInput"}
0000000000000000000000000000000000000000;;		if s.InstanceIds == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("InstanceIds"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *MonitorInstancesInput) SetDryRun(v bool) *MonitorInstancesInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceIds sets the InstanceIds field's value.
0000000000000000000000000000000000000000;;	func (s *MonitorInstancesInput) SetInstanceIds(v []*string) *MonitorInstancesInput {
0000000000000000000000000000000000000000;;		s.InstanceIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of MonitorInstances.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/MonitorInstancesResult
0000000000000000000000000000000000000000;;	type MonitorInstancesOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The monitoring information.
0000000000000000000000000000000000000000;;		InstanceMonitorings []*InstanceMonitoring `locationName:"instancesSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s MonitorInstancesOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s MonitorInstancesOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceMonitorings sets the InstanceMonitorings field's value.
0000000000000000000000000000000000000000;;	func (s *MonitorInstancesOutput) SetInstanceMonitorings(v []*InstanceMonitoring) *MonitorInstancesOutput {
0000000000000000000000000000000000000000;;		s.InstanceMonitorings = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the monitoring of an instance.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/Monitoring
0000000000000000000000000000000000000000;;	type Monitoring struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring
0000000000000000000000000000000000000000;;		// is enabled.
0000000000000000000000000000000000000000;;		State *string `locationName:"state" type:"string" enum:"MonitoringState"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s Monitoring) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s Monitoring) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetState sets the State field's value.
0000000000000000000000000000000000000000;;	func (s *Monitoring) SetState(v string) *Monitoring {
0000000000000000000000000000000000000000;;		s.State = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for MoveAddressToVpc.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/MoveAddressToVpcRequest
0000000000000000000000000000000000000000;;	type MoveAddressToVpcInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Elastic IP address.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// PublicIp is a required field
0000000000000000000000000000000000000000;;		PublicIp *string `locationName:"publicIp" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s MoveAddressToVpcInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s MoveAddressToVpcInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *MoveAddressToVpcInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "MoveAddressToVpcInput"}
0000000000000000000000000000000000000000;;		if s.PublicIp == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("PublicIp"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *MoveAddressToVpcInput) SetDryRun(v bool) *MoveAddressToVpcInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPublicIp sets the PublicIp field's value.
0000000000000000000000000000000000000000;;	func (s *MoveAddressToVpcInput) SetPublicIp(v string) *MoveAddressToVpcInput {
0000000000000000000000000000000000000000;;		s.PublicIp = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of MoveAddressToVpc.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/MoveAddressToVpcResult
0000000000000000000000000000000000000000;;	type MoveAddressToVpcOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The allocation ID for the Elastic IP address.
0000000000000000000000000000000000000000;;		AllocationId *string `locationName:"allocationId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The status of the move of the IP address.
0000000000000000000000000000000000000000;;		Status *string `locationName:"status" type:"string" enum:"Status"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s MoveAddressToVpcOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s MoveAddressToVpcOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAllocationId sets the AllocationId field's value.
0000000000000000000000000000000000000000;;	func (s *MoveAddressToVpcOutput) SetAllocationId(v string) *MoveAddressToVpcOutput {
0000000000000000000000000000000000000000;;		s.AllocationId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStatus sets the Status field's value.
0000000000000000000000000000000000000000;;	func (s *MoveAddressToVpcOutput) SetStatus(v string) *MoveAddressToVpcOutput {
0000000000000000000000000000000000000000;;		s.Status = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the status of a moving Elastic IP address.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/MovingAddressStatus
0000000000000000000000000000000000000000;;	type MovingAddressStatus struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The status of the Elastic IP address that's being moved to the EC2-VPC platform,
0000000000000000000000000000000000000000;;		// or restored to the EC2-Classic platform.
0000000000000000000000000000000000000000;;		MoveStatus *string `locationName:"moveStatus" type:"string" enum:"MoveStatus"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Elastic IP address.
0000000000000000000000000000000000000000;;		PublicIp *string `locationName:"publicIp" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s MovingAddressStatus) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s MovingAddressStatus) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMoveStatus sets the MoveStatus field's value.
0000000000000000000000000000000000000000;;	func (s *MovingAddressStatus) SetMoveStatus(v string) *MovingAddressStatus {
0000000000000000000000000000000000000000;;		s.MoveStatus = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPublicIp sets the PublicIp field's value.
0000000000000000000000000000000000000000;;	func (s *MovingAddressStatus) SetPublicIp(v string) *MovingAddressStatus {
0000000000000000000000000000000000000000;;		s.PublicIp = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a NAT gateway.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/NatGateway
0000000000000000000000000000000000000000;;	type NatGateway struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The date and time the NAT gateway was created.
0000000000000000000000000000000000000000;;		CreateTime *time.Time `locationName:"createTime" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The date and time the NAT gateway was deleted, if applicable.
0000000000000000000000000000000000000000;;		DeleteTime *time.Time `locationName:"deleteTime" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If the NAT gateway could not be created, specifies the error code for the
0000000000000000000000000000000000000000;;		// failure. (InsufficientFreeAddressesInSubnet | Gateway.NotAttached | InvalidAllocationID.NotFound
0000000000000000000000000000000000000000;;		// | Resource.AlreadyAssociated | InternalError | InvalidSubnetID.NotFound)
0000000000000000000000000000000000000000;;		FailureCode *string `locationName:"failureCode" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If the NAT gateway could not be created, specifies the error message for
0000000000000000000000000000000000000000;;		// the failure, that corresponds to the error code.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * For InsufficientFreeAddressesInSubnet: "Subnet has insufficient free
0000000000000000000000000000000000000000;;		//    addresses to create this NAT gateway"
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * For Gateway.NotAttached: "Network vpc-xxxxxxxx has no Internet gateway
0000000000000000000000000000000000000000;;		//    attached"
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * For InvalidAllocationID.NotFound: "Elastic IP address eipalloc-xxxxxxxx
0000000000000000000000000000000000000000;;		//    could not be associated with this NAT gateway"
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * For Resource.AlreadyAssociated: "Elastic IP address eipalloc-xxxxxxxx
0000000000000000000000000000000000000000;;		//    is already associated"
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * For InternalError: "Network interface eni-xxxxxxxx, created and used
0000000000000000000000000000000000000000;;		//    internally by this NAT gateway is in an invalid state. Please try again."
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * For InvalidSubnetID.NotFound: "The specified subnet subnet-xxxxxxxx
0000000000000000000000000000000000000000;;		//    does not exist or could not be found."
0000000000000000000000000000000000000000;;		FailureMessage *string `locationName:"failureMessage" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the IP addresses and network interface associated with
0000000000000000000000000000000000000000;;		// the NAT gateway.
0000000000000000000000000000000000000000;;		NatGatewayAddresses []*NatGatewayAddress `locationName:"natGatewayAddressSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the NAT gateway.
0000000000000000000000000000000000000000;;		NatGatewayId *string `locationName:"natGatewayId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Reserved. If you need to sustain traffic greater than the documented limits
0000000000000000000000000000000000000000;;		// (http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-gateway.html),
0000000000000000000000000000000000000000;;		// contact us through the Support Center (https://console.aws.amazon.com/support/home?).
0000000000000000000000000000000000000000;;		ProvisionedBandwidth *ProvisionedBandwidth `locationName:"provisionedBandwidth" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The state of the NAT gateway.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * pending: The NAT gateway is being created and is not ready to process
0000000000000000000000000000000000000000;;		//    traffic.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * failed: The NAT gateway could not be created. Check the failureCode
0000000000000000000000000000000000000000;;		//    and failureMessage fields for the reason.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * available: The NAT gateway is able to process traffic. This status remains
0000000000000000000000000000000000000000;;		//    until you delete the NAT gateway, and does not indicate the health of
0000000000000000000000000000000000000000;;		//    the NAT gateway.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * deleting: The NAT gateway is in the process of being terminated and
0000000000000000000000000000000000000000;;		//    may still be processing traffic.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * deleted: The NAT gateway has been terminated and is no longer processing
0000000000000000000000000000000000000000;;		//    traffic.
0000000000000000000000000000000000000000;;		State *string `locationName:"state" type:"string" enum:"NatGatewayState"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the subnet in which the NAT gateway is located.
0000000000000000000000000000000000000000;;		SubnetId *string `locationName:"subnetId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC in which the NAT gateway is located.
0000000000000000000000000000000000000000;;		VpcId *string `locationName:"vpcId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s NatGateway) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s NatGateway) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCreateTime sets the CreateTime field's value.
0000000000000000000000000000000000000000;;	func (s *NatGateway) SetCreateTime(v time.Time) *NatGateway {
0000000000000000000000000000000000000000;;		s.CreateTime = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDeleteTime sets the DeleteTime field's value.
0000000000000000000000000000000000000000;;	func (s *NatGateway) SetDeleteTime(v time.Time) *NatGateway {
0000000000000000000000000000000000000000;;		s.DeleteTime = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFailureCode sets the FailureCode field's value.
0000000000000000000000000000000000000000;;	func (s *NatGateway) SetFailureCode(v string) *NatGateway {
0000000000000000000000000000000000000000;;		s.FailureCode = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFailureMessage sets the FailureMessage field's value.
0000000000000000000000000000000000000000;;	func (s *NatGateway) SetFailureMessage(v string) *NatGateway {
0000000000000000000000000000000000000000;;		s.FailureMessage = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNatGatewayAddresses sets the NatGatewayAddresses field's value.
0000000000000000000000000000000000000000;;	func (s *NatGateway) SetNatGatewayAddresses(v []*NatGatewayAddress) *NatGateway {
0000000000000000000000000000000000000000;;		s.NatGatewayAddresses = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNatGatewayId sets the NatGatewayId field's value.
0000000000000000000000000000000000000000;;	func (s *NatGateway) SetNatGatewayId(v string) *NatGateway {
0000000000000000000000000000000000000000;;		s.NatGatewayId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetProvisionedBandwidth sets the ProvisionedBandwidth field's value.
0000000000000000000000000000000000000000;;	func (s *NatGateway) SetProvisionedBandwidth(v *ProvisionedBandwidth) *NatGateway {
0000000000000000000000000000000000000000;;		s.ProvisionedBandwidth = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetState sets the State field's value.
0000000000000000000000000000000000000000;;	func (s *NatGateway) SetState(v string) *NatGateway {
0000000000000000000000000000000000000000;;		s.State = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSubnetId sets the SubnetId field's value.
0000000000000000000000000000000000000000;;	func (s *NatGateway) SetSubnetId(v string) *NatGateway {
0000000000000000000000000000000000000000;;		s.SubnetId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcId sets the VpcId field's value.
0000000000000000000000000000000000000000;;	func (s *NatGateway) SetVpcId(v string) *NatGateway {
0000000000000000000000000000000000000000;;		s.VpcId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the IP addresses and network interface associated with a NAT gateway.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/NatGatewayAddress
0000000000000000000000000000000000000000;;	type NatGatewayAddress struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The allocation ID of the Elastic IP address that's associated with the NAT
0000000000000000000000000000000000000000;;		// gateway.
0000000000000000000000000000000000000000;;		AllocationId *string `locationName:"allocationId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the network interface associated with the NAT gateway.
0000000000000000000000000000000000000000;;		NetworkInterfaceId *string `locationName:"networkInterfaceId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The private IP address associated with the Elastic IP address.
0000000000000000000000000000000000000000;;		PrivateIp *string `locationName:"privateIp" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Elastic IP address associated with the NAT gateway.
0000000000000000000000000000000000000000;;		PublicIp *string `locationName:"publicIp" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s NatGatewayAddress) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s NatGatewayAddress) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAllocationId sets the AllocationId field's value.
0000000000000000000000000000000000000000;;	func (s *NatGatewayAddress) SetAllocationId(v string) *NatGatewayAddress {
0000000000000000000000000000000000000000;;		s.AllocationId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNetworkInterfaceId sets the NetworkInterfaceId field's value.
0000000000000000000000000000000000000000;;	func (s *NatGatewayAddress) SetNetworkInterfaceId(v string) *NatGatewayAddress {
0000000000000000000000000000000000000000;;		s.NetworkInterfaceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrivateIp sets the PrivateIp field's value.
0000000000000000000000000000000000000000;;	func (s *NatGatewayAddress) SetPrivateIp(v string) *NatGatewayAddress {
0000000000000000000000000000000000000000;;		s.PrivateIp = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPublicIp sets the PublicIp field's value.
0000000000000000000000000000000000000000;;	func (s *NatGatewayAddress) SetPublicIp(v string) *NatGatewayAddress {
0000000000000000000000000000000000000000;;		s.PublicIp = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a network ACL.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/NetworkAcl
0000000000000000000000000000000000000000;;	type NetworkAcl struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Any associations between the network ACL and one or more subnets
0000000000000000000000000000000000000000;;		Associations []*NetworkAclAssociation `locationName:"associationSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more entries (rules) in the network ACL.
0000000000000000000000000000000000000000;;		Entries []*NetworkAclEntry `locationName:"entrySet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether this is the default network ACL for the VPC.
0000000000000000000000000000000000000000;;		IsDefault *bool `locationName:"default" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the network ACL.
0000000000000000000000000000000000000000;;		NetworkAclId *string `locationName:"networkAclId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Any tags assigned to the network ACL.
0000000000000000000000000000000000000000;;		Tags []*Tag `locationName:"tagSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC for the network ACL.
0000000000000000000000000000000000000000;;		VpcId *string `locationName:"vpcId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s NetworkAcl) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s NetworkAcl) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAssociations sets the Associations field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkAcl) SetAssociations(v []*NetworkAclAssociation) *NetworkAcl {
0000000000000000000000000000000000000000;;		s.Associations = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEntries sets the Entries field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkAcl) SetEntries(v []*NetworkAclEntry) *NetworkAcl {
0000000000000000000000000000000000000000;;		s.Entries = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIsDefault sets the IsDefault field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkAcl) SetIsDefault(v bool) *NetworkAcl {
0000000000000000000000000000000000000000;;		s.IsDefault = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNetworkAclId sets the NetworkAclId field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkAcl) SetNetworkAclId(v string) *NetworkAcl {
0000000000000000000000000000000000000000;;		s.NetworkAclId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTags sets the Tags field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkAcl) SetTags(v []*Tag) *NetworkAcl {
0000000000000000000000000000000000000000;;		s.Tags = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcId sets the VpcId field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkAcl) SetVpcId(v string) *NetworkAcl {
0000000000000000000000000000000000000000;;		s.VpcId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes an association between a network ACL and a subnet.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/NetworkAclAssociation
0000000000000000000000000000000000000000;;	type NetworkAclAssociation struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the association between a network ACL and a subnet.
0000000000000000000000000000000000000000;;		NetworkAclAssociationId *string `locationName:"networkAclAssociationId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the network ACL.
0000000000000000000000000000000000000000;;		NetworkAclId *string `locationName:"networkAclId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the subnet.
0000000000000000000000000000000000000000;;		SubnetId *string `locationName:"subnetId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s NetworkAclAssociation) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s NetworkAclAssociation) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNetworkAclAssociationId sets the NetworkAclAssociationId field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkAclAssociation) SetNetworkAclAssociationId(v string) *NetworkAclAssociation {
0000000000000000000000000000000000000000;;		s.NetworkAclAssociationId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNetworkAclId sets the NetworkAclId field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkAclAssociation) SetNetworkAclId(v string) *NetworkAclAssociation {
0000000000000000000000000000000000000000;;		s.NetworkAclId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSubnetId sets the SubnetId field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkAclAssociation) SetSubnetId(v string) *NetworkAclAssociation {
0000000000000000000000000000000000000000;;		s.SubnetId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes an entry in a network ACL.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/NetworkAclEntry
0000000000000000000000000000000000000000;;	type NetworkAclEntry struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IPv4 network range to allow or deny, in CIDR notation.
0000000000000000000000000000000000000000;;		CidrBlock *string `locationName:"cidrBlock" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether the rule is an egress rule (applied to traffic leaving
0000000000000000000000000000000000000000;;		// the subnet).
0000000000000000000000000000000000000000;;		Egress *bool `locationName:"egress" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ICMP protocol: The ICMP type and code.
0000000000000000000000000000000000000000;;		IcmpTypeCode *IcmpTypeCode `locationName:"icmpTypeCode" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IPv6 network range to allow or deny, in CIDR notation.
0000000000000000000000000000000000000000;;		Ipv6CidrBlock *string `locationName:"ipv6CidrBlock" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TCP or UDP protocols: The range of ports the rule applies to.
0000000000000000000000000000000000000000;;		PortRange *PortRange `locationName:"portRange" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The protocol. A value of -1 means all protocols.
0000000000000000000000000000000000000000;;		Protocol *string `locationName:"protocol" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether to allow or deny the traffic that matches the rule.
0000000000000000000000000000000000000000;;		RuleAction *string `locationName:"ruleAction" type:"string" enum:"RuleAction"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The rule number for the entry. ACL entries are processed in ascending order
0000000000000000000000000000000000000000;;		// by rule number.
0000000000000000000000000000000000000000;;		RuleNumber *int64 `locationName:"ruleNumber" type:"integer"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s NetworkAclEntry) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s NetworkAclEntry) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCidrBlock sets the CidrBlock field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkAclEntry) SetCidrBlock(v string) *NetworkAclEntry {
0000000000000000000000000000000000000000;;		s.CidrBlock = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEgress sets the Egress field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkAclEntry) SetEgress(v bool) *NetworkAclEntry {
0000000000000000000000000000000000000000;;		s.Egress = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIcmpTypeCode sets the IcmpTypeCode field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkAclEntry) SetIcmpTypeCode(v *IcmpTypeCode) *NetworkAclEntry {
0000000000000000000000000000000000000000;;		s.IcmpTypeCode = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpv6CidrBlock sets the Ipv6CidrBlock field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkAclEntry) SetIpv6CidrBlock(v string) *NetworkAclEntry {
0000000000000000000000000000000000000000;;		s.Ipv6CidrBlock = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPortRange sets the PortRange field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkAclEntry) SetPortRange(v *PortRange) *NetworkAclEntry {
0000000000000000000000000000000000000000;;		s.PortRange = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetProtocol sets the Protocol field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkAclEntry) SetProtocol(v string) *NetworkAclEntry {
0000000000000000000000000000000000000000;;		s.Protocol = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRuleAction sets the RuleAction field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkAclEntry) SetRuleAction(v string) *NetworkAclEntry {
0000000000000000000000000000000000000000;;		s.RuleAction = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRuleNumber sets the RuleNumber field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkAclEntry) SetRuleNumber(v int64) *NetworkAclEntry {
0000000000000000000000000000000000000000;;		s.RuleNumber = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a network interface.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/NetworkInterface
0000000000000000000000000000000000000000;;	type NetworkInterface struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The association information for an Elastic IP address (IPv4) associated with
0000000000000000000000000000000000000000;;		// the network interface.
0000000000000000000000000000000000000000;;		Association *NetworkInterfaceAssociation `locationName:"association" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The network interface attachment.
0000000000000000000000000000000000000000;;		Attachment *NetworkInterfaceAttachment `locationName:"attachment" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Availability Zone.
0000000000000000000000000000000000000000;;		AvailabilityZone *string `locationName:"availabilityZone" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A description.
0000000000000000000000000000000000000000;;		Description *string `locationName:"description" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Any security groups for the network interface.
0000000000000000000000000000000000000000;;		Groups []*GroupIdentifier `locationName:"groupSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The type of interface.
0000000000000000000000000000000000000000;;		InterfaceType *string `locationName:"interfaceType" type:"string" enum:"NetworkInterfaceType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IPv6 addresses associated with the network interface.
0000000000000000000000000000000000000000;;		Ipv6Addresses []*NetworkInterfaceIpv6Address `locationName:"ipv6AddressesSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The MAC address.
0000000000000000000000000000000000000000;;		MacAddress *string `locationName:"macAddress" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the network interface.
0000000000000000000000000000000000000000;;		NetworkInterfaceId *string `locationName:"networkInterfaceId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The AWS account ID of the owner of the network interface.
0000000000000000000000000000000000000000;;		OwnerId *string `locationName:"ownerId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The private DNS name.
0000000000000000000000000000000000000000;;		PrivateDnsName *string `locationName:"privateDnsName" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IPv4 address of the network interface within the subnet.
0000000000000000000000000000000000000000;;		PrivateIpAddress *string `locationName:"privateIpAddress" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The private IPv4 addresses associated with the network interface.
0000000000000000000000000000000000000000;;		PrivateIpAddresses []*NetworkInterfacePrivateIpAddress `locationName:"privateIpAddressesSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the entity that launched the instance on your behalf (for example,
0000000000000000000000000000000000000000;;		// AWS Management Console or Auto Scaling).
0000000000000000000000000000000000000000;;		RequesterId *string `locationName:"requesterId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether the network interface is being managed by AWS.
0000000000000000000000000000000000000000;;		RequesterManaged *bool `locationName:"requesterManaged" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether traffic to or from the instance is validated.
0000000000000000000000000000000000000000;;		SourceDestCheck *bool `locationName:"sourceDestCheck" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The status of the network interface.
0000000000000000000000000000000000000000;;		Status *string `locationName:"status" type:"string" enum:"NetworkInterfaceStatus"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the subnet.
0000000000000000000000000000000000000000;;		SubnetId *string `locationName:"subnetId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Any tags assigned to the network interface.
0000000000000000000000000000000000000000;;		TagSet []*Tag `locationName:"tagSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC.
0000000000000000000000000000000000000000;;		VpcId *string `locationName:"vpcId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s NetworkInterface) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s NetworkInterface) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAssociation sets the Association field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkInterface) SetAssociation(v *NetworkInterfaceAssociation) *NetworkInterface {
0000000000000000000000000000000000000000;;		s.Association = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAttachment sets the Attachment field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkInterface) SetAttachment(v *NetworkInterfaceAttachment) *NetworkInterface {
0000000000000000000000000000000000000000;;		s.Attachment = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAvailabilityZone sets the AvailabilityZone field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkInterface) SetAvailabilityZone(v string) *NetworkInterface {
0000000000000000000000000000000000000000;;		s.AvailabilityZone = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDescription sets the Description field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkInterface) SetDescription(v string) *NetworkInterface {
0000000000000000000000000000000000000000;;		s.Description = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroups sets the Groups field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkInterface) SetGroups(v []*GroupIdentifier) *NetworkInterface {
0000000000000000000000000000000000000000;;		s.Groups = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInterfaceType sets the InterfaceType field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkInterface) SetInterfaceType(v string) *NetworkInterface {
0000000000000000000000000000000000000000;;		s.InterfaceType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpv6Addresses sets the Ipv6Addresses field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkInterface) SetIpv6Addresses(v []*NetworkInterfaceIpv6Address) *NetworkInterface {
0000000000000000000000000000000000000000;;		s.Ipv6Addresses = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMacAddress sets the MacAddress field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkInterface) SetMacAddress(v string) *NetworkInterface {
0000000000000000000000000000000000000000;;		s.MacAddress = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNetworkInterfaceId sets the NetworkInterfaceId field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkInterface) SetNetworkInterfaceId(v string) *NetworkInterface {
0000000000000000000000000000000000000000;;		s.NetworkInterfaceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetOwnerId sets the OwnerId field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkInterface) SetOwnerId(v string) *NetworkInterface {
0000000000000000000000000000000000000000;;		s.OwnerId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrivateDnsName sets the PrivateDnsName field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkInterface) SetPrivateDnsName(v string) *NetworkInterface {
0000000000000000000000000000000000000000;;		s.PrivateDnsName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrivateIpAddress sets the PrivateIpAddress field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkInterface) SetPrivateIpAddress(v string) *NetworkInterface {
0000000000000000000000000000000000000000;;		s.PrivateIpAddress = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrivateIpAddresses sets the PrivateIpAddresses field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkInterface) SetPrivateIpAddresses(v []*NetworkInterfacePrivateIpAddress) *NetworkInterface {
0000000000000000000000000000000000000000;;		s.PrivateIpAddresses = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRequesterId sets the RequesterId field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkInterface) SetRequesterId(v string) *NetworkInterface {
0000000000000000000000000000000000000000;;		s.RequesterId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRequesterManaged sets the RequesterManaged field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkInterface) SetRequesterManaged(v bool) *NetworkInterface {
0000000000000000000000000000000000000000;;		s.RequesterManaged = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSourceDestCheck sets the SourceDestCheck field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkInterface) SetSourceDestCheck(v bool) *NetworkInterface {
0000000000000000000000000000000000000000;;		s.SourceDestCheck = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStatus sets the Status field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkInterface) SetStatus(v string) *NetworkInterface {
0000000000000000000000000000000000000000;;		s.Status = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSubnetId sets the SubnetId field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkInterface) SetSubnetId(v string) *NetworkInterface {
0000000000000000000000000000000000000000;;		s.SubnetId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTagSet sets the TagSet field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkInterface) SetTagSet(v []*Tag) *NetworkInterface {
0000000000000000000000000000000000000000;;		s.TagSet = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcId sets the VpcId field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkInterface) SetVpcId(v string) *NetworkInterface {
0000000000000000000000000000000000000000;;		s.VpcId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes association information for an Elastic IP address (IPv4 only).
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/NetworkInterfaceAssociation
0000000000000000000000000000000000000000;;	type NetworkInterfaceAssociation struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The allocation ID.
0000000000000000000000000000000000000000;;		AllocationId *string `locationName:"allocationId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The association ID.
0000000000000000000000000000000000000000;;		AssociationId *string `locationName:"associationId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the Elastic IP address owner.
0000000000000000000000000000000000000000;;		IpOwnerId *string `locationName:"ipOwnerId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The public DNS name.
0000000000000000000000000000000000000000;;		PublicDnsName *string `locationName:"publicDnsName" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The address of the Elastic IP address bound to the network interface.
0000000000000000000000000000000000000000;;		PublicIp *string `locationName:"publicIp" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s NetworkInterfaceAssociation) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s NetworkInterfaceAssociation) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAllocationId sets the AllocationId field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkInterfaceAssociation) SetAllocationId(v string) *NetworkInterfaceAssociation {
0000000000000000000000000000000000000000;;		s.AllocationId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAssociationId sets the AssociationId field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkInterfaceAssociation) SetAssociationId(v string) *NetworkInterfaceAssociation {
0000000000000000000000000000000000000000;;		s.AssociationId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpOwnerId sets the IpOwnerId field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkInterfaceAssociation) SetIpOwnerId(v string) *NetworkInterfaceAssociation {
0000000000000000000000000000000000000000;;		s.IpOwnerId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPublicDnsName sets the PublicDnsName field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkInterfaceAssociation) SetPublicDnsName(v string) *NetworkInterfaceAssociation {
0000000000000000000000000000000000000000;;		s.PublicDnsName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPublicIp sets the PublicIp field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkInterfaceAssociation) SetPublicIp(v string) *NetworkInterfaceAssociation {
0000000000000000000000000000000000000000;;		s.PublicIp = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a network interface attachment.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/NetworkInterfaceAttachment
0000000000000000000000000000000000000000;;	type NetworkInterfaceAttachment struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The timestamp indicating when the attachment initiated.
0000000000000000000000000000000000000000;;		AttachTime *time.Time `locationName:"attachTime" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the network interface attachment.
0000000000000000000000000000000000000000;;		AttachmentId *string `locationName:"attachmentId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether the network interface is deleted when the instance is terminated.
0000000000000000000000000000000000000000;;		DeleteOnTermination *bool `locationName:"deleteOnTermination" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The device index of the network interface attachment on the instance.
0000000000000000000000000000000000000000;;		DeviceIndex *int64 `locationName:"deviceIndex" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the instance.
0000000000000000000000000000000000000000;;		InstanceId *string `locationName:"instanceId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The AWS account ID of the owner of the instance.
0000000000000000000000000000000000000000;;		InstanceOwnerId *string `locationName:"instanceOwnerId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The attachment state.
0000000000000000000000000000000000000000;;		Status *string `locationName:"status" type:"string" enum:"AttachmentStatus"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s NetworkInterfaceAttachment) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s NetworkInterfaceAttachment) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAttachTime sets the AttachTime field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkInterfaceAttachment) SetAttachTime(v time.Time) *NetworkInterfaceAttachment {
0000000000000000000000000000000000000000;;		s.AttachTime = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAttachmentId sets the AttachmentId field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkInterfaceAttachment) SetAttachmentId(v string) *NetworkInterfaceAttachment {
0000000000000000000000000000000000000000;;		s.AttachmentId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDeleteOnTermination sets the DeleteOnTermination field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkInterfaceAttachment) SetDeleteOnTermination(v bool) *NetworkInterfaceAttachment {
0000000000000000000000000000000000000000;;		s.DeleteOnTermination = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDeviceIndex sets the DeviceIndex field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkInterfaceAttachment) SetDeviceIndex(v int64) *NetworkInterfaceAttachment {
0000000000000000000000000000000000000000;;		s.DeviceIndex = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceId sets the InstanceId field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkInterfaceAttachment) SetInstanceId(v string) *NetworkInterfaceAttachment {
0000000000000000000000000000000000000000;;		s.InstanceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceOwnerId sets the InstanceOwnerId field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkInterfaceAttachment) SetInstanceOwnerId(v string) *NetworkInterfaceAttachment {
0000000000000000000000000000000000000000;;		s.InstanceOwnerId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStatus sets the Status field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkInterfaceAttachment) SetStatus(v string) *NetworkInterfaceAttachment {
0000000000000000000000000000000000000000;;		s.Status = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes an attachment change.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/NetworkInterfaceAttachmentChanges
0000000000000000000000000000000000000000;;	type NetworkInterfaceAttachmentChanges struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the network interface attachment.
0000000000000000000000000000000000000000;;		AttachmentId *string `locationName:"attachmentId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether the network interface is deleted when the instance is terminated.
0000000000000000000000000000000000000000;;		DeleteOnTermination *bool `locationName:"deleteOnTermination" type:"boolean"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s NetworkInterfaceAttachmentChanges) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s NetworkInterfaceAttachmentChanges) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAttachmentId sets the AttachmentId field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkInterfaceAttachmentChanges) SetAttachmentId(v string) *NetworkInterfaceAttachmentChanges {
0000000000000000000000000000000000000000;;		s.AttachmentId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDeleteOnTermination sets the DeleteOnTermination field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkInterfaceAttachmentChanges) SetDeleteOnTermination(v bool) *NetworkInterfaceAttachmentChanges {
0000000000000000000000000000000000000000;;		s.DeleteOnTermination = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes an IPv6 address associated with a network interface.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/NetworkInterfaceIpv6Address
0000000000000000000000000000000000000000;;	type NetworkInterfaceIpv6Address struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IPv6 address.
0000000000000000000000000000000000000000;;		Ipv6Address *string `locationName:"ipv6Address" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s NetworkInterfaceIpv6Address) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s NetworkInterfaceIpv6Address) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpv6Address sets the Ipv6Address field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkInterfaceIpv6Address) SetIpv6Address(v string) *NetworkInterfaceIpv6Address {
0000000000000000000000000000000000000000;;		s.Ipv6Address = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the private IPv4 address of a network interface.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/NetworkInterfacePrivateIpAddress
0000000000000000000000000000000000000000;;	type NetworkInterfacePrivateIpAddress struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The association information for an Elastic IP address (IPv4) associated with
0000000000000000000000000000000000000000;;		// the network interface.
0000000000000000000000000000000000000000;;		Association *NetworkInterfaceAssociation `locationName:"association" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether this IPv4 address is the primary private IPv4 address of
0000000000000000000000000000000000000000;;		// the network interface.
0000000000000000000000000000000000000000;;		Primary *bool `locationName:"primary" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The private DNS name.
0000000000000000000000000000000000000000;;		PrivateDnsName *string `locationName:"privateDnsName" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The private IPv4 address.
0000000000000000000000000000000000000000;;		PrivateIpAddress *string `locationName:"privateIpAddress" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s NetworkInterfacePrivateIpAddress) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s NetworkInterfacePrivateIpAddress) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAssociation sets the Association field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkInterfacePrivateIpAddress) SetAssociation(v *NetworkInterfaceAssociation) *NetworkInterfacePrivateIpAddress {
0000000000000000000000000000000000000000;;		s.Association = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrimary sets the Primary field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkInterfacePrivateIpAddress) SetPrimary(v bool) *NetworkInterfacePrivateIpAddress {
0000000000000000000000000000000000000000;;		s.Primary = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrivateDnsName sets the PrivateDnsName field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkInterfacePrivateIpAddress) SetPrivateDnsName(v string) *NetworkInterfacePrivateIpAddress {
0000000000000000000000000000000000000000;;		s.PrivateDnsName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrivateIpAddress sets the PrivateIpAddress field's value.
0000000000000000000000000000000000000000;;	func (s *NetworkInterfacePrivateIpAddress) SetPrivateIpAddress(v string) *NetworkInterfacePrivateIpAddress {
0000000000000000000000000000000000000000;;		s.PrivateIpAddress = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/NewDhcpConfiguration
0000000000000000000000000000000000000000;;	type NewDhcpConfiguration struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key *string `locationName:"key" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Values []*string `locationName:"Value" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s NewDhcpConfiguration) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s NewDhcpConfiguration) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetKey sets the Key field's value.
0000000000000000000000000000000000000000;;	func (s *NewDhcpConfiguration) SetKey(v string) *NewDhcpConfiguration {
0000000000000000000000000000000000000000;;		s.Key = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetValues sets the Values field's value.
0000000000000000000000000000000000000000;;	func (s *NewDhcpConfiguration) SetValues(v []*string) *NewDhcpConfiguration {
0000000000000000000000000000000000000000;;		s.Values = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the VPC peering connection options.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/PeeringConnectionOptions
0000000000000000000000000000000000000000;;	type PeeringConnectionOptions struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If true, enables a local VPC to resolve public DNS hostnames to private IP
0000000000000000000000000000000000000000;;		// addresses when queried from instances in the peer VPC.
0000000000000000000000000000000000000000;;		AllowDnsResolutionFromRemoteVpc *bool `locationName:"allowDnsResolutionFromRemoteVpc" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If true, enables outbound communication from an EC2-Classic instance that's
0000000000000000000000000000000000000000;;		// linked to a local VPC via ClassicLink to instances in a peer VPC.
0000000000000000000000000000000000000000;;		AllowEgressFromLocalClassicLinkToRemoteVpc *bool `locationName:"allowEgressFromLocalClassicLinkToRemoteVpc" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If true, enables outbound communication from instances in a local VPC to
0000000000000000000000000000000000000000;;		// an EC2-Classic instance that's linked to a peer VPC via ClassicLink.
0000000000000000000000000000000000000000;;		AllowEgressFromLocalVpcToRemoteClassicLink *bool `locationName:"allowEgressFromLocalVpcToRemoteClassicLink" type:"boolean"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s PeeringConnectionOptions) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s PeeringConnectionOptions) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAllowDnsResolutionFromRemoteVpc sets the AllowDnsResolutionFromRemoteVpc field's value.
0000000000000000000000000000000000000000;;	func (s *PeeringConnectionOptions) SetAllowDnsResolutionFromRemoteVpc(v bool) *PeeringConnectionOptions {
0000000000000000000000000000000000000000;;		s.AllowDnsResolutionFromRemoteVpc = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAllowEgressFromLocalClassicLinkToRemoteVpc sets the AllowEgressFromLocalClassicLinkToRemoteVpc field's value.
0000000000000000000000000000000000000000;;	func (s *PeeringConnectionOptions) SetAllowEgressFromLocalClassicLinkToRemoteVpc(v bool) *PeeringConnectionOptions {
0000000000000000000000000000000000000000;;		s.AllowEgressFromLocalClassicLinkToRemoteVpc = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAllowEgressFromLocalVpcToRemoteClassicLink sets the AllowEgressFromLocalVpcToRemoteClassicLink field's value.
0000000000000000000000000000000000000000;;	func (s *PeeringConnectionOptions) SetAllowEgressFromLocalVpcToRemoteClassicLink(v bool) *PeeringConnectionOptions {
0000000000000000000000000000000000000000;;		s.AllowEgressFromLocalVpcToRemoteClassicLink = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The VPC peering connection options.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/PeeringConnectionOptionsRequest
0000000000000000000000000000000000000000;;	type PeeringConnectionOptionsRequest struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If true, enables a local VPC to resolve public DNS hostnames to private IP
0000000000000000000000000000000000000000;;		// addresses when queried from instances in the peer VPC.
0000000000000000000000000000000000000000;;		AllowDnsResolutionFromRemoteVpc *bool `type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If true, enables outbound communication from an EC2-Classic instance that's
0000000000000000000000000000000000000000;;		// linked to a local VPC via ClassicLink to instances in a peer VPC.
0000000000000000000000000000000000000000;;		AllowEgressFromLocalClassicLinkToRemoteVpc *bool `type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If true, enables outbound communication from instances in a local VPC to
0000000000000000000000000000000000000000;;		// an EC2-Classic instance that's linked to a peer VPC via ClassicLink.
0000000000000000000000000000000000000000;;		AllowEgressFromLocalVpcToRemoteClassicLink *bool `type:"boolean"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s PeeringConnectionOptionsRequest) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s PeeringConnectionOptionsRequest) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAllowDnsResolutionFromRemoteVpc sets the AllowDnsResolutionFromRemoteVpc field's value.
0000000000000000000000000000000000000000;;	func (s *PeeringConnectionOptionsRequest) SetAllowDnsResolutionFromRemoteVpc(v bool) *PeeringConnectionOptionsRequest {
0000000000000000000000000000000000000000;;		s.AllowDnsResolutionFromRemoteVpc = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAllowEgressFromLocalClassicLinkToRemoteVpc sets the AllowEgressFromLocalClassicLinkToRemoteVpc field's value.
0000000000000000000000000000000000000000;;	func (s *PeeringConnectionOptionsRequest) SetAllowEgressFromLocalClassicLinkToRemoteVpc(v bool) *PeeringConnectionOptionsRequest {
0000000000000000000000000000000000000000;;		s.AllowEgressFromLocalClassicLinkToRemoteVpc = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAllowEgressFromLocalVpcToRemoteClassicLink sets the AllowEgressFromLocalVpcToRemoteClassicLink field's value.
0000000000000000000000000000000000000000;;	func (s *PeeringConnectionOptionsRequest) SetAllowEgressFromLocalVpcToRemoteClassicLink(v bool) *PeeringConnectionOptionsRequest {
0000000000000000000000000000000000000000;;		s.AllowEgressFromLocalVpcToRemoteClassicLink = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the placement of an instance.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/Placement
0000000000000000000000000000000000000000;;	type Placement struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The affinity setting for the instance on the Dedicated Host. This parameter
0000000000000000000000000000000000000000;;		// is not supported for the ImportInstance command.
0000000000000000000000000000000000000000;;		Affinity *string `locationName:"affinity" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Availability Zone of the instance.
0000000000000000000000000000000000000000;;		AvailabilityZone *string `locationName:"availabilityZone" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the placement group the instance is in (for cluster compute instances).
0000000000000000000000000000000000000000;;		GroupName *string `locationName:"groupName" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the Dedicted host on which the instance resides. This parameter
0000000000000000000000000000000000000000;;		// is not support for the ImportInstance command.
0000000000000000000000000000000000000000;;		HostId *string `locationName:"hostId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The tenancy of the instance (if the instance is running in a VPC). An instance
0000000000000000000000000000000000000000;;		// with a tenancy of dedicated runs on single-tenant hardware. The host tenancy
0000000000000000000000000000000000000000;;		// is not supported for the ImportInstance command.
0000000000000000000000000000000000000000;;		Tenancy *string `locationName:"tenancy" type:"string" enum:"Tenancy"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s Placement) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s Placement) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAffinity sets the Affinity field's value.
0000000000000000000000000000000000000000;;	func (s *Placement) SetAffinity(v string) *Placement {
0000000000000000000000000000000000000000;;		s.Affinity = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAvailabilityZone sets the AvailabilityZone field's value.
0000000000000000000000000000000000000000;;	func (s *Placement) SetAvailabilityZone(v string) *Placement {
0000000000000000000000000000000000000000;;		s.AvailabilityZone = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroupName sets the GroupName field's value.
0000000000000000000000000000000000000000;;	func (s *Placement) SetGroupName(v string) *Placement {
0000000000000000000000000000000000000000;;		s.GroupName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHostId sets the HostId field's value.
0000000000000000000000000000000000000000;;	func (s *Placement) SetHostId(v string) *Placement {
0000000000000000000000000000000000000000;;		s.HostId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTenancy sets the Tenancy field's value.
0000000000000000000000000000000000000000;;	func (s *Placement) SetTenancy(v string) *Placement {
0000000000000000000000000000000000000000;;		s.Tenancy = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a placement group.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/PlacementGroup
0000000000000000000000000000000000000000;;	type PlacementGroup struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the placement group.
0000000000000000000000000000000000000000;;		GroupName *string `locationName:"groupName" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The state of the placement group.
0000000000000000000000000000000000000000;;		State *string `locationName:"state" type:"string" enum:"PlacementGroupState"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The placement strategy.
0000000000000000000000000000000000000000;;		Strategy *string `locationName:"strategy" type:"string" enum:"PlacementStrategy"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s PlacementGroup) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s PlacementGroup) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroupName sets the GroupName field's value.
0000000000000000000000000000000000000000;;	func (s *PlacementGroup) SetGroupName(v string) *PlacementGroup {
0000000000000000000000000000000000000000;;		s.GroupName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetState sets the State field's value.
0000000000000000000000000000000000000000;;	func (s *PlacementGroup) SetState(v string) *PlacementGroup {
0000000000000000000000000000000000000000;;		s.State = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStrategy sets the Strategy field's value.
0000000000000000000000000000000000000000;;	func (s *PlacementGroup) SetStrategy(v string) *PlacementGroup {
0000000000000000000000000000000000000000;;		s.Strategy = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a range of ports.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/PortRange
0000000000000000000000000000000000000000;;	type PortRange struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The first port in the range.
0000000000000000000000000000000000000000;;		From *int64 `locationName:"from" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The last port in the range.
0000000000000000000000000000000000000000;;		To *int64 `locationName:"to" type:"integer"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s PortRange) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s PortRange) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFrom sets the From field's value.
0000000000000000000000000000000000000000;;	func (s *PortRange) SetFrom(v int64) *PortRange {
0000000000000000000000000000000000000000;;		s.From = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTo sets the To field's value.
0000000000000000000000000000000000000000;;	func (s *PortRange) SetTo(v int64) *PortRange {
0000000000000000000000000000000000000000;;		s.To = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes prefixes for AWS services.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/PrefixList
0000000000000000000000000000000000000000;;	type PrefixList struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IP address range of the AWS service.
0000000000000000000000000000000000000000;;		Cidrs []*string `locationName:"cidrSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the prefix.
0000000000000000000000000000000000000000;;		PrefixListId *string `locationName:"prefixListId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the prefix.
0000000000000000000000000000000000000000;;		PrefixListName *string `locationName:"prefixListName" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s PrefixList) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s PrefixList) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCidrs sets the Cidrs field's value.
0000000000000000000000000000000000000000;;	func (s *PrefixList) SetCidrs(v []*string) *PrefixList {
0000000000000000000000000000000000000000;;		s.Cidrs = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrefixListId sets the PrefixListId field's value.
0000000000000000000000000000000000000000;;	func (s *PrefixList) SetPrefixListId(v string) *PrefixList {
0000000000000000000000000000000000000000;;		s.PrefixListId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrefixListName sets the PrefixListName field's value.
0000000000000000000000000000000000000000;;	func (s *PrefixList) SetPrefixListName(v string) *PrefixList {
0000000000000000000000000000000000000000;;		s.PrefixListName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The ID of the prefix.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/PrefixListId
0000000000000000000000000000000000000000;;	type PrefixListId struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the prefix.
0000000000000000000000000000000000000000;;		PrefixListId *string `locationName:"prefixListId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s PrefixListId) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s PrefixListId) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrefixListId sets the PrefixListId field's value.
0000000000000000000000000000000000000000;;	func (s *PrefixListId) SetPrefixListId(v string) *PrefixListId {
0000000000000000000000000000000000000000;;		s.PrefixListId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the price for a Reserved Instance.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/PriceSchedule
0000000000000000000000000000000000000000;;	type PriceSchedule struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The current price schedule, as determined by the term remaining for the Reserved
0000000000000000000000000000000000000000;;		// Instance in the listing.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// A specific price schedule is always in effect, but only one price schedule
0000000000000000000000000000000000000000;;		// can be active at any time. Take, for example, a Reserved Instance listing
0000000000000000000000000000000000000000;;		// that has five months remaining in its term. When you specify price schedules
0000000000000000000000000000000000000000;;		// for five months and two months, this means that schedule 1, covering the
0000000000000000000000000000000000000000;;		// first three months of the remaining term, will be active during months 5,
0000000000000000000000000000000000000000;;		// 4, and 3. Then schedule 2, covering the last two months of the term, will
0000000000000000000000000000000000000000;;		// be active for months 2 and 1.
0000000000000000000000000000000000000000;;		Active *bool `locationName:"active" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The currency for transacting the Reserved Instance resale. At this time,
0000000000000000000000000000000000000000;;		// the only supported currency is USD.
0000000000000000000000000000000000000000;;		CurrencyCode *string `locationName:"currencyCode" type:"string" enum:"CurrencyCodeValues"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The fixed price for the term.
0000000000000000000000000000000000000000;;		Price *float64 `locationName:"price" type:"double"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of months remaining in the reservation. For example, 2 is the
0000000000000000000000000000000000000000;;		// second to the last month before the capacity reservation expires.
0000000000000000000000000000000000000000;;		Term *int64 `locationName:"term" type:"long"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s PriceSchedule) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s PriceSchedule) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetActive sets the Active field's value.
0000000000000000000000000000000000000000;;	func (s *PriceSchedule) SetActive(v bool) *PriceSchedule {
0000000000000000000000000000000000000000;;		s.Active = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCurrencyCode sets the CurrencyCode field's value.
0000000000000000000000000000000000000000;;	func (s *PriceSchedule) SetCurrencyCode(v string) *PriceSchedule {
0000000000000000000000000000000000000000;;		s.CurrencyCode = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrice sets the Price field's value.
0000000000000000000000000000000000000000;;	func (s *PriceSchedule) SetPrice(v float64) *PriceSchedule {
0000000000000000000000000000000000000000;;		s.Price = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTerm sets the Term field's value.
0000000000000000000000000000000000000000;;	func (s *PriceSchedule) SetTerm(v int64) *PriceSchedule {
0000000000000000000000000000000000000000;;		s.Term = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the price for a Reserved Instance.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/PriceScheduleSpecification
0000000000000000000000000000000000000000;;	type PriceScheduleSpecification struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The currency for transacting the Reserved Instance resale. At this time,
0000000000000000000000000000000000000000;;		// the only supported currency is USD.
0000000000000000000000000000000000000000;;		CurrencyCode *string `locationName:"currencyCode" type:"string" enum:"CurrencyCodeValues"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The fixed price for the term.
0000000000000000000000000000000000000000;;		Price *float64 `locationName:"price" type:"double"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of months remaining in the reservation. For example, 2 is the
0000000000000000000000000000000000000000;;		// second to the last month before the capacity reservation expires.
0000000000000000000000000000000000000000;;		Term *int64 `locationName:"term" type:"long"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s PriceScheduleSpecification) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s PriceScheduleSpecification) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCurrencyCode sets the CurrencyCode field's value.
0000000000000000000000000000000000000000;;	func (s *PriceScheduleSpecification) SetCurrencyCode(v string) *PriceScheduleSpecification {
0000000000000000000000000000000000000000;;		s.CurrencyCode = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrice sets the Price field's value.
0000000000000000000000000000000000000000;;	func (s *PriceScheduleSpecification) SetPrice(v float64) *PriceScheduleSpecification {
0000000000000000000000000000000000000000;;		s.Price = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTerm sets the Term field's value.
0000000000000000000000000000000000000000;;	func (s *PriceScheduleSpecification) SetTerm(v int64) *PriceScheduleSpecification {
0000000000000000000000000000000000000000;;		s.Term = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a Reserved Instance offering.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/PricingDetail
0000000000000000000000000000000000000000;;	type PricingDetail struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of reservations available for the price.
0000000000000000000000000000000000000000;;		Count *int64 `locationName:"count" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The price per instance.
0000000000000000000000000000000000000000;;		Price *float64 `locationName:"price" type:"double"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s PricingDetail) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s PricingDetail) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCount sets the Count field's value.
0000000000000000000000000000000000000000;;	func (s *PricingDetail) SetCount(v int64) *PricingDetail {
0000000000000000000000000000000000000000;;		s.Count = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrice sets the Price field's value.
0000000000000000000000000000000000000000;;	func (s *PricingDetail) SetPrice(v float64) *PricingDetail {
0000000000000000000000000000000000000000;;		s.Price = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a secondary private IPv4 address for a network interface.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/PrivateIpAddressSpecification
0000000000000000000000000000000000000000;;	type PrivateIpAddressSpecification struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether the private IPv4 address is the primary private IPv4 address.
0000000000000000000000000000000000000000;;		// Only one IPv4 address can be designated as primary.
0000000000000000000000000000000000000000;;		Primary *bool `locationName:"primary" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The private IPv4 addresses.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// PrivateIpAddress is a required field
0000000000000000000000000000000000000000;;		PrivateIpAddress *string `locationName:"privateIpAddress" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s PrivateIpAddressSpecification) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s PrivateIpAddressSpecification) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *PrivateIpAddressSpecification) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "PrivateIpAddressSpecification"}
0000000000000000000000000000000000000000;;		if s.PrivateIpAddress == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("PrivateIpAddress"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrimary sets the Primary field's value.
0000000000000000000000000000000000000000;;	func (s *PrivateIpAddressSpecification) SetPrimary(v bool) *PrivateIpAddressSpecification {
0000000000000000000000000000000000000000;;		s.Primary = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrivateIpAddress sets the PrivateIpAddress field's value.
0000000000000000000000000000000000000000;;	func (s *PrivateIpAddressSpecification) SetPrivateIpAddress(v string) *PrivateIpAddressSpecification {
0000000000000000000000000000000000000000;;		s.PrivateIpAddress = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a product code.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ProductCode
0000000000000000000000000000000000000000;;	type ProductCode struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The product code.
0000000000000000000000000000000000000000;;		ProductCodeId *string `locationName:"productCode" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The type of product code.
0000000000000000000000000000000000000000;;		ProductCodeType *string `locationName:"type" type:"string" enum:"ProductCodeValues"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ProductCode) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ProductCode) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetProductCodeId sets the ProductCodeId field's value.
0000000000000000000000000000000000000000;;	func (s *ProductCode) SetProductCodeId(v string) *ProductCode {
0000000000000000000000000000000000000000;;		s.ProductCodeId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetProductCodeType sets the ProductCodeType field's value.
0000000000000000000000000000000000000000;;	func (s *ProductCode) SetProductCodeType(v string) *ProductCode {
0000000000000000000000000000000000000000;;		s.ProductCodeType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a virtual private gateway propagating route.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/PropagatingVgw
0000000000000000000000000000000000000000;;	type PropagatingVgw struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the virtual private gateway (VGW).
0000000000000000000000000000000000000000;;		GatewayId *string `locationName:"gatewayId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s PropagatingVgw) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s PropagatingVgw) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGatewayId sets the GatewayId field's value.
0000000000000000000000000000000000000000;;	func (s *PropagatingVgw) SetGatewayId(v string) *PropagatingVgw {
0000000000000000000000000000000000000000;;		s.GatewayId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Reserved. If you need to sustain traffic greater than the documented limits
0000000000000000000000000000000000000000;;	// (http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-gateway.html),
0000000000000000000000000000000000000000;;	// contact us through the Support Center (https://console.aws.amazon.com/support/home?).
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ProvisionedBandwidth
0000000000000000000000000000000000000000;;	type ProvisionedBandwidth struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Reserved. If you need to sustain traffic greater than the documented limits
0000000000000000000000000000000000000000;;		// (http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-gateway.html),
0000000000000000000000000000000000000000;;		// contact us through the Support Center (https://console.aws.amazon.com/support/home?).
0000000000000000000000000000000000000000;;		ProvisionTime *time.Time `locationName:"provisionTime" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Reserved. If you need to sustain traffic greater than the documented limits
0000000000000000000000000000000000000000;;		// (http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-gateway.html),
0000000000000000000000000000000000000000;;		// contact us through the Support Center (https://console.aws.amazon.com/support/home?).
0000000000000000000000000000000000000000;;		Provisioned *string `locationName:"provisioned" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Reserved. If you need to sustain traffic greater than the documented limits
0000000000000000000000000000000000000000;;		// (http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-gateway.html),
0000000000000000000000000000000000000000;;		// contact us through the Support Center (https://console.aws.amazon.com/support/home?).
0000000000000000000000000000000000000000;;		RequestTime *time.Time `locationName:"requestTime" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Reserved. If you need to sustain traffic greater than the documented limits
0000000000000000000000000000000000000000;;		// (http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-gateway.html),
0000000000000000000000000000000000000000;;		// contact us through the Support Center (https://console.aws.amazon.com/support/home?).
0000000000000000000000000000000000000000;;		Requested *string `locationName:"requested" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Reserved. If you need to sustain traffic greater than the documented limits
0000000000000000000000000000000000000000;;		// (http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-gateway.html),
0000000000000000000000000000000000000000;;		// contact us through the Support Center (https://console.aws.amazon.com/support/home?).
0000000000000000000000000000000000000000;;		Status *string `locationName:"status" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ProvisionedBandwidth) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ProvisionedBandwidth) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetProvisionTime sets the ProvisionTime field's value.
0000000000000000000000000000000000000000;;	func (s *ProvisionedBandwidth) SetProvisionTime(v time.Time) *ProvisionedBandwidth {
0000000000000000000000000000000000000000;;		s.ProvisionTime = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetProvisioned sets the Provisioned field's value.
0000000000000000000000000000000000000000;;	func (s *ProvisionedBandwidth) SetProvisioned(v string) *ProvisionedBandwidth {
0000000000000000000000000000000000000000;;		s.Provisioned = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRequestTime sets the RequestTime field's value.
0000000000000000000000000000000000000000;;	func (s *ProvisionedBandwidth) SetRequestTime(v time.Time) *ProvisionedBandwidth {
0000000000000000000000000000000000000000;;		s.RequestTime = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRequested sets the Requested field's value.
0000000000000000000000000000000000000000;;	func (s *ProvisionedBandwidth) SetRequested(v string) *ProvisionedBandwidth {
0000000000000000000000000000000000000000;;		s.Requested = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStatus sets the Status field's value.
0000000000000000000000000000000000000000;;	func (s *ProvisionedBandwidth) SetStatus(v string) *ProvisionedBandwidth {
0000000000000000000000000000000000000000;;		s.Status = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the result of the purchase.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/Purchase
0000000000000000000000000000000000000000;;	type Purchase struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The currency in which the UpfrontPrice and HourlyPrice amounts are specified.
0000000000000000000000000000000000000000;;		// At this time, the only supported currency is USD.
0000000000000000000000000000000000000000;;		CurrencyCode *string `locationName:"currencyCode" type:"string" enum:"CurrencyCodeValues"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The duration of the reservation's term in seconds.
0000000000000000000000000000000000000000;;		Duration *int64 `locationName:"duration" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IDs of the Dedicated Hosts associated with the reservation.
0000000000000000000000000000000000000000;;		HostIdSet []*string `locationName:"hostIdSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the reservation.
0000000000000000000000000000000000000000;;		HostReservationId *string `locationName:"hostReservationId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The hourly price of the reservation per hour.
0000000000000000000000000000000000000000;;		HourlyPrice *string `locationName:"hourlyPrice" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The instance family on the Dedicated Host that the reservation can be associated
0000000000000000000000000000000000000000;;		// with.
0000000000000000000000000000000000000000;;		InstanceFamily *string `locationName:"instanceFamily" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The payment option for the reservation.
0000000000000000000000000000000000000000;;		PaymentOption *string `locationName:"paymentOption" type:"string" enum:"PaymentOption"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The upfront price of the reservation.
0000000000000000000000000000000000000000;;		UpfrontPrice *string `locationName:"upfrontPrice" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s Purchase) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s Purchase) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCurrencyCode sets the CurrencyCode field's value.
0000000000000000000000000000000000000000;;	func (s *Purchase) SetCurrencyCode(v string) *Purchase {
0000000000000000000000000000000000000000;;		s.CurrencyCode = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDuration sets the Duration field's value.
0000000000000000000000000000000000000000;;	func (s *Purchase) SetDuration(v int64) *Purchase {
0000000000000000000000000000000000000000;;		s.Duration = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHostIdSet sets the HostIdSet field's value.
0000000000000000000000000000000000000000;;	func (s *Purchase) SetHostIdSet(v []*string) *Purchase {
0000000000000000000000000000000000000000;;		s.HostIdSet = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHostReservationId sets the HostReservationId field's value.
0000000000000000000000000000000000000000;;	func (s *Purchase) SetHostReservationId(v string) *Purchase {
0000000000000000000000000000000000000000;;		s.HostReservationId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHourlyPrice sets the HourlyPrice field's value.
0000000000000000000000000000000000000000;;	func (s *Purchase) SetHourlyPrice(v string) *Purchase {
0000000000000000000000000000000000000000;;		s.HourlyPrice = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceFamily sets the InstanceFamily field's value.
0000000000000000000000000000000000000000;;	func (s *Purchase) SetInstanceFamily(v string) *Purchase {
0000000000000000000000000000000000000000;;		s.InstanceFamily = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPaymentOption sets the PaymentOption field's value.
0000000000000000000000000000000000000000;;	func (s *Purchase) SetPaymentOption(v string) *Purchase {
0000000000000000000000000000000000000000;;		s.PaymentOption = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUpfrontPrice sets the UpfrontPrice field's value.
0000000000000000000000000000000000000000;;	func (s *Purchase) SetUpfrontPrice(v string) *Purchase {
0000000000000000000000000000000000000000;;		s.UpfrontPrice = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/PurchaseHostReservationRequest
0000000000000000000000000000000000000000;;	type PurchaseHostReservationInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Unique, case-sensitive identifier you provide to ensure idempotency of the
0000000000000000000000000000000000000000;;		// request. For more information, see How to Ensure Idempotency (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html)
0000000000000000000000000000000000000000;;		// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;		ClientToken *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The currency in which the totalUpfrontPrice, LimitPrice, and totalHourlyPrice
0000000000000000000000000000000000000000;;		// amounts are specified. At this time, the only supported currency is USD.
0000000000000000000000000000000000000000;;		CurrencyCode *string `type:"string" enum:"CurrencyCodeValues"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID/s of the Dedicated Host/s that the reservation will be associated
0000000000000000000000000000000000000000;;		// with.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// HostIdSet is a required field
0000000000000000000000000000000000000000;;		HostIdSet []*string `locationNameList:"item" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The specified limit is checked against the total upfront cost of the reservation
0000000000000000000000000000000000000000;;		// (calculated as the offering's upfront cost multiplied by the host count).
0000000000000000000000000000000000000000;;		// If the total upfront cost is greater than the specified price limit, the
0000000000000000000000000000000000000000;;		// request will fail. This is used to ensure that the purchase does not exceed
0000000000000000000000000000000000000000;;		// the expected upfront cost of the purchase. At this time, the only supported
0000000000000000000000000000000000000000;;		// currency is USD. For example, to indicate a limit price of USD 100, specify
0000000000000000000000000000000000000000;;		// 100.00.
0000000000000000000000000000000000000000;;		LimitPrice *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the offering.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// OfferingId is a required field
0000000000000000000000000000000000000000;;		OfferingId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s PurchaseHostReservationInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s PurchaseHostReservationInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *PurchaseHostReservationInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "PurchaseHostReservationInput"}
0000000000000000000000000000000000000000;;		if s.HostIdSet == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("HostIdSet"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.OfferingId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("OfferingId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetClientToken sets the ClientToken field's value.
0000000000000000000000000000000000000000;;	func (s *PurchaseHostReservationInput) SetClientToken(v string) *PurchaseHostReservationInput {
0000000000000000000000000000000000000000;;		s.ClientToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCurrencyCode sets the CurrencyCode field's value.
0000000000000000000000000000000000000000;;	func (s *PurchaseHostReservationInput) SetCurrencyCode(v string) *PurchaseHostReservationInput {
0000000000000000000000000000000000000000;;		s.CurrencyCode = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHostIdSet sets the HostIdSet field's value.
0000000000000000000000000000000000000000;;	func (s *PurchaseHostReservationInput) SetHostIdSet(v []*string) *PurchaseHostReservationInput {
0000000000000000000000000000000000000000;;		s.HostIdSet = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetLimitPrice sets the LimitPrice field's value.
0000000000000000000000000000000000000000;;	func (s *PurchaseHostReservationInput) SetLimitPrice(v string) *PurchaseHostReservationInput {
0000000000000000000000000000000000000000;;		s.LimitPrice = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetOfferingId sets the OfferingId field's value.
0000000000000000000000000000000000000000;;	func (s *PurchaseHostReservationInput) SetOfferingId(v string) *PurchaseHostReservationInput {
0000000000000000000000000000000000000000;;		s.OfferingId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/PurchaseHostReservationResult
0000000000000000000000000000000000000000;;	type PurchaseHostReservationOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Unique, case-sensitive identifier you provide to ensure idempotency of the
0000000000000000000000000000000000000000;;		// request. For more information, see How to Ensure Idempotency (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html)
0000000000000000000000000000000000000000;;		// in the Amazon Elastic Compute Cloud User Guide
0000000000000000000000000000000000000000;;		ClientToken *string `locationName:"clientToken" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The currency in which the totalUpfrontPrice and totalHourlyPrice amounts
0000000000000000000000000000000000000000;;		// are specified. At this time, the only supported currency is USD.
0000000000000000000000000000000000000000;;		CurrencyCode *string `locationName:"currencyCode" type:"string" enum:"CurrencyCodeValues"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Describes the details of the purchase.
0000000000000000000000000000000000000000;;		Purchase []*Purchase `locationName:"purchase" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The total hourly price of the reservation calculated per hour.
0000000000000000000000000000000000000000;;		TotalHourlyPrice *string `locationName:"totalHourlyPrice" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The total amount that will be charged to your account when you purchase the
0000000000000000000000000000000000000000;;		// reservation.
0000000000000000000000000000000000000000;;		TotalUpfrontPrice *string `locationName:"totalUpfrontPrice" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s PurchaseHostReservationOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s PurchaseHostReservationOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetClientToken sets the ClientToken field's value.
0000000000000000000000000000000000000000;;	func (s *PurchaseHostReservationOutput) SetClientToken(v string) *PurchaseHostReservationOutput {
0000000000000000000000000000000000000000;;		s.ClientToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCurrencyCode sets the CurrencyCode field's value.
0000000000000000000000000000000000000000;;	func (s *PurchaseHostReservationOutput) SetCurrencyCode(v string) *PurchaseHostReservationOutput {
0000000000000000000000000000000000000000;;		s.CurrencyCode = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPurchase sets the Purchase field's value.
0000000000000000000000000000000000000000;;	func (s *PurchaseHostReservationOutput) SetPurchase(v []*Purchase) *PurchaseHostReservationOutput {
0000000000000000000000000000000000000000;;		s.Purchase = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTotalHourlyPrice sets the TotalHourlyPrice field's value.
0000000000000000000000000000000000000000;;	func (s *PurchaseHostReservationOutput) SetTotalHourlyPrice(v string) *PurchaseHostReservationOutput {
0000000000000000000000000000000000000000;;		s.TotalHourlyPrice = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTotalUpfrontPrice sets the TotalUpfrontPrice field's value.
0000000000000000000000000000000000000000;;	func (s *PurchaseHostReservationOutput) SetTotalUpfrontPrice(v string) *PurchaseHostReservationOutput {
0000000000000000000000000000000000000000;;		s.TotalUpfrontPrice = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a request to purchase Scheduled Instances.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/PurchaseRequest
0000000000000000000000000000000000000000;;	type PurchaseRequest struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of instances.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// InstanceCount is a required field
0000000000000000000000000000000000000000;;		InstanceCount *int64 `type:"integer" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The purchase token.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// PurchaseToken is a required field
0000000000000000000000000000000000000000;;		PurchaseToken *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s PurchaseRequest) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s PurchaseRequest) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *PurchaseRequest) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "PurchaseRequest"}
0000000000000000000000000000000000000000;;		if s.InstanceCount == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("InstanceCount"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.PurchaseToken == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("PurchaseToken"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceCount sets the InstanceCount field's value.
0000000000000000000000000000000000000000;;	func (s *PurchaseRequest) SetInstanceCount(v int64) *PurchaseRequest {
0000000000000000000000000000000000000000;;		s.InstanceCount = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPurchaseToken sets the PurchaseToken field's value.
0000000000000000000000000000000000000000;;	func (s *PurchaseRequest) SetPurchaseToken(v string) *PurchaseRequest {
0000000000000000000000000000000000000000;;		s.PurchaseToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for PurchaseReservedInstancesOffering.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/PurchaseReservedInstancesOfferingRequest
0000000000000000000000000000000000000000;;	type PurchaseReservedInstancesOfferingInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of Reserved Instances to purchase.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// InstanceCount is a required field
0000000000000000000000000000000000000000;;		InstanceCount *int64 `type:"integer" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Specified for Reserved Instance Marketplace offerings to limit the total
0000000000000000000000000000000000000000;;		// order and ensure that the Reserved Instances are not purchased at unexpected
0000000000000000000000000000000000000000;;		// prices.
0000000000000000000000000000000000000000;;		LimitPrice *ReservedInstanceLimitPrice `locationName:"limitPrice" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the Reserved Instance offering to purchase.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ReservedInstancesOfferingId is a required field
0000000000000000000000000000000000000000;;		ReservedInstancesOfferingId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s PurchaseReservedInstancesOfferingInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s PurchaseReservedInstancesOfferingInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *PurchaseReservedInstancesOfferingInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "PurchaseReservedInstancesOfferingInput"}
0000000000000000000000000000000000000000;;		if s.InstanceCount == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("InstanceCount"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.ReservedInstancesOfferingId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("ReservedInstancesOfferingId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *PurchaseReservedInstancesOfferingInput) SetDryRun(v bool) *PurchaseReservedInstancesOfferingInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceCount sets the InstanceCount field's value.
0000000000000000000000000000000000000000;;	func (s *PurchaseReservedInstancesOfferingInput) SetInstanceCount(v int64) *PurchaseReservedInstancesOfferingInput {
0000000000000000000000000000000000000000;;		s.InstanceCount = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetLimitPrice sets the LimitPrice field's value.
0000000000000000000000000000000000000000;;	func (s *PurchaseReservedInstancesOfferingInput) SetLimitPrice(v *ReservedInstanceLimitPrice) *PurchaseReservedInstancesOfferingInput {
0000000000000000000000000000000000000000;;		s.LimitPrice = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReservedInstancesOfferingId sets the ReservedInstancesOfferingId field's value.
0000000000000000000000000000000000000000;;	func (s *PurchaseReservedInstancesOfferingInput) SetReservedInstancesOfferingId(v string) *PurchaseReservedInstancesOfferingInput {
0000000000000000000000000000000000000000;;		s.ReservedInstancesOfferingId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of PurchaseReservedInstancesOffering.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/PurchaseReservedInstancesOfferingResult
0000000000000000000000000000000000000000;;	type PurchaseReservedInstancesOfferingOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IDs of the purchased Reserved Instances.
0000000000000000000000000000000000000000;;		ReservedInstancesId *string `locationName:"reservedInstancesId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s PurchaseReservedInstancesOfferingOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s PurchaseReservedInstancesOfferingOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReservedInstancesId sets the ReservedInstancesId field's value.
0000000000000000000000000000000000000000;;	func (s *PurchaseReservedInstancesOfferingOutput) SetReservedInstancesId(v string) *PurchaseReservedInstancesOfferingOutput {
0000000000000000000000000000000000000000;;		s.ReservedInstancesId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for PurchaseScheduledInstances.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/PurchaseScheduledInstancesRequest
0000000000000000000000000000000000000000;;	type PurchaseScheduledInstancesInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Unique, case-sensitive identifier that ensures the idempotency of the request.
0000000000000000000000000000000000000000;;		// For more information, see Ensuring Idempotency (http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
0000000000000000000000000000000000000000;;		ClientToken *string `type:"string" idempotencyToken:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more purchase requests.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// PurchaseRequests is a required field
0000000000000000000000000000000000000000;;		PurchaseRequests []*PurchaseRequest `locationName:"PurchaseRequest" locationNameList:"PurchaseRequest" min:"1" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s PurchaseScheduledInstancesInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s PurchaseScheduledInstancesInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *PurchaseScheduledInstancesInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "PurchaseScheduledInstancesInput"}
0000000000000000000000000000000000000000;;		if s.PurchaseRequests == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("PurchaseRequests"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.PurchaseRequests != nil && len(s.PurchaseRequests) < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("PurchaseRequests", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.PurchaseRequests != nil {
0000000000000000000000000000000000000000;;			for i, v := range s.PurchaseRequests {
0000000000000000000000000000000000000000;;				if v == nil {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if err := v.Validate(); err != nil {
0000000000000000000000000000000000000000;;					invalidParams.AddNested(fmt.Sprintf("%s[%v]", "PurchaseRequests", i), err.(request.ErrInvalidParams))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetClientToken sets the ClientToken field's value.
0000000000000000000000000000000000000000;;	func (s *PurchaseScheduledInstancesInput) SetClientToken(v string) *PurchaseScheduledInstancesInput {
0000000000000000000000000000000000000000;;		s.ClientToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *PurchaseScheduledInstancesInput) SetDryRun(v bool) *PurchaseScheduledInstancesInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPurchaseRequests sets the PurchaseRequests field's value.
0000000000000000000000000000000000000000;;	func (s *PurchaseScheduledInstancesInput) SetPurchaseRequests(v []*PurchaseRequest) *PurchaseScheduledInstancesInput {
0000000000000000000000000000000000000000;;		s.PurchaseRequests = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of PurchaseScheduledInstances.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/PurchaseScheduledInstancesResult
0000000000000000000000000000000000000000;;	type PurchaseScheduledInstancesOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the Scheduled Instances.
0000000000000000000000000000000000000000;;		ScheduledInstanceSet []*ScheduledInstance `locationName:"scheduledInstanceSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s PurchaseScheduledInstancesOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s PurchaseScheduledInstancesOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetScheduledInstanceSet sets the ScheduledInstanceSet field's value.
0000000000000000000000000000000000000000;;	func (s *PurchaseScheduledInstancesOutput) SetScheduledInstanceSet(v []*ScheduledInstance) *PurchaseScheduledInstancesOutput {
0000000000000000000000000000000000000000;;		s.ScheduledInstanceSet = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for RebootInstances.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/RebootInstancesRequest
0000000000000000000000000000000000000000;;	type RebootInstancesInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more instance IDs.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// InstanceIds is a required field
0000000000000000000000000000000000000000;;		InstanceIds []*string `locationName:"InstanceId" locationNameList:"InstanceId" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s RebootInstancesInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s RebootInstancesInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *RebootInstancesInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "RebootInstancesInput"}
0000000000000000000000000000000000000000;;		if s.InstanceIds == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("InstanceIds"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *RebootInstancesInput) SetDryRun(v bool) *RebootInstancesInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceIds sets the InstanceIds field's value.
0000000000000000000000000000000000000000;;	func (s *RebootInstancesInput) SetInstanceIds(v []*string) *RebootInstancesInput {
0000000000000000000000000000000000000000;;		s.InstanceIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/RebootInstancesOutput
0000000000000000000000000000000000000000;;	type RebootInstancesOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s RebootInstancesOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s RebootInstancesOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a recurring charge.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/RecurringCharge
0000000000000000000000000000000000000000;;	type RecurringCharge struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The amount of the recurring charge.
0000000000000000000000000000000000000000;;		Amount *float64 `locationName:"amount" type:"double"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The frequency of the recurring charge.
0000000000000000000000000000000000000000;;		Frequency *string `locationName:"frequency" type:"string" enum:"RecurringChargeFrequency"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s RecurringCharge) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s RecurringCharge) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAmount sets the Amount field's value.
0000000000000000000000000000000000000000;;	func (s *RecurringCharge) SetAmount(v float64) *RecurringCharge {
0000000000000000000000000000000000000000;;		s.Amount = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFrequency sets the Frequency field's value.
0000000000000000000000000000000000000000;;	func (s *RecurringCharge) SetFrequency(v string) *RecurringCharge {
0000000000000000000000000000000000000000;;		s.Frequency = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a region.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/Region
0000000000000000000000000000000000000000;;	type Region struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The region service endpoint.
0000000000000000000000000000000000000000;;		Endpoint *string `locationName:"regionEndpoint" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the region.
0000000000000000000000000000000000000000;;		RegionName *string `locationName:"regionName" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s Region) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s Region) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEndpoint sets the Endpoint field's value.
0000000000000000000000000000000000000000;;	func (s *Region) SetEndpoint(v string) *Region {
0000000000000000000000000000000000000000;;		s.Endpoint = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRegionName sets the RegionName field's value.
0000000000000000000000000000000000000000;;	func (s *Region) SetRegionName(v string) *Region {
0000000000000000000000000000000000000000;;		s.RegionName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for RegisterImage.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/RegisterImageRequest
0000000000000000000000000000000000000000;;	type RegisterImageInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The architecture of the AMI.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: For Amazon EBS-backed AMIs, i386. For instance store-backed AMIs,
0000000000000000000000000000000000000000;;		// the architecture specified in the manifest file.
0000000000000000000000000000000000000000;;		Architecture *string `locationName:"architecture" type:"string" enum:"ArchitectureValues"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more block device mapping entries.
0000000000000000000000000000000000000000;;		BlockDeviceMappings []*BlockDeviceMapping `locationName:"BlockDeviceMapping" locationNameList:"BlockDeviceMapping" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A description for your AMI.
0000000000000000000000000000000000000000;;		Description *string `locationName:"description" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Set to true to enable enhanced networking with ENA for the AMI and any instances
0000000000000000000000000000000000000000;;		// that you launch from the AMI.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// This option is supported only for HVM AMIs. Specifying this option with a
0000000000000000000000000000000000000000;;		// PV AMI can make instances launched from the AMI unreachable.
0000000000000000000000000000000000000000;;		EnaSupport *bool `locationName:"enaSupport" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The full path to your AMI manifest in Amazon S3 storage.
0000000000000000000000000000000000000000;;		ImageLocation *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the kernel.
0000000000000000000000000000000000000000;;		KernelId *string `locationName:"kernelId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A name for your AMI.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Constraints: 3-128 alphanumeric characters, parentheses (()), square brackets
0000000000000000000000000000000000000000;;		// ([]), spaces ( ), periods (.), slashes (/), dashes (-), single quotes ('),
0000000000000000000000000000000000000000;;		// at-signs (@), or underscores(_)
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Name is a required field
0000000000000000000000000000000000000000;;		Name *string `locationName:"name" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the RAM disk.
0000000000000000000000000000000000000000;;		RamdiskId *string `locationName:"ramdiskId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the root device (for example, /dev/sda1, or /dev/xvda).
0000000000000000000000000000000000000000;;		RootDeviceName *string `locationName:"rootDeviceName" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Set to simple to enable enhanced networking with the Intel 82599 Virtual
0000000000000000000000000000000000000000;;		// Function interface for the AMI and any instances that you launch from the
0000000000000000000000000000000000000000;;		// AMI.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// There is no way to disable sriovNetSupport at this time.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// This option is supported only for HVM AMIs. Specifying this option with a
0000000000000000000000000000000000000000;;		// PV AMI can make instances launched from the AMI unreachable.
0000000000000000000000000000000000000000;;		SriovNetSupport *string `locationName:"sriovNetSupport" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The type of virtualization.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: paravirtual
0000000000000000000000000000000000000000;;		VirtualizationType *string `locationName:"virtualizationType" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s RegisterImageInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s RegisterImageInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *RegisterImageInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "RegisterImageInput"}
0000000000000000000000000000000000000000;;		if s.Name == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Name"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetArchitecture sets the Architecture field's value.
0000000000000000000000000000000000000000;;	func (s *RegisterImageInput) SetArchitecture(v string) *RegisterImageInput {
0000000000000000000000000000000000000000;;		s.Architecture = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetBlockDeviceMappings sets the BlockDeviceMappings field's value.
0000000000000000000000000000000000000000;;	func (s *RegisterImageInput) SetBlockDeviceMappings(v []*BlockDeviceMapping) *RegisterImageInput {
0000000000000000000000000000000000000000;;		s.BlockDeviceMappings = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDescription sets the Description field's value.
0000000000000000000000000000000000000000;;	func (s *RegisterImageInput) SetDescription(v string) *RegisterImageInput {
0000000000000000000000000000000000000000;;		s.Description = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *RegisterImageInput) SetDryRun(v bool) *RegisterImageInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEnaSupport sets the EnaSupport field's value.
0000000000000000000000000000000000000000;;	func (s *RegisterImageInput) SetEnaSupport(v bool) *RegisterImageInput {
0000000000000000000000000000000000000000;;		s.EnaSupport = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetImageLocation sets the ImageLocation field's value.
0000000000000000000000000000000000000000;;	func (s *RegisterImageInput) SetImageLocation(v string) *RegisterImageInput {
0000000000000000000000000000000000000000;;		s.ImageLocation = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetKernelId sets the KernelId field's value.
0000000000000000000000000000000000000000;;	func (s *RegisterImageInput) SetKernelId(v string) *RegisterImageInput {
0000000000000000000000000000000000000000;;		s.KernelId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetName sets the Name field's value.
0000000000000000000000000000000000000000;;	func (s *RegisterImageInput) SetName(v string) *RegisterImageInput {
0000000000000000000000000000000000000000;;		s.Name = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRamdiskId sets the RamdiskId field's value.
0000000000000000000000000000000000000000;;	func (s *RegisterImageInput) SetRamdiskId(v string) *RegisterImageInput {
0000000000000000000000000000000000000000;;		s.RamdiskId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRootDeviceName sets the RootDeviceName field's value.
0000000000000000000000000000000000000000;;	func (s *RegisterImageInput) SetRootDeviceName(v string) *RegisterImageInput {
0000000000000000000000000000000000000000;;		s.RootDeviceName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSriovNetSupport sets the SriovNetSupport field's value.
0000000000000000000000000000000000000000;;	func (s *RegisterImageInput) SetSriovNetSupport(v string) *RegisterImageInput {
0000000000000000000000000000000000000000;;		s.SriovNetSupport = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVirtualizationType sets the VirtualizationType field's value.
0000000000000000000000000000000000000000;;	func (s *RegisterImageInput) SetVirtualizationType(v string) *RegisterImageInput {
0000000000000000000000000000000000000000;;		s.VirtualizationType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of RegisterImage.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/RegisterImageResult
0000000000000000000000000000000000000000;;	type RegisterImageOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the newly registered AMI.
0000000000000000000000000000000000000000;;		ImageId *string `locationName:"imageId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s RegisterImageOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s RegisterImageOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetImageId sets the ImageId field's value.
0000000000000000000000000000000000000000;;	func (s *RegisterImageOutput) SetImageId(v string) *RegisterImageOutput {
0000000000000000000000000000000000000000;;		s.ImageId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for RejectVpcPeeringConnection.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/RejectVpcPeeringConnectionRequest
0000000000000000000000000000000000000000;;	type RejectVpcPeeringConnectionInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC peering connection.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// VpcPeeringConnectionId is a required field
0000000000000000000000000000000000000000;;		VpcPeeringConnectionId *string `locationName:"vpcPeeringConnectionId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s RejectVpcPeeringConnectionInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s RejectVpcPeeringConnectionInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *RejectVpcPeeringConnectionInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "RejectVpcPeeringConnectionInput"}
0000000000000000000000000000000000000000;;		if s.VpcPeeringConnectionId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("VpcPeeringConnectionId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *RejectVpcPeeringConnectionInput) SetDryRun(v bool) *RejectVpcPeeringConnectionInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcPeeringConnectionId sets the VpcPeeringConnectionId field's value.
0000000000000000000000000000000000000000;;	func (s *RejectVpcPeeringConnectionInput) SetVpcPeeringConnectionId(v string) *RejectVpcPeeringConnectionInput {
0000000000000000000000000000000000000000;;		s.VpcPeeringConnectionId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of RejectVpcPeeringConnection.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/RejectVpcPeeringConnectionResult
0000000000000000000000000000000000000000;;	type RejectVpcPeeringConnectionOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Returns true if the request succeeds; otherwise, it returns an error.
0000000000000000000000000000000000000000;;		Return *bool `locationName:"return" type:"boolean"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s RejectVpcPeeringConnectionOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s RejectVpcPeeringConnectionOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReturn sets the Return field's value.
0000000000000000000000000000000000000000;;	func (s *RejectVpcPeeringConnectionOutput) SetReturn(v bool) *RejectVpcPeeringConnectionOutput {
0000000000000000000000000000000000000000;;		s.Return = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for ReleaseAddress.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ReleaseAddressRequest
0000000000000000000000000000000000000000;;	type ReleaseAddressInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// [EC2-VPC] The allocation ID. Required for EC2-VPC.
0000000000000000000000000000000000000000;;		AllocationId *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// [EC2-Classic] The Elastic IP address. Required for EC2-Classic.
0000000000000000000000000000000000000000;;		PublicIp *string `type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ReleaseAddressInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ReleaseAddressInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAllocationId sets the AllocationId field's value.
0000000000000000000000000000000000000000;;	func (s *ReleaseAddressInput) SetAllocationId(v string) *ReleaseAddressInput {
0000000000000000000000000000000000000000;;		s.AllocationId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *ReleaseAddressInput) SetDryRun(v bool) *ReleaseAddressInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPublicIp sets the PublicIp field's value.
0000000000000000000000000000000000000000;;	func (s *ReleaseAddressInput) SetPublicIp(v string) *ReleaseAddressInput {
0000000000000000000000000000000000000000;;		s.PublicIp = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ReleaseAddressOutput
0000000000000000000000000000000000000000;;	type ReleaseAddressOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ReleaseAddressOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ReleaseAddressOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for ReleaseHosts.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ReleaseHostsRequest
0000000000000000000000000000000000000000;;	type ReleaseHostsInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IDs of the Dedicated Hosts you want to release.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// HostIds is a required field
0000000000000000000000000000000000000000;;		HostIds []*string `locationName:"hostId" locationNameList:"item" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ReleaseHostsInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ReleaseHostsInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *ReleaseHostsInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "ReleaseHostsInput"}
0000000000000000000000000000000000000000;;		if s.HostIds == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("HostIds"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHostIds sets the HostIds field's value.
0000000000000000000000000000000000000000;;	func (s *ReleaseHostsInput) SetHostIds(v []*string) *ReleaseHostsInput {
0000000000000000000000000000000000000000;;		s.HostIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of ReleaseHosts.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ReleaseHostsResult
0000000000000000000000000000000000000000;;	type ReleaseHostsOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IDs of the Dedicated Hosts that were successfully released.
0000000000000000000000000000000000000000;;		Successful []*string `locationName:"successful" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IDs of the Dedicated Hosts that could not be released, including an error
0000000000000000000000000000000000000000;;		// message.
0000000000000000000000000000000000000000;;		Unsuccessful []*UnsuccessfulItem `locationName:"unsuccessful" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ReleaseHostsOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ReleaseHostsOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSuccessful sets the Successful field's value.
0000000000000000000000000000000000000000;;	func (s *ReleaseHostsOutput) SetSuccessful(v []*string) *ReleaseHostsOutput {
0000000000000000000000000000000000000000;;		s.Successful = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUnsuccessful sets the Unsuccessful field's value.
0000000000000000000000000000000000000000;;	func (s *ReleaseHostsOutput) SetUnsuccessful(v []*UnsuccessfulItem) *ReleaseHostsOutput {
0000000000000000000000000000000000000000;;		s.Unsuccessful = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for ReplaceNetworkAclAssociation.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ReplaceNetworkAclAssociationRequest
0000000000000000000000000000000000000000;;	type ReplaceNetworkAclAssociationInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the current association between the original network ACL and the
0000000000000000000000000000000000000000;;		// subnet.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// AssociationId is a required field
0000000000000000000000000000000000000000;;		AssociationId *string `locationName:"associationId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the new network ACL to associate with the subnet.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// NetworkAclId is a required field
0000000000000000000000000000000000000000;;		NetworkAclId *string `locationName:"networkAclId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ReplaceNetworkAclAssociationInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ReplaceNetworkAclAssociationInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *ReplaceNetworkAclAssociationInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "ReplaceNetworkAclAssociationInput"}
0000000000000000000000000000000000000000;;		if s.AssociationId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("AssociationId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.NetworkAclId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("NetworkAclId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAssociationId sets the AssociationId field's value.
0000000000000000000000000000000000000000;;	func (s *ReplaceNetworkAclAssociationInput) SetAssociationId(v string) *ReplaceNetworkAclAssociationInput {
0000000000000000000000000000000000000000;;		s.AssociationId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *ReplaceNetworkAclAssociationInput) SetDryRun(v bool) *ReplaceNetworkAclAssociationInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNetworkAclId sets the NetworkAclId field's value.
0000000000000000000000000000000000000000;;	func (s *ReplaceNetworkAclAssociationInput) SetNetworkAclId(v string) *ReplaceNetworkAclAssociationInput {
0000000000000000000000000000000000000000;;		s.NetworkAclId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of ReplaceNetworkAclAssociation.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ReplaceNetworkAclAssociationResult
0000000000000000000000000000000000000000;;	type ReplaceNetworkAclAssociationOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the new association.
0000000000000000000000000000000000000000;;		NewAssociationId *string `locationName:"newAssociationId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ReplaceNetworkAclAssociationOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ReplaceNetworkAclAssociationOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNewAssociationId sets the NewAssociationId field's value.
0000000000000000000000000000000000000000;;	func (s *ReplaceNetworkAclAssociationOutput) SetNewAssociationId(v string) *ReplaceNetworkAclAssociationOutput {
0000000000000000000000000000000000000000;;		s.NewAssociationId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for ReplaceNetworkAclEntry.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ReplaceNetworkAclEntryRequest
0000000000000000000000000000000000000000;;	type ReplaceNetworkAclEntryInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IPv4 network range to allow or deny, in CIDR notation (for example 172.16.0.0/24).
0000000000000000000000000000000000000000;;		CidrBlock *string `locationName:"cidrBlock" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether to replace the egress rule.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: If no value is specified, we replace the ingress rule.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Egress is a required field
0000000000000000000000000000000000000000;;		Egress *bool `locationName:"egress" type:"boolean" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ICMP protocol: The ICMP or ICMPv6 type and code. Required if specifying the
0000000000000000000000000000000000000000;;		// ICMP (1) protocol, or protocol 58 (ICMPv6) with an IPv6 CIDR block.
0000000000000000000000000000000000000000;;		IcmpTypeCode *IcmpTypeCode `locationName:"Icmp" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IPv6 network range to allow or deny, in CIDR notation (for example 2001:bd8:1234:1a00::/64).
0000000000000000000000000000000000000000;;		Ipv6CidrBlock *string `locationName:"ipv6CidrBlock" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the ACL.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// NetworkAclId is a required field
0000000000000000000000000000000000000000;;		NetworkAclId *string `locationName:"networkAclId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TCP or UDP protocols: The range of ports the rule applies to. Required if
0000000000000000000000000000000000000000;;		// specifying TCP (6) or UDP (17) for the protocol.
0000000000000000000000000000000000000000;;		PortRange *PortRange `locationName:"portRange" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IP protocol. You can specify all or -1 to mean all protocols. If you
0000000000000000000000000000000000000000;;		// specify all, -1, or a protocol number other than tcp, udp, or icmp, traffic
0000000000000000000000000000000000000000;;		// on all ports is allowed, regardless of any ports or ICMP types or codes you
0000000000000000000000000000000000000000;;		// specify. If you specify protocol 58 (ICMPv6) and specify an IPv4 CIDR block,
0000000000000000000000000000000000000000;;		// traffic for all ICMP types and codes allowed, regardless of any that you
0000000000000000000000000000000000000000;;		// specify. If you specify protocol 58 (ICMPv6) and specify an IPv6 CIDR block,
0000000000000000000000000000000000000000;;		// you must specify an ICMP type and code.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Protocol is a required field
0000000000000000000000000000000000000000;;		Protocol *string `locationName:"protocol" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether to allow or deny the traffic that matches the rule.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// RuleAction is a required field
0000000000000000000000000000000000000000;;		RuleAction *string `locationName:"ruleAction" type:"string" required:"true" enum:"RuleAction"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The rule number of the entry to replace.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// RuleNumber is a required field
0000000000000000000000000000000000000000;;		RuleNumber *int64 `locationName:"ruleNumber" type:"integer" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ReplaceNetworkAclEntryInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ReplaceNetworkAclEntryInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *ReplaceNetworkAclEntryInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "ReplaceNetworkAclEntryInput"}
0000000000000000000000000000000000000000;;		if s.Egress == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Egress"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.NetworkAclId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("NetworkAclId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Protocol == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Protocol"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.RuleAction == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("RuleAction"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.RuleNumber == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("RuleNumber"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCidrBlock sets the CidrBlock field's value.
0000000000000000000000000000000000000000;;	func (s *ReplaceNetworkAclEntryInput) SetCidrBlock(v string) *ReplaceNetworkAclEntryInput {
0000000000000000000000000000000000000000;;		s.CidrBlock = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *ReplaceNetworkAclEntryInput) SetDryRun(v bool) *ReplaceNetworkAclEntryInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEgress sets the Egress field's value.
0000000000000000000000000000000000000000;;	func (s *ReplaceNetworkAclEntryInput) SetEgress(v bool) *ReplaceNetworkAclEntryInput {
0000000000000000000000000000000000000000;;		s.Egress = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIcmpTypeCode sets the IcmpTypeCode field's value.
0000000000000000000000000000000000000000;;	func (s *ReplaceNetworkAclEntryInput) SetIcmpTypeCode(v *IcmpTypeCode) *ReplaceNetworkAclEntryInput {
0000000000000000000000000000000000000000;;		s.IcmpTypeCode = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpv6CidrBlock sets the Ipv6CidrBlock field's value.
0000000000000000000000000000000000000000;;	func (s *ReplaceNetworkAclEntryInput) SetIpv6CidrBlock(v string) *ReplaceNetworkAclEntryInput {
0000000000000000000000000000000000000000;;		s.Ipv6CidrBlock = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNetworkAclId sets the NetworkAclId field's value.
0000000000000000000000000000000000000000;;	func (s *ReplaceNetworkAclEntryInput) SetNetworkAclId(v string) *ReplaceNetworkAclEntryInput {
0000000000000000000000000000000000000000;;		s.NetworkAclId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPortRange sets the PortRange field's value.
0000000000000000000000000000000000000000;;	func (s *ReplaceNetworkAclEntryInput) SetPortRange(v *PortRange) *ReplaceNetworkAclEntryInput {
0000000000000000000000000000000000000000;;		s.PortRange = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetProtocol sets the Protocol field's value.
0000000000000000000000000000000000000000;;	func (s *ReplaceNetworkAclEntryInput) SetProtocol(v string) *ReplaceNetworkAclEntryInput {
0000000000000000000000000000000000000000;;		s.Protocol = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRuleAction sets the RuleAction field's value.
0000000000000000000000000000000000000000;;	func (s *ReplaceNetworkAclEntryInput) SetRuleAction(v string) *ReplaceNetworkAclEntryInput {
0000000000000000000000000000000000000000;;		s.RuleAction = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRuleNumber sets the RuleNumber field's value.
0000000000000000000000000000000000000000;;	func (s *ReplaceNetworkAclEntryInput) SetRuleNumber(v int64) *ReplaceNetworkAclEntryInput {
0000000000000000000000000000000000000000;;		s.RuleNumber = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ReplaceNetworkAclEntryOutput
0000000000000000000000000000000000000000;;	type ReplaceNetworkAclEntryOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ReplaceNetworkAclEntryOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ReplaceNetworkAclEntryOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for ReplaceRoute.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ReplaceRouteRequest
0000000000000000000000000000000000000000;;	type ReplaceRouteInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IPv4 CIDR address block used for the destination match. The value you
0000000000000000000000000000000000000000;;		// provide must match the CIDR of an existing route in the table.
0000000000000000000000000000000000000000;;		DestinationCidrBlock *string `locationName:"destinationCidrBlock" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IPv6 CIDR address block used for the destination match. The value you
0000000000000000000000000000000000000000;;		// provide must match the CIDR of an existing route in the table.
0000000000000000000000000000000000000000;;		DestinationIpv6CidrBlock *string `locationName:"destinationIpv6CidrBlock" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// [IPv6 traffic only] The ID of an egress-only Internet gateway.
0000000000000000000000000000000000000000;;		EgressOnlyInternetGatewayId *string `locationName:"egressOnlyInternetGatewayId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of an Internet gateway or virtual private gateway.
0000000000000000000000000000000000000000;;		GatewayId *string `locationName:"gatewayId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of a NAT instance in your VPC.
0000000000000000000000000000000000000000;;		InstanceId *string `locationName:"instanceId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// [IPv4 traffic only] The ID of a NAT gateway.
0000000000000000000000000000000000000000;;		NatGatewayId *string `locationName:"natGatewayId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of a network interface.
0000000000000000000000000000000000000000;;		NetworkInterfaceId *string `locationName:"networkInterfaceId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the route table.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// RouteTableId is a required field
0000000000000000000000000000000000000000;;		RouteTableId *string `locationName:"routeTableId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of a VPC peering connection.
0000000000000000000000000000000000000000;;		VpcPeeringConnectionId *string `locationName:"vpcPeeringConnectionId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ReplaceRouteInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ReplaceRouteInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *ReplaceRouteInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "ReplaceRouteInput"}
0000000000000000000000000000000000000000;;		if s.RouteTableId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("RouteTableId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDestinationCidrBlock sets the DestinationCidrBlock field's value.
0000000000000000000000000000000000000000;;	func (s *ReplaceRouteInput) SetDestinationCidrBlock(v string) *ReplaceRouteInput {
0000000000000000000000000000000000000000;;		s.DestinationCidrBlock = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDestinationIpv6CidrBlock sets the DestinationIpv6CidrBlock field's value.
0000000000000000000000000000000000000000;;	func (s *ReplaceRouteInput) SetDestinationIpv6CidrBlock(v string) *ReplaceRouteInput {
0000000000000000000000000000000000000000;;		s.DestinationIpv6CidrBlock = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *ReplaceRouteInput) SetDryRun(v bool) *ReplaceRouteInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEgressOnlyInternetGatewayId sets the EgressOnlyInternetGatewayId field's value.
0000000000000000000000000000000000000000;;	func (s *ReplaceRouteInput) SetEgressOnlyInternetGatewayId(v string) *ReplaceRouteInput {
0000000000000000000000000000000000000000;;		s.EgressOnlyInternetGatewayId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGatewayId sets the GatewayId field's value.
0000000000000000000000000000000000000000;;	func (s *ReplaceRouteInput) SetGatewayId(v string) *ReplaceRouteInput {
0000000000000000000000000000000000000000;;		s.GatewayId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceId sets the InstanceId field's value.
0000000000000000000000000000000000000000;;	func (s *ReplaceRouteInput) SetInstanceId(v string) *ReplaceRouteInput {
0000000000000000000000000000000000000000;;		s.InstanceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNatGatewayId sets the NatGatewayId field's value.
0000000000000000000000000000000000000000;;	func (s *ReplaceRouteInput) SetNatGatewayId(v string) *ReplaceRouteInput {
0000000000000000000000000000000000000000;;		s.NatGatewayId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNetworkInterfaceId sets the NetworkInterfaceId field's value.
0000000000000000000000000000000000000000;;	func (s *ReplaceRouteInput) SetNetworkInterfaceId(v string) *ReplaceRouteInput {
0000000000000000000000000000000000000000;;		s.NetworkInterfaceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRouteTableId sets the RouteTableId field's value.
0000000000000000000000000000000000000000;;	func (s *ReplaceRouteInput) SetRouteTableId(v string) *ReplaceRouteInput {
0000000000000000000000000000000000000000;;		s.RouteTableId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcPeeringConnectionId sets the VpcPeeringConnectionId field's value.
0000000000000000000000000000000000000000;;	func (s *ReplaceRouteInput) SetVpcPeeringConnectionId(v string) *ReplaceRouteInput {
0000000000000000000000000000000000000000;;		s.VpcPeeringConnectionId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ReplaceRouteOutput
0000000000000000000000000000000000000000;;	type ReplaceRouteOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ReplaceRouteOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ReplaceRouteOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for ReplaceRouteTableAssociation.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ReplaceRouteTableAssociationRequest
0000000000000000000000000000000000000000;;	type ReplaceRouteTableAssociationInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The association ID.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// AssociationId is a required field
0000000000000000000000000000000000000000;;		AssociationId *string `locationName:"associationId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the new route table to associate with the subnet.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// RouteTableId is a required field
0000000000000000000000000000000000000000;;		RouteTableId *string `locationName:"routeTableId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ReplaceRouteTableAssociationInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ReplaceRouteTableAssociationInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *ReplaceRouteTableAssociationInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "ReplaceRouteTableAssociationInput"}
0000000000000000000000000000000000000000;;		if s.AssociationId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("AssociationId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.RouteTableId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("RouteTableId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAssociationId sets the AssociationId field's value.
0000000000000000000000000000000000000000;;	func (s *ReplaceRouteTableAssociationInput) SetAssociationId(v string) *ReplaceRouteTableAssociationInput {
0000000000000000000000000000000000000000;;		s.AssociationId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *ReplaceRouteTableAssociationInput) SetDryRun(v bool) *ReplaceRouteTableAssociationInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRouteTableId sets the RouteTableId field's value.
0000000000000000000000000000000000000000;;	func (s *ReplaceRouteTableAssociationInput) SetRouteTableId(v string) *ReplaceRouteTableAssociationInput {
0000000000000000000000000000000000000000;;		s.RouteTableId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of ReplaceRouteTableAssociation.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ReplaceRouteTableAssociationResult
0000000000000000000000000000000000000000;;	type ReplaceRouteTableAssociationOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the new association.
0000000000000000000000000000000000000000;;		NewAssociationId *string `locationName:"newAssociationId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ReplaceRouteTableAssociationOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ReplaceRouteTableAssociationOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNewAssociationId sets the NewAssociationId field's value.
0000000000000000000000000000000000000000;;	func (s *ReplaceRouteTableAssociationOutput) SetNewAssociationId(v string) *ReplaceRouteTableAssociationOutput {
0000000000000000000000000000000000000000;;		s.NewAssociationId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for ReportInstanceStatus.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ReportInstanceStatusRequest
0000000000000000000000000000000000000000;;	type ReportInstanceStatusInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Descriptive text about the health state of your instance.
0000000000000000000000000000000000000000;;		Description *string `locationName:"description" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The time at which the reported instance health state ended.
0000000000000000000000000000000000000000;;		EndTime *time.Time `locationName:"endTime" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more instances.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Instances is a required field
0000000000000000000000000000000000000000;;		Instances []*string `locationName:"instanceId" locationNameList:"InstanceId" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more reason codes that describes the health state of your instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * instance-stuck-in-state: My instance is stuck in a state.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * unresponsive: My instance is unresponsive.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * not-accepting-credentials: My instance is not accepting my credentials.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * password-not-available: A password is not available for my instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * performance-network: My instance is experiencing performance problems
0000000000000000000000000000000000000000;;		//    which I believe are network related.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * performance-instance-store: My instance is experiencing performance
0000000000000000000000000000000000000000;;		//    problems which I believe are related to the instance stores.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * performance-ebs-volume: My instance is experiencing performance problems
0000000000000000000000000000000000000000;;		//    which I believe are related to an EBS volume.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * performance-other: My instance is experiencing performance problems.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * other: [explain using the description parameter]
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ReasonCodes is a required field
0000000000000000000000000000000000000000;;		ReasonCodes []*string `locationName:"reasonCode" locationNameList:"item" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The time at which the reported instance health state began.
0000000000000000000000000000000000000000;;		StartTime *time.Time `locationName:"startTime" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The status of all instances listed.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Status is a required field
0000000000000000000000000000000000000000;;		Status *string `locationName:"status" type:"string" required:"true" enum:"ReportStatusType"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ReportInstanceStatusInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ReportInstanceStatusInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *ReportInstanceStatusInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "ReportInstanceStatusInput"}
0000000000000000000000000000000000000000;;		if s.Instances == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Instances"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.ReasonCodes == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("ReasonCodes"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Status == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Status"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDescription sets the Description field's value.
0000000000000000000000000000000000000000;;	func (s *ReportInstanceStatusInput) SetDescription(v string) *ReportInstanceStatusInput {
0000000000000000000000000000000000000000;;		s.Description = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *ReportInstanceStatusInput) SetDryRun(v bool) *ReportInstanceStatusInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEndTime sets the EndTime field's value.
0000000000000000000000000000000000000000;;	func (s *ReportInstanceStatusInput) SetEndTime(v time.Time) *ReportInstanceStatusInput {
0000000000000000000000000000000000000000;;		s.EndTime = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstances sets the Instances field's value.
0000000000000000000000000000000000000000;;	func (s *ReportInstanceStatusInput) SetInstances(v []*string) *ReportInstanceStatusInput {
0000000000000000000000000000000000000000;;		s.Instances = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReasonCodes sets the ReasonCodes field's value.
0000000000000000000000000000000000000000;;	func (s *ReportInstanceStatusInput) SetReasonCodes(v []*string) *ReportInstanceStatusInput {
0000000000000000000000000000000000000000;;		s.ReasonCodes = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStartTime sets the StartTime field's value.
0000000000000000000000000000000000000000;;	func (s *ReportInstanceStatusInput) SetStartTime(v time.Time) *ReportInstanceStatusInput {
0000000000000000000000000000000000000000;;		s.StartTime = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStatus sets the Status field's value.
0000000000000000000000000000000000000000;;	func (s *ReportInstanceStatusInput) SetStatus(v string) *ReportInstanceStatusInput {
0000000000000000000000000000000000000000;;		s.Status = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ReportInstanceStatusOutput
0000000000000000000000000000000000000000;;	type ReportInstanceStatusOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ReportInstanceStatusOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ReportInstanceStatusOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for RequestSpotFleet.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/RequestSpotFleetRequest
0000000000000000000000000000000000000000;;	type RequestSpotFleetInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The configuration for the Spot fleet request.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// SpotFleetRequestConfig is a required field
0000000000000000000000000000000000000000;;		SpotFleetRequestConfig *SpotFleetRequestConfigData `locationName:"spotFleetRequestConfig" type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s RequestSpotFleetInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s RequestSpotFleetInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *RequestSpotFleetInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "RequestSpotFleetInput"}
0000000000000000000000000000000000000000;;		if s.SpotFleetRequestConfig == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("SpotFleetRequestConfig"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.SpotFleetRequestConfig != nil {
0000000000000000000000000000000000000000;;			if err := s.SpotFleetRequestConfig.Validate(); err != nil {
0000000000000000000000000000000000000000;;				invalidParams.AddNested("SpotFleetRequestConfig", err.(request.ErrInvalidParams))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *RequestSpotFleetInput) SetDryRun(v bool) *RequestSpotFleetInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSpotFleetRequestConfig sets the SpotFleetRequestConfig field's value.
0000000000000000000000000000000000000000;;	func (s *RequestSpotFleetInput) SetSpotFleetRequestConfig(v *SpotFleetRequestConfigData) *RequestSpotFleetInput {
0000000000000000000000000000000000000000;;		s.SpotFleetRequestConfig = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of RequestSpotFleet.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/RequestSpotFleetResponse
0000000000000000000000000000000000000000;;	type RequestSpotFleetOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the Spot fleet request.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// SpotFleetRequestId is a required field
0000000000000000000000000000000000000000;;		SpotFleetRequestId *string `locationName:"spotFleetRequestId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s RequestSpotFleetOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s RequestSpotFleetOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSpotFleetRequestId sets the SpotFleetRequestId field's value.
0000000000000000000000000000000000000000;;	func (s *RequestSpotFleetOutput) SetSpotFleetRequestId(v string) *RequestSpotFleetOutput {
0000000000000000000000000000000000000000;;		s.SpotFleetRequestId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for RequestSpotInstances.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/RequestSpotInstancesRequest
0000000000000000000000000000000000000000;;	type RequestSpotInstancesInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The user-specified name for a logical grouping of bids.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// When you specify an Availability Zone group in a Spot Instance request, all
0000000000000000000000000000000000000000;;		// Spot instances in the request are launched in the same Availability Zone.
0000000000000000000000000000000000000000;;		// Instance proximity is maintained with this parameter, but the choice of Availability
0000000000000000000000000000000000000000;;		// Zone is not. The group applies only to bids for Spot Instances of the same
0000000000000000000000000000000000000000;;		// instance type. Any additional Spot instance requests that are specified with
0000000000000000000000000000000000000000;;		// the same Availability Zone group name are launched in that same Availability
0000000000000000000000000000000000000000;;		// Zone, as long as at least one instance from the group is still active.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If there is no active instance running in the Availability Zone group that
0000000000000000000000000000000000000000;;		// you specify for a new Spot instance request (all instances are terminated,
0000000000000000000000000000000000000000;;		// the bid is expired, or the bid falls below current market), then Amazon EC2
0000000000000000000000000000000000000000;;		// launches the instance in any Availability Zone where the constraint can be
0000000000000000000000000000000000000000;;		// met. Consequently, the subsequent set of Spot instances could be placed in
0000000000000000000000000000000000000000;;		// a different zone from the original request, even if you specified the same
0000000000000000000000000000000000000000;;		// Availability Zone group.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: Instances are launched in any available Availability Zone.
0000000000000000000000000000000000000000;;		AvailabilityZoneGroup *string `locationName:"availabilityZoneGroup" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The required duration for the Spot instances (also known as Spot blocks),
0000000000000000000000000000000000000000;;		// in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300,
0000000000000000000000000000000000000000;;		// or 360).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// The duration period starts as soon as your Spot instance receives its instance
0000000000000000000000000000000000000000;;		// ID. At the end of the duration period, Amazon EC2 marks the Spot instance
0000000000000000000000000000000000000000;;		// for termination and provides a Spot instance termination notice, which gives
0000000000000000000000000000000000000000;;		// the instance a two-minute warning before it terminates.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Note that you can't specify an Availability Zone group or a launch group
0000000000000000000000000000000000000000;;		// if you specify a duration.
0000000000000000000000000000000000000000;;		BlockDurationMinutes *int64 `locationName:"blockDurationMinutes" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Unique, case-sensitive identifier that you provide to ensure the idempotency
0000000000000000000000000000000000000000;;		// of the request. For more information, see How to Ensure Idempotency (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html)
0000000000000000000000000000000000000000;;		// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;		ClientToken *string `locationName:"clientToken" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum number of Spot instances to launch.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: 1
0000000000000000000000000000000000000000;;		InstanceCount *int64 `locationName:"instanceCount" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The instance launch group. Launch groups are Spot instances that launch together
0000000000000000000000000000000000000000;;		// and terminate together.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: Instances are launched and terminated individually
0000000000000000000000000000000000000000;;		LaunchGroup *string `locationName:"launchGroup" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Describes the launch specification for an instance.
0000000000000000000000000000000000000000;;		LaunchSpecification *RequestSpotLaunchSpecification `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum hourly price (bid) for any Spot instance launched to fulfill
0000000000000000000000000000000000000000;;		// the request.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// SpotPrice is a required field
0000000000000000000000000000000000000000;;		SpotPrice *string `locationName:"spotPrice" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Spot instance request type.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: one-time
0000000000000000000000000000000000000000;;		Type *string `locationName:"type" type:"string" enum:"SpotInstanceType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The start date of the request. If this is a one-time request, the request
0000000000000000000000000000000000000000;;		// becomes active at this date and time and remains active until all instances
0000000000000000000000000000000000000000;;		// launch, the request expires, or the request is canceled. If the request is
0000000000000000000000000000000000000000;;		// persistent, the request becomes active at this date and time and remains
0000000000000000000000000000000000000000;;		// active until it expires or is canceled.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: The request is effective indefinitely.
0000000000000000000000000000000000000000;;		ValidFrom *time.Time `locationName:"validFrom" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The end date of the request. If this is a one-time request, the request remains
0000000000000000000000000000000000000000;;		// active until all instances launch, the request is canceled, or this date
0000000000000000000000000000000000000000;;		// is reached. If the request is persistent, it remains active until it is canceled
0000000000000000000000000000000000000000;;		// or this date and time is reached.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: The request is effective indefinitely.
0000000000000000000000000000000000000000;;		ValidUntil *time.Time `locationName:"validUntil" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s RequestSpotInstancesInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s RequestSpotInstancesInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *RequestSpotInstancesInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "RequestSpotInstancesInput"}
0000000000000000000000000000000000000000;;		if s.SpotPrice == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("SpotPrice"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.LaunchSpecification != nil {
0000000000000000000000000000000000000000;;			if err := s.LaunchSpecification.Validate(); err != nil {
0000000000000000000000000000000000000000;;				invalidParams.AddNested("LaunchSpecification", err.(request.ErrInvalidParams))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAvailabilityZoneGroup sets the AvailabilityZoneGroup field's value.
0000000000000000000000000000000000000000;;	func (s *RequestSpotInstancesInput) SetAvailabilityZoneGroup(v string) *RequestSpotInstancesInput {
0000000000000000000000000000000000000000;;		s.AvailabilityZoneGroup = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetBlockDurationMinutes sets the BlockDurationMinutes field's value.
0000000000000000000000000000000000000000;;	func (s *RequestSpotInstancesInput) SetBlockDurationMinutes(v int64) *RequestSpotInstancesInput {
0000000000000000000000000000000000000000;;		s.BlockDurationMinutes = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetClientToken sets the ClientToken field's value.
0000000000000000000000000000000000000000;;	func (s *RequestSpotInstancesInput) SetClientToken(v string) *RequestSpotInstancesInput {
0000000000000000000000000000000000000000;;		s.ClientToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *RequestSpotInstancesInput) SetDryRun(v bool) *RequestSpotInstancesInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceCount sets the InstanceCount field's value.
0000000000000000000000000000000000000000;;	func (s *RequestSpotInstancesInput) SetInstanceCount(v int64) *RequestSpotInstancesInput {
0000000000000000000000000000000000000000;;		s.InstanceCount = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetLaunchGroup sets the LaunchGroup field's value.
0000000000000000000000000000000000000000;;	func (s *RequestSpotInstancesInput) SetLaunchGroup(v string) *RequestSpotInstancesInput {
0000000000000000000000000000000000000000;;		s.LaunchGroup = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetLaunchSpecification sets the LaunchSpecification field's value.
0000000000000000000000000000000000000000;;	func (s *RequestSpotInstancesInput) SetLaunchSpecification(v *RequestSpotLaunchSpecification) *RequestSpotInstancesInput {
0000000000000000000000000000000000000000;;		s.LaunchSpecification = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSpotPrice sets the SpotPrice field's value.
0000000000000000000000000000000000000000;;	func (s *RequestSpotInstancesInput) SetSpotPrice(v string) *RequestSpotInstancesInput {
0000000000000000000000000000000000000000;;		s.SpotPrice = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetType sets the Type field's value.
0000000000000000000000000000000000000000;;	func (s *RequestSpotInstancesInput) SetType(v string) *RequestSpotInstancesInput {
0000000000000000000000000000000000000000;;		s.Type = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetValidFrom sets the ValidFrom field's value.
0000000000000000000000000000000000000000;;	func (s *RequestSpotInstancesInput) SetValidFrom(v time.Time) *RequestSpotInstancesInput {
0000000000000000000000000000000000000000;;		s.ValidFrom = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetValidUntil sets the ValidUntil field's value.
0000000000000000000000000000000000000000;;	func (s *RequestSpotInstancesInput) SetValidUntil(v time.Time) *RequestSpotInstancesInput {
0000000000000000000000000000000000000000;;		s.ValidUntil = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of RequestSpotInstances.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/RequestSpotInstancesResult
0000000000000000000000000000000000000000;;	type RequestSpotInstancesOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more Spot instance requests.
0000000000000000000000000000000000000000;;		SpotInstanceRequests []*SpotInstanceRequest `locationName:"spotInstanceRequestSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s RequestSpotInstancesOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s RequestSpotInstancesOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSpotInstanceRequests sets the SpotInstanceRequests field's value.
0000000000000000000000000000000000000000;;	func (s *RequestSpotInstancesOutput) SetSpotInstanceRequests(v []*SpotInstanceRequest) *RequestSpotInstancesOutput {
0000000000000000000000000000000000000000;;		s.SpotInstanceRequests = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the launch specification for an instance.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/RequestSpotLaunchSpecification
0000000000000000000000000000000000000000;;	type RequestSpotLaunchSpecification struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Deprecated.
0000000000000000000000000000000000000000;;		AddressingType *string `locationName:"addressingType" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more block device mapping entries.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Although you can specify encrypted EBS volumes in this block device mapping
0000000000000000000000000000000000000000;;		// for your Spot Instances, these volumes are not encrypted.
0000000000000000000000000000000000000000;;		BlockDeviceMappings []*BlockDeviceMapping `locationName:"blockDeviceMapping" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether the instance is optimized for EBS I/O. This optimization
0000000000000000000000000000000000000000;;		// provides dedicated throughput to Amazon EBS and an optimized configuration
0000000000000000000000000000000000000000;;		// stack to provide optimal EBS I/O performance. This optimization isn't available
0000000000000000000000000000000000000000;;		// with all instance types. Additional usage charges apply when using an EBS
0000000000000000000000000000000000000000;;		// Optimized instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: false
0000000000000000000000000000000000000000;;		EbsOptimized *bool `locationName:"ebsOptimized" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IAM instance profile.
0000000000000000000000000000000000000000;;		IamInstanceProfile *IamInstanceProfileSpecification `locationName:"iamInstanceProfile" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the AMI.
0000000000000000000000000000000000000000;;		ImageId *string `locationName:"imageId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The instance type.
0000000000000000000000000000000000000000;;		InstanceType *string `locationName:"instanceType" type:"string" enum:"InstanceType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the kernel.
0000000000000000000000000000000000000000;;		KernelId *string `locationName:"kernelId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the key pair.
0000000000000000000000000000000000000000;;		KeyName *string `locationName:"keyName" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Describes the monitoring of an instance.
0000000000000000000000000000000000000000;;		Monitoring *RunInstancesMonitoringEnabled `locationName:"monitoring" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more network interfaces. If you specify a network interface, you must
0000000000000000000000000000000000000000;;		// specify subnet IDs and security group IDs using the network interface.
0000000000000000000000000000000000000000;;		NetworkInterfaces []*InstanceNetworkInterfaceSpecification `locationName:"NetworkInterface" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The placement information for the instance.
0000000000000000000000000000000000000000;;		Placement *SpotPlacement `locationName:"placement" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the RAM disk.
0000000000000000000000000000000000000000;;		RamdiskId *string `locationName:"ramdiskId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SecurityGroupIds []*string `locationName:"SecurityGroupId" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SecurityGroups []*string `locationName:"SecurityGroup" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the subnet in which to launch the instance.
0000000000000000000000000000000000000000;;		SubnetId *string `locationName:"subnetId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The user data to make available to the instances. If you are using an AWS
0000000000000000000000000000000000000000;;		// SDK or command line tool, Base64-encoding is performed for you, and you can
0000000000000000000000000000000000000000;;		// load the text from a file. Otherwise, you must provide Base64-encoded text.
0000000000000000000000000000000000000000;;		UserData *string `locationName:"userData" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s RequestSpotLaunchSpecification) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s RequestSpotLaunchSpecification) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *RequestSpotLaunchSpecification) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "RequestSpotLaunchSpecification"}
0000000000000000000000000000000000000000;;		if s.Monitoring != nil {
0000000000000000000000000000000000000000;;			if err := s.Monitoring.Validate(); err != nil {
0000000000000000000000000000000000000000;;				invalidParams.AddNested("Monitoring", err.(request.ErrInvalidParams))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.NetworkInterfaces != nil {
0000000000000000000000000000000000000000;;			for i, v := range s.NetworkInterfaces {
0000000000000000000000000000000000000000;;				if v == nil {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if err := v.Validate(); err != nil {
0000000000000000000000000000000000000000;;					invalidParams.AddNested(fmt.Sprintf("%s[%v]", "NetworkInterfaces", i), err.(request.ErrInvalidParams))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAddressingType sets the AddressingType field's value.
0000000000000000000000000000000000000000;;	func (s *RequestSpotLaunchSpecification) SetAddressingType(v string) *RequestSpotLaunchSpecification {
0000000000000000000000000000000000000000;;		s.AddressingType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetBlockDeviceMappings sets the BlockDeviceMappings field's value.
0000000000000000000000000000000000000000;;	func (s *RequestSpotLaunchSpecification) SetBlockDeviceMappings(v []*BlockDeviceMapping) *RequestSpotLaunchSpecification {
0000000000000000000000000000000000000000;;		s.BlockDeviceMappings = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEbsOptimized sets the EbsOptimized field's value.
0000000000000000000000000000000000000000;;	func (s *RequestSpotLaunchSpecification) SetEbsOptimized(v bool) *RequestSpotLaunchSpecification {
0000000000000000000000000000000000000000;;		s.EbsOptimized = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIamInstanceProfile sets the IamInstanceProfile field's value.
0000000000000000000000000000000000000000;;	func (s *RequestSpotLaunchSpecification) SetIamInstanceProfile(v *IamInstanceProfileSpecification) *RequestSpotLaunchSpecification {
0000000000000000000000000000000000000000;;		s.IamInstanceProfile = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetImageId sets the ImageId field's value.
0000000000000000000000000000000000000000;;	func (s *RequestSpotLaunchSpecification) SetImageId(v string) *RequestSpotLaunchSpecification {
0000000000000000000000000000000000000000;;		s.ImageId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceType sets the InstanceType field's value.
0000000000000000000000000000000000000000;;	func (s *RequestSpotLaunchSpecification) SetInstanceType(v string) *RequestSpotLaunchSpecification {
0000000000000000000000000000000000000000;;		s.InstanceType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetKernelId sets the KernelId field's value.
0000000000000000000000000000000000000000;;	func (s *RequestSpotLaunchSpecification) SetKernelId(v string) *RequestSpotLaunchSpecification {
0000000000000000000000000000000000000000;;		s.KernelId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetKeyName sets the KeyName field's value.
0000000000000000000000000000000000000000;;	func (s *RequestSpotLaunchSpecification) SetKeyName(v string) *RequestSpotLaunchSpecification {
0000000000000000000000000000000000000000;;		s.KeyName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMonitoring sets the Monitoring field's value.
0000000000000000000000000000000000000000;;	func (s *RequestSpotLaunchSpecification) SetMonitoring(v *RunInstancesMonitoringEnabled) *RequestSpotLaunchSpecification {
0000000000000000000000000000000000000000;;		s.Monitoring = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNetworkInterfaces sets the NetworkInterfaces field's value.
0000000000000000000000000000000000000000;;	func (s *RequestSpotLaunchSpecification) SetNetworkInterfaces(v []*InstanceNetworkInterfaceSpecification) *RequestSpotLaunchSpecification {
0000000000000000000000000000000000000000;;		s.NetworkInterfaces = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPlacement sets the Placement field's value.
0000000000000000000000000000000000000000;;	func (s *RequestSpotLaunchSpecification) SetPlacement(v *SpotPlacement) *RequestSpotLaunchSpecification {
0000000000000000000000000000000000000000;;		s.Placement = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRamdiskId sets the RamdiskId field's value.
0000000000000000000000000000000000000000;;	func (s *RequestSpotLaunchSpecification) SetRamdiskId(v string) *RequestSpotLaunchSpecification {
0000000000000000000000000000000000000000;;		s.RamdiskId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSecurityGroupIds sets the SecurityGroupIds field's value.
0000000000000000000000000000000000000000;;	func (s *RequestSpotLaunchSpecification) SetSecurityGroupIds(v []*string) *RequestSpotLaunchSpecification {
0000000000000000000000000000000000000000;;		s.SecurityGroupIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSecurityGroups sets the SecurityGroups field's value.
0000000000000000000000000000000000000000;;	func (s *RequestSpotLaunchSpecification) SetSecurityGroups(v []*string) *RequestSpotLaunchSpecification {
0000000000000000000000000000000000000000;;		s.SecurityGroups = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSubnetId sets the SubnetId field's value.
0000000000000000000000000000000000000000;;	func (s *RequestSpotLaunchSpecification) SetSubnetId(v string) *RequestSpotLaunchSpecification {
0000000000000000000000000000000000000000;;		s.SubnetId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUserData sets the UserData field's value.
0000000000000000000000000000000000000000;;	func (s *RequestSpotLaunchSpecification) SetUserData(v string) *RequestSpotLaunchSpecification {
0000000000000000000000000000000000000000;;		s.UserData = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a reservation.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/Reservation
0000000000000000000000000000000000000000;;	type Reservation struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// [EC2-Classic only] One or more security groups.
0000000000000000000000000000000000000000;;		Groups []*GroupIdentifier `locationName:"groupSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more instances.
0000000000000000000000000000000000000000;;		Instances []*Instance `locationName:"instancesSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the AWS account that owns the reservation.
0000000000000000000000000000000000000000;;		OwnerId *string `locationName:"ownerId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the requester that launched the instances on your behalf (for example,
0000000000000000000000000000000000000000;;		// AWS Management Console or Auto Scaling).
0000000000000000000000000000000000000000;;		RequesterId *string `locationName:"requesterId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the reservation.
0000000000000000000000000000000000000000;;		ReservationId *string `locationName:"reservationId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s Reservation) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s Reservation) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroups sets the Groups field's value.
0000000000000000000000000000000000000000;;	func (s *Reservation) SetGroups(v []*GroupIdentifier) *Reservation {
0000000000000000000000000000000000000000;;		s.Groups = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstances sets the Instances field's value.
0000000000000000000000000000000000000000;;	func (s *Reservation) SetInstances(v []*Instance) *Reservation {
0000000000000000000000000000000000000000;;		s.Instances = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetOwnerId sets the OwnerId field's value.
0000000000000000000000000000000000000000;;	func (s *Reservation) SetOwnerId(v string) *Reservation {
0000000000000000000000000000000000000000;;		s.OwnerId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRequesterId sets the RequesterId field's value.
0000000000000000000000000000000000000000;;	func (s *Reservation) SetRequesterId(v string) *Reservation {
0000000000000000000000000000000000000000;;		s.RequesterId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReservationId sets the ReservationId field's value.
0000000000000000000000000000000000000000;;	func (s *Reservation) SetReservationId(v string) *Reservation {
0000000000000000000000000000000000000000;;		s.ReservationId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The cost associated with the Reserved Instance.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ReservationValue
0000000000000000000000000000000000000000;;	type ReservationValue struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The hourly rate of the reservation.
0000000000000000000000000000000000000000;;		HourlyPrice *string `locationName:"hourlyPrice" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The balance of the total value (the sum of remainingUpfrontValue + hourlyPrice
0000000000000000000000000000000000000000;;		// * number of hours remaining).
0000000000000000000000000000000000000000;;		RemainingTotalValue *string `locationName:"remainingTotalValue" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The remaining upfront cost of the reservation.
0000000000000000000000000000000000000000;;		RemainingUpfrontValue *string `locationName:"remainingUpfrontValue" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ReservationValue) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ReservationValue) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHourlyPrice sets the HourlyPrice field's value.
0000000000000000000000000000000000000000;;	func (s *ReservationValue) SetHourlyPrice(v string) *ReservationValue {
0000000000000000000000000000000000000000;;		s.HourlyPrice = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRemainingTotalValue sets the RemainingTotalValue field's value.
0000000000000000000000000000000000000000;;	func (s *ReservationValue) SetRemainingTotalValue(v string) *ReservationValue {
0000000000000000000000000000000000000000;;		s.RemainingTotalValue = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRemainingUpfrontValue sets the RemainingUpfrontValue field's value.
0000000000000000000000000000000000000000;;	func (s *ReservationValue) SetRemainingUpfrontValue(v string) *ReservationValue {
0000000000000000000000000000000000000000;;		s.RemainingUpfrontValue = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the limit price of a Reserved Instance offering.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ReservedInstanceLimitPrice
0000000000000000000000000000000000000000;;	type ReservedInstanceLimitPrice struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Used for Reserved Instance Marketplace offerings. Specifies the limit price
0000000000000000000000000000000000000000;;		// on the total order (instanceCount * price).
0000000000000000000000000000000000000000;;		Amount *float64 `locationName:"amount" type:"double"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The currency in which the limitPrice amount is specified. At this time, the
0000000000000000000000000000000000000000;;		// only supported currency is USD.
0000000000000000000000000000000000000000;;		CurrencyCode *string `locationName:"currencyCode" type:"string" enum:"CurrencyCodeValues"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ReservedInstanceLimitPrice) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ReservedInstanceLimitPrice) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAmount sets the Amount field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstanceLimitPrice) SetAmount(v float64) *ReservedInstanceLimitPrice {
0000000000000000000000000000000000000000;;		s.Amount = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCurrencyCode sets the CurrencyCode field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstanceLimitPrice) SetCurrencyCode(v string) *ReservedInstanceLimitPrice {
0000000000000000000000000000000000000000;;		s.CurrencyCode = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The total value of the Convertible Reserved Instance.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ReservedInstanceReservationValue
0000000000000000000000000000000000000000;;	type ReservedInstanceReservationValue struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The total value of the Convertible Reserved Instance that you are exchanging.
0000000000000000000000000000000000000000;;		ReservationValue *ReservationValue `locationName:"reservationValue" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the Convertible Reserved Instance that you are exchanging.
0000000000000000000000000000000000000000;;		ReservedInstanceId *string `locationName:"reservedInstanceId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ReservedInstanceReservationValue) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ReservedInstanceReservationValue) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReservationValue sets the ReservationValue field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstanceReservationValue) SetReservationValue(v *ReservationValue) *ReservedInstanceReservationValue {
0000000000000000000000000000000000000000;;		s.ReservationValue = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReservedInstanceId sets the ReservedInstanceId field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstanceReservationValue) SetReservedInstanceId(v string) *ReservedInstanceReservationValue {
0000000000000000000000000000000000000000;;		s.ReservedInstanceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a Reserved Instance.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ReservedInstances
0000000000000000000000000000000000000000;;	type ReservedInstances struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Availability Zone in which the Reserved Instance can be used.
0000000000000000000000000000000000000000;;		AvailabilityZone *string `locationName:"availabilityZone" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The currency of the Reserved Instance. It's specified using ISO 4217 standard
0000000000000000000000000000000000000000;;		// currency codes. At this time, the only supported currency is USD.
0000000000000000000000000000000000000000;;		CurrencyCode *string `locationName:"currencyCode" type:"string" enum:"CurrencyCodeValues"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The duration of the Reserved Instance, in seconds.
0000000000000000000000000000000000000000;;		Duration *int64 `locationName:"duration" type:"long"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The time when the Reserved Instance expires.
0000000000000000000000000000000000000000;;		End *time.Time `locationName:"end" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The purchase price of the Reserved Instance.
0000000000000000000000000000000000000000;;		FixedPrice *float64 `locationName:"fixedPrice" type:"float"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of reservations purchased.
0000000000000000000000000000000000000000;;		InstanceCount *int64 `locationName:"instanceCount" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The tenancy of the instance.
0000000000000000000000000000000000000000;;		InstanceTenancy *string `locationName:"instanceTenancy" type:"string" enum:"Tenancy"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The instance type on which the Reserved Instance can be used.
0000000000000000000000000000000000000000;;		InstanceType *string `locationName:"instanceType" type:"string" enum:"InstanceType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The offering class of the Reserved Instance.
0000000000000000000000000000000000000000;;		OfferingClass *string `locationName:"offeringClass" type:"string" enum:"OfferingClassType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Reserved Instance offering type.
0000000000000000000000000000000000000000;;		OfferingType *string `locationName:"offeringType" type:"string" enum:"OfferingTypeValues"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Reserved Instance product platform description.
0000000000000000000000000000000000000000;;		ProductDescription *string `locationName:"productDescription" type:"string" enum:"RIProductDescription"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The recurring charge tag assigned to the resource.
0000000000000000000000000000000000000000;;		RecurringCharges []*RecurringCharge `locationName:"recurringCharges" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the Reserved Instance.
0000000000000000000000000000000000000000;;		ReservedInstancesId *string `locationName:"reservedInstancesId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The scope of the Reserved Instance.
0000000000000000000000000000000000000000;;		Scope *string `locationName:"scope" type:"string" enum:"scope"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The date and time the Reserved Instance started.
0000000000000000000000000000000000000000;;		Start *time.Time `locationName:"start" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The state of the Reserved Instance purchase.
0000000000000000000000000000000000000000;;		State *string `locationName:"state" type:"string" enum:"ReservedInstanceState"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Any tags assigned to the resource.
0000000000000000000000000000000000000000;;		Tags []*Tag `locationName:"tagSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The usage price of the Reserved Instance, per hour.
0000000000000000000000000000000000000000;;		UsagePrice *float64 `locationName:"usagePrice" type:"float"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ReservedInstances) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ReservedInstances) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAvailabilityZone sets the AvailabilityZone field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstances) SetAvailabilityZone(v string) *ReservedInstances {
0000000000000000000000000000000000000000;;		s.AvailabilityZone = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCurrencyCode sets the CurrencyCode field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstances) SetCurrencyCode(v string) *ReservedInstances {
0000000000000000000000000000000000000000;;		s.CurrencyCode = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDuration sets the Duration field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstances) SetDuration(v int64) *ReservedInstances {
0000000000000000000000000000000000000000;;		s.Duration = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEnd sets the End field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstances) SetEnd(v time.Time) *ReservedInstances {
0000000000000000000000000000000000000000;;		s.End = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFixedPrice sets the FixedPrice field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstances) SetFixedPrice(v float64) *ReservedInstances {
0000000000000000000000000000000000000000;;		s.FixedPrice = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceCount sets the InstanceCount field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstances) SetInstanceCount(v int64) *ReservedInstances {
0000000000000000000000000000000000000000;;		s.InstanceCount = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceTenancy sets the InstanceTenancy field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstances) SetInstanceTenancy(v string) *ReservedInstances {
0000000000000000000000000000000000000000;;		s.InstanceTenancy = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceType sets the InstanceType field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstances) SetInstanceType(v string) *ReservedInstances {
0000000000000000000000000000000000000000;;		s.InstanceType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetOfferingClass sets the OfferingClass field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstances) SetOfferingClass(v string) *ReservedInstances {
0000000000000000000000000000000000000000;;		s.OfferingClass = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetOfferingType sets the OfferingType field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstances) SetOfferingType(v string) *ReservedInstances {
0000000000000000000000000000000000000000;;		s.OfferingType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetProductDescription sets the ProductDescription field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstances) SetProductDescription(v string) *ReservedInstances {
0000000000000000000000000000000000000000;;		s.ProductDescription = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRecurringCharges sets the RecurringCharges field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstances) SetRecurringCharges(v []*RecurringCharge) *ReservedInstances {
0000000000000000000000000000000000000000;;		s.RecurringCharges = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReservedInstancesId sets the ReservedInstancesId field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstances) SetReservedInstancesId(v string) *ReservedInstances {
0000000000000000000000000000000000000000;;		s.ReservedInstancesId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetScope sets the Scope field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstances) SetScope(v string) *ReservedInstances {
0000000000000000000000000000000000000000;;		s.Scope = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStart sets the Start field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstances) SetStart(v time.Time) *ReservedInstances {
0000000000000000000000000000000000000000;;		s.Start = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetState sets the State field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstances) SetState(v string) *ReservedInstances {
0000000000000000000000000000000000000000;;		s.State = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTags sets the Tags field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstances) SetTags(v []*Tag) *ReservedInstances {
0000000000000000000000000000000000000000;;		s.Tags = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUsagePrice sets the UsagePrice field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstances) SetUsagePrice(v float64) *ReservedInstances {
0000000000000000000000000000000000000000;;		s.UsagePrice = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the configuration settings for the modified Reserved Instances.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ReservedInstancesConfiguration
0000000000000000000000000000000000000000;;	type ReservedInstancesConfiguration struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Availability Zone for the modified Reserved Instances.
0000000000000000000000000000000000000000;;		AvailabilityZone *string `locationName:"availabilityZone" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of modified Reserved Instances.
0000000000000000000000000000000000000000;;		InstanceCount *int64 `locationName:"instanceCount" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The instance type for the modified Reserved Instances.
0000000000000000000000000000000000000000;;		InstanceType *string `locationName:"instanceType" type:"string" enum:"InstanceType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The network platform of the modified Reserved Instances, which is either
0000000000000000000000000000000000000000;;		// EC2-Classic or EC2-VPC.
0000000000000000000000000000000000000000;;		Platform *string `locationName:"platform" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Whether the Reserved Instance is applied to instances in a region or instances
0000000000000000000000000000000000000000;;		// in a specific Availability Zone.
0000000000000000000000000000000000000000;;		Scope *string `locationName:"scope" type:"string" enum:"scope"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ReservedInstancesConfiguration) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ReservedInstancesConfiguration) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAvailabilityZone sets the AvailabilityZone field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstancesConfiguration) SetAvailabilityZone(v string) *ReservedInstancesConfiguration {
0000000000000000000000000000000000000000;;		s.AvailabilityZone = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceCount sets the InstanceCount field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstancesConfiguration) SetInstanceCount(v int64) *ReservedInstancesConfiguration {
0000000000000000000000000000000000000000;;		s.InstanceCount = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceType sets the InstanceType field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstancesConfiguration) SetInstanceType(v string) *ReservedInstancesConfiguration {
0000000000000000000000000000000000000000;;		s.InstanceType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPlatform sets the Platform field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstancesConfiguration) SetPlatform(v string) *ReservedInstancesConfiguration {
0000000000000000000000000000000000000000;;		s.Platform = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetScope sets the Scope field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstancesConfiguration) SetScope(v string) *ReservedInstancesConfiguration {
0000000000000000000000000000000000000000;;		s.Scope = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the ID of a Reserved Instance.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ReservedInstancesId
0000000000000000000000000000000000000000;;	type ReservedInstancesId struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the Reserved Instance.
0000000000000000000000000000000000000000;;		ReservedInstancesId *string `locationName:"reservedInstancesId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ReservedInstancesId) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ReservedInstancesId) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReservedInstancesId sets the ReservedInstancesId field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstancesId) SetReservedInstancesId(v string) *ReservedInstancesId {
0000000000000000000000000000000000000000;;		s.ReservedInstancesId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a Reserved Instance listing.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ReservedInstancesListing
0000000000000000000000000000000000000000;;	type ReservedInstancesListing struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A unique, case-sensitive key supplied by the client to ensure that the request
0000000000000000000000000000000000000000;;		// is idempotent. For more information, see Ensuring Idempotency (http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
0000000000000000000000000000000000000000;;		ClientToken *string `locationName:"clientToken" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The time the listing was created.
0000000000000000000000000000000000000000;;		CreateDate *time.Time `locationName:"createDate" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of instances in this state.
0000000000000000000000000000000000000000;;		InstanceCounts []*InstanceCount `locationName:"instanceCounts" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The price of the Reserved Instance listing.
0000000000000000000000000000000000000000;;		PriceSchedules []*PriceSchedule `locationName:"priceSchedules" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the Reserved Instance.
0000000000000000000000000000000000000000;;		ReservedInstancesId *string `locationName:"reservedInstancesId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the Reserved Instance listing.
0000000000000000000000000000000000000000;;		ReservedInstancesListingId *string `locationName:"reservedInstancesListingId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The status of the Reserved Instance listing.
0000000000000000000000000000000000000000;;		Status *string `locationName:"status" type:"string" enum:"ListingStatus"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The reason for the current status of the Reserved Instance listing. The response
0000000000000000000000000000000000000000;;		// can be blank.
0000000000000000000000000000000000000000;;		StatusMessage *string `locationName:"statusMessage" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Any tags assigned to the resource.
0000000000000000000000000000000000000000;;		Tags []*Tag `locationName:"tagSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The last modified timestamp of the listing.
0000000000000000000000000000000000000000;;		UpdateDate *time.Time `locationName:"updateDate" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ReservedInstancesListing) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ReservedInstancesListing) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetClientToken sets the ClientToken field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstancesListing) SetClientToken(v string) *ReservedInstancesListing {
0000000000000000000000000000000000000000;;		s.ClientToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCreateDate sets the CreateDate field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstancesListing) SetCreateDate(v time.Time) *ReservedInstancesListing {
0000000000000000000000000000000000000000;;		s.CreateDate = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceCounts sets the InstanceCounts field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstancesListing) SetInstanceCounts(v []*InstanceCount) *ReservedInstancesListing {
0000000000000000000000000000000000000000;;		s.InstanceCounts = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPriceSchedules sets the PriceSchedules field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstancesListing) SetPriceSchedules(v []*PriceSchedule) *ReservedInstancesListing {
0000000000000000000000000000000000000000;;		s.PriceSchedules = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReservedInstancesId sets the ReservedInstancesId field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstancesListing) SetReservedInstancesId(v string) *ReservedInstancesListing {
0000000000000000000000000000000000000000;;		s.ReservedInstancesId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReservedInstancesListingId sets the ReservedInstancesListingId field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstancesListing) SetReservedInstancesListingId(v string) *ReservedInstancesListing {
0000000000000000000000000000000000000000;;		s.ReservedInstancesListingId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStatus sets the Status field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstancesListing) SetStatus(v string) *ReservedInstancesListing {
0000000000000000000000000000000000000000;;		s.Status = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStatusMessage sets the StatusMessage field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstancesListing) SetStatusMessage(v string) *ReservedInstancesListing {
0000000000000000000000000000000000000000;;		s.StatusMessage = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTags sets the Tags field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstancesListing) SetTags(v []*Tag) *ReservedInstancesListing {
0000000000000000000000000000000000000000;;		s.Tags = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUpdateDate sets the UpdateDate field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstancesListing) SetUpdateDate(v time.Time) *ReservedInstancesListing {
0000000000000000000000000000000000000000;;		s.UpdateDate = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a Reserved Instance modification.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ReservedInstancesModification
0000000000000000000000000000000000000000;;	type ReservedInstancesModification struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A unique, case-sensitive key supplied by the client to ensure that the request
0000000000000000000000000000000000000000;;		// is idempotent. For more information, see Ensuring Idempotency (http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
0000000000000000000000000000000000000000;;		ClientToken *string `locationName:"clientToken" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The time when the modification request was created.
0000000000000000000000000000000000000000;;		CreateDate *time.Time `locationName:"createDate" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The time for the modification to become effective.
0000000000000000000000000000000000000000;;		EffectiveDate *time.Time `locationName:"effectiveDate" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Contains target configurations along with their corresponding new Reserved
0000000000000000000000000000000000000000;;		// Instance IDs.
0000000000000000000000000000000000000000;;		ModificationResults []*ReservedInstancesModificationResult `locationName:"modificationResultSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IDs of one or more Reserved Instances.
0000000000000000000000000000000000000000;;		ReservedInstancesIds []*ReservedInstancesId `locationName:"reservedInstancesSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A unique ID for the Reserved Instance modification.
0000000000000000000000000000000000000000;;		ReservedInstancesModificationId *string `locationName:"reservedInstancesModificationId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The status of the Reserved Instances modification request.
0000000000000000000000000000000000000000;;		Status *string `locationName:"status" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The reason for the status.
0000000000000000000000000000000000000000;;		StatusMessage *string `locationName:"statusMessage" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The time when the modification request was last updated.
0000000000000000000000000000000000000000;;		UpdateDate *time.Time `locationName:"updateDate" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ReservedInstancesModification) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ReservedInstancesModification) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetClientToken sets the ClientToken field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstancesModification) SetClientToken(v string) *ReservedInstancesModification {
0000000000000000000000000000000000000000;;		s.ClientToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCreateDate sets the CreateDate field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstancesModification) SetCreateDate(v time.Time) *ReservedInstancesModification {
0000000000000000000000000000000000000000;;		s.CreateDate = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEffectiveDate sets the EffectiveDate field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstancesModification) SetEffectiveDate(v time.Time) *ReservedInstancesModification {
0000000000000000000000000000000000000000;;		s.EffectiveDate = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetModificationResults sets the ModificationResults field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstancesModification) SetModificationResults(v []*ReservedInstancesModificationResult) *ReservedInstancesModification {
0000000000000000000000000000000000000000;;		s.ModificationResults = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReservedInstancesIds sets the ReservedInstancesIds field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstancesModification) SetReservedInstancesIds(v []*ReservedInstancesId) *ReservedInstancesModification {
0000000000000000000000000000000000000000;;		s.ReservedInstancesIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReservedInstancesModificationId sets the ReservedInstancesModificationId field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstancesModification) SetReservedInstancesModificationId(v string) *ReservedInstancesModification {
0000000000000000000000000000000000000000;;		s.ReservedInstancesModificationId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStatus sets the Status field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstancesModification) SetStatus(v string) *ReservedInstancesModification {
0000000000000000000000000000000000000000;;		s.Status = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStatusMessage sets the StatusMessage field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstancesModification) SetStatusMessage(v string) *ReservedInstancesModification {
0000000000000000000000000000000000000000;;		s.StatusMessage = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUpdateDate sets the UpdateDate field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstancesModification) SetUpdateDate(v time.Time) *ReservedInstancesModification {
0000000000000000000000000000000000000000;;		s.UpdateDate = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the modification request/s.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ReservedInstancesModificationResult
0000000000000000000000000000000000000000;;	type ReservedInstancesModificationResult struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID for the Reserved Instances that were created as part of the modification
0000000000000000000000000000000000000000;;		// request. This field is only available when the modification is fulfilled.
0000000000000000000000000000000000000000;;		ReservedInstancesId *string `locationName:"reservedInstancesId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The target Reserved Instances configurations supplied as part of the modification
0000000000000000000000000000000000000000;;		// request.
0000000000000000000000000000000000000000;;		TargetConfiguration *ReservedInstancesConfiguration `locationName:"targetConfiguration" type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ReservedInstancesModificationResult) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ReservedInstancesModificationResult) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReservedInstancesId sets the ReservedInstancesId field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstancesModificationResult) SetReservedInstancesId(v string) *ReservedInstancesModificationResult {
0000000000000000000000000000000000000000;;		s.ReservedInstancesId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTargetConfiguration sets the TargetConfiguration field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstancesModificationResult) SetTargetConfiguration(v *ReservedInstancesConfiguration) *ReservedInstancesModificationResult {
0000000000000000000000000000000000000000;;		s.TargetConfiguration = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a Reserved Instance offering.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ReservedInstancesOffering
0000000000000000000000000000000000000000;;	type ReservedInstancesOffering struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Availability Zone in which the Reserved Instance can be used.
0000000000000000000000000000000000000000;;		AvailabilityZone *string `locationName:"availabilityZone" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The currency of the Reserved Instance offering you are purchasing. It's specified
0000000000000000000000000000000000000000;;		// using ISO 4217 standard currency codes. At this time, the only supported
0000000000000000000000000000000000000000;;		// currency is USD.
0000000000000000000000000000000000000000;;		CurrencyCode *string `locationName:"currencyCode" type:"string" enum:"CurrencyCodeValues"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The duration of the Reserved Instance, in seconds.
0000000000000000000000000000000000000000;;		Duration *int64 `locationName:"duration" type:"long"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The purchase price of the Reserved Instance.
0000000000000000000000000000000000000000;;		FixedPrice *float64 `locationName:"fixedPrice" type:"float"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The tenancy of the instance.
0000000000000000000000000000000000000000;;		InstanceTenancy *string `locationName:"instanceTenancy" type:"string" enum:"Tenancy"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The instance type on which the Reserved Instance can be used.
0000000000000000000000000000000000000000;;		InstanceType *string `locationName:"instanceType" type:"string" enum:"InstanceType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether the offering is available through the Reserved Instance
0000000000000000000000000000000000000000;;		// Marketplace (resale) or AWS. If it's a Reserved Instance Marketplace offering,
0000000000000000000000000000000000000000;;		// this is true.
0000000000000000000000000000000000000000;;		Marketplace *bool `locationName:"marketplace" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If convertible it can be exchanged for Reserved Instances of the same or
0000000000000000000000000000000000000000;;		// higher monetary value, with different configurations. If standard, it is
0000000000000000000000000000000000000000;;		// not possible to perform an exchange.
0000000000000000000000000000000000000000;;		OfferingClass *string `locationName:"offeringClass" type:"string" enum:"OfferingClassType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Reserved Instance offering type.
0000000000000000000000000000000000000000;;		OfferingType *string `locationName:"offeringType" type:"string" enum:"OfferingTypeValues"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The pricing details of the Reserved Instance offering.
0000000000000000000000000000000000000000;;		PricingDetails []*PricingDetail `locationName:"pricingDetailsSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Reserved Instance product platform description.
0000000000000000000000000000000000000000;;		ProductDescription *string `locationName:"productDescription" type:"string" enum:"RIProductDescription"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The recurring charge tag assigned to the resource.
0000000000000000000000000000000000000000;;		RecurringCharges []*RecurringCharge `locationName:"recurringCharges" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the Reserved Instance offering. This is the offering ID used in
0000000000000000000000000000000000000000;;		// GetReservedInstancesExchangeQuote to confirm that an exchange can be made.
0000000000000000000000000000000000000000;;		ReservedInstancesOfferingId *string `locationName:"reservedInstancesOfferingId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Whether the Reserved Instance is applied to instances in a region or an Availability
0000000000000000000000000000000000000000;;		// Zone.
0000000000000000000000000000000000000000;;		Scope *string `locationName:"scope" type:"string" enum:"scope"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The usage price of the Reserved Instance, per hour.
0000000000000000000000000000000000000000;;		UsagePrice *float64 `locationName:"usagePrice" type:"float"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ReservedInstancesOffering) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ReservedInstancesOffering) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAvailabilityZone sets the AvailabilityZone field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstancesOffering) SetAvailabilityZone(v string) *ReservedInstancesOffering {
0000000000000000000000000000000000000000;;		s.AvailabilityZone = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCurrencyCode sets the CurrencyCode field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstancesOffering) SetCurrencyCode(v string) *ReservedInstancesOffering {
0000000000000000000000000000000000000000;;		s.CurrencyCode = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDuration sets the Duration field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstancesOffering) SetDuration(v int64) *ReservedInstancesOffering {
0000000000000000000000000000000000000000;;		s.Duration = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFixedPrice sets the FixedPrice field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstancesOffering) SetFixedPrice(v float64) *ReservedInstancesOffering {
0000000000000000000000000000000000000000;;		s.FixedPrice = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceTenancy sets the InstanceTenancy field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstancesOffering) SetInstanceTenancy(v string) *ReservedInstancesOffering {
0000000000000000000000000000000000000000;;		s.InstanceTenancy = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceType sets the InstanceType field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstancesOffering) SetInstanceType(v string) *ReservedInstancesOffering {
0000000000000000000000000000000000000000;;		s.InstanceType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMarketplace sets the Marketplace field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstancesOffering) SetMarketplace(v bool) *ReservedInstancesOffering {
0000000000000000000000000000000000000000;;		s.Marketplace = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetOfferingClass sets the OfferingClass field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstancesOffering) SetOfferingClass(v string) *ReservedInstancesOffering {
0000000000000000000000000000000000000000;;		s.OfferingClass = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetOfferingType sets the OfferingType field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstancesOffering) SetOfferingType(v string) *ReservedInstancesOffering {
0000000000000000000000000000000000000000;;		s.OfferingType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPricingDetails sets the PricingDetails field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstancesOffering) SetPricingDetails(v []*PricingDetail) *ReservedInstancesOffering {
0000000000000000000000000000000000000000;;		s.PricingDetails = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetProductDescription sets the ProductDescription field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstancesOffering) SetProductDescription(v string) *ReservedInstancesOffering {
0000000000000000000000000000000000000000;;		s.ProductDescription = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRecurringCharges sets the RecurringCharges field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstancesOffering) SetRecurringCharges(v []*RecurringCharge) *ReservedInstancesOffering {
0000000000000000000000000000000000000000;;		s.RecurringCharges = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReservedInstancesOfferingId sets the ReservedInstancesOfferingId field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstancesOffering) SetReservedInstancesOfferingId(v string) *ReservedInstancesOffering {
0000000000000000000000000000000000000000;;		s.ReservedInstancesOfferingId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetScope sets the Scope field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstancesOffering) SetScope(v string) *ReservedInstancesOffering {
0000000000000000000000000000000000000000;;		s.Scope = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUsagePrice sets the UsagePrice field's value.
0000000000000000000000000000000000000000;;	func (s *ReservedInstancesOffering) SetUsagePrice(v float64) *ReservedInstancesOffering {
0000000000000000000000000000000000000000;;		s.UsagePrice = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for ResetImageAttribute.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ResetImageAttributeRequest
0000000000000000000000000000000000000000;;	type ResetImageAttributeInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The attribute to reset (currently you can only reset the launch permission
0000000000000000000000000000000000000000;;		// attribute).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Attribute is a required field
0000000000000000000000000000000000000000;;		Attribute *string `type:"string" required:"true" enum:"ResetImageAttributeName"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the AMI.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ImageId is a required field
0000000000000000000000000000000000000000;;		ImageId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ResetImageAttributeInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ResetImageAttributeInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *ResetImageAttributeInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "ResetImageAttributeInput"}
0000000000000000000000000000000000000000;;		if s.Attribute == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Attribute"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.ImageId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("ImageId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAttribute sets the Attribute field's value.
0000000000000000000000000000000000000000;;	func (s *ResetImageAttributeInput) SetAttribute(v string) *ResetImageAttributeInput {
0000000000000000000000000000000000000000;;		s.Attribute = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *ResetImageAttributeInput) SetDryRun(v bool) *ResetImageAttributeInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetImageId sets the ImageId field's value.
0000000000000000000000000000000000000000;;	func (s *ResetImageAttributeInput) SetImageId(v string) *ResetImageAttributeInput {
0000000000000000000000000000000000000000;;		s.ImageId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ResetImageAttributeOutput
0000000000000000000000000000000000000000;;	type ResetImageAttributeOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ResetImageAttributeOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ResetImageAttributeOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for ResetInstanceAttribute.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ResetInstanceAttributeRequest
0000000000000000000000000000000000000000;;	type ResetInstanceAttributeInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The attribute to reset.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// You can only reset the following attributes: kernel | ramdisk | sourceDestCheck.
0000000000000000000000000000000000000000;;		// To change an instance attribute, use ModifyInstanceAttribute.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Attribute is a required field
0000000000000000000000000000000000000000;;		Attribute *string `locationName:"attribute" type:"string" required:"true" enum:"InstanceAttributeName"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// InstanceId is a required field
0000000000000000000000000000000000000000;;		InstanceId *string `locationName:"instanceId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ResetInstanceAttributeInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ResetInstanceAttributeInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *ResetInstanceAttributeInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "ResetInstanceAttributeInput"}
0000000000000000000000000000000000000000;;		if s.Attribute == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Attribute"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.InstanceId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("InstanceId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAttribute sets the Attribute field's value.
0000000000000000000000000000000000000000;;	func (s *ResetInstanceAttributeInput) SetAttribute(v string) *ResetInstanceAttributeInput {
0000000000000000000000000000000000000000;;		s.Attribute = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *ResetInstanceAttributeInput) SetDryRun(v bool) *ResetInstanceAttributeInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceId sets the InstanceId field's value.
0000000000000000000000000000000000000000;;	func (s *ResetInstanceAttributeInput) SetInstanceId(v string) *ResetInstanceAttributeInput {
0000000000000000000000000000000000000000;;		s.InstanceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ResetInstanceAttributeOutput
0000000000000000000000000000000000000000;;	type ResetInstanceAttributeOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ResetInstanceAttributeOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ResetInstanceAttributeOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for ResetNetworkInterfaceAttribute.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ResetNetworkInterfaceAttributeRequest
0000000000000000000000000000000000000000;;	type ResetNetworkInterfaceAttributeInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the network interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// NetworkInterfaceId is a required field
0000000000000000000000000000000000000000;;		NetworkInterfaceId *string `locationName:"networkInterfaceId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The source/destination checking attribute. Resets the value to true.
0000000000000000000000000000000000000000;;		SourceDestCheck *string `locationName:"sourceDestCheck" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ResetNetworkInterfaceAttributeInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ResetNetworkInterfaceAttributeInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *ResetNetworkInterfaceAttributeInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "ResetNetworkInterfaceAttributeInput"}
0000000000000000000000000000000000000000;;		if s.NetworkInterfaceId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("NetworkInterfaceId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *ResetNetworkInterfaceAttributeInput) SetDryRun(v bool) *ResetNetworkInterfaceAttributeInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNetworkInterfaceId sets the NetworkInterfaceId field's value.
0000000000000000000000000000000000000000;;	func (s *ResetNetworkInterfaceAttributeInput) SetNetworkInterfaceId(v string) *ResetNetworkInterfaceAttributeInput {
0000000000000000000000000000000000000000;;		s.NetworkInterfaceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSourceDestCheck sets the SourceDestCheck field's value.
0000000000000000000000000000000000000000;;	func (s *ResetNetworkInterfaceAttributeInput) SetSourceDestCheck(v string) *ResetNetworkInterfaceAttributeInput {
0000000000000000000000000000000000000000;;		s.SourceDestCheck = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ResetNetworkInterfaceAttributeOutput
0000000000000000000000000000000000000000;;	type ResetNetworkInterfaceAttributeOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ResetNetworkInterfaceAttributeOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ResetNetworkInterfaceAttributeOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for ResetSnapshotAttribute.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ResetSnapshotAttributeRequest
0000000000000000000000000000000000000000;;	type ResetSnapshotAttributeInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The attribute to reset. Currently, only the attribute for permission to create
0000000000000000000000000000000000000000;;		// volumes can be reset.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Attribute is a required field
0000000000000000000000000000000000000000;;		Attribute *string `type:"string" required:"true" enum:"SnapshotAttributeName"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the snapshot.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// SnapshotId is a required field
0000000000000000000000000000000000000000;;		SnapshotId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ResetSnapshotAttributeInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ResetSnapshotAttributeInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *ResetSnapshotAttributeInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "ResetSnapshotAttributeInput"}
0000000000000000000000000000000000000000;;		if s.Attribute == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Attribute"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.SnapshotId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("SnapshotId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAttribute sets the Attribute field's value.
0000000000000000000000000000000000000000;;	func (s *ResetSnapshotAttributeInput) SetAttribute(v string) *ResetSnapshotAttributeInput {
0000000000000000000000000000000000000000;;		s.Attribute = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *ResetSnapshotAttributeInput) SetDryRun(v bool) *ResetSnapshotAttributeInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSnapshotId sets the SnapshotId field's value.
0000000000000000000000000000000000000000;;	func (s *ResetSnapshotAttributeInput) SetSnapshotId(v string) *ResetSnapshotAttributeInput {
0000000000000000000000000000000000000000;;		s.SnapshotId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ResetSnapshotAttributeOutput
0000000000000000000000000000000000000000;;	type ResetSnapshotAttributeOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ResetSnapshotAttributeOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ResetSnapshotAttributeOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for RestoreAddressToClassic.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/RestoreAddressToClassicRequest
0000000000000000000000000000000000000000;;	type RestoreAddressToClassicInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Elastic IP address.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// PublicIp is a required field
0000000000000000000000000000000000000000;;		PublicIp *string `locationName:"publicIp" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s RestoreAddressToClassicInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s RestoreAddressToClassicInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *RestoreAddressToClassicInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "RestoreAddressToClassicInput"}
0000000000000000000000000000000000000000;;		if s.PublicIp == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("PublicIp"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *RestoreAddressToClassicInput) SetDryRun(v bool) *RestoreAddressToClassicInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPublicIp sets the PublicIp field's value.
0000000000000000000000000000000000000000;;	func (s *RestoreAddressToClassicInput) SetPublicIp(v string) *RestoreAddressToClassicInput {
0000000000000000000000000000000000000000;;		s.PublicIp = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of RestoreAddressToClassic.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/RestoreAddressToClassicResult
0000000000000000000000000000000000000000;;	type RestoreAddressToClassicOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Elastic IP address.
0000000000000000000000000000000000000000;;		PublicIp *string `locationName:"publicIp" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The move status for the IP address.
0000000000000000000000000000000000000000;;		Status *string `locationName:"status" type:"string" enum:"Status"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s RestoreAddressToClassicOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s RestoreAddressToClassicOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPublicIp sets the PublicIp field's value.
0000000000000000000000000000000000000000;;	func (s *RestoreAddressToClassicOutput) SetPublicIp(v string) *RestoreAddressToClassicOutput {
0000000000000000000000000000000000000000;;		s.PublicIp = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStatus sets the Status field's value.
0000000000000000000000000000000000000000;;	func (s *RestoreAddressToClassicOutput) SetStatus(v string) *RestoreAddressToClassicOutput {
0000000000000000000000000000000000000000;;		s.Status = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for RevokeSecurityGroupEgress.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/RevokeSecurityGroupEgressRequest
0000000000000000000000000000000000000000;;	type RevokeSecurityGroupEgressInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The CIDR IP address range. We recommend that you specify the CIDR range in
0000000000000000000000000000000000000000;;		// a set of IP permissions instead.
0000000000000000000000000000000000000000;;		CidrIp *string `locationName:"cidrIp" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The start of port range for the TCP and UDP protocols, or an ICMP type number.
0000000000000000000000000000000000000000;;		// We recommend that you specify the port range in a set of IP permissions instead.
0000000000000000000000000000000000000000;;		FromPort *int64 `locationName:"fromPort" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the security group.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// GroupId is a required field
0000000000000000000000000000000000000000;;		GroupId *string `locationName:"groupId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A set of IP permissions. You can't specify a destination security group and
0000000000000000000000000000000000000000;;		// a CIDR IP address range.
0000000000000000000000000000000000000000;;		IpPermissions []*IpPermission `locationName:"ipPermissions" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IP protocol name or number. We recommend that you specify the protocol
0000000000000000000000000000000000000000;;		// in a set of IP permissions instead.
0000000000000000000000000000000000000000;;		IpProtocol *string `locationName:"ipProtocol" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of a destination security group. To revoke outbound access to a
0000000000000000000000000000000000000000;;		// destination security group, we recommend that you use a set of IP permissions
0000000000000000000000000000000000000000;;		// instead.
0000000000000000000000000000000000000000;;		SourceSecurityGroupName *string `locationName:"sourceSecurityGroupName" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The AWS account number for a destination security group. To revoke outbound
0000000000000000000000000000000000000000;;		// access to a destination security group, we recommend that you use a set of
0000000000000000000000000000000000000000;;		// IP permissions instead.
0000000000000000000000000000000000000000;;		SourceSecurityGroupOwnerId *string `locationName:"sourceSecurityGroupOwnerId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The end of port range for the TCP and UDP protocols, or an ICMP type number.
0000000000000000000000000000000000000000;;		// We recommend that you specify the port range in a set of IP permissions instead.
0000000000000000000000000000000000000000;;		ToPort *int64 `locationName:"toPort" type:"integer"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s RevokeSecurityGroupEgressInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s RevokeSecurityGroupEgressInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *RevokeSecurityGroupEgressInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "RevokeSecurityGroupEgressInput"}
0000000000000000000000000000000000000000;;		if s.GroupId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("GroupId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCidrIp sets the CidrIp field's value.
0000000000000000000000000000000000000000;;	func (s *RevokeSecurityGroupEgressInput) SetCidrIp(v string) *RevokeSecurityGroupEgressInput {
0000000000000000000000000000000000000000;;		s.CidrIp = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *RevokeSecurityGroupEgressInput) SetDryRun(v bool) *RevokeSecurityGroupEgressInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFromPort sets the FromPort field's value.
0000000000000000000000000000000000000000;;	func (s *RevokeSecurityGroupEgressInput) SetFromPort(v int64) *RevokeSecurityGroupEgressInput {
0000000000000000000000000000000000000000;;		s.FromPort = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroupId sets the GroupId field's value.
0000000000000000000000000000000000000000;;	func (s *RevokeSecurityGroupEgressInput) SetGroupId(v string) *RevokeSecurityGroupEgressInput {
0000000000000000000000000000000000000000;;		s.GroupId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpPermissions sets the IpPermissions field's value.
0000000000000000000000000000000000000000;;	func (s *RevokeSecurityGroupEgressInput) SetIpPermissions(v []*IpPermission) *RevokeSecurityGroupEgressInput {
0000000000000000000000000000000000000000;;		s.IpPermissions = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpProtocol sets the IpProtocol field's value.
0000000000000000000000000000000000000000;;	func (s *RevokeSecurityGroupEgressInput) SetIpProtocol(v string) *RevokeSecurityGroupEgressInput {
0000000000000000000000000000000000000000;;		s.IpProtocol = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSourceSecurityGroupName sets the SourceSecurityGroupName field's value.
0000000000000000000000000000000000000000;;	func (s *RevokeSecurityGroupEgressInput) SetSourceSecurityGroupName(v string) *RevokeSecurityGroupEgressInput {
0000000000000000000000000000000000000000;;		s.SourceSecurityGroupName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSourceSecurityGroupOwnerId sets the SourceSecurityGroupOwnerId field's value.
0000000000000000000000000000000000000000;;	func (s *RevokeSecurityGroupEgressInput) SetSourceSecurityGroupOwnerId(v string) *RevokeSecurityGroupEgressInput {
0000000000000000000000000000000000000000;;		s.SourceSecurityGroupOwnerId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetToPort sets the ToPort field's value.
0000000000000000000000000000000000000000;;	func (s *RevokeSecurityGroupEgressInput) SetToPort(v int64) *RevokeSecurityGroupEgressInput {
0000000000000000000000000000000000000000;;		s.ToPort = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/RevokeSecurityGroupEgressOutput
0000000000000000000000000000000000000000;;	type RevokeSecurityGroupEgressOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s RevokeSecurityGroupEgressOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s RevokeSecurityGroupEgressOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for RevokeSecurityGroupIngress.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/RevokeSecurityGroupIngressRequest
0000000000000000000000000000000000000000;;	type RevokeSecurityGroupIngressInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The CIDR IP address range. You can't specify this parameter when specifying
0000000000000000000000000000000000000000;;		// a source security group.
0000000000000000000000000000000000000000;;		CidrIp *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The start of port range for the TCP and UDP protocols, or an ICMP type number.
0000000000000000000000000000000000000000;;		// For the ICMP type number, use -1 to specify all ICMP types.
0000000000000000000000000000000000000000;;		FromPort *int64 `type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the security group. Required for a security group in a nondefault
0000000000000000000000000000000000000000;;		// VPC.
0000000000000000000000000000000000000000;;		GroupId *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// [EC2-Classic, default VPC] The name of the security group.
0000000000000000000000000000000000000000;;		GroupName *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A set of IP permissions. You can't specify a source security group and a
0000000000000000000000000000000000000000;;		// CIDR IP address range.
0000000000000000000000000000000000000000;;		IpPermissions []*IpPermission `locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IP protocol name (tcp, udp, icmp) or number (see Protocol Numbers (http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml)).
0000000000000000000000000000000000000000;;		// Use -1 to specify all.
0000000000000000000000000000000000000000;;		IpProtocol *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// [EC2-Classic, default VPC] The name of the source security group. You can't
0000000000000000000000000000000000000000;;		// specify this parameter in combination with the following parameters: the
0000000000000000000000000000000000000000;;		// CIDR IP address range, the start of the port range, the IP protocol, and
0000000000000000000000000000000000000000;;		// the end of the port range. For EC2-VPC, the source security group must be
0000000000000000000000000000000000000000;;		// in the same VPC. To revoke a specific rule for an IP protocol and port range,
0000000000000000000000000000000000000000;;		// use a set of IP permissions instead.
0000000000000000000000000000000000000000;;		SourceSecurityGroupName *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// [EC2-Classic] The AWS account ID of the source security group, if the source
0000000000000000000000000000000000000000;;		// security group is in a different account. You can't specify this parameter
0000000000000000000000000000000000000000;;		// in combination with the following parameters: the CIDR IP address range,
0000000000000000000000000000000000000000;;		// the IP protocol, the start of the port range, and the end of the port range.
0000000000000000000000000000000000000000;;		// To revoke a specific rule for an IP protocol and port range, use a set of
0000000000000000000000000000000000000000;;		// IP permissions instead.
0000000000000000000000000000000000000000;;		SourceSecurityGroupOwnerId *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The end of port range for the TCP and UDP protocols, or an ICMP code number.
0000000000000000000000000000000000000000;;		// For the ICMP code number, use -1 to specify all ICMP codes for the ICMP type.
0000000000000000000000000000000000000000;;		ToPort *int64 `type:"integer"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s RevokeSecurityGroupIngressInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s RevokeSecurityGroupIngressInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCidrIp sets the CidrIp field's value.
0000000000000000000000000000000000000000;;	func (s *RevokeSecurityGroupIngressInput) SetCidrIp(v string) *RevokeSecurityGroupIngressInput {
0000000000000000000000000000000000000000;;		s.CidrIp = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *RevokeSecurityGroupIngressInput) SetDryRun(v bool) *RevokeSecurityGroupIngressInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFromPort sets the FromPort field's value.
0000000000000000000000000000000000000000;;	func (s *RevokeSecurityGroupIngressInput) SetFromPort(v int64) *RevokeSecurityGroupIngressInput {
0000000000000000000000000000000000000000;;		s.FromPort = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroupId sets the GroupId field's value.
0000000000000000000000000000000000000000;;	func (s *RevokeSecurityGroupIngressInput) SetGroupId(v string) *RevokeSecurityGroupIngressInput {
0000000000000000000000000000000000000000;;		s.GroupId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroupName sets the GroupName field's value.
0000000000000000000000000000000000000000;;	func (s *RevokeSecurityGroupIngressInput) SetGroupName(v string) *RevokeSecurityGroupIngressInput {
0000000000000000000000000000000000000000;;		s.GroupName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpPermissions sets the IpPermissions field's value.
0000000000000000000000000000000000000000;;	func (s *RevokeSecurityGroupIngressInput) SetIpPermissions(v []*IpPermission) *RevokeSecurityGroupIngressInput {
0000000000000000000000000000000000000000;;		s.IpPermissions = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpProtocol sets the IpProtocol field's value.
0000000000000000000000000000000000000000;;	func (s *RevokeSecurityGroupIngressInput) SetIpProtocol(v string) *RevokeSecurityGroupIngressInput {
0000000000000000000000000000000000000000;;		s.IpProtocol = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSourceSecurityGroupName sets the SourceSecurityGroupName field's value.
0000000000000000000000000000000000000000;;	func (s *RevokeSecurityGroupIngressInput) SetSourceSecurityGroupName(v string) *RevokeSecurityGroupIngressInput {
0000000000000000000000000000000000000000;;		s.SourceSecurityGroupName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSourceSecurityGroupOwnerId sets the SourceSecurityGroupOwnerId field's value.
0000000000000000000000000000000000000000;;	func (s *RevokeSecurityGroupIngressInput) SetSourceSecurityGroupOwnerId(v string) *RevokeSecurityGroupIngressInput {
0000000000000000000000000000000000000000;;		s.SourceSecurityGroupOwnerId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetToPort sets the ToPort field's value.
0000000000000000000000000000000000000000;;	func (s *RevokeSecurityGroupIngressInput) SetToPort(v int64) *RevokeSecurityGroupIngressInput {
0000000000000000000000000000000000000000;;		s.ToPort = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/RevokeSecurityGroupIngressOutput
0000000000000000000000000000000000000000;;	type RevokeSecurityGroupIngressOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s RevokeSecurityGroupIngressOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s RevokeSecurityGroupIngressOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a route in a route table.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/Route
0000000000000000000000000000000000000000;;	type Route struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IPv4 CIDR block used for the destination match.
0000000000000000000000000000000000000000;;		DestinationCidrBlock *string `locationName:"destinationCidrBlock" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IPv6 CIDR block used for the destination match.
0000000000000000000000000000000000000000;;		DestinationIpv6CidrBlock *string `locationName:"destinationIpv6CidrBlock" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The prefix of the AWS service.
0000000000000000000000000000000000000000;;		DestinationPrefixListId *string `locationName:"destinationPrefixListId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the egress-only Internet gateway.
0000000000000000000000000000000000000000;;		EgressOnlyInternetGatewayId *string `locationName:"egressOnlyInternetGatewayId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of a gateway attached to your VPC.
0000000000000000000000000000000000000000;;		GatewayId *string `locationName:"gatewayId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of a NAT instance in your VPC.
0000000000000000000000000000000000000000;;		InstanceId *string `locationName:"instanceId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The AWS account ID of the owner of the instance.
0000000000000000000000000000000000000000;;		InstanceOwnerId *string `locationName:"instanceOwnerId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of a NAT gateway.
0000000000000000000000000000000000000000;;		NatGatewayId *string `locationName:"natGatewayId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the network interface.
0000000000000000000000000000000000000000;;		NetworkInterfaceId *string `locationName:"networkInterfaceId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Describes how the route was created.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * CreateRouteTable - The route was automatically created when the route
0000000000000000000000000000000000000000;;		//    table was created.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * CreateRoute - The route was manually added to the route table.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * EnableVgwRoutePropagation - The route was propagated by route propagation.
0000000000000000000000000000000000000000;;		Origin *string `locationName:"origin" type:"string" enum:"RouteOrigin"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The state of the route. The blackhole state indicates that the route's target
0000000000000000000000000000000000000000;;		// isn't available (for example, the specified gateway isn't attached to the
0000000000000000000000000000000000000000;;		// VPC, or the specified NAT instance has been terminated).
0000000000000000000000000000000000000000;;		State *string `locationName:"state" type:"string" enum:"RouteState"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC peering connection.
0000000000000000000000000000000000000000;;		VpcPeeringConnectionId *string `locationName:"vpcPeeringConnectionId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s Route) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s Route) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDestinationCidrBlock sets the DestinationCidrBlock field's value.
0000000000000000000000000000000000000000;;	func (s *Route) SetDestinationCidrBlock(v string) *Route {
0000000000000000000000000000000000000000;;		s.DestinationCidrBlock = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDestinationIpv6CidrBlock sets the DestinationIpv6CidrBlock field's value.
0000000000000000000000000000000000000000;;	func (s *Route) SetDestinationIpv6CidrBlock(v string) *Route {
0000000000000000000000000000000000000000;;		s.DestinationIpv6CidrBlock = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDestinationPrefixListId sets the DestinationPrefixListId field's value.
0000000000000000000000000000000000000000;;	func (s *Route) SetDestinationPrefixListId(v string) *Route {
0000000000000000000000000000000000000000;;		s.DestinationPrefixListId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEgressOnlyInternetGatewayId sets the EgressOnlyInternetGatewayId field's value.
0000000000000000000000000000000000000000;;	func (s *Route) SetEgressOnlyInternetGatewayId(v string) *Route {
0000000000000000000000000000000000000000;;		s.EgressOnlyInternetGatewayId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGatewayId sets the GatewayId field's value.
0000000000000000000000000000000000000000;;	func (s *Route) SetGatewayId(v string) *Route {
0000000000000000000000000000000000000000;;		s.GatewayId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceId sets the InstanceId field's value.
0000000000000000000000000000000000000000;;	func (s *Route) SetInstanceId(v string) *Route {
0000000000000000000000000000000000000000;;		s.InstanceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceOwnerId sets the InstanceOwnerId field's value.
0000000000000000000000000000000000000000;;	func (s *Route) SetInstanceOwnerId(v string) *Route {
0000000000000000000000000000000000000000;;		s.InstanceOwnerId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNatGatewayId sets the NatGatewayId field's value.
0000000000000000000000000000000000000000;;	func (s *Route) SetNatGatewayId(v string) *Route {
0000000000000000000000000000000000000000;;		s.NatGatewayId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNetworkInterfaceId sets the NetworkInterfaceId field's value.
0000000000000000000000000000000000000000;;	func (s *Route) SetNetworkInterfaceId(v string) *Route {
0000000000000000000000000000000000000000;;		s.NetworkInterfaceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetOrigin sets the Origin field's value.
0000000000000000000000000000000000000000;;	func (s *Route) SetOrigin(v string) *Route {
0000000000000000000000000000000000000000;;		s.Origin = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetState sets the State field's value.
0000000000000000000000000000000000000000;;	func (s *Route) SetState(v string) *Route {
0000000000000000000000000000000000000000;;		s.State = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcPeeringConnectionId sets the VpcPeeringConnectionId field's value.
0000000000000000000000000000000000000000;;	func (s *Route) SetVpcPeeringConnectionId(v string) *Route {
0000000000000000000000000000000000000000;;		s.VpcPeeringConnectionId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a route table.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/RouteTable
0000000000000000000000000000000000000000;;	type RouteTable struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The associations between the route table and one or more subnets.
0000000000000000000000000000000000000000;;		Associations []*RouteTableAssociation `locationName:"associationSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Any virtual private gateway (VGW) propagating routes.
0000000000000000000000000000000000000000;;		PropagatingVgws []*PropagatingVgw `locationName:"propagatingVgwSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the route table.
0000000000000000000000000000000000000000;;		RouteTableId *string `locationName:"routeTableId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The routes in the route table.
0000000000000000000000000000000000000000;;		Routes []*Route `locationName:"routeSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Any tags assigned to the route table.
0000000000000000000000000000000000000000;;		Tags []*Tag `locationName:"tagSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC.
0000000000000000000000000000000000000000;;		VpcId *string `locationName:"vpcId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s RouteTable) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s RouteTable) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAssociations sets the Associations field's value.
0000000000000000000000000000000000000000;;	func (s *RouteTable) SetAssociations(v []*RouteTableAssociation) *RouteTable {
0000000000000000000000000000000000000000;;		s.Associations = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPropagatingVgws sets the PropagatingVgws field's value.
0000000000000000000000000000000000000000;;	func (s *RouteTable) SetPropagatingVgws(v []*PropagatingVgw) *RouteTable {
0000000000000000000000000000000000000000;;		s.PropagatingVgws = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRouteTableId sets the RouteTableId field's value.
0000000000000000000000000000000000000000;;	func (s *RouteTable) SetRouteTableId(v string) *RouteTable {
0000000000000000000000000000000000000000;;		s.RouteTableId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRoutes sets the Routes field's value.
0000000000000000000000000000000000000000;;	func (s *RouteTable) SetRoutes(v []*Route) *RouteTable {
0000000000000000000000000000000000000000;;		s.Routes = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTags sets the Tags field's value.
0000000000000000000000000000000000000000;;	func (s *RouteTable) SetTags(v []*Tag) *RouteTable {
0000000000000000000000000000000000000000;;		s.Tags = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcId sets the VpcId field's value.
0000000000000000000000000000000000000000;;	func (s *RouteTable) SetVpcId(v string) *RouteTable {
0000000000000000000000000000000000000000;;		s.VpcId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes an association between a route table and a subnet.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/RouteTableAssociation
0000000000000000000000000000000000000000;;	type RouteTableAssociation struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether this is the main route table.
0000000000000000000000000000000000000000;;		Main *bool `locationName:"main" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the association between a route table and a subnet.
0000000000000000000000000000000000000000;;		RouteTableAssociationId *string `locationName:"routeTableAssociationId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the route table.
0000000000000000000000000000000000000000;;		RouteTableId *string `locationName:"routeTableId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the subnet. A subnet ID is not returned for an implicit association.
0000000000000000000000000000000000000000;;		SubnetId *string `locationName:"subnetId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s RouteTableAssociation) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s RouteTableAssociation) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMain sets the Main field's value.
0000000000000000000000000000000000000000;;	func (s *RouteTableAssociation) SetMain(v bool) *RouteTableAssociation {
0000000000000000000000000000000000000000;;		s.Main = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRouteTableAssociationId sets the RouteTableAssociationId field's value.
0000000000000000000000000000000000000000;;	func (s *RouteTableAssociation) SetRouteTableAssociationId(v string) *RouteTableAssociation {
0000000000000000000000000000000000000000;;		s.RouteTableAssociationId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRouteTableId sets the RouteTableId field's value.
0000000000000000000000000000000000000000;;	func (s *RouteTableAssociation) SetRouteTableId(v string) *RouteTableAssociation {
0000000000000000000000000000000000000000;;		s.RouteTableId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSubnetId sets the SubnetId field's value.
0000000000000000000000000000000000000000;;	func (s *RouteTableAssociation) SetSubnetId(v string) *RouteTableAssociation {
0000000000000000000000000000000000000000;;		s.SubnetId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for RunInstances.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/RunInstancesRequest
0000000000000000000000000000000000000000;;	type RunInstancesInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Reserved.
0000000000000000000000000000000000000000;;		AdditionalInfo *string `locationName:"additionalInfo" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The block device mapping.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Supplying both a snapshot ID and an encryption value as arguments for block-device
0000000000000000000000000000000000000000;;		// mapping results in an error. This is because only blank volumes can be encrypted
0000000000000000000000000000000000000000;;		// on start, and these are not created from a snapshot. If a snapshot is the
0000000000000000000000000000000000000000;;		// basis for the volume, it contains data by definition and its encryption status
0000000000000000000000000000000000000000;;		// cannot be changed using this action.
0000000000000000000000000000000000000000;;		BlockDeviceMappings []*BlockDeviceMapping `locationName:"BlockDeviceMapping" locationNameList:"BlockDeviceMapping" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Unique, case-sensitive identifier you provide to ensure the idempotency of
0000000000000000000000000000000000000000;;		// the request. For more information, see Ensuring Idempotency (http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Constraints: Maximum 64 ASCII characters
0000000000000000000000000000000000000000;;		ClientToken *string `locationName:"clientToken" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If you set this parameter to true, you can't terminate the instance using
0000000000000000000000000000000000000000;;		// the Amazon EC2 console, CLI, or API; otherwise, you can. To change this attribute
0000000000000000000000000000000000000000;;		// to false after launch, use ModifyInstanceAttribute. Alternatively, if you
0000000000000000000000000000000000000000;;		// set InstanceInitiatedShutdownBehavior to terminate, you can terminate the
0000000000000000000000000000000000000000;;		// instance by running the shutdown command from the instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: false
0000000000000000000000000000000000000000;;		DisableApiTermination *bool `locationName:"disableApiTermination" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether the instance is optimized for EBS I/O. This optimization
0000000000000000000000000000000000000000;;		// provides dedicated throughput to Amazon EBS and an optimized configuration
0000000000000000000000000000000000000000;;		// stack to provide optimal EBS I/O performance. This optimization isn't available
0000000000000000000000000000000000000000;;		// with all instance types. Additional usage charges apply when using an EBS-optimized
0000000000000000000000000000000000000000;;		// instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: false
0000000000000000000000000000000000000000;;		EbsOptimized *bool `locationName:"ebsOptimized" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IAM instance profile.
0000000000000000000000000000000000000000;;		IamInstanceProfile *IamInstanceProfileSpecification `locationName:"iamInstanceProfile" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the AMI, which you can get by calling DescribeImages.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ImageId is a required field
0000000000000000000000000000000000000000;;		ImageId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether an instance stops or terminates when you initiate shutdown
0000000000000000000000000000000000000000;;		// from the instance (using the operating system command for system shutdown).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: stop
0000000000000000000000000000000000000000;;		InstanceInitiatedShutdownBehavior *string `locationName:"instanceInitiatedShutdownBehavior" type:"string" enum:"ShutdownBehavior"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The instance type. For more information, see Instance Types (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html)
0000000000000000000000000000000000000000;;		// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: m1.small
0000000000000000000000000000000000000000;;		InstanceType *string `type:"string" enum:"InstanceType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// [EC2-VPC] A number of IPv6 addresses to associate with the primary network
0000000000000000000000000000000000000000;;		// interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet.
0000000000000000000000000000000000000000;;		// You cannot specify this option and the option to assign specific IPv6 addresses
0000000000000000000000000000000000000000;;		// in the same request. You can specify this option if you've specified a minimum
0000000000000000000000000000000000000000;;		// number of instances to launch.
0000000000000000000000000000000000000000;;		Ipv6AddressCount *int64 `type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// [EC2-VPC] Specify one or more IPv6 addresses from the range of the subnet
0000000000000000000000000000000000000000;;		// to associate with the primary network interface. You cannot specify this
0000000000000000000000000000000000000000;;		// option and the option to assign a number of IPv6 addresses in the same request.
0000000000000000000000000000000000000000;;		// You cannot specify this option if you've specified a minimum number of instances
0000000000000000000000000000000000000000;;		// to launch.
0000000000000000000000000000000000000000;;		Ipv6Addresses []*InstanceIpv6Address `locationName:"Ipv6Address" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the kernel.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// We recommend that you use PV-GRUB instead of kernels and RAM disks. For more
0000000000000000000000000000000000000000;;		// information, see  PV-GRUB (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html)
0000000000000000000000000000000000000000;;		// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;		KernelId *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the key pair. You can create a key pair using CreateKeyPair or
0000000000000000000000000000000000000000;;		// ImportKeyPair.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If you do not specify a key pair, you can't connect to the instance unless
0000000000000000000000000000000000000000;;		// you choose an AMI that is configured to allow users another way to log in.
0000000000000000000000000000000000000000;;		KeyName *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum number of instances to launch. If you specify more instances
0000000000000000000000000000000000000000;;		// than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches
0000000000000000000000000000000000000000;;		// the largest possible number of instances above MinCount.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Constraints: Between 1 and the maximum number you're allowed for the specified
0000000000000000000000000000000000000000;;		// instance type. For more information about the default limits, and how to
0000000000000000000000000000000000000000;;		// request an increase, see How many instances can I run in Amazon EC2 (http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2)
0000000000000000000000000000000000000000;;		// in the Amazon EC2 FAQ.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// MaxCount is a required field
0000000000000000000000000000000000000000;;		MaxCount *int64 `type:"integer" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The minimum number of instances to launch. If you specify a minimum that
0000000000000000000000000000000000000000;;		// is more instances than Amazon EC2 can launch in the target Availability Zone,
0000000000000000000000000000000000000000;;		// Amazon EC2 launches no instances.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Constraints: Between 1 and the maximum number you're allowed for the specified
0000000000000000000000000000000000000000;;		// instance type. For more information about the default limits, and how to
0000000000000000000000000000000000000000;;		// request an increase, see How many instances can I run in Amazon EC2 (http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2)
0000000000000000000000000000000000000000;;		// in the Amazon EC2 General FAQ.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// MinCount is a required field
0000000000000000000000000000000000000000;;		MinCount *int64 `type:"integer" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The monitoring for the instance.
0000000000000000000000000000000000000000;;		Monitoring *RunInstancesMonitoringEnabled `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more network interfaces.
0000000000000000000000000000000000000000;;		NetworkInterfaces []*InstanceNetworkInterfaceSpecification `locationName:"networkInterface" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The placement for the instance.
0000000000000000000000000000000000000000;;		Placement *Placement `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// [EC2-VPC] The primary IPv4 address. You must specify a value from the IPv4
0000000000000000000000000000000000000000;;		// address range of the subnet.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Only one private IP address can be designated as primary. You can't specify
0000000000000000000000000000000000000000;;		// this option if you've specified the option to designate a private IP address
0000000000000000000000000000000000000000;;		// as the primary IP address in a network interface specification. You cannot
0000000000000000000000000000000000000000;;		// specify this option if you're launching more than one instance in the request.
0000000000000000000000000000000000000000;;		PrivateIpAddress *string `locationName:"privateIpAddress" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the RAM disk.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// We recommend that you use PV-GRUB instead of kernels and RAM disks. For more
0000000000000000000000000000000000000000;;		// information, see  PV-GRUB (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html)
0000000000000000000000000000000000000000;;		// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;		RamdiskId *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more security group IDs. You can create a security group using CreateSecurityGroup.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: Amazon EC2 uses the default security group.
0000000000000000000000000000000000000000;;		SecurityGroupIds []*string `locationName:"SecurityGroupId" locationNameList:"SecurityGroupId" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// [EC2-Classic, default VPC] One or more security group names. For a nondefault
0000000000000000000000000000000000000000;;		// VPC, you must use security group IDs instead.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: Amazon EC2 uses the default security group.
0000000000000000000000000000000000000000;;		SecurityGroups []*string `locationName:"SecurityGroup" locationNameList:"SecurityGroup" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// [EC2-VPC] The ID of the subnet to launch the instance into.
0000000000000000000000000000000000000000;;		SubnetId *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The user data to make available to the instance. For more information, see
0000000000000000000000000000000000000000;;		// Running Commands on Your Linux Instance at Launch (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html)
0000000000000000000000000000000000000000;;		// (Linux) and Adding User Data (http://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-instance-metadata.html#instancedata-add-user-data)
0000000000000000000000000000000000000000;;		// (Windows). If you are using an AWS SDK or command line tool, Base64-encoding
0000000000000000000000000000000000000000;;		// is performed for you, and you can load the text from a file. Otherwise, you
0000000000000000000000000000000000000000;;		// must provide Base64-encoded text.
0000000000000000000000000000000000000000;;		UserData *string `type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s RunInstancesInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s RunInstancesInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *RunInstancesInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "RunInstancesInput"}
0000000000000000000000000000000000000000;;		if s.ImageId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("ImageId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.MaxCount == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("MaxCount"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.MinCount == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("MinCount"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Monitoring != nil {
0000000000000000000000000000000000000000;;			if err := s.Monitoring.Validate(); err != nil {
0000000000000000000000000000000000000000;;				invalidParams.AddNested("Monitoring", err.(request.ErrInvalidParams))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.NetworkInterfaces != nil {
0000000000000000000000000000000000000000;;			for i, v := range s.NetworkInterfaces {
0000000000000000000000000000000000000000;;				if v == nil {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if err := v.Validate(); err != nil {
0000000000000000000000000000000000000000;;					invalidParams.AddNested(fmt.Sprintf("%s[%v]", "NetworkInterfaces", i), err.(request.ErrInvalidParams))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAdditionalInfo sets the AdditionalInfo field's value.
0000000000000000000000000000000000000000;;	func (s *RunInstancesInput) SetAdditionalInfo(v string) *RunInstancesInput {
0000000000000000000000000000000000000000;;		s.AdditionalInfo = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetBlockDeviceMappings sets the BlockDeviceMappings field's value.
0000000000000000000000000000000000000000;;	func (s *RunInstancesInput) SetBlockDeviceMappings(v []*BlockDeviceMapping) *RunInstancesInput {
0000000000000000000000000000000000000000;;		s.BlockDeviceMappings = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetClientToken sets the ClientToken field's value.
0000000000000000000000000000000000000000;;	func (s *RunInstancesInput) SetClientToken(v string) *RunInstancesInput {
0000000000000000000000000000000000000000;;		s.ClientToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDisableApiTermination sets the DisableApiTermination field's value.
0000000000000000000000000000000000000000;;	func (s *RunInstancesInput) SetDisableApiTermination(v bool) *RunInstancesInput {
0000000000000000000000000000000000000000;;		s.DisableApiTermination = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *RunInstancesInput) SetDryRun(v bool) *RunInstancesInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEbsOptimized sets the EbsOptimized field's value.
0000000000000000000000000000000000000000;;	func (s *RunInstancesInput) SetEbsOptimized(v bool) *RunInstancesInput {
0000000000000000000000000000000000000000;;		s.EbsOptimized = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIamInstanceProfile sets the IamInstanceProfile field's value.
0000000000000000000000000000000000000000;;	func (s *RunInstancesInput) SetIamInstanceProfile(v *IamInstanceProfileSpecification) *RunInstancesInput {
0000000000000000000000000000000000000000;;		s.IamInstanceProfile = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetImageId sets the ImageId field's value.
0000000000000000000000000000000000000000;;	func (s *RunInstancesInput) SetImageId(v string) *RunInstancesInput {
0000000000000000000000000000000000000000;;		s.ImageId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceInitiatedShutdownBehavior sets the InstanceInitiatedShutdownBehavior field's value.
0000000000000000000000000000000000000000;;	func (s *RunInstancesInput) SetInstanceInitiatedShutdownBehavior(v string) *RunInstancesInput {
0000000000000000000000000000000000000000;;		s.InstanceInitiatedShutdownBehavior = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceType sets the InstanceType field's value.
0000000000000000000000000000000000000000;;	func (s *RunInstancesInput) SetInstanceType(v string) *RunInstancesInput {
0000000000000000000000000000000000000000;;		s.InstanceType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpv6AddressCount sets the Ipv6AddressCount field's value.
0000000000000000000000000000000000000000;;	func (s *RunInstancesInput) SetIpv6AddressCount(v int64) *RunInstancesInput {
0000000000000000000000000000000000000000;;		s.Ipv6AddressCount = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpv6Addresses sets the Ipv6Addresses field's value.
0000000000000000000000000000000000000000;;	func (s *RunInstancesInput) SetIpv6Addresses(v []*InstanceIpv6Address) *RunInstancesInput {
0000000000000000000000000000000000000000;;		s.Ipv6Addresses = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetKernelId sets the KernelId field's value.
0000000000000000000000000000000000000000;;	func (s *RunInstancesInput) SetKernelId(v string) *RunInstancesInput {
0000000000000000000000000000000000000000;;		s.KernelId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetKeyName sets the KeyName field's value.
0000000000000000000000000000000000000000;;	func (s *RunInstancesInput) SetKeyName(v string) *RunInstancesInput {
0000000000000000000000000000000000000000;;		s.KeyName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxCount sets the MaxCount field's value.
0000000000000000000000000000000000000000;;	func (s *RunInstancesInput) SetMaxCount(v int64) *RunInstancesInput {
0000000000000000000000000000000000000000;;		s.MaxCount = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMinCount sets the MinCount field's value.
0000000000000000000000000000000000000000;;	func (s *RunInstancesInput) SetMinCount(v int64) *RunInstancesInput {
0000000000000000000000000000000000000000;;		s.MinCount = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMonitoring sets the Monitoring field's value.
0000000000000000000000000000000000000000;;	func (s *RunInstancesInput) SetMonitoring(v *RunInstancesMonitoringEnabled) *RunInstancesInput {
0000000000000000000000000000000000000000;;		s.Monitoring = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNetworkInterfaces sets the NetworkInterfaces field's value.
0000000000000000000000000000000000000000;;	func (s *RunInstancesInput) SetNetworkInterfaces(v []*InstanceNetworkInterfaceSpecification) *RunInstancesInput {
0000000000000000000000000000000000000000;;		s.NetworkInterfaces = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPlacement sets the Placement field's value.
0000000000000000000000000000000000000000;;	func (s *RunInstancesInput) SetPlacement(v *Placement) *RunInstancesInput {
0000000000000000000000000000000000000000;;		s.Placement = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrivateIpAddress sets the PrivateIpAddress field's value.
0000000000000000000000000000000000000000;;	func (s *RunInstancesInput) SetPrivateIpAddress(v string) *RunInstancesInput {
0000000000000000000000000000000000000000;;		s.PrivateIpAddress = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRamdiskId sets the RamdiskId field's value.
0000000000000000000000000000000000000000;;	func (s *RunInstancesInput) SetRamdiskId(v string) *RunInstancesInput {
0000000000000000000000000000000000000000;;		s.RamdiskId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSecurityGroupIds sets the SecurityGroupIds field's value.
0000000000000000000000000000000000000000;;	func (s *RunInstancesInput) SetSecurityGroupIds(v []*string) *RunInstancesInput {
0000000000000000000000000000000000000000;;		s.SecurityGroupIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSecurityGroups sets the SecurityGroups field's value.
0000000000000000000000000000000000000000;;	func (s *RunInstancesInput) SetSecurityGroups(v []*string) *RunInstancesInput {
0000000000000000000000000000000000000000;;		s.SecurityGroups = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSubnetId sets the SubnetId field's value.
0000000000000000000000000000000000000000;;	func (s *RunInstancesInput) SetSubnetId(v string) *RunInstancesInput {
0000000000000000000000000000000000000000;;		s.SubnetId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUserData sets the UserData field's value.
0000000000000000000000000000000000000000;;	func (s *RunInstancesInput) SetUserData(v string) *RunInstancesInput {
0000000000000000000000000000000000000000;;		s.UserData = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the monitoring of an instance.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/RunInstancesMonitoringEnabled
0000000000000000000000000000000000000000;;	type RunInstancesMonitoringEnabled struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring
0000000000000000000000000000000000000000;;		// is enabled.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Enabled is a required field
0000000000000000000000000000000000000000;;		Enabled *bool `locationName:"enabled" type:"boolean" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s RunInstancesMonitoringEnabled) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s RunInstancesMonitoringEnabled) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *RunInstancesMonitoringEnabled) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "RunInstancesMonitoringEnabled"}
0000000000000000000000000000000000000000;;		if s.Enabled == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Enabled"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEnabled sets the Enabled field's value.
0000000000000000000000000000000000000000;;	func (s *RunInstancesMonitoringEnabled) SetEnabled(v bool) *RunInstancesMonitoringEnabled {
0000000000000000000000000000000000000000;;		s.Enabled = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for RunScheduledInstances.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/RunScheduledInstancesRequest
0000000000000000000000000000000000000000;;	type RunScheduledInstancesInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Unique, case-sensitive identifier that ensures the idempotency of the request.
0000000000000000000000000000000000000000;;		// For more information, see Ensuring Idempotency (http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
0000000000000000000000000000000000000000;;		ClientToken *string `type:"string" idempotencyToken:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of instances.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: 1
0000000000000000000000000000000000000000;;		InstanceCount *int64 `type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The launch specification. You must match the instance type, Availability
0000000000000000000000000000000000000000;;		// Zone, network, and platform of the schedule that you purchased.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// LaunchSpecification is a required field
0000000000000000000000000000000000000000;;		LaunchSpecification *ScheduledInstancesLaunchSpecification `type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Scheduled Instance ID.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ScheduledInstanceId is a required field
0000000000000000000000000000000000000000;;		ScheduledInstanceId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s RunScheduledInstancesInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s RunScheduledInstancesInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *RunScheduledInstancesInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "RunScheduledInstancesInput"}
0000000000000000000000000000000000000000;;		if s.LaunchSpecification == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("LaunchSpecification"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.ScheduledInstanceId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("ScheduledInstanceId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.LaunchSpecification != nil {
0000000000000000000000000000000000000000;;			if err := s.LaunchSpecification.Validate(); err != nil {
0000000000000000000000000000000000000000;;				invalidParams.AddNested("LaunchSpecification", err.(request.ErrInvalidParams))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetClientToken sets the ClientToken field's value.
0000000000000000000000000000000000000000;;	func (s *RunScheduledInstancesInput) SetClientToken(v string) *RunScheduledInstancesInput {
0000000000000000000000000000000000000000;;		s.ClientToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *RunScheduledInstancesInput) SetDryRun(v bool) *RunScheduledInstancesInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceCount sets the InstanceCount field's value.
0000000000000000000000000000000000000000;;	func (s *RunScheduledInstancesInput) SetInstanceCount(v int64) *RunScheduledInstancesInput {
0000000000000000000000000000000000000000;;		s.InstanceCount = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetLaunchSpecification sets the LaunchSpecification field's value.
0000000000000000000000000000000000000000;;	func (s *RunScheduledInstancesInput) SetLaunchSpecification(v *ScheduledInstancesLaunchSpecification) *RunScheduledInstancesInput {
0000000000000000000000000000000000000000;;		s.LaunchSpecification = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetScheduledInstanceId sets the ScheduledInstanceId field's value.
0000000000000000000000000000000000000000;;	func (s *RunScheduledInstancesInput) SetScheduledInstanceId(v string) *RunScheduledInstancesInput {
0000000000000000000000000000000000000000;;		s.ScheduledInstanceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of RunScheduledInstances.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/RunScheduledInstancesResult
0000000000000000000000000000000000000000;;	type RunScheduledInstancesOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IDs of the newly launched instances.
0000000000000000000000000000000000000000;;		InstanceIdSet []*string `locationName:"instanceIdSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s RunScheduledInstancesOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s RunScheduledInstancesOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceIdSet sets the InstanceIdSet field's value.
0000000000000000000000000000000000000000;;	func (s *RunScheduledInstancesOutput) SetInstanceIdSet(v []*string) *RunScheduledInstancesOutput {
0000000000000000000000000000000000000000;;		s.InstanceIdSet = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the storage parameters for S3 and S3 buckets for an instance store-backed
0000000000000000000000000000000000000000;;	// AMI.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/S3Storage
0000000000000000000000000000000000000000;;	type S3Storage struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The access key ID of the owner of the bucket. Before you specify a value
0000000000000000000000000000000000000000;;		// for your access key ID, review and follow the guidance in Best Practices
0000000000000000000000000000000000000000;;		// for Managing AWS Access Keys (http://docs.aws.amazon.com/general/latest/gr/aws-access-keys-best-practices.html).
0000000000000000000000000000000000000000;;		AWSAccessKeyId *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The bucket in which to store the AMI. You can specify a bucket that you already
0000000000000000000000000000000000000000;;		// own or a new bucket that Amazon EC2 creates on your behalf. If you specify
0000000000000000000000000000000000000000;;		// a bucket that belongs to someone else, Amazon EC2 returns an error.
0000000000000000000000000000000000000000;;		Bucket *string `locationName:"bucket" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The beginning of the file name of the AMI.
0000000000000000000000000000000000000000;;		Prefix *string `locationName:"prefix" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// An Amazon S3 upload policy that gives Amazon EC2 permission to upload items
0000000000000000000000000000000000000000;;		// into Amazon S3 on your behalf.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// UploadPolicy is automatically base64 encoded/decoded by the SDK.
0000000000000000000000000000000000000000;;		UploadPolicy []byte `locationName:"uploadPolicy" type:"blob"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The signature of the JSON document.
0000000000000000000000000000000000000000;;		UploadPolicySignature *string `locationName:"uploadPolicySignature" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s S3Storage) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s S3Storage) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAWSAccessKeyId sets the AWSAccessKeyId field's value.
0000000000000000000000000000000000000000;;	func (s *S3Storage) SetAWSAccessKeyId(v string) *S3Storage {
0000000000000000000000000000000000000000;;		s.AWSAccessKeyId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetBucket sets the Bucket field's value.
0000000000000000000000000000000000000000;;	func (s *S3Storage) SetBucket(v string) *S3Storage {
0000000000000000000000000000000000000000;;		s.Bucket = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrefix sets the Prefix field's value.
0000000000000000000000000000000000000000;;	func (s *S3Storage) SetPrefix(v string) *S3Storage {
0000000000000000000000000000000000000000;;		s.Prefix = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUploadPolicy sets the UploadPolicy field's value.
0000000000000000000000000000000000000000;;	func (s *S3Storage) SetUploadPolicy(v []byte) *S3Storage {
0000000000000000000000000000000000000000;;		s.UploadPolicy = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUploadPolicySignature sets the UploadPolicySignature field's value.
0000000000000000000000000000000000000000;;	func (s *S3Storage) SetUploadPolicySignature(v string) *S3Storage {
0000000000000000000000000000000000000000;;		s.UploadPolicySignature = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a Scheduled Instance.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ScheduledInstance
0000000000000000000000000000000000000000;;	type ScheduledInstance struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Availability Zone.
0000000000000000000000000000000000000000;;		AvailabilityZone *string `locationName:"availabilityZone" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The date when the Scheduled Instance was purchased.
0000000000000000000000000000000000000000;;		CreateDate *time.Time `locationName:"createDate" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The hourly price for a single instance.
0000000000000000000000000000000000000000;;		HourlyPrice *string `locationName:"hourlyPrice" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of instances.
0000000000000000000000000000000000000000;;		InstanceCount *int64 `locationName:"instanceCount" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The instance type.
0000000000000000000000000000000000000000;;		InstanceType *string `locationName:"instanceType" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The network platform (EC2-Classic or EC2-VPC).
0000000000000000000000000000000000000000;;		NetworkPlatform *string `locationName:"networkPlatform" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The time for the next schedule to start.
0000000000000000000000000000000000000000;;		NextSlotStartTime *time.Time `locationName:"nextSlotStartTime" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The platform (Linux/UNIX or Windows).
0000000000000000000000000000000000000000;;		Platform *string `locationName:"platform" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The time that the previous schedule ended or will end.
0000000000000000000000000000000000000000;;		PreviousSlotEndTime *time.Time `locationName:"previousSlotEndTime" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The schedule recurrence.
0000000000000000000000000000000000000000;;		Recurrence *ScheduledInstanceRecurrence `locationName:"recurrence" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Scheduled Instance ID.
0000000000000000000000000000000000000000;;		ScheduledInstanceId *string `locationName:"scheduledInstanceId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of hours in the schedule.
0000000000000000000000000000000000000000;;		SlotDurationInHours *int64 `locationName:"slotDurationInHours" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The end date for the Scheduled Instance.
0000000000000000000000000000000000000000;;		TermEndDate *time.Time `locationName:"termEndDate" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The start date for the Scheduled Instance.
0000000000000000000000000000000000000000;;		TermStartDate *time.Time `locationName:"termStartDate" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The total number of hours for a single instance for the entire term.
0000000000000000000000000000000000000000;;		TotalScheduledInstanceHours *int64 `locationName:"totalScheduledInstanceHours" type:"integer"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ScheduledInstance) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ScheduledInstance) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAvailabilityZone sets the AvailabilityZone field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstance) SetAvailabilityZone(v string) *ScheduledInstance {
0000000000000000000000000000000000000000;;		s.AvailabilityZone = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCreateDate sets the CreateDate field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstance) SetCreateDate(v time.Time) *ScheduledInstance {
0000000000000000000000000000000000000000;;		s.CreateDate = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHourlyPrice sets the HourlyPrice field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstance) SetHourlyPrice(v string) *ScheduledInstance {
0000000000000000000000000000000000000000;;		s.HourlyPrice = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceCount sets the InstanceCount field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstance) SetInstanceCount(v int64) *ScheduledInstance {
0000000000000000000000000000000000000000;;		s.InstanceCount = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceType sets the InstanceType field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstance) SetInstanceType(v string) *ScheduledInstance {
0000000000000000000000000000000000000000;;		s.InstanceType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNetworkPlatform sets the NetworkPlatform field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstance) SetNetworkPlatform(v string) *ScheduledInstance {
0000000000000000000000000000000000000000;;		s.NetworkPlatform = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextSlotStartTime sets the NextSlotStartTime field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstance) SetNextSlotStartTime(v time.Time) *ScheduledInstance {
0000000000000000000000000000000000000000;;		s.NextSlotStartTime = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPlatform sets the Platform field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstance) SetPlatform(v string) *ScheduledInstance {
0000000000000000000000000000000000000000;;		s.Platform = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPreviousSlotEndTime sets the PreviousSlotEndTime field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstance) SetPreviousSlotEndTime(v time.Time) *ScheduledInstance {
0000000000000000000000000000000000000000;;		s.PreviousSlotEndTime = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRecurrence sets the Recurrence field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstance) SetRecurrence(v *ScheduledInstanceRecurrence) *ScheduledInstance {
0000000000000000000000000000000000000000;;		s.Recurrence = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetScheduledInstanceId sets the ScheduledInstanceId field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstance) SetScheduledInstanceId(v string) *ScheduledInstance {
0000000000000000000000000000000000000000;;		s.ScheduledInstanceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSlotDurationInHours sets the SlotDurationInHours field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstance) SetSlotDurationInHours(v int64) *ScheduledInstance {
0000000000000000000000000000000000000000;;		s.SlotDurationInHours = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTermEndDate sets the TermEndDate field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstance) SetTermEndDate(v time.Time) *ScheduledInstance {
0000000000000000000000000000000000000000;;		s.TermEndDate = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTermStartDate sets the TermStartDate field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstance) SetTermStartDate(v time.Time) *ScheduledInstance {
0000000000000000000000000000000000000000;;		s.TermStartDate = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTotalScheduledInstanceHours sets the TotalScheduledInstanceHours field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstance) SetTotalScheduledInstanceHours(v int64) *ScheduledInstance {
0000000000000000000000000000000000000000;;		s.TotalScheduledInstanceHours = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a schedule that is available for your Scheduled Instances.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ScheduledInstanceAvailability
0000000000000000000000000000000000000000;;	type ScheduledInstanceAvailability struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Availability Zone.
0000000000000000000000000000000000000000;;		AvailabilityZone *string `locationName:"availabilityZone" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of available instances.
0000000000000000000000000000000000000000;;		AvailableInstanceCount *int64 `locationName:"availableInstanceCount" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The time period for the first schedule to start.
0000000000000000000000000000000000000000;;		FirstSlotStartTime *time.Time `locationName:"firstSlotStartTime" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The hourly price for a single instance.
0000000000000000000000000000000000000000;;		HourlyPrice *string `locationName:"hourlyPrice" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The instance type. You can specify one of the C3, C4, M4, or R3 instance
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		InstanceType *string `locationName:"instanceType" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum term. The only possible value is 365 days.
0000000000000000000000000000000000000000;;		MaxTermDurationInDays *int64 `locationName:"maxTermDurationInDays" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The minimum term. The only possible value is 365 days.
0000000000000000000000000000000000000000;;		MinTermDurationInDays *int64 `locationName:"minTermDurationInDays" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The network platform (EC2-Classic or EC2-VPC).
0000000000000000000000000000000000000000;;		NetworkPlatform *string `locationName:"networkPlatform" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The platform (Linux/UNIX or Windows).
0000000000000000000000000000000000000000;;		Platform *string `locationName:"platform" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The purchase token. This token expires in two hours.
0000000000000000000000000000000000000000;;		PurchaseToken *string `locationName:"purchaseToken" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The schedule recurrence.
0000000000000000000000000000000000000000;;		Recurrence *ScheduledInstanceRecurrence `locationName:"recurrence" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of hours in the schedule.
0000000000000000000000000000000000000000;;		SlotDurationInHours *int64 `locationName:"slotDurationInHours" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The total number of hours for a single instance for the entire term.
0000000000000000000000000000000000000000;;		TotalScheduledInstanceHours *int64 `locationName:"totalScheduledInstanceHours" type:"integer"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ScheduledInstanceAvailability) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ScheduledInstanceAvailability) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAvailabilityZone sets the AvailabilityZone field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstanceAvailability) SetAvailabilityZone(v string) *ScheduledInstanceAvailability {
0000000000000000000000000000000000000000;;		s.AvailabilityZone = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAvailableInstanceCount sets the AvailableInstanceCount field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstanceAvailability) SetAvailableInstanceCount(v int64) *ScheduledInstanceAvailability {
0000000000000000000000000000000000000000;;		s.AvailableInstanceCount = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFirstSlotStartTime sets the FirstSlotStartTime field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstanceAvailability) SetFirstSlotStartTime(v time.Time) *ScheduledInstanceAvailability {
0000000000000000000000000000000000000000;;		s.FirstSlotStartTime = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHourlyPrice sets the HourlyPrice field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstanceAvailability) SetHourlyPrice(v string) *ScheduledInstanceAvailability {
0000000000000000000000000000000000000000;;		s.HourlyPrice = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceType sets the InstanceType field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstanceAvailability) SetInstanceType(v string) *ScheduledInstanceAvailability {
0000000000000000000000000000000000000000;;		s.InstanceType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxTermDurationInDays sets the MaxTermDurationInDays field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstanceAvailability) SetMaxTermDurationInDays(v int64) *ScheduledInstanceAvailability {
0000000000000000000000000000000000000000;;		s.MaxTermDurationInDays = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMinTermDurationInDays sets the MinTermDurationInDays field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstanceAvailability) SetMinTermDurationInDays(v int64) *ScheduledInstanceAvailability {
0000000000000000000000000000000000000000;;		s.MinTermDurationInDays = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNetworkPlatform sets the NetworkPlatform field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstanceAvailability) SetNetworkPlatform(v string) *ScheduledInstanceAvailability {
0000000000000000000000000000000000000000;;		s.NetworkPlatform = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPlatform sets the Platform field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstanceAvailability) SetPlatform(v string) *ScheduledInstanceAvailability {
0000000000000000000000000000000000000000;;		s.Platform = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPurchaseToken sets the PurchaseToken field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstanceAvailability) SetPurchaseToken(v string) *ScheduledInstanceAvailability {
0000000000000000000000000000000000000000;;		s.PurchaseToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRecurrence sets the Recurrence field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstanceAvailability) SetRecurrence(v *ScheduledInstanceRecurrence) *ScheduledInstanceAvailability {
0000000000000000000000000000000000000000;;		s.Recurrence = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSlotDurationInHours sets the SlotDurationInHours field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstanceAvailability) SetSlotDurationInHours(v int64) *ScheduledInstanceAvailability {
0000000000000000000000000000000000000000;;		s.SlotDurationInHours = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTotalScheduledInstanceHours sets the TotalScheduledInstanceHours field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstanceAvailability) SetTotalScheduledInstanceHours(v int64) *ScheduledInstanceAvailability {
0000000000000000000000000000000000000000;;		s.TotalScheduledInstanceHours = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the recurring schedule for a Scheduled Instance.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ScheduledInstanceRecurrence
0000000000000000000000000000000000000000;;	type ScheduledInstanceRecurrence struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The frequency (Daily, Weekly, or Monthly).
0000000000000000000000000000000000000000;;		Frequency *string `locationName:"frequency" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The interval quantity. The interval unit depends on the value of frequency.
0000000000000000000000000000000000000000;;		// For example, every 2 weeks or every 2 months.
0000000000000000000000000000000000000000;;		Interval *int64 `locationName:"interval" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The days. For a monthly schedule, this is one or more days of the month (1-31).
0000000000000000000000000000000000000000;;		// For a weekly schedule, this is one or more days of the week (1-7, where 1
0000000000000000000000000000000000000000;;		// is Sunday).
0000000000000000000000000000000000000000;;		OccurrenceDaySet []*int64 `locationName:"occurrenceDaySet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether the occurrence is relative to the end of the specified
0000000000000000000000000000000000000000;;		// week or month.
0000000000000000000000000000000000000000;;		OccurrenceRelativeToEnd *bool `locationName:"occurrenceRelativeToEnd" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The unit for occurrenceDaySet (DayOfWeek or DayOfMonth).
0000000000000000000000000000000000000000;;		OccurrenceUnit *string `locationName:"occurrenceUnit" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ScheduledInstanceRecurrence) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ScheduledInstanceRecurrence) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFrequency sets the Frequency field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstanceRecurrence) SetFrequency(v string) *ScheduledInstanceRecurrence {
0000000000000000000000000000000000000000;;		s.Frequency = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInterval sets the Interval field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstanceRecurrence) SetInterval(v int64) *ScheduledInstanceRecurrence {
0000000000000000000000000000000000000000;;		s.Interval = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetOccurrenceDaySet sets the OccurrenceDaySet field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstanceRecurrence) SetOccurrenceDaySet(v []*int64) *ScheduledInstanceRecurrence {
0000000000000000000000000000000000000000;;		s.OccurrenceDaySet = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetOccurrenceRelativeToEnd sets the OccurrenceRelativeToEnd field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstanceRecurrence) SetOccurrenceRelativeToEnd(v bool) *ScheduledInstanceRecurrence {
0000000000000000000000000000000000000000;;		s.OccurrenceRelativeToEnd = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetOccurrenceUnit sets the OccurrenceUnit field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstanceRecurrence) SetOccurrenceUnit(v string) *ScheduledInstanceRecurrence {
0000000000000000000000000000000000000000;;		s.OccurrenceUnit = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the recurring schedule for a Scheduled Instance.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ScheduledInstanceRecurrenceRequest
0000000000000000000000000000000000000000;;	type ScheduledInstanceRecurrenceRequest struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The frequency (Daily, Weekly, or Monthly).
0000000000000000000000000000000000000000;;		Frequency *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The interval quantity. The interval unit depends on the value of Frequency.
0000000000000000000000000000000000000000;;		// For example, every 2 weeks or every 2 months.
0000000000000000000000000000000000000000;;		Interval *int64 `type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The days. For a monthly schedule, this is one or more days of the month (1-31).
0000000000000000000000000000000000000000;;		// For a weekly schedule, this is one or more days of the week (1-7, where 1
0000000000000000000000000000000000000000;;		// is Sunday). You can't specify this value with a daily schedule. If the occurrence
0000000000000000000000000000000000000000;;		// is relative to the end of the month, you can specify only a single day.
0000000000000000000000000000000000000000;;		OccurrenceDays []*int64 `locationName:"OccurrenceDay" locationNameList:"OccurenceDay" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether the occurrence is relative to the end of the specified
0000000000000000000000000000000000000000;;		// week or month. You can't specify this value with a daily schedule.
0000000000000000000000000000000000000000;;		OccurrenceRelativeToEnd *bool `type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The unit for OccurrenceDays (DayOfWeek or DayOfMonth). This value is required
0000000000000000000000000000000000000000;;		// for a monthly schedule. You can't specify DayOfWeek with a weekly schedule.
0000000000000000000000000000000000000000;;		// You can't specify this value with a daily schedule.
0000000000000000000000000000000000000000;;		OccurrenceUnit *string `type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ScheduledInstanceRecurrenceRequest) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ScheduledInstanceRecurrenceRequest) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFrequency sets the Frequency field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstanceRecurrenceRequest) SetFrequency(v string) *ScheduledInstanceRecurrenceRequest {
0000000000000000000000000000000000000000;;		s.Frequency = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInterval sets the Interval field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstanceRecurrenceRequest) SetInterval(v int64) *ScheduledInstanceRecurrenceRequest {
0000000000000000000000000000000000000000;;		s.Interval = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetOccurrenceDays sets the OccurrenceDays field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstanceRecurrenceRequest) SetOccurrenceDays(v []*int64) *ScheduledInstanceRecurrenceRequest {
0000000000000000000000000000000000000000;;		s.OccurrenceDays = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetOccurrenceRelativeToEnd sets the OccurrenceRelativeToEnd field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstanceRecurrenceRequest) SetOccurrenceRelativeToEnd(v bool) *ScheduledInstanceRecurrenceRequest {
0000000000000000000000000000000000000000;;		s.OccurrenceRelativeToEnd = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetOccurrenceUnit sets the OccurrenceUnit field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstanceRecurrenceRequest) SetOccurrenceUnit(v string) *ScheduledInstanceRecurrenceRequest {
0000000000000000000000000000000000000000;;		s.OccurrenceUnit = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a block device mapping for a Scheduled Instance.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ScheduledInstancesBlockDeviceMapping
0000000000000000000000000000000000000000;;	type ScheduledInstancesBlockDeviceMapping struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The device name exposed to the instance (for example, /dev/sdh or xvdh).
0000000000000000000000000000000000000000;;		DeviceName *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Parameters used to set up EBS volumes automatically when the instance is
0000000000000000000000000000000000000000;;		// launched.
0000000000000000000000000000000000000000;;		Ebs *ScheduledInstancesEbs `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Suppresses the specified device included in the block device mapping of the
0000000000000000000000000000000000000000;;		// AMI.
0000000000000000000000000000000000000000;;		NoDevice *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The virtual device name (ephemeralN). Instance store volumes are numbered
0000000000000000000000000000000000000000;;		// starting from 0. An instance type with two available instance store volumes
0000000000000000000000000000000000000000;;		// can specify mappings for ephemeral0 and ephemeral1.The number of available
0000000000000000000000000000000000000000;;		// instance store volumes depends on the instance type. After you connect to
0000000000000000000000000000000000000000;;		// the instance, you must mount the volume.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Constraints: For M3 instances, you must specify instance store volumes in
0000000000000000000000000000000000000000;;		// the block device mapping for the instance. When you launch an M3 instance,
0000000000000000000000000000000000000000;;		// we ignore any instance store volumes specified in the block device mapping
0000000000000000000000000000000000000000;;		// for the AMI.
0000000000000000000000000000000000000000;;		VirtualName *string `type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ScheduledInstancesBlockDeviceMapping) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ScheduledInstancesBlockDeviceMapping) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDeviceName sets the DeviceName field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstancesBlockDeviceMapping) SetDeviceName(v string) *ScheduledInstancesBlockDeviceMapping {
0000000000000000000000000000000000000000;;		s.DeviceName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEbs sets the Ebs field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstancesBlockDeviceMapping) SetEbs(v *ScheduledInstancesEbs) *ScheduledInstancesBlockDeviceMapping {
0000000000000000000000000000000000000000;;		s.Ebs = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNoDevice sets the NoDevice field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstancesBlockDeviceMapping) SetNoDevice(v string) *ScheduledInstancesBlockDeviceMapping {
0000000000000000000000000000000000000000;;		s.NoDevice = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVirtualName sets the VirtualName field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstancesBlockDeviceMapping) SetVirtualName(v string) *ScheduledInstancesBlockDeviceMapping {
0000000000000000000000000000000000000000;;		s.VirtualName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes an EBS volume for a Scheduled Instance.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ScheduledInstancesEbs
0000000000000000000000000000000000000000;;	type ScheduledInstancesEbs struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether the volume is deleted on instance termination.
0000000000000000000000000000000000000000;;		DeleteOnTermination *bool `type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether the volume is encrypted. You can attached encrypted volumes
0000000000000000000000000000000000000000;;		// only to instances that support them.
0000000000000000000000000000000000000000;;		Encrypted *bool `type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of I/O operations per second (IOPS) that the volume supports.
0000000000000000000000000000000000000000;;		// For io1 volumes, this represents the number of IOPS that are provisioned
0000000000000000000000000000000000000000;;		// for the volume. For gp2 volumes, this represents the baseline performance
0000000000000000000000000000000000000000;;		// of the volume and the rate at which the volume accumulates I/O credits for
0000000000000000000000000000000000000000;;		// bursting. For more information about gp2 baseline performance, I/O credits,
0000000000000000000000000000000000000000;;		// and bursting, see Amazon EBS Volume Types (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html)
0000000000000000000000000000000000000000;;		// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Constraint: Range is 100-20000 IOPS for io1 volumes and 100-10000 IOPS for
0000000000000000000000000000000000000000;;		// gp2 volumes.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Condition: This parameter is required for requests to create io1volumes;
0000000000000000000000000000000000000000;;		// it is not used in requests to create gp2, st1, sc1, or standard volumes.
0000000000000000000000000000000000000000;;		Iops *int64 `type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the snapshot.
0000000000000000000000000000000000000000;;		SnapshotId *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The size of the volume, in GiB.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: If you're creating the volume from a snapshot and don't specify
0000000000000000000000000000000000000000;;		// a volume size, the default is the snapshot size.
0000000000000000000000000000000000000000;;		VolumeSize *int64 `type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The volume type. gp2 for General Purpose SSD, io1 for Provisioned IOPS SSD,
0000000000000000000000000000000000000000;;		// Throughput Optimized HDD for st1, Cold HDD for sc1, or standard for Magnetic.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: standard
0000000000000000000000000000000000000000;;		VolumeType *string `type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ScheduledInstancesEbs) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ScheduledInstancesEbs) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDeleteOnTermination sets the DeleteOnTermination field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstancesEbs) SetDeleteOnTermination(v bool) *ScheduledInstancesEbs {
0000000000000000000000000000000000000000;;		s.DeleteOnTermination = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEncrypted sets the Encrypted field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstancesEbs) SetEncrypted(v bool) *ScheduledInstancesEbs {
0000000000000000000000000000000000000000;;		s.Encrypted = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIops sets the Iops field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstancesEbs) SetIops(v int64) *ScheduledInstancesEbs {
0000000000000000000000000000000000000000;;		s.Iops = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSnapshotId sets the SnapshotId field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstancesEbs) SetSnapshotId(v string) *ScheduledInstancesEbs {
0000000000000000000000000000000000000000;;		s.SnapshotId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVolumeSize sets the VolumeSize field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstancesEbs) SetVolumeSize(v int64) *ScheduledInstancesEbs {
0000000000000000000000000000000000000000;;		s.VolumeSize = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVolumeType sets the VolumeType field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstancesEbs) SetVolumeType(v string) *ScheduledInstancesEbs {
0000000000000000000000000000000000000000;;		s.VolumeType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes an IAM instance profile for a Scheduled Instance.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ScheduledInstancesIamInstanceProfile
0000000000000000000000000000000000000000;;	type ScheduledInstancesIamInstanceProfile struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Amazon Resource Name (ARN).
0000000000000000000000000000000000000000;;		Arn *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name.
0000000000000000000000000000000000000000;;		Name *string `type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ScheduledInstancesIamInstanceProfile) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ScheduledInstancesIamInstanceProfile) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetArn sets the Arn field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstancesIamInstanceProfile) SetArn(v string) *ScheduledInstancesIamInstanceProfile {
0000000000000000000000000000000000000000;;		s.Arn = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetName sets the Name field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstancesIamInstanceProfile) SetName(v string) *ScheduledInstancesIamInstanceProfile {
0000000000000000000000000000000000000000;;		s.Name = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes an IPv6 address.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ScheduledInstancesIpv6Address
0000000000000000000000000000000000000000;;	type ScheduledInstancesIpv6Address struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IPv6 address.
0000000000000000000000000000000000000000;;		Ipv6Address *string `type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ScheduledInstancesIpv6Address) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ScheduledInstancesIpv6Address) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpv6Address sets the Ipv6Address field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstancesIpv6Address) SetIpv6Address(v string) *ScheduledInstancesIpv6Address {
0000000000000000000000000000000000000000;;		s.Ipv6Address = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the launch specification for a Scheduled Instance.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If you are launching the Scheduled Instance in EC2-VPC, you must specify
0000000000000000000000000000000000000000;;	// the ID of the subnet. You can specify the subnet using either SubnetId or
0000000000000000000000000000000000000000;;	// NetworkInterface.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ScheduledInstancesLaunchSpecification
0000000000000000000000000000000000000000;;	type ScheduledInstancesLaunchSpecification struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more block device mapping entries.
0000000000000000000000000000000000000000;;		BlockDeviceMappings []*ScheduledInstancesBlockDeviceMapping `locationName:"BlockDeviceMapping" locationNameList:"BlockDeviceMapping" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether the instances are optimized for EBS I/O. This optimization
0000000000000000000000000000000000000000;;		// provides dedicated throughput to Amazon EBS and an optimized configuration
0000000000000000000000000000000000000000;;		// stack to provide optimal EBS I/O performance. This optimization isn't available
0000000000000000000000000000000000000000;;		// with all instance types. Additional usage charges apply when using an EBS-optimized
0000000000000000000000000000000000000000;;		// instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: false
0000000000000000000000000000000000000000;;		EbsOptimized *bool `type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IAM instance profile.
0000000000000000000000000000000000000000;;		IamInstanceProfile *ScheduledInstancesIamInstanceProfile `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the Amazon Machine Image (AMI).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ImageId is a required field
0000000000000000000000000000000000000000;;		ImageId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The instance type.
0000000000000000000000000000000000000000;;		InstanceType *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the kernel.
0000000000000000000000000000000000000000;;		KernelId *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the key pair.
0000000000000000000000000000000000000000;;		KeyName *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Enable or disable monitoring for the instances.
0000000000000000000000000000000000000000;;		Monitoring *ScheduledInstancesMonitoring `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more network interfaces.
0000000000000000000000000000000000000000;;		NetworkInterfaces []*ScheduledInstancesNetworkInterface `locationName:"NetworkInterface" locationNameList:"NetworkInterface" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The placement information.
0000000000000000000000000000000000000000;;		Placement *ScheduledInstancesPlacement `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the RAM disk.
0000000000000000000000000000000000000000;;		RamdiskId *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IDs of one or more security groups.
0000000000000000000000000000000000000000;;		SecurityGroupIds []*string `locationName:"SecurityGroupId" locationNameList:"SecurityGroupId" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the subnet in which to launch the instances.
0000000000000000000000000000000000000000;;		SubnetId *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The base64-encoded MIME user data.
0000000000000000000000000000000000000000;;		UserData *string `type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ScheduledInstancesLaunchSpecification) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ScheduledInstancesLaunchSpecification) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstancesLaunchSpecification) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "ScheduledInstancesLaunchSpecification"}
0000000000000000000000000000000000000000;;		if s.ImageId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("ImageId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetBlockDeviceMappings sets the BlockDeviceMappings field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstancesLaunchSpecification) SetBlockDeviceMappings(v []*ScheduledInstancesBlockDeviceMapping) *ScheduledInstancesLaunchSpecification {
0000000000000000000000000000000000000000;;		s.BlockDeviceMappings = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEbsOptimized sets the EbsOptimized field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstancesLaunchSpecification) SetEbsOptimized(v bool) *ScheduledInstancesLaunchSpecification {
0000000000000000000000000000000000000000;;		s.EbsOptimized = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIamInstanceProfile sets the IamInstanceProfile field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstancesLaunchSpecification) SetIamInstanceProfile(v *ScheduledInstancesIamInstanceProfile) *ScheduledInstancesLaunchSpecification {
0000000000000000000000000000000000000000;;		s.IamInstanceProfile = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetImageId sets the ImageId field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstancesLaunchSpecification) SetImageId(v string) *ScheduledInstancesLaunchSpecification {
0000000000000000000000000000000000000000;;		s.ImageId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceType sets the InstanceType field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstancesLaunchSpecification) SetInstanceType(v string) *ScheduledInstancesLaunchSpecification {
0000000000000000000000000000000000000000;;		s.InstanceType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetKernelId sets the KernelId field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstancesLaunchSpecification) SetKernelId(v string) *ScheduledInstancesLaunchSpecification {
0000000000000000000000000000000000000000;;		s.KernelId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetKeyName sets the KeyName field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstancesLaunchSpecification) SetKeyName(v string) *ScheduledInstancesLaunchSpecification {
0000000000000000000000000000000000000000;;		s.KeyName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMonitoring sets the Monitoring field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstancesLaunchSpecification) SetMonitoring(v *ScheduledInstancesMonitoring) *ScheduledInstancesLaunchSpecification {
0000000000000000000000000000000000000000;;		s.Monitoring = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNetworkInterfaces sets the NetworkInterfaces field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstancesLaunchSpecification) SetNetworkInterfaces(v []*ScheduledInstancesNetworkInterface) *ScheduledInstancesLaunchSpecification {
0000000000000000000000000000000000000000;;		s.NetworkInterfaces = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPlacement sets the Placement field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstancesLaunchSpecification) SetPlacement(v *ScheduledInstancesPlacement) *ScheduledInstancesLaunchSpecification {
0000000000000000000000000000000000000000;;		s.Placement = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRamdiskId sets the RamdiskId field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstancesLaunchSpecification) SetRamdiskId(v string) *ScheduledInstancesLaunchSpecification {
0000000000000000000000000000000000000000;;		s.RamdiskId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSecurityGroupIds sets the SecurityGroupIds field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstancesLaunchSpecification) SetSecurityGroupIds(v []*string) *ScheduledInstancesLaunchSpecification {
0000000000000000000000000000000000000000;;		s.SecurityGroupIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSubnetId sets the SubnetId field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstancesLaunchSpecification) SetSubnetId(v string) *ScheduledInstancesLaunchSpecification {
0000000000000000000000000000000000000000;;		s.SubnetId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUserData sets the UserData field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstancesLaunchSpecification) SetUserData(v string) *ScheduledInstancesLaunchSpecification {
0000000000000000000000000000000000000000;;		s.UserData = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes whether monitoring is enabled for a Scheduled Instance.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ScheduledInstancesMonitoring
0000000000000000000000000000000000000000;;	type ScheduledInstancesMonitoring struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether monitoring is enabled.
0000000000000000000000000000000000000000;;		Enabled *bool `type:"boolean"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ScheduledInstancesMonitoring) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ScheduledInstancesMonitoring) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEnabled sets the Enabled field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstancesMonitoring) SetEnabled(v bool) *ScheduledInstancesMonitoring {
0000000000000000000000000000000000000000;;		s.Enabled = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a network interface for a Scheduled Instance.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ScheduledInstancesNetworkInterface
0000000000000000000000000000000000000000;;	type ScheduledInstancesNetworkInterface struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether to assign a public IPv4 address to instances launched in
0000000000000000000000000000000000000000;;		// a VPC. The public IPv4 address can only be assigned to a network interface
0000000000000000000000000000000000000000;;		// for eth0, and can only be assigned to a new network interface, not an existing
0000000000000000000000000000000000000000;;		// one. You cannot specify more than one network interface in the request. If
0000000000000000000000000000000000000000;;		// launching into a default subnet, the default value is true.
0000000000000000000000000000000000000000;;		AssociatePublicIpAddress *bool `type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether to delete the interface when the instance is terminated.
0000000000000000000000000000000000000000;;		DeleteOnTermination *bool `type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The description.
0000000000000000000000000000000000000000;;		Description *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The index of the device for the network interface attachment.
0000000000000000000000000000000000000000;;		DeviceIndex *int64 `type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IDs of one or more security groups.
0000000000000000000000000000000000000000;;		Groups []*string `locationName:"Group" locationNameList:"SecurityGroupId" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of IPv6 addresses to assign to the network interface. The IPv6
0000000000000000000000000000000000000000;;		// addresses are automatically selected from the subnet range.
0000000000000000000000000000000000000000;;		Ipv6AddressCount *int64 `type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more specific IPv6 addresses from the subnet range.
0000000000000000000000000000000000000000;;		Ipv6Addresses []*ScheduledInstancesIpv6Address `locationName:"Ipv6Address" locationNameList:"Ipv6Address" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the network interface.
0000000000000000000000000000000000000000;;		NetworkInterfaceId *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IPv4 address of the network interface within the subnet.
0000000000000000000000000000000000000000;;		PrivateIpAddress *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The private IPv4 addresses.
0000000000000000000000000000000000000000;;		PrivateIpAddressConfigs []*ScheduledInstancesPrivateIpAddressConfig `locationName:"PrivateIpAddressConfig" locationNameList:"PrivateIpAddressConfigSet" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of secondary private IPv4 addresses.
0000000000000000000000000000000000000000;;		SecondaryPrivateIpAddressCount *int64 `type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the subnet.
0000000000000000000000000000000000000000;;		SubnetId *string `type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ScheduledInstancesNetworkInterface) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ScheduledInstancesNetworkInterface) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAssociatePublicIpAddress sets the AssociatePublicIpAddress field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstancesNetworkInterface) SetAssociatePublicIpAddress(v bool) *ScheduledInstancesNetworkInterface {
0000000000000000000000000000000000000000;;		s.AssociatePublicIpAddress = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDeleteOnTermination sets the DeleteOnTermination field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstancesNetworkInterface) SetDeleteOnTermination(v bool) *ScheduledInstancesNetworkInterface {
0000000000000000000000000000000000000000;;		s.DeleteOnTermination = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDescription sets the Description field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstancesNetworkInterface) SetDescription(v string) *ScheduledInstancesNetworkInterface {
0000000000000000000000000000000000000000;;		s.Description = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDeviceIndex sets the DeviceIndex field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstancesNetworkInterface) SetDeviceIndex(v int64) *ScheduledInstancesNetworkInterface {
0000000000000000000000000000000000000000;;		s.DeviceIndex = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroups sets the Groups field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstancesNetworkInterface) SetGroups(v []*string) *ScheduledInstancesNetworkInterface {
0000000000000000000000000000000000000000;;		s.Groups = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpv6AddressCount sets the Ipv6AddressCount field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstancesNetworkInterface) SetIpv6AddressCount(v int64) *ScheduledInstancesNetworkInterface {
0000000000000000000000000000000000000000;;		s.Ipv6AddressCount = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpv6Addresses sets the Ipv6Addresses field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstancesNetworkInterface) SetIpv6Addresses(v []*ScheduledInstancesIpv6Address) *ScheduledInstancesNetworkInterface {
0000000000000000000000000000000000000000;;		s.Ipv6Addresses = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNetworkInterfaceId sets the NetworkInterfaceId field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstancesNetworkInterface) SetNetworkInterfaceId(v string) *ScheduledInstancesNetworkInterface {
0000000000000000000000000000000000000000;;		s.NetworkInterfaceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrivateIpAddress sets the PrivateIpAddress field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstancesNetworkInterface) SetPrivateIpAddress(v string) *ScheduledInstancesNetworkInterface {
0000000000000000000000000000000000000000;;		s.PrivateIpAddress = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrivateIpAddressConfigs sets the PrivateIpAddressConfigs field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstancesNetworkInterface) SetPrivateIpAddressConfigs(v []*ScheduledInstancesPrivateIpAddressConfig) *ScheduledInstancesNetworkInterface {
0000000000000000000000000000000000000000;;		s.PrivateIpAddressConfigs = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSecondaryPrivateIpAddressCount sets the SecondaryPrivateIpAddressCount field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstancesNetworkInterface) SetSecondaryPrivateIpAddressCount(v int64) *ScheduledInstancesNetworkInterface {
0000000000000000000000000000000000000000;;		s.SecondaryPrivateIpAddressCount = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSubnetId sets the SubnetId field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstancesNetworkInterface) SetSubnetId(v string) *ScheduledInstancesNetworkInterface {
0000000000000000000000000000000000000000;;		s.SubnetId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the placement for a Scheduled Instance.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ScheduledInstancesPlacement
0000000000000000000000000000000000000000;;	type ScheduledInstancesPlacement struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Availability Zone.
0000000000000000000000000000000000000000;;		AvailabilityZone *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the placement group.
0000000000000000000000000000000000000000;;		GroupName *string `type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ScheduledInstancesPlacement) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ScheduledInstancesPlacement) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAvailabilityZone sets the AvailabilityZone field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstancesPlacement) SetAvailabilityZone(v string) *ScheduledInstancesPlacement {
0000000000000000000000000000000000000000;;		s.AvailabilityZone = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroupName sets the GroupName field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstancesPlacement) SetGroupName(v string) *ScheduledInstancesPlacement {
0000000000000000000000000000000000000000;;		s.GroupName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a private IPv4 address for a Scheduled Instance.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/ScheduledInstancesPrivateIpAddressConfig
0000000000000000000000000000000000000000;;	type ScheduledInstancesPrivateIpAddressConfig struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether this is a primary IPv4 address. Otherwise, this is a secondary
0000000000000000000000000000000000000000;;		// IPv4 address.
0000000000000000000000000000000000000000;;		Primary *bool `type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IPv4 address.
0000000000000000000000000000000000000000;;		PrivateIpAddress *string `type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ScheduledInstancesPrivateIpAddressConfig) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ScheduledInstancesPrivateIpAddressConfig) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrimary sets the Primary field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstancesPrivateIpAddressConfig) SetPrimary(v bool) *ScheduledInstancesPrivateIpAddressConfig {
0000000000000000000000000000000000000000;;		s.Primary = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrivateIpAddress sets the PrivateIpAddress field's value.
0000000000000000000000000000000000000000;;	func (s *ScheduledInstancesPrivateIpAddressConfig) SetPrivateIpAddress(v string) *ScheduledInstancesPrivateIpAddressConfig {
0000000000000000000000000000000000000000;;		s.PrivateIpAddress = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a security group
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/SecurityGroup
0000000000000000000000000000000000000000;;	type SecurityGroup struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A description of the security group.
0000000000000000000000000000000000000000;;		Description *string `locationName:"groupDescription" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the security group.
0000000000000000000000000000000000000000;;		GroupId *string `locationName:"groupId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the security group.
0000000000000000000000000000000000000000;;		GroupName *string `locationName:"groupName" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more inbound rules associated with the security group.
0000000000000000000000000000000000000000;;		IpPermissions []*IpPermission `locationName:"ipPermissions" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// [EC2-VPC] One or more outbound rules associated with the security group.
0000000000000000000000000000000000000000;;		IpPermissionsEgress []*IpPermission `locationName:"ipPermissionsEgress" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The AWS account ID of the owner of the security group.
0000000000000000000000000000000000000000;;		OwnerId *string `locationName:"ownerId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Any tags assigned to the security group.
0000000000000000000000000000000000000000;;		Tags []*Tag `locationName:"tagSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// [EC2-VPC] The ID of the VPC for the security group.
0000000000000000000000000000000000000000;;		VpcId *string `locationName:"vpcId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s SecurityGroup) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s SecurityGroup) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDescription sets the Description field's value.
0000000000000000000000000000000000000000;;	func (s *SecurityGroup) SetDescription(v string) *SecurityGroup {
0000000000000000000000000000000000000000;;		s.Description = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroupId sets the GroupId field's value.
0000000000000000000000000000000000000000;;	func (s *SecurityGroup) SetGroupId(v string) *SecurityGroup {
0000000000000000000000000000000000000000;;		s.GroupId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroupName sets the GroupName field's value.
0000000000000000000000000000000000000000;;	func (s *SecurityGroup) SetGroupName(v string) *SecurityGroup {
0000000000000000000000000000000000000000;;		s.GroupName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpPermissions sets the IpPermissions field's value.
0000000000000000000000000000000000000000;;	func (s *SecurityGroup) SetIpPermissions(v []*IpPermission) *SecurityGroup {
0000000000000000000000000000000000000000;;		s.IpPermissions = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpPermissionsEgress sets the IpPermissionsEgress field's value.
0000000000000000000000000000000000000000;;	func (s *SecurityGroup) SetIpPermissionsEgress(v []*IpPermission) *SecurityGroup {
0000000000000000000000000000000000000000;;		s.IpPermissionsEgress = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetOwnerId sets the OwnerId field's value.
0000000000000000000000000000000000000000;;	func (s *SecurityGroup) SetOwnerId(v string) *SecurityGroup {
0000000000000000000000000000000000000000;;		s.OwnerId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTags sets the Tags field's value.
0000000000000000000000000000000000000000;;	func (s *SecurityGroup) SetTags(v []*Tag) *SecurityGroup {
0000000000000000000000000000000000000000;;		s.Tags = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcId sets the VpcId field's value.
0000000000000000000000000000000000000000;;	func (s *SecurityGroup) SetVpcId(v string) *SecurityGroup {
0000000000000000000000000000000000000000;;		s.VpcId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a VPC with a security group that references your security group.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/SecurityGroupReference
0000000000000000000000000000000000000000;;	type SecurityGroupReference struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of your security group.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// GroupId is a required field
0000000000000000000000000000000000000000;;		GroupId *string `locationName:"groupId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC with the referencing security group.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ReferencingVpcId is a required field
0000000000000000000000000000000000000000;;		ReferencingVpcId *string `locationName:"referencingVpcId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC peering connection.
0000000000000000000000000000000000000000;;		VpcPeeringConnectionId *string `locationName:"vpcPeeringConnectionId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s SecurityGroupReference) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s SecurityGroupReference) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroupId sets the GroupId field's value.
0000000000000000000000000000000000000000;;	func (s *SecurityGroupReference) SetGroupId(v string) *SecurityGroupReference {
0000000000000000000000000000000000000000;;		s.GroupId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReferencingVpcId sets the ReferencingVpcId field's value.
0000000000000000000000000000000000000000;;	func (s *SecurityGroupReference) SetReferencingVpcId(v string) *SecurityGroupReference {
0000000000000000000000000000000000000000;;		s.ReferencingVpcId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcPeeringConnectionId sets the VpcPeeringConnectionId field's value.
0000000000000000000000000000000000000000;;	func (s *SecurityGroupReference) SetVpcPeeringConnectionId(v string) *SecurityGroupReference {
0000000000000000000000000000000000000000;;		s.VpcPeeringConnectionId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the time period for a Scheduled Instance to start its first schedule.
0000000000000000000000000000000000000000;;	// The time period must span less than one day.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/SlotDateTimeRangeRequest
0000000000000000000000000000000000000000;;	type SlotDateTimeRangeRequest struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The earliest date and time, in UTC, for the Scheduled Instance to start.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// EarliestTime is a required field
0000000000000000000000000000000000000000;;		EarliestTime *time.Time `type:"timestamp" timestampFormat:"iso8601" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The latest date and time, in UTC, for the Scheduled Instance to start. This
0000000000000000000000000000000000000000;;		// value must be later than or equal to the earliest date and at most three
0000000000000000000000000000000000000000;;		// months in the future.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// LatestTime is a required field
0000000000000000000000000000000000000000;;		LatestTime *time.Time `type:"timestamp" timestampFormat:"iso8601" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s SlotDateTimeRangeRequest) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s SlotDateTimeRangeRequest) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *SlotDateTimeRangeRequest) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "SlotDateTimeRangeRequest"}
0000000000000000000000000000000000000000;;		if s.EarliestTime == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("EarliestTime"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.LatestTime == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("LatestTime"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEarliestTime sets the EarliestTime field's value.
0000000000000000000000000000000000000000;;	func (s *SlotDateTimeRangeRequest) SetEarliestTime(v time.Time) *SlotDateTimeRangeRequest {
0000000000000000000000000000000000000000;;		s.EarliestTime = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetLatestTime sets the LatestTime field's value.
0000000000000000000000000000000000000000;;	func (s *SlotDateTimeRangeRequest) SetLatestTime(v time.Time) *SlotDateTimeRangeRequest {
0000000000000000000000000000000000000000;;		s.LatestTime = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the time period for a Scheduled Instance to start its first schedule.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/SlotStartTimeRangeRequest
0000000000000000000000000000000000000000;;	type SlotStartTimeRangeRequest struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The earliest date and time, in UTC, for the Scheduled Instance to start.
0000000000000000000000000000000000000000;;		EarliestTime *time.Time `type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The latest date and time, in UTC, for the Scheduled Instance to start.
0000000000000000000000000000000000000000;;		LatestTime *time.Time `type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s SlotStartTimeRangeRequest) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s SlotStartTimeRangeRequest) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEarliestTime sets the EarliestTime field's value.
0000000000000000000000000000000000000000;;	func (s *SlotStartTimeRangeRequest) SetEarliestTime(v time.Time) *SlotStartTimeRangeRequest {
0000000000000000000000000000000000000000;;		s.EarliestTime = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetLatestTime sets the LatestTime field's value.
0000000000000000000000000000000000000000;;	func (s *SlotStartTimeRangeRequest) SetLatestTime(v time.Time) *SlotStartTimeRangeRequest {
0000000000000000000000000000000000000000;;		s.LatestTime = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a snapshot.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/Snapshot
0000000000000000000000000000000000000000;;	type Snapshot struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The data encryption key identifier for the snapshot. This value is a unique
0000000000000000000000000000000000000000;;		// identifier that corresponds to the data encryption key that was used to encrypt
0000000000000000000000000000000000000000;;		// the original volume or snapshot copy. Because data encryption keys are inherited
0000000000000000000000000000000000000000;;		// by volumes created from snapshots, and vice versa, if snapshots share the
0000000000000000000000000000000000000000;;		// same data encryption key identifier, then they belong to the same volume/snapshot
0000000000000000000000000000000000000000;;		// lineage. This parameter is only returned by the DescribeSnapshots API operation.
0000000000000000000000000000000000000000;;		DataEncryptionKeyId *string `locationName:"dataEncryptionKeyId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The description for the snapshot.
0000000000000000000000000000000000000000;;		Description *string `locationName:"description" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether the snapshot is encrypted.
0000000000000000000000000000000000000000;;		Encrypted *bool `locationName:"encrypted" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The full ARN of the AWS Key Management Service (AWS KMS) customer master
0000000000000000000000000000000000000000;;		// key (CMK) that was used to protect the volume encryption key for the parent
0000000000000000000000000000000000000000;;		// volume.
0000000000000000000000000000000000000000;;		KmsKeyId *string `locationName:"kmsKeyId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Value from an Amazon-maintained list (amazon | aws-marketplace | microsoft)
0000000000000000000000000000000000000000;;		// of snapshot owners. Not to be confused with the user-configured AWS account
0000000000000000000000000000000000000000;;		// alias, which is set from the IAM console.
0000000000000000000000000000000000000000;;		OwnerAlias *string `locationName:"ownerAlias" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The AWS account ID of the EBS snapshot owner.
0000000000000000000000000000000000000000;;		OwnerId *string `locationName:"ownerId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The progress of the snapshot, as a percentage.
0000000000000000000000000000000000000000;;		Progress *string `locationName:"progress" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the snapshot. Each snapshot receives a unique identifier when it
0000000000000000000000000000000000000000;;		// is created.
0000000000000000000000000000000000000000;;		SnapshotId *string `locationName:"snapshotId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The time stamp when the snapshot was initiated.
0000000000000000000000000000000000000000;;		StartTime *time.Time `locationName:"startTime" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The snapshot state.
0000000000000000000000000000000000000000;;		State *string `locationName:"status" type:"string" enum:"SnapshotState"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Encrypted Amazon EBS snapshots are copied asynchronously. If a snapshot copy
0000000000000000000000000000000000000000;;		// operation fails (for example, if the proper AWS Key Management Service (AWS
0000000000000000000000000000000000000000;;		// KMS) permissions are not obtained) this field displays error state details
0000000000000000000000000000000000000000;;		// to help you diagnose why the error occurred. This parameter is only returned
0000000000000000000000000000000000000000;;		// by the DescribeSnapshots API operation.
0000000000000000000000000000000000000000;;		StateMessage *string `locationName:"statusMessage" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Any tags assigned to the snapshot.
0000000000000000000000000000000000000000;;		Tags []*Tag `locationName:"tagSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the volume that was used to create the snapshot. Snapshots created
0000000000000000000000000000000000000000;;		// by the CopySnapshot action have an arbitrary volume ID that should not be
0000000000000000000000000000000000000000;;		// used for any purpose.
0000000000000000000000000000000000000000;;		VolumeId *string `locationName:"volumeId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The size of the volume, in GiB.
0000000000000000000000000000000000000000;;		VolumeSize *int64 `locationName:"volumeSize" type:"integer"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s Snapshot) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s Snapshot) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDataEncryptionKeyId sets the DataEncryptionKeyId field's value.
0000000000000000000000000000000000000000;;	func (s *Snapshot) SetDataEncryptionKeyId(v string) *Snapshot {
0000000000000000000000000000000000000000;;		s.DataEncryptionKeyId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDescription sets the Description field's value.
0000000000000000000000000000000000000000;;	func (s *Snapshot) SetDescription(v string) *Snapshot {
0000000000000000000000000000000000000000;;		s.Description = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEncrypted sets the Encrypted field's value.
0000000000000000000000000000000000000000;;	func (s *Snapshot) SetEncrypted(v bool) *Snapshot {
0000000000000000000000000000000000000000;;		s.Encrypted = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetKmsKeyId sets the KmsKeyId field's value.
0000000000000000000000000000000000000000;;	func (s *Snapshot) SetKmsKeyId(v string) *Snapshot {
0000000000000000000000000000000000000000;;		s.KmsKeyId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetOwnerAlias sets the OwnerAlias field's value.
0000000000000000000000000000000000000000;;	func (s *Snapshot) SetOwnerAlias(v string) *Snapshot {
0000000000000000000000000000000000000000;;		s.OwnerAlias = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetOwnerId sets the OwnerId field's value.
0000000000000000000000000000000000000000;;	func (s *Snapshot) SetOwnerId(v string) *Snapshot {
0000000000000000000000000000000000000000;;		s.OwnerId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetProgress sets the Progress field's value.
0000000000000000000000000000000000000000;;	func (s *Snapshot) SetProgress(v string) *Snapshot {
0000000000000000000000000000000000000000;;		s.Progress = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSnapshotId sets the SnapshotId field's value.
0000000000000000000000000000000000000000;;	func (s *Snapshot) SetSnapshotId(v string) *Snapshot {
0000000000000000000000000000000000000000;;		s.SnapshotId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStartTime sets the StartTime field's value.
0000000000000000000000000000000000000000;;	func (s *Snapshot) SetStartTime(v time.Time) *Snapshot {
0000000000000000000000000000000000000000;;		s.StartTime = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetState sets the State field's value.
0000000000000000000000000000000000000000;;	func (s *Snapshot) SetState(v string) *Snapshot {
0000000000000000000000000000000000000000;;		s.State = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStateMessage sets the StateMessage field's value.
0000000000000000000000000000000000000000;;	func (s *Snapshot) SetStateMessage(v string) *Snapshot {
0000000000000000000000000000000000000000;;		s.StateMessage = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTags sets the Tags field's value.
0000000000000000000000000000000000000000;;	func (s *Snapshot) SetTags(v []*Tag) *Snapshot {
0000000000000000000000000000000000000000;;		s.Tags = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVolumeId sets the VolumeId field's value.
0000000000000000000000000000000000000000;;	func (s *Snapshot) SetVolumeId(v string) *Snapshot {
0000000000000000000000000000000000000000;;		s.VolumeId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVolumeSize sets the VolumeSize field's value.
0000000000000000000000000000000000000000;;	func (s *Snapshot) SetVolumeSize(v int64) *Snapshot {
0000000000000000000000000000000000000000;;		s.VolumeSize = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the snapshot created from the imported disk.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/SnapshotDetail
0000000000000000000000000000000000000000;;	type SnapshotDetail struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A description for the snapshot.
0000000000000000000000000000000000000000;;		Description *string `locationName:"description" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The block device mapping for the snapshot.
0000000000000000000000000000000000000000;;		DeviceName *string `locationName:"deviceName" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The size of the disk in the snapshot, in GiB.
0000000000000000000000000000000000000000;;		DiskImageSize *float64 `locationName:"diskImageSize" type:"double"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The format of the disk image from which the snapshot is created.
0000000000000000000000000000000000000000;;		Format *string `locationName:"format" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The percentage of progress for the task.
0000000000000000000000000000000000000000;;		Progress *string `locationName:"progress" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The snapshot ID of the disk being imported.
0000000000000000000000000000000000000000;;		SnapshotId *string `locationName:"snapshotId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A brief status of the snapshot creation.
0000000000000000000000000000000000000000;;		Status *string `locationName:"status" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A detailed status message for the snapshot creation.
0000000000000000000000000000000000000000;;		StatusMessage *string `locationName:"statusMessage" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The URL used to access the disk image.
0000000000000000000000000000000000000000;;		Url *string `locationName:"url" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The S3 bucket for the disk image.
0000000000000000000000000000000000000000;;		UserBucket *UserBucketDetails `locationName:"userBucket" type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s SnapshotDetail) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s SnapshotDetail) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDescription sets the Description field's value.
0000000000000000000000000000000000000000;;	func (s *SnapshotDetail) SetDescription(v string) *SnapshotDetail {
0000000000000000000000000000000000000000;;		s.Description = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDeviceName sets the DeviceName field's value.
0000000000000000000000000000000000000000;;	func (s *SnapshotDetail) SetDeviceName(v string) *SnapshotDetail {
0000000000000000000000000000000000000000;;		s.DeviceName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDiskImageSize sets the DiskImageSize field's value.
0000000000000000000000000000000000000000;;	func (s *SnapshotDetail) SetDiskImageSize(v float64) *SnapshotDetail {
0000000000000000000000000000000000000000;;		s.DiskImageSize = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFormat sets the Format field's value.
0000000000000000000000000000000000000000;;	func (s *SnapshotDetail) SetFormat(v string) *SnapshotDetail {
0000000000000000000000000000000000000000;;		s.Format = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetProgress sets the Progress field's value.
0000000000000000000000000000000000000000;;	func (s *SnapshotDetail) SetProgress(v string) *SnapshotDetail {
0000000000000000000000000000000000000000;;		s.Progress = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSnapshotId sets the SnapshotId field's value.
0000000000000000000000000000000000000000;;	func (s *SnapshotDetail) SetSnapshotId(v string) *SnapshotDetail {
0000000000000000000000000000000000000000;;		s.SnapshotId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStatus sets the Status field's value.
0000000000000000000000000000000000000000;;	func (s *SnapshotDetail) SetStatus(v string) *SnapshotDetail {
0000000000000000000000000000000000000000;;		s.Status = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStatusMessage sets the StatusMessage field's value.
0000000000000000000000000000000000000000;;	func (s *SnapshotDetail) SetStatusMessage(v string) *SnapshotDetail {
0000000000000000000000000000000000000000;;		s.StatusMessage = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUrl sets the Url field's value.
0000000000000000000000000000000000000000;;	func (s *SnapshotDetail) SetUrl(v string) *SnapshotDetail {
0000000000000000000000000000000000000000;;		s.Url = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUserBucket sets the UserBucket field's value.
0000000000000000000000000000000000000000;;	func (s *SnapshotDetail) SetUserBucket(v *UserBucketDetails) *SnapshotDetail {
0000000000000000000000000000000000000000;;		s.UserBucket = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The disk container object for the import snapshot request.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/SnapshotDiskContainer
0000000000000000000000000000000000000000;;	type SnapshotDiskContainer struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The description of the disk image being imported.
0000000000000000000000000000000000000000;;		Description *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The format of the disk image being imported.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Valid values: RAW | VHD | VMDK | OVA
0000000000000000000000000000000000000000;;		Format *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The URL to the Amazon S3-based disk image being imported. It can either be
0000000000000000000000000000000000000000;;		// a https URL (https://..) or an Amazon S3 URL (s3://..).
0000000000000000000000000000000000000000;;		Url *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The S3 bucket for the disk image.
0000000000000000000000000000000000000000;;		UserBucket *UserBucket `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s SnapshotDiskContainer) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s SnapshotDiskContainer) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDescription sets the Description field's value.
0000000000000000000000000000000000000000;;	func (s *SnapshotDiskContainer) SetDescription(v string) *SnapshotDiskContainer {
0000000000000000000000000000000000000000;;		s.Description = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFormat sets the Format field's value.
0000000000000000000000000000000000000000;;	func (s *SnapshotDiskContainer) SetFormat(v string) *SnapshotDiskContainer {
0000000000000000000000000000000000000000;;		s.Format = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUrl sets the Url field's value.
0000000000000000000000000000000000000000;;	func (s *SnapshotDiskContainer) SetUrl(v string) *SnapshotDiskContainer {
0000000000000000000000000000000000000000;;		s.Url = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUserBucket sets the UserBucket field's value.
0000000000000000000000000000000000000000;;	func (s *SnapshotDiskContainer) SetUserBucket(v *UserBucket) *SnapshotDiskContainer {
0000000000000000000000000000000000000000;;		s.UserBucket = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Details about the import snapshot task.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/SnapshotTaskDetail
0000000000000000000000000000000000000000;;	type SnapshotTaskDetail struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The description of the snapshot.
0000000000000000000000000000000000000000;;		Description *string `locationName:"description" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The size of the disk in the snapshot, in GiB.
0000000000000000000000000000000000000000;;		DiskImageSize *float64 `locationName:"diskImageSize" type:"double"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The format of the disk image from which the snapshot is created.
0000000000000000000000000000000000000000;;		Format *string `locationName:"format" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The percentage of completion for the import snapshot task.
0000000000000000000000000000000000000000;;		Progress *string `locationName:"progress" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The snapshot ID of the disk being imported.
0000000000000000000000000000000000000000;;		SnapshotId *string `locationName:"snapshotId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A brief status for the import snapshot task.
0000000000000000000000000000000000000000;;		Status *string `locationName:"status" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A detailed status message for the import snapshot task.
0000000000000000000000000000000000000000;;		StatusMessage *string `locationName:"statusMessage" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The URL of the disk image from which the snapshot is created.
0000000000000000000000000000000000000000;;		Url *string `locationName:"url" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The S3 bucket for the disk image.
0000000000000000000000000000000000000000;;		UserBucket *UserBucketDetails `locationName:"userBucket" type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s SnapshotTaskDetail) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s SnapshotTaskDetail) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDescription sets the Description field's value.
0000000000000000000000000000000000000000;;	func (s *SnapshotTaskDetail) SetDescription(v string) *SnapshotTaskDetail {
0000000000000000000000000000000000000000;;		s.Description = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDiskImageSize sets the DiskImageSize field's value.
0000000000000000000000000000000000000000;;	func (s *SnapshotTaskDetail) SetDiskImageSize(v float64) *SnapshotTaskDetail {
0000000000000000000000000000000000000000;;		s.DiskImageSize = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFormat sets the Format field's value.
0000000000000000000000000000000000000000;;	func (s *SnapshotTaskDetail) SetFormat(v string) *SnapshotTaskDetail {
0000000000000000000000000000000000000000;;		s.Format = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetProgress sets the Progress field's value.
0000000000000000000000000000000000000000;;	func (s *SnapshotTaskDetail) SetProgress(v string) *SnapshotTaskDetail {
0000000000000000000000000000000000000000;;		s.Progress = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSnapshotId sets the SnapshotId field's value.
0000000000000000000000000000000000000000;;	func (s *SnapshotTaskDetail) SetSnapshotId(v string) *SnapshotTaskDetail {
0000000000000000000000000000000000000000;;		s.SnapshotId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStatus sets the Status field's value.
0000000000000000000000000000000000000000;;	func (s *SnapshotTaskDetail) SetStatus(v string) *SnapshotTaskDetail {
0000000000000000000000000000000000000000;;		s.Status = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStatusMessage sets the StatusMessage field's value.
0000000000000000000000000000000000000000;;	func (s *SnapshotTaskDetail) SetStatusMessage(v string) *SnapshotTaskDetail {
0000000000000000000000000000000000000000;;		s.StatusMessage = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUrl sets the Url field's value.
0000000000000000000000000000000000000000;;	func (s *SnapshotTaskDetail) SetUrl(v string) *SnapshotTaskDetail {
0000000000000000000000000000000000000000;;		s.Url = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUserBucket sets the UserBucket field's value.
0000000000000000000000000000000000000000;;	func (s *SnapshotTaskDetail) SetUserBucket(v *UserBucketDetails) *SnapshotTaskDetail {
0000000000000000000000000000000000000000;;		s.UserBucket = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the data feed for a Spot instance.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/SpotDatafeedSubscription
0000000000000000000000000000000000000000;;	type SpotDatafeedSubscription struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Amazon S3 bucket where the Spot instance data feed is located.
0000000000000000000000000000000000000000;;		Bucket *string `locationName:"bucket" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The fault codes for the Spot instance request, if any.
0000000000000000000000000000000000000000;;		Fault *SpotInstanceStateFault `locationName:"fault" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The AWS account ID of the account.
0000000000000000000000000000000000000000;;		OwnerId *string `locationName:"ownerId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The prefix that is prepended to data feed files.
0000000000000000000000000000000000000000;;		Prefix *string `locationName:"prefix" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The state of the Spot instance data feed subscription.
0000000000000000000000000000000000000000;;		State *string `locationName:"state" type:"string" enum:"DatafeedSubscriptionState"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s SpotDatafeedSubscription) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s SpotDatafeedSubscription) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetBucket sets the Bucket field's value.
0000000000000000000000000000000000000000;;	func (s *SpotDatafeedSubscription) SetBucket(v string) *SpotDatafeedSubscription {
0000000000000000000000000000000000000000;;		s.Bucket = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFault sets the Fault field's value.
0000000000000000000000000000000000000000;;	func (s *SpotDatafeedSubscription) SetFault(v *SpotInstanceStateFault) *SpotDatafeedSubscription {
0000000000000000000000000000000000000000;;		s.Fault = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetOwnerId sets the OwnerId field's value.
0000000000000000000000000000000000000000;;	func (s *SpotDatafeedSubscription) SetOwnerId(v string) *SpotDatafeedSubscription {
0000000000000000000000000000000000000000;;		s.OwnerId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrefix sets the Prefix field's value.
0000000000000000000000000000000000000000;;	func (s *SpotDatafeedSubscription) SetPrefix(v string) *SpotDatafeedSubscription {
0000000000000000000000000000000000000000;;		s.Prefix = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetState sets the State field's value.
0000000000000000000000000000000000000000;;	func (s *SpotDatafeedSubscription) SetState(v string) *SpotDatafeedSubscription {
0000000000000000000000000000000000000000;;		s.State = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the launch specification for one or more Spot instances.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/SpotFleetLaunchSpecification
0000000000000000000000000000000000000000;;	type SpotFleetLaunchSpecification struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Deprecated.
0000000000000000000000000000000000000000;;		AddressingType *string `locationName:"addressingType" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more block device mapping entries.
0000000000000000000000000000000000000000;;		BlockDeviceMappings []*BlockDeviceMapping `locationName:"blockDeviceMapping" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether the instances are optimized for EBS I/O. This optimization
0000000000000000000000000000000000000000;;		// provides dedicated throughput to Amazon EBS and an optimized configuration
0000000000000000000000000000000000000000;;		// stack to provide optimal EBS I/O performance. This optimization isn't available
0000000000000000000000000000000000000000;;		// with all instance types. Additional usage charges apply when using an EBS
0000000000000000000000000000000000000000;;		// Optimized instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: false
0000000000000000000000000000000000000000;;		EbsOptimized *bool `locationName:"ebsOptimized" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IAM instance profile.
0000000000000000000000000000000000000000;;		IamInstanceProfile *IamInstanceProfileSpecification `locationName:"iamInstanceProfile" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the AMI.
0000000000000000000000000000000000000000;;		ImageId *string `locationName:"imageId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The instance type. Note that T2 and HS1 instance types are not supported.
0000000000000000000000000000000000000000;;		InstanceType *string `locationName:"instanceType" type:"string" enum:"InstanceType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the kernel.
0000000000000000000000000000000000000000;;		KernelId *string `locationName:"kernelId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the key pair.
0000000000000000000000000000000000000000;;		KeyName *string `locationName:"keyName" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Enable or disable monitoring for the instances.
0000000000000000000000000000000000000000;;		Monitoring *SpotFleetMonitoring `locationName:"monitoring" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more network interfaces. If you specify a network interface, you must
0000000000000000000000000000000000000000;;		// specify subnet IDs and security group IDs using the network interface.
0000000000000000000000000000000000000000;;		NetworkInterfaces []*InstanceNetworkInterfaceSpecification `locationName:"networkInterfaceSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The placement information.
0000000000000000000000000000000000000000;;		Placement *SpotPlacement `locationName:"placement" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the RAM disk.
0000000000000000000000000000000000000000;;		RamdiskId *string `locationName:"ramdiskId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more security groups. When requesting instances in a VPC, you must
0000000000000000000000000000000000000000;;		// specify the IDs of the security groups. When requesting instances in EC2-Classic,
0000000000000000000000000000000000000000;;		// you can specify the names or the IDs of the security groups.
0000000000000000000000000000000000000000;;		SecurityGroups []*GroupIdentifier `locationName:"groupSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The bid price per unit hour for the specified instance type. If this value
0000000000000000000000000000000000000000;;		// is not specified, the default is the Spot bid price specified for the fleet.
0000000000000000000000000000000000000000;;		// To determine the bid price per unit hour, divide the Spot bid price by the
0000000000000000000000000000000000000000;;		// value of WeightedCapacity.
0000000000000000000000000000000000000000;;		SpotPrice *string `locationName:"spotPrice" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the subnet in which to launch the instances. To specify multiple
0000000000000000000000000000000000000000;;		// subnets, separate them using commas; for example, "subnet-a61dafcf, subnet-65ea5f08".
0000000000000000000000000000000000000000;;		SubnetId *string `locationName:"subnetId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The user data to make available to the instances. If you are using an AWS
0000000000000000000000000000000000000000;;		// SDK or command line tool, Base64-encoding is performed for you, and you can
0000000000000000000000000000000000000000;;		// load the text from a file. Otherwise, you must provide Base64-encoded text.
0000000000000000000000000000000000000000;;		UserData *string `locationName:"userData" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of units provided by the specified instance type. These are the
0000000000000000000000000000000000000000;;		// same units that you chose to set the target capacity in terms (instances
0000000000000000000000000000000000000000;;		// or a performance characteristic such as vCPUs, memory, or I/O).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If the target capacity divided by this value is not a whole number, we round
0000000000000000000000000000000000000000;;		// the number of instances to the next whole number. If this value is not specified,
0000000000000000000000000000000000000000;;		// the default is 1.
0000000000000000000000000000000000000000;;		WeightedCapacity *float64 `locationName:"weightedCapacity" type:"double"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s SpotFleetLaunchSpecification) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s SpotFleetLaunchSpecification) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *SpotFleetLaunchSpecification) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "SpotFleetLaunchSpecification"}
0000000000000000000000000000000000000000;;		if s.NetworkInterfaces != nil {
0000000000000000000000000000000000000000;;			for i, v := range s.NetworkInterfaces {
0000000000000000000000000000000000000000;;				if v == nil {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if err := v.Validate(); err != nil {
0000000000000000000000000000000000000000;;					invalidParams.AddNested(fmt.Sprintf("%s[%v]", "NetworkInterfaces", i), err.(request.ErrInvalidParams))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAddressingType sets the AddressingType field's value.
0000000000000000000000000000000000000000;;	func (s *SpotFleetLaunchSpecification) SetAddressingType(v string) *SpotFleetLaunchSpecification {
0000000000000000000000000000000000000000;;		s.AddressingType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetBlockDeviceMappings sets the BlockDeviceMappings field's value.
0000000000000000000000000000000000000000;;	func (s *SpotFleetLaunchSpecification) SetBlockDeviceMappings(v []*BlockDeviceMapping) *SpotFleetLaunchSpecification {
0000000000000000000000000000000000000000;;		s.BlockDeviceMappings = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEbsOptimized sets the EbsOptimized field's value.
0000000000000000000000000000000000000000;;	func (s *SpotFleetLaunchSpecification) SetEbsOptimized(v bool) *SpotFleetLaunchSpecification {
0000000000000000000000000000000000000000;;		s.EbsOptimized = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIamInstanceProfile sets the IamInstanceProfile field's value.
0000000000000000000000000000000000000000;;	func (s *SpotFleetLaunchSpecification) SetIamInstanceProfile(v *IamInstanceProfileSpecification) *SpotFleetLaunchSpecification {
0000000000000000000000000000000000000000;;		s.IamInstanceProfile = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetImageId sets the ImageId field's value.
0000000000000000000000000000000000000000;;	func (s *SpotFleetLaunchSpecification) SetImageId(v string) *SpotFleetLaunchSpecification {
0000000000000000000000000000000000000000;;		s.ImageId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceType sets the InstanceType field's value.
0000000000000000000000000000000000000000;;	func (s *SpotFleetLaunchSpecification) SetInstanceType(v string) *SpotFleetLaunchSpecification {
0000000000000000000000000000000000000000;;		s.InstanceType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetKernelId sets the KernelId field's value.
0000000000000000000000000000000000000000;;	func (s *SpotFleetLaunchSpecification) SetKernelId(v string) *SpotFleetLaunchSpecification {
0000000000000000000000000000000000000000;;		s.KernelId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetKeyName sets the KeyName field's value.
0000000000000000000000000000000000000000;;	func (s *SpotFleetLaunchSpecification) SetKeyName(v string) *SpotFleetLaunchSpecification {
0000000000000000000000000000000000000000;;		s.KeyName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMonitoring sets the Monitoring field's value.
0000000000000000000000000000000000000000;;	func (s *SpotFleetLaunchSpecification) SetMonitoring(v *SpotFleetMonitoring) *SpotFleetLaunchSpecification {
0000000000000000000000000000000000000000;;		s.Monitoring = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNetworkInterfaces sets the NetworkInterfaces field's value.
0000000000000000000000000000000000000000;;	func (s *SpotFleetLaunchSpecification) SetNetworkInterfaces(v []*InstanceNetworkInterfaceSpecification) *SpotFleetLaunchSpecification {
0000000000000000000000000000000000000000;;		s.NetworkInterfaces = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPlacement sets the Placement field's value.
0000000000000000000000000000000000000000;;	func (s *SpotFleetLaunchSpecification) SetPlacement(v *SpotPlacement) *SpotFleetLaunchSpecification {
0000000000000000000000000000000000000000;;		s.Placement = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRamdiskId sets the RamdiskId field's value.
0000000000000000000000000000000000000000;;	func (s *SpotFleetLaunchSpecification) SetRamdiskId(v string) *SpotFleetLaunchSpecification {
0000000000000000000000000000000000000000;;		s.RamdiskId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSecurityGroups sets the SecurityGroups field's value.
0000000000000000000000000000000000000000;;	func (s *SpotFleetLaunchSpecification) SetSecurityGroups(v []*GroupIdentifier) *SpotFleetLaunchSpecification {
0000000000000000000000000000000000000000;;		s.SecurityGroups = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSpotPrice sets the SpotPrice field's value.
0000000000000000000000000000000000000000;;	func (s *SpotFleetLaunchSpecification) SetSpotPrice(v string) *SpotFleetLaunchSpecification {
0000000000000000000000000000000000000000;;		s.SpotPrice = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSubnetId sets the SubnetId field's value.
0000000000000000000000000000000000000000;;	func (s *SpotFleetLaunchSpecification) SetSubnetId(v string) *SpotFleetLaunchSpecification {
0000000000000000000000000000000000000000;;		s.SubnetId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUserData sets the UserData field's value.
0000000000000000000000000000000000000000;;	func (s *SpotFleetLaunchSpecification) SetUserData(v string) *SpotFleetLaunchSpecification {
0000000000000000000000000000000000000000;;		s.UserData = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetWeightedCapacity sets the WeightedCapacity field's value.
0000000000000000000000000000000000000000;;	func (s *SpotFleetLaunchSpecification) SetWeightedCapacity(v float64) *SpotFleetLaunchSpecification {
0000000000000000000000000000000000000000;;		s.WeightedCapacity = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes whether monitoring is enabled.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/SpotFleetMonitoring
0000000000000000000000000000000000000000;;	type SpotFleetMonitoring struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Enables monitoring for the instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: false
0000000000000000000000000000000000000000;;		Enabled *bool `locationName:"enabled" type:"boolean"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s SpotFleetMonitoring) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s SpotFleetMonitoring) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEnabled sets the Enabled field's value.
0000000000000000000000000000000000000000;;	func (s *SpotFleetMonitoring) SetEnabled(v bool) *SpotFleetMonitoring {
0000000000000000000000000000000000000000;;		s.Enabled = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a Spot fleet request.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/SpotFleetRequestConfig
0000000000000000000000000000000000000000;;	type SpotFleetRequestConfig struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The progress of the Spot fleet request. If there is an error, the status
0000000000000000000000000000000000000000;;		// is error. After all bids are placed, the status is pending_fulfillment. If
0000000000000000000000000000000000000000;;		// the size of the fleet is equal to or greater than its target capacity, the
0000000000000000000000000000000000000000;;		// status is fulfilled. If the size of the fleet is decreased, the status is
0000000000000000000000000000000000000000;;		// pending_termination while Spot instances are terminating.
0000000000000000000000000000000000000000;;		ActivityStatus *string `locationName:"activityStatus" type:"string" enum:"ActivityStatus"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The creation date and time of the request.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// CreateTime is a required field
0000000000000000000000000000000000000000;;		CreateTime *time.Time `locationName:"createTime" type:"timestamp" timestampFormat:"iso8601" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the configuration of the Spot fleet request.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// SpotFleetRequestConfig is a required field
0000000000000000000000000000000000000000;;		SpotFleetRequestConfig *SpotFleetRequestConfigData `locationName:"spotFleetRequestConfig" type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the Spot fleet request.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// SpotFleetRequestId is a required field
0000000000000000000000000000000000000000;;		SpotFleetRequestId *string `locationName:"spotFleetRequestId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The state of the Spot fleet request.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// SpotFleetRequestState is a required field
0000000000000000000000000000000000000000;;		SpotFleetRequestState *string `locationName:"spotFleetRequestState" type:"string" required:"true" enum:"BatchState"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s SpotFleetRequestConfig) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s SpotFleetRequestConfig) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetActivityStatus sets the ActivityStatus field's value.
0000000000000000000000000000000000000000;;	func (s *SpotFleetRequestConfig) SetActivityStatus(v string) *SpotFleetRequestConfig {
0000000000000000000000000000000000000000;;		s.ActivityStatus = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCreateTime sets the CreateTime field's value.
0000000000000000000000000000000000000000;;	func (s *SpotFleetRequestConfig) SetCreateTime(v time.Time) *SpotFleetRequestConfig {
0000000000000000000000000000000000000000;;		s.CreateTime = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSpotFleetRequestConfig sets the SpotFleetRequestConfig field's value.
0000000000000000000000000000000000000000;;	func (s *SpotFleetRequestConfig) SetSpotFleetRequestConfig(v *SpotFleetRequestConfigData) *SpotFleetRequestConfig {
0000000000000000000000000000000000000000;;		s.SpotFleetRequestConfig = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSpotFleetRequestId sets the SpotFleetRequestId field's value.
0000000000000000000000000000000000000000;;	func (s *SpotFleetRequestConfig) SetSpotFleetRequestId(v string) *SpotFleetRequestConfig {
0000000000000000000000000000000000000000;;		s.SpotFleetRequestId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSpotFleetRequestState sets the SpotFleetRequestState field's value.
0000000000000000000000000000000000000000;;	func (s *SpotFleetRequestConfig) SetSpotFleetRequestState(v string) *SpotFleetRequestConfig {
0000000000000000000000000000000000000000;;		s.SpotFleetRequestState = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the configuration of a Spot fleet request.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/SpotFleetRequestConfigData
0000000000000000000000000000000000000000;;	type SpotFleetRequestConfigData struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates how to allocate the target capacity across the Spot pools specified
0000000000000000000000000000000000000000;;		// by the Spot fleet request. The default is lowestPrice.
0000000000000000000000000000000000000000;;		AllocationStrategy *string `locationName:"allocationStrategy" type:"string" enum:"AllocationStrategy"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A unique, case-sensitive identifier you provide to ensure idempotency of
0000000000000000000000000000000000000000;;		// your listings. This helps avoid duplicate listings. For more information,
0000000000000000000000000000000000000000;;		// see Ensuring Idempotency (http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
0000000000000000000000000000000000000000;;		ClientToken *string `locationName:"clientToken" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether running Spot instances should be terminated if the target
0000000000000000000000000000000000000000;;		// capacity of the Spot fleet request is decreased below the current size of
0000000000000000000000000000000000000000;;		// the Spot fleet.
0000000000000000000000000000000000000000;;		ExcessCapacityTerminationPolicy *string `locationName:"excessCapacityTerminationPolicy" type:"string" enum:"ExcessCapacityTerminationPolicy"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of units fulfilled by this request compared to the set target
0000000000000000000000000000000000000000;;		// capacity.
0000000000000000000000000000000000000000;;		FulfilledCapacity *float64 `locationName:"fulfilledCapacity" type:"double"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Grants the Spot fleet permission to terminate Spot instances on your behalf
0000000000000000000000000000000000000000;;		// when you cancel its Spot fleet request using CancelSpotFleetRequests or when
0000000000000000000000000000000000000000;;		// the Spot fleet request expires, if you set terminateInstancesWithExpiration.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// IamFleetRole is a required field
0000000000000000000000000000000000000000;;		IamFleetRole *string `locationName:"iamFleetRole" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the launch specifications for the Spot fleet request.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// LaunchSpecifications is a required field
0000000000000000000000000000000000000000;;		LaunchSpecifications []*SpotFleetLaunchSpecification `locationName:"launchSpecifications" locationNameList:"item" min:"1" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The bid price per unit hour.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// SpotPrice is a required field
0000000000000000000000000000000000000000;;		SpotPrice *string `locationName:"spotPrice" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of units to request. You can choose to set the target capacity
0000000000000000000000000000000000000000;;		// in terms of instances or a performance characteristic that is important to
0000000000000000000000000000000000000000;;		// your application workload, such as vCPUs, memory, or I/O.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// TargetCapacity is a required field
0000000000000000000000000000000000000000;;		TargetCapacity *int64 `locationName:"targetCapacity" type:"integer" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether running Spot instances should be terminated when the Spot
0000000000000000000000000000000000000000;;		// fleet request expires.
0000000000000000000000000000000000000000;;		TerminateInstancesWithExpiration *bool `locationName:"terminateInstancesWithExpiration" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The type of request. Indicates whether the fleet will only request the target
0000000000000000000000000000000000000000;;		// capacity or also attempt to maintain it. When you request a certain target
0000000000000000000000000000000000000000;;		// capacity, the fleet will only place the required bids. It will not attempt
0000000000000000000000000000000000000000;;		// to replenish Spot instances if capacity is diminished, nor will it submit
0000000000000000000000000000000000000000;;		// bids in alternative Spot pools if capacity is not available. When you want
0000000000000000000000000000000000000000;;		// to maintain a certain target capacity, fleet will place the required bids
0000000000000000000000000000000000000000;;		// to meet this target capacity. It will also automatically replenish any interrupted
0000000000000000000000000000000000000000;;		// instances. Default: maintain.
0000000000000000000000000000000000000000;;		Type *string `locationName:"type" type:"string" enum:"FleetType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The start date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
0000000000000000000000000000000000000000;;		// The default is to start fulfilling the request immediately.
0000000000000000000000000000000000000000;;		ValidFrom *time.Time `locationName:"validFrom" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The end date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
0000000000000000000000000000000000000000;;		// At this point, no new Spot instance requests are placed or enabled to fulfill
0000000000000000000000000000000000000000;;		// the request.
0000000000000000000000000000000000000000;;		ValidUntil *time.Time `locationName:"validUntil" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s SpotFleetRequestConfigData) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s SpotFleetRequestConfigData) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *SpotFleetRequestConfigData) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "SpotFleetRequestConfigData"}
0000000000000000000000000000000000000000;;		if s.IamFleetRole == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("IamFleetRole"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.LaunchSpecifications == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("LaunchSpecifications"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.LaunchSpecifications != nil && len(s.LaunchSpecifications) < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("LaunchSpecifications", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.SpotPrice == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("SpotPrice"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.TargetCapacity == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("TargetCapacity"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.LaunchSpecifications != nil {
0000000000000000000000000000000000000000;;			for i, v := range s.LaunchSpecifications {
0000000000000000000000000000000000000000;;				if v == nil {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if err := v.Validate(); err != nil {
0000000000000000000000000000000000000000;;					invalidParams.AddNested(fmt.Sprintf("%s[%v]", "LaunchSpecifications", i), err.(request.ErrInvalidParams))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAllocationStrategy sets the AllocationStrategy field's value.
0000000000000000000000000000000000000000;;	func (s *SpotFleetRequestConfigData) SetAllocationStrategy(v string) *SpotFleetRequestConfigData {
0000000000000000000000000000000000000000;;		s.AllocationStrategy = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetClientToken sets the ClientToken field's value.
0000000000000000000000000000000000000000;;	func (s *SpotFleetRequestConfigData) SetClientToken(v string) *SpotFleetRequestConfigData {
0000000000000000000000000000000000000000;;		s.ClientToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetExcessCapacityTerminationPolicy sets the ExcessCapacityTerminationPolicy field's value.
0000000000000000000000000000000000000000;;	func (s *SpotFleetRequestConfigData) SetExcessCapacityTerminationPolicy(v string) *SpotFleetRequestConfigData {
0000000000000000000000000000000000000000;;		s.ExcessCapacityTerminationPolicy = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFulfilledCapacity sets the FulfilledCapacity field's value.
0000000000000000000000000000000000000000;;	func (s *SpotFleetRequestConfigData) SetFulfilledCapacity(v float64) *SpotFleetRequestConfigData {
0000000000000000000000000000000000000000;;		s.FulfilledCapacity = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIamFleetRole sets the IamFleetRole field's value.
0000000000000000000000000000000000000000;;	func (s *SpotFleetRequestConfigData) SetIamFleetRole(v string) *SpotFleetRequestConfigData {
0000000000000000000000000000000000000000;;		s.IamFleetRole = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetLaunchSpecifications sets the LaunchSpecifications field's value.
0000000000000000000000000000000000000000;;	func (s *SpotFleetRequestConfigData) SetLaunchSpecifications(v []*SpotFleetLaunchSpecification) *SpotFleetRequestConfigData {
0000000000000000000000000000000000000000;;		s.LaunchSpecifications = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSpotPrice sets the SpotPrice field's value.
0000000000000000000000000000000000000000;;	func (s *SpotFleetRequestConfigData) SetSpotPrice(v string) *SpotFleetRequestConfigData {
0000000000000000000000000000000000000000;;		s.SpotPrice = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTargetCapacity sets the TargetCapacity field's value.
0000000000000000000000000000000000000000;;	func (s *SpotFleetRequestConfigData) SetTargetCapacity(v int64) *SpotFleetRequestConfigData {
0000000000000000000000000000000000000000;;		s.TargetCapacity = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTerminateInstancesWithExpiration sets the TerminateInstancesWithExpiration field's value.
0000000000000000000000000000000000000000;;	func (s *SpotFleetRequestConfigData) SetTerminateInstancesWithExpiration(v bool) *SpotFleetRequestConfigData {
0000000000000000000000000000000000000000;;		s.TerminateInstancesWithExpiration = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetType sets the Type field's value.
0000000000000000000000000000000000000000;;	func (s *SpotFleetRequestConfigData) SetType(v string) *SpotFleetRequestConfigData {
0000000000000000000000000000000000000000;;		s.Type = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetValidFrom sets the ValidFrom field's value.
0000000000000000000000000000000000000000;;	func (s *SpotFleetRequestConfigData) SetValidFrom(v time.Time) *SpotFleetRequestConfigData {
0000000000000000000000000000000000000000;;		s.ValidFrom = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetValidUntil sets the ValidUntil field's value.
0000000000000000000000000000000000000000;;	func (s *SpotFleetRequestConfigData) SetValidUntil(v time.Time) *SpotFleetRequestConfigData {
0000000000000000000000000000000000000000;;		s.ValidUntil = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a Spot instance request.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/SpotInstanceRequest
0000000000000000000000000000000000000000;;	type SpotInstanceRequest struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If you specified a duration and your Spot instance request was fulfilled,
0000000000000000000000000000000000000000;;		// this is the fixed hourly price in effect for the Spot instance while it runs.
0000000000000000000000000000000000000000;;		ActualBlockHourlyPrice *string `locationName:"actualBlockHourlyPrice" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Availability Zone group. If you specify the same Availability Zone group
0000000000000000000000000000000000000000;;		// for all Spot instance requests, all Spot instances are launched in the same
0000000000000000000000000000000000000000;;		// Availability Zone.
0000000000000000000000000000000000000000;;		AvailabilityZoneGroup *string `locationName:"availabilityZoneGroup" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The duration for the Spot instance, in minutes.
0000000000000000000000000000000000000000;;		BlockDurationMinutes *int64 `locationName:"blockDurationMinutes" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The date and time when the Spot instance request was created, in UTC format
0000000000000000000000000000000000000000;;		// (for example, YYYY-MM-DDTHH:MM:SSZ).
0000000000000000000000000000000000000000;;		CreateTime *time.Time `locationName:"createTime" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The fault codes for the Spot instance request, if any.
0000000000000000000000000000000000000000;;		Fault *SpotInstanceStateFault `locationName:"fault" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The instance ID, if an instance has been launched to fulfill the Spot instance
0000000000000000000000000000000000000000;;		// request.
0000000000000000000000000000000000000000;;		InstanceId *string `locationName:"instanceId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The instance launch group. Launch groups are Spot instances that launch together
0000000000000000000000000000000000000000;;		// and terminate together.
0000000000000000000000000000000000000000;;		LaunchGroup *string `locationName:"launchGroup" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Additional information for launching instances.
0000000000000000000000000000000000000000;;		LaunchSpecification *LaunchSpecification `locationName:"launchSpecification" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Availability Zone in which the bid is launched.
0000000000000000000000000000000000000000;;		LaunchedAvailabilityZone *string `locationName:"launchedAvailabilityZone" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The product description associated with the Spot instance.
0000000000000000000000000000000000000000;;		ProductDescription *string `locationName:"productDescription" type:"string" enum:"RIProductDescription"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the Spot instance request.
0000000000000000000000000000000000000000;;		SpotInstanceRequestId *string `locationName:"spotInstanceRequestId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum hourly price (bid) for the Spot instance launched to fulfill
0000000000000000000000000000000000000000;;		// the request.
0000000000000000000000000000000000000000;;		SpotPrice *string `locationName:"spotPrice" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The state of the Spot instance request. Spot bid status information can help
0000000000000000000000000000000000000000;;		// you track your Spot instance requests. For more information, see Spot Bid
0000000000000000000000000000000000000000;;		// Status (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-bid-status.html)
0000000000000000000000000000000000000000;;		// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;		State *string `locationName:"state" type:"string" enum:"SpotInstanceState"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The status code and status message describing the Spot instance request.
0000000000000000000000000000000000000000;;		Status *SpotInstanceStatus `locationName:"status" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Any tags assigned to the resource.
0000000000000000000000000000000000000000;;		Tags []*Tag `locationName:"tagSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Spot instance request type.
0000000000000000000000000000000000000000;;		Type *string `locationName:"type" type:"string" enum:"SpotInstanceType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The start date of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
0000000000000000000000000000000000000000;;		// The request becomes active at this date and time.
0000000000000000000000000000000000000000;;		ValidFrom *time.Time `locationName:"validFrom" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The end date of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
0000000000000000000000000000000000000000;;		// If this is a one-time request, it remains active until all instances launch,
0000000000000000000000000000000000000000;;		// the request is canceled, or this date is reached. If the request is persistent,
0000000000000000000000000000000000000000;;		// it remains active until it is canceled or this date is reached.
0000000000000000000000000000000000000000;;		ValidUntil *time.Time `locationName:"validUntil" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s SpotInstanceRequest) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s SpotInstanceRequest) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetActualBlockHourlyPrice sets the ActualBlockHourlyPrice field's value.
0000000000000000000000000000000000000000;;	func (s *SpotInstanceRequest) SetActualBlockHourlyPrice(v string) *SpotInstanceRequest {
0000000000000000000000000000000000000000;;		s.ActualBlockHourlyPrice = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAvailabilityZoneGroup sets the AvailabilityZoneGroup field's value.
0000000000000000000000000000000000000000;;	func (s *SpotInstanceRequest) SetAvailabilityZoneGroup(v string) *SpotInstanceRequest {
0000000000000000000000000000000000000000;;		s.AvailabilityZoneGroup = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetBlockDurationMinutes sets the BlockDurationMinutes field's value.
0000000000000000000000000000000000000000;;	func (s *SpotInstanceRequest) SetBlockDurationMinutes(v int64) *SpotInstanceRequest {
0000000000000000000000000000000000000000;;		s.BlockDurationMinutes = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCreateTime sets the CreateTime field's value.
0000000000000000000000000000000000000000;;	func (s *SpotInstanceRequest) SetCreateTime(v time.Time) *SpotInstanceRequest {
0000000000000000000000000000000000000000;;		s.CreateTime = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFault sets the Fault field's value.
0000000000000000000000000000000000000000;;	func (s *SpotInstanceRequest) SetFault(v *SpotInstanceStateFault) *SpotInstanceRequest {
0000000000000000000000000000000000000000;;		s.Fault = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceId sets the InstanceId field's value.
0000000000000000000000000000000000000000;;	func (s *SpotInstanceRequest) SetInstanceId(v string) *SpotInstanceRequest {
0000000000000000000000000000000000000000;;		s.InstanceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetLaunchGroup sets the LaunchGroup field's value.
0000000000000000000000000000000000000000;;	func (s *SpotInstanceRequest) SetLaunchGroup(v string) *SpotInstanceRequest {
0000000000000000000000000000000000000000;;		s.LaunchGroup = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetLaunchSpecification sets the LaunchSpecification field's value.
0000000000000000000000000000000000000000;;	func (s *SpotInstanceRequest) SetLaunchSpecification(v *LaunchSpecification) *SpotInstanceRequest {
0000000000000000000000000000000000000000;;		s.LaunchSpecification = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetLaunchedAvailabilityZone sets the LaunchedAvailabilityZone field's value.
0000000000000000000000000000000000000000;;	func (s *SpotInstanceRequest) SetLaunchedAvailabilityZone(v string) *SpotInstanceRequest {
0000000000000000000000000000000000000000;;		s.LaunchedAvailabilityZone = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetProductDescription sets the ProductDescription field's value.
0000000000000000000000000000000000000000;;	func (s *SpotInstanceRequest) SetProductDescription(v string) *SpotInstanceRequest {
0000000000000000000000000000000000000000;;		s.ProductDescription = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSpotInstanceRequestId sets the SpotInstanceRequestId field's value.
0000000000000000000000000000000000000000;;	func (s *SpotInstanceRequest) SetSpotInstanceRequestId(v string) *SpotInstanceRequest {
0000000000000000000000000000000000000000;;		s.SpotInstanceRequestId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSpotPrice sets the SpotPrice field's value.
0000000000000000000000000000000000000000;;	func (s *SpotInstanceRequest) SetSpotPrice(v string) *SpotInstanceRequest {
0000000000000000000000000000000000000000;;		s.SpotPrice = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetState sets the State field's value.
0000000000000000000000000000000000000000;;	func (s *SpotInstanceRequest) SetState(v string) *SpotInstanceRequest {
0000000000000000000000000000000000000000;;		s.State = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStatus sets the Status field's value.
0000000000000000000000000000000000000000;;	func (s *SpotInstanceRequest) SetStatus(v *SpotInstanceStatus) *SpotInstanceRequest {
0000000000000000000000000000000000000000;;		s.Status = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTags sets the Tags field's value.
0000000000000000000000000000000000000000;;	func (s *SpotInstanceRequest) SetTags(v []*Tag) *SpotInstanceRequest {
0000000000000000000000000000000000000000;;		s.Tags = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetType sets the Type field's value.
0000000000000000000000000000000000000000;;	func (s *SpotInstanceRequest) SetType(v string) *SpotInstanceRequest {
0000000000000000000000000000000000000000;;		s.Type = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetValidFrom sets the ValidFrom field's value.
0000000000000000000000000000000000000000;;	func (s *SpotInstanceRequest) SetValidFrom(v time.Time) *SpotInstanceRequest {
0000000000000000000000000000000000000000;;		s.ValidFrom = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetValidUntil sets the ValidUntil field's value.
0000000000000000000000000000000000000000;;	func (s *SpotInstanceRequest) SetValidUntil(v time.Time) *SpotInstanceRequest {
0000000000000000000000000000000000000000;;		s.ValidUntil = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a Spot instance state change.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/SpotInstanceStateFault
0000000000000000000000000000000000000000;;	type SpotInstanceStateFault struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The reason code for the Spot instance state change.
0000000000000000000000000000000000000000;;		Code *string `locationName:"code" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The message for the Spot instance state change.
0000000000000000000000000000000000000000;;		Message *string `locationName:"message" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s SpotInstanceStateFault) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s SpotInstanceStateFault) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCode sets the Code field's value.
0000000000000000000000000000000000000000;;	func (s *SpotInstanceStateFault) SetCode(v string) *SpotInstanceStateFault {
0000000000000000000000000000000000000000;;		s.Code = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMessage sets the Message field's value.
0000000000000000000000000000000000000000;;	func (s *SpotInstanceStateFault) SetMessage(v string) *SpotInstanceStateFault {
0000000000000000000000000000000000000000;;		s.Message = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the status of a Spot instance request.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/SpotInstanceStatus
0000000000000000000000000000000000000000;;	type SpotInstanceStatus struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The status code. For a list of status codes, see Spot Bid Status Codes (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-bid-status.html#spot-instance-bid-status-understand)
0000000000000000000000000000000000000000;;		// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;		Code *string `locationName:"code" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The description for the status code.
0000000000000000000000000000000000000000;;		Message *string `locationName:"message" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The date and time of the most recent status update, in UTC format (for example,
0000000000000000000000000000000000000000;;		// YYYY-MM-DDTHH:MM:SSZ).
0000000000000000000000000000000000000000;;		UpdateTime *time.Time `locationName:"updateTime" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s SpotInstanceStatus) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s SpotInstanceStatus) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCode sets the Code field's value.
0000000000000000000000000000000000000000;;	func (s *SpotInstanceStatus) SetCode(v string) *SpotInstanceStatus {
0000000000000000000000000000000000000000;;		s.Code = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMessage sets the Message field's value.
0000000000000000000000000000000000000000;;	func (s *SpotInstanceStatus) SetMessage(v string) *SpotInstanceStatus {
0000000000000000000000000000000000000000;;		s.Message = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUpdateTime sets the UpdateTime field's value.
0000000000000000000000000000000000000000;;	func (s *SpotInstanceStatus) SetUpdateTime(v time.Time) *SpotInstanceStatus {
0000000000000000000000000000000000000000;;		s.UpdateTime = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes Spot instance placement.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/SpotPlacement
0000000000000000000000000000000000000000;;	type SpotPlacement struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Availability Zone.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// [Spot fleet only] To specify multiple Availability Zones, separate them using
0000000000000000000000000000000000000000;;		// commas; for example, "us-west-2a, us-west-2b".
0000000000000000000000000000000000000000;;		AvailabilityZone *string `locationName:"availabilityZone" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the placement group (for cluster instances).
0000000000000000000000000000000000000000;;		GroupName *string `locationName:"groupName" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s SpotPlacement) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s SpotPlacement) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAvailabilityZone sets the AvailabilityZone field's value.
0000000000000000000000000000000000000000;;	func (s *SpotPlacement) SetAvailabilityZone(v string) *SpotPlacement {
0000000000000000000000000000000000000000;;		s.AvailabilityZone = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroupName sets the GroupName field's value.
0000000000000000000000000000000000000000;;	func (s *SpotPlacement) SetGroupName(v string) *SpotPlacement {
0000000000000000000000000000000000000000;;		s.GroupName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the maximum hourly price (bid) for any Spot instance launched to
0000000000000000000000000000000000000000;;	// fulfill the request.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/SpotPrice
0000000000000000000000000000000000000000;;	type SpotPrice struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Availability Zone.
0000000000000000000000000000000000000000;;		AvailabilityZone *string `locationName:"availabilityZone" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The instance type. Note that T2 and HS1 instance types are not supported.
0000000000000000000000000000000000000000;;		InstanceType *string `locationName:"instanceType" type:"string" enum:"InstanceType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A general description of the AMI.
0000000000000000000000000000000000000000;;		ProductDescription *string `locationName:"productDescription" type:"string" enum:"RIProductDescription"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum price (bid) that you are willing to pay for a Spot instance.
0000000000000000000000000000000000000000;;		SpotPrice *string `locationName:"spotPrice" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The date and time the request was created, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
0000000000000000000000000000000000000000;;		Timestamp *time.Time `locationName:"timestamp" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s SpotPrice) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s SpotPrice) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAvailabilityZone sets the AvailabilityZone field's value.
0000000000000000000000000000000000000000;;	func (s *SpotPrice) SetAvailabilityZone(v string) *SpotPrice {
0000000000000000000000000000000000000000;;		s.AvailabilityZone = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceType sets the InstanceType field's value.
0000000000000000000000000000000000000000;;	func (s *SpotPrice) SetInstanceType(v string) *SpotPrice {
0000000000000000000000000000000000000000;;		s.InstanceType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetProductDescription sets the ProductDescription field's value.
0000000000000000000000000000000000000000;;	func (s *SpotPrice) SetProductDescription(v string) *SpotPrice {
0000000000000000000000000000000000000000;;		s.ProductDescription = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSpotPrice sets the SpotPrice field's value.
0000000000000000000000000000000000000000;;	func (s *SpotPrice) SetSpotPrice(v string) *SpotPrice {
0000000000000000000000000000000000000000;;		s.SpotPrice = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTimestamp sets the Timestamp field's value.
0000000000000000000000000000000000000000;;	func (s *SpotPrice) SetTimestamp(v time.Time) *SpotPrice {
0000000000000000000000000000000000000000;;		s.Timestamp = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a stale rule in a security group.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/StaleIpPermission
0000000000000000000000000000000000000000;;	type StaleIpPermission struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The start of the port range for the TCP and UDP protocols, or an ICMP type
0000000000000000000000000000000000000000;;		// number. A value of -1 indicates all ICMP types.
0000000000000000000000000000000000000000;;		FromPort *int64 `locationName:"fromPort" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IP protocol name (for tcp, udp, and icmp) or number (see Protocol Numbers)
0000000000000000000000000000000000000000;;		// (http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml).
0000000000000000000000000000000000000000;;		IpProtocol *string `locationName:"ipProtocol" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more IP ranges. Not applicable for stale security group rules.
0000000000000000000000000000000000000000;;		IpRanges []*string `locationName:"ipRanges" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more prefix list IDs for an AWS service. Not applicable for stale
0000000000000000000000000000000000000000;;		// security group rules.
0000000000000000000000000000000000000000;;		PrefixListIds []*string `locationName:"prefixListIds" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The end of the port range for the TCP and UDP protocols, or an ICMP type
0000000000000000000000000000000000000000;;		// number. A value of -1 indicates all ICMP types.
0000000000000000000000000000000000000000;;		ToPort *int64 `locationName:"toPort" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more security group pairs. Returns the ID of the referenced security
0000000000000000000000000000000000000000;;		// group and VPC, and the ID and status of the VPC peering connection.
0000000000000000000000000000000000000000;;		UserIdGroupPairs []*UserIdGroupPair `locationName:"groups" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s StaleIpPermission) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s StaleIpPermission) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFromPort sets the FromPort field's value.
0000000000000000000000000000000000000000;;	func (s *StaleIpPermission) SetFromPort(v int64) *StaleIpPermission {
0000000000000000000000000000000000000000;;		s.FromPort = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpProtocol sets the IpProtocol field's value.
0000000000000000000000000000000000000000;;	func (s *StaleIpPermission) SetIpProtocol(v string) *StaleIpPermission {
0000000000000000000000000000000000000000;;		s.IpProtocol = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpRanges sets the IpRanges field's value.
0000000000000000000000000000000000000000;;	func (s *StaleIpPermission) SetIpRanges(v []*string) *StaleIpPermission {
0000000000000000000000000000000000000000;;		s.IpRanges = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrefixListIds sets the PrefixListIds field's value.
0000000000000000000000000000000000000000;;	func (s *StaleIpPermission) SetPrefixListIds(v []*string) *StaleIpPermission {
0000000000000000000000000000000000000000;;		s.PrefixListIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetToPort sets the ToPort field's value.
0000000000000000000000000000000000000000;;	func (s *StaleIpPermission) SetToPort(v int64) *StaleIpPermission {
0000000000000000000000000000000000000000;;		s.ToPort = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUserIdGroupPairs sets the UserIdGroupPairs field's value.
0000000000000000000000000000000000000000;;	func (s *StaleIpPermission) SetUserIdGroupPairs(v []*UserIdGroupPair) *StaleIpPermission {
0000000000000000000000000000000000000000;;		s.UserIdGroupPairs = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a stale security group (a security group that contains stale rules).
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/StaleSecurityGroup
0000000000000000000000000000000000000000;;	type StaleSecurityGroup struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The description of the security group.
0000000000000000000000000000000000000000;;		Description *string `locationName:"description" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the security group.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// GroupId is a required field
0000000000000000000000000000000000000000;;		GroupId *string `locationName:"groupId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the security group.
0000000000000000000000000000000000000000;;		GroupName *string `locationName:"groupName" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the stale inbound rules in the security group.
0000000000000000000000000000000000000000;;		StaleIpPermissions []*StaleIpPermission `locationName:"staleIpPermissions" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the stale outbound rules in the security group.
0000000000000000000000000000000000000000;;		StaleIpPermissionsEgress []*StaleIpPermission `locationName:"staleIpPermissionsEgress" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC for the security group.
0000000000000000000000000000000000000000;;		VpcId *string `locationName:"vpcId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s StaleSecurityGroup) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s StaleSecurityGroup) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDescription sets the Description field's value.
0000000000000000000000000000000000000000;;	func (s *StaleSecurityGroup) SetDescription(v string) *StaleSecurityGroup {
0000000000000000000000000000000000000000;;		s.Description = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroupId sets the GroupId field's value.
0000000000000000000000000000000000000000;;	func (s *StaleSecurityGroup) SetGroupId(v string) *StaleSecurityGroup {
0000000000000000000000000000000000000000;;		s.GroupId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroupName sets the GroupName field's value.
0000000000000000000000000000000000000000;;	func (s *StaleSecurityGroup) SetGroupName(v string) *StaleSecurityGroup {
0000000000000000000000000000000000000000;;		s.GroupName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStaleIpPermissions sets the StaleIpPermissions field's value.
0000000000000000000000000000000000000000;;	func (s *StaleSecurityGroup) SetStaleIpPermissions(v []*StaleIpPermission) *StaleSecurityGroup {
0000000000000000000000000000000000000000;;		s.StaleIpPermissions = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStaleIpPermissionsEgress sets the StaleIpPermissionsEgress field's value.
0000000000000000000000000000000000000000;;	func (s *StaleSecurityGroup) SetStaleIpPermissionsEgress(v []*StaleIpPermission) *StaleSecurityGroup {
0000000000000000000000000000000000000000;;		s.StaleIpPermissionsEgress = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcId sets the VpcId field's value.
0000000000000000000000000000000000000000;;	func (s *StaleSecurityGroup) SetVpcId(v string) *StaleSecurityGroup {
0000000000000000000000000000000000000000;;		s.VpcId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for StartInstances.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/StartInstancesRequest
0000000000000000000000000000000000000000;;	type StartInstancesInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Reserved.
0000000000000000000000000000000000000000;;		AdditionalInfo *string `locationName:"additionalInfo" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more instance IDs.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// InstanceIds is a required field
0000000000000000000000000000000000000000;;		InstanceIds []*string `locationName:"InstanceId" locationNameList:"InstanceId" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s StartInstancesInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s StartInstancesInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *StartInstancesInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "StartInstancesInput"}
0000000000000000000000000000000000000000;;		if s.InstanceIds == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("InstanceIds"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAdditionalInfo sets the AdditionalInfo field's value.
0000000000000000000000000000000000000000;;	func (s *StartInstancesInput) SetAdditionalInfo(v string) *StartInstancesInput {
0000000000000000000000000000000000000000;;		s.AdditionalInfo = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *StartInstancesInput) SetDryRun(v bool) *StartInstancesInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceIds sets the InstanceIds field's value.
0000000000000000000000000000000000000000;;	func (s *StartInstancesInput) SetInstanceIds(v []*string) *StartInstancesInput {
0000000000000000000000000000000000000000;;		s.InstanceIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of StartInstances.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/StartInstancesResult
0000000000000000000000000000000000000000;;	type StartInstancesOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about one or more started instances.
0000000000000000000000000000000000000000;;		StartingInstances []*InstanceStateChange `locationName:"instancesSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s StartInstancesOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s StartInstancesOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStartingInstances sets the StartingInstances field's value.
0000000000000000000000000000000000000000;;	func (s *StartInstancesOutput) SetStartingInstances(v []*InstanceStateChange) *StartInstancesOutput {
0000000000000000000000000000000000000000;;		s.StartingInstances = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a state change.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/StateReason
0000000000000000000000000000000000000000;;	type StateReason struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The reason code for the state change.
0000000000000000000000000000000000000000;;		Code *string `locationName:"code" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The message for the state change.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * Server.SpotInstanceTermination: A Spot instance was terminated due to
0000000000000000000000000000000000000000;;		//    an increase in the market price.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * Server.InternalError: An internal error occurred during instance launch,
0000000000000000000000000000000000000000;;		//    resulting in termination.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * Server.InsufficientInstanceCapacity: There was insufficient instance
0000000000000000000000000000000000000000;;		//    capacity to satisfy the launch request.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * Client.InternalError: A client error caused the instance to terminate
0000000000000000000000000000000000000000;;		//    on launch.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * Client.InstanceInitiatedShutdown: The instance was shut down using the
0000000000000000000000000000000000000000;;		//    shutdown -h command from the instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * Client.UserInitiatedShutdown: The instance was shut down using the Amazon
0000000000000000000000000000000000000000;;		//    EC2 API.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * Client.VolumeLimitExceeded: The limit on the number of EBS volumes or
0000000000000000000000000000000000000000;;		//    total storage was exceeded. Decrease usage or request an increase in your
0000000000000000000000000000000000000000;;		//    limits.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * Client.InvalidSnapshot.NotFound: The specified snapshot was not found.
0000000000000000000000000000000000000000;;		Message *string `locationName:"message" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s StateReason) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s StateReason) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCode sets the Code field's value.
0000000000000000000000000000000000000000;;	func (s *StateReason) SetCode(v string) *StateReason {
0000000000000000000000000000000000000000;;		s.Code = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMessage sets the Message field's value.
0000000000000000000000000000000000000000;;	func (s *StateReason) SetMessage(v string) *StateReason {
0000000000000000000000000000000000000000;;		s.Message = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for StopInstances.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/StopInstancesRequest
0000000000000000000000000000000000000000;;	type StopInstancesInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Forces the instances to stop. The instances do not have an opportunity to
0000000000000000000000000000000000000000;;		// flush file system caches or file system metadata. If you use this option,
0000000000000000000000000000000000000000;;		// you must perform file system check and repair procedures. This option is
0000000000000000000000000000000000000000;;		// not recommended for Windows instances.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Default: false
0000000000000000000000000000000000000000;;		Force *bool `locationName:"force" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more instance IDs.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// InstanceIds is a required field
0000000000000000000000000000000000000000;;		InstanceIds []*string `locationName:"InstanceId" locationNameList:"InstanceId" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s StopInstancesInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s StopInstancesInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *StopInstancesInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "StopInstancesInput"}
0000000000000000000000000000000000000000;;		if s.InstanceIds == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("InstanceIds"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *StopInstancesInput) SetDryRun(v bool) *StopInstancesInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetForce sets the Force field's value.
0000000000000000000000000000000000000000;;	func (s *StopInstancesInput) SetForce(v bool) *StopInstancesInput {
0000000000000000000000000000000000000000;;		s.Force = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceIds sets the InstanceIds field's value.
0000000000000000000000000000000000000000;;	func (s *StopInstancesInput) SetInstanceIds(v []*string) *StopInstancesInput {
0000000000000000000000000000000000000000;;		s.InstanceIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of StopInstances.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/StopInstancesResult
0000000000000000000000000000000000000000;;	type StopInstancesOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about one or more stopped instances.
0000000000000000000000000000000000000000;;		StoppingInstances []*InstanceStateChange `locationName:"instancesSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s StopInstancesOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s StopInstancesOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStoppingInstances sets the StoppingInstances field's value.
0000000000000000000000000000000000000000;;	func (s *StopInstancesOutput) SetStoppingInstances(v []*InstanceStateChange) *StopInstancesOutput {
0000000000000000000000000000000000000000;;		s.StoppingInstances = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the storage location for an instance store-backed AMI.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/Storage
0000000000000000000000000000000000000000;;	type Storage struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// An Amazon S3 storage location.
0000000000000000000000000000000000000000;;		S3 *S3Storage `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s Storage) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s Storage) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetS3 sets the S3 field's value.
0000000000000000000000000000000000000000;;	func (s *Storage) SetS3(v *S3Storage) *Storage {
0000000000000000000000000000000000000000;;		s.S3 = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a subnet.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/Subnet
0000000000000000000000000000000000000000;;	type Subnet struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether a network interface created in this subnet (including a
0000000000000000000000000000000000000000;;		// network interface created by RunInstances) receives an IPv6 address.
0000000000000000000000000000000000000000;;		AssignIpv6AddressOnCreation *bool `locationName:"assignIpv6AddressOnCreation" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Availability Zone of the subnet.
0000000000000000000000000000000000000000;;		AvailabilityZone *string `locationName:"availabilityZone" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of unused private IPv4 addresses in the subnet. Note that the
0000000000000000000000000000000000000000;;		// IPv4 addresses for any stopped instances are considered unavailable.
0000000000000000000000000000000000000000;;		AvailableIpAddressCount *int64 `locationName:"availableIpAddressCount" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IPv4 CIDR block assigned to the subnet.
0000000000000000000000000000000000000000;;		CidrBlock *string `locationName:"cidrBlock" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether this is the default subnet for the Availability Zone.
0000000000000000000000000000000000000000;;		DefaultForAz *bool `locationName:"defaultForAz" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the IPv6 CIDR blocks associated with the subnet.
0000000000000000000000000000000000000000;;		Ipv6CidrBlockAssociationSet []*SubnetIpv6CidrBlockAssociation `locationName:"ipv6CidrBlockAssociationSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether instances launched in this subnet receive a public IPv4
0000000000000000000000000000000000000000;;		// address.
0000000000000000000000000000000000000000;;		MapPublicIpOnLaunch *bool `locationName:"mapPublicIpOnLaunch" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The current state of the subnet.
0000000000000000000000000000000000000000;;		State *string `locationName:"state" type:"string" enum:"SubnetState"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the subnet.
0000000000000000000000000000000000000000;;		SubnetId *string `locationName:"subnetId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Any tags assigned to the subnet.
0000000000000000000000000000000000000000;;		Tags []*Tag `locationName:"tagSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC the subnet is in.
0000000000000000000000000000000000000000;;		VpcId *string `locationName:"vpcId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s Subnet) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s Subnet) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAssignIpv6AddressOnCreation sets the AssignIpv6AddressOnCreation field's value.
0000000000000000000000000000000000000000;;	func (s *Subnet) SetAssignIpv6AddressOnCreation(v bool) *Subnet {
0000000000000000000000000000000000000000;;		s.AssignIpv6AddressOnCreation = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAvailabilityZone sets the AvailabilityZone field's value.
0000000000000000000000000000000000000000;;	func (s *Subnet) SetAvailabilityZone(v string) *Subnet {
0000000000000000000000000000000000000000;;		s.AvailabilityZone = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAvailableIpAddressCount sets the AvailableIpAddressCount field's value.
0000000000000000000000000000000000000000;;	func (s *Subnet) SetAvailableIpAddressCount(v int64) *Subnet {
0000000000000000000000000000000000000000;;		s.AvailableIpAddressCount = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCidrBlock sets the CidrBlock field's value.
0000000000000000000000000000000000000000;;	func (s *Subnet) SetCidrBlock(v string) *Subnet {
0000000000000000000000000000000000000000;;		s.CidrBlock = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDefaultForAz sets the DefaultForAz field's value.
0000000000000000000000000000000000000000;;	func (s *Subnet) SetDefaultForAz(v bool) *Subnet {
0000000000000000000000000000000000000000;;		s.DefaultForAz = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpv6CidrBlockAssociationSet sets the Ipv6CidrBlockAssociationSet field's value.
0000000000000000000000000000000000000000;;	func (s *Subnet) SetIpv6CidrBlockAssociationSet(v []*SubnetIpv6CidrBlockAssociation) *Subnet {
0000000000000000000000000000000000000000;;		s.Ipv6CidrBlockAssociationSet = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMapPublicIpOnLaunch sets the MapPublicIpOnLaunch field's value.
0000000000000000000000000000000000000000;;	func (s *Subnet) SetMapPublicIpOnLaunch(v bool) *Subnet {
0000000000000000000000000000000000000000;;		s.MapPublicIpOnLaunch = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetState sets the State field's value.
0000000000000000000000000000000000000000;;	func (s *Subnet) SetState(v string) *Subnet {
0000000000000000000000000000000000000000;;		s.State = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSubnetId sets the SubnetId field's value.
0000000000000000000000000000000000000000;;	func (s *Subnet) SetSubnetId(v string) *Subnet {
0000000000000000000000000000000000000000;;		s.SubnetId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTags sets the Tags field's value.
0000000000000000000000000000000000000000;;	func (s *Subnet) SetTags(v []*Tag) *Subnet {
0000000000000000000000000000000000000000;;		s.Tags = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcId sets the VpcId field's value.
0000000000000000000000000000000000000000;;	func (s *Subnet) SetVpcId(v string) *Subnet {
0000000000000000000000000000000000000000;;		s.VpcId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the state of a CIDR block.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/SubnetCidrBlockState
0000000000000000000000000000000000000000;;	type SubnetCidrBlockState struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The state of a CIDR block.
0000000000000000000000000000000000000000;;		State *string `locationName:"state" type:"string" enum:"SubnetCidrBlockStateCode"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A message about the status of the CIDR block, if applicable.
0000000000000000000000000000000000000000;;		StatusMessage *string `locationName:"statusMessage" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s SubnetCidrBlockState) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s SubnetCidrBlockState) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetState sets the State field's value.
0000000000000000000000000000000000000000;;	func (s *SubnetCidrBlockState) SetState(v string) *SubnetCidrBlockState {
0000000000000000000000000000000000000000;;		s.State = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStatusMessage sets the StatusMessage field's value.
0000000000000000000000000000000000000000;;	func (s *SubnetCidrBlockState) SetStatusMessage(v string) *SubnetCidrBlockState {
0000000000000000000000000000000000000000;;		s.StatusMessage = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes an IPv6 CIDR block associated with a subnet.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/SubnetIpv6CidrBlockAssociation
0000000000000000000000000000000000000000;;	type SubnetIpv6CidrBlockAssociation struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The association ID for the CIDR block.
0000000000000000000000000000000000000000;;		AssociationId *string `locationName:"associationId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IPv6 CIDR block.
0000000000000000000000000000000000000000;;		Ipv6CidrBlock *string `locationName:"ipv6CidrBlock" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the state of the CIDR block.
0000000000000000000000000000000000000000;;		Ipv6CidrBlockState *SubnetCidrBlockState `locationName:"ipv6CidrBlockState" type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s SubnetIpv6CidrBlockAssociation) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s SubnetIpv6CidrBlockAssociation) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAssociationId sets the AssociationId field's value.
0000000000000000000000000000000000000000;;	func (s *SubnetIpv6CidrBlockAssociation) SetAssociationId(v string) *SubnetIpv6CidrBlockAssociation {
0000000000000000000000000000000000000000;;		s.AssociationId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpv6CidrBlock sets the Ipv6CidrBlock field's value.
0000000000000000000000000000000000000000;;	func (s *SubnetIpv6CidrBlockAssociation) SetIpv6CidrBlock(v string) *SubnetIpv6CidrBlockAssociation {
0000000000000000000000000000000000000000;;		s.Ipv6CidrBlock = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpv6CidrBlockState sets the Ipv6CidrBlockState field's value.
0000000000000000000000000000000000000000;;	func (s *SubnetIpv6CidrBlockAssociation) SetIpv6CidrBlockState(v *SubnetCidrBlockState) *SubnetIpv6CidrBlockAssociation {
0000000000000000000000000000000000000000;;		s.Ipv6CidrBlockState = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a tag.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/Tag
0000000000000000000000000000000000000000;;	type Tag struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The key of the tag.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Constraints: Tag keys are case-sensitive and accept a maximum of 127 Unicode
0000000000000000000000000000000000000000;;		// characters. May not begin with aws:
0000000000000000000000000000000000000000;;		Key *string `locationName:"key" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The value of the tag.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Constraints: Tag values are case-sensitive and accept a maximum of 255 Unicode
0000000000000000000000000000000000000000;;		// characters.
0000000000000000000000000000000000000000;;		Value *string `locationName:"value" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s Tag) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s Tag) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetKey sets the Key field's value.
0000000000000000000000000000000000000000;;	func (s *Tag) SetKey(v string) *Tag {
0000000000000000000000000000000000000000;;		s.Key = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetValue sets the Value field's value.
0000000000000000000000000000000000000000;;	func (s *Tag) SetValue(v string) *Tag {
0000000000000000000000000000000000000000;;		s.Value = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a tag.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/TagDescription
0000000000000000000000000000000000000000;;	type TagDescription struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The tag key.
0000000000000000000000000000000000000000;;		Key *string `locationName:"key" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the resource. For example, ami-1a2b3c4d.
0000000000000000000000000000000000000000;;		ResourceId *string `locationName:"resourceId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The resource type.
0000000000000000000000000000000000000000;;		ResourceType *string `locationName:"resourceType" type:"string" enum:"ResourceType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The tag value.
0000000000000000000000000000000000000000;;		Value *string `locationName:"value" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s TagDescription) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s TagDescription) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetKey sets the Key field's value.
0000000000000000000000000000000000000000;;	func (s *TagDescription) SetKey(v string) *TagDescription {
0000000000000000000000000000000000000000;;		s.Key = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetResourceId sets the ResourceId field's value.
0000000000000000000000000000000000000000;;	func (s *TagDescription) SetResourceId(v string) *TagDescription {
0000000000000000000000000000000000000000;;		s.ResourceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetResourceType sets the ResourceType field's value.
0000000000000000000000000000000000000000;;	func (s *TagDescription) SetResourceType(v string) *TagDescription {
0000000000000000000000000000000000000000;;		s.ResourceType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetValue sets the Value field's value.
0000000000000000000000000000000000000000;;	func (s *TagDescription) SetValue(v string) *TagDescription {
0000000000000000000000000000000000000000;;		s.Value = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Information about the Convertible Reserved Instance offering.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/TargetConfiguration
0000000000000000000000000000000000000000;;	type TargetConfiguration struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of instances the Convertible Reserved Instance offering can be
0000000000000000000000000000000000000000;;		// applied to. This parameter is reserved and cannot be specified in a request
0000000000000000000000000000000000000000;;		InstanceCount *int64 `locationName:"instanceCount" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the Convertible Reserved Instance offering.
0000000000000000000000000000000000000000;;		OfferingId *string `locationName:"offeringId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s TargetConfiguration) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s TargetConfiguration) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceCount sets the InstanceCount field's value.
0000000000000000000000000000000000000000;;	func (s *TargetConfiguration) SetInstanceCount(v int64) *TargetConfiguration {
0000000000000000000000000000000000000000;;		s.InstanceCount = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetOfferingId sets the OfferingId field's value.
0000000000000000000000000000000000000000;;	func (s *TargetConfiguration) SetOfferingId(v string) *TargetConfiguration {
0000000000000000000000000000000000000000;;		s.OfferingId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Details about the target configuration.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/TargetConfigurationRequest
0000000000000000000000000000000000000000;;	type TargetConfigurationRequest struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of instances the Covertible Reserved Instance offering can be
0000000000000000000000000000000000000000;;		// applied to. This parameter is reserved and cannot be specified in a request
0000000000000000000000000000000000000000;;		InstanceCount *int64 `type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Convertible Reserved Instance offering ID.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// OfferingId is a required field
0000000000000000000000000000000000000000;;		OfferingId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s TargetConfigurationRequest) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s TargetConfigurationRequest) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *TargetConfigurationRequest) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "TargetConfigurationRequest"}
0000000000000000000000000000000000000000;;		if s.OfferingId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("OfferingId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceCount sets the InstanceCount field's value.
0000000000000000000000000000000000000000;;	func (s *TargetConfigurationRequest) SetInstanceCount(v int64) *TargetConfigurationRequest {
0000000000000000000000000000000000000000;;		s.InstanceCount = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetOfferingId sets the OfferingId field's value.
0000000000000000000000000000000000000000;;	func (s *TargetConfigurationRequest) SetOfferingId(v string) *TargetConfigurationRequest {
0000000000000000000000000000000000000000;;		s.OfferingId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The total value of the new Convertible Reserved Instances.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/TargetReservationValue
0000000000000000000000000000000000000000;;	type TargetReservationValue struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The total value of the Convertible Reserved Instances that make up the exchange.
0000000000000000000000000000000000000000;;		// This is the sum of the list value, remaining upfront price, and additional
0000000000000000000000000000000000000000;;		// upfront cost of the exchange.
0000000000000000000000000000000000000000;;		ReservationValue *ReservationValue `locationName:"reservationValue" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The configuration of the Convertible Reserved Instances that make up the
0000000000000000000000000000000000000000;;		// exchange.
0000000000000000000000000000000000000000;;		TargetConfiguration *TargetConfiguration `locationName:"targetConfiguration" type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s TargetReservationValue) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s TargetReservationValue) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetReservationValue sets the ReservationValue field's value.
0000000000000000000000000000000000000000;;	func (s *TargetReservationValue) SetReservationValue(v *ReservationValue) *TargetReservationValue {
0000000000000000000000000000000000000000;;		s.ReservationValue = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTargetConfiguration sets the TargetConfiguration field's value.
0000000000000000000000000000000000000000;;	func (s *TargetReservationValue) SetTargetConfiguration(v *TargetConfiguration) *TargetReservationValue {
0000000000000000000000000000000000000000;;		s.TargetConfiguration = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for TerminateInstances.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/TerminateInstancesRequest
0000000000000000000000000000000000000000;;	type TerminateInstancesInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more instance IDs.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Constraints: Up to 1000 instance IDs. We recommend breaking up this request
0000000000000000000000000000000000000000;;		// into smaller batches.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// InstanceIds is a required field
0000000000000000000000000000000000000000;;		InstanceIds []*string `locationName:"InstanceId" locationNameList:"InstanceId" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s TerminateInstancesInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s TerminateInstancesInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *TerminateInstancesInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "TerminateInstancesInput"}
0000000000000000000000000000000000000000;;		if s.InstanceIds == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("InstanceIds"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *TerminateInstancesInput) SetDryRun(v bool) *TerminateInstancesInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceIds sets the InstanceIds field's value.
0000000000000000000000000000000000000000;;	func (s *TerminateInstancesInput) SetInstanceIds(v []*string) *TerminateInstancesInput {
0000000000000000000000000000000000000000;;		s.InstanceIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of TerminateInstances.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/TerminateInstancesResult
0000000000000000000000000000000000000000;;	type TerminateInstancesOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about one or more terminated instances.
0000000000000000000000000000000000000000;;		TerminatingInstances []*InstanceStateChange `locationName:"instancesSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s TerminateInstancesOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s TerminateInstancesOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTerminatingInstances sets the TerminatingInstances field's value.
0000000000000000000000000000000000000000;;	func (s *TerminateInstancesOutput) SetTerminatingInstances(v []*InstanceStateChange) *TerminateInstancesOutput {
0000000000000000000000000000000000000000;;		s.TerminatingInstances = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/UnassignIpv6AddressesRequest
0000000000000000000000000000000000000000;;	type UnassignIpv6AddressesInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IPv6 addresses to unassign from the network interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Ipv6Addresses is a required field
0000000000000000000000000000000000000000;;		Ipv6Addresses []*string `locationName:"ipv6Addresses" locationNameList:"item" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the network interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// NetworkInterfaceId is a required field
0000000000000000000000000000000000000000;;		NetworkInterfaceId *string `locationName:"networkInterfaceId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s UnassignIpv6AddressesInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s UnassignIpv6AddressesInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *UnassignIpv6AddressesInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "UnassignIpv6AddressesInput"}
0000000000000000000000000000000000000000;;		if s.Ipv6Addresses == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Ipv6Addresses"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.NetworkInterfaceId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("NetworkInterfaceId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpv6Addresses sets the Ipv6Addresses field's value.
0000000000000000000000000000000000000000;;	func (s *UnassignIpv6AddressesInput) SetIpv6Addresses(v []*string) *UnassignIpv6AddressesInput {
0000000000000000000000000000000000000000;;		s.Ipv6Addresses = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNetworkInterfaceId sets the NetworkInterfaceId field's value.
0000000000000000000000000000000000000000;;	func (s *UnassignIpv6AddressesInput) SetNetworkInterfaceId(v string) *UnassignIpv6AddressesInput {
0000000000000000000000000000000000000000;;		s.NetworkInterfaceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/UnassignIpv6AddressesResult
0000000000000000000000000000000000000000;;	type UnassignIpv6AddressesOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the network interface.
0000000000000000000000000000000000000000;;		NetworkInterfaceId *string `locationName:"networkInterfaceId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IPv6 addresses that have been unassigned from the network interface.
0000000000000000000000000000000000000000;;		UnassignedIpv6Addresses []*string `locationName:"unassignedIpv6Addresses" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s UnassignIpv6AddressesOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s UnassignIpv6AddressesOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNetworkInterfaceId sets the NetworkInterfaceId field's value.
0000000000000000000000000000000000000000;;	func (s *UnassignIpv6AddressesOutput) SetNetworkInterfaceId(v string) *UnassignIpv6AddressesOutput {
0000000000000000000000000000000000000000;;		s.NetworkInterfaceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUnassignedIpv6Addresses sets the UnassignedIpv6Addresses field's value.
0000000000000000000000000000000000000000;;	func (s *UnassignIpv6AddressesOutput) SetUnassignedIpv6Addresses(v []*string) *UnassignIpv6AddressesOutput {
0000000000000000000000000000000000000000;;		s.UnassignedIpv6Addresses = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for UnassignPrivateIpAddresses.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/UnassignPrivateIpAddressesRequest
0000000000000000000000000000000000000000;;	type UnassignPrivateIpAddressesInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the network interface.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// NetworkInterfaceId is a required field
0000000000000000000000000000000000000000;;		NetworkInterfaceId *string `locationName:"networkInterfaceId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The secondary private IP addresses to unassign from the network interface.
0000000000000000000000000000000000000000;;		// You can specify this option multiple times to unassign more than one IP address.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// PrivateIpAddresses is a required field
0000000000000000000000000000000000000000;;		PrivateIpAddresses []*string `locationName:"privateIpAddress" locationNameList:"PrivateIpAddress" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s UnassignPrivateIpAddressesInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s UnassignPrivateIpAddressesInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *UnassignPrivateIpAddressesInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "UnassignPrivateIpAddressesInput"}
0000000000000000000000000000000000000000;;		if s.NetworkInterfaceId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("NetworkInterfaceId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.PrivateIpAddresses == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("PrivateIpAddresses"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNetworkInterfaceId sets the NetworkInterfaceId field's value.
0000000000000000000000000000000000000000;;	func (s *UnassignPrivateIpAddressesInput) SetNetworkInterfaceId(v string) *UnassignPrivateIpAddressesInput {
0000000000000000000000000000000000000000;;		s.NetworkInterfaceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrivateIpAddresses sets the PrivateIpAddresses field's value.
0000000000000000000000000000000000000000;;	func (s *UnassignPrivateIpAddressesInput) SetPrivateIpAddresses(v []*string) *UnassignPrivateIpAddressesInput {
0000000000000000000000000000000000000000;;		s.PrivateIpAddresses = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/UnassignPrivateIpAddressesOutput
0000000000000000000000000000000000000000;;	type UnassignPrivateIpAddressesOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s UnassignPrivateIpAddressesOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s UnassignPrivateIpAddressesOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the parameters for UnmonitorInstances.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/UnmonitorInstancesRequest
0000000000000000000000000000000000000000;;	type UnmonitorInstancesInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Checks whether you have the required permissions for the action, without
0000000000000000000000000000000000000000;;		// actually making the request, and provides an error response. If you have
0000000000000000000000000000000000000000;;		// the required permissions, the error response is DryRunOperation. Otherwise,
0000000000000000000000000000000000000000;;		// it is UnauthorizedOperation.
0000000000000000000000000000000000000000;;		DryRun *bool `locationName:"dryRun" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more instance IDs.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// InstanceIds is a required field
0000000000000000000000000000000000000000;;		InstanceIds []*string `locationName:"InstanceId" locationNameList:"InstanceId" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s UnmonitorInstancesInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s UnmonitorInstancesInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *UnmonitorInstancesInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "UnmonitorInstancesInput"}
0000000000000000000000000000000000000000;;		if s.InstanceIds == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("InstanceIds"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDryRun sets the DryRun field's value.
0000000000000000000000000000000000000000;;	func (s *UnmonitorInstancesInput) SetDryRun(v bool) *UnmonitorInstancesInput {
0000000000000000000000000000000000000000;;		s.DryRun = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceIds sets the InstanceIds field's value.
0000000000000000000000000000000000000000;;	func (s *UnmonitorInstancesInput) SetInstanceIds(v []*string) *UnmonitorInstancesInput {
0000000000000000000000000000000000000000;;		s.InstanceIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the output of UnmonitorInstances.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/UnmonitorInstancesResult
0000000000000000000000000000000000000000;;	type UnmonitorInstancesOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The monitoring information.
0000000000000000000000000000000000000000;;		InstanceMonitorings []*InstanceMonitoring `locationName:"instancesSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s UnmonitorInstancesOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s UnmonitorInstancesOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceMonitorings sets the InstanceMonitorings field's value.
0000000000000000000000000000000000000000;;	func (s *UnmonitorInstancesOutput) SetInstanceMonitorings(v []*InstanceMonitoring) *UnmonitorInstancesOutput {
0000000000000000000000000000000000000000;;		s.InstanceMonitorings = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Information about items that were not successfully processed in a batch call.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/UnsuccessfulItem
0000000000000000000000000000000000000000;;	type UnsuccessfulItem struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the error.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Error is a required field
0000000000000000000000000000000000000000;;		Error *UnsuccessfulItemError `locationName:"error" type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the resource.
0000000000000000000000000000000000000000;;		ResourceId *string `locationName:"resourceId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s UnsuccessfulItem) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s UnsuccessfulItem) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetError sets the Error field's value.
0000000000000000000000000000000000000000;;	func (s *UnsuccessfulItem) SetError(v *UnsuccessfulItemError) *UnsuccessfulItem {
0000000000000000000000000000000000000000;;		s.Error = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetResourceId sets the ResourceId field's value.
0000000000000000000000000000000000000000;;	func (s *UnsuccessfulItem) SetResourceId(v string) *UnsuccessfulItem {
0000000000000000000000000000000000000000;;		s.ResourceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Information about the error that occurred. For more information about errors,
0000000000000000000000000000000000000000;;	// see Error Codes (http://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html).
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/UnsuccessfulItemError
0000000000000000000000000000000000000000;;	type UnsuccessfulItemError struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The error code.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Code is a required field
0000000000000000000000000000000000000000;;		Code *string `locationName:"code" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The error message accompanying the error code.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Message is a required field
0000000000000000000000000000000000000000;;		Message *string `locationName:"message" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s UnsuccessfulItemError) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s UnsuccessfulItemError) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCode sets the Code field's value.
0000000000000000000000000000000000000000;;	func (s *UnsuccessfulItemError) SetCode(v string) *UnsuccessfulItemError {
0000000000000000000000000000000000000000;;		s.Code = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMessage sets the Message field's value.
0000000000000000000000000000000000000000;;	func (s *UnsuccessfulItemError) SetMessage(v string) *UnsuccessfulItemError {
0000000000000000000000000000000000000000;;		s.Message = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the S3 bucket for the disk image.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/UserBucket
0000000000000000000000000000000000000000;;	type UserBucket struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the S3 bucket where the disk image is located.
0000000000000000000000000000000000000000;;		S3Bucket *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The file name of the disk image.
0000000000000000000000000000000000000000;;		S3Key *string `type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s UserBucket) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s UserBucket) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetS3Bucket sets the S3Bucket field's value.
0000000000000000000000000000000000000000;;	func (s *UserBucket) SetS3Bucket(v string) *UserBucket {
0000000000000000000000000000000000000000;;		s.S3Bucket = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetS3Key sets the S3Key field's value.
0000000000000000000000000000000000000000;;	func (s *UserBucket) SetS3Key(v string) *UserBucket {
0000000000000000000000000000000000000000;;		s.S3Key = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the S3 bucket for the disk image.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/UserBucketDetails
0000000000000000000000000000000000000000;;	type UserBucketDetails struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The S3 bucket from which the disk image was created.
0000000000000000000000000000000000000000;;		S3Bucket *string `locationName:"s3Bucket" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The file name of the disk image.
0000000000000000000000000000000000000000;;		S3Key *string `locationName:"s3Key" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s UserBucketDetails) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s UserBucketDetails) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetS3Bucket sets the S3Bucket field's value.
0000000000000000000000000000000000000000;;	func (s *UserBucketDetails) SetS3Bucket(v string) *UserBucketDetails {
0000000000000000000000000000000000000000;;		s.S3Bucket = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetS3Key sets the S3Key field's value.
0000000000000000000000000000000000000000;;	func (s *UserBucketDetails) SetS3Key(v string) *UserBucketDetails {
0000000000000000000000000000000000000000;;		s.S3Key = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the user data for an instance.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/UserData
0000000000000000000000000000000000000000;;	type UserData struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The user data. If you are using an AWS SDK or command line tool, Base64-encoding
0000000000000000000000000000000000000000;;		// is performed for you, and you can load the text from a file. Otherwise, you
0000000000000000000000000000000000000000;;		// must provide Base64-encoded text.
0000000000000000000000000000000000000000;;		Data *string `locationName:"data" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s UserData) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s UserData) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetData sets the Data field's value.
0000000000000000000000000000000000000000;;	func (s *UserData) SetData(v string) *UserData {
0000000000000000000000000000000000000000;;		s.Data = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a security group and AWS account ID pair.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/UserIdGroupPair
0000000000000000000000000000000000000000;;	type UserIdGroupPair struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the security group.
0000000000000000000000000000000000000000;;		GroupId *string `locationName:"groupId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the security group. In a request, use this parameter for a security
0000000000000000000000000000000000000000;;		// group in EC2-Classic or a default VPC only. For a security group in a nondefault
0000000000000000000000000000000000000000;;		// VPC, use the security group ID.
0000000000000000000000000000000000000000;;		GroupName *string `locationName:"groupName" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The status of a VPC peering connection, if applicable.
0000000000000000000000000000000000000000;;		PeeringStatus *string `locationName:"peeringStatus" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of an AWS account. For a referenced security group in another VPC,
0000000000000000000000000000000000000000;;		// the account ID of the referenced security group is returned.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// [EC2-Classic] Required when adding or removing rules that reference a security
0000000000000000000000000000000000000000;;		// group in another AWS account.
0000000000000000000000000000000000000000;;		UserId *string `locationName:"userId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC for the referenced security group, if applicable.
0000000000000000000000000000000000000000;;		VpcId *string `locationName:"vpcId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC peering connection, if applicable.
0000000000000000000000000000000000000000;;		VpcPeeringConnectionId *string `locationName:"vpcPeeringConnectionId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s UserIdGroupPair) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s UserIdGroupPair) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroupId sets the GroupId field's value.
0000000000000000000000000000000000000000;;	func (s *UserIdGroupPair) SetGroupId(v string) *UserIdGroupPair {
0000000000000000000000000000000000000000;;		s.GroupId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroupName sets the GroupName field's value.
0000000000000000000000000000000000000000;;	func (s *UserIdGroupPair) SetGroupName(v string) *UserIdGroupPair {
0000000000000000000000000000000000000000;;		s.GroupName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPeeringStatus sets the PeeringStatus field's value.
0000000000000000000000000000000000000000;;	func (s *UserIdGroupPair) SetPeeringStatus(v string) *UserIdGroupPair {
0000000000000000000000000000000000000000;;		s.PeeringStatus = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUserId sets the UserId field's value.
0000000000000000000000000000000000000000;;	func (s *UserIdGroupPair) SetUserId(v string) *UserIdGroupPair {
0000000000000000000000000000000000000000;;		s.UserId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcId sets the VpcId field's value.
0000000000000000000000000000000000000000;;	func (s *UserIdGroupPair) SetVpcId(v string) *UserIdGroupPair {
0000000000000000000000000000000000000000;;		s.VpcId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcPeeringConnectionId sets the VpcPeeringConnectionId field's value.
0000000000000000000000000000000000000000;;	func (s *UserIdGroupPair) SetVpcPeeringConnectionId(v string) *UserIdGroupPair {
0000000000000000000000000000000000000000;;		s.VpcPeeringConnectionId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes telemetry for a VPN tunnel.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/VgwTelemetry
0000000000000000000000000000000000000000;;	type VgwTelemetry struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of accepted routes.
0000000000000000000000000000000000000000;;		AcceptedRouteCount *int64 `locationName:"acceptedRouteCount" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The date and time of the last change in status.
0000000000000000000000000000000000000000;;		LastStatusChange *time.Time `locationName:"lastStatusChange" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Internet-routable IP address of the virtual private gateway's outside
0000000000000000000000000000000000000000;;		// interface.
0000000000000000000000000000000000000000;;		OutsideIpAddress *string `locationName:"outsideIpAddress" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The status of the VPN tunnel.
0000000000000000000000000000000000000000;;		Status *string `locationName:"status" type:"string" enum:"TelemetryStatus"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If an error occurs, a description of the error.
0000000000000000000000000000000000000000;;		StatusMessage *string `locationName:"statusMessage" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s VgwTelemetry) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s VgwTelemetry) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAcceptedRouteCount sets the AcceptedRouteCount field's value.
0000000000000000000000000000000000000000;;	func (s *VgwTelemetry) SetAcceptedRouteCount(v int64) *VgwTelemetry {
0000000000000000000000000000000000000000;;		s.AcceptedRouteCount = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetLastStatusChange sets the LastStatusChange field's value.
0000000000000000000000000000000000000000;;	func (s *VgwTelemetry) SetLastStatusChange(v time.Time) *VgwTelemetry {
0000000000000000000000000000000000000000;;		s.LastStatusChange = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetOutsideIpAddress sets the OutsideIpAddress field's value.
0000000000000000000000000000000000000000;;	func (s *VgwTelemetry) SetOutsideIpAddress(v string) *VgwTelemetry {
0000000000000000000000000000000000000000;;		s.OutsideIpAddress = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStatus sets the Status field's value.
0000000000000000000000000000000000000000;;	func (s *VgwTelemetry) SetStatus(v string) *VgwTelemetry {
0000000000000000000000000000000000000000;;		s.Status = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStatusMessage sets the StatusMessage field's value.
0000000000000000000000000000000000000000;;	func (s *VgwTelemetry) SetStatusMessage(v string) *VgwTelemetry {
0000000000000000000000000000000000000000;;		s.StatusMessage = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a volume.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/Volume
0000000000000000000000000000000000000000;;	type Volume struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the volume attachments.
0000000000000000000000000000000000000000;;		Attachments []*VolumeAttachment `locationName:"attachmentSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Availability Zone for the volume.
0000000000000000000000000000000000000000;;		AvailabilityZone *string `locationName:"availabilityZone" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The time stamp when volume creation was initiated.
0000000000000000000000000000000000000000;;		CreateTime *time.Time `locationName:"createTime" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether the volume will be encrypted.
0000000000000000000000000000000000000000;;		Encrypted *bool `locationName:"encrypted" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of I/O operations per second (IOPS) that the volume supports.
0000000000000000000000000000000000000000;;		// For Provisioned IOPS SSD volumes, this represents the number of IOPS that
0000000000000000000000000000000000000000;;		// are provisioned for the volume. For General Purpose SSD volumes, this represents
0000000000000000000000000000000000000000;;		// the baseline performance of the volume and the rate at which the volume accumulates
0000000000000000000000000000000000000000;;		// I/O credits for bursting. For more information on General Purpose SSD baseline
0000000000000000000000000000000000000000;;		// performance, I/O credits, and bursting, see Amazon EBS Volume Types (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html)
0000000000000000000000000000000000000000;;		// in the Amazon Elastic Compute Cloud User Guide.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Constraint: Range is 100-20000 IOPS for io1 volumes and 100-10000 IOPS for
0000000000000000000000000000000000000000;;		// gp2 volumes.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Condition: This parameter is required for requests to create io1 volumes;
0000000000000000000000000000000000000000;;		// it is not used in requests to create gp2, st1, sc1, or standard volumes.
0000000000000000000000000000000000000000;;		Iops *int64 `locationName:"iops" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The full ARN of the AWS Key Management Service (AWS KMS) customer master
0000000000000000000000000000000000000000;;		// key (CMK) that was used to protect the volume encryption key for the volume.
0000000000000000000000000000000000000000;;		KmsKeyId *string `locationName:"kmsKeyId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The size of the volume, in GiBs.
0000000000000000000000000000000000000000;;		Size *int64 `locationName:"size" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The snapshot from which the volume was created, if applicable.
0000000000000000000000000000000000000000;;		SnapshotId *string `locationName:"snapshotId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The volume state.
0000000000000000000000000000000000000000;;		State *string `locationName:"status" type:"string" enum:"VolumeState"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Any tags assigned to the volume.
0000000000000000000000000000000000000000;;		Tags []*Tag `locationName:"tagSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the volume.
0000000000000000000000000000000000000000;;		VolumeId *string `locationName:"volumeId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The volume type. This can be gp2 for General Purpose SSD, io1 for Provisioned
0000000000000000000000000000000000000000;;		// IOPS SSD, st1 for Throughput Optimized HDD, sc1 for Cold HDD, or standard
0000000000000000000000000000000000000000;;		// for Magnetic volumes.
0000000000000000000000000000000000000000;;		VolumeType *string `locationName:"volumeType" type:"string" enum:"VolumeType"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s Volume) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s Volume) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAttachments sets the Attachments field's value.
0000000000000000000000000000000000000000;;	func (s *Volume) SetAttachments(v []*VolumeAttachment) *Volume {
0000000000000000000000000000000000000000;;		s.Attachments = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAvailabilityZone sets the AvailabilityZone field's value.
0000000000000000000000000000000000000000;;	func (s *Volume) SetAvailabilityZone(v string) *Volume {
0000000000000000000000000000000000000000;;		s.AvailabilityZone = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCreateTime sets the CreateTime field's value.
0000000000000000000000000000000000000000;;	func (s *Volume) SetCreateTime(v time.Time) *Volume {
0000000000000000000000000000000000000000;;		s.CreateTime = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEncrypted sets the Encrypted field's value.
0000000000000000000000000000000000000000;;	func (s *Volume) SetEncrypted(v bool) *Volume {
0000000000000000000000000000000000000000;;		s.Encrypted = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIops sets the Iops field's value.
0000000000000000000000000000000000000000;;	func (s *Volume) SetIops(v int64) *Volume {
0000000000000000000000000000000000000000;;		s.Iops = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetKmsKeyId sets the KmsKeyId field's value.
0000000000000000000000000000000000000000;;	func (s *Volume) SetKmsKeyId(v string) *Volume {
0000000000000000000000000000000000000000;;		s.KmsKeyId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSize sets the Size field's value.
0000000000000000000000000000000000000000;;	func (s *Volume) SetSize(v int64) *Volume {
0000000000000000000000000000000000000000;;		s.Size = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSnapshotId sets the SnapshotId field's value.
0000000000000000000000000000000000000000;;	func (s *Volume) SetSnapshotId(v string) *Volume {
0000000000000000000000000000000000000000;;		s.SnapshotId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetState sets the State field's value.
0000000000000000000000000000000000000000;;	func (s *Volume) SetState(v string) *Volume {
0000000000000000000000000000000000000000;;		s.State = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTags sets the Tags field's value.
0000000000000000000000000000000000000000;;	func (s *Volume) SetTags(v []*Tag) *Volume {
0000000000000000000000000000000000000000;;		s.Tags = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVolumeId sets the VolumeId field's value.
0000000000000000000000000000000000000000;;	func (s *Volume) SetVolumeId(v string) *Volume {
0000000000000000000000000000000000000000;;		s.VolumeId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVolumeType sets the VolumeType field's value.
0000000000000000000000000000000000000000;;	func (s *Volume) SetVolumeType(v string) *Volume {
0000000000000000000000000000000000000000;;		s.VolumeType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes volume attachment details.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/VolumeAttachment
0000000000000000000000000000000000000000;;	type VolumeAttachment struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The time stamp when the attachment initiated.
0000000000000000000000000000000000000000;;		AttachTime *time.Time `locationName:"attachTime" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether the EBS volume is deleted on instance termination.
0000000000000000000000000000000000000000;;		DeleteOnTermination *bool `locationName:"deleteOnTermination" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The device name.
0000000000000000000000000000000000000000;;		Device *string `locationName:"device" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the instance.
0000000000000000000000000000000000000000;;		InstanceId *string `locationName:"instanceId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The attachment state of the volume.
0000000000000000000000000000000000000000;;		State *string `locationName:"status" type:"string" enum:"VolumeAttachmentState"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the volume.
0000000000000000000000000000000000000000;;		VolumeId *string `locationName:"volumeId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s VolumeAttachment) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s VolumeAttachment) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAttachTime sets the AttachTime field's value.
0000000000000000000000000000000000000000;;	func (s *VolumeAttachment) SetAttachTime(v time.Time) *VolumeAttachment {
0000000000000000000000000000000000000000;;		s.AttachTime = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDeleteOnTermination sets the DeleteOnTermination field's value.
0000000000000000000000000000000000000000;;	func (s *VolumeAttachment) SetDeleteOnTermination(v bool) *VolumeAttachment {
0000000000000000000000000000000000000000;;		s.DeleteOnTermination = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDevice sets the Device field's value.
0000000000000000000000000000000000000000;;	func (s *VolumeAttachment) SetDevice(v string) *VolumeAttachment {
0000000000000000000000000000000000000000;;		s.Device = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceId sets the InstanceId field's value.
0000000000000000000000000000000000000000;;	func (s *VolumeAttachment) SetInstanceId(v string) *VolumeAttachment {
0000000000000000000000000000000000000000;;		s.InstanceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetState sets the State field's value.
0000000000000000000000000000000000000000;;	func (s *VolumeAttachment) SetState(v string) *VolumeAttachment {
0000000000000000000000000000000000000000;;		s.State = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVolumeId sets the VolumeId field's value.
0000000000000000000000000000000000000000;;	func (s *VolumeAttachment) SetVolumeId(v string) *VolumeAttachment {
0000000000000000000000000000000000000000;;		s.VolumeId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes an EBS volume.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/VolumeDetail
0000000000000000000000000000000000000000;;	type VolumeDetail struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The size of the volume, in GiB.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Size is a required field
0000000000000000000000000000000000000000;;		Size *int64 `locationName:"size" type:"long" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s VolumeDetail) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s VolumeDetail) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *VolumeDetail) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "VolumeDetail"}
0000000000000000000000000000000000000000;;		if s.Size == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Size"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSize sets the Size field's value.
0000000000000000000000000000000000000000;;	func (s *VolumeDetail) SetSize(v int64) *VolumeDetail {
0000000000000000000000000000000000000000;;		s.Size = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a volume status operation code.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/VolumeStatusAction
0000000000000000000000000000000000000000;;	type VolumeStatusAction struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The code identifying the operation, for example, enable-volume-io.
0000000000000000000000000000000000000000;;		Code *string `locationName:"code" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A description of the operation.
0000000000000000000000000000000000000000;;		Description *string `locationName:"description" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the event associated with this operation.
0000000000000000000000000000000000000000;;		EventId *string `locationName:"eventId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The event type associated with this operation.
0000000000000000000000000000000000000000;;		EventType *string `locationName:"eventType" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s VolumeStatusAction) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s VolumeStatusAction) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCode sets the Code field's value.
0000000000000000000000000000000000000000;;	func (s *VolumeStatusAction) SetCode(v string) *VolumeStatusAction {
0000000000000000000000000000000000000000;;		s.Code = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDescription sets the Description field's value.
0000000000000000000000000000000000000000;;	func (s *VolumeStatusAction) SetDescription(v string) *VolumeStatusAction {
0000000000000000000000000000000000000000;;		s.Description = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEventId sets the EventId field's value.
0000000000000000000000000000000000000000;;	func (s *VolumeStatusAction) SetEventId(v string) *VolumeStatusAction {
0000000000000000000000000000000000000000;;		s.EventId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEventType sets the EventType field's value.
0000000000000000000000000000000000000000;;	func (s *VolumeStatusAction) SetEventType(v string) *VolumeStatusAction {
0000000000000000000000000000000000000000;;		s.EventType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a volume status.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/VolumeStatusDetails
0000000000000000000000000000000000000000;;	type VolumeStatusDetails struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the volume status.
0000000000000000000000000000000000000000;;		Name *string `locationName:"name" type:"string" enum:"VolumeStatusName"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The intended status of the volume status.
0000000000000000000000000000000000000000;;		Status *string `locationName:"status" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s VolumeStatusDetails) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s VolumeStatusDetails) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetName sets the Name field's value.
0000000000000000000000000000000000000000;;	func (s *VolumeStatusDetails) SetName(v string) *VolumeStatusDetails {
0000000000000000000000000000000000000000;;		s.Name = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStatus sets the Status field's value.
0000000000000000000000000000000000000000;;	func (s *VolumeStatusDetails) SetStatus(v string) *VolumeStatusDetails {
0000000000000000000000000000000000000000;;		s.Status = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a volume status event.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/VolumeStatusEvent
0000000000000000000000000000000000000000;;	type VolumeStatusEvent struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A description of the event.
0000000000000000000000000000000000000000;;		Description *string `locationName:"description" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of this event.
0000000000000000000000000000000000000000;;		EventId *string `locationName:"eventId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The type of this event.
0000000000000000000000000000000000000000;;		EventType *string `locationName:"eventType" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The latest end time of the event.
0000000000000000000000000000000000000000;;		NotAfter *time.Time `locationName:"notAfter" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The earliest start time of the event.
0000000000000000000000000000000000000000;;		NotBefore *time.Time `locationName:"notBefore" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s VolumeStatusEvent) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s VolumeStatusEvent) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDescription sets the Description field's value.
0000000000000000000000000000000000000000;;	func (s *VolumeStatusEvent) SetDescription(v string) *VolumeStatusEvent {
0000000000000000000000000000000000000000;;		s.Description = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEventId sets the EventId field's value.
0000000000000000000000000000000000000000;;	func (s *VolumeStatusEvent) SetEventId(v string) *VolumeStatusEvent {
0000000000000000000000000000000000000000;;		s.EventId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEventType sets the EventType field's value.
0000000000000000000000000000000000000000;;	func (s *VolumeStatusEvent) SetEventType(v string) *VolumeStatusEvent {
0000000000000000000000000000000000000000;;		s.EventType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNotAfter sets the NotAfter field's value.
0000000000000000000000000000000000000000;;	func (s *VolumeStatusEvent) SetNotAfter(v time.Time) *VolumeStatusEvent {
0000000000000000000000000000000000000000;;		s.NotAfter = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNotBefore sets the NotBefore field's value.
0000000000000000000000000000000000000000;;	func (s *VolumeStatusEvent) SetNotBefore(v time.Time) *VolumeStatusEvent {
0000000000000000000000000000000000000000;;		s.NotBefore = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the status of a volume.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/VolumeStatusInfo
0000000000000000000000000000000000000000;;	type VolumeStatusInfo struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The details of the volume status.
0000000000000000000000000000000000000000;;		Details []*VolumeStatusDetails `locationName:"details" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The status of the volume.
0000000000000000000000000000000000000000;;		Status *string `locationName:"status" type:"string" enum:"VolumeStatusInfoStatus"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s VolumeStatusInfo) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s VolumeStatusInfo) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDetails sets the Details field's value.
0000000000000000000000000000000000000000;;	func (s *VolumeStatusInfo) SetDetails(v []*VolumeStatusDetails) *VolumeStatusInfo {
0000000000000000000000000000000000000000;;		s.Details = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStatus sets the Status field's value.
0000000000000000000000000000000000000000;;	func (s *VolumeStatusInfo) SetStatus(v string) *VolumeStatusInfo {
0000000000000000000000000000000000000000;;		s.Status = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the volume status.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/VolumeStatusItem
0000000000000000000000000000000000000000;;	type VolumeStatusItem struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The details of the operation.
0000000000000000000000000000000000000000;;		Actions []*VolumeStatusAction `locationName:"actionsSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Availability Zone of the volume.
0000000000000000000000000000000000000000;;		AvailabilityZone *string `locationName:"availabilityZone" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A list of events associated with the volume.
0000000000000000000000000000000000000000;;		Events []*VolumeStatusEvent `locationName:"eventsSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The volume ID.
0000000000000000000000000000000000000000;;		VolumeId *string `locationName:"volumeId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The volume status.
0000000000000000000000000000000000000000;;		VolumeStatus *VolumeStatusInfo `locationName:"volumeStatus" type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s VolumeStatusItem) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s VolumeStatusItem) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetActions sets the Actions field's value.
0000000000000000000000000000000000000000;;	func (s *VolumeStatusItem) SetActions(v []*VolumeStatusAction) *VolumeStatusItem {
0000000000000000000000000000000000000000;;		s.Actions = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAvailabilityZone sets the AvailabilityZone field's value.
0000000000000000000000000000000000000000;;	func (s *VolumeStatusItem) SetAvailabilityZone(v string) *VolumeStatusItem {
0000000000000000000000000000000000000000;;		s.AvailabilityZone = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEvents sets the Events field's value.
0000000000000000000000000000000000000000;;	func (s *VolumeStatusItem) SetEvents(v []*VolumeStatusEvent) *VolumeStatusItem {
0000000000000000000000000000000000000000;;		s.Events = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVolumeId sets the VolumeId field's value.
0000000000000000000000000000000000000000;;	func (s *VolumeStatusItem) SetVolumeId(v string) *VolumeStatusItem {
0000000000000000000000000000000000000000;;		s.VolumeId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVolumeStatus sets the VolumeStatus field's value.
0000000000000000000000000000000000000000;;	func (s *VolumeStatusItem) SetVolumeStatus(v *VolumeStatusInfo) *VolumeStatusItem {
0000000000000000000000000000000000000000;;		s.VolumeStatus = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a VPC.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/Vpc
0000000000000000000000000000000000000000;;	type Vpc struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IPv4 CIDR block for the VPC.
0000000000000000000000000000000000000000;;		CidrBlock *string `locationName:"cidrBlock" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the set of DHCP options you've associated with the VPC (or default
0000000000000000000000000000000000000000;;		// if the default options are associated with the VPC).
0000000000000000000000000000000000000000;;		DhcpOptionsId *string `locationName:"dhcpOptionsId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The allowed tenancy of instances launched into the VPC.
0000000000000000000000000000000000000000;;		InstanceTenancy *string `locationName:"instanceTenancy" type:"string" enum:"Tenancy"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the IPv6 CIDR blocks associated with the VPC.
0000000000000000000000000000000000000000;;		Ipv6CidrBlockAssociationSet []*VpcIpv6CidrBlockAssociation `locationName:"ipv6CidrBlockAssociationSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether the VPC is the default VPC.
0000000000000000000000000000000000000000;;		IsDefault *bool `locationName:"isDefault" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The current state of the VPC.
0000000000000000000000000000000000000000;;		State *string `locationName:"state" type:"string" enum:"VpcState"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Any tags assigned to the VPC.
0000000000000000000000000000000000000000;;		Tags []*Tag `locationName:"tagSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC.
0000000000000000000000000000000000000000;;		VpcId *string `locationName:"vpcId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s Vpc) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s Vpc) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCidrBlock sets the CidrBlock field's value.
0000000000000000000000000000000000000000;;	func (s *Vpc) SetCidrBlock(v string) *Vpc {
0000000000000000000000000000000000000000;;		s.CidrBlock = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDhcpOptionsId sets the DhcpOptionsId field's value.
0000000000000000000000000000000000000000;;	func (s *Vpc) SetDhcpOptionsId(v string) *Vpc {
0000000000000000000000000000000000000000;;		s.DhcpOptionsId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInstanceTenancy sets the InstanceTenancy field's value.
0000000000000000000000000000000000000000;;	func (s *Vpc) SetInstanceTenancy(v string) *Vpc {
0000000000000000000000000000000000000000;;		s.InstanceTenancy = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpv6CidrBlockAssociationSet sets the Ipv6CidrBlockAssociationSet field's value.
0000000000000000000000000000000000000000;;	func (s *Vpc) SetIpv6CidrBlockAssociationSet(v []*VpcIpv6CidrBlockAssociation) *Vpc {
0000000000000000000000000000000000000000;;		s.Ipv6CidrBlockAssociationSet = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIsDefault sets the IsDefault field's value.
0000000000000000000000000000000000000000;;	func (s *Vpc) SetIsDefault(v bool) *Vpc {
0000000000000000000000000000000000000000;;		s.IsDefault = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetState sets the State field's value.
0000000000000000000000000000000000000000;;	func (s *Vpc) SetState(v string) *Vpc {
0000000000000000000000000000000000000000;;		s.State = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTags sets the Tags field's value.
0000000000000000000000000000000000000000;;	func (s *Vpc) SetTags(v []*Tag) *Vpc {
0000000000000000000000000000000000000000;;		s.Tags = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcId sets the VpcId field's value.
0000000000000000000000000000000000000000;;	func (s *Vpc) SetVpcId(v string) *Vpc {
0000000000000000000000000000000000000000;;		s.VpcId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes an attachment between a virtual private gateway and a VPC.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/VpcAttachment
0000000000000000000000000000000000000000;;	type VpcAttachment struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The current state of the attachment.
0000000000000000000000000000000000000000;;		State *string `locationName:"state" type:"string" enum:"AttachmentStatus"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC.
0000000000000000000000000000000000000000;;		VpcId *string `locationName:"vpcId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s VpcAttachment) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s VpcAttachment) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetState sets the State field's value.
0000000000000000000000000000000000000000;;	func (s *VpcAttachment) SetState(v string) *VpcAttachment {
0000000000000000000000000000000000000000;;		s.State = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcId sets the VpcId field's value.
0000000000000000000000000000000000000000;;	func (s *VpcAttachment) SetVpcId(v string) *VpcAttachment {
0000000000000000000000000000000000000000;;		s.VpcId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the state of a CIDR block.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/VpcCidrBlockState
0000000000000000000000000000000000000000;;	type VpcCidrBlockState struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The state of the CIDR block.
0000000000000000000000000000000000000000;;		State *string `locationName:"state" type:"string" enum:"VpcCidrBlockStateCode"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A message about the status of the CIDR block, if applicable.
0000000000000000000000000000000000000000;;		StatusMessage *string `locationName:"statusMessage" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s VpcCidrBlockState) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s VpcCidrBlockState) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetState sets the State field's value.
0000000000000000000000000000000000000000;;	func (s *VpcCidrBlockState) SetState(v string) *VpcCidrBlockState {
0000000000000000000000000000000000000000;;		s.State = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStatusMessage sets the StatusMessage field's value.
0000000000000000000000000000000000000000;;	func (s *VpcCidrBlockState) SetStatusMessage(v string) *VpcCidrBlockState {
0000000000000000000000000000000000000000;;		s.StatusMessage = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes whether a VPC is enabled for ClassicLink.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/VpcClassicLink
0000000000000000000000000000000000000000;;	type VpcClassicLink struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether the VPC is enabled for ClassicLink.
0000000000000000000000000000000000000000;;		ClassicLinkEnabled *bool `locationName:"classicLinkEnabled" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Any tags assigned to the VPC.
0000000000000000000000000000000000000000;;		Tags []*Tag `locationName:"tagSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC.
0000000000000000000000000000000000000000;;		VpcId *string `locationName:"vpcId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s VpcClassicLink) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s VpcClassicLink) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetClassicLinkEnabled sets the ClassicLinkEnabled field's value.
0000000000000000000000000000000000000000;;	func (s *VpcClassicLink) SetClassicLinkEnabled(v bool) *VpcClassicLink {
0000000000000000000000000000000000000000;;		s.ClassicLinkEnabled = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTags sets the Tags field's value.
0000000000000000000000000000000000000000;;	func (s *VpcClassicLink) SetTags(v []*Tag) *VpcClassicLink {
0000000000000000000000000000000000000000;;		s.Tags = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcId sets the VpcId field's value.
0000000000000000000000000000000000000000;;	func (s *VpcClassicLink) SetVpcId(v string) *VpcClassicLink {
0000000000000000000000000000000000000000;;		s.VpcId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a VPC endpoint.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/VpcEndpoint
0000000000000000000000000000000000000000;;	type VpcEndpoint struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The date and time the VPC endpoint was created.
0000000000000000000000000000000000000000;;		CreationTimestamp *time.Time `locationName:"creationTimestamp" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The policy document associated with the endpoint.
0000000000000000000000000000000000000000;;		PolicyDocument *string `locationName:"policyDocument" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// One or more route tables associated with the endpoint.
0000000000000000000000000000000000000000;;		RouteTableIds []*string `locationName:"routeTableIdSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the AWS service to which the endpoint is associated.
0000000000000000000000000000000000000000;;		ServiceName *string `locationName:"serviceName" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The state of the VPC endpoint.
0000000000000000000000000000000000000000;;		State *string `locationName:"state" type:"string" enum:"State"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC endpoint.
0000000000000000000000000000000000000000;;		VpcEndpointId *string `locationName:"vpcEndpointId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC to which the endpoint is associated.
0000000000000000000000000000000000000000;;		VpcId *string `locationName:"vpcId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s VpcEndpoint) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s VpcEndpoint) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCreationTimestamp sets the CreationTimestamp field's value.
0000000000000000000000000000000000000000;;	func (s *VpcEndpoint) SetCreationTimestamp(v time.Time) *VpcEndpoint {
0000000000000000000000000000000000000000;;		s.CreationTimestamp = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPolicyDocument sets the PolicyDocument field's value.
0000000000000000000000000000000000000000;;	func (s *VpcEndpoint) SetPolicyDocument(v string) *VpcEndpoint {
0000000000000000000000000000000000000000;;		s.PolicyDocument = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRouteTableIds sets the RouteTableIds field's value.
0000000000000000000000000000000000000000;;	func (s *VpcEndpoint) SetRouteTableIds(v []*string) *VpcEndpoint {
0000000000000000000000000000000000000000;;		s.RouteTableIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetServiceName sets the ServiceName field's value.
0000000000000000000000000000000000000000;;	func (s *VpcEndpoint) SetServiceName(v string) *VpcEndpoint {
0000000000000000000000000000000000000000;;		s.ServiceName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetState sets the State field's value.
0000000000000000000000000000000000000000;;	func (s *VpcEndpoint) SetState(v string) *VpcEndpoint {
0000000000000000000000000000000000000000;;		s.State = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcEndpointId sets the VpcEndpointId field's value.
0000000000000000000000000000000000000000;;	func (s *VpcEndpoint) SetVpcEndpointId(v string) *VpcEndpoint {
0000000000000000000000000000000000000000;;		s.VpcEndpointId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcId sets the VpcId field's value.
0000000000000000000000000000000000000000;;	func (s *VpcEndpoint) SetVpcId(v string) *VpcEndpoint {
0000000000000000000000000000000000000000;;		s.VpcId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes an IPv6 CIDR block associated with a VPC.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/VpcIpv6CidrBlockAssociation
0000000000000000000000000000000000000000;;	type VpcIpv6CidrBlockAssociation struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The association ID for the IPv6 CIDR block.
0000000000000000000000000000000000000000;;		AssociationId *string `locationName:"associationId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IPv6 CIDR block.
0000000000000000000000000000000000000000;;		Ipv6CidrBlock *string `locationName:"ipv6CidrBlock" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the state of the CIDR block.
0000000000000000000000000000000000000000;;		Ipv6CidrBlockState *VpcCidrBlockState `locationName:"ipv6CidrBlockState" type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s VpcIpv6CidrBlockAssociation) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s VpcIpv6CidrBlockAssociation) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAssociationId sets the AssociationId field's value.
0000000000000000000000000000000000000000;;	func (s *VpcIpv6CidrBlockAssociation) SetAssociationId(v string) *VpcIpv6CidrBlockAssociation {
0000000000000000000000000000000000000000;;		s.AssociationId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpv6CidrBlock sets the Ipv6CidrBlock field's value.
0000000000000000000000000000000000000000;;	func (s *VpcIpv6CidrBlockAssociation) SetIpv6CidrBlock(v string) *VpcIpv6CidrBlockAssociation {
0000000000000000000000000000000000000000;;		s.Ipv6CidrBlock = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpv6CidrBlockState sets the Ipv6CidrBlockState field's value.
0000000000000000000000000000000000000000;;	func (s *VpcIpv6CidrBlockAssociation) SetIpv6CidrBlockState(v *VpcCidrBlockState) *VpcIpv6CidrBlockAssociation {
0000000000000000000000000000000000000000;;		s.Ipv6CidrBlockState = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a VPC peering connection.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/VpcPeeringConnection
0000000000000000000000000000000000000000;;	type VpcPeeringConnection struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the accepter VPC. CIDR block information is not returned
0000000000000000000000000000000000000000;;		// when creating a VPC peering connection, or when describing a VPC peering
0000000000000000000000000000000000000000;;		// connection that's in the initiating-request or pending-acceptance state.
0000000000000000000000000000000000000000;;		AccepterVpcInfo *VpcPeeringConnectionVpcInfo `locationName:"accepterVpcInfo" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The time that an unaccepted VPC peering connection will expire.
0000000000000000000000000000000000000000;;		ExpirationTime *time.Time `locationName:"expirationTime" type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the requester VPC.
0000000000000000000000000000000000000000;;		RequesterVpcInfo *VpcPeeringConnectionVpcInfo `locationName:"requesterVpcInfo" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The status of the VPC peering connection.
0000000000000000000000000000000000000000;;		Status *VpcPeeringConnectionStateReason `locationName:"status" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Any tags assigned to the resource.
0000000000000000000000000000000000000000;;		Tags []*Tag `locationName:"tagSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC peering connection.
0000000000000000000000000000000000000000;;		VpcPeeringConnectionId *string `locationName:"vpcPeeringConnectionId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s VpcPeeringConnection) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s VpcPeeringConnection) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAccepterVpcInfo sets the AccepterVpcInfo field's value.
0000000000000000000000000000000000000000;;	func (s *VpcPeeringConnection) SetAccepterVpcInfo(v *VpcPeeringConnectionVpcInfo) *VpcPeeringConnection {
0000000000000000000000000000000000000000;;		s.AccepterVpcInfo = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetExpirationTime sets the ExpirationTime field's value.
0000000000000000000000000000000000000000;;	func (s *VpcPeeringConnection) SetExpirationTime(v time.Time) *VpcPeeringConnection {
0000000000000000000000000000000000000000;;		s.ExpirationTime = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRequesterVpcInfo sets the RequesterVpcInfo field's value.
0000000000000000000000000000000000000000;;	func (s *VpcPeeringConnection) SetRequesterVpcInfo(v *VpcPeeringConnectionVpcInfo) *VpcPeeringConnection {
0000000000000000000000000000000000000000;;		s.RequesterVpcInfo = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStatus sets the Status field's value.
0000000000000000000000000000000000000000;;	func (s *VpcPeeringConnection) SetStatus(v *VpcPeeringConnectionStateReason) *VpcPeeringConnection {
0000000000000000000000000000000000000000;;		s.Status = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTags sets the Tags field's value.
0000000000000000000000000000000000000000;;	func (s *VpcPeeringConnection) SetTags(v []*Tag) *VpcPeeringConnection {
0000000000000000000000000000000000000000;;		s.Tags = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcPeeringConnectionId sets the VpcPeeringConnectionId field's value.
0000000000000000000000000000000000000000;;	func (s *VpcPeeringConnection) SetVpcPeeringConnectionId(v string) *VpcPeeringConnection {
0000000000000000000000000000000000000000;;		s.VpcPeeringConnectionId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the VPC peering connection options.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/VpcPeeringConnectionOptionsDescription
0000000000000000000000000000000000000000;;	type VpcPeeringConnectionOptionsDescription struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether a local VPC can resolve public DNS hostnames to private
0000000000000000000000000000000000000000;;		// IP addresses when queried from instances in a peer VPC.
0000000000000000000000000000000000000000;;		AllowDnsResolutionFromRemoteVpc *bool `locationName:"allowDnsResolutionFromRemoteVpc" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether a local ClassicLink connection can communicate with the
0000000000000000000000000000000000000000;;		// peer VPC over the VPC peering connection.
0000000000000000000000000000000000000000;;		AllowEgressFromLocalClassicLinkToRemoteVpc *bool `locationName:"allowEgressFromLocalClassicLinkToRemoteVpc" type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether a local VPC can communicate with a ClassicLink connection
0000000000000000000000000000000000000000;;		// in the peer VPC over the VPC peering connection.
0000000000000000000000000000000000000000;;		AllowEgressFromLocalVpcToRemoteClassicLink *bool `locationName:"allowEgressFromLocalVpcToRemoteClassicLink" type:"boolean"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s VpcPeeringConnectionOptionsDescription) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s VpcPeeringConnectionOptionsDescription) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAllowDnsResolutionFromRemoteVpc sets the AllowDnsResolutionFromRemoteVpc field's value.
0000000000000000000000000000000000000000;;	func (s *VpcPeeringConnectionOptionsDescription) SetAllowDnsResolutionFromRemoteVpc(v bool) *VpcPeeringConnectionOptionsDescription {
0000000000000000000000000000000000000000;;		s.AllowDnsResolutionFromRemoteVpc = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAllowEgressFromLocalClassicLinkToRemoteVpc sets the AllowEgressFromLocalClassicLinkToRemoteVpc field's value.
0000000000000000000000000000000000000000;;	func (s *VpcPeeringConnectionOptionsDescription) SetAllowEgressFromLocalClassicLinkToRemoteVpc(v bool) *VpcPeeringConnectionOptionsDescription {
0000000000000000000000000000000000000000;;		s.AllowEgressFromLocalClassicLinkToRemoteVpc = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAllowEgressFromLocalVpcToRemoteClassicLink sets the AllowEgressFromLocalVpcToRemoteClassicLink field's value.
0000000000000000000000000000000000000000;;	func (s *VpcPeeringConnectionOptionsDescription) SetAllowEgressFromLocalVpcToRemoteClassicLink(v bool) *VpcPeeringConnectionOptionsDescription {
0000000000000000000000000000000000000000;;		s.AllowEgressFromLocalVpcToRemoteClassicLink = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes the status of a VPC peering connection.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/VpcPeeringConnectionStateReason
0000000000000000000000000000000000000000;;	type VpcPeeringConnectionStateReason struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The status of the VPC peering connection.
0000000000000000000000000000000000000000;;		Code *string `locationName:"code" type:"string" enum:"VpcPeeringConnectionStateReasonCode"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A message that provides more information about the status, if applicable.
0000000000000000000000000000000000000000;;		Message *string `locationName:"message" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s VpcPeeringConnectionStateReason) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s VpcPeeringConnectionStateReason) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCode sets the Code field's value.
0000000000000000000000000000000000000000;;	func (s *VpcPeeringConnectionStateReason) SetCode(v string) *VpcPeeringConnectionStateReason {
0000000000000000000000000000000000000000;;		s.Code = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMessage sets the Message field's value.
0000000000000000000000000000000000000000;;	func (s *VpcPeeringConnectionStateReason) SetMessage(v string) *VpcPeeringConnectionStateReason {
0000000000000000000000000000000000000000;;		s.Message = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a VPC in a VPC peering connection.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/VpcPeeringConnectionVpcInfo
0000000000000000000000000000000000000000;;	type VpcPeeringConnectionVpcInfo struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IPv4 CIDR block for the VPC.
0000000000000000000000000000000000000000;;		CidrBlock *string `locationName:"cidrBlock" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IPv6 CIDR block for the VPC.
0000000000000000000000000000000000000000;;		Ipv6CidrBlockSet []*Ipv6CidrBlock `locationName:"ipv6CidrBlockSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The AWS account ID of the VPC owner.
0000000000000000000000000000000000000000;;		OwnerId *string `locationName:"ownerId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the VPC peering connection options for the accepter or
0000000000000000000000000000000000000000;;		// requester VPC.
0000000000000000000000000000000000000000;;		PeeringOptions *VpcPeeringConnectionOptionsDescription `locationName:"peeringOptions" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPC.
0000000000000000000000000000000000000000;;		VpcId *string `locationName:"vpcId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s VpcPeeringConnectionVpcInfo) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s VpcPeeringConnectionVpcInfo) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCidrBlock sets the CidrBlock field's value.
0000000000000000000000000000000000000000;;	func (s *VpcPeeringConnectionVpcInfo) SetCidrBlock(v string) *VpcPeeringConnectionVpcInfo {
0000000000000000000000000000000000000000;;		s.CidrBlock = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIpv6CidrBlockSet sets the Ipv6CidrBlockSet field's value.
0000000000000000000000000000000000000000;;	func (s *VpcPeeringConnectionVpcInfo) SetIpv6CidrBlockSet(v []*Ipv6CidrBlock) *VpcPeeringConnectionVpcInfo {
0000000000000000000000000000000000000000;;		s.Ipv6CidrBlockSet = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetOwnerId sets the OwnerId field's value.
0000000000000000000000000000000000000000;;	func (s *VpcPeeringConnectionVpcInfo) SetOwnerId(v string) *VpcPeeringConnectionVpcInfo {
0000000000000000000000000000000000000000;;		s.OwnerId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPeeringOptions sets the PeeringOptions field's value.
0000000000000000000000000000000000000000;;	func (s *VpcPeeringConnectionVpcInfo) SetPeeringOptions(v *VpcPeeringConnectionOptionsDescription) *VpcPeeringConnectionVpcInfo {
0000000000000000000000000000000000000000;;		s.PeeringOptions = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcId sets the VpcId field's value.
0000000000000000000000000000000000000000;;	func (s *VpcPeeringConnectionVpcInfo) SetVpcId(v string) *VpcPeeringConnectionVpcInfo {
0000000000000000000000000000000000000000;;		s.VpcId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a VPN connection.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/VpnConnection
0000000000000000000000000000000000000000;;	type VpnConnection struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The configuration information for the VPN connection's customer gateway (in
0000000000000000000000000000000000000000;;		// the native XML format). This element is always present in the CreateVpnConnection
0000000000000000000000000000000000000000;;		// response; however, it's present in the DescribeVpnConnections response only
0000000000000000000000000000000000000000;;		// if the VPN connection is in the pending or available state.
0000000000000000000000000000000000000000;;		CustomerGatewayConfiguration *string `locationName:"customerGatewayConfiguration" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the customer gateway at your end of the VPN connection.
0000000000000000000000000000000000000000;;		CustomerGatewayId *string `locationName:"customerGatewayId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The VPN connection options.
0000000000000000000000000000000000000000;;		Options *VpnConnectionOptions `locationName:"options" type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The static routes associated with the VPN connection.
0000000000000000000000000000000000000000;;		Routes []*VpnStaticRoute `locationName:"routes" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The current state of the VPN connection.
0000000000000000000000000000000000000000;;		State *string `locationName:"state" type:"string" enum:"VpnState"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Any tags assigned to the VPN connection.
0000000000000000000000000000000000000000;;		Tags []*Tag `locationName:"tagSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The type of VPN connection.
0000000000000000000000000000000000000000;;		Type *string `locationName:"type" type:"string" enum:"GatewayType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the VPN tunnel.
0000000000000000000000000000000000000000;;		VgwTelemetry []*VgwTelemetry `locationName:"vgwTelemetry" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the VPN connection.
0000000000000000000000000000000000000000;;		VpnConnectionId *string `locationName:"vpnConnectionId" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the virtual private gateway at the AWS side of the VPN connection.
0000000000000000000000000000000000000000;;		VpnGatewayId *string `locationName:"vpnGatewayId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s VpnConnection) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s VpnConnection) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCustomerGatewayConfiguration sets the CustomerGatewayConfiguration field's value.
0000000000000000000000000000000000000000;;	func (s *VpnConnection) SetCustomerGatewayConfiguration(v string) *VpnConnection {
0000000000000000000000000000000000000000;;		s.CustomerGatewayConfiguration = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCustomerGatewayId sets the CustomerGatewayId field's value.
0000000000000000000000000000000000000000;;	func (s *VpnConnection) SetCustomerGatewayId(v string) *VpnConnection {
0000000000000000000000000000000000000000;;		s.CustomerGatewayId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetOptions sets the Options field's value.
0000000000000000000000000000000000000000;;	func (s *VpnConnection) SetOptions(v *VpnConnectionOptions) *VpnConnection {
0000000000000000000000000000000000000000;;		s.Options = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRoutes sets the Routes field's value.
0000000000000000000000000000000000000000;;	func (s *VpnConnection) SetRoutes(v []*VpnStaticRoute) *VpnConnection {
0000000000000000000000000000000000000000;;		s.Routes = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetState sets the State field's value.
0000000000000000000000000000000000000000;;	func (s *VpnConnection) SetState(v string) *VpnConnection {
0000000000000000000000000000000000000000;;		s.State = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTags sets the Tags field's value.
0000000000000000000000000000000000000000;;	func (s *VpnConnection) SetTags(v []*Tag) *VpnConnection {
0000000000000000000000000000000000000000;;		s.Tags = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetType sets the Type field's value.
0000000000000000000000000000000000000000;;	func (s *VpnConnection) SetType(v string) *VpnConnection {
0000000000000000000000000000000000000000;;		s.Type = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVgwTelemetry sets the VgwTelemetry field's value.
0000000000000000000000000000000000000000;;	func (s *VpnConnection) SetVgwTelemetry(v []*VgwTelemetry) *VpnConnection {
0000000000000000000000000000000000000000;;		s.VgwTelemetry = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpnConnectionId sets the VpnConnectionId field's value.
0000000000000000000000000000000000000000;;	func (s *VpnConnection) SetVpnConnectionId(v string) *VpnConnection {
0000000000000000000000000000000000000000;;		s.VpnConnectionId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpnGatewayId sets the VpnGatewayId field's value.
0000000000000000000000000000000000000000;;	func (s *VpnConnection) SetVpnGatewayId(v string) *VpnConnection {
0000000000000000000000000000000000000000;;		s.VpnGatewayId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes VPN connection options.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/VpnConnectionOptions
0000000000000000000000000000000000000000;;	type VpnConnectionOptions struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether the VPN connection uses static routes only. Static routes
0000000000000000000000000000000000000000;;		// must be used for devices that don't support BGP.
0000000000000000000000000000000000000000;;		StaticRoutesOnly *bool `locationName:"staticRoutesOnly" type:"boolean"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s VpnConnectionOptions) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s VpnConnectionOptions) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStaticRoutesOnly sets the StaticRoutesOnly field's value.
0000000000000000000000000000000000000000;;	func (s *VpnConnectionOptions) SetStaticRoutesOnly(v bool) *VpnConnectionOptions {
0000000000000000000000000000000000000000;;		s.StaticRoutesOnly = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes VPN connection options.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/VpnConnectionOptionsSpecification
0000000000000000000000000000000000000000;;	type VpnConnectionOptionsSpecification struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates whether the VPN connection uses static routes only. Static routes
0000000000000000000000000000000000000000;;		// must be used for devices that don't support BGP.
0000000000000000000000000000000000000000;;		StaticRoutesOnly *bool `locationName:"staticRoutesOnly" type:"boolean"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s VpnConnectionOptionsSpecification) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s VpnConnectionOptionsSpecification) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStaticRoutesOnly sets the StaticRoutesOnly field's value.
0000000000000000000000000000000000000000;;	func (s *VpnConnectionOptionsSpecification) SetStaticRoutesOnly(v bool) *VpnConnectionOptionsSpecification {
0000000000000000000000000000000000000000;;		s.StaticRoutesOnly = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a virtual private gateway.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/VpnGateway
0000000000000000000000000000000000000000;;	type VpnGateway struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Availability Zone where the virtual private gateway was created, if applicable.
0000000000000000000000000000000000000000;;		// This field may be empty or not returned.
0000000000000000000000000000000000000000;;		AvailabilityZone *string `locationName:"availabilityZone" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The current state of the virtual private gateway.
0000000000000000000000000000000000000000;;		State *string `locationName:"state" type:"string" enum:"VpnState"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Any tags assigned to the virtual private gateway.
0000000000000000000000000000000000000000;;		Tags []*Tag `locationName:"tagSet" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The type of VPN connection the virtual private gateway supports.
0000000000000000000000000000000000000000;;		Type *string `locationName:"type" type:"string" enum:"GatewayType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Any VPCs attached to the virtual private gateway.
0000000000000000000000000000000000000000;;		VpcAttachments []*VpcAttachment `locationName:"attachments" locationNameList:"item" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the virtual private gateway.
0000000000000000000000000000000000000000;;		VpnGatewayId *string `locationName:"vpnGatewayId" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s VpnGateway) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s VpnGateway) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAvailabilityZone sets the AvailabilityZone field's value.
0000000000000000000000000000000000000000;;	func (s *VpnGateway) SetAvailabilityZone(v string) *VpnGateway {
0000000000000000000000000000000000000000;;		s.AvailabilityZone = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetState sets the State field's value.
0000000000000000000000000000000000000000;;	func (s *VpnGateway) SetState(v string) *VpnGateway {
0000000000000000000000000000000000000000;;		s.State = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTags sets the Tags field's value.
0000000000000000000000000000000000000000;;	func (s *VpnGateway) SetTags(v []*Tag) *VpnGateway {
0000000000000000000000000000000000000000;;		s.Tags = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetType sets the Type field's value.
0000000000000000000000000000000000000000;;	func (s *VpnGateway) SetType(v string) *VpnGateway {
0000000000000000000000000000000000000000;;		s.Type = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpcAttachments sets the VpcAttachments field's value.
0000000000000000000000000000000000000000;;	func (s *VpnGateway) SetVpcAttachments(v []*VpcAttachment) *VpnGateway {
0000000000000000000000000000000000000000;;		s.VpcAttachments = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVpnGatewayId sets the VpnGatewayId field's value.
0000000000000000000000000000000000000000;;	func (s *VpnGateway) SetVpnGatewayId(v string) *VpnGateway {
0000000000000000000000000000000000000000;;		s.VpnGatewayId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a static route for a VPN connection.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15/VpnStaticRoute
0000000000000000000000000000000000000000;;	type VpnStaticRoute struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The CIDR block associated with the local subnet of the customer data center.
0000000000000000000000000000000000000000;;		DestinationCidrBlock *string `locationName:"destinationCidrBlock" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Indicates how the routes were provided.
0000000000000000000000000000000000000000;;		Source *string `locationName:"source" type:"string" enum:"VpnStaticRouteSource"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The current state of the static route.
0000000000000000000000000000000000000000;;		State *string `locationName:"state" type:"string" enum:"VpnState"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s VpnStaticRoute) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s VpnStaticRoute) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDestinationCidrBlock sets the DestinationCidrBlock field's value.
0000000000000000000000000000000000000000;;	func (s *VpnStaticRoute) SetDestinationCidrBlock(v string) *VpnStaticRoute {
0000000000000000000000000000000000000000;;		s.DestinationCidrBlock = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSource sets the Source field's value.
0000000000000000000000000000000000000000;;	func (s *VpnStaticRoute) SetSource(v string) *VpnStaticRoute {
0000000000000000000000000000000000000000;;		s.Source = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetState sets the State field's value.
0000000000000000000000000000000000000000;;	func (s *VpnStaticRoute) SetState(v string) *VpnStaticRoute {
0000000000000000000000000000000000000000;;		s.State = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// AccountAttributeNameSupportedPlatforms is a AccountAttributeName enum value
0000000000000000000000000000000000000000;;		AccountAttributeNameSupportedPlatforms = "supported-platforms"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// AccountAttributeNameDefaultVpc is a AccountAttributeName enum value
0000000000000000000000000000000000000000;;		AccountAttributeNameDefaultVpc = "default-vpc"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// ActivityStatusError is a ActivityStatus enum value
0000000000000000000000000000000000000000;;		ActivityStatusError = "error"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ActivityStatusPendingFulfillment is a ActivityStatus enum value
0000000000000000000000000000000000000000;;		ActivityStatusPendingFulfillment = "pending_fulfillment"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ActivityStatusPendingTermination is a ActivityStatus enum value
0000000000000000000000000000000000000000;;		ActivityStatusPendingTermination = "pending_termination"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ActivityStatusFulfilled is a ActivityStatus enum value
0000000000000000000000000000000000000000;;		ActivityStatusFulfilled = "fulfilled"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// AffinityDefault is a Affinity enum value
0000000000000000000000000000000000000000;;		AffinityDefault = "default"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// AffinityHost is a Affinity enum value
0000000000000000000000000000000000000000;;		AffinityHost = "host"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// AllocationStateAvailable is a AllocationState enum value
0000000000000000000000000000000000000000;;		AllocationStateAvailable = "available"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// AllocationStateUnderAssessment is a AllocationState enum value
0000000000000000000000000000000000000000;;		AllocationStateUnderAssessment = "under-assessment"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// AllocationStatePermanentFailure is a AllocationState enum value
0000000000000000000000000000000000000000;;		AllocationStatePermanentFailure = "permanent-failure"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// AllocationStateReleased is a AllocationState enum value
0000000000000000000000000000000000000000;;		AllocationStateReleased = "released"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// AllocationStateReleasedPermanentFailure is a AllocationState enum value
0000000000000000000000000000000000000000;;		AllocationStateReleasedPermanentFailure = "released-permanent-failure"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// AllocationStrategyLowestPrice is a AllocationStrategy enum value
0000000000000000000000000000000000000000;;		AllocationStrategyLowestPrice = "lowestPrice"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// AllocationStrategyDiversified is a AllocationStrategy enum value
0000000000000000000000000000000000000000;;		AllocationStrategyDiversified = "diversified"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// ArchitectureValuesI386 is a ArchitectureValues enum value
0000000000000000000000000000000000000000;;		ArchitectureValuesI386 = "i386"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ArchitectureValuesX8664 is a ArchitectureValues enum value
0000000000000000000000000000000000000000;;		ArchitectureValuesX8664 = "x86_64"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// AttachmentStatusAttaching is a AttachmentStatus enum value
0000000000000000000000000000000000000000;;		AttachmentStatusAttaching = "attaching"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// AttachmentStatusAttached is a AttachmentStatus enum value
0000000000000000000000000000000000000000;;		AttachmentStatusAttached = "attached"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// AttachmentStatusDetaching is a AttachmentStatus enum value
0000000000000000000000000000000000000000;;		AttachmentStatusDetaching = "detaching"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// AttachmentStatusDetached is a AttachmentStatus enum value
0000000000000000000000000000000000000000;;		AttachmentStatusDetached = "detached"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// AutoPlacementOn is a AutoPlacement enum value
0000000000000000000000000000000000000000;;		AutoPlacementOn = "on"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// AutoPlacementOff is a AutoPlacement enum value
0000000000000000000000000000000000000000;;		AutoPlacementOff = "off"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// AvailabilityZoneStateAvailable is a AvailabilityZoneState enum value
0000000000000000000000000000000000000000;;		AvailabilityZoneStateAvailable = "available"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// AvailabilityZoneStateInformation is a AvailabilityZoneState enum value
0000000000000000000000000000000000000000;;		AvailabilityZoneStateInformation = "information"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// AvailabilityZoneStateImpaired is a AvailabilityZoneState enum value
0000000000000000000000000000000000000000;;		AvailabilityZoneStateImpaired = "impaired"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// AvailabilityZoneStateUnavailable is a AvailabilityZoneState enum value
0000000000000000000000000000000000000000;;		AvailabilityZoneStateUnavailable = "unavailable"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// BatchStateSubmitted is a BatchState enum value
0000000000000000000000000000000000000000;;		BatchStateSubmitted = "submitted"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// BatchStateActive is a BatchState enum value
0000000000000000000000000000000000000000;;		BatchStateActive = "active"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// BatchStateCancelled is a BatchState enum value
0000000000000000000000000000000000000000;;		BatchStateCancelled = "cancelled"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// BatchStateFailed is a BatchState enum value
0000000000000000000000000000000000000000;;		BatchStateFailed = "failed"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// BatchStateCancelledRunning is a BatchState enum value
0000000000000000000000000000000000000000;;		BatchStateCancelledRunning = "cancelled_running"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// BatchStateCancelledTerminating is a BatchState enum value
0000000000000000000000000000000000000000;;		BatchStateCancelledTerminating = "cancelled_terminating"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// BatchStateModifying is a BatchState enum value
0000000000000000000000000000000000000000;;		BatchStateModifying = "modifying"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// BundleTaskStatePending is a BundleTaskState enum value
0000000000000000000000000000000000000000;;		BundleTaskStatePending = "pending"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// BundleTaskStateWaitingForShutdown is a BundleTaskState enum value
0000000000000000000000000000000000000000;;		BundleTaskStateWaitingForShutdown = "waiting-for-shutdown"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// BundleTaskStateBundling is a BundleTaskState enum value
0000000000000000000000000000000000000000;;		BundleTaskStateBundling = "bundling"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// BundleTaskStateStoring is a BundleTaskState enum value
0000000000000000000000000000000000000000;;		BundleTaskStateStoring = "storing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// BundleTaskStateCancelling is a BundleTaskState enum value
0000000000000000000000000000000000000000;;		BundleTaskStateCancelling = "cancelling"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// BundleTaskStateComplete is a BundleTaskState enum value
0000000000000000000000000000000000000000;;		BundleTaskStateComplete = "complete"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// BundleTaskStateFailed is a BundleTaskState enum value
0000000000000000000000000000000000000000;;		BundleTaskStateFailed = "failed"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// CancelBatchErrorCodeFleetRequestIdDoesNotExist is a CancelBatchErrorCode enum value
0000000000000000000000000000000000000000;;		CancelBatchErrorCodeFleetRequestIdDoesNotExist = "fleetRequestIdDoesNotExist"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// CancelBatchErrorCodeFleetRequestIdMalformed is a CancelBatchErrorCode enum value
0000000000000000000000000000000000000000;;		CancelBatchErrorCodeFleetRequestIdMalformed = "fleetRequestIdMalformed"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// CancelBatchErrorCodeFleetRequestNotInCancellableState is a CancelBatchErrorCode enum value
0000000000000000000000000000000000000000;;		CancelBatchErrorCodeFleetRequestNotInCancellableState = "fleetRequestNotInCancellableState"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// CancelBatchErrorCodeUnexpectedError is a CancelBatchErrorCode enum value
0000000000000000000000000000000000000000;;		CancelBatchErrorCodeUnexpectedError = "unexpectedError"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// CancelSpotInstanceRequestStateActive is a CancelSpotInstanceRequestState enum value
0000000000000000000000000000000000000000;;		CancelSpotInstanceRequestStateActive = "active"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// CancelSpotInstanceRequestStateOpen is a CancelSpotInstanceRequestState enum value
0000000000000000000000000000000000000000;;		CancelSpotInstanceRequestStateOpen = "open"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// CancelSpotInstanceRequestStateClosed is a CancelSpotInstanceRequestState enum value
0000000000000000000000000000000000000000;;		CancelSpotInstanceRequestStateClosed = "closed"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// CancelSpotInstanceRequestStateCancelled is a CancelSpotInstanceRequestState enum value
0000000000000000000000000000000000000000;;		CancelSpotInstanceRequestStateCancelled = "cancelled"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// CancelSpotInstanceRequestStateCompleted is a CancelSpotInstanceRequestState enum value
0000000000000000000000000000000000000000;;		CancelSpotInstanceRequestStateCompleted = "completed"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// ContainerFormatOva is a ContainerFormat enum value
0000000000000000000000000000000000000000;;		ContainerFormatOva = "ova"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// ConversionTaskStateActive is a ConversionTaskState enum value
0000000000000000000000000000000000000000;;		ConversionTaskStateActive = "active"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ConversionTaskStateCancelling is a ConversionTaskState enum value
0000000000000000000000000000000000000000;;		ConversionTaskStateCancelling = "cancelling"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ConversionTaskStateCancelled is a ConversionTaskState enum value
0000000000000000000000000000000000000000;;		ConversionTaskStateCancelled = "cancelled"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ConversionTaskStateCompleted is a ConversionTaskState enum value
0000000000000000000000000000000000000000;;		ConversionTaskStateCompleted = "completed"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// CurrencyCodeValuesUsd is a CurrencyCodeValues enum value
0000000000000000000000000000000000000000;;		CurrencyCodeValuesUsd = "USD"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// DatafeedSubscriptionStateActive is a DatafeedSubscriptionState enum value
0000000000000000000000000000000000000000;;		DatafeedSubscriptionStateActive = "Active"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DatafeedSubscriptionStateInactive is a DatafeedSubscriptionState enum value
0000000000000000000000000000000000000000;;		DatafeedSubscriptionStateInactive = "Inactive"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// DeviceTypeEbs is a DeviceType enum value
0000000000000000000000000000000000000000;;		DeviceTypeEbs = "ebs"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DeviceTypeInstanceStore is a DeviceType enum value
0000000000000000000000000000000000000000;;		DeviceTypeInstanceStore = "instance-store"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// DiskImageFormatVmdk is a DiskImageFormat enum value
0000000000000000000000000000000000000000;;		DiskImageFormatVmdk = "VMDK"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DiskImageFormatRaw is a DiskImageFormat enum value
0000000000000000000000000000000000000000;;		DiskImageFormatRaw = "RAW"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DiskImageFormatVhd is a DiskImageFormat enum value
0000000000000000000000000000000000000000;;		DiskImageFormatVhd = "VHD"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// DomainTypeVpc is a DomainType enum value
0000000000000000000000000000000000000000;;		DomainTypeVpc = "vpc"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DomainTypeStandard is a DomainType enum value
0000000000000000000000000000000000000000;;		DomainTypeStandard = "standard"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// EventCodeInstanceReboot is a EventCode enum value
0000000000000000000000000000000000000000;;		EventCodeInstanceReboot = "instance-reboot"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// EventCodeSystemReboot is a EventCode enum value
0000000000000000000000000000000000000000;;		EventCodeSystemReboot = "system-reboot"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// EventCodeSystemMaintenance is a EventCode enum value
0000000000000000000000000000000000000000;;		EventCodeSystemMaintenance = "system-maintenance"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// EventCodeInstanceRetirement is a EventCode enum value
0000000000000000000000000000000000000000;;		EventCodeInstanceRetirement = "instance-retirement"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// EventCodeInstanceStop is a EventCode enum value
0000000000000000000000000000000000000000;;		EventCodeInstanceStop = "instance-stop"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// EventTypeInstanceChange is a EventType enum value
0000000000000000000000000000000000000000;;		EventTypeInstanceChange = "instanceChange"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// EventTypeFleetRequestChange is a EventType enum value
0000000000000000000000000000000000000000;;		EventTypeFleetRequestChange = "fleetRequestChange"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// EventTypeError is a EventType enum value
0000000000000000000000000000000000000000;;		EventTypeError = "error"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// ExcessCapacityTerminationPolicyNoTermination is a ExcessCapacityTerminationPolicy enum value
0000000000000000000000000000000000000000;;		ExcessCapacityTerminationPolicyNoTermination = "noTermination"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ExcessCapacityTerminationPolicyDefault is a ExcessCapacityTerminationPolicy enum value
0000000000000000000000000000000000000000;;		ExcessCapacityTerminationPolicyDefault = "default"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// ExportEnvironmentCitrix is a ExportEnvironment enum value
0000000000000000000000000000000000000000;;		ExportEnvironmentCitrix = "citrix"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ExportEnvironmentVmware is a ExportEnvironment enum value
0000000000000000000000000000000000000000;;		ExportEnvironmentVmware = "vmware"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ExportEnvironmentMicrosoft is a ExportEnvironment enum value
0000000000000000000000000000000000000000;;		ExportEnvironmentMicrosoft = "microsoft"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// ExportTaskStateActive is a ExportTaskState enum value
0000000000000000000000000000000000000000;;		ExportTaskStateActive = "active"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ExportTaskStateCancelling is a ExportTaskState enum value
0000000000000000000000000000000000000000;;		ExportTaskStateCancelling = "cancelling"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ExportTaskStateCancelled is a ExportTaskState enum value
0000000000000000000000000000000000000000;;		ExportTaskStateCancelled = "cancelled"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ExportTaskStateCompleted is a ExportTaskState enum value
0000000000000000000000000000000000000000;;		ExportTaskStateCompleted = "completed"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// FleetTypeRequest is a FleetType enum value
0000000000000000000000000000000000000000;;		FleetTypeRequest = "request"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// FleetTypeMaintain is a FleetType enum value
0000000000000000000000000000000000000000;;		FleetTypeMaintain = "maintain"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// FlowLogsResourceTypeVpc is a FlowLogsResourceType enum value
0000000000000000000000000000000000000000;;		FlowLogsResourceTypeVpc = "VPC"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// FlowLogsResourceTypeSubnet is a FlowLogsResourceType enum value
0000000000000000000000000000000000000000;;		FlowLogsResourceTypeSubnet = "Subnet"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// FlowLogsResourceTypeNetworkInterface is a FlowLogsResourceType enum value
0000000000000000000000000000000000000000;;		FlowLogsResourceTypeNetworkInterface = "NetworkInterface"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// GatewayTypeIpsec1 is a GatewayType enum value
0000000000000000000000000000000000000000;;		GatewayTypeIpsec1 = "ipsec.1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// HostTenancyDedicated is a HostTenancy enum value
0000000000000000000000000000000000000000;;		HostTenancyDedicated = "dedicated"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// HostTenancyHost is a HostTenancy enum value
0000000000000000000000000000000000000000;;		HostTenancyHost = "host"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// HypervisorTypeOvm is a HypervisorType enum value
0000000000000000000000000000000000000000;;		HypervisorTypeOvm = "ovm"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// HypervisorTypeXen is a HypervisorType enum value
0000000000000000000000000000000000000000;;		HypervisorTypeXen = "xen"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// ImageAttributeNameDescription is a ImageAttributeName enum value
0000000000000000000000000000000000000000;;		ImageAttributeNameDescription = "description"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ImageAttributeNameKernel is a ImageAttributeName enum value
0000000000000000000000000000000000000000;;		ImageAttributeNameKernel = "kernel"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ImageAttributeNameRamdisk is a ImageAttributeName enum value
0000000000000000000000000000000000000000;;		ImageAttributeNameRamdisk = "ramdisk"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ImageAttributeNameLaunchPermission is a ImageAttributeName enum value
0000000000000000000000000000000000000000;;		ImageAttributeNameLaunchPermission = "launchPermission"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ImageAttributeNameProductCodes is a ImageAttributeName enum value
0000000000000000000000000000000000000000;;		ImageAttributeNameProductCodes = "productCodes"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ImageAttributeNameBlockDeviceMapping is a ImageAttributeName enum value
0000000000000000000000000000000000000000;;		ImageAttributeNameBlockDeviceMapping = "blockDeviceMapping"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ImageAttributeNameSriovNetSupport is a ImageAttributeName enum value
0000000000000000000000000000000000000000;;		ImageAttributeNameSriovNetSupport = "sriovNetSupport"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// ImageStatePending is a ImageState enum value
0000000000000000000000000000000000000000;;		ImageStatePending = "pending"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ImageStateAvailable is a ImageState enum value
0000000000000000000000000000000000000000;;		ImageStateAvailable = "available"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ImageStateInvalid is a ImageState enum value
0000000000000000000000000000000000000000;;		ImageStateInvalid = "invalid"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ImageStateDeregistered is a ImageState enum value
0000000000000000000000000000000000000000;;		ImageStateDeregistered = "deregistered"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ImageStateTransient is a ImageState enum value
0000000000000000000000000000000000000000;;		ImageStateTransient = "transient"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ImageStateFailed is a ImageState enum value
0000000000000000000000000000000000000000;;		ImageStateFailed = "failed"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ImageStateError is a ImageState enum value
0000000000000000000000000000000000000000;;		ImageStateError = "error"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// ImageTypeValuesMachine is a ImageTypeValues enum value
0000000000000000000000000000000000000000;;		ImageTypeValuesMachine = "machine"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ImageTypeValuesKernel is a ImageTypeValues enum value
0000000000000000000000000000000000000000;;		ImageTypeValuesKernel = "kernel"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ImageTypeValuesRamdisk is a ImageTypeValues enum value
0000000000000000000000000000000000000000;;		ImageTypeValuesRamdisk = "ramdisk"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// InstanceAttributeNameInstanceType is a InstanceAttributeName enum value
0000000000000000000000000000000000000000;;		InstanceAttributeNameInstanceType = "instanceType"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceAttributeNameKernel is a InstanceAttributeName enum value
0000000000000000000000000000000000000000;;		InstanceAttributeNameKernel = "kernel"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceAttributeNameRamdisk is a InstanceAttributeName enum value
0000000000000000000000000000000000000000;;		InstanceAttributeNameRamdisk = "ramdisk"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceAttributeNameUserData is a InstanceAttributeName enum value
0000000000000000000000000000000000000000;;		InstanceAttributeNameUserData = "userData"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceAttributeNameDisableApiTermination is a InstanceAttributeName enum value
0000000000000000000000000000000000000000;;		InstanceAttributeNameDisableApiTermination = "disableApiTermination"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceAttributeNameInstanceInitiatedShutdownBehavior is a InstanceAttributeName enum value
0000000000000000000000000000000000000000;;		InstanceAttributeNameInstanceInitiatedShutdownBehavior = "instanceInitiatedShutdownBehavior"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceAttributeNameRootDeviceName is a InstanceAttributeName enum value
0000000000000000000000000000000000000000;;		InstanceAttributeNameRootDeviceName = "rootDeviceName"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceAttributeNameBlockDeviceMapping is a InstanceAttributeName enum value
0000000000000000000000000000000000000000;;		InstanceAttributeNameBlockDeviceMapping = "blockDeviceMapping"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceAttributeNameProductCodes is a InstanceAttributeName enum value
0000000000000000000000000000000000000000;;		InstanceAttributeNameProductCodes = "productCodes"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceAttributeNameSourceDestCheck is a InstanceAttributeName enum value
0000000000000000000000000000000000000000;;		InstanceAttributeNameSourceDestCheck = "sourceDestCheck"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceAttributeNameGroupSet is a InstanceAttributeName enum value
0000000000000000000000000000000000000000;;		InstanceAttributeNameGroupSet = "groupSet"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceAttributeNameEbsOptimized is a InstanceAttributeName enum value
0000000000000000000000000000000000000000;;		InstanceAttributeNameEbsOptimized = "ebsOptimized"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceAttributeNameSriovNetSupport is a InstanceAttributeName enum value
0000000000000000000000000000000000000000;;		InstanceAttributeNameSriovNetSupport = "sriovNetSupport"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceAttributeNameEnaSupport is a InstanceAttributeName enum value
0000000000000000000000000000000000000000;;		InstanceAttributeNameEnaSupport = "enaSupport"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// InstanceLifecycleTypeSpot is a InstanceLifecycleType enum value
0000000000000000000000000000000000000000;;		InstanceLifecycleTypeSpot = "spot"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceLifecycleTypeScheduled is a InstanceLifecycleType enum value
0000000000000000000000000000000000000000;;		InstanceLifecycleTypeScheduled = "scheduled"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// InstanceStateNamePending is a InstanceStateName enum value
0000000000000000000000000000000000000000;;		InstanceStateNamePending = "pending"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceStateNameRunning is a InstanceStateName enum value
0000000000000000000000000000000000000000;;		InstanceStateNameRunning = "running"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceStateNameShuttingDown is a InstanceStateName enum value
0000000000000000000000000000000000000000;;		InstanceStateNameShuttingDown = "shutting-down"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceStateNameTerminated is a InstanceStateName enum value
0000000000000000000000000000000000000000;;		InstanceStateNameTerminated = "terminated"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceStateNameStopping is a InstanceStateName enum value
0000000000000000000000000000000000000000;;		InstanceStateNameStopping = "stopping"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceStateNameStopped is a InstanceStateName enum value
0000000000000000000000000000000000000000;;		InstanceStateNameStopped = "stopped"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// InstanceTypeT1Micro is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeT1Micro = "t1.micro"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeT2Nano is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeT2Nano = "t2.nano"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeT2Micro is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeT2Micro = "t2.micro"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeT2Small is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeT2Small = "t2.small"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeT2Medium is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeT2Medium = "t2.medium"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeT2Large is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeT2Large = "t2.large"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeT2Xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeT2Xlarge = "t2.xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeT22xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeT22xlarge = "t2.2xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeM1Small is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeM1Small = "m1.small"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeM1Medium is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeM1Medium = "m1.medium"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeM1Large is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeM1Large = "m1.large"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeM1Xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeM1Xlarge = "m1.xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeM3Medium is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeM3Medium = "m3.medium"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeM3Large is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeM3Large = "m3.large"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeM3Xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeM3Xlarge = "m3.xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeM32xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeM32xlarge = "m3.2xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeM4Large is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeM4Large = "m4.large"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeM4Xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeM4Xlarge = "m4.xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeM42xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeM42xlarge = "m4.2xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeM44xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeM44xlarge = "m4.4xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeM410xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeM410xlarge = "m4.10xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeM416xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeM416xlarge = "m4.16xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeM2Xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeM2Xlarge = "m2.xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeM22xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeM22xlarge = "m2.2xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeM24xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeM24xlarge = "m2.4xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeCr18xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeCr18xlarge = "cr1.8xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeR3Large is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeR3Large = "r3.large"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeR3Xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeR3Xlarge = "r3.xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeR32xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeR32xlarge = "r3.2xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeR34xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeR34xlarge = "r3.4xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeR38xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeR38xlarge = "r3.8xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeR4Large is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeR4Large = "r4.large"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeR4Xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeR4Xlarge = "r4.xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeR42xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeR42xlarge = "r4.2xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeR44xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeR44xlarge = "r4.4xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeR48xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeR48xlarge = "r4.8xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeR416xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeR416xlarge = "r4.16xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeX116xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeX116xlarge = "x1.16xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeX132xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeX132xlarge = "x1.32xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeI2Xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeI2Xlarge = "i2.xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeI22xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeI22xlarge = "i2.2xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeI24xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeI24xlarge = "i2.4xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeI28xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeI28xlarge = "i2.8xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeHi14xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeHi14xlarge = "hi1.4xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeHs18xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeHs18xlarge = "hs1.8xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeC1Medium is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeC1Medium = "c1.medium"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeC1Xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeC1Xlarge = "c1.xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeC3Large is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeC3Large = "c3.large"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeC3Xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeC3Xlarge = "c3.xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeC32xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeC32xlarge = "c3.2xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeC34xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeC34xlarge = "c3.4xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeC38xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeC38xlarge = "c3.8xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeC4Large is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeC4Large = "c4.large"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeC4Xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeC4Xlarge = "c4.xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeC42xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeC42xlarge = "c4.2xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeC44xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeC44xlarge = "c4.4xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeC48xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeC48xlarge = "c4.8xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeCc14xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeCc14xlarge = "cc1.4xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeCc28xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeCc28xlarge = "cc2.8xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeG22xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeG22xlarge = "g2.2xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeG28xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeG28xlarge = "g2.8xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeCg14xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeCg14xlarge = "cg1.4xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeP2Xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeP2Xlarge = "p2.xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeP28xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeP28xlarge = "p2.8xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeP216xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeP216xlarge = "p2.16xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeD2Xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeD2Xlarge = "d2.xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeD22xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeD22xlarge = "d2.2xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeD24xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeD24xlarge = "d2.4xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeD28xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeD28xlarge = "d2.8xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeF12xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeF12xlarge = "f1.2xlarge"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceTypeF116xlarge is a InstanceType enum value
0000000000000000000000000000000000000000;;		InstanceTypeF116xlarge = "f1.16xlarge"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// ListingStateAvailable is a ListingState enum value
0000000000000000000000000000000000000000;;		ListingStateAvailable = "available"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ListingStateSold is a ListingState enum value
0000000000000000000000000000000000000000;;		ListingStateSold = "sold"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ListingStateCancelled is a ListingState enum value
0000000000000000000000000000000000000000;;		ListingStateCancelled = "cancelled"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ListingStatePending is a ListingState enum value
0000000000000000000000000000000000000000;;		ListingStatePending = "pending"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// ListingStatusActive is a ListingStatus enum value
0000000000000000000000000000000000000000;;		ListingStatusActive = "active"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ListingStatusPending is a ListingStatus enum value
0000000000000000000000000000000000000000;;		ListingStatusPending = "pending"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ListingStatusCancelled is a ListingStatus enum value
0000000000000000000000000000000000000000;;		ListingStatusCancelled = "cancelled"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ListingStatusClosed is a ListingStatus enum value
0000000000000000000000000000000000000000;;		ListingStatusClosed = "closed"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// MonitoringStateDisabled is a MonitoringState enum value
0000000000000000000000000000000000000000;;		MonitoringStateDisabled = "disabled"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// MonitoringStateDisabling is a MonitoringState enum value
0000000000000000000000000000000000000000;;		MonitoringStateDisabling = "disabling"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// MonitoringStateEnabled is a MonitoringState enum value
0000000000000000000000000000000000000000;;		MonitoringStateEnabled = "enabled"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// MonitoringStatePending is a MonitoringState enum value
0000000000000000000000000000000000000000;;		MonitoringStatePending = "pending"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// MoveStatusMovingToVpc is a MoveStatus enum value
0000000000000000000000000000000000000000;;		MoveStatusMovingToVpc = "movingToVpc"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// MoveStatusRestoringToClassic is a MoveStatus enum value
0000000000000000000000000000000000000000;;		MoveStatusRestoringToClassic = "restoringToClassic"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// NatGatewayStatePending is a NatGatewayState enum value
0000000000000000000000000000000000000000;;		NatGatewayStatePending = "pending"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NatGatewayStateFailed is a NatGatewayState enum value
0000000000000000000000000000000000000000;;		NatGatewayStateFailed = "failed"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NatGatewayStateAvailable is a NatGatewayState enum value
0000000000000000000000000000000000000000;;		NatGatewayStateAvailable = "available"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NatGatewayStateDeleting is a NatGatewayState enum value
0000000000000000000000000000000000000000;;		NatGatewayStateDeleting = "deleting"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NatGatewayStateDeleted is a NatGatewayState enum value
0000000000000000000000000000000000000000;;		NatGatewayStateDeleted = "deleted"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// NetworkInterfaceAttributeDescription is a NetworkInterfaceAttribute enum value
0000000000000000000000000000000000000000;;		NetworkInterfaceAttributeDescription = "description"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NetworkInterfaceAttributeGroupSet is a NetworkInterfaceAttribute enum value
0000000000000000000000000000000000000000;;		NetworkInterfaceAttributeGroupSet = "groupSet"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NetworkInterfaceAttributeSourceDestCheck is a NetworkInterfaceAttribute enum value
0000000000000000000000000000000000000000;;		NetworkInterfaceAttributeSourceDestCheck = "sourceDestCheck"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NetworkInterfaceAttributeAttachment is a NetworkInterfaceAttribute enum value
0000000000000000000000000000000000000000;;		NetworkInterfaceAttributeAttachment = "attachment"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// NetworkInterfaceStatusAvailable is a NetworkInterfaceStatus enum value
0000000000000000000000000000000000000000;;		NetworkInterfaceStatusAvailable = "available"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NetworkInterfaceStatusAttaching is a NetworkInterfaceStatus enum value
0000000000000000000000000000000000000000;;		NetworkInterfaceStatusAttaching = "attaching"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NetworkInterfaceStatusInUse is a NetworkInterfaceStatus enum value
0000000000000000000000000000000000000000;;		NetworkInterfaceStatusInUse = "in-use"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NetworkInterfaceStatusDetaching is a NetworkInterfaceStatus enum value
0000000000000000000000000000000000000000;;		NetworkInterfaceStatusDetaching = "detaching"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// NetworkInterfaceTypeInterface is a NetworkInterfaceType enum value
0000000000000000000000000000000000000000;;		NetworkInterfaceTypeInterface = "interface"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NetworkInterfaceTypeNatGateway is a NetworkInterfaceType enum value
0000000000000000000000000000000000000000;;		NetworkInterfaceTypeNatGateway = "natGateway"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// OfferingClassTypeStandard is a OfferingClassType enum value
0000000000000000000000000000000000000000;;		OfferingClassTypeStandard = "standard"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// OfferingClassTypeConvertible is a OfferingClassType enum value
0000000000000000000000000000000000000000;;		OfferingClassTypeConvertible = "convertible"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// OfferingTypeValuesHeavyUtilization is a OfferingTypeValues enum value
0000000000000000000000000000000000000000;;		OfferingTypeValuesHeavyUtilization = "Heavy Utilization"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// OfferingTypeValuesMediumUtilization is a OfferingTypeValues enum value
0000000000000000000000000000000000000000;;		OfferingTypeValuesMediumUtilization = "Medium Utilization"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// OfferingTypeValuesLightUtilization is a OfferingTypeValues enum value
0000000000000000000000000000000000000000;;		OfferingTypeValuesLightUtilization = "Light Utilization"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// OfferingTypeValuesNoUpfront is a OfferingTypeValues enum value
0000000000000000000000000000000000000000;;		OfferingTypeValuesNoUpfront = "No Upfront"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// OfferingTypeValuesPartialUpfront is a OfferingTypeValues enum value
0000000000000000000000000000000000000000;;		OfferingTypeValuesPartialUpfront = "Partial Upfront"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// OfferingTypeValuesAllUpfront is a OfferingTypeValues enum value
0000000000000000000000000000000000000000;;		OfferingTypeValuesAllUpfront = "All Upfront"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// OperationTypeAdd is a OperationType enum value
0000000000000000000000000000000000000000;;		OperationTypeAdd = "add"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// OperationTypeRemove is a OperationType enum value
0000000000000000000000000000000000000000;;		OperationTypeRemove = "remove"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// PaymentOptionAllUpfront is a PaymentOption enum value
0000000000000000000000000000000000000000;;		PaymentOptionAllUpfront = "AllUpfront"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// PaymentOptionPartialUpfront is a PaymentOption enum value
0000000000000000000000000000000000000000;;		PaymentOptionPartialUpfront = "PartialUpfront"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// PaymentOptionNoUpfront is a PaymentOption enum value
0000000000000000000000000000000000000000;;		PaymentOptionNoUpfront = "NoUpfront"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// PermissionGroupAll is a PermissionGroup enum value
0000000000000000000000000000000000000000;;		PermissionGroupAll = "all"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// PlacementGroupStatePending is a PlacementGroupState enum value
0000000000000000000000000000000000000000;;		PlacementGroupStatePending = "pending"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// PlacementGroupStateAvailable is a PlacementGroupState enum value
0000000000000000000000000000000000000000;;		PlacementGroupStateAvailable = "available"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// PlacementGroupStateDeleting is a PlacementGroupState enum value
0000000000000000000000000000000000000000;;		PlacementGroupStateDeleting = "deleting"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// PlacementGroupStateDeleted is a PlacementGroupState enum value
0000000000000000000000000000000000000000;;		PlacementGroupStateDeleted = "deleted"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// PlacementStrategyCluster is a PlacementStrategy enum value
0000000000000000000000000000000000000000;;		PlacementStrategyCluster = "cluster"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// PlatformValuesWindows is a PlatformValues enum value
0000000000000000000000000000000000000000;;		PlatformValuesWindows = "Windows"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// ProductCodeValuesDevpay is a ProductCodeValues enum value
0000000000000000000000000000000000000000;;		ProductCodeValuesDevpay = "devpay"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ProductCodeValuesMarketplace is a ProductCodeValues enum value
0000000000000000000000000000000000000000;;		ProductCodeValuesMarketplace = "marketplace"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// RIProductDescriptionLinuxUnix is a RIProductDescription enum value
0000000000000000000000000000000000000000;;		RIProductDescriptionLinuxUnix = "Linux/UNIX"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RIProductDescriptionLinuxUnixamazonVpc is a RIProductDescription enum value
0000000000000000000000000000000000000000;;		RIProductDescriptionLinuxUnixamazonVpc = "Linux/UNIX (Amazon VPC)"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RIProductDescriptionWindows is a RIProductDescription enum value
0000000000000000000000000000000000000000;;		RIProductDescriptionWindows = "Windows"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RIProductDescriptionWindowsAmazonVpc is a RIProductDescription enum value
0000000000000000000000000000000000000000;;		RIProductDescriptionWindowsAmazonVpc = "Windows (Amazon VPC)"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// RecurringChargeFrequencyHourly is a RecurringChargeFrequency enum value
0000000000000000000000000000000000000000;;		RecurringChargeFrequencyHourly = "Hourly"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// ReportInstanceReasonCodesInstanceStuckInState is a ReportInstanceReasonCodes enum value
0000000000000000000000000000000000000000;;		ReportInstanceReasonCodesInstanceStuckInState = "instance-stuck-in-state"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ReportInstanceReasonCodesUnresponsive is a ReportInstanceReasonCodes enum value
0000000000000000000000000000000000000000;;		ReportInstanceReasonCodesUnresponsive = "unresponsive"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ReportInstanceReasonCodesNotAcceptingCredentials is a ReportInstanceReasonCodes enum value
0000000000000000000000000000000000000000;;		ReportInstanceReasonCodesNotAcceptingCredentials = "not-accepting-credentials"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ReportInstanceReasonCodesPasswordNotAvailable is a ReportInstanceReasonCodes enum value
0000000000000000000000000000000000000000;;		ReportInstanceReasonCodesPasswordNotAvailable = "password-not-available"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ReportInstanceReasonCodesPerformanceNetwork is a ReportInstanceReasonCodes enum value
0000000000000000000000000000000000000000;;		ReportInstanceReasonCodesPerformanceNetwork = "performance-network"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ReportInstanceReasonCodesPerformanceInstanceStore is a ReportInstanceReasonCodes enum value
0000000000000000000000000000000000000000;;		ReportInstanceReasonCodesPerformanceInstanceStore = "performance-instance-store"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ReportInstanceReasonCodesPerformanceEbsVolume is a ReportInstanceReasonCodes enum value
0000000000000000000000000000000000000000;;		ReportInstanceReasonCodesPerformanceEbsVolume = "performance-ebs-volume"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ReportInstanceReasonCodesPerformanceOther is a ReportInstanceReasonCodes enum value
0000000000000000000000000000000000000000;;		ReportInstanceReasonCodesPerformanceOther = "performance-other"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ReportInstanceReasonCodesOther is a ReportInstanceReasonCodes enum value
0000000000000000000000000000000000000000;;		ReportInstanceReasonCodesOther = "other"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// ReportStatusTypeOk is a ReportStatusType enum value
0000000000000000000000000000000000000000;;		ReportStatusTypeOk = "ok"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ReportStatusTypeImpaired is a ReportStatusType enum value
0000000000000000000000000000000000000000;;		ReportStatusTypeImpaired = "impaired"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// ReservationStatePaymentPending is a ReservationState enum value
0000000000000000000000000000000000000000;;		ReservationStatePaymentPending = "payment-pending"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ReservationStatePaymentFailed is a ReservationState enum value
0000000000000000000000000000000000000000;;		ReservationStatePaymentFailed = "payment-failed"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ReservationStateActive is a ReservationState enum value
0000000000000000000000000000000000000000;;		ReservationStateActive = "active"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ReservationStateRetired is a ReservationState enum value
0000000000000000000000000000000000000000;;		ReservationStateRetired = "retired"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// ReservedInstanceStatePaymentPending is a ReservedInstanceState enum value
0000000000000000000000000000000000000000;;		ReservedInstanceStatePaymentPending = "payment-pending"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ReservedInstanceStateActive is a ReservedInstanceState enum value
0000000000000000000000000000000000000000;;		ReservedInstanceStateActive = "active"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ReservedInstanceStatePaymentFailed is a ReservedInstanceState enum value
0000000000000000000000000000000000000000;;		ReservedInstanceStatePaymentFailed = "payment-failed"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ReservedInstanceStateRetired is a ReservedInstanceState enum value
0000000000000000000000000000000000000000;;		ReservedInstanceStateRetired = "retired"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// ResetImageAttributeNameLaunchPermission is a ResetImageAttributeName enum value
0000000000000000000000000000000000000000;;		ResetImageAttributeNameLaunchPermission = "launchPermission"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// ResourceTypeCustomerGateway is a ResourceType enum value
0000000000000000000000000000000000000000;;		ResourceTypeCustomerGateway = "customer-gateway"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ResourceTypeDhcpOptions is a ResourceType enum value
0000000000000000000000000000000000000000;;		ResourceTypeDhcpOptions = "dhcp-options"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ResourceTypeImage is a ResourceType enum value
0000000000000000000000000000000000000000;;		ResourceTypeImage = "image"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ResourceTypeInstance is a ResourceType enum value
0000000000000000000000000000000000000000;;		ResourceTypeInstance = "instance"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ResourceTypeInternetGateway is a ResourceType enum value
0000000000000000000000000000000000000000;;		ResourceTypeInternetGateway = "internet-gateway"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ResourceTypeNetworkAcl is a ResourceType enum value
0000000000000000000000000000000000000000;;		ResourceTypeNetworkAcl = "network-acl"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ResourceTypeNetworkInterface is a ResourceType enum value
0000000000000000000000000000000000000000;;		ResourceTypeNetworkInterface = "network-interface"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ResourceTypeReservedInstances is a ResourceType enum value
0000000000000000000000000000000000000000;;		ResourceTypeReservedInstances = "reserved-instances"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ResourceTypeRouteTable is a ResourceType enum value
0000000000000000000000000000000000000000;;		ResourceTypeRouteTable = "route-table"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ResourceTypeSnapshot is a ResourceType enum value
0000000000000000000000000000000000000000;;		ResourceTypeSnapshot = "snapshot"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ResourceTypeSpotInstancesRequest is a ResourceType enum value
0000000000000000000000000000000000000000;;		ResourceTypeSpotInstancesRequest = "spot-instances-request"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ResourceTypeSubnet is a ResourceType enum value
0000000000000000000000000000000000000000;;		ResourceTypeSubnet = "subnet"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ResourceTypeSecurityGroup is a ResourceType enum value
0000000000000000000000000000000000000000;;		ResourceTypeSecurityGroup = "security-group"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ResourceTypeVolume is a ResourceType enum value
0000000000000000000000000000000000000000;;		ResourceTypeVolume = "volume"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ResourceTypeVpc is a ResourceType enum value
0000000000000000000000000000000000000000;;		ResourceTypeVpc = "vpc"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ResourceTypeVpnConnection is a ResourceType enum value
0000000000000000000000000000000000000000;;		ResourceTypeVpnConnection = "vpn-connection"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ResourceTypeVpnGateway is a ResourceType enum value
0000000000000000000000000000000000000000;;		ResourceTypeVpnGateway = "vpn-gateway"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// RouteOriginCreateRouteTable is a RouteOrigin enum value
0000000000000000000000000000000000000000;;		RouteOriginCreateRouteTable = "CreateRouteTable"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RouteOriginCreateRoute is a RouteOrigin enum value
0000000000000000000000000000000000000000;;		RouteOriginCreateRoute = "CreateRoute"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RouteOriginEnableVgwRoutePropagation is a RouteOrigin enum value
0000000000000000000000000000000000000000;;		RouteOriginEnableVgwRoutePropagation = "EnableVgwRoutePropagation"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// RouteStateActive is a RouteState enum value
0000000000000000000000000000000000000000;;		RouteStateActive = "active"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RouteStateBlackhole is a RouteState enum value
0000000000000000000000000000000000000000;;		RouteStateBlackhole = "blackhole"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// RuleActionAllow is a RuleAction enum value
0000000000000000000000000000000000000000;;		RuleActionAllow = "allow"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RuleActionDeny is a RuleAction enum value
0000000000000000000000000000000000000000;;		RuleActionDeny = "deny"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// ShutdownBehaviorStop is a ShutdownBehavior enum value
0000000000000000000000000000000000000000;;		ShutdownBehaviorStop = "stop"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ShutdownBehaviorTerminate is a ShutdownBehavior enum value
0000000000000000000000000000000000000000;;		ShutdownBehaviorTerminate = "terminate"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// SnapshotAttributeNameProductCodes is a SnapshotAttributeName enum value
0000000000000000000000000000000000000000;;		SnapshotAttributeNameProductCodes = "productCodes"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// SnapshotAttributeNameCreateVolumePermission is a SnapshotAttributeName enum value
0000000000000000000000000000000000000000;;		SnapshotAttributeNameCreateVolumePermission = "createVolumePermission"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// SnapshotStatePending is a SnapshotState enum value
0000000000000000000000000000000000000000;;		SnapshotStatePending = "pending"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// SnapshotStateCompleted is a SnapshotState enum value
0000000000000000000000000000000000000000;;		SnapshotStateCompleted = "completed"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// SnapshotStateError is a SnapshotState enum value
0000000000000000000000000000000000000000;;		SnapshotStateError = "error"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// SpotInstanceStateOpen is a SpotInstanceState enum value
0000000000000000000000000000000000000000;;		SpotInstanceStateOpen = "open"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// SpotInstanceStateActive is a SpotInstanceState enum value
0000000000000000000000000000000000000000;;		SpotInstanceStateActive = "active"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// SpotInstanceStateClosed is a SpotInstanceState enum value
0000000000000000000000000000000000000000;;		SpotInstanceStateClosed = "closed"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// SpotInstanceStateCancelled is a SpotInstanceState enum value
0000000000000000000000000000000000000000;;		SpotInstanceStateCancelled = "cancelled"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// SpotInstanceStateFailed is a SpotInstanceState enum value
0000000000000000000000000000000000000000;;		SpotInstanceStateFailed = "failed"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// SpotInstanceTypeOneTime is a SpotInstanceType enum value
0000000000000000000000000000000000000000;;		SpotInstanceTypeOneTime = "one-time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// SpotInstanceTypePersistent is a SpotInstanceType enum value
0000000000000000000000000000000000000000;;		SpotInstanceTypePersistent = "persistent"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// StatePending is a State enum value
0000000000000000000000000000000000000000;;		StatePending = "Pending"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// StateAvailable is a State enum value
0000000000000000000000000000000000000000;;		StateAvailable = "Available"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// StateDeleting is a State enum value
0000000000000000000000000000000000000000;;		StateDeleting = "Deleting"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// StateDeleted is a State enum value
0000000000000000000000000000000000000000;;		StateDeleted = "Deleted"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// StatusMoveInProgress is a Status enum value
0000000000000000000000000000000000000000;;		StatusMoveInProgress = "MoveInProgress"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// StatusInVpc is a Status enum value
0000000000000000000000000000000000000000;;		StatusInVpc = "InVpc"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// StatusInClassic is a Status enum value
0000000000000000000000000000000000000000;;		StatusInClassic = "InClassic"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// StatusNameReachability is a StatusName enum value
0000000000000000000000000000000000000000;;		StatusNameReachability = "reachability"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// StatusTypePassed is a StatusType enum value
0000000000000000000000000000000000000000;;		StatusTypePassed = "passed"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// StatusTypeFailed is a StatusType enum value
0000000000000000000000000000000000000000;;		StatusTypeFailed = "failed"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// StatusTypeInsufficientData is a StatusType enum value
0000000000000000000000000000000000000000;;		StatusTypeInsufficientData = "insufficient-data"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// StatusTypeInitializing is a StatusType enum value
0000000000000000000000000000000000000000;;		StatusTypeInitializing = "initializing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// SubnetCidrBlockStateCodeAssociating is a SubnetCidrBlockStateCode enum value
0000000000000000000000000000000000000000;;		SubnetCidrBlockStateCodeAssociating = "associating"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// SubnetCidrBlockStateCodeAssociated is a SubnetCidrBlockStateCode enum value
0000000000000000000000000000000000000000;;		SubnetCidrBlockStateCodeAssociated = "associated"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// SubnetCidrBlockStateCodeDisassociating is a SubnetCidrBlockStateCode enum value
0000000000000000000000000000000000000000;;		SubnetCidrBlockStateCodeDisassociating = "disassociating"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// SubnetCidrBlockStateCodeDisassociated is a SubnetCidrBlockStateCode enum value
0000000000000000000000000000000000000000;;		SubnetCidrBlockStateCodeDisassociated = "disassociated"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// SubnetCidrBlockStateCodeFailing is a SubnetCidrBlockStateCode enum value
0000000000000000000000000000000000000000;;		SubnetCidrBlockStateCodeFailing = "failing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// SubnetCidrBlockStateCodeFailed is a SubnetCidrBlockStateCode enum value
0000000000000000000000000000000000000000;;		SubnetCidrBlockStateCodeFailed = "failed"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// SubnetStatePending is a SubnetState enum value
0000000000000000000000000000000000000000;;		SubnetStatePending = "pending"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// SubnetStateAvailable is a SubnetState enum value
0000000000000000000000000000000000000000;;		SubnetStateAvailable = "available"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// SummaryStatusOk is a SummaryStatus enum value
0000000000000000000000000000000000000000;;		SummaryStatusOk = "ok"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// SummaryStatusImpaired is a SummaryStatus enum value
0000000000000000000000000000000000000000;;		SummaryStatusImpaired = "impaired"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// SummaryStatusInsufficientData is a SummaryStatus enum value
0000000000000000000000000000000000000000;;		SummaryStatusInsufficientData = "insufficient-data"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// SummaryStatusNotApplicable is a SummaryStatus enum value
0000000000000000000000000000000000000000;;		SummaryStatusNotApplicable = "not-applicable"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// SummaryStatusInitializing is a SummaryStatus enum value
0000000000000000000000000000000000000000;;		SummaryStatusInitializing = "initializing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// TelemetryStatusUp is a TelemetryStatus enum value
0000000000000000000000000000000000000000;;		TelemetryStatusUp = "UP"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TelemetryStatusDown is a TelemetryStatus enum value
0000000000000000000000000000000000000000;;		TelemetryStatusDown = "DOWN"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// TenancyDefault is a Tenancy enum value
0000000000000000000000000000000000000000;;		TenancyDefault = "default"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TenancyDedicated is a Tenancy enum value
0000000000000000000000000000000000000000;;		TenancyDedicated = "dedicated"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TenancyHost is a Tenancy enum value
0000000000000000000000000000000000000000;;		TenancyHost = "host"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// TrafficTypeAccept is a TrafficType enum value
0000000000000000000000000000000000000000;;		TrafficTypeAccept = "ACCEPT"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TrafficTypeReject is a TrafficType enum value
0000000000000000000000000000000000000000;;		TrafficTypeReject = "REJECT"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TrafficTypeAll is a TrafficType enum value
0000000000000000000000000000000000000000;;		TrafficTypeAll = "ALL"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// VirtualizationTypeHvm is a VirtualizationType enum value
0000000000000000000000000000000000000000;;		VirtualizationTypeHvm = "hvm"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VirtualizationTypeParavirtual is a VirtualizationType enum value
0000000000000000000000000000000000000000;;		VirtualizationTypeParavirtual = "paravirtual"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// VolumeAttachmentStateAttaching is a VolumeAttachmentState enum value
0000000000000000000000000000000000000000;;		VolumeAttachmentStateAttaching = "attaching"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VolumeAttachmentStateAttached is a VolumeAttachmentState enum value
0000000000000000000000000000000000000000;;		VolumeAttachmentStateAttached = "attached"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VolumeAttachmentStateDetaching is a VolumeAttachmentState enum value
0000000000000000000000000000000000000000;;		VolumeAttachmentStateDetaching = "detaching"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VolumeAttachmentStateDetached is a VolumeAttachmentState enum value
0000000000000000000000000000000000000000;;		VolumeAttachmentStateDetached = "detached"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// VolumeAttributeNameAutoEnableIo is a VolumeAttributeName enum value
0000000000000000000000000000000000000000;;		VolumeAttributeNameAutoEnableIo = "autoEnableIO"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VolumeAttributeNameProductCodes is a VolumeAttributeName enum value
0000000000000000000000000000000000000000;;		VolumeAttributeNameProductCodes = "productCodes"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// VolumeStateCreating is a VolumeState enum value
0000000000000000000000000000000000000000;;		VolumeStateCreating = "creating"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VolumeStateAvailable is a VolumeState enum value
0000000000000000000000000000000000000000;;		VolumeStateAvailable = "available"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VolumeStateInUse is a VolumeState enum value
0000000000000000000000000000000000000000;;		VolumeStateInUse = "in-use"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VolumeStateDeleting is a VolumeState enum value
0000000000000000000000000000000000000000;;		VolumeStateDeleting = "deleting"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VolumeStateDeleted is a VolumeState enum value
0000000000000000000000000000000000000000;;		VolumeStateDeleted = "deleted"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VolumeStateError is a VolumeState enum value
0000000000000000000000000000000000000000;;		VolumeStateError = "error"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// VolumeStatusInfoStatusOk is a VolumeStatusInfoStatus enum value
0000000000000000000000000000000000000000;;		VolumeStatusInfoStatusOk = "ok"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VolumeStatusInfoStatusImpaired is a VolumeStatusInfoStatus enum value
0000000000000000000000000000000000000000;;		VolumeStatusInfoStatusImpaired = "impaired"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VolumeStatusInfoStatusInsufficientData is a VolumeStatusInfoStatus enum value
0000000000000000000000000000000000000000;;		VolumeStatusInfoStatusInsufficientData = "insufficient-data"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// VolumeStatusNameIoEnabled is a VolumeStatusName enum value
0000000000000000000000000000000000000000;;		VolumeStatusNameIoEnabled = "io-enabled"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VolumeStatusNameIoPerformance is a VolumeStatusName enum value
0000000000000000000000000000000000000000;;		VolumeStatusNameIoPerformance = "io-performance"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// VolumeTypeStandard is a VolumeType enum value
0000000000000000000000000000000000000000;;		VolumeTypeStandard = "standard"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VolumeTypeIo1 is a VolumeType enum value
0000000000000000000000000000000000000000;;		VolumeTypeIo1 = "io1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VolumeTypeGp2 is a VolumeType enum value
0000000000000000000000000000000000000000;;		VolumeTypeGp2 = "gp2"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VolumeTypeSc1 is a VolumeType enum value
0000000000000000000000000000000000000000;;		VolumeTypeSc1 = "sc1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VolumeTypeSt1 is a VolumeType enum value
0000000000000000000000000000000000000000;;		VolumeTypeSt1 = "st1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// VpcAttributeNameEnableDnsSupport is a VpcAttributeName enum value
0000000000000000000000000000000000000000;;		VpcAttributeNameEnableDnsSupport = "enableDnsSupport"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VpcAttributeNameEnableDnsHostnames is a VpcAttributeName enum value
0000000000000000000000000000000000000000;;		VpcAttributeNameEnableDnsHostnames = "enableDnsHostnames"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// VpcCidrBlockStateCodeAssociating is a VpcCidrBlockStateCode enum value
0000000000000000000000000000000000000000;;		VpcCidrBlockStateCodeAssociating = "associating"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VpcCidrBlockStateCodeAssociated is a VpcCidrBlockStateCode enum value
0000000000000000000000000000000000000000;;		VpcCidrBlockStateCodeAssociated = "associated"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VpcCidrBlockStateCodeDisassociating is a VpcCidrBlockStateCode enum value
0000000000000000000000000000000000000000;;		VpcCidrBlockStateCodeDisassociating = "disassociating"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VpcCidrBlockStateCodeDisassociated is a VpcCidrBlockStateCode enum value
0000000000000000000000000000000000000000;;		VpcCidrBlockStateCodeDisassociated = "disassociated"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VpcCidrBlockStateCodeFailing is a VpcCidrBlockStateCode enum value
0000000000000000000000000000000000000000;;		VpcCidrBlockStateCodeFailing = "failing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VpcCidrBlockStateCodeFailed is a VpcCidrBlockStateCode enum value
0000000000000000000000000000000000000000;;		VpcCidrBlockStateCodeFailed = "failed"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// VpcPeeringConnectionStateReasonCodeInitiatingRequest is a VpcPeeringConnectionStateReasonCode enum value
0000000000000000000000000000000000000000;;		VpcPeeringConnectionStateReasonCodeInitiatingRequest = "initiating-request"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VpcPeeringConnectionStateReasonCodePendingAcceptance is a VpcPeeringConnectionStateReasonCode enum value
0000000000000000000000000000000000000000;;		VpcPeeringConnectionStateReasonCodePendingAcceptance = "pending-acceptance"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VpcPeeringConnectionStateReasonCodeActive is a VpcPeeringConnectionStateReasonCode enum value
0000000000000000000000000000000000000000;;		VpcPeeringConnectionStateReasonCodeActive = "active"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VpcPeeringConnectionStateReasonCodeDeleted is a VpcPeeringConnectionStateReasonCode enum value
0000000000000000000000000000000000000000;;		VpcPeeringConnectionStateReasonCodeDeleted = "deleted"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VpcPeeringConnectionStateReasonCodeRejected is a VpcPeeringConnectionStateReasonCode enum value
0000000000000000000000000000000000000000;;		VpcPeeringConnectionStateReasonCodeRejected = "rejected"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VpcPeeringConnectionStateReasonCodeFailed is a VpcPeeringConnectionStateReasonCode enum value
0000000000000000000000000000000000000000;;		VpcPeeringConnectionStateReasonCodeFailed = "failed"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VpcPeeringConnectionStateReasonCodeExpired is a VpcPeeringConnectionStateReasonCode enum value
0000000000000000000000000000000000000000;;		VpcPeeringConnectionStateReasonCodeExpired = "expired"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VpcPeeringConnectionStateReasonCodeProvisioning is a VpcPeeringConnectionStateReasonCode enum value
0000000000000000000000000000000000000000;;		VpcPeeringConnectionStateReasonCodeProvisioning = "provisioning"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VpcPeeringConnectionStateReasonCodeDeleting is a VpcPeeringConnectionStateReasonCode enum value
0000000000000000000000000000000000000000;;		VpcPeeringConnectionStateReasonCodeDeleting = "deleting"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// VpcStatePending is a VpcState enum value
0000000000000000000000000000000000000000;;		VpcStatePending = "pending"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VpcStateAvailable is a VpcState enum value
0000000000000000000000000000000000000000;;		VpcStateAvailable = "available"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// VpnStatePending is a VpnState enum value
0000000000000000000000000000000000000000;;		VpnStatePending = "pending"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VpnStateAvailable is a VpnState enum value
0000000000000000000000000000000000000000;;		VpnStateAvailable = "available"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VpnStateDeleting is a VpnState enum value
0000000000000000000000000000000000000000;;		VpnStateDeleting = "deleting"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VpnStateDeleted is a VpnState enum value
0000000000000000000000000000000000000000;;		VpnStateDeleted = "deleted"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// VpnStaticRouteSourceStatic is a VpnStaticRouteSource enum value
0000000000000000000000000000000000000000;;		VpnStaticRouteSourceStatic = "Static"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// ScopeAvailabilityZone is a scope enum value
0000000000000000000000000000000000000000;;		ScopeAvailabilityZone = "Availability Zone"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ScopeRegion is a scope enum value
0000000000000000000000000000000000000000;;		ScopeRegion = "Region"
0000000000000000000000000000000000000000;;	)
