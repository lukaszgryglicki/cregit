0000000000000000000000000000000000000000;;	package ec2
b5a369483575c99a3598125e51d2fb065a91c6de;Godeps/_workspace/src/github.com/awslabs/aws-sdk-go/service/ec2/customizations.go[Godeps/_workspace/src/github.com/awslabs/aws-sdk-go/service/ec2/customizations.go][vendor/github.com/aws/aws-sdk-go/service/ec2/customizations.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/awsutil"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/endpoints"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/request"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		initRequest = func(r *request.Request) {
0000000000000000000000000000000000000000;;			if r.Operation.Name == opCopySnapshot { // fill the PresignedURL parameter
0000000000000000000000000000000000000000;;				r.Handlers.Build.PushFront(fillPresignedURL)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func fillPresignedURL(r *request.Request) {
0000000000000000000000000000000000000000;;		if !r.ParamsFilled() {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		origParams := r.Params.(*CopySnapshotInput)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Stop if PresignedURL/DestinationRegion is set
0000000000000000000000000000000000000000;;		if origParams.PresignedUrl != nil || origParams.DestinationRegion != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		origParams.DestinationRegion = r.Config.Region
0000000000000000000000000000000000000000;;		newParams := awsutil.CopyOf(r.Params).(*CopySnapshotInput)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Create a new request based on the existing request. We will use this to
0000000000000000000000000000000000000000;;		// presign the CopySnapshot request against the source region.
0000000000000000000000000000000000000000;;		cfg := r.Config.Copy(aws.NewConfig().
0000000000000000000000000000000000000000;;			WithEndpoint("").
0000000000000000000000000000000000000000;;			WithRegion(aws.StringValue(origParams.SourceRegion)))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clientInfo := r.ClientInfo
0000000000000000000000000000000000000000;;		resolved, err := r.Config.EndpointResolver.EndpointFor(
0000000000000000000000000000000000000000;;			clientInfo.ServiceName, aws.StringValue(cfg.Region),
0000000000000000000000000000000000000000;;			func(opt *endpoints.Options) {
0000000000000000000000000000000000000000;;				opt.DisableSSL = aws.BoolValue(cfg.DisableSSL)
0000000000000000000000000000000000000000;;				opt.UseDualStack = aws.BoolValue(cfg.UseDualStack)
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.Error = err
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clientInfo.Endpoint = resolved.URL
0000000000000000000000000000000000000000;;		clientInfo.SigningRegion = resolved.SigningRegion
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Presign a CopySnapshot request with modified params
0000000000000000000000000000000000000000;;		req := request.New(*cfg, clientInfo, r.Handlers, r.Retryer, r.Operation, newParams, r.Data)
0000000000000000000000000000000000000000;;		url, err := req.Presign(5 * time.Minute) // 5 minutes should be enough.
0000000000000000000000000000000000000000;;		if err != nil {                          // bubble error back up to original request
0000000000000000000000000000000000000000;;			r.Error = err
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// We have our URL, set it on params
0000000000000000000000000000000000000000;;		origParams.PresignedUrl = &url
0000000000000000000000000000000000000000;;	}
