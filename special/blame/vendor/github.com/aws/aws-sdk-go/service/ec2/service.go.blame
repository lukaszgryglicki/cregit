0000000000000000000000000000000000000000;;	// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
b5a369483575c99a3598125e51d2fb065a91c6de;Godeps/_workspace/src/github.com/awslabs/aws-sdk-go/service/ec2/service.go[Godeps/_workspace/src/github.com/awslabs/aws-sdk-go/service/ec2/service.go][vendor/github.com/aws/aws-sdk-go/service/ec2/service.go];	
0000000000000000000000000000000000000000;;	package ec2
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/client"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/client/metadata"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/request"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/signer/v4"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/private/protocol/ec2query"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Amazon Elastic Compute Cloud (Amazon EC2) provides resizable computing capacity
0000000000000000000000000000000000000000;;	// in the Amazon Web Services (AWS) cloud. Using Amazon EC2 eliminates your
0000000000000000000000000000000000000000;;	// need to invest in hardware up front, so you can develop and deploy applications
0000000000000000000000000000000000000000;;	// faster.
0000000000000000000000000000000000000000;;	// The service client's operations are safe to be used concurrently.
0000000000000000000000000000000000000000;;	// It is not safe to mutate any of the client's properties though.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ec2-2016-11-15
0000000000000000000000000000000000000000;;	type EC2 struct {
0000000000000000000000000000000000000000;;		*client.Client
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Used for custom client initialization logic
0000000000000000000000000000000000000000;;	var initClient func(*client.Client)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Used for custom request initialization logic
0000000000000000000000000000000000000000;;	var initRequest func(*request.Request)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Service information constants
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		ServiceName = "ec2"       // Service endpoint prefix API calls made to.
0000000000000000000000000000000000000000;;		EndpointsID = ServiceName // Service ID for Regions and Endpoints metadata.
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// New creates a new instance of the EC2 client with a session.
0000000000000000000000000000000000000000;;	// If additional configuration is needed for the client instance use the optional
0000000000000000000000000000000000000000;;	// aws.Config parameter to add your extra config.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Example:
0000000000000000000000000000000000000000;;	//     // Create a EC2 client from just a session.
0000000000000000000000000000000000000000;;	//     svc := ec2.New(mySession)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     // Create a EC2 client with additional configuration
0000000000000000000000000000000000000000;;	//     svc := ec2.New(mySession, aws.NewConfig().WithRegion("us-west-2"))
0000000000000000000000000000000000000000;;	func New(p client.ConfigProvider, cfgs ...*aws.Config) *EC2 {
0000000000000000000000000000000000000000;;		c := p.ClientConfig(EndpointsID, cfgs...)
0000000000000000000000000000000000000000;;		return newClient(*c.Config, c.Handlers, c.Endpoint, c.SigningRegion, c.SigningName)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// newClient creates, initializes and returns a new service client instance.
0000000000000000000000000000000000000000;;	func newClient(cfg aws.Config, handlers request.Handlers, endpoint, signingRegion, signingName string) *EC2 {
0000000000000000000000000000000000000000;;		svc := &EC2{
0000000000000000000000000000000000000000;;			Client: client.New(
0000000000000000000000000000000000000000;;				cfg,
0000000000000000000000000000000000000000;;				metadata.ClientInfo{
0000000000000000000000000000000000000000;;					ServiceName:   ServiceName,
0000000000000000000000000000000000000000;;					SigningName:   signingName,
0000000000000000000000000000000000000000;;					SigningRegion: signingRegion,
0000000000000000000000000000000000000000;;					Endpoint:      endpoint,
0000000000000000000000000000000000000000;;					APIVersion:    "2016-11-15",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				handlers,
0000000000000000000000000000000000000000;;			),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Handlers
0000000000000000000000000000000000000000;;		svc.Handlers.Sign.PushBackNamed(v4.SignRequestHandler)
0000000000000000000000000000000000000000;;		svc.Handlers.Build.PushBackNamed(ec2query.BuildHandler)
0000000000000000000000000000000000000000;;		svc.Handlers.Unmarshal.PushBackNamed(ec2query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		svc.Handlers.UnmarshalMeta.PushBackNamed(ec2query.UnmarshalMetaHandler)
0000000000000000000000000000000000000000;;		svc.Handlers.UnmarshalError.PushBackNamed(ec2query.UnmarshalErrorHandler)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Run custom client initialization if present
0000000000000000000000000000000000000000;;		if initClient != nil {
0000000000000000000000000000000000000000;;			initClient(svc.Client)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return svc
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// newRequest creates a new request for a EC2 operation and runs any
0000000000000000000000000000000000000000;;	// custom request initialization.
0000000000000000000000000000000000000000;;	func (c *EC2) newRequest(op *request.Operation, params, data interface{}) *request.Request {
0000000000000000000000000000000000000000;;		req := c.NewRequest(op, params, data)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Run custom request initialization if present
0000000000000000000000000000000000000000;;		if initRequest != nil {
0000000000000000000000000000000000000000;;			initRequest(req)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return req
0000000000000000000000000000000000000000;;	}
