0000000000000000000000000000000000000000;;	// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
7b662bd39f4f8ebe87658b72a7df9da9c5a74c80;;	
0000000000000000000000000000000000000000;;	package autoscaling
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/private/waiter"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WaitUntilGroupExists uses the Auto Scaling API operation
0000000000000000000000000000000000000000;;	// DescribeAutoScalingGroups to wait for a condition to be met before returning.
0000000000000000000000000000000000000000;;	// If the condition is not meet within the max attempt window an error will
0000000000000000000000000000000000000000;;	// be returned.
0000000000000000000000000000000000000000;;	func (c *AutoScaling) WaitUntilGroupExists(input *DescribeAutoScalingGroupsInput) error {
0000000000000000000000000000000000000000;;		waiterCfg := waiter.Config{
0000000000000000000000000000000000000000;;			Operation:   "DescribeAutoScalingGroups",
0000000000000000000000000000000000000000;;			Delay:       5,
0000000000000000000000000000000000000000;;			MaxAttempts: 10,
0000000000000000000000000000000000000000;;			Acceptors: []waiter.WaitAcceptor{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					State:    "success",
0000000000000000000000000000000000000000;;					Matcher:  "path",
0000000000000000000000000000000000000000;;					Argument: "length(AutoScalingGroups) > `0`",
0000000000000000000000000000000000000000;;					Expected: true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					State:    "retry",
0000000000000000000000000000000000000000;;					Matcher:  "path",
0000000000000000000000000000000000000000;;					Argument: "length(AutoScalingGroups) > `0`",
0000000000000000000000000000000000000000;;					Expected: false,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		w := waiter.Waiter{
0000000000000000000000000000000000000000;;			Client: c,
0000000000000000000000000000000000000000;;			Input:  input,
0000000000000000000000000000000000000000;;			Config: waiterCfg,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return w.Wait()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WaitUntilGroupInService uses the Auto Scaling API operation
0000000000000000000000000000000000000000;;	// DescribeAutoScalingGroups to wait for a condition to be met before returning.
0000000000000000000000000000000000000000;;	// If the condition is not meet within the max attempt window an error will
0000000000000000000000000000000000000000;;	// be returned.
0000000000000000000000000000000000000000;;	func (c *AutoScaling) WaitUntilGroupInService(input *DescribeAutoScalingGroupsInput) error {
0000000000000000000000000000000000000000;;		waiterCfg := waiter.Config{
0000000000000000000000000000000000000000;;			Operation:   "DescribeAutoScalingGroups",
0000000000000000000000000000000000000000;;			Delay:       15,
0000000000000000000000000000000000000000;;			MaxAttempts: 40,
0000000000000000000000000000000000000000;;			Acceptors: []waiter.WaitAcceptor{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					State:    "success",
0000000000000000000000000000000000000000;;					Matcher:  "path",
0000000000000000000000000000000000000000;;					Argument: "contains(AutoScalingGroups[].[length(Instances[?LifecycleState=='InService']) >= MinSize][], `false`)",
0000000000000000000000000000000000000000;;					Expected: false,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					State:    "retry",
0000000000000000000000000000000000000000;;					Matcher:  "path",
0000000000000000000000000000000000000000;;					Argument: "contains(AutoScalingGroups[].[length(Instances[?LifecycleState=='InService']) >= MinSize][], `false`)",
0000000000000000000000000000000000000000;;					Expected: true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		w := waiter.Waiter{
0000000000000000000000000000000000000000;;			Client: c,
0000000000000000000000000000000000000000;;			Input:  input,
0000000000000000000000000000000000000000;;			Config: waiterCfg,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return w.Wait()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WaitUntilGroupNotExists uses the Auto Scaling API operation
0000000000000000000000000000000000000000;;	// DescribeAutoScalingGroups to wait for a condition to be met before returning.
0000000000000000000000000000000000000000;;	// If the condition is not meet within the max attempt window an error will
0000000000000000000000000000000000000000;;	// be returned.
0000000000000000000000000000000000000000;;	func (c *AutoScaling) WaitUntilGroupNotExists(input *DescribeAutoScalingGroupsInput) error {
0000000000000000000000000000000000000000;;		waiterCfg := waiter.Config{
0000000000000000000000000000000000000000;;			Operation:   "DescribeAutoScalingGroups",
0000000000000000000000000000000000000000;;			Delay:       15,
0000000000000000000000000000000000000000;;			MaxAttempts: 40,
0000000000000000000000000000000000000000;;			Acceptors: []waiter.WaitAcceptor{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					State:    "success",
0000000000000000000000000000000000000000;;					Matcher:  "path",
0000000000000000000000000000000000000000;;					Argument: "length(AutoScalingGroups) > `0`",
0000000000000000000000000000000000000000;;					Expected: false,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					State:    "retry",
0000000000000000000000000000000000000000;;					Matcher:  "path",
0000000000000000000000000000000000000000;;					Argument: "length(AutoScalingGroups) > `0`",
0000000000000000000000000000000000000000;;					Expected: true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		w := waiter.Waiter{
0000000000000000000000000000000000000000;;			Client: c,
0000000000000000000000000000000000000000;;			Input:  input,
0000000000000000000000000000000000000000;;			Config: waiterCfg,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return w.Wait()
0000000000000000000000000000000000000000;;	}
