0000000000000000000000000000000000000000;;	package route53
10dd25bed5ef520e7d953b5d959b6088669c4e3a;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"regexp"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/awserr"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/client"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/request"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/private/protocol/restxml"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		initClient = func(c *client.Client) {
0000000000000000000000000000000000000000;;			c.Handlers.Build.PushBack(sanitizeURL)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		initRequest = func(r *request.Request) {
0000000000000000000000000000000000000000;;			switch r.Operation.Name {
0000000000000000000000000000000000000000;;			case opChangeResourceRecordSets:
0000000000000000000000000000000000000000;;				r.Handlers.UnmarshalError.Remove(restxml.UnmarshalErrorHandler)
0000000000000000000000000000000000000000;;				r.Handlers.UnmarshalError.PushBack(unmarshalChangeResourceRecordSetsError)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var reSanitizeURL = regexp.MustCompile(`\/%2F\w+%2F`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func sanitizeURL(r *request.Request) {
0000000000000000000000000000000000000000;;		r.HTTPRequest.URL.RawPath =
0000000000000000000000000000000000000000;;			reSanitizeURL.ReplaceAllString(r.HTTPRequest.URL.RawPath, "/")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Update Path so that it reflects the cleaned RawPath
0000000000000000000000000000000000000000;;		updated, err := url.Parse(r.HTTPRequest.URL.RawPath)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.Error = awserr.New("SerializationError", "failed to clean Route53 URL", err)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Take the updated path so the requests's URL Path has parity with RawPath.
0000000000000000000000000000000000000000;;		r.HTTPRequest.URL.Path = updated.Path
0000000000000000000000000000000000000000;;	}
