0000000000000000000000000000000000000000;;	// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
10dd25bed5ef520e7d953b5d959b6088669c4e3a;;	
0000000000000000000000000000000000000000;;	// Package route53 provides a client for Amazon Route 53.
0000000000000000000000000000000000000000;;	package route53
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/awsutil"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/request"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opAssociateVPCWithHostedZone = "AssociateVPCWithHostedZone"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AssociateVPCWithHostedZoneRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the AssociateVPCWithHostedZone operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See AssociateVPCWithHostedZone for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the AssociateVPCWithHostedZone method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the AssociateVPCWithHostedZoneRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.AssociateVPCWithHostedZoneRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/AssociateVPCWithHostedZone
0000000000000000000000000000000000000000;;	func (c *Route53) AssociateVPCWithHostedZoneRequest(input *AssociateVPCWithHostedZoneInput) (req *request.Request, output *AssociateVPCWithHostedZoneOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opAssociateVPCWithHostedZone,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/hostedzone/{Id}/associatevpc",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &AssociateVPCWithHostedZoneInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &AssociateVPCWithHostedZoneOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AssociateVPCWithHostedZone API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Associates an Amazon VPC with a private hosted zone.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// To perform the association, the VPC and the private hosted zone must already
0000000000000000000000000000000000000000;;	// exist. You can't convert a public hosted zone into a private hosted zone.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Send a POST request to the /2013-04-01/hostedzone/hosted zone ID/associatevpc
0000000000000000000000000000000000000000;;	// resource. The request body must include a document with an AssociateVPCWithHostedZoneRequest
0000000000000000000000000000000000000000;;	// element. The response contains a ChangeInfo data type that you can use to
0000000000000000000000000000000000000000;;	// track the progress of the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If you want to associate a VPC that was created by using one AWS account
0000000000000000000000000000000000000000;;	// with a private hosted zone that was created by using a different account,
0000000000000000000000000000000000000000;;	// the AWS account that created the private hosted zone must first submit a
0000000000000000000000000000000000000000;;	// CreateVPCAssociationAuthorization request. Then the account that created
0000000000000000000000000000000000000000;;	// the VPC must submit an AssociateVPCWithHostedZone request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation AssociateVPCWithHostedZone for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * NoSuchHostedZone
0000000000000000000000000000000000000000;;	//   No hosted zone exists with the ID that you specified.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * NotAuthorizedException
0000000000000000000000000000000000000000;;	//   Associating the specified VPC with the specified hosted zone has not been
0000000000000000000000000000000000000000;;	//   authorized.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * InvalidVPCId
0000000000000000000000000000000000000000;;	//   The VPC ID that you specified either isn't a valid ID or the current account
0000000000000000000000000000000000000000;;	//   is not authorized to access this VPC.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * InvalidInput
0000000000000000000000000000000000000000;;	//   The input is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * PublicZoneVPCAssociation
0000000000000000000000000000000000000000;;	//   You're trying to associate a VPC with a public hosted zone. Amazon Route
0000000000000000000000000000000000000000;;	//   53 doesn't support associating a VPC with a public hosted zone.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * ConflictingDomainExists
0000000000000000000000000000000000000000;;	//   You specified an Amazon VPC that you're already using for another hosted
0000000000000000000000000000000000000000;;	//   zone, and the domain that you specified for one of the hosted zones is a
0000000000000000000000000000000000000000;;	//   subdomain of the domain that you specified for the other hosted zone. For
0000000000000000000000000000000000000000;;	//   example, you can't use the same Amazon VPC for the hosted zones for example.com
0000000000000000000000000000000000000000;;	//   and test.example.com.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * LimitsExceeded
0000000000000000000000000000000000000000;;	//   The limits specified for a resource have been exceeded.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/AssociateVPCWithHostedZone
0000000000000000000000000000000000000000;;	func (c *Route53) AssociateVPCWithHostedZone(input *AssociateVPCWithHostedZoneInput) (*AssociateVPCWithHostedZoneOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.AssociateVPCWithHostedZoneRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opChangeResourceRecordSets = "ChangeResourceRecordSets"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ChangeResourceRecordSetsRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ChangeResourceRecordSets operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ChangeResourceRecordSets for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ChangeResourceRecordSets method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ChangeResourceRecordSetsRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ChangeResourceRecordSetsRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ChangeResourceRecordSets
0000000000000000000000000000000000000000;;	func (c *Route53) ChangeResourceRecordSetsRequest(input *ChangeResourceRecordSetsInput) (req *request.Request, output *ChangeResourceRecordSetsOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opChangeResourceRecordSets,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/hostedzone/{Id}/rrset/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ChangeResourceRecordSetsInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ChangeResourceRecordSetsOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ChangeResourceRecordSets API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Create, change, update, or delete authoritative DNS information on all Amazon
0000000000000000000000000000000000000000;;	// Route 53 servers. Send a POST request to:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// /2013-04-01/hostedzone/Amazon Route 53 hosted Zone ID/rrset resource.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The request body must include a document with a ChangeResourceRecordSetsRequest
0000000000000000000000000000000000000000;;	// element. The request body contains a list of change items, known as a change
0000000000000000000000000000000000000000;;	// batch. Change batches are considered transactional changes. When using the
0000000000000000000000000000000000000000;;	// Amazon Route 53 API to change resource record sets, Amazon Route 53 either
0000000000000000000000000000000000000000;;	// makes all or none of the changes in a change batch request. This ensures
0000000000000000000000000000000000000000;;	// that Amazon Route 53 never partially implements the intended changes to the
0000000000000000000000000000000000000000;;	// resource record sets in a hosted zone.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For example, a change batch request that deletes the CNAME record for www.example.com
0000000000000000000000000000000000000000;;	// and creates an alias resource record set for www.example.com. Amazon Route
0000000000000000000000000000000000000000;;	// 53 deletes the first resource record set and creates the second resource
0000000000000000000000000000000000000000;;	// record set in a single operation. If either the DELETE or the CREATE action
0000000000000000000000000000000000000000;;	// fails, then both changes (plus any other changes in the batch) fail, and
0000000000000000000000000000000000000000;;	// the original CNAME record continues to exist.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Due to the nature of transactional changes, you can't delete the same resource
0000000000000000000000000000000000000000;;	// record set more than once in a single change batch. If you attempt to delete
0000000000000000000000000000000000000000;;	// the same change batch more than once, Amazon Route 53 returns an InvalidChangeBatch
0000000000000000000000000000000000000000;;	// error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// To create resource record sets for complex routing configurations, use either
0000000000000000000000000000000000000000;;	// the traffic flow visual editor in the Amazon Route 53 console or the API
0000000000000000000000000000000000000000;;	// actions for traffic policies and traffic policy instances. Save the configuration
0000000000000000000000000000000000000000;;	// as a traffic policy, then associate the traffic policy with one or more domain
0000000000000000000000000000000000000000;;	// names (such as example.com) or subdomain names (such as www.example.com),
0000000000000000000000000000000000000000;;	// in the same hosted zone or in multiple hosted zones. You can roll back the
0000000000000000000000000000000000000000;;	// updates if the new configuration isn't performing as expected. For more information,
0000000000000000000000000000000000000000;;	// see Using Traffic Flow to Route DNS Traffic (http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/traffic-flow.html)
0000000000000000000000000000000000000000;;	// in the Amazon Route 53 Developer Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Use ChangeResourceRecordsSetsRequest to perform the following actions:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * CREATE: Creates a resource record set that has the specified values.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * DELETE: Deletes an existing resource record set that has the specified
0000000000000000000000000000000000000000;;	//    values.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * UPSERT: If a resource record set does not already exist, AWS creates
0000000000000000000000000000000000000000;;	//    it. If a resource set does exist, Amazon Route 53 updates it with the
0000000000000000000000000000000000000000;;	//    values in the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The values that you need to include in the request depend on the type of
0000000000000000000000000000000000000000;;	// resource record set that you're creating, deleting, or updating:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Basic resource record sets (excluding alias, failover, geolocation, latency,
0000000000000000000000000000000000000000;;	// and weighted resource record sets)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * Name
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * Type
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * TTL
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Failover, geolocation, latency, or weighted resource record sets (excluding
0000000000000000000000000000000000000000;;	// alias resource record sets)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * Name
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * Type
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * TTL
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * SetIdentifier
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Alias resource record sets (including failover alias, geolocation alias,
0000000000000000000000000000000000000000;;	// latency alias, and weighted alias resource record sets)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * Name
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * Type
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * AliasTarget (includes DNSName, EvaluateTargetHealth, and HostedZoneId)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * SetIdentifier (for failover, geolocation, latency, and weighted resource
0000000000000000000000000000000000000000;;	//    record sets)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// When you submit a ChangeResourceRecordSets request, Amazon Route 53 propagates
0000000000000000000000000000000000000000;;	// your changes to all of the Amazon Route 53 authoritative DNS servers. While
0000000000000000000000000000000000000000;;	// your changes are propagating, GetChange returns a status of PENDING. When
0000000000000000000000000000000000000000;;	// propagation is complete, GetChange returns a status of INSYNC. Changes generally
0000000000000000000000000000000000000000;;	// propagate to all Amazon Route 53 name servers in a few minutes. In rare circumstances,
0000000000000000000000000000000000000000;;	// propagation can take up to 30 minutes. For more information, see GetChange
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For information about the limits on a ChangeResourceRecordSets request, see
0000000000000000000000000000000000000000;;	// Limits (http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DNSLimitations.html)
0000000000000000000000000000000000000000;;	// in the Amazon Route 53 Developer Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation ChangeResourceRecordSets for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * NoSuchHostedZone
0000000000000000000000000000000000000000;;	//   No hosted zone exists with the ID that you specified.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * NoSuchHealthCheck
0000000000000000000000000000000000000000;;	//   No health check exists with the ID that you specified in the DeleteHealthCheck
0000000000000000000000000000000000000000;;	//   request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * InvalidChangeBatch
0000000000000000000000000000000000000000;;	//   This exception contains a list of messages that might contain one or more
0000000000000000000000000000000000000000;;	//   error messages. Each error message indicates one error in the change batch.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * InvalidInput
0000000000000000000000000000000000000000;;	//   The input is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * PriorRequestNotComplete
0000000000000000000000000000000000000000;;	//   If Amazon Route 53 can't process a request before the next request arrives,
0000000000000000000000000000000000000000;;	//   it will reject subsequent requests for the same hosted zone and return an
0000000000000000000000000000000000000000;;	//   HTTP 400 error (Bad request). If Amazon Route 53 returns this error repeatedly
0000000000000000000000000000000000000000;;	//   for the same request, we recommend that you wait, in intervals of increasing
0000000000000000000000000000000000000000;;	//   duration, before you try the request again.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ChangeResourceRecordSets
0000000000000000000000000000000000000000;;	func (c *Route53) ChangeResourceRecordSets(input *ChangeResourceRecordSetsInput) (*ChangeResourceRecordSetsOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ChangeResourceRecordSetsRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opChangeTagsForResource = "ChangeTagsForResource"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ChangeTagsForResourceRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ChangeTagsForResource operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ChangeTagsForResource for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ChangeTagsForResource method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ChangeTagsForResourceRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ChangeTagsForResourceRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ChangeTagsForResource
0000000000000000000000000000000000000000;;	func (c *Route53) ChangeTagsForResourceRequest(input *ChangeTagsForResourceInput) (req *request.Request, output *ChangeTagsForResourceOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opChangeTagsForResource,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/tags/{ResourceType}/{ResourceId}",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ChangeTagsForResourceInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ChangeTagsForResourceOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ChangeTagsForResource API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Adds, edits, or deletes tags for a health check or a hosted zone.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For information about using tags for cost allocation, see Using Cost Allocation
0000000000000000000000000000000000000000;;	// Tags (http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html)
0000000000000000000000000000000000000000;;	// in the AWS Billing and Cost Management User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation ChangeTagsForResource for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * InvalidInput
0000000000000000000000000000000000000000;;	//   The input is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * NoSuchHealthCheck
0000000000000000000000000000000000000000;;	//   No health check exists with the ID that you specified in the DeleteHealthCheck
0000000000000000000000000000000000000000;;	//   request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * NoSuchHostedZone
0000000000000000000000000000000000000000;;	//   No hosted zone exists with the ID that you specified.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * PriorRequestNotComplete
0000000000000000000000000000000000000000;;	//   If Amazon Route 53 can't process a request before the next request arrives,
0000000000000000000000000000000000000000;;	//   it will reject subsequent requests for the same hosted zone and return an
0000000000000000000000000000000000000000;;	//   HTTP 400 error (Bad request). If Amazon Route 53 returns this error repeatedly
0000000000000000000000000000000000000000;;	//   for the same request, we recommend that you wait, in intervals of increasing
0000000000000000000000000000000000000000;;	//   duration, before you try the request again.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * ThrottlingException
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ChangeTagsForResource
0000000000000000000000000000000000000000;;	func (c *Route53) ChangeTagsForResource(input *ChangeTagsForResourceInput) (*ChangeTagsForResourceOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ChangeTagsForResourceRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opCreateHealthCheck = "CreateHealthCheck"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateHealthCheckRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the CreateHealthCheck operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See CreateHealthCheck for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the CreateHealthCheck method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the CreateHealthCheckRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.CreateHealthCheckRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/CreateHealthCheck
0000000000000000000000000000000000000000;;	func (c *Route53) CreateHealthCheckRequest(input *CreateHealthCheckInput) (req *request.Request, output *CreateHealthCheckOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opCreateHealthCheck,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/healthcheck",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &CreateHealthCheckInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &CreateHealthCheckOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateHealthCheck API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creates a new health check.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// To create a new health check, send a POST request to the /2013-04-01/healthcheck
0000000000000000000000000000000000000000;;	// resource. The request body must include a document with a CreateHealthCheckRequest
0000000000000000000000000000000000000000;;	// element. The response returns the CreateHealthCheckResponse element, containing
0000000000000000000000000000000000000000;;	// the health check ID specified when adding health check to a resource record
0000000000000000000000000000000000000000;;	// set. For information about adding health checks to resource record sets,
0000000000000000000000000000000000000000;;	// see ResourceRecordSet$HealthCheckId in ChangeResourceRecordSets.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If you are registering EC2 instances with an Elastic Load Balancing (ELB)
0000000000000000000000000000000000000000;;	// load balancer, do not create Amazon Route 53 health checks for the EC2 instances.
0000000000000000000000000000000000000000;;	// When you register an EC2 instance with a load balancer, you configure settings
0000000000000000000000000000000000000000;;	// for an ELB health check, which performs a similar function to an Amazon Route
0000000000000000000000000000000000000000;;	// 53 health check.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// You can associate health checks with failover resource record sets in a private
0000000000000000000000000000000000000000;;	// hosted zone. Note the following:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * Amazon Route 53 health checkers are outside the VPC. To check the health
0000000000000000000000000000000000000000;;	//    of an endpoint within a VPC by IP address, you must assign a public IP
0000000000000000000000000000000000000000;;	//    address to the instance in the VPC.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * You can configure a health checker to check the health of an external
0000000000000000000000000000000000000000;;	//    resource that the instance relies on, such as a database server.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * You can create a CloudWatch metric, associate an alarm with the metric,
0000000000000000000000000000000000000000;;	//    and then create a health check that is based on the state of the alarm.
0000000000000000000000000000000000000000;;	//    For example, you might create a CloudWatch metric that checks the status
0000000000000000000000000000000000000000;;	//    of the Amazon EC2 StatusCheckFailed metric, add an alarm to the metric,
0000000000000000000000000000000000000000;;	//    and then create a health check that is based on the state of the alarm.
0000000000000000000000000000000000000000;;	//    For information about creating CloudWatch metrics and alarms by using
0000000000000000000000000000000000000000;;	//    the CloudWatch console, see the Amazon CloudWatch User Guide (http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/WhatIsCloudWatch.html).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation CreateHealthCheck for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * TooManyHealthChecks
0000000000000000000000000000000000000000;;	//   You have reached the maximum number of active health checks for an AWS account.
0000000000000000000000000000000000000000;;	//   The default limit is 100. To request a higher limit, create a case (http://aws.amazon.com/route53-request)
0000000000000000000000000000000000000000;;	//   with the AWS Support Center.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * HealthCheckAlreadyExists
0000000000000000000000000000000000000000;;	//   The health check you're attempting to create already exists.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   Amazon Route 53 returns this error when a health check has already been created
0000000000000000000000000000000000000000;;	//   with the specified value for CallerReference.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * InvalidInput
0000000000000000000000000000000000000000;;	//   The input is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/CreateHealthCheck
0000000000000000000000000000000000000000;;	func (c *Route53) CreateHealthCheck(input *CreateHealthCheckInput) (*CreateHealthCheckOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.CreateHealthCheckRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opCreateHostedZone = "CreateHostedZone"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateHostedZoneRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the CreateHostedZone operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See CreateHostedZone for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the CreateHostedZone method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the CreateHostedZoneRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.CreateHostedZoneRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/CreateHostedZone
0000000000000000000000000000000000000000;;	func (c *Route53) CreateHostedZoneRequest(input *CreateHostedZoneInput) (req *request.Request, output *CreateHostedZoneOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opCreateHostedZone,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/hostedzone",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &CreateHostedZoneInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &CreateHostedZoneOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateHostedZone API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creates a new public hosted zone, used to specify how the Domain Name System
0000000000000000000000000000000000000000;;	// (DNS) routes traffic on the Internet for a domain, such as example.com, and
0000000000000000000000000000000000000000;;	// its subdomains.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Public hosted zones can't be converted to a private hosted zone or vice versa.
0000000000000000000000000000000000000000;;	// Instead, create a new hosted zone with the same name and create new resource
0000000000000000000000000000000000000000;;	// record sets.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Send a POST request to the /2013-04-01/hostedzone resource. The request body
0000000000000000000000000000000000000000;;	// must include a document with a CreateHostedZoneRequest element. The response
0000000000000000000000000000000000000000;;	// returns the CreateHostedZoneResponse element containing metadata about the
0000000000000000000000000000000000000000;;	// hosted zone.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Fore more information about charges for hosted zones, see Amazon Route 53
0000000000000000000000000000000000000000;;	// Pricing (http://aws.amazon.com/route53/pricing/).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note the following:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * You can't create a hosted zone for a top-level domain (TLD).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * Amazon Route 53 automatically creates a default SOA record and four
0000000000000000000000000000000000000000;;	//    NS records for the zone. For more information about SOA and NS records,
0000000000000000000000000000000000000000;;	//    see NS and SOA Records that Amazon Route 53 Creates for a Hosted Zone
0000000000000000000000000000000000000000;;	//    (http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/SOA-NSrecords.html)
0000000000000000000000000000000000000000;;	//    in the Amazon Route 53 Developer Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * If your domain is registered with a registrar other than Amazon Route
0000000000000000000000000000000000000000;;	//    53, you must update the name servers with your registrar to make Amazon
0000000000000000000000000000000000000000;;	//    Route 53 your DNS service. For more information, see Configuring Amazon
0000000000000000000000000000000000000000;;	//    Route 53 as your DNS Service (http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/creating-migrating.html)
0000000000000000000000000000000000000000;;	//    in the Amazon Route 53 Developer's Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// After creating a zone, its initial status is PENDING. This means that it
0000000000000000000000000000000000000000;;	// is not yet available on all DNS servers. The status of the zone changes to
0000000000000000000000000000000000000000;;	// INSYNC when the NS and SOA records are available on all Amazon Route 53 DNS
0000000000000000000000000000000000000000;;	// servers.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// When trying to create a hosted zone using a reusable delegation set, specify
0000000000000000000000000000000000000000;;	// an optional DelegationSetId, and Amazon Route 53 would assign those 4 NS
0000000000000000000000000000000000000000;;	// records for the zone, instead of allotting a new one.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation CreateHostedZone for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * InvalidDomainName
0000000000000000000000000000000000000000;;	//   The specified domain name is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * HostedZoneAlreadyExists
0000000000000000000000000000000000000000;;	//   The hosted zone you are trying to create already exists. Amazon Route 53
0000000000000000000000000000000000000000;;	//   returns this error when a hosted zone has already been created with the specified
0000000000000000000000000000000000000000;;	//   CallerReference.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * TooManyHostedZones
0000000000000000000000000000000000000000;;	//   This hosted zone can't be created because the hosted zone limit is exceeded.
0000000000000000000000000000000000000000;;	//   To request a limit increase, go to the Amazon Route 53 Contact Us (http://aws.amazon.com/route53-request/)
0000000000000000000000000000000000000000;;	//   page.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * InvalidVPCId
0000000000000000000000000000000000000000;;	//   The VPC ID that you specified either isn't a valid ID or the current account
0000000000000000000000000000000000000000;;	//   is not authorized to access this VPC.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * InvalidInput
0000000000000000000000000000000000000000;;	//   The input is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * DelegationSetNotAvailable
0000000000000000000000000000000000000000;;	//   You can create a hosted zone that has the same name as an existing hosted
0000000000000000000000000000000000000000;;	//   zone (example.com is common), but there is a limit to the number of hosted
0000000000000000000000000000000000000000;;	//   zones that have the same name. If you get this error, Amazon Route 53 has
0000000000000000000000000000000000000000;;	//   reached that limit. If you own the domain name and Amazon Route 53 generates
0000000000000000000000000000000000000000;;	//   this error, contact Customer Support.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * ConflictingDomainExists
0000000000000000000000000000000000000000;;	//   You specified an Amazon VPC that you're already using for another hosted
0000000000000000000000000000000000000000;;	//   zone, and the domain that you specified for one of the hosted zones is a
0000000000000000000000000000000000000000;;	//   subdomain of the domain that you specified for the other hosted zone. For
0000000000000000000000000000000000000000;;	//   example, you can't use the same Amazon VPC for the hosted zones for example.com
0000000000000000000000000000000000000000;;	//   and test.example.com.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * NoSuchDelegationSet
0000000000000000000000000000000000000000;;	//   A reusable delegation set with the specified ID does not exist.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * DelegationSetNotReusable
0000000000000000000000000000000000000000;;	//   A reusable delegation set with the specified ID does not exist.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/CreateHostedZone
0000000000000000000000000000000000000000;;	func (c *Route53) CreateHostedZone(input *CreateHostedZoneInput) (*CreateHostedZoneOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.CreateHostedZoneRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opCreateReusableDelegationSet = "CreateReusableDelegationSet"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateReusableDelegationSetRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the CreateReusableDelegationSet operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See CreateReusableDelegationSet for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the CreateReusableDelegationSet method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the CreateReusableDelegationSetRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.CreateReusableDelegationSetRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/CreateReusableDelegationSet
0000000000000000000000000000000000000000;;	func (c *Route53) CreateReusableDelegationSetRequest(input *CreateReusableDelegationSetInput) (req *request.Request, output *CreateReusableDelegationSetOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opCreateReusableDelegationSet,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/delegationset",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &CreateReusableDelegationSetInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &CreateReusableDelegationSetOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateReusableDelegationSet API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creates a delegation set (a group of four name servers) that can be reused
0000000000000000000000000000000000000000;;	// by multiple hosted zones. If a hosted zoned ID is specified, CreateReusableDelegationSet
0000000000000000000000000000000000000000;;	// marks the delegation set associated with that zone as reusable
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Send a POST request to the /2013-04-01/delegationset resource. The request
0000000000000000000000000000000000000000;;	// body must include a document with a CreateReusableDelegationSetRequest element.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// A reusable delegation set can't be associated with a private hosted zone/
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information, including a procedure on how to create and configure
0000000000000000000000000000000000000000;;	// a reusable delegation set (also known as white label name servers), see Configuring
0000000000000000000000000000000000000000;;	// White Label Name Servers (http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/white-label-name-servers.html).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation CreateReusableDelegationSet for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * DelegationSetAlreadyCreated
0000000000000000000000000000000000000000;;	//   A delegation set with the same owner and caller reference combination has
0000000000000000000000000000000000000000;;	//   already been created.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * LimitsExceeded
0000000000000000000000000000000000000000;;	//   The limits specified for a resource have been exceeded.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * HostedZoneNotFound
0000000000000000000000000000000000000000;;	//   The specified HostedZone can't be found.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * InvalidArgument
0000000000000000000000000000000000000000;;	//   Parameter name and problem.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * InvalidInput
0000000000000000000000000000000000000000;;	//   The input is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * DelegationSetNotAvailable
0000000000000000000000000000000000000000;;	//   You can create a hosted zone that has the same name as an existing hosted
0000000000000000000000000000000000000000;;	//   zone (example.com is common), but there is a limit to the number of hosted
0000000000000000000000000000000000000000;;	//   zones that have the same name. If you get this error, Amazon Route 53 has
0000000000000000000000000000000000000000;;	//   reached that limit. If you own the domain name and Amazon Route 53 generates
0000000000000000000000000000000000000000;;	//   this error, contact Customer Support.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * DelegationSetAlreadyReusable
0000000000000000000000000000000000000000;;	//   The specified delegation set has already been marked as reusable.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/CreateReusableDelegationSet
0000000000000000000000000000000000000000;;	func (c *Route53) CreateReusableDelegationSet(input *CreateReusableDelegationSetInput) (*CreateReusableDelegationSetOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.CreateReusableDelegationSetRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opCreateTrafficPolicy = "CreateTrafficPolicy"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateTrafficPolicyRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the CreateTrafficPolicy operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See CreateTrafficPolicy for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the CreateTrafficPolicy method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the CreateTrafficPolicyRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.CreateTrafficPolicyRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/CreateTrafficPolicy
0000000000000000000000000000000000000000;;	func (c *Route53) CreateTrafficPolicyRequest(input *CreateTrafficPolicyInput) (req *request.Request, output *CreateTrafficPolicyOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opCreateTrafficPolicy,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/trafficpolicy",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &CreateTrafficPolicyInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &CreateTrafficPolicyOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateTrafficPolicy API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creates a traffic policy, which you use to create multiple DNS resource record
0000000000000000000000000000000000000000;;	// sets for one domain name (such as example.com) or one subdomain name (such
0000000000000000000000000000000000000000;;	// as www.example.com).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Send a POST request to the /2013-04-01/trafficpolicy resource. The request
0000000000000000000000000000000000000000;;	// body must include a document with a CreateTrafficPolicyRequest element. The
0000000000000000000000000000000000000000;;	// response includes the CreateTrafficPolicyResponse element, which contains
0000000000000000000000000000000000000000;;	// information about the new traffic policy.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation CreateTrafficPolicy for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * InvalidInput
0000000000000000000000000000000000000000;;	//   The input is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * TooManyTrafficPolicies
0000000000000000000000000000000000000000;;	//   You've created the maximum number of traffic policies that can be created
0000000000000000000000000000000000000000;;	//   for the current AWS account. You can request an increase to the limit on
0000000000000000000000000000000000000000;;	//   the Contact Us (http://aws.amazon.com/route53-request/) page.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * TrafficPolicyAlreadyExists
0000000000000000000000000000000000000000;;	//   A traffic policy that has the same value for Name already exists.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * InvalidTrafficPolicyDocument
0000000000000000000000000000000000000000;;	//   The format of the traffic policy document that you specified in the Document
0000000000000000000000000000000000000000;;	//   element is invalid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/CreateTrafficPolicy
0000000000000000000000000000000000000000;;	func (c *Route53) CreateTrafficPolicy(input *CreateTrafficPolicyInput) (*CreateTrafficPolicyOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.CreateTrafficPolicyRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opCreateTrafficPolicyInstance = "CreateTrafficPolicyInstance"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateTrafficPolicyInstanceRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the CreateTrafficPolicyInstance operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See CreateTrafficPolicyInstance for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the CreateTrafficPolicyInstance method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the CreateTrafficPolicyInstanceRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.CreateTrafficPolicyInstanceRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/CreateTrafficPolicyInstance
0000000000000000000000000000000000000000;;	func (c *Route53) CreateTrafficPolicyInstanceRequest(input *CreateTrafficPolicyInstanceInput) (req *request.Request, output *CreateTrafficPolicyInstanceOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opCreateTrafficPolicyInstance,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/trafficpolicyinstance",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &CreateTrafficPolicyInstanceInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &CreateTrafficPolicyInstanceOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateTrafficPolicyInstance API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creates resource record sets in a specified hosted zone based on the settings
0000000000000000000000000000000000000000;;	// in a specified traffic policy version. In addition, CreateTrafficPolicyInstance
0000000000000000000000000000000000000000;;	// associates the resource record sets with a specified domain name (such as
0000000000000000000000000000000000000000;;	// example.com) or subdomain name (such as www.example.com). Amazon Route 53
0000000000000000000000000000000000000000;;	// responds to DNS queries for the domain or subdomain name by using the resource
0000000000000000000000000000000000000000;;	// record sets that CreateTrafficPolicyInstance created.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Send a POST request to the /2013-04-01/trafficpolicyinstance resource. The
0000000000000000000000000000000000000000;;	// request body must include a document with a CreateTrafficPolicyRequest element.
0000000000000000000000000000000000000000;;	// The response returns the CreateTrafficPolicyInstanceResponse element, which
0000000000000000000000000000000000000000;;	// contains information about the traffic policy instance.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation CreateTrafficPolicyInstance for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * NoSuchHostedZone
0000000000000000000000000000000000000000;;	//   No hosted zone exists with the ID that you specified.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * InvalidInput
0000000000000000000000000000000000000000;;	//   The input is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * TooManyTrafficPolicyInstances
0000000000000000000000000000000000000000;;	//   You've created the maximum number of traffic policy instances that can be
0000000000000000000000000000000000000000;;	//   created for the current AWS account. You can request an increase to the limit
0000000000000000000000000000000000000000;;	//   on the Contact Us (http://aws.amazon.com/route53-request/) page.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * NoSuchTrafficPolicy
0000000000000000000000000000000000000000;;	//   No traffic policy exists with the specified ID.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * TrafficPolicyInstanceAlreadyExists
0000000000000000000000000000000000000000;;	//   Traffic policy instance with given Id already exists.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/CreateTrafficPolicyInstance
0000000000000000000000000000000000000000;;	func (c *Route53) CreateTrafficPolicyInstance(input *CreateTrafficPolicyInstanceInput) (*CreateTrafficPolicyInstanceOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.CreateTrafficPolicyInstanceRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opCreateTrafficPolicyVersion = "CreateTrafficPolicyVersion"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateTrafficPolicyVersionRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the CreateTrafficPolicyVersion operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See CreateTrafficPolicyVersion for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the CreateTrafficPolicyVersion method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the CreateTrafficPolicyVersionRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.CreateTrafficPolicyVersionRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/CreateTrafficPolicyVersion
0000000000000000000000000000000000000000;;	func (c *Route53) CreateTrafficPolicyVersionRequest(input *CreateTrafficPolicyVersionInput) (req *request.Request, output *CreateTrafficPolicyVersionOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opCreateTrafficPolicyVersion,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/trafficpolicy/{Id}",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &CreateTrafficPolicyVersionInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &CreateTrafficPolicyVersionOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateTrafficPolicyVersion API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creates a new version of an existing traffic policy. When you create a new
0000000000000000000000000000000000000000;;	// version of a traffic policy, you specify the ID of the traffic policy that
0000000000000000000000000000000000000000;;	// you want to update and a JSON-formatted document that describes the new version.
0000000000000000000000000000000000000000;;	// You use traffic policies to create multiple DNS resource record sets for
0000000000000000000000000000000000000000;;	// one domain name (such as example.com) or one subdomain name (such as www.example.com).
0000000000000000000000000000000000000000;;	// You can create a maximum of 1000 versions of a traffic policy. If you reach
0000000000000000000000000000000000000000;;	// the limit and need to create another version, you'll need to start a new
0000000000000000000000000000000000000000;;	// traffic policy.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Send a POST request to the /2013-04-01/trafficpolicy/ resource. The request
0000000000000000000000000000000000000000;;	// body includes a document with a CreateTrafficPolicyVersionRequest element.
0000000000000000000000000000000000000000;;	// The response returns the CreateTrafficPolicyVersionResponse element, which
0000000000000000000000000000000000000000;;	// contains information about the new version of the traffic policy.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation CreateTrafficPolicyVersion for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * NoSuchTrafficPolicy
0000000000000000000000000000000000000000;;	//   No traffic policy exists with the specified ID.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * InvalidInput
0000000000000000000000000000000000000000;;	//   The input is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * ConcurrentModification
0000000000000000000000000000000000000000;;	//   Another user submitted a request to update the object at the same time that
0000000000000000000000000000000000000000;;	//   you did. Retry the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * InvalidTrafficPolicyDocument
0000000000000000000000000000000000000000;;	//   The format of the traffic policy document that you specified in the Document
0000000000000000000000000000000000000000;;	//   element is invalid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/CreateTrafficPolicyVersion
0000000000000000000000000000000000000000;;	func (c *Route53) CreateTrafficPolicyVersion(input *CreateTrafficPolicyVersionInput) (*CreateTrafficPolicyVersionOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.CreateTrafficPolicyVersionRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opCreateVPCAssociationAuthorization = "CreateVPCAssociationAuthorization"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateVPCAssociationAuthorizationRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the CreateVPCAssociationAuthorization operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See CreateVPCAssociationAuthorization for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the CreateVPCAssociationAuthorization method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the CreateVPCAssociationAuthorizationRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.CreateVPCAssociationAuthorizationRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/CreateVPCAssociationAuthorization
0000000000000000000000000000000000000000;;	func (c *Route53) CreateVPCAssociationAuthorizationRequest(input *CreateVPCAssociationAuthorizationInput) (req *request.Request, output *CreateVPCAssociationAuthorizationOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opCreateVPCAssociationAuthorization,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/hostedzone/{Id}/authorizevpcassociation",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &CreateVPCAssociationAuthorizationInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &CreateVPCAssociationAuthorizationOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateVPCAssociationAuthorization API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Authorizes the AWS account that created a specified VPC to submit an AssociateVPCWithHostedZone
0000000000000000000000000000000000000000;;	// request to associate the VPC with a specified hosted zone that was created
0000000000000000000000000000000000000000;;	// by a different account. To submit a CreateVPCAssociationAuthorization request,
0000000000000000000000000000000000000000;;	// you must use the account that created the hosted zone. After you authorize
0000000000000000000000000000000000000000;;	// the association, use the account that created the VPC to submit an AssociateVPCWithHostedZone
0000000000000000000000000000000000000000;;	// request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If you want to associate multiple VPCs that you created by using one account
0000000000000000000000000000000000000000;;	// with a hosted zone that you created by using a different account, you must
0000000000000000000000000000000000000000;;	// submit one authorization request for each VPC.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Send a POST request to the /2013-04-01/hostedzone/hosted zone ID/authorizevpcassociation
0000000000000000000000000000000000000000;;	// resource. The request body must include a document with a CreateVPCAssociationAuthorizationRequest
0000000000000000000000000000000000000000;;	// element. The response contains information about the authorization.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation CreateVPCAssociationAuthorization for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * TooManyVPCAssociationAuthorizations
0000000000000000000000000000000000000000;;	//   You've created the maximum number of authorizations that can be created for
0000000000000000000000000000000000000000;;	//   the specified hosted zone. To authorize another VPC to be associated with
0000000000000000000000000000000000000000;;	//   the hosted zone, submit a DeleteVPCAssociationAuthorization request to remove
0000000000000000000000000000000000000000;;	//   an existing authorization. To get a list of existing authorizations, submit
0000000000000000000000000000000000000000;;	//   a ListVPCAssociationAuthorizations request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * NoSuchHostedZone
0000000000000000000000000000000000000000;;	//   No hosted zone exists with the ID that you specified.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * InvalidVPCId
0000000000000000000000000000000000000000;;	//   The VPC ID that you specified either isn't a valid ID or the current account
0000000000000000000000000000000000000000;;	//   is not authorized to access this VPC.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * InvalidInput
0000000000000000000000000000000000000000;;	//   The input is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/CreateVPCAssociationAuthorization
0000000000000000000000000000000000000000;;	func (c *Route53) CreateVPCAssociationAuthorization(input *CreateVPCAssociationAuthorizationInput) (*CreateVPCAssociationAuthorizationOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.CreateVPCAssociationAuthorizationRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDeleteHealthCheck = "DeleteHealthCheck"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteHealthCheckRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DeleteHealthCheck operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DeleteHealthCheck for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DeleteHealthCheck method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DeleteHealthCheckRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DeleteHealthCheckRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/DeleteHealthCheck
0000000000000000000000000000000000000000;;	func (c *Route53) DeleteHealthCheckRequest(input *DeleteHealthCheckInput) (req *request.Request, output *DeleteHealthCheckOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDeleteHealthCheck,
0000000000000000000000000000000000000000;;			HTTPMethod: "DELETE",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/healthcheck/{HealthCheckId}",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DeleteHealthCheckInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DeleteHealthCheckOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteHealthCheck API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Deletes a health check. Send a DELETE request to the /2013-04-01/healthcheck/health
0000000000000000000000000000000000000000;;	// check ID resource.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Amazon Route 53 does not prevent you from deleting a health check even if
0000000000000000000000000000000000000000;;	// the health check is associated with one or more resource record sets. If
0000000000000000000000000000000000000000;;	// you delete a health check and you don't update the associated resource record
0000000000000000000000000000000000000000;;	// sets, the future status of the health check can't be predicted and may change.
0000000000000000000000000000000000000000;;	// This will affect the routing of DNS queries for your DNS failover configuration.
0000000000000000000000000000000000000000;;	// For more information, see Replacing and Deleting Health Checks (http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/health-checks-creating-deleting.html#health-checks-deleting.html)
0000000000000000000000000000000000000000;;	// in the Amazon Route 53 Developer Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation DeleteHealthCheck for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * NoSuchHealthCheck
0000000000000000000000000000000000000000;;	//   No health check exists with the ID that you specified in the DeleteHealthCheck
0000000000000000000000000000000000000000;;	//   request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * HealthCheckInUse
0000000000000000000000000000000000000000;;	//   The health check ID for this health check is referenced in the HealthCheckId
0000000000000000000000000000000000000000;;	//   element in one of the resource record sets in one of the hosted zones that
0000000000000000000000000000000000000000;;	//   are owned by the current AWS account.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * InvalidInput
0000000000000000000000000000000000000000;;	//   The input is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/DeleteHealthCheck
0000000000000000000000000000000000000000;;	func (c *Route53) DeleteHealthCheck(input *DeleteHealthCheckInput) (*DeleteHealthCheckOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DeleteHealthCheckRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDeleteHostedZone = "DeleteHostedZone"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteHostedZoneRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DeleteHostedZone operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DeleteHostedZone for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DeleteHostedZone method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DeleteHostedZoneRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DeleteHostedZoneRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/DeleteHostedZone
0000000000000000000000000000000000000000;;	func (c *Route53) DeleteHostedZoneRequest(input *DeleteHostedZoneInput) (req *request.Request, output *DeleteHostedZoneOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDeleteHostedZone,
0000000000000000000000000000000000000000;;			HTTPMethod: "DELETE",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/hostedzone/{Id}",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DeleteHostedZoneInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DeleteHostedZoneOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteHostedZone API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Deletes a hosted zone. Send a DELETE request to the /Amazon Route 53 API
0000000000000000000000000000000000000000;;	// version/hostedzone/hosted zone ID resource.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Delete a hosted zone only if there are no resource record sets other than
0000000000000000000000000000000000000000;;	// the default SOA record and NS resource record sets. If the hosted zone contains
0000000000000000000000000000000000000000;;	// other resource record sets, delete them before deleting the hosted zone.
0000000000000000000000000000000000000000;;	// If you try to delete a hosted zone that contains other resource record sets,
0000000000000000000000000000000000000000;;	// Amazon Route 53 denies your request with a HostedZoneNotEmpty error. For
0000000000000000000000000000000000000000;;	// information about deleting records from your hosted zone, see ChangeResourceRecordSets.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation DeleteHostedZone for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * NoSuchHostedZone
0000000000000000000000000000000000000000;;	//   No hosted zone exists with the ID that you specified.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * HostedZoneNotEmpty
0000000000000000000000000000000000000000;;	//   The hosted zone contains resource records that are not SOA or NS records.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * PriorRequestNotComplete
0000000000000000000000000000000000000000;;	//   If Amazon Route 53 can't process a request before the next request arrives,
0000000000000000000000000000000000000000;;	//   it will reject subsequent requests for the same hosted zone and return an
0000000000000000000000000000000000000000;;	//   HTTP 400 error (Bad request). If Amazon Route 53 returns this error repeatedly
0000000000000000000000000000000000000000;;	//   for the same request, we recommend that you wait, in intervals of increasing
0000000000000000000000000000000000000000;;	//   duration, before you try the request again.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * InvalidInput
0000000000000000000000000000000000000000;;	//   The input is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * InvalidDomainName
0000000000000000000000000000000000000000;;	//   The specified domain name is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/DeleteHostedZone
0000000000000000000000000000000000000000;;	func (c *Route53) DeleteHostedZone(input *DeleteHostedZoneInput) (*DeleteHostedZoneOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DeleteHostedZoneRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDeleteReusableDelegationSet = "DeleteReusableDelegationSet"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteReusableDelegationSetRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DeleteReusableDelegationSet operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DeleteReusableDelegationSet for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DeleteReusableDelegationSet method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DeleteReusableDelegationSetRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DeleteReusableDelegationSetRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/DeleteReusableDelegationSet
0000000000000000000000000000000000000000;;	func (c *Route53) DeleteReusableDelegationSetRequest(input *DeleteReusableDelegationSetInput) (req *request.Request, output *DeleteReusableDelegationSetOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDeleteReusableDelegationSet,
0000000000000000000000000000000000000000;;			HTTPMethod: "DELETE",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/delegationset/{Id}",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DeleteReusableDelegationSetInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DeleteReusableDelegationSetOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteReusableDelegationSet API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Deletes a reusable delegation set. Send a DELETE request to the /2013-04-01/delegationset/delegation
0000000000000000000000000000000000000000;;	// set ID resource.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// You can delete a reusable delegation set only if there are no associated
0000000000000000000000000000000000000000;;	// hosted zones.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// To verify that the reusable delegation set is not associated with any hosted
0000000000000000000000000000000000000000;;	// zones, run the GetReusableDelegationSet action and specify the ID of the
0000000000000000000000000000000000000000;;	// reusable delegation set that you want to delete.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation DeleteReusableDelegationSet for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * NoSuchDelegationSet
0000000000000000000000000000000000000000;;	//   A reusable delegation set with the specified ID does not exist.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * DelegationSetInUse
0000000000000000000000000000000000000000;;	//   The specified delegation contains associated hosted zones which must be deleted
0000000000000000000000000000000000000000;;	//   before the reusable delegation set can be deleted.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * DelegationSetNotReusable
0000000000000000000000000000000000000000;;	//   A reusable delegation set with the specified ID does not exist.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * InvalidInput
0000000000000000000000000000000000000000;;	//   The input is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/DeleteReusableDelegationSet
0000000000000000000000000000000000000000;;	func (c *Route53) DeleteReusableDelegationSet(input *DeleteReusableDelegationSetInput) (*DeleteReusableDelegationSetOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DeleteReusableDelegationSetRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDeleteTrafficPolicy = "DeleteTrafficPolicy"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteTrafficPolicyRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DeleteTrafficPolicy operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DeleteTrafficPolicy for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DeleteTrafficPolicy method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DeleteTrafficPolicyRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DeleteTrafficPolicyRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/DeleteTrafficPolicy
0000000000000000000000000000000000000000;;	func (c *Route53) DeleteTrafficPolicyRequest(input *DeleteTrafficPolicyInput) (req *request.Request, output *DeleteTrafficPolicyOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDeleteTrafficPolicy,
0000000000000000000000000000000000000000;;			HTTPMethod: "DELETE",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/trafficpolicy/{Id}/{Version}",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DeleteTrafficPolicyInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DeleteTrafficPolicyOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteTrafficPolicy API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Deletes a traffic policy.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Send a DELETE request to the /Amazon Route 53 API version/trafficpolicy resource.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation DeleteTrafficPolicy for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * NoSuchTrafficPolicy
0000000000000000000000000000000000000000;;	//   No traffic policy exists with the specified ID.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * InvalidInput
0000000000000000000000000000000000000000;;	//   The input is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * TrafficPolicyInUse
0000000000000000000000000000000000000000;;	//   One or more traffic policy instances were created by using the specified
0000000000000000000000000000000000000000;;	//   traffic policy.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * ConcurrentModification
0000000000000000000000000000000000000000;;	//   Another user submitted a request to update the object at the same time that
0000000000000000000000000000000000000000;;	//   you did. Retry the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/DeleteTrafficPolicy
0000000000000000000000000000000000000000;;	func (c *Route53) DeleteTrafficPolicy(input *DeleteTrafficPolicyInput) (*DeleteTrafficPolicyOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DeleteTrafficPolicyRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDeleteTrafficPolicyInstance = "DeleteTrafficPolicyInstance"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteTrafficPolicyInstanceRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DeleteTrafficPolicyInstance operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DeleteTrafficPolicyInstance for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DeleteTrafficPolicyInstance method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DeleteTrafficPolicyInstanceRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DeleteTrafficPolicyInstanceRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/DeleteTrafficPolicyInstance
0000000000000000000000000000000000000000;;	func (c *Route53) DeleteTrafficPolicyInstanceRequest(input *DeleteTrafficPolicyInstanceInput) (req *request.Request, output *DeleteTrafficPolicyInstanceOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDeleteTrafficPolicyInstance,
0000000000000000000000000000000000000000;;			HTTPMethod: "DELETE",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/trafficpolicyinstance/{Id}",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DeleteTrafficPolicyInstanceInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DeleteTrafficPolicyInstanceOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteTrafficPolicyInstance API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Deletes a traffic policy instance and all of the resource record sets that
0000000000000000000000000000000000000000;;	// Amazon Route 53 created when you created the instance.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Send a DELETE request to the /Amazon Route 53 API version/trafficpolicy/traffic
0000000000000000000000000000000000000000;;	// policy instance ID resource.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// In the Amazon Route 53 console, traffic policy instances are known as policy
0000000000000000000000000000000000000000;;	// records.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation DeleteTrafficPolicyInstance for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * NoSuchTrafficPolicyInstance
0000000000000000000000000000000000000000;;	//   No traffic policy instance exists with the specified ID.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * InvalidInput
0000000000000000000000000000000000000000;;	//   The input is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * PriorRequestNotComplete
0000000000000000000000000000000000000000;;	//   If Amazon Route 53 can't process a request before the next request arrives,
0000000000000000000000000000000000000000;;	//   it will reject subsequent requests for the same hosted zone and return an
0000000000000000000000000000000000000000;;	//   HTTP 400 error (Bad request). If Amazon Route 53 returns this error repeatedly
0000000000000000000000000000000000000000;;	//   for the same request, we recommend that you wait, in intervals of increasing
0000000000000000000000000000000000000000;;	//   duration, before you try the request again.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/DeleteTrafficPolicyInstance
0000000000000000000000000000000000000000;;	func (c *Route53) DeleteTrafficPolicyInstance(input *DeleteTrafficPolicyInstanceInput) (*DeleteTrafficPolicyInstanceOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DeleteTrafficPolicyInstanceRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDeleteVPCAssociationAuthorization = "DeleteVPCAssociationAuthorization"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteVPCAssociationAuthorizationRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DeleteVPCAssociationAuthorization operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DeleteVPCAssociationAuthorization for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DeleteVPCAssociationAuthorization method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DeleteVPCAssociationAuthorizationRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DeleteVPCAssociationAuthorizationRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/DeleteVPCAssociationAuthorization
0000000000000000000000000000000000000000;;	func (c *Route53) DeleteVPCAssociationAuthorizationRequest(input *DeleteVPCAssociationAuthorizationInput) (req *request.Request, output *DeleteVPCAssociationAuthorizationOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDeleteVPCAssociationAuthorization,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/hostedzone/{Id}/deauthorizevpcassociation",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DeleteVPCAssociationAuthorizationInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DeleteVPCAssociationAuthorizationOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteVPCAssociationAuthorization API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Removes authorization to submit an AssociateVPCWithHostedZone request to
0000000000000000000000000000000000000000;;	// associate a specified VPC with a hosted zone that was created by a different
0000000000000000000000000000000000000000;;	// account. You must use the account that created the hosted zone to submit
0000000000000000000000000000000000000000;;	// a DeleteVPCAssociationAuthorization request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Sending this request only prevents the AWS account that created the VPC from
0000000000000000000000000000000000000000;;	// associating the VPC with the Amazon Route 53 hosted zone in the future. If
0000000000000000000000000000000000000000;;	// the VPC is already associated with the hosted zone, DeleteVPCAssociationAuthorization
0000000000000000000000000000000000000000;;	// won't disassociate the VPC from the hosted zone. If you want to delete an
0000000000000000000000000000000000000000;;	// existing association, use DisassociateVPCFromHostedZone.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Send a DELETE request to the /2013-04-01/hostedzone/hosted zone ID/deauthorizevpcassociation
0000000000000000000000000000000000000000;;	// resource. The request body must include a document with a DeleteVPCAssociationAuthorizationRequest
0000000000000000000000000000000000000000;;	// element.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation DeleteVPCAssociationAuthorization for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * VPCAssociationAuthorizationNotFound
0000000000000000000000000000000000000000;;	//   The VPC that you specified is not authorized to be associated with the hosted
0000000000000000000000000000000000000000;;	//   zone.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * NoSuchHostedZone
0000000000000000000000000000000000000000;;	//   No hosted zone exists with the ID that you specified.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * InvalidVPCId
0000000000000000000000000000000000000000;;	//   The VPC ID that you specified either isn't a valid ID or the current account
0000000000000000000000000000000000000000;;	//   is not authorized to access this VPC.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * InvalidInput
0000000000000000000000000000000000000000;;	//   The input is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/DeleteVPCAssociationAuthorization
0000000000000000000000000000000000000000;;	func (c *Route53) DeleteVPCAssociationAuthorization(input *DeleteVPCAssociationAuthorizationInput) (*DeleteVPCAssociationAuthorizationOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DeleteVPCAssociationAuthorizationRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDisassociateVPCFromHostedZone = "DisassociateVPCFromHostedZone"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DisassociateVPCFromHostedZoneRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DisassociateVPCFromHostedZone operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DisassociateVPCFromHostedZone for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DisassociateVPCFromHostedZone method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DisassociateVPCFromHostedZoneRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DisassociateVPCFromHostedZoneRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/DisassociateVPCFromHostedZone
0000000000000000000000000000000000000000;;	func (c *Route53) DisassociateVPCFromHostedZoneRequest(input *DisassociateVPCFromHostedZoneInput) (req *request.Request, output *DisassociateVPCFromHostedZoneOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDisassociateVPCFromHostedZone,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/hostedzone/{Id}/disassociatevpc",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DisassociateVPCFromHostedZoneInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DisassociateVPCFromHostedZoneOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DisassociateVPCFromHostedZone API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Disassociates a VPC from a Amazon Route 53 private hosted zone.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// You can't disassociate the last VPC from a private hosted zone.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Send a POST request to the /2013-04-01/hostedzone/hosted zone ID/disassociatevpc
0000000000000000000000000000000000000000;;	// resource. The request body must include a document with a DisassociateVPCFromHostedZoneRequest
0000000000000000000000000000000000000000;;	// element. The response includes a DisassociateVPCFromHostedZoneResponse element.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// You can't disassociate a VPC from a private hosted zone when only one VPC
0000000000000000000000000000000000000000;;	// is associated with the hosted zone. You also can't convert a private hosted
0000000000000000000000000000000000000000;;	// zone into a public hosted zone.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation DisassociateVPCFromHostedZone for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * NoSuchHostedZone
0000000000000000000000000000000000000000;;	//   No hosted zone exists with the ID that you specified.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * InvalidVPCId
0000000000000000000000000000000000000000;;	//   The VPC ID that you specified either isn't a valid ID or the current account
0000000000000000000000000000000000000000;;	//   is not authorized to access this VPC.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * VPCAssociationNotFound
0000000000000000000000000000000000000000;;	//   The specified VPC and hosted zone are not currently associated.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * LastVPCAssociation
0000000000000000000000000000000000000000;;	//   The VPC that you're trying to disassociate from the private hosted zone is
0000000000000000000000000000000000000000;;	//   the last VPC that is associated with the hosted zone. Amazon Route 53 doesn't
0000000000000000000000000000000000000000;;	//   support disassociating the last VPC from a hosted zone.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * InvalidInput
0000000000000000000000000000000000000000;;	//   The input is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/DisassociateVPCFromHostedZone
0000000000000000000000000000000000000000;;	func (c *Route53) DisassociateVPCFromHostedZone(input *DisassociateVPCFromHostedZoneInput) (*DisassociateVPCFromHostedZoneOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DisassociateVPCFromHostedZoneRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opGetChange = "GetChange"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetChangeRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the GetChange operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See GetChange for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the GetChange method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the GetChangeRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.GetChangeRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetChange
0000000000000000000000000000000000000000;;	func (c *Route53) GetChangeRequest(input *GetChangeInput) (req *request.Request, output *GetChangeOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opGetChange,
0000000000000000000000000000000000000000;;			HTTPMethod: "GET",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/change/{Id}",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &GetChangeInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &GetChangeOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetChange API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns the current status of a change batch request. The status is one of
0000000000000000000000000000000000000000;;	// the following values:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * PENDING indicates that the changes in this request have not replicated
0000000000000000000000000000000000000000;;	//    to all Amazon Route 53 DNS servers. This is the initial status of all
0000000000000000000000000000000000000000;;	//    change batch requests.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * INSYNC indicates that the changes have replicated to all Amazon Route
0000000000000000000000000000000000000000;;	//    53 DNS servers.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation GetChange for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * NoSuchChange
0000000000000000000000000000000000000000;;	//   A change with the specified change ID does not exist.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * InvalidInput
0000000000000000000000000000000000000000;;	//   The input is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetChange
0000000000000000000000000000000000000000;;	func (c *Route53) GetChange(input *GetChangeInput) (*GetChangeOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.GetChangeRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opGetCheckerIpRanges = "GetCheckerIpRanges"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetCheckerIpRangesRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the GetCheckerIpRanges operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See GetCheckerIpRanges for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the GetCheckerIpRanges method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the GetCheckerIpRangesRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.GetCheckerIpRangesRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetCheckerIpRanges
0000000000000000000000000000000000000000;;	func (c *Route53) GetCheckerIpRangesRequest(input *GetCheckerIpRangesInput) (req *request.Request, output *GetCheckerIpRangesOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opGetCheckerIpRanges,
0000000000000000000000000000000000000000;;			HTTPMethod: "GET",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/checkeripranges",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &GetCheckerIpRangesInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &GetCheckerIpRangesOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetCheckerIpRanges API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Retrieves a list of the IP ranges used by Amazon Route 53 health checkers
0000000000000000000000000000000000000000;;	// to check the health of your resources. Send a GET request to the /Amazon
0000000000000000000000000000000000000000;;	// Route 53 API version/checkeripranges resource. Use these IP addresses to
0000000000000000000000000000000000000000;;	// configure router and firewall rules to allow health checkers to check the
0000000000000000000000000000000000000000;;	// health of your resources.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation GetCheckerIpRanges for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetCheckerIpRanges
0000000000000000000000000000000000000000;;	func (c *Route53) GetCheckerIpRanges(input *GetCheckerIpRangesInput) (*GetCheckerIpRangesOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.GetCheckerIpRangesRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opGetGeoLocation = "GetGeoLocation"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetGeoLocationRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the GetGeoLocation operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See GetGeoLocation for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the GetGeoLocation method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the GetGeoLocationRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.GetGeoLocationRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetGeoLocation
0000000000000000000000000000000000000000;;	func (c *Route53) GetGeoLocationRequest(input *GetGeoLocationInput) (req *request.Request, output *GetGeoLocationOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opGetGeoLocation,
0000000000000000000000000000000000000000;;			HTTPMethod: "GET",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/geolocation",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &GetGeoLocationInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &GetGeoLocationOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetGeoLocation API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Retrieves a single geo location. Send a GET request to the /2013-04-01/geolocation
0000000000000000000000000000000000000000;;	// resource with one of these options: continentcode | countrycode | countrycode
0000000000000000000000000000000000000000;;	// and subdivisioncode.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation GetGeoLocation for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * NoSuchGeoLocation
0000000000000000000000000000000000000000;;	//   Amazon Route 53 doesn't support the specified geolocation.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * InvalidInput
0000000000000000000000000000000000000000;;	//   The input is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetGeoLocation
0000000000000000000000000000000000000000;;	func (c *Route53) GetGeoLocation(input *GetGeoLocationInput) (*GetGeoLocationOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.GetGeoLocationRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opGetHealthCheck = "GetHealthCheck"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetHealthCheckRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the GetHealthCheck operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See GetHealthCheck for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the GetHealthCheck method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the GetHealthCheckRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.GetHealthCheckRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetHealthCheck
0000000000000000000000000000000000000000;;	func (c *Route53) GetHealthCheckRequest(input *GetHealthCheckInput) (req *request.Request, output *GetHealthCheckOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opGetHealthCheck,
0000000000000000000000000000000000000000;;			HTTPMethod: "GET",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/healthcheck/{HealthCheckId}",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &GetHealthCheckInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &GetHealthCheckOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetHealthCheck API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Gets information about a specified health check. Send a GET request to the
0000000000000000000000000000000000000000;;	// /2013-04-01/healthcheck/health check ID resource. For more information about
0000000000000000000000000000000000000000;;	// using the console to perform this operation, see Amazon Route 53 Health Checks
0000000000000000000000000000000000000000;;	// and DNS Failover (http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover.html)
0000000000000000000000000000000000000000;;	// in the Amazon Route 53 Developer Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation GetHealthCheck for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * NoSuchHealthCheck
0000000000000000000000000000000000000000;;	//   No health check exists with the ID that you specified in the DeleteHealthCheck
0000000000000000000000000000000000000000;;	//   request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * InvalidInput
0000000000000000000000000000000000000000;;	//   The input is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * IncompatibleVersion
0000000000000000000000000000000000000000;;	//   The resource you are trying to access is unsupported on this Amazon Route
0000000000000000000000000000000000000000;;	//   53 endpoint. Please consider using a newer endpoint or a tool that does so.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetHealthCheck
0000000000000000000000000000000000000000;;	func (c *Route53) GetHealthCheck(input *GetHealthCheckInput) (*GetHealthCheckOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.GetHealthCheckRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opGetHealthCheckCount = "GetHealthCheckCount"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetHealthCheckCountRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the GetHealthCheckCount operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See GetHealthCheckCount for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the GetHealthCheckCount method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the GetHealthCheckCountRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.GetHealthCheckCountRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetHealthCheckCount
0000000000000000000000000000000000000000;;	func (c *Route53) GetHealthCheckCountRequest(input *GetHealthCheckCountInput) (req *request.Request, output *GetHealthCheckCountOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opGetHealthCheckCount,
0000000000000000000000000000000000000000;;			HTTPMethod: "GET",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/healthcheckcount",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &GetHealthCheckCountInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &GetHealthCheckCountOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetHealthCheckCount API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// To retrieve a count of all your health checks, send a GET request to the
0000000000000000000000000000000000000000;;	// /2013-04-01/healthcheckcount resource.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation GetHealthCheckCount for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetHealthCheckCount
0000000000000000000000000000000000000000;;	func (c *Route53) GetHealthCheckCount(input *GetHealthCheckCountInput) (*GetHealthCheckCountOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.GetHealthCheckCountRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opGetHealthCheckLastFailureReason = "GetHealthCheckLastFailureReason"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetHealthCheckLastFailureReasonRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the GetHealthCheckLastFailureReason operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See GetHealthCheckLastFailureReason for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the GetHealthCheckLastFailureReason method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the GetHealthCheckLastFailureReasonRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.GetHealthCheckLastFailureReasonRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetHealthCheckLastFailureReason
0000000000000000000000000000000000000000;;	func (c *Route53) GetHealthCheckLastFailureReasonRequest(input *GetHealthCheckLastFailureReasonInput) (req *request.Request, output *GetHealthCheckLastFailureReasonOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opGetHealthCheckLastFailureReason,
0000000000000000000000000000000000000000;;			HTTPMethod: "GET",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/healthcheck/{HealthCheckId}/lastfailurereason",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &GetHealthCheckLastFailureReasonInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &GetHealthCheckLastFailureReasonOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetHealthCheckLastFailureReason API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If you want to learn why a health check is currently failing or why it failed
0000000000000000000000000000000000000000;;	// most recently (if at all), you can get the failure reason for the most recent
0000000000000000000000000000000000000000;;	// failure. Send a GET request to the /Amazon Route 53 API version/healthcheck/health
0000000000000000000000000000000000000000;;	// check ID/lastfailurereason resource.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation GetHealthCheckLastFailureReason for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * NoSuchHealthCheck
0000000000000000000000000000000000000000;;	//   No health check exists with the ID that you specified in the DeleteHealthCheck
0000000000000000000000000000000000000000;;	//   request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * InvalidInput
0000000000000000000000000000000000000000;;	//   The input is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetHealthCheckLastFailureReason
0000000000000000000000000000000000000000;;	func (c *Route53) GetHealthCheckLastFailureReason(input *GetHealthCheckLastFailureReasonInput) (*GetHealthCheckLastFailureReasonOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.GetHealthCheckLastFailureReasonRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opGetHealthCheckStatus = "GetHealthCheckStatus"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetHealthCheckStatusRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the GetHealthCheckStatus operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See GetHealthCheckStatus for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the GetHealthCheckStatus method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the GetHealthCheckStatusRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.GetHealthCheckStatusRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetHealthCheckStatus
0000000000000000000000000000000000000000;;	func (c *Route53) GetHealthCheckStatusRequest(input *GetHealthCheckStatusInput) (req *request.Request, output *GetHealthCheckStatusOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opGetHealthCheckStatus,
0000000000000000000000000000000000000000;;			HTTPMethod: "GET",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/healthcheck/{HealthCheckId}/status",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &GetHealthCheckStatusInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &GetHealthCheckStatusOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetHealthCheckStatus API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Gets status of a specified health check. Send a GET request to the /2013-04-01/healthcheck/health
0000000000000000000000000000000000000000;;	// check ID/status resource. You can use this call to get a health check's current
0000000000000000000000000000000000000000;;	// status.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation GetHealthCheckStatus for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * NoSuchHealthCheck
0000000000000000000000000000000000000000;;	//   No health check exists with the ID that you specified in the DeleteHealthCheck
0000000000000000000000000000000000000000;;	//   request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * InvalidInput
0000000000000000000000000000000000000000;;	//   The input is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetHealthCheckStatus
0000000000000000000000000000000000000000;;	func (c *Route53) GetHealthCheckStatus(input *GetHealthCheckStatusInput) (*GetHealthCheckStatusOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.GetHealthCheckStatusRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opGetHostedZone = "GetHostedZone"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetHostedZoneRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the GetHostedZone operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See GetHostedZone for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the GetHostedZone method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the GetHostedZoneRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.GetHostedZoneRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetHostedZone
0000000000000000000000000000000000000000;;	func (c *Route53) GetHostedZoneRequest(input *GetHostedZoneInput) (req *request.Request, output *GetHostedZoneOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opGetHostedZone,
0000000000000000000000000000000000000000;;			HTTPMethod: "GET",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/hostedzone/{Id}",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &GetHostedZoneInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &GetHostedZoneOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetHostedZone API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Retrieves the delegation set for a hosted zone, including the four name servers
0000000000000000000000000000000000000000;;	// assigned to the hosted zone. Send a GET request to the /Amazon Route 53 API
0000000000000000000000000000000000000000;;	// version/hostedzone/hosted zone ID resource.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation GetHostedZone for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * NoSuchHostedZone
0000000000000000000000000000000000000000;;	//   No hosted zone exists with the ID that you specified.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * InvalidInput
0000000000000000000000000000000000000000;;	//   The input is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetHostedZone
0000000000000000000000000000000000000000;;	func (c *Route53) GetHostedZone(input *GetHostedZoneInput) (*GetHostedZoneOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.GetHostedZoneRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opGetHostedZoneCount = "GetHostedZoneCount"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetHostedZoneCountRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the GetHostedZoneCount operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See GetHostedZoneCount for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the GetHostedZoneCount method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the GetHostedZoneCountRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.GetHostedZoneCountRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetHostedZoneCount
0000000000000000000000000000000000000000;;	func (c *Route53) GetHostedZoneCountRequest(input *GetHostedZoneCountInput) (req *request.Request, output *GetHostedZoneCountOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opGetHostedZoneCount,
0000000000000000000000000000000000000000;;			HTTPMethod: "GET",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/hostedzonecount",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &GetHostedZoneCountInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &GetHostedZoneCountOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetHostedZoneCount API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Retrieves a count of all your hosted zones. Send a GET request to the /2013-04-01/hostedzonecount
0000000000000000000000000000000000000000;;	// resource.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation GetHostedZoneCount for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * InvalidInput
0000000000000000000000000000000000000000;;	//   The input is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetHostedZoneCount
0000000000000000000000000000000000000000;;	func (c *Route53) GetHostedZoneCount(input *GetHostedZoneCountInput) (*GetHostedZoneCountOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.GetHostedZoneCountRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opGetReusableDelegationSet = "GetReusableDelegationSet"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetReusableDelegationSetRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the GetReusableDelegationSet operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See GetReusableDelegationSet for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the GetReusableDelegationSet method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the GetReusableDelegationSetRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.GetReusableDelegationSetRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetReusableDelegationSet
0000000000000000000000000000000000000000;;	func (c *Route53) GetReusableDelegationSetRequest(input *GetReusableDelegationSetInput) (req *request.Request, output *GetReusableDelegationSetOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opGetReusableDelegationSet,
0000000000000000000000000000000000000000;;			HTTPMethod: "GET",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/delegationset/{Id}",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &GetReusableDelegationSetInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &GetReusableDelegationSetOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetReusableDelegationSet API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Retrieves the reusable delegation set. Send a GET request to the /2013-04-01/delegationset/delegation
0000000000000000000000000000000000000000;;	// set ID resource.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation GetReusableDelegationSet for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * NoSuchDelegationSet
0000000000000000000000000000000000000000;;	//   A reusable delegation set with the specified ID does not exist.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * DelegationSetNotReusable
0000000000000000000000000000000000000000;;	//   A reusable delegation set with the specified ID does not exist.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * InvalidInput
0000000000000000000000000000000000000000;;	//   The input is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetReusableDelegationSet
0000000000000000000000000000000000000000;;	func (c *Route53) GetReusableDelegationSet(input *GetReusableDelegationSetInput) (*GetReusableDelegationSetOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.GetReusableDelegationSetRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opGetTrafficPolicy = "GetTrafficPolicy"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetTrafficPolicyRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the GetTrafficPolicy operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See GetTrafficPolicy for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the GetTrafficPolicy method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the GetTrafficPolicyRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.GetTrafficPolicyRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetTrafficPolicy
0000000000000000000000000000000000000000;;	func (c *Route53) GetTrafficPolicyRequest(input *GetTrafficPolicyInput) (req *request.Request, output *GetTrafficPolicyOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opGetTrafficPolicy,
0000000000000000000000000000000000000000;;			HTTPMethod: "GET",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/trafficpolicy/{Id}/{Version}",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &GetTrafficPolicyInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &GetTrafficPolicyOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetTrafficPolicy API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Gets information about a specific traffic policy version.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Send a GET request to the /Amazon Route 53 API version/trafficpolicy resource.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation GetTrafficPolicy for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * NoSuchTrafficPolicy
0000000000000000000000000000000000000000;;	//   No traffic policy exists with the specified ID.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * InvalidInput
0000000000000000000000000000000000000000;;	//   The input is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetTrafficPolicy
0000000000000000000000000000000000000000;;	func (c *Route53) GetTrafficPolicy(input *GetTrafficPolicyInput) (*GetTrafficPolicyOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.GetTrafficPolicyRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opGetTrafficPolicyInstance = "GetTrafficPolicyInstance"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetTrafficPolicyInstanceRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the GetTrafficPolicyInstance operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See GetTrafficPolicyInstance for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the GetTrafficPolicyInstance method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the GetTrafficPolicyInstanceRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.GetTrafficPolicyInstanceRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetTrafficPolicyInstance
0000000000000000000000000000000000000000;;	func (c *Route53) GetTrafficPolicyInstanceRequest(input *GetTrafficPolicyInstanceInput) (req *request.Request, output *GetTrafficPolicyInstanceOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opGetTrafficPolicyInstance,
0000000000000000000000000000000000000000;;			HTTPMethod: "GET",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/trafficpolicyinstance/{Id}",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &GetTrafficPolicyInstanceInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &GetTrafficPolicyInstanceOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetTrafficPolicyInstance API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Gets information about a specified traffic policy instance.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Send a GET request to the /Amazon Route 53 API version/trafficpolicyinstance
0000000000000000000000000000000000000000;;	// resource.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// After you submit a CreateTrafficPolicyInstance or an UpdateTrafficPolicyInstance
0000000000000000000000000000000000000000;;	// request, there's a brief delay while Amazon Route 53 creates the resource
0000000000000000000000000000000000000000;;	// record sets that are specified in the traffic policy definition. For more
0000000000000000000000000000000000000000;;	// information, see the State response element.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// In the Amazon Route 53 console, traffic policy instances are known as policy
0000000000000000000000000000000000000000;;	// records.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation GetTrafficPolicyInstance for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * NoSuchTrafficPolicyInstance
0000000000000000000000000000000000000000;;	//   No traffic policy instance exists with the specified ID.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * InvalidInput
0000000000000000000000000000000000000000;;	//   The input is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetTrafficPolicyInstance
0000000000000000000000000000000000000000;;	func (c *Route53) GetTrafficPolicyInstance(input *GetTrafficPolicyInstanceInput) (*GetTrafficPolicyInstanceOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.GetTrafficPolicyInstanceRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opGetTrafficPolicyInstanceCount = "GetTrafficPolicyInstanceCount"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetTrafficPolicyInstanceCountRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the GetTrafficPolicyInstanceCount operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See GetTrafficPolicyInstanceCount for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the GetTrafficPolicyInstanceCount method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the GetTrafficPolicyInstanceCountRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.GetTrafficPolicyInstanceCountRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetTrafficPolicyInstanceCount
0000000000000000000000000000000000000000;;	func (c *Route53) GetTrafficPolicyInstanceCountRequest(input *GetTrafficPolicyInstanceCountInput) (req *request.Request, output *GetTrafficPolicyInstanceCountOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opGetTrafficPolicyInstanceCount,
0000000000000000000000000000000000000000;;			HTTPMethod: "GET",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/trafficpolicyinstancecount",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &GetTrafficPolicyInstanceCountInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &GetTrafficPolicyInstanceCountOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetTrafficPolicyInstanceCount API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Gets the number of traffic policy instances that are associated with the
0000000000000000000000000000000000000000;;	// current AWS account.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// To get the number of traffic policy instances, send a GET request to the
0000000000000000000000000000000000000000;;	// /2013-04-01/trafficpolicyinstancecount resource.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation GetTrafficPolicyInstanceCount for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetTrafficPolicyInstanceCount
0000000000000000000000000000000000000000;;	func (c *Route53) GetTrafficPolicyInstanceCount(input *GetTrafficPolicyInstanceCountInput) (*GetTrafficPolicyInstanceCountOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.GetTrafficPolicyInstanceCountRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opListGeoLocations = "ListGeoLocations"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListGeoLocationsRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ListGeoLocations operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ListGeoLocations for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ListGeoLocations method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ListGeoLocationsRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ListGeoLocationsRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListGeoLocations
0000000000000000000000000000000000000000;;	func (c *Route53) ListGeoLocationsRequest(input *ListGeoLocationsInput) (req *request.Request, output *ListGeoLocationsOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opListGeoLocations,
0000000000000000000000000000000000000000;;			HTTPMethod: "GET",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/geolocations",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ListGeoLocationsInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ListGeoLocationsOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListGeoLocations API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Retrieves a list of supported geo locations. Send a GET request to the /2013-04-01/geolocations
0000000000000000000000000000000000000000;;	// resource. The response to this request includes a GeoLocationDetailsList
0000000000000000000000000000000000000000;;	// element for each location that Amazon Route 53 supports.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Countries are listed first, and continents are listed last. If Amazon Route
0000000000000000000000000000000000000000;;	// 53 supports subdivisions for a country (for example, states or provinces),
0000000000000000000000000000000000000000;;	// the subdivisions for that country are listed in alphabetical order immediately
0000000000000000000000000000000000000000;;	// after the corresponding country.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation ListGeoLocations for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * InvalidInput
0000000000000000000000000000000000000000;;	//   The input is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListGeoLocations
0000000000000000000000000000000000000000;;	func (c *Route53) ListGeoLocations(input *ListGeoLocationsInput) (*ListGeoLocationsOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ListGeoLocationsRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opListHealthChecks = "ListHealthChecks"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListHealthChecksRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ListHealthChecks operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ListHealthChecks for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ListHealthChecks method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ListHealthChecksRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ListHealthChecksRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListHealthChecks
0000000000000000000000000000000000000000;;	func (c *Route53) ListHealthChecksRequest(input *ListHealthChecksInput) (req *request.Request, output *ListHealthChecksOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opListHealthChecks,
0000000000000000000000000000000000000000;;			HTTPMethod: "GET",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/healthcheck",
0000000000000000000000000000000000000000;;			Paginator: &request.Paginator{
0000000000000000000000000000000000000000;;				InputTokens:     []string{"Marker"},
0000000000000000000000000000000000000000;;				OutputTokens:    []string{"NextMarker"},
0000000000000000000000000000000000000000;;				LimitToken:      "MaxItems",
0000000000000000000000000000000000000000;;				TruncationToken: "IsTruncated",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ListHealthChecksInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ListHealthChecksOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListHealthChecks API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Retrieve a list of your health checks. Send a GET request to the /2013-04-01/healthcheck
0000000000000000000000000000000000000000;;	// resource. The response to this request includes a HealthChecks element with
0000000000000000000000000000000000000000;;	// zero or more HealthCheck child elements. By default, the list of health checks
0000000000000000000000000000000000000000;;	// is displayed on a single page. You can control the length of the page that
0000000000000000000000000000000000000000;;	// is displayed by using the MaxItems parameter. You can use the Marker parameter
0000000000000000000000000000000000000000;;	// to control the health check that the list begins with.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For information about listing health checks using the Amazon Route 53 console,
0000000000000000000000000000000000000000;;	// see Amazon Route 53 Health Checks and DNS Failover (http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover.html).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation ListHealthChecks for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * InvalidInput
0000000000000000000000000000000000000000;;	//   The input is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * IncompatibleVersion
0000000000000000000000000000000000000000;;	//   The resource you are trying to access is unsupported on this Amazon Route
0000000000000000000000000000000000000000;;	//   53 endpoint. Please consider using a newer endpoint or a tool that does so.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListHealthChecks
0000000000000000000000000000000000000000;;	func (c *Route53) ListHealthChecks(input *ListHealthChecksInput) (*ListHealthChecksOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ListHealthChecksRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListHealthChecksPages iterates over the pages of a ListHealthChecks operation,
0000000000000000000000000000000000000000;;	// calling the "fn" function with the response data for each page. To stop
0000000000000000000000000000000000000000;;	// iterating, return false from the fn function.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ListHealthChecks method for more information on how to use this operation.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: This operation can generate multiple requests to a service.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example iterating over at most 3 pages of a ListHealthChecks operation.
0000000000000000000000000000000000000000;;	//    pageNum := 0
0000000000000000000000000000000000000000;;	//    err := client.ListHealthChecksPages(params,
0000000000000000000000000000000000000000;;	//        func(page *ListHealthChecksOutput, lastPage bool) bool {
0000000000000000000000000000000000000000;;	//            pageNum++
0000000000000000000000000000000000000000;;	//            fmt.Println(page)
0000000000000000000000000000000000000000;;	//            return pageNum <= 3
0000000000000000000000000000000000000000;;	//        })
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	func (c *Route53) ListHealthChecksPages(input *ListHealthChecksInput, fn func(p *ListHealthChecksOutput, lastPage bool) (shouldContinue bool)) error {
0000000000000000000000000000000000000000;;		page, _ := c.ListHealthChecksRequest(input)
0000000000000000000000000000000000000000;;		page.Handlers.Build.PushBack(request.MakeAddToUserAgentFreeFormHandler("Paginator"))
0000000000000000000000000000000000000000;;		return page.EachPage(func(p interface{}, lastPage bool) bool {
0000000000000000000000000000000000000000;;			return fn(p.(*ListHealthChecksOutput), lastPage)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opListHostedZones = "ListHostedZones"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListHostedZonesRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ListHostedZones operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ListHostedZones for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ListHostedZones method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ListHostedZonesRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ListHostedZonesRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListHostedZones
0000000000000000000000000000000000000000;;	func (c *Route53) ListHostedZonesRequest(input *ListHostedZonesInput) (req *request.Request, output *ListHostedZonesOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opListHostedZones,
0000000000000000000000000000000000000000;;			HTTPMethod: "GET",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/hostedzone",
0000000000000000000000000000000000000000;;			Paginator: &request.Paginator{
0000000000000000000000000000000000000000;;				InputTokens:     []string{"Marker"},
0000000000000000000000000000000000000000;;				OutputTokens:    []string{"NextMarker"},
0000000000000000000000000000000000000000;;				LimitToken:      "MaxItems",
0000000000000000000000000000000000000000;;				TruncationToken: "IsTruncated",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ListHostedZonesInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ListHostedZonesOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListHostedZones API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// To retrieve a list of your public and private hosted zones, send a GET request
0000000000000000000000000000000000000000;;	// to the /2013-04-01/hostedzone resource. The response to this request includes
0000000000000000000000000000000000000000;;	// a HostedZones child element for each hosted zone created by the current AWS
0000000000000000000000000000000000000000;;	// account.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Amazon Route 53 returns a maximum of 100 items in each response. If you have
0000000000000000000000000000000000000000;;	// a lot of hosted zones, you can use the maxitems parameter to list them in
0000000000000000000000000000000000000000;;	// groups of up to 100. The response includes four values that help navigate
0000000000000000000000000000000000000000;;	// from one group of maxitems hosted zones to the next:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * MaxItems is the value specified for the maxitems parameter in the request
0000000000000000000000000000000000000000;;	//    that produced the current response.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * If the value of IsTruncated in the response is true, there are more
0000000000000000000000000000000000000000;;	//    hosted zones associated with the current AWS account.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * NextMarker is the hosted zone ID of the next hosted zone that is associated
0000000000000000000000000000000000000000;;	//    with the current AWS account. If you want to list more hosted zones, make
0000000000000000000000000000000000000000;;	//    another call to ListHostedZones, and specify the value of the NextMarker
0000000000000000000000000000000000000000;;	//    element in the marker parameter.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If IsTruncated is false, the NextMarker element is omitted from the response.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * If you're making the second or subsequent call to ListHostedZones, the
0000000000000000000000000000000000000000;;	//    Marker element matches the value that you specified in the marker parameter
0000000000000000000000000000000000000000;;	//    in the previous request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation ListHostedZones for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * InvalidInput
0000000000000000000000000000000000000000;;	//   The input is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * NoSuchDelegationSet
0000000000000000000000000000000000000000;;	//   A reusable delegation set with the specified ID does not exist.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * DelegationSetNotReusable
0000000000000000000000000000000000000000;;	//   A reusable delegation set with the specified ID does not exist.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListHostedZones
0000000000000000000000000000000000000000;;	func (c *Route53) ListHostedZones(input *ListHostedZonesInput) (*ListHostedZonesOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ListHostedZonesRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListHostedZonesPages iterates over the pages of a ListHostedZones operation,
0000000000000000000000000000000000000000;;	// calling the "fn" function with the response data for each page. To stop
0000000000000000000000000000000000000000;;	// iterating, return false from the fn function.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ListHostedZones method for more information on how to use this operation.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: This operation can generate multiple requests to a service.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example iterating over at most 3 pages of a ListHostedZones operation.
0000000000000000000000000000000000000000;;	//    pageNum := 0
0000000000000000000000000000000000000000;;	//    err := client.ListHostedZonesPages(params,
0000000000000000000000000000000000000000;;	//        func(page *ListHostedZonesOutput, lastPage bool) bool {
0000000000000000000000000000000000000000;;	//            pageNum++
0000000000000000000000000000000000000000;;	//            fmt.Println(page)
0000000000000000000000000000000000000000;;	//            return pageNum <= 3
0000000000000000000000000000000000000000;;	//        })
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	func (c *Route53) ListHostedZonesPages(input *ListHostedZonesInput, fn func(p *ListHostedZonesOutput, lastPage bool) (shouldContinue bool)) error {
0000000000000000000000000000000000000000;;		page, _ := c.ListHostedZonesRequest(input)
0000000000000000000000000000000000000000;;		page.Handlers.Build.PushBack(request.MakeAddToUserAgentFreeFormHandler("Paginator"))
0000000000000000000000000000000000000000;;		return page.EachPage(func(p interface{}, lastPage bool) bool {
0000000000000000000000000000000000000000;;			return fn(p.(*ListHostedZonesOutput), lastPage)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opListHostedZonesByName = "ListHostedZonesByName"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListHostedZonesByNameRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ListHostedZonesByName operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ListHostedZonesByName for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ListHostedZonesByName method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ListHostedZonesByNameRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ListHostedZonesByNameRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListHostedZonesByName
0000000000000000000000000000000000000000;;	func (c *Route53) ListHostedZonesByNameRequest(input *ListHostedZonesByNameInput) (req *request.Request, output *ListHostedZonesByNameOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opListHostedZonesByName,
0000000000000000000000000000000000000000;;			HTTPMethod: "GET",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/hostedzonesbyname",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ListHostedZonesByNameInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ListHostedZonesByNameOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListHostedZonesByName API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Retrieves a list of your hosted zones in lexicographic order. Send a GET
0000000000000000000000000000000000000000;;	// request to the /2013-04-01/hostedzonesbyname resource. The response includes
0000000000000000000000000000000000000000;;	// a HostedZones child element for each hosted zone created by the current AWS
0000000000000000000000000000000000000000;;	// account.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// ListHostedZonesByName sorts hosted zones by name with the labels reversed.
0000000000000000000000000000000000000000;;	// For example:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * com.example.www.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note the trailing dot, which can change the sort order in some circumstances.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If the domain name includes escape characters or Punycode, ListHostedZonesByName
0000000000000000000000000000000000000000;;	// alphabetizes the domain name using the escaped or Punycoded value, which
0000000000000000000000000000000000000000;;	// is the format that Amazon Route 53 saves in its database. For example, to
0000000000000000000000000000000000000000;;	// create a hosted zone for example.com, specify ex\344mple.com for the domain
0000000000000000000000000000000000000000;;	// name. ListHostedZonesByName alphabetizes it as:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * com.ex\344mple.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The labels are reversed and alphabetized using the escaped value. For more
0000000000000000000000000000000000000000;;	// information about valid domain name formats, including internationalized
0000000000000000000000000000000000000000;;	// domain names, see DNS Domain Name Format (http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DomainNameFormat.html)
0000000000000000000000000000000000000000;;	// in the Amazon Route 53 Developer Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Amazon Route 53 returns up to 100 items in each response. If you have a lot
0000000000000000000000000000000000000000;;	// of hosted zones, use the MaxItems parameter to list them in groups of up
0000000000000000000000000000000000000000;;	// to 100. The response includes values that help navigate from one group of
0000000000000000000000000000000000000000;;	// MaxItems hosted zones to the next:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * The DNSName and HostedZoneId elements in the response contain the values,
0000000000000000000000000000000000000000;;	//    if any, specified for the dnsname and hostedzoneid parameters in the request
0000000000000000000000000000000000000000;;	//    that produced the current response.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * The MaxItems element in the response contains the value, if any, that
0000000000000000000000000000000000000000;;	//    you specified for the maxitems parameter in the request that produced
0000000000000000000000000000000000000000;;	//    the current response.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * If the value of IsTruncated in the response is true, there are more
0000000000000000000000000000000000000000;;	//    hosted zones associated with the current AWS account.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If IsTruncated is false, this response includes the last hosted zone that
0000000000000000000000000000000000000000;;	//    is associated with the current account. The NextDNSName element and NextHostedZoneId
0000000000000000000000000000000000000000;;	//    elements are omitted from the response.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * The NextDNSName and NextHostedZoneId elements in the response contain
0000000000000000000000000000000000000000;;	//    the domain name and the hosted zone ID of the next hosted zone that is
0000000000000000000000000000000000000000;;	//    associated with the current AWS account. If you want to list more hosted
0000000000000000000000000000000000000000;;	//    zones, make another call to ListHostedZonesByName, and specify the value
0000000000000000000000000000000000000000;;	//    of NextDNSName and NextHostedZoneId in the dnsname and hostedzoneid parameters,
0000000000000000000000000000000000000000;;	//    respectively.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation ListHostedZonesByName for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * InvalidInput
0000000000000000000000000000000000000000;;	//   The input is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * InvalidDomainName
0000000000000000000000000000000000000000;;	//   The specified domain name is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListHostedZonesByName
0000000000000000000000000000000000000000;;	func (c *Route53) ListHostedZonesByName(input *ListHostedZonesByNameInput) (*ListHostedZonesByNameOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ListHostedZonesByNameRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opListResourceRecordSets = "ListResourceRecordSets"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListResourceRecordSetsRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ListResourceRecordSets operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ListResourceRecordSets for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ListResourceRecordSets method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ListResourceRecordSetsRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ListResourceRecordSetsRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListResourceRecordSets
0000000000000000000000000000000000000000;;	func (c *Route53) ListResourceRecordSetsRequest(input *ListResourceRecordSetsInput) (req *request.Request, output *ListResourceRecordSetsOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opListResourceRecordSets,
0000000000000000000000000000000000000000;;			HTTPMethod: "GET",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/hostedzone/{Id}/rrset",
0000000000000000000000000000000000000000;;			Paginator: &request.Paginator{
0000000000000000000000000000000000000000;;				InputTokens:     []string{"StartRecordName", "StartRecordType", "StartRecordIdentifier"},
0000000000000000000000000000000000000000;;				OutputTokens:    []string{"NextRecordName", "NextRecordType", "NextRecordIdentifier"},
0000000000000000000000000000000000000000;;				LimitToken:      "MaxItems",
0000000000000000000000000000000000000000;;				TruncationToken: "IsTruncated",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ListResourceRecordSetsInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ListResourceRecordSetsOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListResourceRecordSets API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Lists the resource record sets in a specified hosted zone.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// ListResourceRecordSets returns up to 100 resource record sets at a time in
0000000000000000000000000000000000000000;;	// ASCII order, beginning at a position specified by the name and type elements.
0000000000000000000000000000000000000000;;	// The action sorts results first by DNS name with the labels reversed, for
0000000000000000000000000000000000000000;;	// example:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// com.example.www.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note the trailing dot, which can change the sort order in some circumstances.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// When multiple records have the same DNS name, the action sorts results by
0000000000000000000000000000000000000000;;	// the record type.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// You can use the name and type elements to adjust the beginning position of
0000000000000000000000000000000000000000;;	// the list of resource record sets returned:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If you do not specify Name or TypeThe results begin with the first resource
0000000000000000000000000000000000000000;;	// record set that the hosted zone contains.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If you specify Name but not TypeThe results begin with the first resource
0000000000000000000000000000000000000000;;	// record set in the list whose name is greater than or equal to Name.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If you specify Type but not NameAmazon Route 53 returns the InvalidInput
0000000000000000000000000000000000000000;;	// error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If you specify both Name and TypeThe results begin with the first resource
0000000000000000000000000000000000000000;;	// record set in the list whose name is greater than or equal to Name, and whose
0000000000000000000000000000000000000000;;	// type is greater than or equal to Type.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This action returns the most current version of the records. This includes
0000000000000000000000000000000000000000;;	// records that are PENDING, and that are not yet available on all Amazon Route
0000000000000000000000000000000000000000;;	// 53 DNS servers.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// To ensure that you get an accurate listing of the resource record sets for
0000000000000000000000000000000000000000;;	// a hosted zone at a point in time, do not submit a ChangeResourceRecordSets
0000000000000000000000000000000000000000;;	// request while you're paging through the results of a ListResourceRecordSets
0000000000000000000000000000000000000000;;	// request. If you do, some pages may display results without the latest changes
0000000000000000000000000000000000000000;;	// while other pages display results with the latest changes.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation ListResourceRecordSets for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * NoSuchHostedZone
0000000000000000000000000000000000000000;;	//   No hosted zone exists with the ID that you specified.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * InvalidInput
0000000000000000000000000000000000000000;;	//   The input is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListResourceRecordSets
0000000000000000000000000000000000000000;;	func (c *Route53) ListResourceRecordSets(input *ListResourceRecordSetsInput) (*ListResourceRecordSetsOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ListResourceRecordSetsRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListResourceRecordSetsPages iterates over the pages of a ListResourceRecordSets operation,
0000000000000000000000000000000000000000;;	// calling the "fn" function with the response data for each page. To stop
0000000000000000000000000000000000000000;;	// iterating, return false from the fn function.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ListResourceRecordSets method for more information on how to use this operation.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: This operation can generate multiple requests to a service.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example iterating over at most 3 pages of a ListResourceRecordSets operation.
0000000000000000000000000000000000000000;;	//    pageNum := 0
0000000000000000000000000000000000000000;;	//    err := client.ListResourceRecordSetsPages(params,
0000000000000000000000000000000000000000;;	//        func(page *ListResourceRecordSetsOutput, lastPage bool) bool {
0000000000000000000000000000000000000000;;	//            pageNum++
0000000000000000000000000000000000000000;;	//            fmt.Println(page)
0000000000000000000000000000000000000000;;	//            return pageNum <= 3
0000000000000000000000000000000000000000;;	//        })
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	func (c *Route53) ListResourceRecordSetsPages(input *ListResourceRecordSetsInput, fn func(p *ListResourceRecordSetsOutput, lastPage bool) (shouldContinue bool)) error {
0000000000000000000000000000000000000000;;		page, _ := c.ListResourceRecordSetsRequest(input)
0000000000000000000000000000000000000000;;		page.Handlers.Build.PushBack(request.MakeAddToUserAgentFreeFormHandler("Paginator"))
0000000000000000000000000000000000000000;;		return page.EachPage(func(p interface{}, lastPage bool) bool {
0000000000000000000000000000000000000000;;			return fn(p.(*ListResourceRecordSetsOutput), lastPage)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opListReusableDelegationSets = "ListReusableDelegationSets"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListReusableDelegationSetsRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ListReusableDelegationSets operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ListReusableDelegationSets for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ListReusableDelegationSets method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ListReusableDelegationSetsRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ListReusableDelegationSetsRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListReusableDelegationSets
0000000000000000000000000000000000000000;;	func (c *Route53) ListReusableDelegationSetsRequest(input *ListReusableDelegationSetsInput) (req *request.Request, output *ListReusableDelegationSetsOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opListReusableDelegationSets,
0000000000000000000000000000000000000000;;			HTTPMethod: "GET",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/delegationset",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ListReusableDelegationSetsInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ListReusableDelegationSetsOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListReusableDelegationSets API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// To retrieve a list of your reusable delegation sets, send a GET request to
0000000000000000000000000000000000000000;;	// the /2013-04-01/delegationset resource. The response to this request includes
0000000000000000000000000000000000000000;;	// a DelegationSets element with zero, one, or multiple DelegationSet child
0000000000000000000000000000000000000000;;	// elements. By default, the list of delegation sets is displayed on a single
0000000000000000000000000000000000000000;;	// page. You can control the length of the page that is displayed by using the
0000000000000000000000000000000000000000;;	// MaxItems parameter. You can use the Marker parameter to control the delegation
0000000000000000000000000000000000000000;;	// set that the list begins with.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Amazon Route 53 returns a maximum of 100 items. If you set MaxItems to a
0000000000000000000000000000000000000000;;	// value greater than 100, Amazon Route 53 returns only the first 100.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation ListReusableDelegationSets for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * InvalidInput
0000000000000000000000000000000000000000;;	//   The input is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListReusableDelegationSets
0000000000000000000000000000000000000000;;	func (c *Route53) ListReusableDelegationSets(input *ListReusableDelegationSetsInput) (*ListReusableDelegationSetsOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ListReusableDelegationSetsRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opListTagsForResource = "ListTagsForResource"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListTagsForResourceRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ListTagsForResource operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ListTagsForResource for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ListTagsForResource method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ListTagsForResourceRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ListTagsForResourceRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListTagsForResource
0000000000000000000000000000000000000000;;	func (c *Route53) ListTagsForResourceRequest(input *ListTagsForResourceInput) (req *request.Request, output *ListTagsForResourceOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opListTagsForResource,
0000000000000000000000000000000000000000;;			HTTPMethod: "GET",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/tags/{ResourceType}/{ResourceId}",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ListTagsForResourceInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ListTagsForResourceOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListTagsForResource API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Lists tags for one health check or hosted zone.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For information about using tags for cost allocation, see Using Cost Allocation
0000000000000000000000000000000000000000;;	// Tags (http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html)
0000000000000000000000000000000000000000;;	// in the AWS Billing and Cost Management User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation ListTagsForResource for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * InvalidInput
0000000000000000000000000000000000000000;;	//   The input is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * NoSuchHealthCheck
0000000000000000000000000000000000000000;;	//   No health check exists with the ID that you specified in the DeleteHealthCheck
0000000000000000000000000000000000000000;;	//   request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * NoSuchHostedZone
0000000000000000000000000000000000000000;;	//   No hosted zone exists with the ID that you specified.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * PriorRequestNotComplete
0000000000000000000000000000000000000000;;	//   If Amazon Route 53 can't process a request before the next request arrives,
0000000000000000000000000000000000000000;;	//   it will reject subsequent requests for the same hosted zone and return an
0000000000000000000000000000000000000000;;	//   HTTP 400 error (Bad request). If Amazon Route 53 returns this error repeatedly
0000000000000000000000000000000000000000;;	//   for the same request, we recommend that you wait, in intervals of increasing
0000000000000000000000000000000000000000;;	//   duration, before you try the request again.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * ThrottlingException
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListTagsForResource
0000000000000000000000000000000000000000;;	func (c *Route53) ListTagsForResource(input *ListTagsForResourceInput) (*ListTagsForResourceOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ListTagsForResourceRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opListTagsForResources = "ListTagsForResources"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListTagsForResourcesRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ListTagsForResources operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ListTagsForResources for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ListTagsForResources method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ListTagsForResourcesRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ListTagsForResourcesRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListTagsForResources
0000000000000000000000000000000000000000;;	func (c *Route53) ListTagsForResourcesRequest(input *ListTagsForResourcesInput) (req *request.Request, output *ListTagsForResourcesOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opListTagsForResources,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/tags/{ResourceType}",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ListTagsForResourcesInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ListTagsForResourcesOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListTagsForResources API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Lists tags for up to 10 health checks or hosted zones.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For information about using tags for cost allocation, see Using Cost Allocation
0000000000000000000000000000000000000000;;	// Tags (http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html)
0000000000000000000000000000000000000000;;	// in the AWS Billing and Cost Management User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation ListTagsForResources for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * InvalidInput
0000000000000000000000000000000000000000;;	//   The input is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * NoSuchHealthCheck
0000000000000000000000000000000000000000;;	//   No health check exists with the ID that you specified in the DeleteHealthCheck
0000000000000000000000000000000000000000;;	//   request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * NoSuchHostedZone
0000000000000000000000000000000000000000;;	//   No hosted zone exists with the ID that you specified.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * PriorRequestNotComplete
0000000000000000000000000000000000000000;;	//   If Amazon Route 53 can't process a request before the next request arrives,
0000000000000000000000000000000000000000;;	//   it will reject subsequent requests for the same hosted zone and return an
0000000000000000000000000000000000000000;;	//   HTTP 400 error (Bad request). If Amazon Route 53 returns this error repeatedly
0000000000000000000000000000000000000000;;	//   for the same request, we recommend that you wait, in intervals of increasing
0000000000000000000000000000000000000000;;	//   duration, before you try the request again.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * ThrottlingException
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListTagsForResources
0000000000000000000000000000000000000000;;	func (c *Route53) ListTagsForResources(input *ListTagsForResourcesInput) (*ListTagsForResourcesOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ListTagsForResourcesRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opListTrafficPolicies = "ListTrafficPolicies"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListTrafficPoliciesRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ListTrafficPolicies operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ListTrafficPolicies for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ListTrafficPolicies method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ListTrafficPoliciesRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ListTrafficPoliciesRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListTrafficPolicies
0000000000000000000000000000000000000000;;	func (c *Route53) ListTrafficPoliciesRequest(input *ListTrafficPoliciesInput) (req *request.Request, output *ListTrafficPoliciesOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opListTrafficPolicies,
0000000000000000000000000000000000000000;;			HTTPMethod: "GET",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/trafficpolicies",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ListTrafficPoliciesInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ListTrafficPoliciesOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListTrafficPolicies API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Gets information about the latest version for every traffic policy that is
0000000000000000000000000000000000000000;;	// associated with the current AWS account. Send a GET request to the /Amazon
0000000000000000000000000000000000000000;;	// Route 53 API version/trafficpolicy resource.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Amazon Route 53 returns a maximum of 100 items in each response. If you have
0000000000000000000000000000000000000000;;	// a lot of traffic policies, you can use the maxitems parameter to list them
0000000000000000000000000000000000000000;;	// in groups of up to 100.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The response includes three values that help you navigate from one group
0000000000000000000000000000000000000000;;	// of maxitems traffic policies to the next:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * IsTruncated
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If the value of IsTruncated in the response is true, there are more traffic
0000000000000000000000000000000000000000;;	//    policies associated with the current AWS account.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If IsTruncated is false, this response includes the last traffic policy that
0000000000000000000000000000000000000000;;	//    is associated with the current account.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * TrafficPolicyIdMarker
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If IsTruncated is true, TrafficPolicyIdMarker is the ID of the first traffic
0000000000000000000000000000000000000000;;	//    policy in the next group of MaxItems traffic policies. If you want to
0000000000000000000000000000000000000000;;	//    list more traffic policies, make another call to ListTrafficPolicies,
0000000000000000000000000000000000000000;;	//    and specify the value of the TrafficPolicyIdMarker element from the response
0000000000000000000000000000000000000000;;	//    in the TrafficPolicyIdMarker request parameter.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If IsTruncated is false, the TrafficPolicyIdMarker element is omitted from
0000000000000000000000000000000000000000;;	//    the response.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * MaxItems
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The value that you specified for the MaxItems parameter in the request that
0000000000000000000000000000000000000000;;	//    produced the current response.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation ListTrafficPolicies for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * InvalidInput
0000000000000000000000000000000000000000;;	//   The input is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListTrafficPolicies
0000000000000000000000000000000000000000;;	func (c *Route53) ListTrafficPolicies(input *ListTrafficPoliciesInput) (*ListTrafficPoliciesOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ListTrafficPoliciesRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opListTrafficPolicyInstances = "ListTrafficPolicyInstances"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListTrafficPolicyInstancesRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ListTrafficPolicyInstances operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ListTrafficPolicyInstances for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ListTrafficPolicyInstances method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ListTrafficPolicyInstancesRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ListTrafficPolicyInstancesRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListTrafficPolicyInstances
0000000000000000000000000000000000000000;;	func (c *Route53) ListTrafficPolicyInstancesRequest(input *ListTrafficPolicyInstancesInput) (req *request.Request, output *ListTrafficPolicyInstancesOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opListTrafficPolicyInstances,
0000000000000000000000000000000000000000;;			HTTPMethod: "GET",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/trafficpolicyinstances",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ListTrafficPolicyInstancesInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ListTrafficPolicyInstancesOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListTrafficPolicyInstances API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Gets information about the traffic policy instances that you created by using
0000000000000000000000000000000000000000;;	// the current AWS account.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// After you submit an UpdateTrafficPolicyInstance request, there's a brief
0000000000000000000000000000000000000000;;	// delay while Amazon Route 53 creates the resource record sets that are specified
0000000000000000000000000000000000000000;;	// in the traffic policy definition. For more information, see the State response
0000000000000000000000000000000000000000;;	// element.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Send a GET request to the /Amazon Route 53 API version/trafficpolicyinstance
0000000000000000000000000000000000000000;;	// resource.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Amazon Route 53 returns a maximum of 100 items in each response. If you have
0000000000000000000000000000000000000000;;	// a lot of traffic policy instances, you can use the MaxItems parameter to
0000000000000000000000000000000000000000;;	// list them in groups of up to 100.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The response includes five values that help you navigate from one group of
0000000000000000000000000000000000000000;;	// MaxItems traffic policy instances to the next:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * IsTruncated
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If the value of IsTruncated in the response is true, there are more traffic
0000000000000000000000000000000000000000;;	//    policy instances associated with the current AWS account.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If IsTruncated is false, this response includes the last traffic policy instance
0000000000000000000000000000000000000000;;	//    that is associated with the current account.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * MaxItems
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The value that you specified for the MaxItems parameter in the request that
0000000000000000000000000000000000000000;;	//    produced the current response.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * HostedZoneIdMarker, TrafficPolicyInstanceNameMarker, and TrafficPolicyInstanceTypeMarker
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If IsTruncated is true, these three values in the response represent the
0000000000000000000000000000000000000000;;	//    first traffic policy instance in the next group of MaxItems traffic policy
0000000000000000000000000000000000000000;;	//    instances. To list more traffic policy instances, make another call to
0000000000000000000000000000000000000000;;	//    ListTrafficPolicyInstances, and specify these values in the corresponding
0000000000000000000000000000000000000000;;	//    request parameters.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If IsTruncated is false, all three elements are omitted from the response.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation ListTrafficPolicyInstances for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * InvalidInput
0000000000000000000000000000000000000000;;	//   The input is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * NoSuchTrafficPolicyInstance
0000000000000000000000000000000000000000;;	//   No traffic policy instance exists with the specified ID.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListTrafficPolicyInstances
0000000000000000000000000000000000000000;;	func (c *Route53) ListTrafficPolicyInstances(input *ListTrafficPolicyInstancesInput) (*ListTrafficPolicyInstancesOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ListTrafficPolicyInstancesRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opListTrafficPolicyInstancesByHostedZone = "ListTrafficPolicyInstancesByHostedZone"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListTrafficPolicyInstancesByHostedZoneRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ListTrafficPolicyInstancesByHostedZone operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ListTrafficPolicyInstancesByHostedZone for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ListTrafficPolicyInstancesByHostedZone method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ListTrafficPolicyInstancesByHostedZoneRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ListTrafficPolicyInstancesByHostedZoneRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListTrafficPolicyInstancesByHostedZone
0000000000000000000000000000000000000000;;	func (c *Route53) ListTrafficPolicyInstancesByHostedZoneRequest(input *ListTrafficPolicyInstancesByHostedZoneInput) (req *request.Request, output *ListTrafficPolicyInstancesByHostedZoneOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opListTrafficPolicyInstancesByHostedZone,
0000000000000000000000000000000000000000;;			HTTPMethod: "GET",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/trafficpolicyinstances/hostedzone",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ListTrafficPolicyInstancesByHostedZoneInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ListTrafficPolicyInstancesByHostedZoneOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListTrafficPolicyInstancesByHostedZone API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Gets information about the traffic policy instances that you created in a
0000000000000000000000000000000000000000;;	// specified hosted zone.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// After you submit an UpdateTrafficPolicyInstance request, there's a brief
0000000000000000000000000000000000000000;;	// delay while Amazon Route 53 creates the resource record sets that are specified
0000000000000000000000000000000000000000;;	// in the traffic policy definition. For more information, see the State response
0000000000000000000000000000000000000000;;	// element.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Send a GET request to the /Amazon Route 53 API version/trafficpolicyinstance
0000000000000000000000000000000000000000;;	// resource and include the ID of the hosted zone.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Amazon Route 53 returns a maximum of 100 items in each response. If you have
0000000000000000000000000000000000000000;;	// a lot of traffic policy instances, you can use the MaxItems parameter to
0000000000000000000000000000000000000000;;	// list them in groups of up to 100.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The response includes four values that help you navigate from one group of
0000000000000000000000000000000000000000;;	// MaxItems traffic policy instances to the next:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * IsTruncated
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If the value of IsTruncated in the response is true, there are more traffic
0000000000000000000000000000000000000000;;	//    policy instances associated with the current AWS account.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * If IsTruncated is false, this response includes the last traffic policy
0000000000000000000000000000000000000000;;	//    instance that is associated with the current account.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * MaxItems
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * The value that you specified for the MaxItems parameter in the request
0000000000000000000000000000000000000000;;	//    that produced the current response.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * TrafficPolicyInstanceNameMarker and TrafficPolicyInstanceTypeMarker
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * If IsTruncated is true, these two values in the response represent the
0000000000000000000000000000000000000000;;	//    first traffic policy instance in the next group of MaxItems traffic policy
0000000000000000000000000000000000000000;;	//    instances. To list more traffic policy instances, make another call to
0000000000000000000000000000000000000000;;	//    ListTrafficPolicyInstancesByHostedZone, and specify these values in the
0000000000000000000000000000000000000000;;	//    corresponding request parameters.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * If IsTruncated is false, all three elements are omitted from the response.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation ListTrafficPolicyInstancesByHostedZone for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * InvalidInput
0000000000000000000000000000000000000000;;	//   The input is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * NoSuchTrafficPolicyInstance
0000000000000000000000000000000000000000;;	//   No traffic policy instance exists with the specified ID.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * NoSuchHostedZone
0000000000000000000000000000000000000000;;	//   No hosted zone exists with the ID that you specified.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListTrafficPolicyInstancesByHostedZone
0000000000000000000000000000000000000000;;	func (c *Route53) ListTrafficPolicyInstancesByHostedZone(input *ListTrafficPolicyInstancesByHostedZoneInput) (*ListTrafficPolicyInstancesByHostedZoneOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ListTrafficPolicyInstancesByHostedZoneRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opListTrafficPolicyInstancesByPolicy = "ListTrafficPolicyInstancesByPolicy"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListTrafficPolicyInstancesByPolicyRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ListTrafficPolicyInstancesByPolicy operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ListTrafficPolicyInstancesByPolicy for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ListTrafficPolicyInstancesByPolicy method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ListTrafficPolicyInstancesByPolicyRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ListTrafficPolicyInstancesByPolicyRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListTrafficPolicyInstancesByPolicy
0000000000000000000000000000000000000000;;	func (c *Route53) ListTrafficPolicyInstancesByPolicyRequest(input *ListTrafficPolicyInstancesByPolicyInput) (req *request.Request, output *ListTrafficPolicyInstancesByPolicyOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opListTrafficPolicyInstancesByPolicy,
0000000000000000000000000000000000000000;;			HTTPMethod: "GET",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/trafficpolicyinstances/trafficpolicy",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ListTrafficPolicyInstancesByPolicyInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ListTrafficPolicyInstancesByPolicyOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListTrafficPolicyInstancesByPolicy API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Gets information about the traffic policy instances that you created by using
0000000000000000000000000000000000000000;;	// a specify traffic policy version.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// After you submit a CreateTrafficPolicyInstance or an UpdateTrafficPolicyInstance
0000000000000000000000000000000000000000;;	// request, there's a brief delay while Amazon Route 53 creates the resource
0000000000000000000000000000000000000000;;	// record sets that are specified in the traffic policy definition. For more
0000000000000000000000000000000000000000;;	// information, see the State response element.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Send a GET request to the /Route 53 API version/trafficpolicyinstance resource
0000000000000000000000000000000000000000;;	// and include the ID and version of the traffic policy.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Amazon Route 53 returns a maximum of 100 items in each response. If you have
0000000000000000000000000000000000000000;;	// a lot of traffic policy instances, you can use the MaxItems parameter to
0000000000000000000000000000000000000000;;	// list them in groups of up to 100.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The response includes five values that help you navigate from one group of
0000000000000000000000000000000000000000;;	// MaxItems traffic policy instances to the next:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * IsTruncated
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If the value of IsTruncated in the response is true, there are more traffic
0000000000000000000000000000000000000000;;	//    policy instances associated with the specified traffic policy.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If IsTruncated is false, this response includes the last traffic policy instance
0000000000000000000000000000000000000000;;	//    that is associated with the specified traffic policy.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * MaxItems
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The value that you specified for the MaxItems parameter in the request that
0000000000000000000000000000000000000000;;	//    produced the current response.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * HostedZoneIdMarker, TrafficPolicyInstanceNameMarker, and TrafficPolicyInstanceTypeMarker
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If IsTruncated is true, these values in the response represent the first
0000000000000000000000000000000000000000;;	//    traffic policy instance in the next group of MaxItems traffic policy instances.
0000000000000000000000000000000000000000;;	//    To list more traffic policy instances, make another call to ListTrafficPolicyInstancesByPolicy,
0000000000000000000000000000000000000000;;	//    and specify these values in the corresponding request parameters.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If IsTruncated is false, all three elements are omitted from the response.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation ListTrafficPolicyInstancesByPolicy for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * InvalidInput
0000000000000000000000000000000000000000;;	//   The input is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * NoSuchTrafficPolicyInstance
0000000000000000000000000000000000000000;;	//   No traffic policy instance exists with the specified ID.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * NoSuchTrafficPolicy
0000000000000000000000000000000000000000;;	//   No traffic policy exists with the specified ID.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListTrafficPolicyInstancesByPolicy
0000000000000000000000000000000000000000;;	func (c *Route53) ListTrafficPolicyInstancesByPolicy(input *ListTrafficPolicyInstancesByPolicyInput) (*ListTrafficPolicyInstancesByPolicyOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ListTrafficPolicyInstancesByPolicyRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opListTrafficPolicyVersions = "ListTrafficPolicyVersions"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListTrafficPolicyVersionsRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ListTrafficPolicyVersions operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ListTrafficPolicyVersions for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ListTrafficPolicyVersions method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ListTrafficPolicyVersionsRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ListTrafficPolicyVersionsRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListTrafficPolicyVersions
0000000000000000000000000000000000000000;;	func (c *Route53) ListTrafficPolicyVersionsRequest(input *ListTrafficPolicyVersionsInput) (req *request.Request, output *ListTrafficPolicyVersionsOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opListTrafficPolicyVersions,
0000000000000000000000000000000000000000;;			HTTPMethod: "GET",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/trafficpolicies/{Id}/versions",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ListTrafficPolicyVersionsInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ListTrafficPolicyVersionsOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListTrafficPolicyVersions API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Gets information about all of the versions for a specified traffic policy.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Send a GET request to the /Amazon Route 53 API version/trafficpolicy resource
0000000000000000000000000000000000000000;;	// and specify the ID of the traffic policy for which you want to list versions.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Amazon Route 53 returns a maximum of 100 items in each response. If you have
0000000000000000000000000000000000000000;;	// a lot of traffic policies, you can use the maxitems parameter to list them
0000000000000000000000000000000000000000;;	// in groups of up to 100.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The response includes three values that help you navigate from one group
0000000000000000000000000000000000000000;;	// of maxitems traffic policies to the next:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * IsTruncated
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If the value of IsTruncated in the response is true, there are more traffic
0000000000000000000000000000000000000000;;	//    policy versions associated with the specified traffic policy.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If IsTruncated is false, this response includes the last traffic policy version
0000000000000000000000000000000000000000;;	//    that is associated with the specified traffic policy.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * TrafficPolicyVersionMarker
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The ID of the next traffic policy version that is associated with the current
0000000000000000000000000000000000000000;;	//    AWS account. If you want to list more traffic policies, make another call
0000000000000000000000000000000000000000;;	//    to ListTrafficPolicyVersions, and specify the value of the TrafficPolicyVersionMarker
0000000000000000000000000000000000000000;;	//    element in the TrafficPolicyVersionMarker request parameter.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If IsTruncated is false, Amazon Route 53 omits the TrafficPolicyVersionMarker
0000000000000000000000000000000000000000;;	//    element from the response.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * MaxItems
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The value that you specified for the MaxItems parameter in the request that
0000000000000000000000000000000000000000;;	//    produced the current response.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation ListTrafficPolicyVersions for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * InvalidInput
0000000000000000000000000000000000000000;;	//   The input is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * NoSuchTrafficPolicy
0000000000000000000000000000000000000000;;	//   No traffic policy exists with the specified ID.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListTrafficPolicyVersions
0000000000000000000000000000000000000000;;	func (c *Route53) ListTrafficPolicyVersions(input *ListTrafficPolicyVersionsInput) (*ListTrafficPolicyVersionsOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ListTrafficPolicyVersionsRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opListVPCAssociationAuthorizations = "ListVPCAssociationAuthorizations"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListVPCAssociationAuthorizationsRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the ListVPCAssociationAuthorizations operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See ListVPCAssociationAuthorizations for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the ListVPCAssociationAuthorizations method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the ListVPCAssociationAuthorizationsRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.ListVPCAssociationAuthorizationsRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListVPCAssociationAuthorizations
0000000000000000000000000000000000000000;;	func (c *Route53) ListVPCAssociationAuthorizationsRequest(input *ListVPCAssociationAuthorizationsInput) (req *request.Request, output *ListVPCAssociationAuthorizationsOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opListVPCAssociationAuthorizations,
0000000000000000000000000000000000000000;;			HTTPMethod: "GET",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/hostedzone/{Id}/authorizevpcassociation",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &ListVPCAssociationAuthorizationsInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &ListVPCAssociationAuthorizationsOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListVPCAssociationAuthorizations API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Gets a list of the VPCs that were created by other accounts and that can
0000000000000000000000000000000000000000;;	// be associated with a specified hosted zone because you've submitted one or
0000000000000000000000000000000000000000;;	// more CreateVPCAssociationAuthorization requests.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Send a GET request to the /2013-04-01/hostedzone/hosted zone ID/authorizevpcassociation
0000000000000000000000000000000000000000;;	// resource. The response to this request includes a VPCs element with a VPC
0000000000000000000000000000000000000000;;	// child element for each VPC that can be associated with the hosted zone.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Amazon Route 53 returns up to 50 VPCs per page. To return fewer VPCs per
0000000000000000000000000000000000000000;;	// page, include the MaxResults parameter:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// /2013-04-01/hostedzone/hosted zone ID/authorizevpcassociation?MaxItems=VPCs
0000000000000000000000000000000000000000;;	// per page
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If the response includes a NextToken element, there are more VPCs to list.
0000000000000000000000000000000000000000;;	// To get the next page of VPCs, submit another ListVPCAssociationAuthorizations
0000000000000000000000000000000000000000;;	// request, and include the value of the NextToken element from the response
0000000000000000000000000000000000000000;;	// in the NextToken request parameter:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// /2013-04-01/hostedzone/hosted zone ID/authorizevpcassociation?MaxItems=VPCs
0000000000000000000000000000000000000000;;	// per page&NextToken=
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation ListVPCAssociationAuthorizations for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * NoSuchHostedZone
0000000000000000000000000000000000000000;;	//   No hosted zone exists with the ID that you specified.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * InvalidInput
0000000000000000000000000000000000000000;;	//   The input is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * InvalidPaginationToken
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListVPCAssociationAuthorizations
0000000000000000000000000000000000000000;;	func (c *Route53) ListVPCAssociationAuthorizations(input *ListVPCAssociationAuthorizationsInput) (*ListVPCAssociationAuthorizationsOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.ListVPCAssociationAuthorizationsRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opTestDNSAnswer = "TestDNSAnswer"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestDNSAnswerRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the TestDNSAnswer operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See TestDNSAnswer for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the TestDNSAnswer method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the TestDNSAnswerRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.TestDNSAnswerRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/TestDNSAnswer
0000000000000000000000000000000000000000;;	func (c *Route53) TestDNSAnswerRequest(input *TestDNSAnswerInput) (req *request.Request, output *TestDNSAnswerOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opTestDNSAnswer,
0000000000000000000000000000000000000000;;			HTTPMethod: "GET",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/testdnsanswer",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &TestDNSAnswerInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &TestDNSAnswerOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestDNSAnswer API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Gets the value that Amazon Route 53 returns in response to a DNS request
0000000000000000000000000000000000000000;;	// for a specified record name and type. You can optionally specify the IP address
0000000000000000000000000000000000000000;;	// of a DNS resolver, an EDNS0 client subnet IP address, and a subnet mask.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation TestDNSAnswer for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * NoSuchHostedZone
0000000000000000000000000000000000000000;;	//   No hosted zone exists with the ID that you specified.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * InvalidInput
0000000000000000000000000000000000000000;;	//   The input is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/TestDNSAnswer
0000000000000000000000000000000000000000;;	func (c *Route53) TestDNSAnswer(input *TestDNSAnswerInput) (*TestDNSAnswerOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.TestDNSAnswerRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opUpdateHealthCheck = "UpdateHealthCheck"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateHealthCheckRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the UpdateHealthCheck operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See UpdateHealthCheck for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the UpdateHealthCheck method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the UpdateHealthCheckRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.UpdateHealthCheckRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/UpdateHealthCheck
0000000000000000000000000000000000000000;;	func (c *Route53) UpdateHealthCheckRequest(input *UpdateHealthCheckInput) (req *request.Request, output *UpdateHealthCheckOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opUpdateHealthCheck,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/healthcheck/{HealthCheckId}",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &UpdateHealthCheckInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &UpdateHealthCheckOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateHealthCheck API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Updates an existing health check.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Send a POST request to the /2013-04-01/healthcheck/health check ID resource.
0000000000000000000000000000000000000000;;	// The request body must include a document with an UpdateHealthCheckRequest
0000000000000000000000000000000000000000;;	// element. For more information about updating health checks, see Creating,
0000000000000000000000000000000000000000;;	// Updating, and Deleting Health Checks (http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/health-checks-creating-deleting.html)
0000000000000000000000000000000000000000;;	// in the Amazon Route 53 Developer Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation UpdateHealthCheck for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * NoSuchHealthCheck
0000000000000000000000000000000000000000;;	//   No health check exists with the ID that you specified in the DeleteHealthCheck
0000000000000000000000000000000000000000;;	//   request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * InvalidInput
0000000000000000000000000000000000000000;;	//   The input is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * HealthCheckVersionMismatch
0000000000000000000000000000000000000000;;	//   The value of HealthCheckVersion in the request doesn't match the value of
0000000000000000000000000000000000000000;;	//   HealthCheckVersion in the health check.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/UpdateHealthCheck
0000000000000000000000000000000000000000;;	func (c *Route53) UpdateHealthCheck(input *UpdateHealthCheckInput) (*UpdateHealthCheckOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.UpdateHealthCheckRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opUpdateHostedZoneComment = "UpdateHostedZoneComment"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateHostedZoneCommentRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the UpdateHostedZoneComment operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See UpdateHostedZoneComment for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the UpdateHostedZoneComment method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the UpdateHostedZoneCommentRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.UpdateHostedZoneCommentRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/UpdateHostedZoneComment
0000000000000000000000000000000000000000;;	func (c *Route53) UpdateHostedZoneCommentRequest(input *UpdateHostedZoneCommentInput) (req *request.Request, output *UpdateHostedZoneCommentOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opUpdateHostedZoneComment,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/hostedzone/{Id}",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &UpdateHostedZoneCommentInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &UpdateHostedZoneCommentOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateHostedZoneComment API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Updates the hosted zone comment. Send a POST request to the /2013-04-01/hostedzone/hosted
0000000000000000000000000000000000000000;;	// zone ID resource.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation UpdateHostedZoneComment for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * NoSuchHostedZone
0000000000000000000000000000000000000000;;	//   No hosted zone exists with the ID that you specified.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * InvalidInput
0000000000000000000000000000000000000000;;	//   The input is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/UpdateHostedZoneComment
0000000000000000000000000000000000000000;;	func (c *Route53) UpdateHostedZoneComment(input *UpdateHostedZoneCommentInput) (*UpdateHostedZoneCommentOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.UpdateHostedZoneCommentRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opUpdateTrafficPolicyComment = "UpdateTrafficPolicyComment"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateTrafficPolicyCommentRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the UpdateTrafficPolicyComment operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See UpdateTrafficPolicyComment for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the UpdateTrafficPolicyComment method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the UpdateTrafficPolicyCommentRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.UpdateTrafficPolicyCommentRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/UpdateTrafficPolicyComment
0000000000000000000000000000000000000000;;	func (c *Route53) UpdateTrafficPolicyCommentRequest(input *UpdateTrafficPolicyCommentInput) (req *request.Request, output *UpdateTrafficPolicyCommentOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opUpdateTrafficPolicyComment,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/trafficpolicy/{Id}/{Version}",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &UpdateTrafficPolicyCommentInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &UpdateTrafficPolicyCommentOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateTrafficPolicyComment API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Updates the comment for a specified traffic policy version.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Send a POST request to the /2013-04-01/trafficpolicy/ resource.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The request body must include a document with an UpdateTrafficPolicyCommentRequest
0000000000000000000000000000000000000000;;	// element.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation UpdateTrafficPolicyComment for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * InvalidInput
0000000000000000000000000000000000000000;;	//   The input is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * NoSuchTrafficPolicy
0000000000000000000000000000000000000000;;	//   No traffic policy exists with the specified ID.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * ConcurrentModification
0000000000000000000000000000000000000000;;	//   Another user submitted a request to update the object at the same time that
0000000000000000000000000000000000000000;;	//   you did. Retry the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/UpdateTrafficPolicyComment
0000000000000000000000000000000000000000;;	func (c *Route53) UpdateTrafficPolicyComment(input *UpdateTrafficPolicyCommentInput) (*UpdateTrafficPolicyCommentOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.UpdateTrafficPolicyCommentRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opUpdateTrafficPolicyInstance = "UpdateTrafficPolicyInstance"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateTrafficPolicyInstanceRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the UpdateTrafficPolicyInstance operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See UpdateTrafficPolicyInstance for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the UpdateTrafficPolicyInstance method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the UpdateTrafficPolicyInstanceRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.UpdateTrafficPolicyInstanceRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/UpdateTrafficPolicyInstance
0000000000000000000000000000000000000000;;	func (c *Route53) UpdateTrafficPolicyInstanceRequest(input *UpdateTrafficPolicyInstanceInput) (req *request.Request, output *UpdateTrafficPolicyInstanceOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opUpdateTrafficPolicyInstance,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/2013-04-01/trafficpolicyinstance/{Id}",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &UpdateTrafficPolicyInstanceInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &UpdateTrafficPolicyInstanceOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateTrafficPolicyInstance API operation for Amazon Route 53.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Updates the resource record sets in a specified hosted zone that were created
0000000000000000000000000000000000000000;;	// based on the settings in a specified traffic policy version.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Send a POST request to the /2013-04-01/trafficpolicyinstance/traffic policy
0000000000000000000000000000000000000000;;	// ID resource. The request body must include a document with an UpdateTrafficPolicyInstanceRequest
0000000000000000000000000000000000000000;;	// element.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// When you update a traffic policy instance, Amazon Route 53 continues to respond
0000000000000000000000000000000000000000;;	// to DNS queries for the root resource record set name (such as example.com)
0000000000000000000000000000000000000000;;	// while it replaces one group of resource record sets with another. Amazon
0000000000000000000000000000000000000000;;	// Route 53 performs the following operations:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Amazon Route 53 creates a new group of resource record sets based on the
0000000000000000000000000000000000000000;;	// specified traffic policy. This is true regardless of how substantial the
0000000000000000000000000000000000000000;;	// differences are between the existing resource record sets and the new resource
0000000000000000000000000000000000000000;;	// record sets.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// When all of the new resource record sets have been created, Amazon Route
0000000000000000000000000000000000000000;;	// 53 starts to respond to DNS queries for the root resource record set name
0000000000000000000000000000000000000000;;	// (such as example.com) by using the new resource record sets.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Amazon Route 53 deletes the old group of resource record sets that are associated
0000000000000000000000000000000000000000;;	// with the root resource record set name.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for Amazon Route 53's
0000000000000000000000000000000000000000;;	// API operation UpdateTrafficPolicyInstance for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * InvalidInput
0000000000000000000000000000000000000000;;	//   The input is not valid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * NoSuchTrafficPolicy
0000000000000000000000000000000000000000;;	//   No traffic policy exists with the specified ID.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * NoSuchTrafficPolicyInstance
0000000000000000000000000000000000000000;;	//   No traffic policy instance exists with the specified ID.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * PriorRequestNotComplete
0000000000000000000000000000000000000000;;	//   If Amazon Route 53 can't process a request before the next request arrives,
0000000000000000000000000000000000000000;;	//   it will reject subsequent requests for the same hosted zone and return an
0000000000000000000000000000000000000000;;	//   HTTP 400 error (Bad request). If Amazon Route 53 returns this error repeatedly
0000000000000000000000000000000000000000;;	//   for the same request, we recommend that you wait, in intervals of increasing
0000000000000000000000000000000000000000;;	//   duration, before you try the request again.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * ConflictingTypes
0000000000000000000000000000000000000000;;	//   You tried to update a traffic policy instance by using a traffic policy version
0000000000000000000000000000000000000000;;	//   that has a different DNS type than the current type for the instance. You
0000000000000000000000000000000000000000;;	//   specified the type in the JSON document in the CreateTrafficPolicy or CreateTrafficPolicyVersionrequest.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/UpdateTrafficPolicyInstance
0000000000000000000000000000000000000000;;	func (c *Route53) UpdateTrafficPolicyInstance(input *UpdateTrafficPolicyInstanceInput) (*UpdateTrafficPolicyInstanceOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.UpdateTrafficPolicyInstanceRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that identifies the CloudWatch alarm that you want Amazon
0000000000000000000000000000000000000000;;	// Route 53 health checkers to use to determine whether this health check is
0000000000000000000000000000000000000000;;	// healthy.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/AlarmIdentifier
0000000000000000000000000000000000000000;;	type AlarmIdentifier struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the CloudWatch alarm that you want Amazon Route 53 health checkers
0000000000000000000000000000000000000000;;		// to use to determine whether this health check is healthy.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Name is a required field
0000000000000000000000000000000000000000;;		Name *string `min:"1" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that identifies the CloudWatch alarm that you want Amazon
0000000000000000000000000000000000000000;;		// Route 53 health checkers to use to determine whether this health check is
0000000000000000000000000000000000000000;;		// healthy.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// For the current list of CloudWatch regions, see Amazon CloudWatch (http://docs.aws.amazon.com/general/latest/gr/rande.html#cw_region)
0000000000000000000000000000000000000000;;		// in AWS Regions and Endpoints in the Amazon Web Services General Reference.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Region is a required field
0000000000000000000000000000000000000000;;		Region *string `min:"1" type:"string" required:"true" enum:"CloudWatchRegion"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AlarmIdentifier) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AlarmIdentifier) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *AlarmIdentifier) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "AlarmIdentifier"}
0000000000000000000000000000000000000000;;		if s.Name == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Name"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Name != nil && len(*s.Name) < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("Name", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Region == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Region"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Region != nil && len(*s.Region) < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("Region", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetName sets the Name field's value.
0000000000000000000000000000000000000000;;	func (s *AlarmIdentifier) SetName(v string) *AlarmIdentifier {
0000000000000000000000000000000000000000;;		s.Name = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRegion sets the Region field's value.
0000000000000000000000000000000000000000;;	func (s *AlarmIdentifier) SetRegion(v string) *AlarmIdentifier {
0000000000000000000000000000000000000000;;		s.Region = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Alias resource record sets only: Information about the CloudFront distribution,
0000000000000000000000000000000000000000;;	// Elastic Beanstalk environment, ELB load balancer, Amazon S3 bucket, or Amazon
0000000000000000000000000000000000000000;;	// Route 53 resource record set that you're redirecting queries to. The Elastic
0000000000000000000000000000000000000000;;	// Beanstalk environment must have a regionalized subdomain.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// When creating resource record sets for a private hosted zone, note the following:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * Resource record sets can't be created for CloudFront distributions in
0000000000000000000000000000000000000000;;	//    a private hosted zone.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * Creating geolocation alias resource record sets or latency alias resource
0000000000000000000000000000000000000000;;	//    record sets in a private hosted zone is unsupported.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * For information about creating failover resource record sets in a private
0000000000000000000000000000000000000000;;	//    hosted zone, see Configuring Failover in a Private Hosted Zone (http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-private-hosted-zones.html).
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/AliasTarget
0000000000000000000000000000000000000000;;	type AliasTarget struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Alias resource record sets only: The value that you specify depends on where
0000000000000000000000000000000000000000;;		// you want to route queries:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * A CloudFront distribution: Specify the domain name that CloudFront assigned
0000000000000000000000000000000000000000;;		//    when you created your distribution.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Your CloudFront distribution must include an alternate domain name that matches
0000000000000000000000000000000000000000;;		//    the name of the resource record set. For example, if the name of the resource
0000000000000000000000000000000000000000;;		//    record set is acme.example.com, your CloudFront distribution must include
0000000000000000000000000000000000000000;;		//    acme.example.com as one of the alternate domain names. For more information,
0000000000000000000000000000000000000000;;		//    see Using Alternate Domain Names (CNAMEs) (http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/CNAMEs.html)
0000000000000000000000000000000000000000;;		//    in the Amazon CloudFront Developer Guide.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * Elastic Beanstalk environment: Specify the CNAME attribute for the environment.
0000000000000000000000000000000000000000;;		//    (The environment must have a regionalized domain name.) You can use the
0000000000000000000000000000000000000000;;		//    following methods to get the value of the CNAME attribute:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// AWS Management Console: For information about how to get the value by using
0000000000000000000000000000000000000000;;		//    the console, see Using Custom Domains with AWS Elastic Beanstalk (http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/customdomains.html)
0000000000000000000000000000000000000000;;		//    in the AWS Elastic Beanstalk Developer Guide.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Elastic Beanstalk API: Use the DescribeEnvironments action to get the value
0000000000000000000000000000000000000000;;		//    of the CNAME attribute. For more information, see DescribeEnvironments
0000000000000000000000000000000000000000;;		//    (http://docs.aws.amazon.com/elasticbeanstalk/latest/api/API_DescribeEnvironments.html)
0000000000000000000000000000000000000000;;		//    in the AWS Elastic Beanstalk API Reference.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// AWS CLI: Use the describe-environments command to get the value of the CNAME
0000000000000000000000000000000000000000;;		//    attribute. For more information, see describe-environments (http://docs.aws.amazon.com/cli/latest/reference/elasticbeanstalk/describe-environments.html)
0000000000000000000000000000000000000000;;		//    in the AWS Command Line Interface Reference.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * An ELB load balancer: Specify the DNS name that is associated with the
0000000000000000000000000000000000000000;;		//    load balancer. Get the DNS name by using the AWS Management Console, the
0000000000000000000000000000000000000000;;		//    ELB API, or the AWS CLI. Use the same method to get values for HostedZoneId
0000000000000000000000000000000000000000;;		//    and DNSName. If you get one value from the console and the other value
0000000000000000000000000000000000000000;;		//    from the API or the CLI, creating the resource record set will fail.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// AWS Management Console: Go to the EC2 page, click Load Balancers in the navigation
0000000000000000000000000000000000000000;;		//    pane, choose the load balancer, choose the Description tab, and get the
0000000000000000000000000000000000000000;;		//    value of the DNS name field. (If you're routing traffic to a Classic Load
0000000000000000000000000000000000000000;;		//    Balancer, get the value that begins with dualstack.) Use the same process
0000000000000000000000000000000000000000;;		//    to get the value of the Hosted zone field. See AliasTarget$HostedZoneId.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Elastic Load Balancing API: Use DescribeLoadBalancers to get the value of
0000000000000000000000000000000000000000;;		//    DNSName and CanonicalHostedZoneNameId. (You specify the value of CanonicalHostedZoneNameId
0000000000000000000000000000000000000000;;		//    for AliasTarget$HostedZoneId.) For more information, see the applicable
0000000000000000000000000000000000000000;;		//    guide:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Classic Load Balancer: DescribeLoadBalancers (http://docs.aws.amazon.com/elasticloadbalancing/2012-06-01/APIReference/API_DescribeLoadBalancers.html)
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Application Load Balancer: DescribeLoadBalancers (http://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeLoadBalancers.html)
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// AWS CLI: Use describe-load-balancers (http://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html)
0000000000000000000000000000000000000000;;		//    to get the value of DNSName and CanonicalHostedZoneNameId. (You specify
0000000000000000000000000000000000000000;;		//    the value of CanonicalHostedZoneNameId for AliasTarget$HostedZoneId.)
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * An Amazon S3 bucket that is configured as a static website: Specify
0000000000000000000000000000000000000000;;		//    the domain name of the Amazon S3 website endpoint in which you created
0000000000000000000000000000000000000000;;		//    the bucket, for example, s3-website-us-east-1.amazonaws.com. For more
0000000000000000000000000000000000000000;;		//    information about valid values, see the table Amazon Simple Storage Service
0000000000000000000000000000000000000000;;		//    (S3) Website Endpoints (http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region)
0000000000000000000000000000000000000000;;		//    in the Amazon Web Services General Reference. For more information about
0000000000000000000000000000000000000000;;		//    using S3 buckets for websites, see Getting Started with Amazon Route 53
0000000000000000000000000000000000000000;;		//    (http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/getting-started.html)
0000000000000000000000000000000000000000;;		//    in the Amazon Route 53 Developer Guide.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * Another Amazon Route 53 resource record set: Specify the value of the
0000000000000000000000000000000000000000;;		//    Name element for a resource record set in the current hosted zone.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// DNSName is a required field
0000000000000000000000000000000000000000;;		DNSName *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Applies only to alias, weighted alias, latency alias, and failover alias
0000000000000000000000000000000000000000;;		// record sets: If you set the value of EvaluateTargetHealth to true for the
0000000000000000000000000000000000000000;;		// resource record set or sets in an alias, weighted alias, latency alias, or
0000000000000000000000000000000000000000;;		// failover alias resource record set, and if you specify a value for HealthCheck$Id
0000000000000000000000000000000000000000;;		// for every resource record set that is referenced by these alias resource
0000000000000000000000000000000000000000;;		// record sets, the alias resource record sets inherit the health of the referenced
0000000000000000000000000000000000000000;;		// resource record sets.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// In this configuration, when Amazon Route 53 receives a DNS query for an alias
0000000000000000000000000000000000000000;;		// resource record set:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * Amazon Route 53 looks at the resource record sets that are referenced
0000000000000000000000000000000000000000;;		//    by the alias resource record sets to determine which health checks they're
0000000000000000000000000000000000000000;;		//    using.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * Amazon Route 53 checks the current status of each health check. (Amazon
0000000000000000000000000000000000000000;;		//    Route 53 periodically checks the health of the endpoint that is specified
0000000000000000000000000000000000000000;;		//    in a health check; it doesn't perform the health check when the DNS query
0000000000000000000000000000000000000000;;		//    arrives.)
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * Based on the status of the health checks, Amazon Route 53 determines
0000000000000000000000000000000000000000;;		//    which resource record sets are healthy. Unhealthy resource record sets
0000000000000000000000000000000000000000;;		//    are immediately removed from consideration. In addition, if all of the
0000000000000000000000000000000000000000;;		//    resource record sets that are referenced by an alias resource record set
0000000000000000000000000000000000000000;;		//    are unhealthy, that alias resource record set also is immediately removed
0000000000000000000000000000000000000000;;		//    from consideration.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * Based on the configuration of the alias resource record sets (weighted
0000000000000000000000000000000000000000;;		//    alias or latency alias, for example) and the configuration of the resource
0000000000000000000000000000000000000000;;		//    record sets that they reference, Amazon Route 53 chooses a resource record
0000000000000000000000000000000000000000;;		//    set from the healthy resource record sets, and responds to the query.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Note the following:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * You can't set EvaluateTargetHealth to true when the alias target is
0000000000000000000000000000000000000000;;		//    a CloudFront distribution.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * If the AWS resource that you specify in AliasTarget is a resource record
0000000000000000000000000000000000000000;;		//    set or a group of resource record sets (for example, a group of weighted
0000000000000000000000000000000000000000;;		//    resource record sets), but it is not another alias resource record set,
0000000000000000000000000000000000000000;;		//    we recommend that you associate a health check with all of the resource
0000000000000000000000000000000000000000;;		//    record sets in the alias target.For more information, see What Happens
0000000000000000000000000000000000000000;;		//    When You Omit Health Checks? (http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-complex-configs.html#dns-failover-complex-configs-hc-omitting)
0000000000000000000000000000000000000000;;		//    in the Amazon Route 53 Developer Guide.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * If you specify an Elastic Beanstalk environment in HostedZoneId and
0000000000000000000000000000000000000000;;		//    DNSName, and if the environment contains an ELB load balancer, Elastic
0000000000000000000000000000000000000000;;		//    Load Balancing routes queries only to the healthy Amazon EC2 instances
0000000000000000000000000000000000000000;;		//    that are registered with the load balancer. (An environment automatically
0000000000000000000000000000000000000000;;		//    contains an ELB load balancer if it includes more than one EC2 instance.)
0000000000000000000000000000000000000000;;		//    If you set EvaluateTargetHealth to true and either no EC2 instances are
0000000000000000000000000000000000000000;;		//    healthy or the load balancer itself is unhealthy, Amazon Route 53 routes
0000000000000000000000000000000000000000;;		//    queries to other available resources that are healthy, if any.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If the environment contains a single EC2 instance, there are no special requirements.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * If you specify an ELB load balancer in AliasTarget, Elastic Load Balancing
0000000000000000000000000000000000000000;;		//    routes queries only to the healthy EC2 instances that are registered with
0000000000000000000000000000000000000000;;		//    the load balancer. If no EC2 instances are healthy or if the load balancer
0000000000000000000000000000000000000000;;		//    itself is unhealthy, and if EvaluateTargetHealth is true for the corresponding
0000000000000000000000000000000000000000;;		//    alias resource record set, Amazon Route 53 routes queries to other resources.
0000000000000000000000000000000000000000;;		//    When you create a load balancer, you configure settings for Elastic Load
0000000000000000000000000000000000000000;;		//    Balancing health checks; they're not Amazon Route 53 health checks, but
0000000000000000000000000000000000000000;;		//    they perform a similar function. Do not create Amazon Route 53 health
0000000000000000000000000000000000000000;;		//    checks for the EC2 instances that you register with an ELB load balancer.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// For more information, see How Health Checks Work in More Complex Amazon Route
0000000000000000000000000000000000000000;;		//    53 Configurations (http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-complex-configs.html)
0000000000000000000000000000000000000000;;		//    in the Amazon Route 53 Developers Guide.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * We recommend that you set EvaluateTargetHealth to true only when you
0000000000000000000000000000000000000000;;		//    have enough idle capacity to handle the failure of one or more endpoints.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// For more information and examples, see Amazon Route 53 Health Checks and
0000000000000000000000000000000000000000;;		// DNS Failover (http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover.html)
0000000000000000000000000000000000000000;;		// in the Amazon Route 53 Developer Guide.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// EvaluateTargetHealth is a required field
0000000000000000000000000000000000000000;;		EvaluateTargetHealth *bool `type:"boolean" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Alias resource records sets only: The value used depends on where the queries
0000000000000000000000000000000000000000;;		// are routed:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// A CloudFront distributionSpecify Z2FDTNDATAQYW2.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Alias resource record sets for CloudFront can't be created in a private zone.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Elastic Beanstalk environmentSpecify the hosted zone ID for the region in
0000000000000000000000000000000000000000;;		// which you created the environment. The environment must have a regionalized
0000000000000000000000000000000000000000;;		// subdomain. For a list of regions and the corresponding hosted zone IDs, see
0000000000000000000000000000000000000000;;		// AWS Elastic Beanstalk (http://docs.aws.amazon.com/general/latest/gr/rande.html#elasticbeanstalk_region)
0000000000000000000000000000000000000000;;		// in the Regions and Endpoints chapter of the Amazon Web Services General Reference.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ELB load balancerSpecify the value of the hosted zone ID for the load balancer.
0000000000000000000000000000000000000000;;		// Use the following methods to get the hosted zone ID:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// AWS Management Console: Go to the Amazon EC2 page, click Load Balancers in
0000000000000000000000000000000000000000;;		// the navigation pane, select the load balancer, and get the value of the Hosted
0000000000000000000000000000000000000000;;		// zone field on the Description tab. Use the same process to get the value
0000000000000000000000000000000000000000;;		// of DNS name. (You specify the value of DNS name for AliasTarget$DNSName.)
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Elastic Load Balancing API: Use DescribeLoadBalancers to get the value of
0000000000000000000000000000000000000000;;		// CanonicalHostedZoneNameId and DNSName. (You specify the value of DNSName
0000000000000000000000000000000000000000;;		// for AliasTarget$DNSName.) For more information, see the applicable guide:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Classic Load Balancer: DescribeLoadBalancers (http://docs.aws.amazon.com/elasticloadbalancing/2012-06-01/APIReference/API_DescribeLoadBalancers.html)
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Application Load Balancer: DescribeLoadBalancers (http://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeLoadBalancers.html)
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// AWS CLI: Use describe-load-balancers (http://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html)
0000000000000000000000000000000000000000;;		// to get the value of CanonicalHostedZoneNameID and DNSName. (You specify the
0000000000000000000000000000000000000000;;		// value of DNSName for AliasTarget$DNSName.)
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// An Amazon S3 bucket configured as a static websiteSpecify the hosted zone
0000000000000000000000000000000000000000;;		// ID for the region that you created the bucket in. For more information about
0000000000000000000000000000000000000000;;		// valid values, see the table Amazon Simple Storage Service Website Endpoints
0000000000000000000000000000000000000000;;		// (http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region) in the
0000000000000000000000000000000000000000;;		// Amazon Web Services General Reference.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Another Amazon Route 53 resource record set in your hosted zoneSpecify the
0000000000000000000000000000000000000000;;		// hosted zone ID of your hosted zone. (An alias resource record set can't reference
0000000000000000000000000000000000000000;;		// a resource record set in a different hosted zone.)
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// HostedZoneId is a required field
0000000000000000000000000000000000000000;;		HostedZoneId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AliasTarget) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AliasTarget) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *AliasTarget) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "AliasTarget"}
0000000000000000000000000000000000000000;;		if s.DNSName == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("DNSName"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.EvaluateTargetHealth == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("EvaluateTargetHealth"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.HostedZoneId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("HostedZoneId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDNSName sets the DNSName field's value.
0000000000000000000000000000000000000000;;	func (s *AliasTarget) SetDNSName(v string) *AliasTarget {
0000000000000000000000000000000000000000;;		s.DNSName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEvaluateTargetHealth sets the EvaluateTargetHealth field's value.
0000000000000000000000000000000000000000;;	func (s *AliasTarget) SetEvaluateTargetHealth(v bool) *AliasTarget {
0000000000000000000000000000000000000000;;		s.EvaluateTargetHealth = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHostedZoneId sets the HostedZoneId field's value.
0000000000000000000000000000000000000000;;	func (s *AliasTarget) SetHostedZoneId(v string) *AliasTarget {
0000000000000000000000000000000000000000;;		s.HostedZoneId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains information about the request to associate a
0000000000000000000000000000000000000000;;	// VPC with a private hosted zone.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/AssociateVPCWithHostedZoneRequest
0000000000000000000000000000000000000000;;	type AssociateVPCWithHostedZoneInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `locationName:"AssociateVPCWithHostedZoneRequest" type:"structure" xmlURI:"https://route53.amazonaws.com/doc/2013-04-01/"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Optional: A comment about the association request.
0000000000000000000000000000000000000000;;		Comment *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the private hosted zone that you want to associate an Amazon VPC
0000000000000000000000000000000000000000;;		// with.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Note that you can't associate a VPC with a hosted zone that doesn't have
0000000000000000000000000000000000000000;;		// an existing VPC association.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// HostedZoneId is a required field
0000000000000000000000000000000000000000;;		HostedZoneId *string `location:"uri" locationName:"Id" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that contains information about the VPC that you want to associate
0000000000000000000000000000000000000000;;		// with a private hosted zone.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// VPC is a required field
0000000000000000000000000000000000000000;;		VPC *VPC `type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AssociateVPCWithHostedZoneInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AssociateVPCWithHostedZoneInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *AssociateVPCWithHostedZoneInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "AssociateVPCWithHostedZoneInput"}
0000000000000000000000000000000000000000;;		if s.HostedZoneId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("HostedZoneId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.VPC == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("VPC"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.VPC != nil {
0000000000000000000000000000000000000000;;			if err := s.VPC.Validate(); err != nil {
0000000000000000000000000000000000000000;;				invalidParams.AddNested("VPC", err.(request.ErrInvalidParams))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetComment sets the Comment field's value.
0000000000000000000000000000000000000000;;	func (s *AssociateVPCWithHostedZoneInput) SetComment(v string) *AssociateVPCWithHostedZoneInput {
0000000000000000000000000000000000000000;;		s.Comment = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHostedZoneId sets the HostedZoneId field's value.
0000000000000000000000000000000000000000;;	func (s *AssociateVPCWithHostedZoneInput) SetHostedZoneId(v string) *AssociateVPCWithHostedZoneInput {
0000000000000000000000000000000000000000;;		s.HostedZoneId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVPC sets the VPC field's value.
0000000000000000000000000000000000000000;;	func (s *AssociateVPCWithHostedZoneInput) SetVPC(v *VPC) *AssociateVPCWithHostedZoneInput {
0000000000000000000000000000000000000000;;		s.VPC = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains the response information for the AssociateVPCWithHostedZone
0000000000000000000000000000000000000000;;	// request.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/AssociateVPCWithHostedZoneResponse
0000000000000000000000000000000000000000;;	type AssociateVPCWithHostedZoneOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that describes the changes made to your hosted zone.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ChangeInfo is a required field
0000000000000000000000000000000000000000;;		ChangeInfo *ChangeInfo `type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AssociateVPCWithHostedZoneOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AssociateVPCWithHostedZoneOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetChangeInfo sets the ChangeInfo field's value.
0000000000000000000000000000000000000000;;	func (s *AssociateVPCWithHostedZoneOutput) SetChangeInfo(v *ChangeInfo) *AssociateVPCWithHostedZoneOutput {
0000000000000000000000000000000000000000;;		s.ChangeInfo = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The information for each resource record set that you want to change.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/Change
0000000000000000000000000000000000000000;;	type Change struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The action to perform:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * CREATE: Creates a resource record set that has the specified values.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * DELETE: Deletes a existing resource record set.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// To delete the resource record set that is associated with a traffic policy
0000000000000000000000000000000000000000;;		//    instance, use DeleteTrafficPolicyInstance. Amazon Route 53 will delete
0000000000000000000000000000000000000000;;		//    the resource record set automatically. If you delete the resource record
0000000000000000000000000000000000000000;;		//    set by using ChangeResourceRecordSets, Amazon Route 53 doesn't automatically
0000000000000000000000000000000000000000;;		//    delete the traffic policy instance, and you'll continue to be charged
0000000000000000000000000000000000000000;;		//    for it even though it's no longer in use.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * UPSERT: If a resource record set doesn't already exist, Amazon Route
0000000000000000000000000000000000000000;;		//    53 creates it. If a resource record set does exist, Amazon Route 53 updates
0000000000000000000000000000000000000000;;		//    it with the values in the request.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// The values that you need to include in the request depend on the type of
0000000000000000000000000000000000000000;;		// resource record set that you're creating, deleting, or updating:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Basic resource record sets (excluding alias, failover, geolocation, latency,
0000000000000000000000000000000000000000;;		// and weighted resource record sets)
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * Name
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * Type
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * TTL
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Failover, geolocation, latency, or weighted resource record sets (excluding
0000000000000000000000000000000000000000;;		// alias resource record sets)
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * Name
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * Type
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * TTL
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * SetIdentifier
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Alias resource record sets (including failover alias, geolocation alias,
0000000000000000000000000000000000000000;;		// latency alias, and weighted alias resource record sets)
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * Name
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * Type
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * AliasTarget (includes DNSName, EvaluateTargetHealth, and HostedZoneId)
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * SetIdentifier (for failover, geolocation, latency, and weighted resource
0000000000000000000000000000000000000000;;		//    record sets)
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Action is a required field
0000000000000000000000000000000000000000;;		Action *string `type:"string" required:"true" enum:"ChangeAction"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the resource record set to create, delete, or update.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ResourceRecordSet is a required field
0000000000000000000000000000000000000000;;		ResourceRecordSet *ResourceRecordSet `type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s Change) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s Change) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *Change) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "Change"}
0000000000000000000000000000000000000000;;		if s.Action == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Action"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.ResourceRecordSet == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("ResourceRecordSet"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.ResourceRecordSet != nil {
0000000000000000000000000000000000000000;;			if err := s.ResourceRecordSet.Validate(); err != nil {
0000000000000000000000000000000000000000;;				invalidParams.AddNested("ResourceRecordSet", err.(request.ErrInvalidParams))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAction sets the Action field's value.
0000000000000000000000000000000000000000;;	func (s *Change) SetAction(v string) *Change {
0000000000000000000000000000000000000000;;		s.Action = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetResourceRecordSet sets the ResourceRecordSet field's value.
0000000000000000000000000000000000000000;;	func (s *Change) SetResourceRecordSet(v *ResourceRecordSet) *Change {
0000000000000000000000000000000000000000;;		s.ResourceRecordSet = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The information for a change request.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ChangeBatch
0000000000000000000000000000000000000000;;	type ChangeBatch struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the changes to make to the record sets.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Changes is a required field
0000000000000000000000000000000000000000;;		Changes []*Change `locationNameList:"Change" min:"1" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Optional: Any comments you want to include about a change batch request.
0000000000000000000000000000000000000000;;		Comment *string `type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ChangeBatch) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ChangeBatch) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *ChangeBatch) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "ChangeBatch"}
0000000000000000000000000000000000000000;;		if s.Changes == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Changes"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Changes != nil && len(s.Changes) < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("Changes", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Changes != nil {
0000000000000000000000000000000000000000;;			for i, v := range s.Changes {
0000000000000000000000000000000000000000;;				if v == nil {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if err := v.Validate(); err != nil {
0000000000000000000000000000000000000000;;					invalidParams.AddNested(fmt.Sprintf("%s[%v]", "Changes", i), err.(request.ErrInvalidParams))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetChanges sets the Changes field's value.
0000000000000000000000000000000000000000;;	func (s *ChangeBatch) SetChanges(v []*Change) *ChangeBatch {
0000000000000000000000000000000000000000;;		s.Changes = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetComment sets the Comment field's value.
0000000000000000000000000000000000000000;;	func (s *ChangeBatch) SetComment(v string) *ChangeBatch {
0000000000000000000000000000000000000000;;		s.Comment = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that describes change information about changes made to your
0000000000000000000000000000000000000000;;	// hosted zone.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ChangeInfo
0000000000000000000000000000000000000000;;	type ChangeInfo struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that describes change information about changes made to your
0000000000000000000000000000000000000000;;		// hosted zone.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// This element contains an ID that you use when performing a GetChange action
0000000000000000000000000000000000000000;;		// to get detailed information about the change.
0000000000000000000000000000000000000000;;		Comment *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the request.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Id is a required field
0000000000000000000000000000000000000000;;		Id *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The current state of the request. PENDING indicates that this request has
0000000000000000000000000000000000000000;;		// not yet been applied to all Amazon Route 53 DNS servers.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Status is a required field
0000000000000000000000000000000000000000;;		Status *string `type:"string" required:"true" enum:"ChangeStatus"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The date and time the change request was submitted, in Coordinated Universal
0000000000000000000000000000000000000000;;		// Time (UTC) format: YYYY-MM-DDThh:mm:ssZ. For more information, see the Wikipedia
0000000000000000000000000000000000000000;;		// entry ISO 8601 (https://en.wikipedia.org/wiki/ISO_8601).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// SubmittedAt is a required field
0000000000000000000000000000000000000000;;		SubmittedAt *time.Time `type:"timestamp" timestampFormat:"iso8601" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ChangeInfo) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ChangeInfo) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetComment sets the Comment field's value.
0000000000000000000000000000000000000000;;	func (s *ChangeInfo) SetComment(v string) *ChangeInfo {
0000000000000000000000000000000000000000;;		s.Comment = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetId sets the Id field's value.
0000000000000000000000000000000000000000;;	func (s *ChangeInfo) SetId(v string) *ChangeInfo {
0000000000000000000000000000000000000000;;		s.Id = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStatus sets the Status field's value.
0000000000000000000000000000000000000000;;	func (s *ChangeInfo) SetStatus(v string) *ChangeInfo {
0000000000000000000000000000000000000000;;		s.Status = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSubmittedAt sets the SubmittedAt field's value.
0000000000000000000000000000000000000000;;	func (s *ChangeInfo) SetSubmittedAt(v time.Time) *ChangeInfo {
0000000000000000000000000000000000000000;;		s.SubmittedAt = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains change information for the resource record set.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ChangeResourceRecordSetsRequest
0000000000000000000000000000000000000000;;	type ChangeResourceRecordSetsInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `locationName:"ChangeResourceRecordSetsRequest" type:"structure" xmlURI:"https://route53.amazonaws.com/doc/2013-04-01/"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that contains an optional comment and the Changes element.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ChangeBatch is a required field
0000000000000000000000000000000000000000;;		ChangeBatch *ChangeBatch `type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the hosted zone that contains the resource record sets that you
0000000000000000000000000000000000000000;;		// want to change.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// HostedZoneId is a required field
0000000000000000000000000000000000000000;;		HostedZoneId *string `location:"uri" locationName:"Id" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ChangeResourceRecordSetsInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ChangeResourceRecordSetsInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *ChangeResourceRecordSetsInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "ChangeResourceRecordSetsInput"}
0000000000000000000000000000000000000000;;		if s.ChangeBatch == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("ChangeBatch"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.HostedZoneId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("HostedZoneId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.ChangeBatch != nil {
0000000000000000000000000000000000000000;;			if err := s.ChangeBatch.Validate(); err != nil {
0000000000000000000000000000000000000000;;				invalidParams.AddNested("ChangeBatch", err.(request.ErrInvalidParams))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetChangeBatch sets the ChangeBatch field's value.
0000000000000000000000000000000000000000;;	func (s *ChangeResourceRecordSetsInput) SetChangeBatch(v *ChangeBatch) *ChangeResourceRecordSetsInput {
0000000000000000000000000000000000000000;;		s.ChangeBatch = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHostedZoneId sets the HostedZoneId field's value.
0000000000000000000000000000000000000000;;	func (s *ChangeResourceRecordSetsInput) SetHostedZoneId(v string) *ChangeResourceRecordSetsInput {
0000000000000000000000000000000000000000;;		s.HostedZoneId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type containing the response for the request.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ChangeResourceRecordSetsResponse
0000000000000000000000000000000000000000;;	type ChangeResourceRecordSetsOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that contains information about changes made to your hosted
0000000000000000000000000000000000000000;;		// zone.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// This element contains an ID that you use when performing a GetChange action
0000000000000000000000000000000000000000;;		// to get detailed information about the change.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ChangeInfo is a required field
0000000000000000000000000000000000000000;;		ChangeInfo *ChangeInfo `type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ChangeResourceRecordSetsOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ChangeResourceRecordSetsOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetChangeInfo sets the ChangeInfo field's value.
0000000000000000000000000000000000000000;;	func (s *ChangeResourceRecordSetsOutput) SetChangeInfo(v *ChangeInfo) *ChangeResourceRecordSetsOutput {
0000000000000000000000000000000000000000;;		s.ChangeInfo = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains information about the tags that you want to
0000000000000000000000000000000000000000;;	// add, edit, or delete.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ChangeTagsForResourceRequest
0000000000000000000000000000000000000000;;	type ChangeTagsForResourceInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `locationName:"ChangeTagsForResourceRequest" type:"structure" xmlURI:"https://route53.amazonaws.com/doc/2013-04-01/"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that contains a list of the tags that you want to add to the
0000000000000000000000000000000000000000;;		// specified health check or hosted zone and/or the tags for which you want
0000000000000000000000000000000000000000;;		// to edit the Value element.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// You can add a maximum of 10 tags to a health check or a hosted zone.
0000000000000000000000000000000000000000;;		AddTags []*Tag `locationNameList:"Tag" min:"1" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that contains a list of the tags that you want to delete from
0000000000000000000000000000000000000000;;		// the specified health check or hosted zone. You can specify up to 10 keys.
0000000000000000000000000000000000000000;;		RemoveTagKeys []*string `locationNameList:"Key" min:"1" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the resource for which you want to add, change, or delete tags.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ResourceId is a required field
0000000000000000000000000000000000000000;;		ResourceId *string `location:"uri" locationName:"ResourceId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The type of the resource.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * The resource type for health checks is healthcheck.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * The resource type for hosted zones is hostedzone.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ResourceType is a required field
0000000000000000000000000000000000000000;;		ResourceType *string `location:"uri" locationName:"ResourceType" type:"string" required:"true" enum:"TagResourceType"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ChangeTagsForResourceInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ChangeTagsForResourceInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *ChangeTagsForResourceInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "ChangeTagsForResourceInput"}
0000000000000000000000000000000000000000;;		if s.AddTags != nil && len(s.AddTags) < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("AddTags", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.RemoveTagKeys != nil && len(s.RemoveTagKeys) < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("RemoveTagKeys", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.ResourceId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("ResourceId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.ResourceType == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("ResourceType"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAddTags sets the AddTags field's value.
0000000000000000000000000000000000000000;;	func (s *ChangeTagsForResourceInput) SetAddTags(v []*Tag) *ChangeTagsForResourceInput {
0000000000000000000000000000000000000000;;		s.AddTags = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRemoveTagKeys sets the RemoveTagKeys field's value.
0000000000000000000000000000000000000000;;	func (s *ChangeTagsForResourceInput) SetRemoveTagKeys(v []*string) *ChangeTagsForResourceInput {
0000000000000000000000000000000000000000;;		s.RemoveTagKeys = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetResourceId sets the ResourceId field's value.
0000000000000000000000000000000000000000;;	func (s *ChangeTagsForResourceInput) SetResourceId(v string) *ChangeTagsForResourceInput {
0000000000000000000000000000000000000000;;		s.ResourceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetResourceType sets the ResourceType field's value.
0000000000000000000000000000000000000000;;	func (s *ChangeTagsForResourceInput) SetResourceType(v string) *ChangeTagsForResourceInput {
0000000000000000000000000000000000000000;;		s.ResourceType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Empty response for the request.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ChangeTagsForResourceResponse
0000000000000000000000000000000000000000;;	type ChangeTagsForResourceOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ChangeTagsForResourceOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ChangeTagsForResourceOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains information about the CloudWatch alarm that
0000000000000000000000000000000000000000;;	// Amazon Route 53 is monitoring for this health check.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/CloudWatchAlarmConfiguration
0000000000000000000000000000000000000000;;	type CloudWatchAlarmConfiguration struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// For the metric that the CloudWatch alarm is associated with, the arithmetic
0000000000000000000000000000000000000000;;		// operation that is used for the comparison.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ComparisonOperator is a required field
0000000000000000000000000000000000000000;;		ComparisonOperator *string `type:"string" required:"true" enum:"ComparisonOperator"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// For the metric that the CloudWatch alarm is associated with, a complex type
0000000000000000000000000000000000000000;;		// that contains information about the dimensions for the metric.For information,
0000000000000000000000000000000000000000;;		// see Amazon CloudWatch Namespaces, Dimensions, and Metrics Reference ( http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html)
0000000000000000000000000000000000000000;;		// in the Amazon CloudWatch User Guide.
0000000000000000000000000000000000000000;;		Dimensions []*Dimension `locationNameList:"Dimension" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// For the metric that the CloudWatch alarm is associated with, the number of
0000000000000000000000000000000000000000;;		// periods that the metric is compared to the threshold.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// EvaluationPeriods is a required field
0000000000000000000000000000000000000000;;		EvaluationPeriods *int64 `min:"1" type:"integer" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the CloudWatch metric that the alarm is associated with.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// MetricName is a required field
0000000000000000000000000000000000000000;;		MetricName *string `min:"1" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The namespace of the metric that the alarm is associated with. For more information,
0000000000000000000000000000000000000000;;		// see Amazon CloudWatch Namespaces, Dimensions, and Metrics Reference (http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html)
0000000000000000000000000000000000000000;;		// in the Amazon CloudWatch User Guide.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Namespace is a required field
0000000000000000000000000000000000000000;;		Namespace *string `min:"1" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// For the metric that the CloudWatch alarm is associated with, the duration
0000000000000000000000000000000000000000;;		// of one evaluation period in seconds.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Period is a required field
0000000000000000000000000000000000000000;;		Period *int64 `min:"60" type:"integer" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// For the metric that the CloudWatch alarm is associated with, the statistic
0000000000000000000000000000000000000000;;		// that is applied to the metric.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Statistic is a required field
0000000000000000000000000000000000000000;;		Statistic *string `type:"string" required:"true" enum:"Statistic"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// For the metric that the CloudWatch alarm is associated with, the value the
0000000000000000000000000000000000000000;;		// metric is compared with.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Threshold is a required field
0000000000000000000000000000000000000000;;		Threshold *float64 `type:"double" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CloudWatchAlarmConfiguration) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CloudWatchAlarmConfiguration) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetComparisonOperator sets the ComparisonOperator field's value.
0000000000000000000000000000000000000000;;	func (s *CloudWatchAlarmConfiguration) SetComparisonOperator(v string) *CloudWatchAlarmConfiguration {
0000000000000000000000000000000000000000;;		s.ComparisonOperator = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDimensions sets the Dimensions field's value.
0000000000000000000000000000000000000000;;	func (s *CloudWatchAlarmConfiguration) SetDimensions(v []*Dimension) *CloudWatchAlarmConfiguration {
0000000000000000000000000000000000000000;;		s.Dimensions = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEvaluationPeriods sets the EvaluationPeriods field's value.
0000000000000000000000000000000000000000;;	func (s *CloudWatchAlarmConfiguration) SetEvaluationPeriods(v int64) *CloudWatchAlarmConfiguration {
0000000000000000000000000000000000000000;;		s.EvaluationPeriods = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMetricName sets the MetricName field's value.
0000000000000000000000000000000000000000;;	func (s *CloudWatchAlarmConfiguration) SetMetricName(v string) *CloudWatchAlarmConfiguration {
0000000000000000000000000000000000000000;;		s.MetricName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNamespace sets the Namespace field's value.
0000000000000000000000000000000000000000;;	func (s *CloudWatchAlarmConfiguration) SetNamespace(v string) *CloudWatchAlarmConfiguration {
0000000000000000000000000000000000000000;;		s.Namespace = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPeriod sets the Period field's value.
0000000000000000000000000000000000000000;;	func (s *CloudWatchAlarmConfiguration) SetPeriod(v int64) *CloudWatchAlarmConfiguration {
0000000000000000000000000000000000000000;;		s.Period = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStatistic sets the Statistic field's value.
0000000000000000000000000000000000000000;;	func (s *CloudWatchAlarmConfiguration) SetStatistic(v string) *CloudWatchAlarmConfiguration {
0000000000000000000000000000000000000000;;		s.Statistic = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetThreshold sets the Threshold field's value.
0000000000000000000000000000000000000000;;	func (s *CloudWatchAlarmConfiguration) SetThreshold(v float64) *CloudWatchAlarmConfiguration {
0000000000000000000000000000000000000000;;		s.Threshold = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains the health check request information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/CreateHealthCheckRequest
0000000000000000000000000000000000000000;;	type CreateHealthCheckInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `locationName:"CreateHealthCheckRequest" type:"structure" xmlURI:"https://route53.amazonaws.com/doc/2013-04-01/"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A unique string that identifies the request and that allows failed CreateHealthCheck
0000000000000000000000000000000000000000;;		// requests to be retried without the risk of executing the operation twice.
0000000000000000000000000000000000000000;;		// You must use a unique CallerReference string every time you create a health
0000000000000000000000000000000000000000;;		// check.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// CallerReference is a required field
0000000000000000000000000000000000000000;;		CallerReference *string `min:"1" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that contains the response to a CreateHealthCheck request.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// HealthCheckConfig is a required field
0000000000000000000000000000000000000000;;		HealthCheckConfig *HealthCheckConfig `type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateHealthCheckInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateHealthCheckInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *CreateHealthCheckInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "CreateHealthCheckInput"}
0000000000000000000000000000000000000000;;		if s.CallerReference == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("CallerReference"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.CallerReference != nil && len(*s.CallerReference) < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("CallerReference", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.HealthCheckConfig == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("HealthCheckConfig"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.HealthCheckConfig != nil {
0000000000000000000000000000000000000000;;			if err := s.HealthCheckConfig.Validate(); err != nil {
0000000000000000000000000000000000000000;;				invalidParams.AddNested("HealthCheckConfig", err.(request.ErrInvalidParams))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCallerReference sets the CallerReference field's value.
0000000000000000000000000000000000000000;;	func (s *CreateHealthCheckInput) SetCallerReference(v string) *CreateHealthCheckInput {
0000000000000000000000000000000000000000;;		s.CallerReference = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHealthCheckConfig sets the HealthCheckConfig field's value.
0000000000000000000000000000000000000000;;	func (s *CreateHealthCheckInput) SetHealthCheckConfig(v *HealthCheckConfig) *CreateHealthCheckInput {
0000000000000000000000000000000000000000;;		s.HealthCheckConfig = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type containing the response information for the new health check.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/CreateHealthCheckResponse
0000000000000000000000000000000000000000;;	type CreateHealthCheckOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that contains identifying information about the health check.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// HealthCheck is a required field
0000000000000000000000000000000000000000;;		HealthCheck *HealthCheck `type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The unique URL representing the new health check.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Location is a required field
0000000000000000000000000000000000000000;;		Location *string `location:"header" locationName:"Location" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateHealthCheckOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateHealthCheckOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHealthCheck sets the HealthCheck field's value.
0000000000000000000000000000000000000000;;	func (s *CreateHealthCheckOutput) SetHealthCheck(v *HealthCheck) *CreateHealthCheckOutput {
0000000000000000000000000000000000000000;;		s.HealthCheck = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetLocation sets the Location field's value.
0000000000000000000000000000000000000000;;	func (s *CreateHealthCheckOutput) SetLocation(v string) *CreateHealthCheckOutput {
0000000000000000000000000000000000000000;;		s.Location = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type containing the hosted zone request information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/CreateHostedZoneRequest
0000000000000000000000000000000000000000;;	type CreateHostedZoneInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `locationName:"CreateHostedZoneRequest" type:"structure" xmlURI:"https://route53.amazonaws.com/doc/2013-04-01/"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A unique string that identifies the request and that allows failed CreateHostedZone
0000000000000000000000000000000000000000;;		// requests to be retried without the risk of executing the operation twice.
0000000000000000000000000000000000000000;;		// You must use a unique CallerReference string every time you create a hosted
0000000000000000000000000000000000000000;;		// zone. CallerReference can be any unique string, for example, a date/time
0000000000000000000000000000000000000000;;		// stamp.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// CallerReference is a required field
0000000000000000000000000000000000000000;;		CallerReference *string `min:"1" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If you want to associate a reusable delegation set with this hosted zone,
0000000000000000000000000000000000000000;;		// the ID that Amazon Route 53 assigned to the reusable delegation set when
0000000000000000000000000000000000000000;;		// you created it. For more information about reusable delegation sets, see
0000000000000000000000000000000000000000;;		// CreateReusableDelegationSet.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// TypeString
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// DefaultNone
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ParentCreatedHostedZoneRequest
0000000000000000000000000000000000000000;;		DelegationSetId *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// (Optional) A complex type that contains an optional comment about your hosted
0000000000000000000000000000000000000000;;		// zone. If you don't want to specify a comment, omit both the HostedZoneConfig
0000000000000000000000000000000000000000;;		// and Comment elements.
0000000000000000000000000000000000000000;;		HostedZoneConfig *HostedZoneConfig `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the domain. For resource record types that include a domain name,
0000000000000000000000000000000000000000;;		// specify a fully qualified domain name, for example, www.example.com. The
0000000000000000000000000000000000000000;;		// trailing dot is optional; Amazon Route 53 assumes that the domain name is
0000000000000000000000000000000000000000;;		// fully qualified. This means that Amazon Route 53 treats www.example.com (without
0000000000000000000000000000000000000000;;		// a trailing dot) and www.example.com. (with a trailing dot) as identical.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If you're creating a public hosted zone, this is the name you have registered
0000000000000000000000000000000000000000;;		// with your DNS registrar. If your domain name is registered with a registrar
0000000000000000000000000000000000000000;;		// other than Amazon Route 53, change the name servers for your domain to the
0000000000000000000000000000000000000000;;		// set of NameServers that CreateHostedZone returns in the DelegationSet element.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Name is a required field
0000000000000000000000000000000000000000;;		Name *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The VPC that you want your hosted zone to be associated with. By providing
0000000000000000000000000000000000000000;;		// this parameter, your newly created hosted can't be resolved anywhere other
0000000000000000000000000000000000000000;;		// than the given VPC.
0000000000000000000000000000000000000000;;		VPC *VPC `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateHostedZoneInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateHostedZoneInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *CreateHostedZoneInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "CreateHostedZoneInput"}
0000000000000000000000000000000000000000;;		if s.CallerReference == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("CallerReference"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.CallerReference != nil && len(*s.CallerReference) < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("CallerReference", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Name == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Name"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.VPC != nil {
0000000000000000000000000000000000000000;;			if err := s.VPC.Validate(); err != nil {
0000000000000000000000000000000000000000;;				invalidParams.AddNested("VPC", err.(request.ErrInvalidParams))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCallerReference sets the CallerReference field's value.
0000000000000000000000000000000000000000;;	func (s *CreateHostedZoneInput) SetCallerReference(v string) *CreateHostedZoneInput {
0000000000000000000000000000000000000000;;		s.CallerReference = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDelegationSetId sets the DelegationSetId field's value.
0000000000000000000000000000000000000000;;	func (s *CreateHostedZoneInput) SetDelegationSetId(v string) *CreateHostedZoneInput {
0000000000000000000000000000000000000000;;		s.DelegationSetId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHostedZoneConfig sets the HostedZoneConfig field's value.
0000000000000000000000000000000000000000;;	func (s *CreateHostedZoneInput) SetHostedZoneConfig(v *HostedZoneConfig) *CreateHostedZoneInput {
0000000000000000000000000000000000000000;;		s.HostedZoneConfig = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetName sets the Name field's value.
0000000000000000000000000000000000000000;;	func (s *CreateHostedZoneInput) SetName(v string) *CreateHostedZoneInput {
0000000000000000000000000000000000000000;;		s.Name = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVPC sets the VPC field's value.
0000000000000000000000000000000000000000;;	func (s *CreateHostedZoneInput) SetVPC(v *VPC) *CreateHostedZoneInput {
0000000000000000000000000000000000000000;;		s.VPC = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type containing the response information for the hosted zone.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/CreateHostedZoneResponse
0000000000000000000000000000000000000000;;	type CreateHostedZoneOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that describes the changes made to your hosted zone.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ChangeInfo is a required field
0000000000000000000000000000000000000000;;		ChangeInfo *ChangeInfo `type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that describes the name servers for this hosted zone.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// DelegationSet is a required field
0000000000000000000000000000000000000000;;		DelegationSet *DelegationSet `type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that contains general information about the hosted zone.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// HostedZone is a required field
0000000000000000000000000000000000000000;;		HostedZone *HostedZone `type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The unique URL representing the new hosted zone.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Location is a required field
0000000000000000000000000000000000000000;;		Location *string `location:"header" locationName:"Location" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that contains information about an Amazon VPC that you associated
0000000000000000000000000000000000000000;;		// with this hosted zone.
0000000000000000000000000000000000000000;;		VPC *VPC `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateHostedZoneOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateHostedZoneOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetChangeInfo sets the ChangeInfo field's value.
0000000000000000000000000000000000000000;;	func (s *CreateHostedZoneOutput) SetChangeInfo(v *ChangeInfo) *CreateHostedZoneOutput {
0000000000000000000000000000000000000000;;		s.ChangeInfo = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDelegationSet sets the DelegationSet field's value.
0000000000000000000000000000000000000000;;	func (s *CreateHostedZoneOutput) SetDelegationSet(v *DelegationSet) *CreateHostedZoneOutput {
0000000000000000000000000000000000000000;;		s.DelegationSet = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHostedZone sets the HostedZone field's value.
0000000000000000000000000000000000000000;;	func (s *CreateHostedZoneOutput) SetHostedZone(v *HostedZone) *CreateHostedZoneOutput {
0000000000000000000000000000000000000000;;		s.HostedZone = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetLocation sets the Location field's value.
0000000000000000000000000000000000000000;;	func (s *CreateHostedZoneOutput) SetLocation(v string) *CreateHostedZoneOutput {
0000000000000000000000000000000000000000;;		s.Location = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVPC sets the VPC field's value.
0000000000000000000000000000000000000000;;	func (s *CreateHostedZoneOutput) SetVPC(v *VPC) *CreateHostedZoneOutput {
0000000000000000000000000000000000000000;;		s.VPC = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/CreateReusableDelegationSetRequest
0000000000000000000000000000000000000000;;	type CreateReusableDelegationSetInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `locationName:"CreateReusableDelegationSetRequest" type:"structure" xmlURI:"https://route53.amazonaws.com/doc/2013-04-01/"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A unique string that identifies the request, and that allows you to retry
0000000000000000000000000000000000000000;;		// failed CreateReusableDelegationSet requests without the risk of executing
0000000000000000000000000000000000000000;;		// the operation twice. You must use a unique CallerReference string every time
0000000000000000000000000000000000000000;;		// you submit a CreateReusableDelegationSet request. CallerReference can be
0000000000000000000000000000000000000000;;		// any unique string, for example a date/time stamp.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// CallerReference is a required field
0000000000000000000000000000000000000000;;		CallerReference *string `min:"1" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If you want to mark the delegation set for an existing hosted zone as reusable,
0000000000000000000000000000000000000000;;		// the ID for that hosted zone.
0000000000000000000000000000000000000000;;		HostedZoneId *string `type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateReusableDelegationSetInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateReusableDelegationSetInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *CreateReusableDelegationSetInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "CreateReusableDelegationSetInput"}
0000000000000000000000000000000000000000;;		if s.CallerReference == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("CallerReference"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.CallerReference != nil && len(*s.CallerReference) < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("CallerReference", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCallerReference sets the CallerReference field's value.
0000000000000000000000000000000000000000;;	func (s *CreateReusableDelegationSetInput) SetCallerReference(v string) *CreateReusableDelegationSetInput {
0000000000000000000000000000000000000000;;		s.CallerReference = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHostedZoneId sets the HostedZoneId field's value.
0000000000000000000000000000000000000000;;	func (s *CreateReusableDelegationSetInput) SetHostedZoneId(v string) *CreateReusableDelegationSetInput {
0000000000000000000000000000000000000000;;		s.HostedZoneId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/CreateReusableDelegationSetResponse
0000000000000000000000000000000000000000;;	type CreateReusableDelegationSetOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that contains name server information.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// DelegationSet is a required field
0000000000000000000000000000000000000000;;		DelegationSet *DelegationSet `type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The unique URL representing the new reusable delegation set.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Location is a required field
0000000000000000000000000000000000000000;;		Location *string `location:"header" locationName:"Location" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateReusableDelegationSetOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateReusableDelegationSetOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDelegationSet sets the DelegationSet field's value.
0000000000000000000000000000000000000000;;	func (s *CreateReusableDelegationSetOutput) SetDelegationSet(v *DelegationSet) *CreateReusableDelegationSetOutput {
0000000000000000000000000000000000000000;;		s.DelegationSet = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetLocation sets the Location field's value.
0000000000000000000000000000000000000000;;	func (s *CreateReusableDelegationSetOutput) SetLocation(v string) *CreateReusableDelegationSetOutput {
0000000000000000000000000000000000000000;;		s.Location = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains information about the traffic policy that you
0000000000000000000000000000000000000000;;	// want to create.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/CreateTrafficPolicyRequest
0000000000000000000000000000000000000000;;	type CreateTrafficPolicyInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `locationName:"CreateTrafficPolicyRequest" type:"structure" xmlURI:"https://route53.amazonaws.com/doc/2013-04-01/"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// (Optional) Any comments that you want to include about the traffic policy.
0000000000000000000000000000000000000000;;		Comment *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The definition of this traffic policy in JSON format. For more information,
0000000000000000000000000000000000000000;;		// see Traffic Policy Document Format (http://docs.aws.amazon.com/Route53/latest/APIReference/api-policies-traffic-policy-document-format.html).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Document is a required field
0000000000000000000000000000000000000000;;		Document *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the traffic policy.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Name is a required field
0000000000000000000000000000000000000000;;		Name *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateTrafficPolicyInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateTrafficPolicyInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *CreateTrafficPolicyInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "CreateTrafficPolicyInput"}
0000000000000000000000000000000000000000;;		if s.Document == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Document"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Name == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Name"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetComment sets the Comment field's value.
0000000000000000000000000000000000000000;;	func (s *CreateTrafficPolicyInput) SetComment(v string) *CreateTrafficPolicyInput {
0000000000000000000000000000000000000000;;		s.Comment = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDocument sets the Document field's value.
0000000000000000000000000000000000000000;;	func (s *CreateTrafficPolicyInput) SetDocument(v string) *CreateTrafficPolicyInput {
0000000000000000000000000000000000000000;;		s.Document = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetName sets the Name field's value.
0000000000000000000000000000000000000000;;	func (s *CreateTrafficPolicyInput) SetName(v string) *CreateTrafficPolicyInput {
0000000000000000000000000000000000000000;;		s.Name = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains information about the resource record sets that
0000000000000000000000000000000000000000;;	// you want to create based on a specified traffic policy.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/CreateTrafficPolicyInstanceRequest
0000000000000000000000000000000000000000;;	type CreateTrafficPolicyInstanceInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `locationName:"CreateTrafficPolicyInstanceRequest" type:"structure" xmlURI:"https://route53.amazonaws.com/doc/2013-04-01/"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the hosted zone in which you want Amazon Route 53 to create resource
0000000000000000000000000000000000000000;;		// record sets by using the configuration in a traffic policy.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// HostedZoneId is a required field
0000000000000000000000000000000000000000;;		HostedZoneId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The domain name (such as example.com) or subdomain name (such as www.example.com)
0000000000000000000000000000000000000000;;		// for which Amazon Route 53 responds to DNS queries by using the resource record
0000000000000000000000000000000000000000;;		// sets that Amazon Route 53 creates for this traffic policy instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Name is a required field
0000000000000000000000000000000000000000;;		Name *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// (Optional) The TTL that you want Amazon Route 53 to assign to all of the
0000000000000000000000000000000000000000;;		// resource record sets that it creates in the specified hosted zone.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// TTL is a required field
0000000000000000000000000000000000000000;;		TTL *int64 `type:"long" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the traffic policy that you want to use to create resource record
0000000000000000000000000000000000000000;;		// sets in the specified hosted zone.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// TrafficPolicyId is a required field
0000000000000000000000000000000000000000;;		TrafficPolicyId *string `min:"1" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The version of the traffic policy that you want to use to create resource
0000000000000000000000000000000000000000;;		// record sets in the specified hosted zone.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// TrafficPolicyVersion is a required field
0000000000000000000000000000000000000000;;		TrafficPolicyVersion *int64 `min:"1" type:"integer" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateTrafficPolicyInstanceInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateTrafficPolicyInstanceInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *CreateTrafficPolicyInstanceInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "CreateTrafficPolicyInstanceInput"}
0000000000000000000000000000000000000000;;		if s.HostedZoneId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("HostedZoneId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Name == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Name"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.TTL == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("TTL"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.TrafficPolicyId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("TrafficPolicyId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.TrafficPolicyId != nil && len(*s.TrafficPolicyId) < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("TrafficPolicyId", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.TrafficPolicyVersion == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("TrafficPolicyVersion"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.TrafficPolicyVersion != nil && *s.TrafficPolicyVersion < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinValue("TrafficPolicyVersion", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHostedZoneId sets the HostedZoneId field's value.
0000000000000000000000000000000000000000;;	func (s *CreateTrafficPolicyInstanceInput) SetHostedZoneId(v string) *CreateTrafficPolicyInstanceInput {
0000000000000000000000000000000000000000;;		s.HostedZoneId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetName sets the Name field's value.
0000000000000000000000000000000000000000;;	func (s *CreateTrafficPolicyInstanceInput) SetName(v string) *CreateTrafficPolicyInstanceInput {
0000000000000000000000000000000000000000;;		s.Name = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTTL sets the TTL field's value.
0000000000000000000000000000000000000000;;	func (s *CreateTrafficPolicyInstanceInput) SetTTL(v int64) *CreateTrafficPolicyInstanceInput {
0000000000000000000000000000000000000000;;		s.TTL = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTrafficPolicyId sets the TrafficPolicyId field's value.
0000000000000000000000000000000000000000;;	func (s *CreateTrafficPolicyInstanceInput) SetTrafficPolicyId(v string) *CreateTrafficPolicyInstanceInput {
0000000000000000000000000000000000000000;;		s.TrafficPolicyId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTrafficPolicyVersion sets the TrafficPolicyVersion field's value.
0000000000000000000000000000000000000000;;	func (s *CreateTrafficPolicyInstanceInput) SetTrafficPolicyVersion(v int64) *CreateTrafficPolicyInstanceInput {
0000000000000000000000000000000000000000;;		s.TrafficPolicyVersion = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains the response information for the CreateTrafficPolicyInstance
0000000000000000000000000000000000000000;;	// request.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/CreateTrafficPolicyInstanceResponse
0000000000000000000000000000000000000000;;	type CreateTrafficPolicyInstanceOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A unique URL that represents a new traffic policy instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Location is a required field
0000000000000000000000000000000000000000;;		Location *string `location:"header" locationName:"Location" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that contains settings for the new traffic policy instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// TrafficPolicyInstance is a required field
0000000000000000000000000000000000000000;;		TrafficPolicyInstance *TrafficPolicyInstance `type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateTrafficPolicyInstanceOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateTrafficPolicyInstanceOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetLocation sets the Location field's value.
0000000000000000000000000000000000000000;;	func (s *CreateTrafficPolicyInstanceOutput) SetLocation(v string) *CreateTrafficPolicyInstanceOutput {
0000000000000000000000000000000000000000;;		s.Location = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTrafficPolicyInstance sets the TrafficPolicyInstance field's value.
0000000000000000000000000000000000000000;;	func (s *CreateTrafficPolicyInstanceOutput) SetTrafficPolicyInstance(v *TrafficPolicyInstance) *CreateTrafficPolicyInstanceOutput {
0000000000000000000000000000000000000000;;		s.TrafficPolicyInstance = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains the response information for the CreateTrafficPolicy
0000000000000000000000000000000000000000;;	// request.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/CreateTrafficPolicyResponse
0000000000000000000000000000000000000000;;	type CreateTrafficPolicyOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A unique URL that represents a new traffic policy.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Location is a required field
0000000000000000000000000000000000000000;;		Location *string `location:"header" locationName:"Location" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that contains settings for the new traffic policy.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// TrafficPolicy is a required field
0000000000000000000000000000000000000000;;		TrafficPolicy *TrafficPolicy `type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateTrafficPolicyOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateTrafficPolicyOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetLocation sets the Location field's value.
0000000000000000000000000000000000000000;;	func (s *CreateTrafficPolicyOutput) SetLocation(v string) *CreateTrafficPolicyOutput {
0000000000000000000000000000000000000000;;		s.Location = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTrafficPolicy sets the TrafficPolicy field's value.
0000000000000000000000000000000000000000;;	func (s *CreateTrafficPolicyOutput) SetTrafficPolicy(v *TrafficPolicy) *CreateTrafficPolicyOutput {
0000000000000000000000000000000000000000;;		s.TrafficPolicy = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains information about the traffic policy for which
0000000000000000000000000000000000000000;;	// you want to create a new version.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/CreateTrafficPolicyVersionRequest
0000000000000000000000000000000000000000;;	type CreateTrafficPolicyVersionInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `locationName:"CreateTrafficPolicyVersionRequest" type:"structure" xmlURI:"https://route53.amazonaws.com/doc/2013-04-01/"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The comment that you specified in the CreateTrafficPolicyVersion request,
0000000000000000000000000000000000000000;;		// if any.
0000000000000000000000000000000000000000;;		Comment *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The definition of this version of the traffic policy, in JSON format. You
0000000000000000000000000000000000000000;;		// specified the JSON in the CreateTrafficPolicyVersion request. For more information
0000000000000000000000000000000000000000;;		// about the JSON format, see CreateTrafficPolicy.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Document is a required field
0000000000000000000000000000000000000000;;		Document *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the traffic policy for which you want to create a new version.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Id is a required field
0000000000000000000000000000000000000000;;		Id *string `location:"uri" locationName:"Id" min:"1" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateTrafficPolicyVersionInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateTrafficPolicyVersionInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *CreateTrafficPolicyVersionInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "CreateTrafficPolicyVersionInput"}
0000000000000000000000000000000000000000;;		if s.Document == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Document"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Id == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Id"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Id != nil && len(*s.Id) < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("Id", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetComment sets the Comment field's value.
0000000000000000000000000000000000000000;;	func (s *CreateTrafficPolicyVersionInput) SetComment(v string) *CreateTrafficPolicyVersionInput {
0000000000000000000000000000000000000000;;		s.Comment = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDocument sets the Document field's value.
0000000000000000000000000000000000000000;;	func (s *CreateTrafficPolicyVersionInput) SetDocument(v string) *CreateTrafficPolicyVersionInput {
0000000000000000000000000000000000000000;;		s.Document = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetId sets the Id field's value.
0000000000000000000000000000000000000000;;	func (s *CreateTrafficPolicyVersionInput) SetId(v string) *CreateTrafficPolicyVersionInput {
0000000000000000000000000000000000000000;;		s.Id = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains the response information for the CreateTrafficPolicyVersion
0000000000000000000000000000000000000000;;	// request.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/CreateTrafficPolicyVersionResponse
0000000000000000000000000000000000000000;;	type CreateTrafficPolicyVersionOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A unique URL that represents a new traffic policy version.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Location is a required field
0000000000000000000000000000000000000000;;		Location *string `location:"header" locationName:"Location" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that contains settings for the new version of the traffic
0000000000000000000000000000000000000000;;		// policy.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// TrafficPolicy is a required field
0000000000000000000000000000000000000000;;		TrafficPolicy *TrafficPolicy `type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateTrafficPolicyVersionOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateTrafficPolicyVersionOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetLocation sets the Location field's value.
0000000000000000000000000000000000000000;;	func (s *CreateTrafficPolicyVersionOutput) SetLocation(v string) *CreateTrafficPolicyVersionOutput {
0000000000000000000000000000000000000000;;		s.Location = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTrafficPolicy sets the TrafficPolicy field's value.
0000000000000000000000000000000000000000;;	func (s *CreateTrafficPolicyVersionOutput) SetTrafficPolicy(v *TrafficPolicy) *CreateTrafficPolicyVersionOutput {
0000000000000000000000000000000000000000;;		s.TrafficPolicy = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains information about the request to authorize associating
0000000000000000000000000000000000000000;;	// a VPC with your private hosted zone. Authorization is only required when
0000000000000000000000000000000000000000;;	// a private hosted zone and a VPC were created by using different accounts.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/CreateVPCAssociationAuthorizationRequest
0000000000000000000000000000000000000000;;	type CreateVPCAssociationAuthorizationInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `locationName:"CreateVPCAssociationAuthorizationRequest" type:"structure" xmlURI:"https://route53.amazonaws.com/doc/2013-04-01/"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the private hosted zone that you want to authorize associating
0000000000000000000000000000000000000000;;		// a VPC with.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// HostedZoneId is a required field
0000000000000000000000000000000000000000;;		HostedZoneId *string `location:"uri" locationName:"Id" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that contains the VPC ID and region for the VPC that you want
0000000000000000000000000000000000000000;;		// to authorize associating with your hosted zone.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// VPC is a required field
0000000000000000000000000000000000000000;;		VPC *VPC `type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateVPCAssociationAuthorizationInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateVPCAssociationAuthorizationInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *CreateVPCAssociationAuthorizationInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "CreateVPCAssociationAuthorizationInput"}
0000000000000000000000000000000000000000;;		if s.HostedZoneId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("HostedZoneId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.VPC == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("VPC"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.VPC != nil {
0000000000000000000000000000000000000000;;			if err := s.VPC.Validate(); err != nil {
0000000000000000000000000000000000000000;;				invalidParams.AddNested("VPC", err.(request.ErrInvalidParams))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHostedZoneId sets the HostedZoneId field's value.
0000000000000000000000000000000000000000;;	func (s *CreateVPCAssociationAuthorizationInput) SetHostedZoneId(v string) *CreateVPCAssociationAuthorizationInput {
0000000000000000000000000000000000000000;;		s.HostedZoneId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVPC sets the VPC field's value.
0000000000000000000000000000000000000000;;	func (s *CreateVPCAssociationAuthorizationInput) SetVPC(v *VPC) *CreateVPCAssociationAuthorizationInput {
0000000000000000000000000000000000000000;;		s.VPC = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains the response information from a CreateVPCAssociationAuthorization
0000000000000000000000000000000000000000;;	// request.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/CreateVPCAssociationAuthorizationResponse
0000000000000000000000000000000000000000;;	type CreateVPCAssociationAuthorizationOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the hosted zone that you authorized associating a VPC with.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// HostedZoneId is a required field
0000000000000000000000000000000000000000;;		HostedZoneId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The VPC that you authorized associating with a hosted zone.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// VPC is a required field
0000000000000000000000000000000000000000;;		VPC *VPC `type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateVPCAssociationAuthorizationOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s CreateVPCAssociationAuthorizationOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHostedZoneId sets the HostedZoneId field's value.
0000000000000000000000000000000000000000;;	func (s *CreateVPCAssociationAuthorizationOutput) SetHostedZoneId(v string) *CreateVPCAssociationAuthorizationOutput {
0000000000000000000000000000000000000000;;		s.HostedZoneId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVPC sets the VPC field's value.
0000000000000000000000000000000000000000;;	func (s *CreateVPCAssociationAuthorizationOutput) SetVPC(v *VPC) *CreateVPCAssociationAuthorizationOutput {
0000000000000000000000000000000000000000;;		s.VPC = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that describes the name servers for this hosted zone.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/DelegationSet
0000000000000000000000000000000000000000;;	type DelegationSet struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A unique string that identifies the request, and that allows you to retry
0000000000000000000000000000000000000000;;		// failed CreateReusableDelegationSet requests without the risk of executing
0000000000000000000000000000000000000000;;		// the operation twice. You must use a unique CallerReference string every time
0000000000000000000000000000000000000000;;		// you submit a CreateReusableDelegationSet request. CallerReference can be
0000000000000000000000000000000000000000;;		// any unique string, for example, a date/time stamp.
0000000000000000000000000000000000000000;;		CallerReference *string `min:"1" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID that Amazon Route 53 assigns to a reusable delegation set.
0000000000000000000000000000000000000000;;		Id *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that contains a list of the authoritative name servers for
0000000000000000000000000000000000000000;;		// the hosted zone.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// NameServers is a required field
0000000000000000000000000000000000000000;;		NameServers []*string `locationNameList:"NameServer" min:"1" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DelegationSet) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DelegationSet) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCallerReference sets the CallerReference field's value.
0000000000000000000000000000000000000000;;	func (s *DelegationSet) SetCallerReference(v string) *DelegationSet {
0000000000000000000000000000000000000000;;		s.CallerReference = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetId sets the Id field's value.
0000000000000000000000000000000000000000;;	func (s *DelegationSet) SetId(v string) *DelegationSet {
0000000000000000000000000000000000000000;;		s.Id = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNameServers sets the NameServers field's value.
0000000000000000000000000000000000000000;;	func (s *DelegationSet) SetNameServers(v []*string) *DelegationSet {
0000000000000000000000000000000000000000;;		s.NameServers = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This action deletes a health check. Send a DELETE request to the /2013-04-01/DeleteHealthCheckRequest
0000000000000000000000000000000000000000;;	// resource.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/DeleteHealthCheckRequest
0000000000000000000000000000000000000000;;	type DeleteHealthCheckInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the health check that you want to delete.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// HealthCheckId is a required field
0000000000000000000000000000000000000000;;		HealthCheckId *string `location:"uri" locationName:"HealthCheckId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteHealthCheckInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteHealthCheckInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DeleteHealthCheckInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DeleteHealthCheckInput"}
0000000000000000000000000000000000000000;;		if s.HealthCheckId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("HealthCheckId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHealthCheckId sets the HealthCheckId field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteHealthCheckInput) SetHealthCheckId(v string) *DeleteHealthCheckInput {
0000000000000000000000000000000000000000;;		s.HealthCheckId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// An empty element.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/DeleteHealthCheckResponse
0000000000000000000000000000000000000000;;	type DeleteHealthCheckOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteHealthCheckOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteHealthCheckOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains information about the hosted zone that you want
0000000000000000000000000000000000000000;;	// to delete.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/DeleteHostedZoneRequest
0000000000000000000000000000000000000000;;	type DeleteHostedZoneInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the hosted zone you want to delete.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Id is a required field
0000000000000000000000000000000000000000;;		Id *string `location:"uri" locationName:"Id" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteHostedZoneInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteHostedZoneInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DeleteHostedZoneInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DeleteHostedZoneInput"}
0000000000000000000000000000000000000000;;		if s.Id == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Id"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetId sets the Id field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteHostedZoneInput) SetId(v string) *DeleteHostedZoneInput {
0000000000000000000000000000000000000000;;		s.Id = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type containing the response information for the request.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/DeleteHostedZoneResponse
0000000000000000000000000000000000000000;;	type DeleteHostedZoneOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that contains the ID, the status, and the date and time of
0000000000000000000000000000000000000000;;		// your delete request.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ChangeInfo is a required field
0000000000000000000000000000000000000000;;		ChangeInfo *ChangeInfo `type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteHostedZoneOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteHostedZoneOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetChangeInfo sets the ChangeInfo field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteHostedZoneOutput) SetChangeInfo(v *ChangeInfo) *DeleteHostedZoneOutput {
0000000000000000000000000000000000000000;;		s.ChangeInfo = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type containing the information for the delete request.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/DeleteReusableDelegationSetRequest
0000000000000000000000000000000000000000;;	type DeleteReusableDelegationSetInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the reusable delegation set you want to delete.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Id is a required field
0000000000000000000000000000000000000000;;		Id *string `location:"uri" locationName:"Id" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteReusableDelegationSetInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteReusableDelegationSetInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DeleteReusableDelegationSetInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DeleteReusableDelegationSetInput"}
0000000000000000000000000000000000000000;;		if s.Id == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Id"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetId sets the Id field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteReusableDelegationSetInput) SetId(v string) *DeleteReusableDelegationSetInput {
0000000000000000000000000000000000000000;;		s.Id = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// An empty element.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/DeleteReusableDelegationSetResponse
0000000000000000000000000000000000000000;;	type DeleteReusableDelegationSetOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteReusableDelegationSetOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteReusableDelegationSetOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A request to delete a specified traffic policy version.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/DeleteTrafficPolicyRequest
0000000000000000000000000000000000000000;;	type DeleteTrafficPolicyInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the traffic policy that you want to delete.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Id is a required field
0000000000000000000000000000000000000000;;		Id *string `location:"uri" locationName:"Id" min:"1" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The version number of the traffic policy that you want to delete.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Version is a required field
0000000000000000000000000000000000000000;;		Version *int64 `location:"uri" locationName:"Version" min:"1" type:"integer" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteTrafficPolicyInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteTrafficPolicyInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DeleteTrafficPolicyInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DeleteTrafficPolicyInput"}
0000000000000000000000000000000000000000;;		if s.Id == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Id"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Id != nil && len(*s.Id) < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("Id", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Version == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Version"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Version != nil && *s.Version < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinValue("Version", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetId sets the Id field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteTrafficPolicyInput) SetId(v string) *DeleteTrafficPolicyInput {
0000000000000000000000000000000000000000;;		s.Id = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVersion sets the Version field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteTrafficPolicyInput) SetVersion(v int64) *DeleteTrafficPolicyInput {
0000000000000000000000000000000000000000;;		s.Version = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains information about the traffic policy instance
0000000000000000000000000000000000000000;;	// that you want to delete.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/DeleteTrafficPolicyInstanceRequest
0000000000000000000000000000000000000000;;	type DeleteTrafficPolicyInstanceInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the traffic policy instance that you want to delete.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// When you delete a traffic policy instance, Amazon Route 53 also deletes all
0000000000000000000000000000000000000000;;		// of the resource record sets that were created when you created the traffic
0000000000000000000000000000000000000000;;		// policy instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Id is a required field
0000000000000000000000000000000000000000;;		Id *string `location:"uri" locationName:"Id" min:"1" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteTrafficPolicyInstanceInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteTrafficPolicyInstanceInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DeleteTrafficPolicyInstanceInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DeleteTrafficPolicyInstanceInput"}
0000000000000000000000000000000000000000;;		if s.Id == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Id"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Id != nil && len(*s.Id) < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("Id", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetId sets the Id field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteTrafficPolicyInstanceInput) SetId(v string) *DeleteTrafficPolicyInstanceInput {
0000000000000000000000000000000000000000;;		s.Id = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// An empty element.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/DeleteTrafficPolicyInstanceResponse
0000000000000000000000000000000000000000;;	type DeleteTrafficPolicyInstanceOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteTrafficPolicyInstanceOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteTrafficPolicyInstanceOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// An empty element.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/DeleteTrafficPolicyResponse
0000000000000000000000000000000000000000;;	type DeleteTrafficPolicyOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteTrafficPolicyOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteTrafficPolicyOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains information about the request to remove authorization
0000000000000000000000000000000000000000;;	// to associate a VPC that was created by one AWS account with a hosted zone
0000000000000000000000000000000000000000;;	// that was created with a different AWS account.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/DeleteVPCAssociationAuthorizationRequest
0000000000000000000000000000000000000000;;	type DeleteVPCAssociationAuthorizationInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `locationName:"DeleteVPCAssociationAuthorizationRequest" type:"structure" xmlURI:"https://route53.amazonaws.com/doc/2013-04-01/"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// When removing authorization to associate a VPC that was created by one AWS
0000000000000000000000000000000000000000;;		// account with a hosted zone that was created with a different AWS account,
0000000000000000000000000000000000000000;;		// the ID of the hosted zone.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// HostedZoneId is a required field
0000000000000000000000000000000000000000;;		HostedZoneId *string `location:"uri" locationName:"Id" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// When removing authorization to associate a VPC that was created by one AWS
0000000000000000000000000000000000000000;;		// account with a hosted zone that was created with a different AWS account,
0000000000000000000000000000000000000000;;		// a complex type that includes the ID and region of the VPC.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// VPC is a required field
0000000000000000000000000000000000000000;;		VPC *VPC `type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteVPCAssociationAuthorizationInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteVPCAssociationAuthorizationInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DeleteVPCAssociationAuthorizationInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DeleteVPCAssociationAuthorizationInput"}
0000000000000000000000000000000000000000;;		if s.HostedZoneId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("HostedZoneId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.VPC == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("VPC"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.VPC != nil {
0000000000000000000000000000000000000000;;			if err := s.VPC.Validate(); err != nil {
0000000000000000000000000000000000000000;;				invalidParams.AddNested("VPC", err.(request.ErrInvalidParams))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHostedZoneId sets the HostedZoneId field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteVPCAssociationAuthorizationInput) SetHostedZoneId(v string) *DeleteVPCAssociationAuthorizationInput {
0000000000000000000000000000000000000000;;		s.HostedZoneId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVPC sets the VPC field's value.
0000000000000000000000000000000000000000;;	func (s *DeleteVPCAssociationAuthorizationInput) SetVPC(v *VPC) *DeleteVPCAssociationAuthorizationInput {
0000000000000000000000000000000000000000;;		s.VPC = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Empty response for the request.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/DeleteVPCAssociationAuthorizationResponse
0000000000000000000000000000000000000000;;	type DeleteVPCAssociationAuthorizationOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteVPCAssociationAuthorizationOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DeleteVPCAssociationAuthorizationOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// For the metric that the CloudWatch alarm is associated with, a complex type
0000000000000000000000000000000000000000;;	// that contains information about one dimension.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/Dimension
0000000000000000000000000000000000000000;;	type Dimension struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// For the metric that the CloudWatch alarm is associated with, the name of
0000000000000000000000000000000000000000;;		// one dimension.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Name is a required field
0000000000000000000000000000000000000000;;		Name *string `min:"1" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// For the metric that the CloudWatch alarm is associated with, the value of
0000000000000000000000000000000000000000;;		// one dimension.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Value is a required field
0000000000000000000000000000000000000000;;		Value *string `min:"1" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s Dimension) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s Dimension) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetName sets the Name field's value.
0000000000000000000000000000000000000000;;	func (s *Dimension) SetName(v string) *Dimension {
0000000000000000000000000000000000000000;;		s.Name = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetValue sets the Value field's value.
0000000000000000000000000000000000000000;;	func (s *Dimension) SetValue(v string) *Dimension {
0000000000000000000000000000000000000000;;		s.Value = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains information about the VPC that you want to disassociate
0000000000000000000000000000000000000000;;	// from a specified private hosted zone.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/DisassociateVPCFromHostedZoneRequest
0000000000000000000000000000000000000000;;	type DisassociateVPCFromHostedZoneInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `locationName:"DisassociateVPCFromHostedZoneRequest" type:"structure" xmlURI:"https://route53.amazonaws.com/doc/2013-04-01/"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Optional: A comment about the disassociation request.
0000000000000000000000000000000000000000;;		Comment *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the private hosted zone that you want to disassociate a VPC from.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// HostedZoneId is a required field
0000000000000000000000000000000000000000;;		HostedZoneId *string `location:"uri" locationName:"Id" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that contains information about the VPC that you're disassociating
0000000000000000000000000000000000000000;;		// from the specified hosted zone.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// VPC is a required field
0000000000000000000000000000000000000000;;		VPC *VPC `type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DisassociateVPCFromHostedZoneInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DisassociateVPCFromHostedZoneInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DisassociateVPCFromHostedZoneInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DisassociateVPCFromHostedZoneInput"}
0000000000000000000000000000000000000000;;		if s.HostedZoneId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("HostedZoneId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.VPC == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("VPC"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.VPC != nil {
0000000000000000000000000000000000000000;;			if err := s.VPC.Validate(); err != nil {
0000000000000000000000000000000000000000;;				invalidParams.AddNested("VPC", err.(request.ErrInvalidParams))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetComment sets the Comment field's value.
0000000000000000000000000000000000000000;;	func (s *DisassociateVPCFromHostedZoneInput) SetComment(v string) *DisassociateVPCFromHostedZoneInput {
0000000000000000000000000000000000000000;;		s.Comment = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHostedZoneId sets the HostedZoneId field's value.
0000000000000000000000000000000000000000;;	func (s *DisassociateVPCFromHostedZoneInput) SetHostedZoneId(v string) *DisassociateVPCFromHostedZoneInput {
0000000000000000000000000000000000000000;;		s.HostedZoneId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVPC sets the VPC field's value.
0000000000000000000000000000000000000000;;	func (s *DisassociateVPCFromHostedZoneInput) SetVPC(v *VPC) *DisassociateVPCFromHostedZoneInput {
0000000000000000000000000000000000000000;;		s.VPC = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains the response information for the disassociate
0000000000000000000000000000000000000000;;	// request.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/DisassociateVPCFromHostedZoneResponse
0000000000000000000000000000000000000000;;	type DisassociateVPCFromHostedZoneOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that describes the changes made to the specified private hosted
0000000000000000000000000000000000000000;;		// zone.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ChangeInfo is a required field
0000000000000000000000000000000000000000;;		ChangeInfo *ChangeInfo `type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DisassociateVPCFromHostedZoneOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DisassociateVPCFromHostedZoneOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetChangeInfo sets the ChangeInfo field's value.
0000000000000000000000000000000000000000;;	func (s *DisassociateVPCFromHostedZoneOutput) SetChangeInfo(v *ChangeInfo) *DisassociateVPCFromHostedZoneOutput {
0000000000000000000000000000000000000000;;		s.ChangeInfo = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains information about a geo location.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GeoLocation
0000000000000000000000000000000000000000;;	type GeoLocation struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The two-letter code for the continent.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Valid values: AF | AN | AS | EU | OC | NA | SA
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Constraint: Specifying ContinentCode with either CountryCode or SubdivisionCode
0000000000000000000000000000000000000000;;		// returns an InvalidInput error.
0000000000000000000000000000000000000000;;		ContinentCode *string `min:"2" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The two-letter code for the country.
0000000000000000000000000000000000000000;;		CountryCode *string `min:"1" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The code for the subdivision, for example, a state in the United States or
0000000000000000000000000000000000000000;;		// a province in Canada.
0000000000000000000000000000000000000000;;		SubdivisionCode *string `min:"1" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s GeoLocation) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s GeoLocation) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *GeoLocation) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "GeoLocation"}
0000000000000000000000000000000000000000;;		if s.ContinentCode != nil && len(*s.ContinentCode) < 2 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("ContinentCode", 2))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.CountryCode != nil && len(*s.CountryCode) < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("CountryCode", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.SubdivisionCode != nil && len(*s.SubdivisionCode) < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("SubdivisionCode", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetContinentCode sets the ContinentCode field's value.
0000000000000000000000000000000000000000;;	func (s *GeoLocation) SetContinentCode(v string) *GeoLocation {
0000000000000000000000000000000000000000;;		s.ContinentCode = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCountryCode sets the CountryCode field's value.
0000000000000000000000000000000000000000;;	func (s *GeoLocation) SetCountryCode(v string) *GeoLocation {
0000000000000000000000000000000000000000;;		s.CountryCode = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSubdivisionCode sets the SubdivisionCode field's value.
0000000000000000000000000000000000000000;;	func (s *GeoLocation) SetSubdivisionCode(v string) *GeoLocation {
0000000000000000000000000000000000000000;;		s.SubdivisionCode = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains the codes and full continent, country, and subdivision
0000000000000000000000000000000000000000;;	// names for the specified geolocation code.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GeoLocationDetails
0000000000000000000000000000000000000000;;	type GeoLocationDetails struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The two-letter code for the continent.
0000000000000000000000000000000000000000;;		ContinentCode *string `min:"2" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The full name of the continent.
0000000000000000000000000000000000000000;;		ContinentName *string `min:"1" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The two-letter code for the country.
0000000000000000000000000000000000000000;;		CountryCode *string `min:"1" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the country.
0000000000000000000000000000000000000000;;		CountryName *string `min:"1" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The code for the subdivision, for example, a state in the United States or
0000000000000000000000000000000000000000;;		// a province in Canada.
0000000000000000000000000000000000000000;;		SubdivisionCode *string `min:"1" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The full name of the subdivision, for example, a state in the United States
0000000000000000000000000000000000000000;;		// or a province in Canada.
0000000000000000000000000000000000000000;;		SubdivisionName *string `min:"1" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s GeoLocationDetails) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s GeoLocationDetails) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetContinentCode sets the ContinentCode field's value.
0000000000000000000000000000000000000000;;	func (s *GeoLocationDetails) SetContinentCode(v string) *GeoLocationDetails {
0000000000000000000000000000000000000000;;		s.ContinentCode = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetContinentName sets the ContinentName field's value.
0000000000000000000000000000000000000000;;	func (s *GeoLocationDetails) SetContinentName(v string) *GeoLocationDetails {
0000000000000000000000000000000000000000;;		s.ContinentName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCountryCode sets the CountryCode field's value.
0000000000000000000000000000000000000000;;	func (s *GeoLocationDetails) SetCountryCode(v string) *GeoLocationDetails {
0000000000000000000000000000000000000000;;		s.CountryCode = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCountryName sets the CountryName field's value.
0000000000000000000000000000000000000000;;	func (s *GeoLocationDetails) SetCountryName(v string) *GeoLocationDetails {
0000000000000000000000000000000000000000;;		s.CountryName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSubdivisionCode sets the SubdivisionCode field's value.
0000000000000000000000000000000000000000;;	func (s *GeoLocationDetails) SetSubdivisionCode(v string) *GeoLocationDetails {
0000000000000000000000000000000000000000;;		s.SubdivisionCode = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSubdivisionName sets the SubdivisionName field's value.
0000000000000000000000000000000000000000;;	func (s *GeoLocationDetails) SetSubdivisionName(v string) *GeoLocationDetails {
0000000000000000000000000000000000000000;;		s.SubdivisionName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The input for a GetChange request.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetChangeRequest
0000000000000000000000000000000000000000;;	type GetChangeInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the change batch request. The value that you specify here is the
0000000000000000000000000000000000000000;;		// value that ChangeResourceRecordSets returned in the Id element when you submitted
0000000000000000000000000000000000000000;;		// the request.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Id is a required field
0000000000000000000000000000000000000000;;		Id *string `location:"uri" locationName:"Id" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s GetChangeInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s GetChangeInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *GetChangeInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "GetChangeInput"}
0000000000000000000000000000000000000000;;		if s.Id == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Id"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetId sets the Id field's value.
0000000000000000000000000000000000000000;;	func (s *GetChangeInput) SetId(v string) *GetChangeInput {
0000000000000000000000000000000000000000;;		s.Id = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains the ChangeInfo element.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetChangeResponse
0000000000000000000000000000000000000000;;	type GetChangeOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that contains information about the specified change batch.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ChangeInfo is a required field
0000000000000000000000000000000000000000;;		ChangeInfo *ChangeInfo `type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s GetChangeOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s GetChangeOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetChangeInfo sets the ChangeInfo field's value.
0000000000000000000000000000000000000000;;	func (s *GetChangeOutput) SetChangeInfo(v *ChangeInfo) *GetChangeOutput {
0000000000000000000000000000000000000000;;		s.ChangeInfo = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Empty request.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetCheckerIpRangesRequest
0000000000000000000000000000000000000000;;	type GetCheckerIpRangesInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s GetCheckerIpRangesInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s GetCheckerIpRangesInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains the CheckerIpRanges element.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetCheckerIpRangesResponse
0000000000000000000000000000000000000000;;	type GetCheckerIpRangesOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that contains sorted list of IP ranges in CIDR format for
0000000000000000000000000000000000000000;;		// Amazon Route 53 health checkers.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// CheckerIpRanges is a required field
0000000000000000000000000000000000000000;;		CheckerIpRanges []*string `type:"list" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s GetCheckerIpRangesOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s GetCheckerIpRangesOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCheckerIpRanges sets the CheckerIpRanges field's value.
0000000000000000000000000000000000000000;;	func (s *GetCheckerIpRangesOutput) SetCheckerIpRanges(v []*string) *GetCheckerIpRangesOutput {
0000000000000000000000000000000000000000;;		s.CheckerIpRanges = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains information about the request to get a geo location.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetGeoLocationRequest
0000000000000000000000000000000000000000;;	type GetGeoLocationInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Amazon Route 53 supports the following continent codes:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * AF: Africa
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * AN: Antarctica
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * AS: Asia
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * EU: Europe
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * OC: Oceania
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * NA: North America
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * SA: South America
0000000000000000000000000000000000000000;;		ContinentCode *string `location:"querystring" locationName:"continentcode" min:"2" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Amazon Route 53 uses the two-letter country codes that are specified in ISO
0000000000000000000000000000000000000000;;		// standard 3166-1 alpha-2 (https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
0000000000000000000000000000000000000000;;		CountryCode *string `location:"querystring" locationName:"countrycode" min:"1" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Amazon Route 53 uses the one- to three-letter subdivision codes that are
0000000000000000000000000000000000000000;;		// specified in ISO standard 3166-1 alpha-2 (https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
0000000000000000000000000000000000000000;;		// Amazon Route 53 doesn't support subdivision codes for all countries. If you
0000000000000000000000000000000000000000;;		// specify SubdivisionCode, you must also specify CountryCode.
0000000000000000000000000000000000000000;;		SubdivisionCode *string `location:"querystring" locationName:"subdivisioncode" min:"1" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s GetGeoLocationInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s GetGeoLocationInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *GetGeoLocationInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "GetGeoLocationInput"}
0000000000000000000000000000000000000000;;		if s.ContinentCode != nil && len(*s.ContinentCode) < 2 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("ContinentCode", 2))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.CountryCode != nil && len(*s.CountryCode) < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("CountryCode", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.SubdivisionCode != nil && len(*s.SubdivisionCode) < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("SubdivisionCode", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetContinentCode sets the ContinentCode field's value.
0000000000000000000000000000000000000000;;	func (s *GetGeoLocationInput) SetContinentCode(v string) *GetGeoLocationInput {
0000000000000000000000000000000000000000;;		s.ContinentCode = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCountryCode sets the CountryCode field's value.
0000000000000000000000000000000000000000;;	func (s *GetGeoLocationInput) SetCountryCode(v string) *GetGeoLocationInput {
0000000000000000000000000000000000000000;;		s.CountryCode = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSubdivisionCode sets the SubdivisionCode field's value.
0000000000000000000000000000000000000000;;	func (s *GetGeoLocationInput) SetSubdivisionCode(v string) *GetGeoLocationInput {
0000000000000000000000000000000000000000;;		s.SubdivisionCode = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains the response information for the specified geolocation
0000000000000000000000000000000000000000;;	// code.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetGeoLocationResponse
0000000000000000000000000000000000000000;;	type GetGeoLocationOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that contains the codes and full continent, country, and subdivision
0000000000000000000000000000000000000000;;		// names for the specified geolocation code.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// GeoLocationDetails is a required field
0000000000000000000000000000000000000000;;		GeoLocationDetails *GeoLocationDetails `type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s GetGeoLocationOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s GetGeoLocationOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGeoLocationDetails sets the GeoLocationDetails field's value.
0000000000000000000000000000000000000000;;	func (s *GetGeoLocationOutput) SetGeoLocationDetails(v *GeoLocationDetails) *GetGeoLocationOutput {
0000000000000000000000000000000000000000;;		s.GeoLocationDetails = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// To retrieve a count of all your health checks, send a GET request to the
0000000000000000000000000000000000000000;;	// /2013-04-01/healthcheckcount resource.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetHealthCheckCountRequest
0000000000000000000000000000000000000000;;	type GetHealthCheckCountInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s GetHealthCheckCountInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s GetHealthCheckCountInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains the response to a healthcheckcount request.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetHealthCheckCountResponse
0000000000000000000000000000000000000000;;	type GetHealthCheckCountOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of health checks associated with the current AWS account.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// HealthCheckCount is a required field
0000000000000000000000000000000000000000;;		HealthCheckCount *int64 `type:"long" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s GetHealthCheckCountOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s GetHealthCheckCountOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHealthCheckCount sets the HealthCheckCount field's value.
0000000000000000000000000000000000000000;;	func (s *GetHealthCheckCountOutput) SetHealthCheckCount(v int64) *GetHealthCheckCountOutput {
0000000000000000000000000000000000000000;;		s.HealthCheckCount = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This action gets information about a specified health check.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Send a GET request to the /Amazon Route 53 API version/gethealthcheckrequest
0000000000000000000000000000000000000000;;	// resource.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For information about getting information about a health check using the
0000000000000000000000000000000000000000;;	// Amazon Route 53 console, see Amazon Route 53 Health Checks and DNS Failover
0000000000000000000000000000000000000000;;	// (http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover.html)
0000000000000000000000000000000000000000;;	// in the Amazon Route 53 Developer Guide.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetHealthCheckRequest
0000000000000000000000000000000000000000;;	type GetHealthCheckInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The identifier that Amazon Route 53 assigned to the health check when you
0000000000000000000000000000000000000000;;		// created it. When you add or update a resource record set, you use this value
0000000000000000000000000000000000000000;;		// to specify which health check to use. The value can be up to 64 characters
0000000000000000000000000000000000000000;;		// long.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// HealthCheckId is a required field
0000000000000000000000000000000000000000;;		HealthCheckId *string `location:"uri" locationName:"HealthCheckId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s GetHealthCheckInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s GetHealthCheckInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *GetHealthCheckInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "GetHealthCheckInput"}
0000000000000000000000000000000000000000;;		if s.HealthCheckId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("HealthCheckId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHealthCheckId sets the HealthCheckId field's value.
0000000000000000000000000000000000000000;;	func (s *GetHealthCheckInput) SetHealthCheckId(v string) *GetHealthCheckInput {
0000000000000000000000000000000000000000;;		s.HealthCheckId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This action gets the reason that a specified health check failed most recently.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// To get the reason for the last failure of a health check, send a GET request
0000000000000000000000000000000000000000;;	// to the /2013-04-01/healthcheck/health check ID/lastfailurereason resource.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For information about viewing the last failure reason for a health check
0000000000000000000000000000000000000000;;	// using the Amazon Route 53 console, see Viewing Health Check Status and the
0000000000000000000000000000000000000000;;	// Reason for Health Check Failures (http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/health-checks-monitor-view-status.html)
0000000000000000000000000000000000000000;;	// in the Amazon Route 53 Developer Guide.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetHealthCheckLastFailureReasonRequest
0000000000000000000000000000000000000000;;	type GetHealthCheckLastFailureReasonInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID for the health check for which you want the last failure reason. When
0000000000000000000000000000000000000000;;		// you created the health check, CreateHealthCheck returned the ID in the response,
0000000000000000000000000000000000000000;;		// in the HealthCheckId element.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// HealthCheckId is a required field
0000000000000000000000000000000000000000;;		HealthCheckId *string `location:"uri" locationName:"HealthCheckId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s GetHealthCheckLastFailureReasonInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s GetHealthCheckLastFailureReasonInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *GetHealthCheckLastFailureReasonInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "GetHealthCheckLastFailureReasonInput"}
0000000000000000000000000000000000000000;;		if s.HealthCheckId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("HealthCheckId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHealthCheckId sets the HealthCheckId field's value.
0000000000000000000000000000000000000000;;	func (s *GetHealthCheckLastFailureReasonInput) SetHealthCheckId(v string) *GetHealthCheckLastFailureReasonInput {
0000000000000000000000000000000000000000;;		s.HealthCheckId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains the response to a GetHealthCheckLastFailureReason
0000000000000000000000000000000000000000;;	// request.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetHealthCheckLastFailureReasonResponse
0000000000000000000000000000000000000000;;	type GetHealthCheckLastFailureReasonOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A list that contains one Observation element for each Amazon Route 53 health
0000000000000000000000000000000000000000;;		// checker that is reporting a last failure reason.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// HealthCheckObservations is a required field
0000000000000000000000000000000000000000;;		HealthCheckObservations []*HealthCheckObservation `locationNameList:"HealthCheckObservation" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s GetHealthCheckLastFailureReasonOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s GetHealthCheckLastFailureReasonOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHealthCheckObservations sets the HealthCheckObservations field's value.
0000000000000000000000000000000000000000;;	func (s *GetHealthCheckLastFailureReasonOutput) SetHealthCheckObservations(v []*HealthCheckObservation) *GetHealthCheckLastFailureReasonOutput {
0000000000000000000000000000000000000000;;		s.HealthCheckObservations = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains the response to a GetHealthCheck request.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetHealthCheckResponse
0000000000000000000000000000000000000000;;	type GetHealthCheckOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that contains information about one health check that is associated
0000000000000000000000000000000000000000;;		// with the current AWS account.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// HealthCheck is a required field
0000000000000000000000000000000000000000;;		HealthCheck *HealthCheck `type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s GetHealthCheckOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s GetHealthCheckOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHealthCheck sets the HealthCheck field's value.
0000000000000000000000000000000000000000;;	func (s *GetHealthCheckOutput) SetHealthCheck(v *HealthCheck) *GetHealthCheckOutput {
0000000000000000000000000000000000000000;;		s.HealthCheck = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains information about the request to get health
0000000000000000000000000000000000000000;;	// check status for a health check.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetHealthCheckStatusRequest
0000000000000000000000000000000000000000;;	type GetHealthCheckStatusInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If you want Amazon Route 53 to return this resource record set in response
0000000000000000000000000000000000000000;;		// to a DNS query only when a health check is passing, include the HealthCheckId
0000000000000000000000000000000000000000;;		// element and specify the ID of the applicable health check.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Amazon Route 53 determines whether a resource record set is healthy by periodically
0000000000000000000000000000000000000000;;		// sending a request to the endpoint that is specified in the health check.
0000000000000000000000000000000000000000;;		// If that endpoint returns an HTTP status code of 2xx or 3xx, the endpoint
0000000000000000000000000000000000000000;;		// is healthy. If the endpoint returns an HTTP status code of 400 or greater,
0000000000000000000000000000000000000000;;		// or if the endpoint doesn't respond for a certain amount of time, Amazon Route
0000000000000000000000000000000000000000;;		// 53 considers the endpoint unhealthy and also considers the resource record
0000000000000000000000000000000000000000;;		// set unhealthy.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// The HealthCheckId element is only useful when Amazon Route 53 is choosing
0000000000000000000000000000000000000000;;		// between two or more resource record sets to respond to a DNS query, and you
0000000000000000000000000000000000000000;;		// want Amazon Route 53 to base the choice in part on the status of a health
0000000000000000000000000000000000000000;;		// check. Configuring health checks only makes sense in the following configurations:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * You're checking the health of the resource record sets in a weighted,
0000000000000000000000000000000000000000;;		//    latency, geolocation, or failover resource record set, and you specify
0000000000000000000000000000000000000000;;		//    health check IDs for all of the resource record sets. If the health check
0000000000000000000000000000000000000000;;		//    for one resource record set specifies an endpoint that is not healthy,
0000000000000000000000000000000000000000;;		//    Amazon Route 53 stops responding to queries using the value for that resource
0000000000000000000000000000000000000000;;		//    record set.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * You set EvaluateTargetHealth to true for the resource record sets in
0000000000000000000000000000000000000000;;		//    an alias, weighted alias, latency alias, geolocation alias, or failover
0000000000000000000000000000000000000000;;		//    alias resource record set, and you specify health check IDs for all of
0000000000000000000000000000000000000000;;		//    the resource record sets that are referenced by the alias resource record
0000000000000000000000000000000000000000;;		//    sets. For more information about this configuration, see EvaluateTargetHealth.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Amazon Route 53 doesn't check the health of the endpoint specified in the
0000000000000000000000000000000000000000;;		//    resource record set, for example, the endpoint specified by the IP address
0000000000000000000000000000000000000000;;		//    in the Value element. When you add a HealthCheckId element to a resource
0000000000000000000000000000000000000000;;		//    record set, Amazon Route 53 checks the health of the endpoint that you
0000000000000000000000000000000000000000;;		//    specified in the health check.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// For geolocation resource record sets, if an endpoint is unhealthy, Amazon
0000000000000000000000000000000000000000;;		// Route 53 looks for a resource record set for the larger, associated geographic
0000000000000000000000000000000000000000;;		// region. For example, suppose you have resource record sets for a state in
0000000000000000000000000000000000000000;;		// the United States, for the United States, for North America, and for all
0000000000000000000000000000000000000000;;		// locations. If the endpoint for the state resource record set is unhealthy,
0000000000000000000000000000000000000000;;		// Amazon Route 53 checks the resource record sets for the United States, for
0000000000000000000000000000000000000000;;		// North America, and for all locations (a resource record set for which the
0000000000000000000000000000000000000000;;		// value of CountryCode is *), in that order, until it finds a resource record
0000000000000000000000000000000000000000;;		// set for which the endpoint is healthy.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If your health checks specify the endpoint only by domain name, we recommend
0000000000000000000000000000000000000000;;		// that you create a separate health check for each endpoint. For example, create
0000000000000000000000000000000000000000;;		// a health check for each HTTP server that is serving content for www.example.com.
0000000000000000000000000000000000000000;;		// For the value of FullyQualifiedDomainName, specify the domain name of the
0000000000000000000000000000000000000000;;		// server (such as us-east-1-www.example.com), not the name of the resource
0000000000000000000000000000000000000000;;		// record sets (example.com).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// In this configuration, if you create a health check for which the value of
0000000000000000000000000000000000000000;;		// FullyQualifiedDomainName matches the name of the resource record sets and
0000000000000000000000000000000000000000;;		// then associate the health check with those resource record sets, health check
0000000000000000000000000000000000000000;;		// results will be unpredictable.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// HealthCheckId is a required field
0000000000000000000000000000000000000000;;		HealthCheckId *string `location:"uri" locationName:"HealthCheckId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s GetHealthCheckStatusInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s GetHealthCheckStatusInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *GetHealthCheckStatusInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "GetHealthCheckStatusInput"}
0000000000000000000000000000000000000000;;		if s.HealthCheckId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("HealthCheckId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHealthCheckId sets the HealthCheckId field's value.
0000000000000000000000000000000000000000;;	func (s *GetHealthCheckStatusInput) SetHealthCheckId(v string) *GetHealthCheckStatusInput {
0000000000000000000000000000000000000000;;		s.HealthCheckId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains the response to a GetHealthCheck request.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetHealthCheckStatusResponse
0000000000000000000000000000000000000000;;	type GetHealthCheckStatusOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A list that contains one HealthCheckObservation element for each Amazon Route
0000000000000000000000000000000000000000;;		// 53 health checker that is reporting a status about the health check endpoint.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// HealthCheckObservations is a required field
0000000000000000000000000000000000000000;;		HealthCheckObservations []*HealthCheckObservation `locationNameList:"HealthCheckObservation" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s GetHealthCheckStatusOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s GetHealthCheckStatusOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHealthCheckObservations sets the HealthCheckObservations field's value.
0000000000000000000000000000000000000000;;	func (s *GetHealthCheckStatusOutput) SetHealthCheckObservations(v []*HealthCheckObservation) *GetHealthCheckStatusOutput {
0000000000000000000000000000000000000000;;		s.HealthCheckObservations = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// To retrieve a count of all your hosted zones, send a GET request to the /2013-04-01/hostedzonecount
0000000000000000000000000000000000000000;;	// resource.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetHostedZoneCountRequest
0000000000000000000000000000000000000000;;	type GetHostedZoneCountInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s GetHostedZoneCountInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s GetHostedZoneCountInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains the response to a hostedzonecount request.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetHostedZoneCountResponse
0000000000000000000000000000000000000000;;	type GetHostedZoneCountOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The total number of public and private hosted zones associated with the current
0000000000000000000000000000000000000000;;		// AWS account.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// HostedZoneCount is a required field
0000000000000000000000000000000000000000;;		HostedZoneCount *int64 `type:"long" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s GetHostedZoneCountOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s GetHostedZoneCountOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHostedZoneCount sets the HostedZoneCount field's value.
0000000000000000000000000000000000000000;;	func (s *GetHostedZoneCountOutput) SetHostedZoneCount(v int64) *GetHostedZoneCountOutput {
0000000000000000000000000000000000000000;;		s.HostedZoneCount = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The input for a GetHostedZone request.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetHostedZoneRequest
0000000000000000000000000000000000000000;;	type GetHostedZoneInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the hosted zone for which you want to get a list of the name servers
0000000000000000000000000000000000000000;;		// in the delegation set.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Id is a required field
0000000000000000000000000000000000000000;;		Id *string `location:"uri" locationName:"Id" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s GetHostedZoneInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s GetHostedZoneInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *GetHostedZoneInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "GetHostedZoneInput"}
0000000000000000000000000000000000000000;;		if s.Id == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Id"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetId sets the Id field's value.
0000000000000000000000000000000000000000;;	func (s *GetHostedZoneInput) SetId(v string) *GetHostedZoneInput {
0000000000000000000000000000000000000000;;		s.Id = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type containing the response information for the hosted zone.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetHostedZoneResponse
0000000000000000000000000000000000000000;;	type GetHostedZoneOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that describes the name servers for this hosted zone.
0000000000000000000000000000000000000000;;		DelegationSet *DelegationSet `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that contains general information about the hosted zone.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// HostedZone is a required field
0000000000000000000000000000000000000000;;		HostedZone *HostedZone `type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that contains information about VPCs associated with the specified
0000000000000000000000000000000000000000;;		// hosted zone.
0000000000000000000000000000000000000000;;		VPCs []*VPC `locationNameList:"VPC" min:"1" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s GetHostedZoneOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s GetHostedZoneOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDelegationSet sets the DelegationSet field's value.
0000000000000000000000000000000000000000;;	func (s *GetHostedZoneOutput) SetDelegationSet(v *DelegationSet) *GetHostedZoneOutput {
0000000000000000000000000000000000000000;;		s.DelegationSet = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHostedZone sets the HostedZone field's value.
0000000000000000000000000000000000000000;;	func (s *GetHostedZoneOutput) SetHostedZone(v *HostedZone) *GetHostedZoneOutput {
0000000000000000000000000000000000000000;;		s.HostedZone = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVPCs sets the VPCs field's value.
0000000000000000000000000000000000000000;;	func (s *GetHostedZoneOutput) SetVPCs(v []*VPC) *GetHostedZoneOutput {
0000000000000000000000000000000000000000;;		s.VPCs = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The input for a GetReusableDelegationSet request.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetReusableDelegationSetRequest
0000000000000000000000000000000000000000;;	type GetReusableDelegationSetInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the reusable delegation set for which you want to get a list of
0000000000000000000000000000000000000000;;		// the name server.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Id is a required field
0000000000000000000000000000000000000000;;		Id *string `location:"uri" locationName:"Id" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s GetReusableDelegationSetInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s GetReusableDelegationSetInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *GetReusableDelegationSetInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "GetReusableDelegationSetInput"}
0000000000000000000000000000000000000000;;		if s.Id == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Id"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetId sets the Id field's value.
0000000000000000000000000000000000000000;;	func (s *GetReusableDelegationSetInput) SetId(v string) *GetReusableDelegationSetInput {
0000000000000000000000000000000000000000;;		s.Id = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains the response to the GetReusableDelegationSet
0000000000000000000000000000000000000000;;	// request.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetReusableDelegationSetResponse
0000000000000000000000000000000000000000;;	type GetReusableDelegationSetOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that contains information about the reusable delegation set.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// DelegationSet is a required field
0000000000000000000000000000000000000000;;		DelegationSet *DelegationSet `type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s GetReusableDelegationSetOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s GetReusableDelegationSetOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDelegationSet sets the DelegationSet field's value.
0000000000000000000000000000000000000000;;	func (s *GetReusableDelegationSetOutput) SetDelegationSet(v *DelegationSet) *GetReusableDelegationSetOutput {
0000000000000000000000000000000000000000;;		s.DelegationSet = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Gets information about a specific traffic policy version. To get the information,
0000000000000000000000000000000000000000;;	// send a GET request to the /2013-04-01/trafficpolicy resource, and specify
0000000000000000000000000000000000000000;;	// the ID and the version of the traffic policy.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetTrafficPolicyRequest
0000000000000000000000000000000000000000;;	type GetTrafficPolicyInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the traffic policy that you want to get information about.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Id is a required field
0000000000000000000000000000000000000000;;		Id *string `location:"uri" locationName:"Id" min:"1" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The version number of the traffic policy that you want to get information
0000000000000000000000000000000000000000;;		// about.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Version is a required field
0000000000000000000000000000000000000000;;		Version *int64 `location:"uri" locationName:"Version" min:"1" type:"integer" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s GetTrafficPolicyInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s GetTrafficPolicyInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *GetTrafficPolicyInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "GetTrafficPolicyInput"}
0000000000000000000000000000000000000000;;		if s.Id == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Id"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Id != nil && len(*s.Id) < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("Id", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Version == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Version"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Version != nil && *s.Version < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinValue("Version", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetId sets the Id field's value.
0000000000000000000000000000000000000000;;	func (s *GetTrafficPolicyInput) SetId(v string) *GetTrafficPolicyInput {
0000000000000000000000000000000000000000;;		s.Id = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVersion sets the Version field's value.
0000000000000000000000000000000000000000;;	func (s *GetTrafficPolicyInput) SetVersion(v int64) *GetTrafficPolicyInput {
0000000000000000000000000000000000000000;;		s.Version = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// To retrieve a count of all your traffic policy instances, send a GET request
0000000000000000000000000000000000000000;;	// to the /2013-04-01/trafficpolicyinstancecount resource.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetTrafficPolicyInstanceCountRequest
0000000000000000000000000000000000000000;;	type GetTrafficPolicyInstanceCountInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s GetTrafficPolicyInstanceCountInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s GetTrafficPolicyInstanceCountInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains information about the resource record sets that
0000000000000000000000000000000000000000;;	// Amazon Route 53 created based on a specified traffic policy.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetTrafficPolicyInstanceCountResponse
0000000000000000000000000000000000000000;;	type GetTrafficPolicyInstanceCountOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of traffic policy instances that are associated with the current
0000000000000000000000000000000000000000;;		// AWS account.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// TrafficPolicyInstanceCount is a required field
0000000000000000000000000000000000000000;;		TrafficPolicyInstanceCount *int64 `type:"integer" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s GetTrafficPolicyInstanceCountOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s GetTrafficPolicyInstanceCountOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTrafficPolicyInstanceCount sets the TrafficPolicyInstanceCount field's value.
0000000000000000000000000000000000000000;;	func (s *GetTrafficPolicyInstanceCountOutput) SetTrafficPolicyInstanceCount(v int64) *GetTrafficPolicyInstanceCountOutput {
0000000000000000000000000000000000000000;;		s.TrafficPolicyInstanceCount = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Gets information about a specified traffic policy instance.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// To get information about a traffic policy instance, send a GET request to
0000000000000000000000000000000000000000;;	// the /Amazon Route 53 API version/trafficpolicyinstance/Id resource.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetTrafficPolicyInstanceRequest
0000000000000000000000000000000000000000;;	type GetTrafficPolicyInstanceInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the traffic policy instance that you want to get information about.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Id is a required field
0000000000000000000000000000000000000000;;		Id *string `location:"uri" locationName:"Id" min:"1" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s GetTrafficPolicyInstanceInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s GetTrafficPolicyInstanceInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *GetTrafficPolicyInstanceInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "GetTrafficPolicyInstanceInput"}
0000000000000000000000000000000000000000;;		if s.Id == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Id"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Id != nil && len(*s.Id) < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("Id", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetId sets the Id field's value.
0000000000000000000000000000000000000000;;	func (s *GetTrafficPolicyInstanceInput) SetId(v string) *GetTrafficPolicyInstanceInput {
0000000000000000000000000000000000000000;;		s.Id = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains information about the resource record sets that
0000000000000000000000000000000000000000;;	// Amazon Route 53 created based on a specified traffic policy.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetTrafficPolicyInstanceResponse
0000000000000000000000000000000000000000;;	type GetTrafficPolicyInstanceOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that contains settings for the traffic policy instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// TrafficPolicyInstance is a required field
0000000000000000000000000000000000000000;;		TrafficPolicyInstance *TrafficPolicyInstance `type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s GetTrafficPolicyInstanceOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s GetTrafficPolicyInstanceOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTrafficPolicyInstance sets the TrafficPolicyInstance field's value.
0000000000000000000000000000000000000000;;	func (s *GetTrafficPolicyInstanceOutput) SetTrafficPolicyInstance(v *TrafficPolicyInstance) *GetTrafficPolicyInstanceOutput {
0000000000000000000000000000000000000000;;		s.TrafficPolicyInstance = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains the response information for the request.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/GetTrafficPolicyResponse
0000000000000000000000000000000000000000;;	type GetTrafficPolicyOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that contains settings for the specified traffic policy.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// TrafficPolicy is a required field
0000000000000000000000000000000000000000;;		TrafficPolicy *TrafficPolicy `type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s GetTrafficPolicyOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s GetTrafficPolicyOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTrafficPolicy sets the TrafficPolicy field's value.
0000000000000000000000000000000000000000;;	func (s *GetTrafficPolicyOutput) SetTrafficPolicy(v *TrafficPolicy) *GetTrafficPolicyOutput {
0000000000000000000000000000000000000000;;		s.TrafficPolicy = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains information about one health check that is associated
0000000000000000000000000000000000000000;;	// with the current AWS account.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/HealthCheck
0000000000000000000000000000000000000000;;	type HealthCheck struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A unique string that you specified when you created the health check.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// CallerReference is a required field
0000000000000000000000000000000000000000;;		CallerReference *string `min:"1" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that contains information about the CloudWatch alarm that
0000000000000000000000000000000000000000;;		// Amazon Route 53 is monitoring for this health check.
0000000000000000000000000000000000000000;;		CloudWatchAlarmConfiguration *CloudWatchAlarmConfiguration `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that contains detailed information about one health check.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// HealthCheckConfig is a required field
0000000000000000000000000000000000000000;;		HealthCheckConfig *HealthCheckConfig `type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The version of the health check. You can optionally pass this value in a
0000000000000000000000000000000000000000;;		// call to UpdateHealthCheck to prevent overwriting another change to the health
0000000000000000000000000000000000000000;;		// check.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// HealthCheckVersion is a required field
0000000000000000000000000000000000000000;;		HealthCheckVersion *int64 `min:"1" type:"long" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The identifier that Amazon Route 53assigned to the health check when you
0000000000000000000000000000000000000000;;		// created it. When you add or update a resource record set, you use this value
0000000000000000000000000000000000000000;;		// to specify which health check to use. The value can be up to 64 characters
0000000000000000000000000000000000000000;;		// long.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Id is a required field
0000000000000000000000000000000000000000;;		Id *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s HealthCheck) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s HealthCheck) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCallerReference sets the CallerReference field's value.
0000000000000000000000000000000000000000;;	func (s *HealthCheck) SetCallerReference(v string) *HealthCheck {
0000000000000000000000000000000000000000;;		s.CallerReference = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCloudWatchAlarmConfiguration sets the CloudWatchAlarmConfiguration field's value.
0000000000000000000000000000000000000000;;	func (s *HealthCheck) SetCloudWatchAlarmConfiguration(v *CloudWatchAlarmConfiguration) *HealthCheck {
0000000000000000000000000000000000000000;;		s.CloudWatchAlarmConfiguration = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHealthCheckConfig sets the HealthCheckConfig field's value.
0000000000000000000000000000000000000000;;	func (s *HealthCheck) SetHealthCheckConfig(v *HealthCheckConfig) *HealthCheck {
0000000000000000000000000000000000000000;;		s.HealthCheckConfig = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHealthCheckVersion sets the HealthCheckVersion field's value.
0000000000000000000000000000000000000000;;	func (s *HealthCheck) SetHealthCheckVersion(v int64) *HealthCheck {
0000000000000000000000000000000000000000;;		s.HealthCheckVersion = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetId sets the Id field's value.
0000000000000000000000000000000000000000;;	func (s *HealthCheck) SetId(v string) *HealthCheck {
0000000000000000000000000000000000000000;;		s.Id = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains information about the health check.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/HealthCheckConfig
0000000000000000000000000000000000000000;;	type HealthCheckConfig struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that identifies the CloudWatch alarm that you want Amazon
0000000000000000000000000000000000000000;;		// Route 53 health checkers to use to determine whether this health check is
0000000000000000000000000000000000000000;;		// healthy.
0000000000000000000000000000000000000000;;		AlarmIdentifier *AlarmIdentifier `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// (CALCULATED Health Checks Only) A complex type that contains one ChildHealthCheck
0000000000000000000000000000000000000000;;		// element for each health check that you want to associate with a CALCULATED
0000000000000000000000000000000000000000;;		// health check.
0000000000000000000000000000000000000000;;		ChildHealthChecks []*string `locationNameList:"ChildHealthCheck" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Specify whether you want Amazon Route 53 to send the value of FullyQualifiedDomainName
0000000000000000000000000000000000000000;;		// to the endpoint in the client_hello message during TLS negotiation. This
0000000000000000000000000000000000000000;;		// allows the endpoint to respond to HTTPS health check requests with the applicable
0000000000000000000000000000000000000000;;		// SSL/TLS certificate.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Some endpoints require that HTTPS requests include the host name in the client_hello
0000000000000000000000000000000000000000;;		// message. If you don't enable SNI, the status of the health check will be
0000000000000000000000000000000000000000;;		// SSL alert handshake_failure. A health check can also have that status for
0000000000000000000000000000000000000000;;		// other reasons. If SNI is enabled and you're still getting the error, check
0000000000000000000000000000000000000000;;		// the SSL/TLS configuration on your endpoint and confirm that your certificate
0000000000000000000000000000000000000000;;		// is valid.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// The SSL/TLS certificate on your endpoint includes a domain name in the Common
0000000000000000000000000000000000000000;;		// Name field and possibly several more in the Subject Alternative Names field.
0000000000000000000000000000000000000000;;		// One of the domain names in the certificate should match the value that you
0000000000000000000000000000000000000000;;		// specify for FullyQualifiedDomainName. If the endpoint responds to the client_hello
0000000000000000000000000000000000000000;;		// message with a certificate that does not include the domain name that you
0000000000000000000000000000000000000000;;		// specified in FullyQualifiedDomainName, a health checker will retry the handshake.
0000000000000000000000000000000000000000;;		// In the second attempt, the health checker will omit FullyQualifiedDomainName
0000000000000000000000000000000000000000;;		// from the client_hello message.
0000000000000000000000000000000000000000;;		EnableSNI *bool `type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of consecutive health checks that an endpoint must pass or fail
0000000000000000000000000000000000000000;;		// for Amazon Route 53 to change the current status of the endpoint from unhealthy
0000000000000000000000000000000000000000;;		// to healthy or vice versa. For more information, see How Amazon Route 53 Determines
0000000000000000000000000000000000000000;;		// Whether an Endpoint Is Healthy (http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-determining-health-of-endpoints.html)
0000000000000000000000000000000000000000;;		// in the Amazon Route 53 Developer Guide.
0000000000000000000000000000000000000000;;		FailureThreshold *int64 `min:"1" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Amazon Route 53 behavior depends on whether you specify a value for IPAddress.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If you specify a value forIPAddress:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Amazon Route 53 sends health check requests to the specified IPv4 or IPv6
0000000000000000000000000000000000000000;;		// address and passes the value of FullyQualifiedDomainName in the Host header
0000000000000000000000000000000000000000;;		// for all health checks except TCP health checks. This is typically the fully
0000000000000000000000000000000000000000;;		// qualified DNS name of the endpoint on which you want Amazon Route 53 to perform
0000000000000000000000000000000000000000;;		// health checks.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// When Amazon Route 53 checks the health of an endpoint, here is how it constructs
0000000000000000000000000000000000000000;;		// the Host header:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * If you specify a value of 80 for Port and HTTP or HTTP_STR_MATCH for
0000000000000000000000000000000000000000;;		//    Type, Amazon Route 53 passes the value of FullyQualifiedDomainName to
0000000000000000000000000000000000000000;;		//    the endpoint in the Host header.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * If you specify a value of 443 for Port and HTTPS or HTTPS_STR_MATCH
0000000000000000000000000000000000000000;;		//    for Type, Amazon Route 53 passes the value of FullyQualifiedDomainName
0000000000000000000000000000000000000000;;		//    to the endpoint in the Host header.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * If you specify another value for Port and any value except TCP for Type,
0000000000000000000000000000000000000000;;		//    Amazon Route 53 passes FullyQualifiedDomainName:Port to the endpoint in
0000000000000000000000000000000000000000;;		//    the Host header.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If you don't specify a value for FullyQualifiedDomainName, Amazon Route 53
0000000000000000000000000000000000000000;;		// substitutes the value of IPAddress in the Host header in each of the preceding
0000000000000000000000000000000000000000;;		// cases.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If you don't specify a value for IPAddress:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Amazon Route 53 sends a DNS request to the domain that you specify for FullyQualifiedDomainName
0000000000000000000000000000000000000000;;		// at the interval that you specify for RequestInterval. Using an IPv4 address
0000000000000000000000000000000000000000;;		// that DNS returns, Amazon Route 53 then checks the health of the endpoint.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If you don't specify a value for IPAddress, Amazon Route 53 uses only IPv4
0000000000000000000000000000000000000000;;		// to send health checks to the endpoint. If there's no resource record set
0000000000000000000000000000000000000000;;		// with a type of A for the name that you specify for FullyQualifiedDomainName,
0000000000000000000000000000000000000000;;		// the health check fails with a "DNS resolution failed" error.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If you want to check the health of weighted, latency, or failover resource
0000000000000000000000000000000000000000;;		// record sets and you choose to specify the endpoint only by FullyQualifiedDomainName,
0000000000000000000000000000000000000000;;		// we recommend that you create a separate health check for each endpoint. For
0000000000000000000000000000000000000000;;		// example, create a health check for each HTTP server that is serving content
0000000000000000000000000000000000000000;;		// for www.example.com. For the value of FullyQualifiedDomainName, specify the
0000000000000000000000000000000000000000;;		// domain name of the server (such as us-east-1-www.example.com), not the name
0000000000000000000000000000000000000000;;		// of the resource record sets (www.example.com).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// In this configuration, if you create a health check for which the value of
0000000000000000000000000000000000000000;;		// FullyQualifiedDomainName matches the name of the resource record sets and
0000000000000000000000000000000000000000;;		// you then associate the health check with those resource record sets, health
0000000000000000000000000000000000000000;;		// check results will be unpredictable.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// In addition, if the value that you specify for Type is HTTP, HTTPS, HTTP_STR_MATCH,
0000000000000000000000000000000000000000;;		// or HTTPS_STR_MATCH, Amazon Route 53 passes the value of FullyQualifiedDomainName
0000000000000000000000000000000000000000;;		// in the Host header, as it does when you specify a value for IPAddress. If
0000000000000000000000000000000000000000;;		// the value of Type is TCP, Amazon Route 53 doesn't pass a Host header.
0000000000000000000000000000000000000000;;		FullyQualifiedDomainName *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of child health checks that are associated with a CALCULATED health
0000000000000000000000000000000000000000;;		// that Amazon Route 53 must consider healthy for the CALCULATED health check
0000000000000000000000000000000000000000;;		// to be considered healthy. To specify the child health checks that you want
0000000000000000000000000000000000000000;;		// to associate with a CALCULATED health check, use the HealthCheckConfig$ChildHealthChecks
0000000000000000000000000000000000000000;;		// and HealthCheckConfig$ChildHealthChecks elements.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Note the following:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * If you specify a number greater than the number of child health checks,
0000000000000000000000000000000000000000;;		//    Amazon Route 53 always considers this health check to be unhealthy.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * If you specify 0, Amazon Route 53 always considers this health check
0000000000000000000000000000000000000000;;		//    to be healthy.
0000000000000000000000000000000000000000;;		HealthThreshold *int64 `type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IPv4 or IPv6 IP address of the endpoint that you want Amazon Route 53
0000000000000000000000000000000000000000;;		// to perform health checks on. If you don't specify a value for IPAddress,
0000000000000000000000000000000000000000;;		// Amazon Route 53 sends a DNS request to resolve the domain name that you specify
0000000000000000000000000000000000000000;;		// in FullyQualifiedDomainName at the interval that you specify in RequestInterval.
0000000000000000000000000000000000000000;;		// Using an IP address returned by DNS, Amazon Route 53 then checks the health
0000000000000000000000000000000000000000;;		// of the endpoint.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If the endpoint is an EC2 instance, we recommend that you create an Elastic
0000000000000000000000000000000000000000;;		// IP address, associate it with your EC2 instance, and specify the Elastic
0000000000000000000000000000000000000000;;		// IP address for IPAddress. This ensures that the IP address of your instance
0000000000000000000000000000000000000000;;		// will never change.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// For more information, see HealthCheckConfig$FullyQualifiedDomainName.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Constraints: Amazon Route 53 can't check the health of endpoints for which
0000000000000000000000000000000000000000;;		// the IP address is in local, private, non-routable, or multicast ranges. For
0000000000000000000000000000000000000000;;		// more information about IP addresses for which you can't create health checks,
0000000000000000000000000000000000000000;;		// see the following documents:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * RFC 5735, Special Use IPv4 Addresses (https://tools.ietf.org/html/rfc5735)
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * RFC 6598, IANA-Reserved IPv4 Prefix for Shared Address Space (https://tools.ietf.org/html/rfc6598)
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * RFC 5156, Special-Use IPv6 Addresses (https://tools.ietf.org/html/rfc5156)
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// When the value of Type is CALCULATED or CLOUDWATCH_METRIC, omit IPAddress.
0000000000000000000000000000000000000000;;		IPAddress *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// When CloudWatch has insufficient data about the metric to determine the alarm
0000000000000000000000000000000000000000;;		// state, the status that you want Amazon Route 53 to assign to the health check:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * Healthy: Amazon Route 53 considers the health check to be healthy.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * Unhealthy: Amazon Route 53 considers the health check to be unhealthy.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * LastKnownStatus: Amazon Route 53uses the status of the health check
0000000000000000000000000000000000000000;;		//    from the last time CloudWatch had sufficient data to determine the alarm
0000000000000000000000000000000000000000;;		//    state. For new health checks that have no last known status, the default
0000000000000000000000000000000000000000;;		//    status for the health check is healthy.
0000000000000000000000000000000000000000;;		InsufficientDataHealthStatus *string `type:"string" enum:"InsufficientDataHealthStatus"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Specify whether you want Amazon Route 53 to invert the status of a health
0000000000000000000000000000000000000000;;		// check, for example, to consider a health check unhealthy when it otherwise
0000000000000000000000000000000000000000;;		// would be considered healthy.
0000000000000000000000000000000000000000;;		Inverted *bool `type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Specify whether you want Amazon Route 53 to measure the latency between health
0000000000000000000000000000000000000000;;		// checkers in multiple AWS regions and your endpoint, and to display CloudWatch
0000000000000000000000000000000000000000;;		// latency graphs on the Health Checks page in the Amazon Route 53 console.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// You can't change the value of MeasureLatency after you create a health check.
0000000000000000000000000000000000000000;;		MeasureLatency *bool `type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The port on the endpoint on which you want Amazon Route 53 to perform health
0000000000000000000000000000000000000000;;		// checks. Specify a value for Port only when you specify a value for IPAddress.
0000000000000000000000000000000000000000;;		Port *int64 `min:"1" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that contains one Region element for each region from which
0000000000000000000000000000000000000000;;		// you want Amazon Route 53 health checkers to check the specified endpoint.
0000000000000000000000000000000000000000;;		Regions []*string `locationNameList:"Region" min:"1" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of seconds between the time that Amazon Route 53 gets a response
0000000000000000000000000000000000000000;;		// from your endpoint and the time that it sends the next health-check request.
0000000000000000000000000000000000000000;;		// Each Amazon Route 53 health checker makes requests at this interval.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// You can't change the value of RequestInterval after you create a health check.
0000000000000000000000000000000000000000;;		RequestInterval *int64 `min:"10" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The path, if any, that you want Amazon Route 53 to request when performing
0000000000000000000000000000000000000000;;		// health checks. The path can be any value for which your endpoint will return
0000000000000000000000000000000000000000;;		// an HTTP status code of 2xx or 3xx when the endpoint is healthy, for example,
0000000000000000000000000000000000000000;;		// the file /docs/route53-health-check.html.
0000000000000000000000000000000000000000;;		ResourcePath *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If the value of Type is HTTP_STR_MATCH or HTTP_STR_MATCH, the string that
0000000000000000000000000000000000000000;;		// you want Amazon Route 53 to search for in the response body from the specified
0000000000000000000000000000000000000000;;		// resource. If the string appears in the response body, Amazon Route 53 considers
0000000000000000000000000000000000000000;;		// the resource healthy.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Amazon Route 53 considers case when searching for SearchString in the response
0000000000000000000000000000000000000000;;		// body.
0000000000000000000000000000000000000000;;		SearchString *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The type of health check that you want to create, which indicates how Amazon
0000000000000000000000000000000000000000;;		// Route 53 determines whether an endpoint is healthy.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// You can't change the value of Type after you create a health check.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// You can create the following types of health checks:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * HTTP: Amazon Route 53 tries to establish a TCP connection. If successful,
0000000000000000000000000000000000000000;;		//    Amazon Route 53 submits an HTTP request and waits for an HTTP status code
0000000000000000000000000000000000000000;;		//    of 200 or greater and less than 400.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * HTTPS: Amazon Route 53 tries to establish a TCP connection. If successful,
0000000000000000000000000000000000000000;;		//    Amazon Route 53 submits an HTTPS request and waits for an HTTP status
0000000000000000000000000000000000000000;;		//    code of 200 or greater and less than 400.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If you specify HTTPS for the value of Type, the endpoint must support TLS
0000000000000000000000000000000000000000;;		//    v1.0 or later.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * HTTP_STR_MATCH: Amazon Route 53 tries to establish a TCP connection.
0000000000000000000000000000000000000000;;		//    If successful, Amazon Route 53 submits an HTTP request and searches the
0000000000000000000000000000000000000000;;		//    first 5,120 bytes of the response body for the string that you specify
0000000000000000000000000000000000000000;;		//    in SearchString.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * HTTPS_STR_MATCH: Amazon Route 53 tries to establish a TCP connection.
0000000000000000000000000000000000000000;;		//    If successful, Amazon Route 53 submits an HTTPS request and searches the
0000000000000000000000000000000000000000;;		//    first 5,120 bytes of the response body for the string that you specify
0000000000000000000000000000000000000000;;		//    in SearchString.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * TCP: Amazon Route 53 tries to establish a TCP connection.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * CLOUDWATCH_METRIC: The health check is associated with a CloudWatch
0000000000000000000000000000000000000000;;		//    alarm. If the state of the alarm is OK, the health check is considered
0000000000000000000000000000000000000000;;		//    healthy. If the state is ALARM, the health check is considered unhealthy.
0000000000000000000000000000000000000000;;		//    If CloudWatch doesn't have sufficient data to determine whether the state
0000000000000000000000000000000000000000;;		//    is OK or ALARM, the health check status depends on the setting for InsufficientDataHealthStatus:
0000000000000000000000000000000000000000;;		//    Healthy, Unhealthy, or LastKnownStatus.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * CALCULATED: For health checks that monitor the status of other health
0000000000000000000000000000000000000000;;		//    checks, Amazon Route 53 adds up the number of health checks that Amazon
0000000000000000000000000000000000000000;;		//    Route 53 health checkers consider to be healthy and compares that number
0000000000000000000000000000000000000000;;		//    with the value of HealthThreshold.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// For more information about how Amazon Route 53 determines whether an endpoint
0000000000000000000000000000000000000000;;		// is healthy, see the introduction to this topic.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Type is a required field
0000000000000000000000000000000000000000;;		Type *string `type:"string" required:"true" enum:"HealthCheckType"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s HealthCheckConfig) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s HealthCheckConfig) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *HealthCheckConfig) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "HealthCheckConfig"}
0000000000000000000000000000000000000000;;		if s.FailureThreshold != nil && *s.FailureThreshold < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinValue("FailureThreshold", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Port != nil && *s.Port < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinValue("Port", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Regions != nil && len(s.Regions) < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("Regions", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.RequestInterval != nil && *s.RequestInterval < 10 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinValue("RequestInterval", 10))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Type == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Type"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.AlarmIdentifier != nil {
0000000000000000000000000000000000000000;;			if err := s.AlarmIdentifier.Validate(); err != nil {
0000000000000000000000000000000000000000;;				invalidParams.AddNested("AlarmIdentifier", err.(request.ErrInvalidParams))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAlarmIdentifier sets the AlarmIdentifier field's value.
0000000000000000000000000000000000000000;;	func (s *HealthCheckConfig) SetAlarmIdentifier(v *AlarmIdentifier) *HealthCheckConfig {
0000000000000000000000000000000000000000;;		s.AlarmIdentifier = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetChildHealthChecks sets the ChildHealthChecks field's value.
0000000000000000000000000000000000000000;;	func (s *HealthCheckConfig) SetChildHealthChecks(v []*string) *HealthCheckConfig {
0000000000000000000000000000000000000000;;		s.ChildHealthChecks = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEnableSNI sets the EnableSNI field's value.
0000000000000000000000000000000000000000;;	func (s *HealthCheckConfig) SetEnableSNI(v bool) *HealthCheckConfig {
0000000000000000000000000000000000000000;;		s.EnableSNI = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFailureThreshold sets the FailureThreshold field's value.
0000000000000000000000000000000000000000;;	func (s *HealthCheckConfig) SetFailureThreshold(v int64) *HealthCheckConfig {
0000000000000000000000000000000000000000;;		s.FailureThreshold = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFullyQualifiedDomainName sets the FullyQualifiedDomainName field's value.
0000000000000000000000000000000000000000;;	func (s *HealthCheckConfig) SetFullyQualifiedDomainName(v string) *HealthCheckConfig {
0000000000000000000000000000000000000000;;		s.FullyQualifiedDomainName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHealthThreshold sets the HealthThreshold field's value.
0000000000000000000000000000000000000000;;	func (s *HealthCheckConfig) SetHealthThreshold(v int64) *HealthCheckConfig {
0000000000000000000000000000000000000000;;		s.HealthThreshold = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIPAddress sets the IPAddress field's value.
0000000000000000000000000000000000000000;;	func (s *HealthCheckConfig) SetIPAddress(v string) *HealthCheckConfig {
0000000000000000000000000000000000000000;;		s.IPAddress = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInsufficientDataHealthStatus sets the InsufficientDataHealthStatus field's value.
0000000000000000000000000000000000000000;;	func (s *HealthCheckConfig) SetInsufficientDataHealthStatus(v string) *HealthCheckConfig {
0000000000000000000000000000000000000000;;		s.InsufficientDataHealthStatus = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInverted sets the Inverted field's value.
0000000000000000000000000000000000000000;;	func (s *HealthCheckConfig) SetInverted(v bool) *HealthCheckConfig {
0000000000000000000000000000000000000000;;		s.Inverted = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMeasureLatency sets the MeasureLatency field's value.
0000000000000000000000000000000000000000;;	func (s *HealthCheckConfig) SetMeasureLatency(v bool) *HealthCheckConfig {
0000000000000000000000000000000000000000;;		s.MeasureLatency = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPort sets the Port field's value.
0000000000000000000000000000000000000000;;	func (s *HealthCheckConfig) SetPort(v int64) *HealthCheckConfig {
0000000000000000000000000000000000000000;;		s.Port = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRegions sets the Regions field's value.
0000000000000000000000000000000000000000;;	func (s *HealthCheckConfig) SetRegions(v []*string) *HealthCheckConfig {
0000000000000000000000000000000000000000;;		s.Regions = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRequestInterval sets the RequestInterval field's value.
0000000000000000000000000000000000000000;;	func (s *HealthCheckConfig) SetRequestInterval(v int64) *HealthCheckConfig {
0000000000000000000000000000000000000000;;		s.RequestInterval = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetResourcePath sets the ResourcePath field's value.
0000000000000000000000000000000000000000;;	func (s *HealthCheckConfig) SetResourcePath(v string) *HealthCheckConfig {
0000000000000000000000000000000000000000;;		s.ResourcePath = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSearchString sets the SearchString field's value.
0000000000000000000000000000000000000000;;	func (s *HealthCheckConfig) SetSearchString(v string) *HealthCheckConfig {
0000000000000000000000000000000000000000;;		s.SearchString = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetType sets the Type field's value.
0000000000000000000000000000000000000000;;	func (s *HealthCheckConfig) SetType(v string) *HealthCheckConfig {
0000000000000000000000000000000000000000;;		s.Type = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains the last failure reason as reported by one Amazon
0000000000000000000000000000000000000000;;	// Route 53 health checker.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/HealthCheckObservation
0000000000000000000000000000000000000000;;	type HealthCheckObservation struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IP address of the Amazon Route 53 health checker that provided the failure
0000000000000000000000000000000000000000;;		// reason in StatusReport.
0000000000000000000000000000000000000000;;		IPAddress *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The region of the Amazon Route 53 health checker that provided the status
0000000000000000000000000000000000000000;;		// in StatusReport.
0000000000000000000000000000000000000000;;		Region *string `min:"1" type:"string" enum:"HealthCheckRegion"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that contains the last failure reason as reported by one Amazon
0000000000000000000000000000000000000000;;		// Route 53 health checker and the time of the failed health check.
0000000000000000000000000000000000000000;;		StatusReport *StatusReport `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s HealthCheckObservation) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s HealthCheckObservation) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIPAddress sets the IPAddress field's value.
0000000000000000000000000000000000000000;;	func (s *HealthCheckObservation) SetIPAddress(v string) *HealthCheckObservation {
0000000000000000000000000000000000000000;;		s.IPAddress = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRegion sets the Region field's value.
0000000000000000000000000000000000000000;;	func (s *HealthCheckObservation) SetRegion(v string) *HealthCheckObservation {
0000000000000000000000000000000000000000;;		s.Region = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStatusReport sets the StatusReport field's value.
0000000000000000000000000000000000000000;;	func (s *HealthCheckObservation) SetStatusReport(v *StatusReport) *HealthCheckObservation {
0000000000000000000000000000000000000000;;		s.StatusReport = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains general information about the hosted zone.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/HostedZone
0000000000000000000000000000000000000000;;	type HostedZone struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The value that you specified for CallerReference when you created the hosted
0000000000000000000000000000000000000000;;		// zone.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// CallerReference is a required field
0000000000000000000000000000000000000000;;		CallerReference *string `min:"1" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that includes the Comment and PrivateZone elements. If you
0000000000000000000000000000000000000000;;		// omitted the HostedZoneConfig and Comment elements from the request, the Config
0000000000000000000000000000000000000000;;		// and Comment elements don't appear in the response.
0000000000000000000000000000000000000000;;		Config *HostedZoneConfig `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID that Amazon Route 53 assigned to the hosted zone when you created
0000000000000000000000000000000000000000;;		// it.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Id is a required field
0000000000000000000000000000000000000000;;		Id *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the domain. For public hosted zones, this is the name that you
0000000000000000000000000000000000000000;;		// have registered with your DNS registrar.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// For information about how to specify characters other than a-z, 0-9, and
0000000000000000000000000000000000000000;;		// - (hyphen) and how to specify internationalized domain names, see CreateHostedZone.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Name is a required field
0000000000000000000000000000000000000000;;		Name *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of resource record sets in the hosted zone.
0000000000000000000000000000000000000000;;		ResourceRecordSetCount *int64 `type:"long"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s HostedZone) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s HostedZone) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCallerReference sets the CallerReference field's value.
0000000000000000000000000000000000000000;;	func (s *HostedZone) SetCallerReference(v string) *HostedZone {
0000000000000000000000000000000000000000;;		s.CallerReference = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetConfig sets the Config field's value.
0000000000000000000000000000000000000000;;	func (s *HostedZone) SetConfig(v *HostedZoneConfig) *HostedZone {
0000000000000000000000000000000000000000;;		s.Config = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetId sets the Id field's value.
0000000000000000000000000000000000000000;;	func (s *HostedZone) SetId(v string) *HostedZone {
0000000000000000000000000000000000000000;;		s.Id = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetName sets the Name field's value.
0000000000000000000000000000000000000000;;	func (s *HostedZone) SetName(v string) *HostedZone {
0000000000000000000000000000000000000000;;		s.Name = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetResourceRecordSetCount sets the ResourceRecordSetCount field's value.
0000000000000000000000000000000000000000;;	func (s *HostedZone) SetResourceRecordSetCount(v int64) *HostedZone {
0000000000000000000000000000000000000000;;		s.ResourceRecordSetCount = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains an optional comment about your hosted zone.
0000000000000000000000000000000000000000;;	// If you don't want to specify a comment, omit both the HostedZoneConfig and
0000000000000000000000000000000000000000;;	// Comment elements.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/HostedZoneConfig
0000000000000000000000000000000000000000;;	type HostedZoneConfig struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Any comments that you want to include about the hosted zone.
0000000000000000000000000000000000000000;;		Comment *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A value that indicates whether this is a private hosted zone.
0000000000000000000000000000000000000000;;		PrivateZone *bool `type:"boolean"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s HostedZoneConfig) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s HostedZoneConfig) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetComment sets the Comment field's value.
0000000000000000000000000000000000000000;;	func (s *HostedZoneConfig) SetComment(v string) *HostedZoneConfig {
0000000000000000000000000000000000000000;;		s.Comment = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrivateZone sets the PrivateZone field's value.
0000000000000000000000000000000000000000;;	func (s *HostedZoneConfig) SetPrivateZone(v bool) *HostedZoneConfig {
0000000000000000000000000000000000000000;;		s.PrivateZone = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// To get a list of geographic locations that Amazon Route 53 supports for geolocation,
0000000000000000000000000000000000000000;;	// send a GET request to the /Amazon Route 53 API version/geolocations resource.
0000000000000000000000000000000000000000;;	// The response to this request includes a GeoLocationDetails element for each
0000000000000000000000000000000000000000;;	// location that Amazon Route 53 supports.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Countries are listed first, and continents are listed last. If Amazon Route
0000000000000000000000000000000000000000;;	// 53 supports subdivisions for a country (for example, states or provinces),
0000000000000000000000000000000000000000;;	// the subdivisions for that country are listed in alphabetical order immediately
0000000000000000000000000000000000000000;;	// after the corresponding country.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListGeoLocationsRequest
0000000000000000000000000000000000000000;;	type ListGeoLocationsInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// (Optional) The maximum number of geolocations to be included in the response
0000000000000000000000000000000000000000;;		// body for this request. If more than MaxItems geolocations remain to be listed,
0000000000000000000000000000000000000000;;		// then the value of the IsTruncated element in the response is true.
0000000000000000000000000000000000000000;;		MaxItems *string `location:"querystring" locationName:"maxitems" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The code for the continent with which you want to start listing locations
0000000000000000000000000000000000000000;;		// that Amazon Route 53 supports for geolocation. If Amazon Route 53 has already
0000000000000000000000000000000000000000;;		// returned a page or more of results, if IsTruncated is true, and if NextContinentCode
0000000000000000000000000000000000000000;;		// from the previous response has a value, enter that value in StartContinentCode
0000000000000000000000000000000000000000;;		// to return the next page of results.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Include StartContinentCode only if you want to list continents. Don't include
0000000000000000000000000000000000000000;;		// StartContinentCode when you're listing countries or countries with their
0000000000000000000000000000000000000000;;		// subdivisions.
0000000000000000000000000000000000000000;;		StartContinentCode *string `location:"querystring" locationName:"startcontinentcode" min:"2" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The code for the country with which you want to start listing locations that
0000000000000000000000000000000000000000;;		// Amazon Route 53 supports for geolocation. If Amazon Route 53 has already
0000000000000000000000000000000000000000;;		// returned a page or more of results, if IsTruncated is true, and if NextCountryCode
0000000000000000000000000000000000000000;;		// from the previous response has a value, enter that value in StartCountryCode
0000000000000000000000000000000000000000;;		// to return the next page of results.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Amazon Route 53 uses the two-letter country codes that are specified in ISO
0000000000000000000000000000000000000000;;		// standard 3166-1 alpha-2 (https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
0000000000000000000000000000000000000000;;		StartCountryCode *string `location:"querystring" locationName:"startcountrycode" min:"1" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The code for the subdivision (for example, state or province) with which
0000000000000000000000000000000000000000;;		// you want to start listing locations that Amazon Route 53 supports for geolocation.
0000000000000000000000000000000000000000;;		// If Amazon Route 53 has already returned a page or more of results, if IsTruncated
0000000000000000000000000000000000000000;;		// is true, and if NextSubdivisionCode from the previous response has a value,
0000000000000000000000000000000000000000;;		// enter that value in StartSubdivisionCode to return the next page of results.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// To list subdivisions of a country, you must include both StartCountryCode
0000000000000000000000000000000000000000;;		// and StartSubdivisionCode.
0000000000000000000000000000000000000000;;		StartSubdivisionCode *string `location:"querystring" locationName:"startsubdivisioncode" min:"1" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ListGeoLocationsInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ListGeoLocationsInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *ListGeoLocationsInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "ListGeoLocationsInput"}
0000000000000000000000000000000000000000;;		if s.StartContinentCode != nil && len(*s.StartContinentCode) < 2 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("StartContinentCode", 2))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.StartCountryCode != nil && len(*s.StartCountryCode) < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("StartCountryCode", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.StartSubdivisionCode != nil && len(*s.StartSubdivisionCode) < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("StartSubdivisionCode", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxItems sets the MaxItems field's value.
0000000000000000000000000000000000000000;;	func (s *ListGeoLocationsInput) SetMaxItems(v string) *ListGeoLocationsInput {
0000000000000000000000000000000000000000;;		s.MaxItems = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStartContinentCode sets the StartContinentCode field's value.
0000000000000000000000000000000000000000;;	func (s *ListGeoLocationsInput) SetStartContinentCode(v string) *ListGeoLocationsInput {
0000000000000000000000000000000000000000;;		s.StartContinentCode = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStartCountryCode sets the StartCountryCode field's value.
0000000000000000000000000000000000000000;;	func (s *ListGeoLocationsInput) SetStartCountryCode(v string) *ListGeoLocationsInput {
0000000000000000000000000000000000000000;;		s.StartCountryCode = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStartSubdivisionCode sets the StartSubdivisionCode field's value.
0000000000000000000000000000000000000000;;	func (s *ListGeoLocationsInput) SetStartSubdivisionCode(v string) *ListGeoLocationsInput {
0000000000000000000000000000000000000000;;		s.StartSubdivisionCode = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type containing the response information for the request.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListGeoLocationsResponse
0000000000000000000000000000000000000000;;	type ListGeoLocationsOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that contains one GeoLocationDetails element for each location
0000000000000000000000000000000000000000;;		// that Amazon Route 53 supports for geolocation.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// GeoLocationDetailsList is a required field
0000000000000000000000000000000000000000;;		GeoLocationDetailsList []*GeoLocationDetails `locationNameList:"GeoLocationDetails" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A value that indicates whether more locations remain to be listed after the
0000000000000000000000000000000000000000;;		// last location in this response. If so, the value of IsTruncated is true.
0000000000000000000000000000000000000000;;		// To get more values, submit another request and include the values of NextContinentCode,
0000000000000000000000000000000000000000;;		// NextCountryCode, and NextSubdivisionCode in the StartContinentCode, StartCountryCode,
0000000000000000000000000000000000000000;;		// and StartSubdivisionCode, as applicable.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// IsTruncated is a required field
0000000000000000000000000000000000000000;;		IsTruncated *bool `type:"boolean" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The value that you specified for MaxItems in the request.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// MaxItems is a required field
0000000000000000000000000000000000000000;;		MaxItems *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If IsTruncated is true, you can make a follow-up request to display more
0000000000000000000000000000000000000000;;		// locations. Enter the value of NextContinentCode in the StartContinentCode
0000000000000000000000000000000000000000;;		// parameter in another GETListGeoLocations request.
0000000000000000000000000000000000000000;;		NextContinentCode *string `min:"2" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If IsTruncated is true, you can make a follow-up request to display more
0000000000000000000000000000000000000000;;		// locations. Enter the value of NextCountryCode in the StartCountryCode parameter
0000000000000000000000000000000000000000;;		// in another GETListGeoLocations request.
0000000000000000000000000000000000000000;;		NextCountryCode *string `min:"1" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If IsTruncated is true, you can make a follow-up request to display more
0000000000000000000000000000000000000000;;		// locations. Enter the value of NextSubdivisionCode in the StartSubdivisionCode
0000000000000000000000000000000000000000;;		// parameter in another GETListGeoLocations request.
0000000000000000000000000000000000000000;;		NextSubdivisionCode *string `min:"1" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ListGeoLocationsOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ListGeoLocationsOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGeoLocationDetailsList sets the GeoLocationDetailsList field's value.
0000000000000000000000000000000000000000;;	func (s *ListGeoLocationsOutput) SetGeoLocationDetailsList(v []*GeoLocationDetails) *ListGeoLocationsOutput {
0000000000000000000000000000000000000000;;		s.GeoLocationDetailsList = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIsTruncated sets the IsTruncated field's value.
0000000000000000000000000000000000000000;;	func (s *ListGeoLocationsOutput) SetIsTruncated(v bool) *ListGeoLocationsOutput {
0000000000000000000000000000000000000000;;		s.IsTruncated = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxItems sets the MaxItems field's value.
0000000000000000000000000000000000000000;;	func (s *ListGeoLocationsOutput) SetMaxItems(v string) *ListGeoLocationsOutput {
0000000000000000000000000000000000000000;;		s.MaxItems = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextContinentCode sets the NextContinentCode field's value.
0000000000000000000000000000000000000000;;	func (s *ListGeoLocationsOutput) SetNextContinentCode(v string) *ListGeoLocationsOutput {
0000000000000000000000000000000000000000;;		s.NextContinentCode = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextCountryCode sets the NextCountryCode field's value.
0000000000000000000000000000000000000000;;	func (s *ListGeoLocationsOutput) SetNextCountryCode(v string) *ListGeoLocationsOutput {
0000000000000000000000000000000000000000;;		s.NextCountryCode = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextSubdivisionCode sets the NextSubdivisionCode field's value.
0000000000000000000000000000000000000000;;	func (s *ListGeoLocationsOutput) SetNextSubdivisionCode(v string) *ListGeoLocationsOutput {
0000000000000000000000000000000000000000;;		s.NextSubdivisionCode = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// To retrieve a list of your health checks, send a GET request to the /2013-04-01/healthcheck
0000000000000000000000000000000000000000;;	// resource. The response to this request includes a HealthChecks element with
0000000000000000000000000000000000000000;;	// zero or more HealthCheck child elements. By default, the list of health checks
0000000000000000000000000000000000000000;;	// is displayed on a single page. You can control the length of the page that
0000000000000000000000000000000000000000;;	// is displayed by using the MaxItems parameter. You can use the Marker parameter
0000000000000000000000000000000000000000;;	// to control the health check that the list begins with.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Amazon Route 53 returns a maximum of 100 items. If you set MaxItems to a
0000000000000000000000000000000000000000;;	// value greater than 100, Amazon Route 53 returns only the first 100.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListHealthChecksRequest
0000000000000000000000000000000000000000;;	type ListHealthChecksInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If the response to a ListHealthChecks is more than one page, marker is the
0000000000000000000000000000000000000000;;		// health check ID for the first health check on the next page of results. For
0000000000000000000000000000000000000000;;		// more information, see ListHealthChecksResponse$MaxItems.
0000000000000000000000000000000000000000;;		Marker *string `location:"querystring" locationName:"marker" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum number of HealthCheck elements you want ListHealthChecks to return
0000000000000000000000000000000000000000;;		// on each page of the response body. If the AWS account includes more HealthCheck
0000000000000000000000000000000000000000;;		// elements than the value of maxitems, the response is broken into pages. Each
0000000000000000000000000000000000000000;;		// page contains the number of HealthCheck elements specified by maxitems.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// For example, suppose you specify 10 for maxitems and the current AWS account
0000000000000000000000000000000000000000;;		// has 51 health checks. In the response, ListHealthChecks sets ListHealthChecksResponse$IsTruncated
0000000000000000000000000000000000000000;;		// to true and includes the ListHealthChecksResponse$NextMarker element. To
0000000000000000000000000000000000000000;;		// access the second and subsequent pages, you resend the GETListHealthChecks
0000000000000000000000000000000000000000;;		// request, add the ListHealthChecksResponse$Marker parameter to the request,
0000000000000000000000000000000000000000;;		// and specify the value of the ListHealthChecksResponse$NextMarker element
0000000000000000000000000000000000000000;;		// from the previous response. On the last (sixth) page of the response, which
0000000000000000000000000000000000000000;;		// contains only one HealthCheck element:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * The value of ListHealthChecksResponse$IsTruncated is false.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * ListHealthChecksResponse$NextMarker is omitted.
0000000000000000000000000000000000000000;;		MaxItems *string `location:"querystring" locationName:"maxitems" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ListHealthChecksInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ListHealthChecksInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMarker sets the Marker field's value.
0000000000000000000000000000000000000000;;	func (s *ListHealthChecksInput) SetMarker(v string) *ListHealthChecksInput {
0000000000000000000000000000000000000000;;		s.Marker = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxItems sets the MaxItems field's value.
0000000000000000000000000000000000000000;;	func (s *ListHealthChecksInput) SetMaxItems(v string) *ListHealthChecksInput {
0000000000000000000000000000000000000000;;		s.MaxItems = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains the response to a ListHealthChecks request.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListHealthChecksResponse
0000000000000000000000000000000000000000;;	type ListHealthChecksOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that contains one HealthCheck element for each health check
0000000000000000000000000000000000000000;;		// that is associated with the current AWS account.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// HealthChecks is a required field
0000000000000000000000000000000000000000;;		HealthChecks []*HealthCheck `locationNameList:"HealthCheck" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A flag that indicates whether there are more health checks to be listed.
0000000000000000000000000000000000000000;;		// If the response was truncated, you can get the next group of maxitems health
0000000000000000000000000000000000000000;;		// checks by calling ListHealthChecks again and specifying the value of the
0000000000000000000000000000000000000000;;		// NextMarker element in the marker parameter.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Valid Values: true | false
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// IsTruncated is a required field
0000000000000000000000000000000000000000;;		IsTruncated *bool `type:"boolean" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// For the second and subsequent calls to ListHealthChecks, Marker is the value
0000000000000000000000000000000000000000;;		// that you specified for the marker parameter in the previous request.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Marker is a required field
0000000000000000000000000000000000000000;;		Marker *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The value that you specified for the maxitems parameter in the call to ListHealthChecks
0000000000000000000000000000000000000000;;		// that produced the current response.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// MaxItems is a required field
0000000000000000000000000000000000000000;;		MaxItems *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If IsTruncated is true, the value of NextMarker identifies the first health
0000000000000000000000000000000000000000;;		// check in the next group of maxitems health checks. Call ListHealthChecks
0000000000000000000000000000000000000000;;		// again and specify the value of NextMarker in the marker parameter.
0000000000000000000000000000000000000000;;		NextMarker *string `type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ListHealthChecksOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ListHealthChecksOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHealthChecks sets the HealthChecks field's value.
0000000000000000000000000000000000000000;;	func (s *ListHealthChecksOutput) SetHealthChecks(v []*HealthCheck) *ListHealthChecksOutput {
0000000000000000000000000000000000000000;;		s.HealthChecks = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIsTruncated sets the IsTruncated field's value.
0000000000000000000000000000000000000000;;	func (s *ListHealthChecksOutput) SetIsTruncated(v bool) *ListHealthChecksOutput {
0000000000000000000000000000000000000000;;		s.IsTruncated = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMarker sets the Marker field's value.
0000000000000000000000000000000000000000;;	func (s *ListHealthChecksOutput) SetMarker(v string) *ListHealthChecksOutput {
0000000000000000000000000000000000000000;;		s.Marker = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxItems sets the MaxItems field's value.
0000000000000000000000000000000000000000;;	func (s *ListHealthChecksOutput) SetMaxItems(v string) *ListHealthChecksOutput {
0000000000000000000000000000000000000000;;		s.MaxItems = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextMarker sets the NextMarker field's value.
0000000000000000000000000000000000000000;;	func (s *ListHealthChecksOutput) SetNextMarker(v string) *ListHealthChecksOutput {
0000000000000000000000000000000000000000;;		s.NextMarker = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// To retrieve a list of your public and private hosted zones in ASCII order
0000000000000000000000000000000000000000;;	// by domain name, send a GET request to the /Amazon Route 53 API version/hostedzonesbyname
0000000000000000000000000000000000000000;;	// resource. The response to this request includes a HostedZone child element
0000000000000000000000000000000000000000;;	// for each hosted zone that was created by the current AWS account. ListHostedZonesByName
0000000000000000000000000000000000000000;;	// sorts hosted zones by name with the labels reversed, for example:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// com.example.www.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note the trailing dot, which can change the sort order in some circumstances.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If the domain name includes escape characters or Punycode, ListHostedZonesByName
0000000000000000000000000000000000000000;;	// alphabetizes the domain name using the escaped or Punycoded value, which
0000000000000000000000000000000000000000;;	// is the format that Amazon Route 53 saves in its database. For example, to
0000000000000000000000000000000000000000;;	// create a hosted zone for exämple.com, you specify ex\344mple.com for the
0000000000000000000000000000000000000000;;	// domain name. ListHostedZonesByName alphabetizes it as: com.ex\344mple. The
0000000000000000000000000000000000000000;;	// labels are reversed, and it's alphabetized using the escaped value. For more
0000000000000000000000000000000000000000;;	// information about valid domain name formats, including internationalized
0000000000000000000000000000000000000000;;	// domain names, see DNS Domain Name Format (http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DomainNameFormat.html)
0000000000000000000000000000000000000000;;	// in the Amazon Route 53 Developer Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Amazon Route 53 returns up to 100 items in each response. If you have a lot
0000000000000000000000000000000000000000;;	// of hosted zones, you can use the MaxItems parameter to list them in groups
0000000000000000000000000000000000000000;;	// of up to 100. The response includes values that help you navigate from one
0000000000000000000000000000000000000000;;	// group of MaxItems hosted zones to the next:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * The DNSName and HostedZoneId elements in the response contain the values,
0000000000000000000000000000000000000000;;	//    if any, that you specified for the dnsname and hostedzoneid parameters
0000000000000000000000000000000000000000;;	//    in the request that produced the current response.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * The MaxItems element in the response contains the value, if any, that
0000000000000000000000000000000000000000;;	//    you specified for the maxitems parameter in the request that produced
0000000000000000000000000000000000000000;;	//    the current response.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * If the value of IsTruncated in the response is true, there are more
0000000000000000000000000000000000000000;;	//    hosted zones associated with the current Amazon Route 53 account.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If IsTruncated is false, this response includes the last hosted zone that
0000000000000000000000000000000000000000;;	//    is associated with the current account. The NextDNSName element and NextHostedZoneId
0000000000000000000000000000000000000000;;	//    elements are omitted from the response.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * The NextDNSName and NextHostedZoneId elements in the response contain
0000000000000000000000000000000000000000;;	//    the domain name and the hosted zone ID of the next hosted zone that is
0000000000000000000000000000000000000000;;	//    associated with the current AWS account. If you want to list more hosted
0000000000000000000000000000000000000000;;	//    zones, make another call to ListHostedZonesByName, and specify the value
0000000000000000000000000000000000000000;;	//    of NextDNSName and NextHostedZoneId in the dnsname and hostedzoneid parameters,
0000000000000000000000000000000000000000;;	//    respectively.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListHostedZonesByNameRequest
0000000000000000000000000000000000000000;;	type ListHostedZonesByNameInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// (Optional) For your first request to ListHostedZonesByName, include the dnsname
0000000000000000000000000000000000000000;;		// parameter only if you want to specify the name of the first hosted zone in
0000000000000000000000000000000000000000;;		// the response. If you don't include the dnsname parameter, Amazon Route 53
0000000000000000000000000000000000000000;;		// returns all of the hosted zones that were created by the current AWS account,
0000000000000000000000000000000000000000;;		// in ASCII order. For subsequent requests, include both dnsname and hostedzoneid
0000000000000000000000000000000000000000;;		// parameters. For dnsname, specify the value of NextDNSName from the previous
0000000000000000000000000000000000000000;;		// response.
0000000000000000000000000000000000000000;;		DNSName *string `location:"querystring" locationName:"dnsname" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// (Optional) For your first request to ListHostedZonesByName, do not include
0000000000000000000000000000000000000000;;		// the hostedzoneid parameter.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If you have more hosted zones than the value of maxitems, ListHostedZonesByName
0000000000000000000000000000000000000000;;		// returns only the first maxitems hosted zones. To get the next group of maxitems
0000000000000000000000000000000000000000;;		// hosted zones, submit another request to ListHostedZonesByName and include
0000000000000000000000000000000000000000;;		// both dnsname and hostedzoneid parameters. For the value of hostedzoneid,
0000000000000000000000000000000000000000;;		// specify the value of the NextHostedZoneId element from the previous response.
0000000000000000000000000000000000000000;;		HostedZoneId *string `location:"querystring" locationName:"hostedzoneid" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum number of hosted zones to be included in the response body for
0000000000000000000000000000000000000000;;		// this request. If you have more than maxitems hosted zones, then the value
0000000000000000000000000000000000000000;;		// of the IsTruncated element in the response is true, and the values of NextDNSName
0000000000000000000000000000000000000000;;		// and NextHostedZoneId specify the first hosted zone in the next group of maxitems
0000000000000000000000000000000000000000;;		// hosted zones.
0000000000000000000000000000000000000000;;		MaxItems *string `location:"querystring" locationName:"maxitems" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ListHostedZonesByNameInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ListHostedZonesByNameInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDNSName sets the DNSName field's value.
0000000000000000000000000000000000000000;;	func (s *ListHostedZonesByNameInput) SetDNSName(v string) *ListHostedZonesByNameInput {
0000000000000000000000000000000000000000;;		s.DNSName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHostedZoneId sets the HostedZoneId field's value.
0000000000000000000000000000000000000000;;	func (s *ListHostedZonesByNameInput) SetHostedZoneId(v string) *ListHostedZonesByNameInput {
0000000000000000000000000000000000000000;;		s.HostedZoneId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxItems sets the MaxItems field's value.
0000000000000000000000000000000000000000;;	func (s *ListHostedZonesByNameInput) SetMaxItems(v string) *ListHostedZonesByNameInput {
0000000000000000000000000000000000000000;;		s.MaxItems = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains the response information for the request.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListHostedZonesByNameResponse
0000000000000000000000000000000000000000;;	type ListHostedZonesByNameOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// For the second and subsequent calls to ListHostedZonesByName, DNSName is
0000000000000000000000000000000000000000;;		// the value that you specified for the dnsname parameter in the request that
0000000000000000000000000000000000000000;;		// produced the current response.
0000000000000000000000000000000000000000;;		DNSName *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID that Amazon Route 53 assigned to the hosted zone when you created
0000000000000000000000000000000000000000;;		// it.
0000000000000000000000000000000000000000;;		HostedZoneId *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that contains general information about the hosted zone.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// HostedZones is a required field
0000000000000000000000000000000000000000;;		HostedZones []*HostedZone `locationNameList:"HostedZone" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A flag that indicates whether there are more hosted zones to be listed. If
0000000000000000000000000000000000000000;;		// the response was truncated, you can get the next group of maxitems hosted
0000000000000000000000000000000000000000;;		// zones by calling ListHostedZonesByName again and specifying the values of
0000000000000000000000000000000000000000;;		// NextDNSName and NextHostedZoneId elements in the dnsname and hostedzoneid
0000000000000000000000000000000000000000;;		// parameters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// IsTruncated is a required field
0000000000000000000000000000000000000000;;		IsTruncated *bool `type:"boolean" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The value that you specified for the maxitems parameter in the call to ListHostedZonesByName
0000000000000000000000000000000000000000;;		// that produced the current response.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// MaxItems is a required field
0000000000000000000000000000000000000000;;		MaxItems *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If IsTruncated is true, the value of NextDNSName is the name of the first
0000000000000000000000000000000000000000;;		// hosted zone in the next group of maxitems hosted zones. Call ListHostedZonesByName
0000000000000000000000000000000000000000;;		// again and specify the value of NextDNSName and NextHostedZoneId in the dnsname
0000000000000000000000000000000000000000;;		// and hostedzoneid parameters, respectively.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// This element is present only if IsTruncated is true.
0000000000000000000000000000000000000000;;		NextDNSName *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If IsTruncated is true, the value of NextHostedZoneId identifies the first
0000000000000000000000000000000000000000;;		// hosted zone in the next group of maxitems hosted zones. Call ListHostedZonesByName
0000000000000000000000000000000000000000;;		// again and specify the value of NextDNSName and NextHostedZoneId in the dnsname
0000000000000000000000000000000000000000;;		// and hostedzoneid parameters, respectively.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// This element is present only if IsTruncated is true.
0000000000000000000000000000000000000000;;		NextHostedZoneId *string `type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ListHostedZonesByNameOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ListHostedZonesByNameOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDNSName sets the DNSName field's value.
0000000000000000000000000000000000000000;;	func (s *ListHostedZonesByNameOutput) SetDNSName(v string) *ListHostedZonesByNameOutput {
0000000000000000000000000000000000000000;;		s.DNSName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHostedZoneId sets the HostedZoneId field's value.
0000000000000000000000000000000000000000;;	func (s *ListHostedZonesByNameOutput) SetHostedZoneId(v string) *ListHostedZonesByNameOutput {
0000000000000000000000000000000000000000;;		s.HostedZoneId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHostedZones sets the HostedZones field's value.
0000000000000000000000000000000000000000;;	func (s *ListHostedZonesByNameOutput) SetHostedZones(v []*HostedZone) *ListHostedZonesByNameOutput {
0000000000000000000000000000000000000000;;		s.HostedZones = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIsTruncated sets the IsTruncated field's value.
0000000000000000000000000000000000000000;;	func (s *ListHostedZonesByNameOutput) SetIsTruncated(v bool) *ListHostedZonesByNameOutput {
0000000000000000000000000000000000000000;;		s.IsTruncated = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxItems sets the MaxItems field's value.
0000000000000000000000000000000000000000;;	func (s *ListHostedZonesByNameOutput) SetMaxItems(v string) *ListHostedZonesByNameOutput {
0000000000000000000000000000000000000000;;		s.MaxItems = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextDNSName sets the NextDNSName field's value.
0000000000000000000000000000000000000000;;	func (s *ListHostedZonesByNameOutput) SetNextDNSName(v string) *ListHostedZonesByNameOutput {
0000000000000000000000000000000000000000;;		s.NextDNSName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextHostedZoneId sets the NextHostedZoneId field's value.
0000000000000000000000000000000000000000;;	func (s *ListHostedZonesByNameOutput) SetNextHostedZoneId(v string) *ListHostedZonesByNameOutput {
0000000000000000000000000000000000000000;;		s.NextHostedZoneId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// To retrieve a list of your public and private hosted zones, send a GET request
0000000000000000000000000000000000000000;;	// to the /2013-04-01/hostedzone resource. The response to this request includes
0000000000000000000000000000000000000000;;	// a HostedZone child element for each hosted zone that was created by the current
0000000000000000000000000000000000000000;;	// AWS account.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Amazon Route 53 returns a maximum of 100 items in each response. If you have
0000000000000000000000000000000000000000;;	// a lot of hosted zones, you can use the maxitems parameter to list them in
0000000000000000000000000000000000000000;;	// groups of up to 100. The response includes four values that help you navigate
0000000000000000000000000000000000000000;;	// from one group of maxitems hosted zones to the next:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * MaxItems is the value that you specified for the maxitems parameter
0000000000000000000000000000000000000000;;	//    in the request that produced the current response.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * If the value of IsTruncated in the response is true, there are more
0000000000000000000000000000000000000000;;	//    hosted zones associated with the current AWS account.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If IsTruncated is false, this response includes the last hosted zone that
0000000000000000000000000000000000000000;;	//    is associated with the current account.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * NextMarker is the hosted zone ID of the next hosted zone that is associated
0000000000000000000000000000000000000000;;	//    with the current AWS account. If you want to list more hosted zones, make
0000000000000000000000000000000000000000;;	//    another call to ListHostedZones, and specify the value of the NextMarker
0000000000000000000000000000000000000000;;	//    element in the marker parameter.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If IsTruncated is false, the NextMarker element is omitted from the response.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * If you're making the second or subsequent call to ListHostedZones, the
0000000000000000000000000000000000000000;;	//    Marker element matches the value that you specified in the marker parameter
0000000000000000000000000000000000000000;;	//    in the previous request.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListHostedZonesRequest
0000000000000000000000000000000000000000;;	type ListHostedZonesInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If you're using reusable delegation sets and you want to list all of the
0000000000000000000000000000000000000000;;		// hosted zones that are associated with a reusable delegation set, specify
0000000000000000000000000000000000000000;;		// the ID of that reusable delegation set.
0000000000000000000000000000000000000000;;		DelegationSetId *string `location:"querystring" locationName:"delegationsetid" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// (Optional) If you have more hosted zones than the value of maxitems, ListHostedZones
0000000000000000000000000000000000000000;;		// returns only the first maxitems hosted zones. To get the next group of maxitems
0000000000000000000000000000000000000000;;		// hosted zones, submit another request to ListHostedZones. For the value of
0000000000000000000000000000000000000000;;		// marker, specify the value of the NextMarker element that was returned in
0000000000000000000000000000000000000000;;		// the previous response.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Hosted zones are listed in the order in which they were created.
0000000000000000000000000000000000000000;;		Marker *string `location:"querystring" locationName:"marker" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// (Optional) The maximum number of hosted zones to be included in the response
0000000000000000000000000000000000000000;;		// body for this request. If you have more than maxitems hosted zones, the value
0000000000000000000000000000000000000000;;		// of the IsTruncated element in the response is true, and the value of the
0000000000000000000000000000000000000000;;		// NextMarker element is the hosted zone ID of the first hosted zone in the
0000000000000000000000000000000000000000;;		// next group of maxitems hosted zones.
0000000000000000000000000000000000000000;;		MaxItems *string `location:"querystring" locationName:"maxitems" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ListHostedZonesInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ListHostedZonesInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDelegationSetId sets the DelegationSetId field's value.
0000000000000000000000000000000000000000;;	func (s *ListHostedZonesInput) SetDelegationSetId(v string) *ListHostedZonesInput {
0000000000000000000000000000000000000000;;		s.DelegationSetId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMarker sets the Marker field's value.
0000000000000000000000000000000000000000;;	func (s *ListHostedZonesInput) SetMarker(v string) *ListHostedZonesInput {
0000000000000000000000000000000000000000;;		s.Marker = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxItems sets the MaxItems field's value.
0000000000000000000000000000000000000000;;	func (s *ListHostedZonesInput) SetMaxItems(v string) *ListHostedZonesInput {
0000000000000000000000000000000000000000;;		s.MaxItems = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListHostedZonesResponse
0000000000000000000000000000000000000000;;	type ListHostedZonesOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that contains general information about the hosted zone.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// HostedZones is a required field
0000000000000000000000000000000000000000;;		HostedZones []*HostedZone `locationNameList:"HostedZone" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A flag indicating whether there are more hosted zones to be listed. If the
0000000000000000000000000000000000000000;;		// response was truncated, you can get the next group of maxitems hosted zones
0000000000000000000000000000000000000000;;		// by calling ListHostedZones again and specifying the value of the NextMarker
0000000000000000000000000000000000000000;;		// element in the marker parameter.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// IsTruncated is a required field
0000000000000000000000000000000000000000;;		IsTruncated *bool `type:"boolean" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// For the second and subsequent calls to ListHostedZones, Marker is the value
0000000000000000000000000000000000000000;;		// that you specified for the marker parameter in the request that produced
0000000000000000000000000000000000000000;;		// the current response.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Marker is a required field
0000000000000000000000000000000000000000;;		Marker *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The value that you specified for the maxitems parameter in the call to ListHostedZones
0000000000000000000000000000000000000000;;		// that produced the current response.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// MaxItems is a required field
0000000000000000000000000000000000000000;;		MaxItems *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If IsTruncated is true, the value of NextMarker identifies the first hosted
0000000000000000000000000000000000000000;;		// zone in the next group of maxitems hosted zones. Call ListHostedZones again
0000000000000000000000000000000000000000;;		// and specify the value of NextMarker in the marker parameter.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// This element is present only if IsTruncated is true.
0000000000000000000000000000000000000000;;		NextMarker *string `type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ListHostedZonesOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ListHostedZonesOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHostedZones sets the HostedZones field's value.
0000000000000000000000000000000000000000;;	func (s *ListHostedZonesOutput) SetHostedZones(v []*HostedZone) *ListHostedZonesOutput {
0000000000000000000000000000000000000000;;		s.HostedZones = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIsTruncated sets the IsTruncated field's value.
0000000000000000000000000000000000000000;;	func (s *ListHostedZonesOutput) SetIsTruncated(v bool) *ListHostedZonesOutput {
0000000000000000000000000000000000000000;;		s.IsTruncated = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMarker sets the Marker field's value.
0000000000000000000000000000000000000000;;	func (s *ListHostedZonesOutput) SetMarker(v string) *ListHostedZonesOutput {
0000000000000000000000000000000000000000;;		s.Marker = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxItems sets the MaxItems field's value.
0000000000000000000000000000000000000000;;	func (s *ListHostedZonesOutput) SetMaxItems(v string) *ListHostedZonesOutput {
0000000000000000000000000000000000000000;;		s.MaxItems = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextMarker sets the NextMarker field's value.
0000000000000000000000000000000000000000;;	func (s *ListHostedZonesOutput) SetNextMarker(v string) *ListHostedZonesOutput {
0000000000000000000000000000000000000000;;		s.NextMarker = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The input for a ListResourceRecordSets request.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListResourceRecordSetsRequest
0000000000000000000000000000000000000000;;	type ListResourceRecordSetsInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the hosted zone that contains the resource record sets that you
0000000000000000000000000000000000000000;;		// want to get.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// HostedZoneId is a required field
0000000000000000000000000000000000000000;;		HostedZoneId *string `location:"uri" locationName:"Id" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// (Optional) The maximum number of resource records sets to include in the
0000000000000000000000000000000000000000;;		// response body for this request. If the response includes more than maxitems
0000000000000000000000000000000000000000;;		// resource record sets, the value of the IsTruncated element in the response
0000000000000000000000000000000000000000;;		// is true, and the values of the NextRecordName and NextRecordType elements
0000000000000000000000000000000000000000;;		// in the response identify the first resource record set in the next group
0000000000000000000000000000000000000000;;		// of maxitems resource record sets.
0000000000000000000000000000000000000000;;		MaxItems *string `location:"querystring" locationName:"maxitems" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Weighted resource record sets only: If results were truncated for a given
0000000000000000000000000000000000000000;;		// DNS name and type, specify the value of NextRecordIdentifier from the previous
0000000000000000000000000000000000000000;;		// response to get the next resource record set that has the current DNS name
0000000000000000000000000000000000000000;;		// and type.
0000000000000000000000000000000000000000;;		StartRecordIdentifier *string `location:"querystring" locationName:"identifier" min:"1" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The first name in the lexicographic ordering of domain names that you want
0000000000000000000000000000000000000000;;		// the ListResourceRecordSets request to list.
0000000000000000000000000000000000000000;;		StartRecordName *string `location:"querystring" locationName:"name" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The type of resource record set to begin the record listing from.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Valid values for basic resource record sets: A | AAAA | CNAME | MX | NAPTR
0000000000000000000000000000000000000000;;		// | NS | PTR | SOA | SPF | SRV | TXT
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Values for weighted, latency, geo, and failover resource record sets: A |
0000000000000000000000000000000000000000;;		// AAAA | CNAME | MX | NAPTR | PTR | SPF | SRV | TXT
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Values for alias resource record sets:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * CloudFront distribution: A or AAAA
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * Elastic Beanstalk environment that has a regionalized subdomain: A
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * ELB load balancer: A | AAAA
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * Amazon S3 bucket: A
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Constraint: Specifying type without specifying name returns an InvalidInput
0000000000000000000000000000000000000000;;		// error.
0000000000000000000000000000000000000000;;		StartRecordType *string `location:"querystring" locationName:"type" type:"string" enum:"RRType"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ListResourceRecordSetsInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ListResourceRecordSetsInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *ListResourceRecordSetsInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "ListResourceRecordSetsInput"}
0000000000000000000000000000000000000000;;		if s.HostedZoneId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("HostedZoneId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.StartRecordIdentifier != nil && len(*s.StartRecordIdentifier) < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("StartRecordIdentifier", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHostedZoneId sets the HostedZoneId field's value.
0000000000000000000000000000000000000000;;	func (s *ListResourceRecordSetsInput) SetHostedZoneId(v string) *ListResourceRecordSetsInput {
0000000000000000000000000000000000000000;;		s.HostedZoneId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxItems sets the MaxItems field's value.
0000000000000000000000000000000000000000;;	func (s *ListResourceRecordSetsInput) SetMaxItems(v string) *ListResourceRecordSetsInput {
0000000000000000000000000000000000000000;;		s.MaxItems = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStartRecordIdentifier sets the StartRecordIdentifier field's value.
0000000000000000000000000000000000000000;;	func (s *ListResourceRecordSetsInput) SetStartRecordIdentifier(v string) *ListResourceRecordSetsInput {
0000000000000000000000000000000000000000;;		s.StartRecordIdentifier = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStartRecordName sets the StartRecordName field's value.
0000000000000000000000000000000000000000;;	func (s *ListResourceRecordSetsInput) SetStartRecordName(v string) *ListResourceRecordSetsInput {
0000000000000000000000000000000000000000;;		s.StartRecordName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStartRecordType sets the StartRecordType field's value.
0000000000000000000000000000000000000000;;	func (s *ListResourceRecordSetsInput) SetStartRecordType(v string) *ListResourceRecordSetsInput {
0000000000000000000000000000000000000000;;		s.StartRecordType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains list information for the resource record set.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListResourceRecordSetsResponse
0000000000000000000000000000000000000000;;	type ListResourceRecordSetsOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A flag that indicates whether more resource record sets remain to be listed.
0000000000000000000000000000000000000000;;		// If your results were truncated, you can make a follow-up pagination request
0000000000000000000000000000000000000000;;		// by using the NextRecordName element.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// IsTruncated is a required field
0000000000000000000000000000000000000000;;		IsTruncated *bool `type:"boolean" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum number of records you requested.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// MaxItems is a required field
0000000000000000000000000000000000000000;;		MaxItems *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Weighted, latency, geolocation, and failover resource record sets only: If
0000000000000000000000000000000000000000;;		// results were truncated for a given DNS name and type, the value of SetIdentifier
0000000000000000000000000000000000000000;;		// for the next resource record set that has the current DNS name and type.
0000000000000000000000000000000000000000;;		NextRecordIdentifier *string `min:"1" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If the results were truncated, the name of the next record in the list.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// This element is present only if IsTruncated is true.
0000000000000000000000000000000000000000;;		NextRecordName *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If the results were truncated, the type of the next record in the list.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// This element is present only if IsTruncated is true.
0000000000000000000000000000000000000000;;		NextRecordType *string `type:"string" enum:"RRType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about multiple resource record sets.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ResourceRecordSets is a required field
0000000000000000000000000000000000000000;;		ResourceRecordSets []*ResourceRecordSet `locationNameList:"ResourceRecordSet" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ListResourceRecordSetsOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ListResourceRecordSetsOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIsTruncated sets the IsTruncated field's value.
0000000000000000000000000000000000000000;;	func (s *ListResourceRecordSetsOutput) SetIsTruncated(v bool) *ListResourceRecordSetsOutput {
0000000000000000000000000000000000000000;;		s.IsTruncated = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxItems sets the MaxItems field's value.
0000000000000000000000000000000000000000;;	func (s *ListResourceRecordSetsOutput) SetMaxItems(v string) *ListResourceRecordSetsOutput {
0000000000000000000000000000000000000000;;		s.MaxItems = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextRecordIdentifier sets the NextRecordIdentifier field's value.
0000000000000000000000000000000000000000;;	func (s *ListResourceRecordSetsOutput) SetNextRecordIdentifier(v string) *ListResourceRecordSetsOutput {
0000000000000000000000000000000000000000;;		s.NextRecordIdentifier = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextRecordName sets the NextRecordName field's value.
0000000000000000000000000000000000000000;;	func (s *ListResourceRecordSetsOutput) SetNextRecordName(v string) *ListResourceRecordSetsOutput {
0000000000000000000000000000000000000000;;		s.NextRecordName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextRecordType sets the NextRecordType field's value.
0000000000000000000000000000000000000000;;	func (s *ListResourceRecordSetsOutput) SetNextRecordType(v string) *ListResourceRecordSetsOutput {
0000000000000000000000000000000000000000;;		s.NextRecordType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetResourceRecordSets sets the ResourceRecordSets field's value.
0000000000000000000000000000000000000000;;	func (s *ListResourceRecordSetsOutput) SetResourceRecordSets(v []*ResourceRecordSet) *ListResourceRecordSetsOutput {
0000000000000000000000000000000000000000;;		s.ResourceRecordSets = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// To retrieve a list of your reusable delegation sets, send a GET request to
0000000000000000000000000000000000000000;;	// the /2013-04-01/delegationset resource. The response to this request includes
0000000000000000000000000000000000000000;;	// a DelegationSets element with zero or more DelegationSet child elements.
0000000000000000000000000000000000000000;;	// By default, the list of reusable delegation sets is displayed on a single
0000000000000000000000000000000000000000;;	// page. You can control the length of the page that is displayed by using the
0000000000000000000000000000000000000000;;	// MaxItems parameter. You can use the Marker parameter to control the delegation
0000000000000000000000000000000000000000;;	// set that the list begins with.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Amazon Route 53 returns a maximum of 100 items. If you set MaxItems to a
0000000000000000000000000000000000000000;;	// value greater than 100, Amazon Route 53 returns only the first 100.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListReusableDelegationSetsRequest
0000000000000000000000000000000000000000;;	type ListReusableDelegationSetsInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If you're making the second or subsequent call to ListReusableDelegationSets,
0000000000000000000000000000000000000000;;		// the Marker element matches the value that you specified in the marker parameter
0000000000000000000000000000000000000000;;		// in the previous request.
0000000000000000000000000000000000000000;;		Marker *string `location:"querystring" locationName:"marker" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The value that you specified for the maxitems parameter in the request that
0000000000000000000000000000000000000000;;		// produced the current response.
0000000000000000000000000000000000000000;;		MaxItems *string `location:"querystring" locationName:"maxitems" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ListReusableDelegationSetsInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ListReusableDelegationSetsInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMarker sets the Marker field's value.
0000000000000000000000000000000000000000;;	func (s *ListReusableDelegationSetsInput) SetMarker(v string) *ListReusableDelegationSetsInput {
0000000000000000000000000000000000000000;;		s.Marker = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxItems sets the MaxItems field's value.
0000000000000000000000000000000000000000;;	func (s *ListReusableDelegationSetsInput) SetMaxItems(v string) *ListReusableDelegationSetsInput {
0000000000000000000000000000000000000000;;		s.MaxItems = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains information about the reusable delegation sets
0000000000000000000000000000000000000000;;	// that are associated with the current AWS account.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListReusableDelegationSetsResponse
0000000000000000000000000000000000000000;;	type ListReusableDelegationSetsOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that contains one DelegationSet element for each reusable
0000000000000000000000000000000000000000;;		// delegation set that was created by the current AWS account.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// DelegationSets is a required field
0000000000000000000000000000000000000000;;		DelegationSets []*DelegationSet `locationNameList:"DelegationSet" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A flag that indicates whether there are more reusable delegation sets to
0000000000000000000000000000000000000000;;		// be listed. If the response is truncated, you can get the next group of maxitems
0000000000000000000000000000000000000000;;		// reusable delegation sets by calling ListReusableDelegationSets again and
0000000000000000000000000000000000000000;;		// specifying the value of the NextMarker element in the marker parameter.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// IsTruncated is a required field
0000000000000000000000000000000000000000;;		IsTruncated *bool `type:"boolean" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// For the second and subsequent calls to ListReusableDelegationSets, Marker
0000000000000000000000000000000000000000;;		// is the value that you specified for the marker parameter in the request that
0000000000000000000000000000000000000000;;		// produced the current response.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Marker is a required field
0000000000000000000000000000000000000000;;		Marker *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The value that you specified for the maxitems parameter in the call to ListReusableDelegationSets
0000000000000000000000000000000000000000;;		// that produced the current response.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// MaxItems is a required field
0000000000000000000000000000000000000000;;		MaxItems *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If IsTruncated is true, the value of NextMarker identifies the first reusable
0000000000000000000000000000000000000000;;		// delegation set in the next group of maxitems reusable delegation sets. Call
0000000000000000000000000000000000000000;;		// ListReusableDelegationSets again and specify the value of NextMarker in the
0000000000000000000000000000000000000000;;		// marker parameter.
0000000000000000000000000000000000000000;;		NextMarker *string `type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ListReusableDelegationSetsOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ListReusableDelegationSetsOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDelegationSets sets the DelegationSets field's value.
0000000000000000000000000000000000000000;;	func (s *ListReusableDelegationSetsOutput) SetDelegationSets(v []*DelegationSet) *ListReusableDelegationSetsOutput {
0000000000000000000000000000000000000000;;		s.DelegationSets = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIsTruncated sets the IsTruncated field's value.
0000000000000000000000000000000000000000;;	func (s *ListReusableDelegationSetsOutput) SetIsTruncated(v bool) *ListReusableDelegationSetsOutput {
0000000000000000000000000000000000000000;;		s.IsTruncated = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMarker sets the Marker field's value.
0000000000000000000000000000000000000000;;	func (s *ListReusableDelegationSetsOutput) SetMarker(v string) *ListReusableDelegationSetsOutput {
0000000000000000000000000000000000000000;;		s.Marker = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxItems sets the MaxItems field's value.
0000000000000000000000000000000000000000;;	func (s *ListReusableDelegationSetsOutput) SetMaxItems(v string) *ListReusableDelegationSetsOutput {
0000000000000000000000000000000000000000;;		s.MaxItems = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextMarker sets the NextMarker field's value.
0000000000000000000000000000000000000000;;	func (s *ListReusableDelegationSetsOutput) SetNextMarker(v string) *ListReusableDelegationSetsOutput {
0000000000000000000000000000000000000000;;		s.NextMarker = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type containing information about a request for a list of the tags
0000000000000000000000000000000000000000;;	// that are associated with an individual resource.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListTagsForResourceRequest
0000000000000000000000000000000000000000;;	type ListTagsForResourceInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the resource for which you want to retrieve tags.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ResourceId is a required field
0000000000000000000000000000000000000000;;		ResourceId *string `location:"uri" locationName:"ResourceId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The type of the resource.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * The resource type for health checks is healthcheck.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * The resource type for hosted zones is hostedzone.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ResourceType is a required field
0000000000000000000000000000000000000000;;		ResourceType *string `location:"uri" locationName:"ResourceType" type:"string" required:"true" enum:"TagResourceType"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ListTagsForResourceInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ListTagsForResourceInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *ListTagsForResourceInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "ListTagsForResourceInput"}
0000000000000000000000000000000000000000;;		if s.ResourceId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("ResourceId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.ResourceType == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("ResourceType"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetResourceId sets the ResourceId field's value.
0000000000000000000000000000000000000000;;	func (s *ListTagsForResourceInput) SetResourceId(v string) *ListTagsForResourceInput {
0000000000000000000000000000000000000000;;		s.ResourceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetResourceType sets the ResourceType field's value.
0000000000000000000000000000000000000000;;	func (s *ListTagsForResourceInput) SetResourceType(v string) *ListTagsForResourceInput {
0000000000000000000000000000000000000000;;		s.ResourceType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains information about the health checks or hosted
0000000000000000000000000000000000000000;;	// zones for which you want to list tags.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListTagsForResourceResponse
0000000000000000000000000000000000000000;;	type ListTagsForResourceOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A ResourceTagSet containing tags associated with the specified resource.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ResourceTagSet is a required field
0000000000000000000000000000000000000000;;		ResourceTagSet *ResourceTagSet `type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ListTagsForResourceOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ListTagsForResourceOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetResourceTagSet sets the ResourceTagSet field's value.
0000000000000000000000000000000000000000;;	func (s *ListTagsForResourceOutput) SetResourceTagSet(v *ResourceTagSet) *ListTagsForResourceOutput {
0000000000000000000000000000000000000000;;		s.ResourceTagSet = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains information about the health checks or hosted
0000000000000000000000000000000000000000;;	// zones for which you want to list tags.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListTagsForResourcesRequest
0000000000000000000000000000000000000000;;	type ListTagsForResourcesInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `locationName:"ListTagsForResourcesRequest" type:"structure" xmlURI:"https://route53.amazonaws.com/doc/2013-04-01/"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that contains the ResourceId element for each resource for
0000000000000000000000000000000000000000;;		// which you want to get a list of tags.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ResourceIds is a required field
0000000000000000000000000000000000000000;;		ResourceIds []*string `locationNameList:"ResourceId" min:"1" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The type of the resources.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * The resource type for health checks is healthcheck.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * The resource type for hosted zones is hostedzone.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ResourceType is a required field
0000000000000000000000000000000000000000;;		ResourceType *string `location:"uri" locationName:"ResourceType" type:"string" required:"true" enum:"TagResourceType"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ListTagsForResourcesInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ListTagsForResourcesInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *ListTagsForResourcesInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "ListTagsForResourcesInput"}
0000000000000000000000000000000000000000;;		if s.ResourceIds == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("ResourceIds"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.ResourceIds != nil && len(s.ResourceIds) < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("ResourceIds", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.ResourceType == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("ResourceType"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetResourceIds sets the ResourceIds field's value.
0000000000000000000000000000000000000000;;	func (s *ListTagsForResourcesInput) SetResourceIds(v []*string) *ListTagsForResourcesInput {
0000000000000000000000000000000000000000;;		s.ResourceIds = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetResourceType sets the ResourceType field's value.
0000000000000000000000000000000000000000;;	func (s *ListTagsForResourcesInput) SetResourceType(v string) *ListTagsForResourcesInput {
0000000000000000000000000000000000000000;;		s.ResourceType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type containing tags for the specified resources.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListTagsForResourcesResponse
0000000000000000000000000000000000000000;;	type ListTagsForResourcesOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A list of ResourceTagSets containing tags associated with the specified resources.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ResourceTagSets is a required field
0000000000000000000000000000000000000000;;		ResourceTagSets []*ResourceTagSet `locationNameList:"ResourceTagSet" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ListTagsForResourcesOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ListTagsForResourcesOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetResourceTagSets sets the ResourceTagSets field's value.
0000000000000000000000000000000000000000;;	func (s *ListTagsForResourcesOutput) SetResourceTagSets(v []*ResourceTagSet) *ListTagsForResourcesOutput {
0000000000000000000000000000000000000000;;		s.ResourceTagSets = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains the information about the request to list the
0000000000000000000000000000000000000000;;	// traffic policies that are associated with the current AWS account.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListTrafficPoliciesRequest
0000000000000000000000000000000000000000;;	type ListTrafficPoliciesInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// (Optional) The maximum number of traffic policies to be included in the response
0000000000000000000000000000000000000000;;		// body for this request. If you have more than MaxItems traffic policies, the
0000000000000000000000000000000000000000;;		// value of the IsTruncated element in the response is true, and the value of
0000000000000000000000000000000000000000;;		// the TrafficPolicyIdMarker element is the ID of the first traffic policy in
0000000000000000000000000000000000000000;;		// the next group of MaxItems traffic policies.
0000000000000000000000000000000000000000;;		MaxItems *string `location:"querystring" locationName:"maxitems" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// (Conditional) For your first request to ListTrafficPolicies, do not include
0000000000000000000000000000000000000000;;		// the TrafficPolicyIdMarker parameter.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If you have more traffic policies than the value of MaxItems, ListTrafficPolicies
0000000000000000000000000000000000000000;;		// returns only the first MaxItems traffic policies. To get the next group of
0000000000000000000000000000000000000000;;		// MaxItems policies, submit another request to ListTrafficPolicies. For the
0000000000000000000000000000000000000000;;		// value of TrafficPolicyIdMarker, specify the value of the TrafficPolicyIdMarker
0000000000000000000000000000000000000000;;		// element that was returned in the previous response.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Policies are listed in the order in which they were created.
0000000000000000000000000000000000000000;;		TrafficPolicyIdMarker *string `location:"querystring" locationName:"trafficpolicyid" min:"1" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ListTrafficPoliciesInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ListTrafficPoliciesInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPoliciesInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "ListTrafficPoliciesInput"}
0000000000000000000000000000000000000000;;		if s.TrafficPolicyIdMarker != nil && len(*s.TrafficPolicyIdMarker) < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("TrafficPolicyIdMarker", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxItems sets the MaxItems field's value.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPoliciesInput) SetMaxItems(v string) *ListTrafficPoliciesInput {
0000000000000000000000000000000000000000;;		s.MaxItems = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTrafficPolicyIdMarker sets the TrafficPolicyIdMarker field's value.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPoliciesInput) SetTrafficPolicyIdMarker(v string) *ListTrafficPoliciesInput {
0000000000000000000000000000000000000000;;		s.TrafficPolicyIdMarker = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains the response information for the request.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListTrafficPoliciesResponse
0000000000000000000000000000000000000000;;	type ListTrafficPoliciesOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A flag that indicates whether there are more traffic policies to be listed.
0000000000000000000000000000000000000000;;		// If the response was truncated, you can get the next group of MaxItems traffic
0000000000000000000000000000000000000000;;		// policies by calling ListTrafficPolicies again and specifying the value of
0000000000000000000000000000000000000000;;		// the TrafficPolicyIdMarker element in the TrafficPolicyIdMarker request parameter.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Valid Values: true | false
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// IsTruncated is a required field
0000000000000000000000000000000000000000;;		IsTruncated *bool `type:"boolean" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The value that you specified for the MaxItems parameter in the call to ListTrafficPolicies
0000000000000000000000000000000000000000;;		// that produced the current response.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// MaxItems is a required field
0000000000000000000000000000000000000000;;		MaxItems *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If the value of IsTruncated is true, TrafficPolicyIdMarker is the ID of the
0000000000000000000000000000000000000000;;		// first traffic policy in the next group of MaxItems traffic policies.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// TrafficPolicyIdMarker is a required field
0000000000000000000000000000000000000000;;		TrafficPolicyIdMarker *string `min:"1" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A list that contains one TrafficPolicySummary element for each traffic policy
0000000000000000000000000000000000000000;;		// that was created by the current AWS account.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// TrafficPolicySummaries is a required field
0000000000000000000000000000000000000000;;		TrafficPolicySummaries []*TrafficPolicySummary `locationNameList:"TrafficPolicySummary" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ListTrafficPoliciesOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ListTrafficPoliciesOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIsTruncated sets the IsTruncated field's value.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPoliciesOutput) SetIsTruncated(v bool) *ListTrafficPoliciesOutput {
0000000000000000000000000000000000000000;;		s.IsTruncated = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxItems sets the MaxItems field's value.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPoliciesOutput) SetMaxItems(v string) *ListTrafficPoliciesOutput {
0000000000000000000000000000000000000000;;		s.MaxItems = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTrafficPolicyIdMarker sets the TrafficPolicyIdMarker field's value.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPoliciesOutput) SetTrafficPolicyIdMarker(v string) *ListTrafficPoliciesOutput {
0000000000000000000000000000000000000000;;		s.TrafficPolicyIdMarker = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTrafficPolicySummaries sets the TrafficPolicySummaries field's value.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPoliciesOutput) SetTrafficPolicySummaries(v []*TrafficPolicySummary) *ListTrafficPoliciesOutput {
0000000000000000000000000000000000000000;;		s.TrafficPolicySummaries = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A request for the traffic policy instances that you created in a specified
0000000000000000000000000000000000000000;;	// hosted zone.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListTrafficPolicyInstancesByHostedZoneRequest
0000000000000000000000000000000000000000;;	type ListTrafficPolicyInstancesByHostedZoneInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the hosted zone for which you want to list traffic policy instances.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// HostedZoneId is a required field
0000000000000000000000000000000000000000;;		HostedZoneId *string `location:"querystring" locationName:"id" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum number of traffic policy instances to be included in the response
0000000000000000000000000000000000000000;;		// body for this request. If you have more than MaxItems traffic policy instances,
0000000000000000000000000000000000000000;;		// the value of the IsTruncated element in the response is true, and the values
0000000000000000000000000000000000000000;;		// of HostedZoneIdMarker, TrafficPolicyInstanceNameMarker, and TrafficPolicyInstanceTypeMarker
0000000000000000000000000000000000000000;;		// represent the first traffic policy instance in the next group of MaxItems
0000000000000000000000000000000000000000;;		// traffic policy instances.
0000000000000000000000000000000000000000;;		MaxItems *string `location:"querystring" locationName:"maxitems" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// For the first request to ListTrafficPolicyInstancesByHostedZone, omit this
0000000000000000000000000000000000000000;;		// value.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If the value of IsTruncated in the previous response was true, TrafficPolicyInstanceNameMarker
0000000000000000000000000000000000000000;;		// is the name of the first traffic policy instance in the next group of MaxItems
0000000000000000000000000000000000000000;;		// traffic policy instances.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If the value of IsTruncated in the previous response was false, there are
0000000000000000000000000000000000000000;;		// no more traffic policy instances to get for this hosted zone.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If the value of IsTruncated in the previous response was false, omit this
0000000000000000000000000000000000000000;;		// value.
0000000000000000000000000000000000000000;;		TrafficPolicyInstanceNameMarker *string `location:"querystring" locationName:"trafficpolicyinstancename" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// For the first request to ListTrafficPolicyInstancesByHostedZone, omit this
0000000000000000000000000000000000000000;;		// value.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If the value of IsTruncated in the previous response was true, TrafficPolicyInstanceTypeMarker
0000000000000000000000000000000000000000;;		// is the DNS type of the first traffic policy instance in the next group of
0000000000000000000000000000000000000000;;		// MaxItems traffic policy instances.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If the value of IsTruncated in the previous response was false, there are
0000000000000000000000000000000000000000;;		// no more traffic policy instances to get for this hosted zone.
0000000000000000000000000000000000000000;;		TrafficPolicyInstanceTypeMarker *string `location:"querystring" locationName:"trafficpolicyinstancetype" type:"string" enum:"RRType"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ListTrafficPolicyInstancesByHostedZoneInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ListTrafficPolicyInstancesByHostedZoneInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPolicyInstancesByHostedZoneInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "ListTrafficPolicyInstancesByHostedZoneInput"}
0000000000000000000000000000000000000000;;		if s.HostedZoneId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("HostedZoneId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHostedZoneId sets the HostedZoneId field's value.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPolicyInstancesByHostedZoneInput) SetHostedZoneId(v string) *ListTrafficPolicyInstancesByHostedZoneInput {
0000000000000000000000000000000000000000;;		s.HostedZoneId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxItems sets the MaxItems field's value.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPolicyInstancesByHostedZoneInput) SetMaxItems(v string) *ListTrafficPolicyInstancesByHostedZoneInput {
0000000000000000000000000000000000000000;;		s.MaxItems = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTrafficPolicyInstanceNameMarker sets the TrafficPolicyInstanceNameMarker field's value.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPolicyInstancesByHostedZoneInput) SetTrafficPolicyInstanceNameMarker(v string) *ListTrafficPolicyInstancesByHostedZoneInput {
0000000000000000000000000000000000000000;;		s.TrafficPolicyInstanceNameMarker = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTrafficPolicyInstanceTypeMarker sets the TrafficPolicyInstanceTypeMarker field's value.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPolicyInstancesByHostedZoneInput) SetTrafficPolicyInstanceTypeMarker(v string) *ListTrafficPolicyInstancesByHostedZoneInput {
0000000000000000000000000000000000000000;;		s.TrafficPolicyInstanceTypeMarker = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains the response information for the request.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListTrafficPolicyInstancesByHostedZoneResponse
0000000000000000000000000000000000000000;;	type ListTrafficPolicyInstancesByHostedZoneOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A flag that indicates whether there are more traffic policy instances to
0000000000000000000000000000000000000000;;		// be listed. If the response was truncated, you can get the next group of MaxItems
0000000000000000000000000000000000000000;;		// traffic policy instances by calling ListTrafficPolicyInstancesByHostedZone
0000000000000000000000000000000000000000;;		// again and specifying the values of the HostedZoneIdMarker, TrafficPolicyInstanceNameMarker,
0000000000000000000000000000000000000000;;		// and TrafficPolicyInstanceTypeMarker elements in the corresponding request
0000000000000000000000000000000000000000;;		// parameters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// IsTruncated is a required field
0000000000000000000000000000000000000000;;		IsTruncated *bool `type:"boolean" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The value that you specified for the MaxItems parameter in the call to ListTrafficPolicyInstancesByHostedZone
0000000000000000000000000000000000000000;;		// that produced the current response.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// MaxItems is a required field
0000000000000000000000000000000000000000;;		MaxItems *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If IsTruncated is true, TrafficPolicyInstanceNameMarker is the name of the
0000000000000000000000000000000000000000;;		// first traffic policy instance in the next group of MaxItems traffic policy
0000000000000000000000000000000000000000;;		// instances.
0000000000000000000000000000000000000000;;		TrafficPolicyInstanceNameMarker *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If IsTruncated is true, TrafficPolicyInstanceTypeMarker is the DNS type of
0000000000000000000000000000000000000000;;		// the resource record sets that are associated with the first traffic policy
0000000000000000000000000000000000000000;;		// instance in the next group of MaxItems traffic policy instances.
0000000000000000000000000000000000000000;;		TrafficPolicyInstanceTypeMarker *string `type:"string" enum:"RRType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A list that contains one TrafficPolicyInstance element for each traffic policy
0000000000000000000000000000000000000000;;		// instance that matches the elements in the request.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// TrafficPolicyInstances is a required field
0000000000000000000000000000000000000000;;		TrafficPolicyInstances []*TrafficPolicyInstance `locationNameList:"TrafficPolicyInstance" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ListTrafficPolicyInstancesByHostedZoneOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ListTrafficPolicyInstancesByHostedZoneOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIsTruncated sets the IsTruncated field's value.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPolicyInstancesByHostedZoneOutput) SetIsTruncated(v bool) *ListTrafficPolicyInstancesByHostedZoneOutput {
0000000000000000000000000000000000000000;;		s.IsTruncated = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxItems sets the MaxItems field's value.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPolicyInstancesByHostedZoneOutput) SetMaxItems(v string) *ListTrafficPolicyInstancesByHostedZoneOutput {
0000000000000000000000000000000000000000;;		s.MaxItems = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTrafficPolicyInstanceNameMarker sets the TrafficPolicyInstanceNameMarker field's value.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPolicyInstancesByHostedZoneOutput) SetTrafficPolicyInstanceNameMarker(v string) *ListTrafficPolicyInstancesByHostedZoneOutput {
0000000000000000000000000000000000000000;;		s.TrafficPolicyInstanceNameMarker = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTrafficPolicyInstanceTypeMarker sets the TrafficPolicyInstanceTypeMarker field's value.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPolicyInstancesByHostedZoneOutput) SetTrafficPolicyInstanceTypeMarker(v string) *ListTrafficPolicyInstancesByHostedZoneOutput {
0000000000000000000000000000000000000000;;		s.TrafficPolicyInstanceTypeMarker = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTrafficPolicyInstances sets the TrafficPolicyInstances field's value.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPolicyInstancesByHostedZoneOutput) SetTrafficPolicyInstances(v []*TrafficPolicyInstance) *ListTrafficPolicyInstancesByHostedZoneOutput {
0000000000000000000000000000000000000000;;		s.TrafficPolicyInstances = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains the information about the request to list your
0000000000000000000000000000000000000000;;	// traffic policy instances.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListTrafficPolicyInstancesByPolicyRequest
0000000000000000000000000000000000000000;;	type ListTrafficPolicyInstancesByPolicyInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// For the first request to ListTrafficPolicyInstancesByPolicy, omit this value.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If the value of IsTruncated in the previous response was true, HostedZoneIdMarker
0000000000000000000000000000000000000000;;		// is the ID of the hosted zone for the first traffic policy instance in the
0000000000000000000000000000000000000000;;		// next group of MaxItems traffic policy instances.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If the value of IsTruncated in the previous response was false, there are
0000000000000000000000000000000000000000;;		// no more traffic policy instances to get for this hosted zone.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If the value of IsTruncated in the previous response was false, omit this
0000000000000000000000000000000000000000;;		// value.
0000000000000000000000000000000000000000;;		HostedZoneIdMarker *string `location:"querystring" locationName:"hostedzoneid" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum number of traffic policy instances to be included in the response
0000000000000000000000000000000000000000;;		// body for this request. If you have more than MaxItems traffic policy instances,
0000000000000000000000000000000000000000;;		// the value of the IsTruncated element in the response is true, and the values
0000000000000000000000000000000000000000;;		// of HostedZoneIdMarker, TrafficPolicyInstanceNameMarker, and TrafficPolicyInstanceTypeMarker
0000000000000000000000000000000000000000;;		// represent the first traffic policy instance in the next group of MaxItems
0000000000000000000000000000000000000000;;		// traffic policy instances.
0000000000000000000000000000000000000000;;		MaxItems *string `location:"querystring" locationName:"maxitems" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the traffic policy for which you want to list traffic policy instances.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// TrafficPolicyId is a required field
0000000000000000000000000000000000000000;;		TrafficPolicyId *string `location:"querystring" locationName:"id" min:"1" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// For the first request to ListTrafficPolicyInstancesByPolicy, omit this value.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If the value of IsTruncated in the previous response was true, TrafficPolicyInstanceNameMarker
0000000000000000000000000000000000000000;;		// is the name of the first traffic policy instance in the next group of MaxItems
0000000000000000000000000000000000000000;;		// traffic policy instances.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If the value of IsTruncated in the previous response was false, there are
0000000000000000000000000000000000000000;;		// no more traffic policy instances to get for this hosted zone.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If the value of IsTruncated in the previous response was false, omit this
0000000000000000000000000000000000000000;;		// value.
0000000000000000000000000000000000000000;;		TrafficPolicyInstanceNameMarker *string `location:"querystring" locationName:"trafficpolicyinstancename" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// For the first request to ListTrafficPolicyInstancesByPolicy, omit this value.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If the value of IsTruncated in the previous response was true, TrafficPolicyInstanceTypeMarker
0000000000000000000000000000000000000000;;		// is the DNS type of the first traffic policy instance in the next group of
0000000000000000000000000000000000000000;;		// MaxItems traffic policy instances.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If the value of IsTruncated in the previous response was false, there are
0000000000000000000000000000000000000000;;		// no more traffic policy instances to get for this hosted zone.
0000000000000000000000000000000000000000;;		TrafficPolicyInstanceTypeMarker *string `location:"querystring" locationName:"trafficpolicyinstancetype" type:"string" enum:"RRType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The version of the traffic policy for which you want to list traffic policy
0000000000000000000000000000000000000000;;		// instances. The version must be associated with the traffic policy that is
0000000000000000000000000000000000000000;;		// specified by TrafficPolicyId.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// TrafficPolicyVersion is a required field
0000000000000000000000000000000000000000;;		TrafficPolicyVersion *int64 `location:"querystring" locationName:"version" min:"1" type:"integer" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ListTrafficPolicyInstancesByPolicyInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ListTrafficPolicyInstancesByPolicyInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPolicyInstancesByPolicyInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "ListTrafficPolicyInstancesByPolicyInput"}
0000000000000000000000000000000000000000;;		if s.TrafficPolicyId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("TrafficPolicyId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.TrafficPolicyId != nil && len(*s.TrafficPolicyId) < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("TrafficPolicyId", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.TrafficPolicyVersion == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("TrafficPolicyVersion"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.TrafficPolicyVersion != nil && *s.TrafficPolicyVersion < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinValue("TrafficPolicyVersion", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHostedZoneIdMarker sets the HostedZoneIdMarker field's value.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPolicyInstancesByPolicyInput) SetHostedZoneIdMarker(v string) *ListTrafficPolicyInstancesByPolicyInput {
0000000000000000000000000000000000000000;;		s.HostedZoneIdMarker = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxItems sets the MaxItems field's value.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPolicyInstancesByPolicyInput) SetMaxItems(v string) *ListTrafficPolicyInstancesByPolicyInput {
0000000000000000000000000000000000000000;;		s.MaxItems = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTrafficPolicyId sets the TrafficPolicyId field's value.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPolicyInstancesByPolicyInput) SetTrafficPolicyId(v string) *ListTrafficPolicyInstancesByPolicyInput {
0000000000000000000000000000000000000000;;		s.TrafficPolicyId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTrafficPolicyInstanceNameMarker sets the TrafficPolicyInstanceNameMarker field's value.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPolicyInstancesByPolicyInput) SetTrafficPolicyInstanceNameMarker(v string) *ListTrafficPolicyInstancesByPolicyInput {
0000000000000000000000000000000000000000;;		s.TrafficPolicyInstanceNameMarker = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTrafficPolicyInstanceTypeMarker sets the TrafficPolicyInstanceTypeMarker field's value.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPolicyInstancesByPolicyInput) SetTrafficPolicyInstanceTypeMarker(v string) *ListTrafficPolicyInstancesByPolicyInput {
0000000000000000000000000000000000000000;;		s.TrafficPolicyInstanceTypeMarker = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTrafficPolicyVersion sets the TrafficPolicyVersion field's value.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPolicyInstancesByPolicyInput) SetTrafficPolicyVersion(v int64) *ListTrafficPolicyInstancesByPolicyInput {
0000000000000000000000000000000000000000;;		s.TrafficPolicyVersion = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains the response information for the request.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListTrafficPolicyInstancesByPolicyResponse
0000000000000000000000000000000000000000;;	type ListTrafficPolicyInstancesByPolicyOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If IsTruncated is true, HostedZoneIdMarker is the ID of the hosted zone of
0000000000000000000000000000000000000000;;		// the first traffic policy instance in the next group of MaxItems traffic policy
0000000000000000000000000000000000000000;;		// instances.
0000000000000000000000000000000000000000;;		HostedZoneIdMarker *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A flag that indicates whether there are more traffic policy instances to
0000000000000000000000000000000000000000;;		// be listed. If the response was truncated, you can get the next group of MaxItems
0000000000000000000000000000000000000000;;		// traffic policy instances by calling ListTrafficPolicyInstancesByPolicy again
0000000000000000000000000000000000000000;;		// and specifying the values of the HostedZoneIdMarker, TrafficPolicyInstanceNameMarker,
0000000000000000000000000000000000000000;;		// and TrafficPolicyInstanceTypeMarker elements in the corresponding request
0000000000000000000000000000000000000000;;		// parameters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// IsTruncated is a required field
0000000000000000000000000000000000000000;;		IsTruncated *bool `type:"boolean" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The value that you specified for the MaxItems parameter in the call to ListTrafficPolicyInstancesByPolicy
0000000000000000000000000000000000000000;;		// that produced the current response.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// MaxItems is a required field
0000000000000000000000000000000000000000;;		MaxItems *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If IsTruncated is true, TrafficPolicyInstanceNameMarker is the name of the
0000000000000000000000000000000000000000;;		// first traffic policy instance in the next group of MaxItems traffic policy
0000000000000000000000000000000000000000;;		// instances.
0000000000000000000000000000000000000000;;		TrafficPolicyInstanceNameMarker *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If IsTruncated is true, TrafficPolicyInstanceTypeMarker is the DNS type of
0000000000000000000000000000000000000000;;		// the resource record sets that are associated with the first traffic policy
0000000000000000000000000000000000000000;;		// instance in the next group of MaxItems traffic policy instances.
0000000000000000000000000000000000000000;;		TrafficPolicyInstanceTypeMarker *string `type:"string" enum:"RRType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A list that contains one TrafficPolicyInstance element for each traffic policy
0000000000000000000000000000000000000000;;		// instance that matches the elements in the request.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// TrafficPolicyInstances is a required field
0000000000000000000000000000000000000000;;		TrafficPolicyInstances []*TrafficPolicyInstance `locationNameList:"TrafficPolicyInstance" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ListTrafficPolicyInstancesByPolicyOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ListTrafficPolicyInstancesByPolicyOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHostedZoneIdMarker sets the HostedZoneIdMarker field's value.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPolicyInstancesByPolicyOutput) SetHostedZoneIdMarker(v string) *ListTrafficPolicyInstancesByPolicyOutput {
0000000000000000000000000000000000000000;;		s.HostedZoneIdMarker = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIsTruncated sets the IsTruncated field's value.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPolicyInstancesByPolicyOutput) SetIsTruncated(v bool) *ListTrafficPolicyInstancesByPolicyOutput {
0000000000000000000000000000000000000000;;		s.IsTruncated = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxItems sets the MaxItems field's value.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPolicyInstancesByPolicyOutput) SetMaxItems(v string) *ListTrafficPolicyInstancesByPolicyOutput {
0000000000000000000000000000000000000000;;		s.MaxItems = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTrafficPolicyInstanceNameMarker sets the TrafficPolicyInstanceNameMarker field's value.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPolicyInstancesByPolicyOutput) SetTrafficPolicyInstanceNameMarker(v string) *ListTrafficPolicyInstancesByPolicyOutput {
0000000000000000000000000000000000000000;;		s.TrafficPolicyInstanceNameMarker = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTrafficPolicyInstanceTypeMarker sets the TrafficPolicyInstanceTypeMarker field's value.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPolicyInstancesByPolicyOutput) SetTrafficPolicyInstanceTypeMarker(v string) *ListTrafficPolicyInstancesByPolicyOutput {
0000000000000000000000000000000000000000;;		s.TrafficPolicyInstanceTypeMarker = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTrafficPolicyInstances sets the TrafficPolicyInstances field's value.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPolicyInstancesByPolicyOutput) SetTrafficPolicyInstances(v []*TrafficPolicyInstance) *ListTrafficPolicyInstancesByPolicyOutput {
0000000000000000000000000000000000000000;;		s.TrafficPolicyInstances = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains the information about the request to list your
0000000000000000000000000000000000000000;;	// traffic policy instances.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListTrafficPolicyInstancesRequest
0000000000000000000000000000000000000000;;	type ListTrafficPolicyInstancesInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// For the first request to ListTrafficPolicyInstances, omit this value.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If the value of IsTruncated in the previous response was true, you have more
0000000000000000000000000000000000000000;;		// traffic policy instances. To get the next group of MaxItems traffic policy
0000000000000000000000000000000000000000;;		// instances, submit another ListTrafficPolicyInstances request. For the value
0000000000000000000000000000000000000000;;		// of HostedZoneIdMarker, specify the value of HostedZoneIdMarker from the previous
0000000000000000000000000000000000000000;;		// response, which is the hosted zone ID of the first traffic policy instance
0000000000000000000000000000000000000000;;		// in the next group of MaxItems traffic policy instances.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If the value of IsTruncated in the previous response was false, there are
0000000000000000000000000000000000000000;;		// no more traffic policy instances to get.
0000000000000000000000000000000000000000;;		HostedZoneIdMarker *string `location:"querystring" locationName:"hostedzoneid" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum number of traffic policy instances to be included in the response
0000000000000000000000000000000000000000;;		// body for this request. If you have more than MaxItems traffic policy instances,
0000000000000000000000000000000000000000;;		// the value of the IsTruncated element in the response is true, and the values
0000000000000000000000000000000000000000;;		// of HostedZoneIdMarker, TrafficPolicyInstanceNameMarker, and TrafficPolicyInstanceTypeMarker
0000000000000000000000000000000000000000;;		// represent the first traffic policy instance in the next group of MaxItems
0000000000000000000000000000000000000000;;		// traffic policy instances.
0000000000000000000000000000000000000000;;		MaxItems *string `location:"querystring" locationName:"maxitems" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// For the first request to ListTrafficPolicyInstances, omit this value.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If the value of IsTruncated in the previous response was true, TrafficPolicyInstanceNameMarker
0000000000000000000000000000000000000000;;		// is the name of the first traffic policy instance in the next group of MaxItems
0000000000000000000000000000000000000000;;		// traffic policy instances.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If the value of IsTruncated in the previous response was false, there are
0000000000000000000000000000000000000000;;		// no more traffic policy instances to get.
0000000000000000000000000000000000000000;;		TrafficPolicyInstanceNameMarker *string `location:"querystring" locationName:"trafficpolicyinstancename" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// For the first request to ListTrafficPolicyInstances, omit this value.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If the value of IsTruncated in the previous response was true, TrafficPolicyInstanceTypeMarker
0000000000000000000000000000000000000000;;		// is the DNS type of the first traffic policy instance in the next group of
0000000000000000000000000000000000000000;;		// MaxItems traffic policy instances.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If the value of IsTruncated in the previous response was false, there are
0000000000000000000000000000000000000000;;		// no more traffic policy instances to get.
0000000000000000000000000000000000000000;;		TrafficPolicyInstanceTypeMarker *string `location:"querystring" locationName:"trafficpolicyinstancetype" type:"string" enum:"RRType"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ListTrafficPolicyInstancesInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ListTrafficPolicyInstancesInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHostedZoneIdMarker sets the HostedZoneIdMarker field's value.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPolicyInstancesInput) SetHostedZoneIdMarker(v string) *ListTrafficPolicyInstancesInput {
0000000000000000000000000000000000000000;;		s.HostedZoneIdMarker = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxItems sets the MaxItems field's value.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPolicyInstancesInput) SetMaxItems(v string) *ListTrafficPolicyInstancesInput {
0000000000000000000000000000000000000000;;		s.MaxItems = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTrafficPolicyInstanceNameMarker sets the TrafficPolicyInstanceNameMarker field's value.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPolicyInstancesInput) SetTrafficPolicyInstanceNameMarker(v string) *ListTrafficPolicyInstancesInput {
0000000000000000000000000000000000000000;;		s.TrafficPolicyInstanceNameMarker = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTrafficPolicyInstanceTypeMarker sets the TrafficPolicyInstanceTypeMarker field's value.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPolicyInstancesInput) SetTrafficPolicyInstanceTypeMarker(v string) *ListTrafficPolicyInstancesInput {
0000000000000000000000000000000000000000;;		s.TrafficPolicyInstanceTypeMarker = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains the response information for the request.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListTrafficPolicyInstancesResponse
0000000000000000000000000000000000000000;;	type ListTrafficPolicyInstancesOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If IsTruncated is true, HostedZoneIdMarker is the ID of the hosted zone of
0000000000000000000000000000000000000000;;		// the first traffic policy instance in the next group of MaxItems traffic policy
0000000000000000000000000000000000000000;;		// instances.
0000000000000000000000000000000000000000;;		HostedZoneIdMarker *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A flag that indicates whether there are more traffic policy instances to
0000000000000000000000000000000000000000;;		// be listed. If the response was truncated, you can get the next group of MaxItems
0000000000000000000000000000000000000000;;		// traffic policy instances by calling ListTrafficPolicyInstances again and
0000000000000000000000000000000000000000;;		// specifying the values of the HostedZoneIdMarker, TrafficPolicyInstanceNameMarker,
0000000000000000000000000000000000000000;;		// and TrafficPolicyInstanceTypeMarker elements in the corresponding request
0000000000000000000000000000000000000000;;		// parameters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// IsTruncated is a required field
0000000000000000000000000000000000000000;;		IsTruncated *bool `type:"boolean" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The value that you specified for the MaxItems parameter in the call to ListTrafficPolicyInstances
0000000000000000000000000000000000000000;;		// that produced the current response.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// MaxItems is a required field
0000000000000000000000000000000000000000;;		MaxItems *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If IsTruncated is true, TrafficPolicyInstanceNameMarker is the name of the
0000000000000000000000000000000000000000;;		// first traffic policy instance in the next group of MaxItems traffic policy
0000000000000000000000000000000000000000;;		// instances.
0000000000000000000000000000000000000000;;		TrafficPolicyInstanceNameMarker *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If IsTruncated is true, TrafficPolicyInstanceTypeMarker is the DNS type of
0000000000000000000000000000000000000000;;		// the resource record sets that are associated with the first traffic policy
0000000000000000000000000000000000000000;;		// instance in the next group of MaxItems traffic policy instances.
0000000000000000000000000000000000000000;;		TrafficPolicyInstanceTypeMarker *string `type:"string" enum:"RRType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A list that contains one TrafficPolicyInstance element for each traffic policy
0000000000000000000000000000000000000000;;		// instance that matches the elements in the request.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// TrafficPolicyInstances is a required field
0000000000000000000000000000000000000000;;		TrafficPolicyInstances []*TrafficPolicyInstance `locationNameList:"TrafficPolicyInstance" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ListTrafficPolicyInstancesOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ListTrafficPolicyInstancesOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHostedZoneIdMarker sets the HostedZoneIdMarker field's value.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPolicyInstancesOutput) SetHostedZoneIdMarker(v string) *ListTrafficPolicyInstancesOutput {
0000000000000000000000000000000000000000;;		s.HostedZoneIdMarker = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIsTruncated sets the IsTruncated field's value.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPolicyInstancesOutput) SetIsTruncated(v bool) *ListTrafficPolicyInstancesOutput {
0000000000000000000000000000000000000000;;		s.IsTruncated = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxItems sets the MaxItems field's value.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPolicyInstancesOutput) SetMaxItems(v string) *ListTrafficPolicyInstancesOutput {
0000000000000000000000000000000000000000;;		s.MaxItems = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTrafficPolicyInstanceNameMarker sets the TrafficPolicyInstanceNameMarker field's value.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPolicyInstancesOutput) SetTrafficPolicyInstanceNameMarker(v string) *ListTrafficPolicyInstancesOutput {
0000000000000000000000000000000000000000;;		s.TrafficPolicyInstanceNameMarker = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTrafficPolicyInstanceTypeMarker sets the TrafficPolicyInstanceTypeMarker field's value.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPolicyInstancesOutput) SetTrafficPolicyInstanceTypeMarker(v string) *ListTrafficPolicyInstancesOutput {
0000000000000000000000000000000000000000;;		s.TrafficPolicyInstanceTypeMarker = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTrafficPolicyInstances sets the TrafficPolicyInstances field's value.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPolicyInstancesOutput) SetTrafficPolicyInstances(v []*TrafficPolicyInstance) *ListTrafficPolicyInstancesOutput {
0000000000000000000000000000000000000000;;		s.TrafficPolicyInstances = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains the information about the request to list your
0000000000000000000000000000000000000000;;	// traffic policies.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListTrafficPolicyVersionsRequest
0000000000000000000000000000000000000000;;	type ListTrafficPolicyVersionsInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Specify the value of Id of the traffic policy for which you want to list
0000000000000000000000000000000000000000;;		// all versions.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Id is a required field
0000000000000000000000000000000000000000;;		Id *string `location:"uri" locationName:"Id" min:"1" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The maximum number of traffic policy versions that you want Amazon Route
0000000000000000000000000000000000000000;;		// 53 to include in the response body for this request. If the specified traffic
0000000000000000000000000000000000000000;;		// policy has more than MaxItems versions, the value of the IsTruncated element
0000000000000000000000000000000000000000;;		// in the response is true, and the value of the TrafficPolicyVersionMarker
0000000000000000000000000000000000000000;;		// element is the ID of the first version in the next group of MaxItems traffic
0000000000000000000000000000000000000000;;		// policy versions.
0000000000000000000000000000000000000000;;		MaxItems *string `location:"querystring" locationName:"maxitems" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// For your first request to ListTrafficPolicyVersions, do not include the TrafficPolicyVersionMarker
0000000000000000000000000000000000000000;;		// parameter.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If you have more traffic policy versions than the value of MaxItems, ListTrafficPolicyVersions
0000000000000000000000000000000000000000;;		// returns only the first group of MaxItems versions. To get the next group
0000000000000000000000000000000000000000;;		// of MaxItems traffic policy versions, submit another request to ListTrafficPolicyVersions.
0000000000000000000000000000000000000000;;		// For the value of TrafficPolicyVersionMarker, specify the value of the TrafficPolicyVersionMarker
0000000000000000000000000000000000000000;;		// element that was returned in the previous response.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Traffic policy versions are listed in sequential order.
0000000000000000000000000000000000000000;;		TrafficPolicyVersionMarker *string `location:"querystring" locationName:"trafficpolicyversion" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ListTrafficPolicyVersionsInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ListTrafficPolicyVersionsInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPolicyVersionsInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "ListTrafficPolicyVersionsInput"}
0000000000000000000000000000000000000000;;		if s.Id == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Id"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Id != nil && len(*s.Id) < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("Id", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetId sets the Id field's value.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPolicyVersionsInput) SetId(v string) *ListTrafficPolicyVersionsInput {
0000000000000000000000000000000000000000;;		s.Id = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxItems sets the MaxItems field's value.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPolicyVersionsInput) SetMaxItems(v string) *ListTrafficPolicyVersionsInput {
0000000000000000000000000000000000000000;;		s.MaxItems = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTrafficPolicyVersionMarker sets the TrafficPolicyVersionMarker field's value.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPolicyVersionsInput) SetTrafficPolicyVersionMarker(v string) *ListTrafficPolicyVersionsInput {
0000000000000000000000000000000000000000;;		s.TrafficPolicyVersionMarker = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains the response information for the request.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListTrafficPolicyVersionsResponse
0000000000000000000000000000000000000000;;	type ListTrafficPolicyVersionsOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A flag that indicates whether there are more traffic policies to be listed.
0000000000000000000000000000000000000000;;		// If the response was truncated, you can get the next group of maxitems traffic
0000000000000000000000000000000000000000;;		// policies by calling ListTrafficPolicyVersions again and specifying the value
0000000000000000000000000000000000000000;;		// of the NextMarker element in the marker parameter.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// IsTruncated is a required field
0000000000000000000000000000000000000000;;		IsTruncated *bool `type:"boolean" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The value that you specified for the maxitems parameter in the call to ListTrafficPolicyVersions
0000000000000000000000000000000000000000;;		// that produced the current response.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// MaxItems is a required field
0000000000000000000000000000000000000000;;		MaxItems *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A list that contains one TrafficPolicy element for each traffic policy version
0000000000000000000000000000000000000000;;		// that is associated with the specified traffic policy.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// TrafficPolicies is a required field
0000000000000000000000000000000000000000;;		TrafficPolicies []*TrafficPolicy `locationNameList:"TrafficPolicy" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If IsTruncated is true, the value of TrafficPolicyVersionMarker identifies
0000000000000000000000000000000000000000;;		// the first traffic policy in the next group of MaxItems traffic policies.
0000000000000000000000000000000000000000;;		// Call ListTrafficPolicyVersions again and specify the value of TrafficPolicyVersionMarker
0000000000000000000000000000000000000000;;		// in the TrafficPolicyVersionMarker request parameter.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// This element is present only if IsTruncated is true.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// TrafficPolicyVersionMarker is a required field
0000000000000000000000000000000000000000;;		TrafficPolicyVersionMarker *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ListTrafficPolicyVersionsOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ListTrafficPolicyVersionsOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIsTruncated sets the IsTruncated field's value.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPolicyVersionsOutput) SetIsTruncated(v bool) *ListTrafficPolicyVersionsOutput {
0000000000000000000000000000000000000000;;		s.IsTruncated = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxItems sets the MaxItems field's value.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPolicyVersionsOutput) SetMaxItems(v string) *ListTrafficPolicyVersionsOutput {
0000000000000000000000000000000000000000;;		s.MaxItems = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTrafficPolicies sets the TrafficPolicies field's value.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPolicyVersionsOutput) SetTrafficPolicies(v []*TrafficPolicy) *ListTrafficPolicyVersionsOutput {
0000000000000000000000000000000000000000;;		s.TrafficPolicies = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTrafficPolicyVersionMarker sets the TrafficPolicyVersionMarker field's value.
0000000000000000000000000000000000000000;;	func (s *ListTrafficPolicyVersionsOutput) SetTrafficPolicyVersionMarker(v string) *ListTrafficPolicyVersionsOutput {
0000000000000000000000000000000000000000;;		s.TrafficPolicyVersionMarker = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains information about that can be associated with
0000000000000000000000000000000000000000;;	// your hosted zone.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListVPCAssociationAuthorizationsRequest
0000000000000000000000000000000000000000;;	type ListVPCAssociationAuthorizationsInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the hosted zone for which you want a list of VPCs that can be associated
0000000000000000000000000000000000000000;;		// with the hosted zone.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// HostedZoneId is a required field
0000000000000000000000000000000000000000;;		HostedZoneId *string `location:"uri" locationName:"Id" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Optional: An integer that specifies the maximum number of VPCs that you want
0000000000000000000000000000000000000000;;		// Amazon Route 53 to return.
0000000000000000000000000000000000000000;;		MaxResults *string `location:"querystring" locationName:"maxresults" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Optional: If a response includes a NextToken element, there are more VPCs
0000000000000000000000000000000000000000;;		// that can be associated with the specified hosted zone. To get the next page
0000000000000000000000000000000000000000;;		// of results, submit another request, and include the value of the NextToken
0000000000000000000000000000000000000000;;		// element in from the response in the NextToken parameter in another ListVPCAssociationAuthorizations
0000000000000000000000000000000000000000;;		// request.
0000000000000000000000000000000000000000;;		NextToken *string `location:"querystring" locationName:"nexttoken" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ListVPCAssociationAuthorizationsInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ListVPCAssociationAuthorizationsInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *ListVPCAssociationAuthorizationsInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "ListVPCAssociationAuthorizationsInput"}
0000000000000000000000000000000000000000;;		if s.HostedZoneId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("HostedZoneId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHostedZoneId sets the HostedZoneId field's value.
0000000000000000000000000000000000000000;;	func (s *ListVPCAssociationAuthorizationsInput) SetHostedZoneId(v string) *ListVPCAssociationAuthorizationsInput {
0000000000000000000000000000000000000000;;		s.HostedZoneId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMaxResults sets the MaxResults field's value.
0000000000000000000000000000000000000000;;	func (s *ListVPCAssociationAuthorizationsInput) SetMaxResults(v string) *ListVPCAssociationAuthorizationsInput {
0000000000000000000000000000000000000000;;		s.MaxResults = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *ListVPCAssociationAuthorizationsInput) SetNextToken(v string) *ListVPCAssociationAuthorizationsInput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains the response information for the request.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ListVPCAssociationAuthorizationsResponse
0000000000000000000000000000000000000000;;	type ListVPCAssociationAuthorizationsOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the hosted zone that you can associate the listed VPCs with.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// HostedZoneId is a required field
0000000000000000000000000000000000000000;;		HostedZoneId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// When the response includes a NextToken element, there are more VPCs that
0000000000000000000000000000000000000000;;		// can be associated with the specified hosted zone. To get the next page of
0000000000000000000000000000000000000000;;		// VPCs, submit another ListVPCAssociationAuthorizations request, and include
0000000000000000000000000000000000000000;;		// the value of the NextToken element from the response in the NextToken request
0000000000000000000000000000000000000000;;		// parameter:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// /2013-04-01/hostedzone/hosted zone ID/authorizevpcassociation?MaxItems=VPCs
0000000000000000000000000000000000000000;;		// per page&NextToken=
0000000000000000000000000000000000000000;;		NextToken *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The list of VPCs that are authorized to be associated with the specified
0000000000000000000000000000000000000000;;		// hosted zone.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// VPCs is a required field
0000000000000000000000000000000000000000;;		VPCs []*VPC `locationNameList:"VPC" min:"1" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ListVPCAssociationAuthorizationsOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ListVPCAssociationAuthorizationsOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHostedZoneId sets the HostedZoneId field's value.
0000000000000000000000000000000000000000;;	func (s *ListVPCAssociationAuthorizationsOutput) SetHostedZoneId(v string) *ListVPCAssociationAuthorizationsOutput {
0000000000000000000000000000000000000000;;		s.HostedZoneId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNextToken sets the NextToken field's value.
0000000000000000000000000000000000000000;;	func (s *ListVPCAssociationAuthorizationsOutput) SetNextToken(v string) *ListVPCAssociationAuthorizationsOutput {
0000000000000000000000000000000000000000;;		s.NextToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVPCs sets the VPCs field's value.
0000000000000000000000000000000000000000;;	func (s *ListVPCAssociationAuthorizationsOutput) SetVPCs(v []*VPC) *ListVPCAssociationAuthorizationsOutput {
0000000000000000000000000000000000000000;;		s.VPCs = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Information specific to the resource record.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If you are creating an alias resource record set, omit ResourceRecord.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ResourceRecord
0000000000000000000000000000000000000000;;	type ResourceRecord struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The current or new DNS record value, not to exceed 4,000 characters. In the
0000000000000000000000000000000000000000;;		// case of a DELETE action, if the current value does not match the actual value,
0000000000000000000000000000000000000000;;		// an error is returned. For descriptions about how to format Value for different
0000000000000000000000000000000000000000;;		// record types, see Supported DNS Resource Record Types (http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html)
0000000000000000000000000000000000000000;;		// in the Amazon Route 53 Developer Guide.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// You can specify more than one value for all record types except CNAME and
0000000000000000000000000000000000000000;;		// SOA.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If you are creating an alias resource record set, omit Value.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Value is a required field
0000000000000000000000000000000000000000;;		Value *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ResourceRecord) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ResourceRecord) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *ResourceRecord) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "ResourceRecord"}
0000000000000000000000000000000000000000;;		if s.Value == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Value"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetValue sets the Value field's value.
0000000000000000000000000000000000000000;;	func (s *ResourceRecord) SetValue(v string) *ResourceRecord {
0000000000000000000000000000000000000000;;		s.Value = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Information about the resource record set to create or delete.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ResourceRecordSet
0000000000000000000000000000000000000000;;	type ResourceRecordSet struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Alias resource record sets only: Information about the CloudFront distribution,
0000000000000000000000000000000000000000;;		// AWS Elastic Beanstalk environment, ELB load balancer, Amazon S3 bucket, or
0000000000000000000000000000000000000000;;		// Amazon Route 53 resource record set to which you are redirecting queries.
0000000000000000000000000000000000000000;;		// The AWS Elastic Beanstalk environment must have a regionalized subdomain.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If you're creating resource records sets for a private hosted zone, note
0000000000000000000000000000000000000000;;		// the following:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * You can't create alias resource record sets for CloudFront distributions
0000000000000000000000000000000000000000;;		//    in a private hosted zone.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * Creating geolocation alias resource record sets or latency alias resource
0000000000000000000000000000000000000000;;		//    record sets in a private hosted zone is unsupported.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * For information about creating failover resource record sets in a private
0000000000000000000000000000000000000000;;		//    hosted zone, see Configuring Failover in a Private Hosted Zone (http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-private-hosted-zones.html)
0000000000000000000000000000000000000000;;		//    in the Amazon Route 53 Developer Guide.
0000000000000000000000000000000000000000;;		AliasTarget *AliasTarget `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Failover resource record sets only: To configure failover, you add the Failover
0000000000000000000000000000000000000000;;		// element to two resource record sets. For one resource record set, you specify
0000000000000000000000000000000000000000;;		// PRIMARY as the value for Failover; for the other resource record set, you
0000000000000000000000000000000000000000;;		// specify SECONDARY. In addition, you include the HealthCheckId element and
0000000000000000000000000000000000000000;;		// specify the health check that you want Amazon Route 53 to perform for each
0000000000000000000000000000000000000000;;		// resource record set.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Except where noted, the following failover behaviors assume that you have
0000000000000000000000000000000000000000;;		// included the HealthCheckId element in both resource record sets:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * When the primary resource record set is healthy, Amazon Route 53 responds
0000000000000000000000000000000000000000;;		//    to DNS queries with the applicable value from the primary resource record
0000000000000000000000000000000000000000;;		//    set regardless of the health of the secondary resource record set.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * When the primary resource record set is unhealthy and the secondary
0000000000000000000000000000000000000000;;		//    resource record set is healthy, Amazon Route 53 responds to DNS queries
0000000000000000000000000000000000000000;;		//    with the applicable value from the secondary resource record set.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * When the secondary resource record set is unhealthy, Amazon Route 53
0000000000000000000000000000000000000000;;		//    responds to DNS queries with the applicable value from the primary resource
0000000000000000000000000000000000000000;;		//    record set regardless of the health of the primary resource record set.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * If you omit the HealthCheckId element for the secondary resource record
0000000000000000000000000000000000000000;;		//    set, and if the primary resource record set is unhealthy, Amazon Route
0000000000000000000000000000000000000000;;		//    53 always responds to DNS queries with the applicable value from the secondary
0000000000000000000000000000000000000000;;		//    resource record set. This is true regardless of the health of the associated
0000000000000000000000000000000000000000;;		//    endpoint.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// You can't create non-failover resource record sets that have the same values
0000000000000000000000000000000000000000;;		// for the Name and Type elements as failover resource record sets.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// For failover alias resource record sets, you must also include the EvaluateTargetHealth
0000000000000000000000000000000000000000;;		// element and set the value to true.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// For more information about configuring failover for Amazon Route 53, see
0000000000000000000000000000000000000000;;		// the following topics in the Amazon Route 53 Developer Guide:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * Amazon Route 53 Health Checks and DNS Failover (http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover.html)
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * Configuring Failover in a Private Hosted Zone (http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-private-hosted-zones.html)
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Valid values: PRIMARY | SECONDARY
0000000000000000000000000000000000000000;;		Failover *string `type:"string" enum:"ResourceRecordSetFailover"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Geo location resource record sets only: A complex type that lets you control
0000000000000000000000000000000000000000;;		// how Amazon Route 53 responds to DNS queries based on the geographic origin
0000000000000000000000000000000000000000;;		// of the query. For example, if you want all queries from Africa to be routed
0000000000000000000000000000000000000000;;		// to a web server with an IP address of 192.0.2.111, create a resource record
0000000000000000000000000000000000000000;;		// set with a Type of A and a ContinentCode of AF.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Creating geolocation and geolocation alias resource record sets in private
0000000000000000000000000000000000000000;;		// hosted zones is not supported.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If you create separate resource record sets for overlapping geographic regions
0000000000000000000000000000000000000000;;		// (for example, one resource record set for a continent and one for a country
0000000000000000000000000000000000000000;;		// on the same continent), priority goes to the smallest geographic region.
0000000000000000000000000000000000000000;;		// This allows you to route most queries for a continent to one resource and
0000000000000000000000000000000000000000;;		// to route queries for a country on that continent to a different resource.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// You can't create two geolocation resource record sets that specify the same
0000000000000000000000000000000000000000;;		// geographic location.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// The value * in the CountryCode element matches all geographic locations that
0000000000000000000000000000000000000000;;		// aren't specified in other geolocation resource record sets that have the
0000000000000000000000000000000000000000;;		// same values for the Name and Type elements.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Geolocation works by mapping IP addresses to locations. However, some IP
0000000000000000000000000000000000000000;;		// addresses aren't mapped to geographic locations, so even if you create geolocation
0000000000000000000000000000000000000000;;		// resource record sets that cover all seven continents, Amazon Route 53 will
0000000000000000000000000000000000000000;;		// receive some DNS queries from locations that it can't identify. We recommend
0000000000000000000000000000000000000000;;		// that you create a resource record set for which the value of CountryCode
0000000000000000000000000000000000000000;;		// is *, which handles both queries that come from locations for which you haven't
0000000000000000000000000000000000000000;;		// created geolocation resource record sets and queries from IP addresses that
0000000000000000000000000000000000000000;;		// aren't mapped to a location. If you don't create a * resource record set,
0000000000000000000000000000000000000000;;		// Amazon Route 53 returns a "no answer" response for queries from those locations.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// You can't create non-geolocation resource record sets that have the same
0000000000000000000000000000000000000000;;		// values for the Name and Type elements as geolocation resource record sets.
0000000000000000000000000000000000000000;;		GeoLocation *GeoLocation `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If you want Amazon Route 53 to return this resource record set in response
0000000000000000000000000000000000000000;;		// to a DNS query only when a health check is passing, include the HealthCheckId
0000000000000000000000000000000000000000;;		// element and specify the ID of the applicable health check.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Amazon Route 53 determines whether a resource record set is healthy based
0000000000000000000000000000000000000000;;		// on one of the following:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * By periodically sending a request to the endpoint that is specified
0000000000000000000000000000000000000000;;		//    in the health check
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * By aggregating the status of a specified group of health checks (calculated
0000000000000000000000000000000000000000;;		//    health checks)
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * By determining the current state of a CloudWatch alarm (CloudWatch metric
0000000000000000000000000000000000000000;;		//    health checks)
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// For information about how Amazon Route 53 determines whether a health check
0000000000000000000000000000000000000000;;		// is healthy, see CreateHealthCheck.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// The HealthCheckId element is only useful when Amazon Route 53 is choosing
0000000000000000000000000000000000000000;;		// between two or more resource record sets to respond to a DNS query, and you
0000000000000000000000000000000000000000;;		// want Amazon Route 53 to base the choice in part on the status of a health
0000000000000000000000000000000000000000;;		// check. Configuring health checks only makes sense in the following configurations:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * You're checking the health of the resource record sets in a weighted,
0000000000000000000000000000000000000000;;		//    latency, geolocation, or failover resource record set, and you specify
0000000000000000000000000000000000000000;;		//    health check IDs for all of the resource record sets. If the health check
0000000000000000000000000000000000000000;;		//    for one resource record set specifies an endpoint that is not healthy,
0000000000000000000000000000000000000000;;		//    Amazon Route 53 stops responding to queries using the value for that resource
0000000000000000000000000000000000000000;;		//    record set.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * You set EvaluateTargetHealth to true for the resource record sets in
0000000000000000000000000000000000000000;;		//    an alias, weighted alias, latency alias, geolocation alias, or failover
0000000000000000000000000000000000000000;;		//    alias resource record set, and you specify health check IDs for all of
0000000000000000000000000000000000000000;;		//    the resource record sets that are referenced by the alias resource record
0000000000000000000000000000000000000000;;		//    sets.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Amazon Route 53 doesn't check the health of the endpoint specified in the
0000000000000000000000000000000000000000;;		// resource record set, for example, the endpoint specified by the IP address
0000000000000000000000000000000000000000;;		// in the Value element. When you add a HealthCheckId element to a resource
0000000000000000000000000000000000000000;;		// record set, Amazon Route 53 checks the health of the endpoint that you specified
0000000000000000000000000000000000000000;;		// in the health check.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// For geolocation resource record sets, if an endpoint is unhealthy, Amazon
0000000000000000000000000000000000000000;;		// Route 53 looks for a resource record set for the larger, associated geographic
0000000000000000000000000000000000000000;;		// region. For example, suppose you have resource record sets for a state in
0000000000000000000000000000000000000000;;		// the United States, for the United States, for North America, and for all
0000000000000000000000000000000000000000;;		// locations. If the endpoint for the state resource record set is unhealthy,
0000000000000000000000000000000000000000;;		// Amazon Route 53 checks the resource record sets for the United States, for
0000000000000000000000000000000000000000;;		// North America, and for all locations (a resource record set for which the
0000000000000000000000000000000000000000;;		// value of CountryCode is *), in that order, until it finds a resource record
0000000000000000000000000000000000000000;;		// set for which the endpoint is healthy.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If your health checks specify the endpoint only by domain name, we recommend
0000000000000000000000000000000000000000;;		// that you create a separate health check for each endpoint. For example, create
0000000000000000000000000000000000000000;;		// a health check for each HTTP server that is serving content for www.example.com.
0000000000000000000000000000000000000000;;		// For the value of FullyQualifiedDomainName, specify the domain name of the
0000000000000000000000000000000000000000;;		// server (such as us-east-1-www.example.com), not the name of the resource
0000000000000000000000000000000000000000;;		// record sets (example.com).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// n this configuration, if you create a health check for which the value of
0000000000000000000000000000000000000000;;		// FullyQualifiedDomainName matches the name of the resource record sets and
0000000000000000000000000000000000000000;;		// then associate the health check with those resource record sets, health check
0000000000000000000000000000000000000000;;		// results will be unpredictable.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// For more information, see the following topics in the Amazon Route 53 Developer
0000000000000000000000000000000000000000;;		// Guide:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * Amazon Route 53 Health Checks and DNS Failover (http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover.html)
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * Configuring Failover in a Private Hosted Zone (http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-private-hosted-zones.html)
0000000000000000000000000000000000000000;;		HealthCheckId *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the domain you want to perform the action on.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Enter a fully qualified domain name, for example, www.example.com. You can
0000000000000000000000000000000000000000;;		// optionally include a trailing dot. If you omit the trailing dot, Amazon Route
0000000000000000000000000000000000000000;;		// 53 still assumes that the domain name that you specify is fully qualified.
0000000000000000000000000000000000000000;;		// This means that Amazon Route 53 treats www.example.com (without a trailing
0000000000000000000000000000000000000000;;		// dot) and www.example.com. (with a trailing dot) as identical.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// For information about how to specify characters other than a-z, 0-9, and
0000000000000000000000000000000000000000;;		// - (hyphen) and how to specify internationalized domain names, see DNS Domain
0000000000000000000000000000000000000000;;		// Name Format (http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DomainNameFormat.html)
0000000000000000000000000000000000000000;;		// in the Amazon Route 53 Developer Guide.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// You can use the asterisk (*) wildcard to replace the leftmost label in a
0000000000000000000000000000000000000000;;		// domain name. For example, *.example.com. Note the following:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * The * must replace the entire label. For example, you can't specify
0000000000000000000000000000000000000000;;		//    *prod.example.com or prod*.example.com.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * The * can't replace any of the middle labels, for example, marketing.*.example.com.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * If you include * in any position other than the leftmost label in a
0000000000000000000000000000000000000000;;		//    domain name, DNS treats it as an * character (ASCII 42), not as a wildcard.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// You can't use the * wildcard for resource records sets that have a type of
0000000000000000000000000000000000000000;;		//    NS.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// You can use the * wildcard as the leftmost label in a domain name, for example,
0000000000000000000000000000000000000000;;		// *.example.com. You can't use an * for one of the middle labels, for example,
0000000000000000000000000000000000000000;;		// marketing.*.example.com. In addition, the * must replace the entire label;
0000000000000000000000000000000000000000;;		// for example, you can't specify prod*.example.com.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Name is a required field
0000000000000000000000000000000000000000;;		Name *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Latency-based resource record sets only: The Amazon EC2 Region where the
0000000000000000000000000000000000000000;;		// resource that is specified in this resource record set resides. The resource
0000000000000000000000000000000000000000;;		// typically is an AWS resource, such as an EC2 instance or an ELB load balancer,
0000000000000000000000000000000000000000;;		// and is referred to by an IP address or a DNS domain name, depending on the
0000000000000000000000000000000000000000;;		// record type.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Creating latency and latency alias resource record sets in private hosted
0000000000000000000000000000000000000000;;		// zones is not supported.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// When Amazon Route 53 receives a DNS query for a domain name and type for
0000000000000000000000000000000000000000;;		// which you have created latency resource record sets, Amazon Route 53 selects
0000000000000000000000000000000000000000;;		// the latency resource record set that has the lowest latency between the end
0000000000000000000000000000000000000000;;		// user and the associated Amazon EC2 Region. Amazon Route 53 then returns the
0000000000000000000000000000000000000000;;		// value that is associated with the selected resource record set.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Note the following:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * You can only specify one ResourceRecord per latency resource record
0000000000000000000000000000000000000000;;		//    set.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * You can only create one latency resource record set for each Amazon
0000000000000000000000000000000000000000;;		//    EC2 Region.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * You are not required to create latency resource record sets for all
0000000000000000000000000000000000000000;;		//    Amazon EC2 Regions. Amazon Route 53 will choose the region with the best
0000000000000000000000000000000000000000;;		//    latency from among the regions for which you create latency resource record
0000000000000000000000000000000000000000;;		//    sets.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * You can't create non-latency resource record sets that have the same
0000000000000000000000000000000000000000;;		//    values for the Name and Type elements as latency resource record sets.
0000000000000000000000000000000000000000;;		Region *string `min:"1" type:"string" enum:"ResourceRecordSetRegion"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the resource records to act upon.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If you are creating an alias resource record set, omit ResourceRecords.
0000000000000000000000000000000000000000;;		ResourceRecords []*ResourceRecord `locationNameList:"ResourceRecord" min:"1" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Weighted, Latency, Geo, and Failover resource record sets only: An identifier
0000000000000000000000000000000000000000;;		// that differentiates among multiple resource record sets that have the same
0000000000000000000000000000000000000000;;		// combination of DNS name and type. The value of SetIdentifier must be unique
0000000000000000000000000000000000000000;;		// for each resource record set that has the same combination of DNS name and
0000000000000000000000000000000000000000;;		// type. Omit SetIdentifier for any other types of record sets.
0000000000000000000000000000000000000000;;		SetIdentifier *string `min:"1" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The resource record cache time to live (TTL), in seconds. Note the following:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * If you're creating an alias resource record set, omit TTL. Amazon Route
0000000000000000000000000000000000000000;;		//    53 uses the value of TTL for the alias target.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * If you're associating this resource record set with a health check (if
0000000000000000000000000000000000000000;;		//    you're adding a HealthCheckId element), we recommend that you specify
0000000000000000000000000000000000000000;;		//    a TTL of 60 seconds or less so clients respond quickly to changes in health
0000000000000000000000000000000000000000;;		//    status.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * All of the resource record sets in a group of weighted, latency, geolocation,
0000000000000000000000000000000000000000;;		//    or failover resource record sets must have the same value for TTL.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * If a group of weighted resource record sets includes one or more weighted
0000000000000000000000000000000000000000;;		//    alias resource record sets for which the alias target is an ELB load balancer,
0000000000000000000000000000000000000000;;		//    we recommend that you specify a TTL of 60 seconds for all of the non-alias
0000000000000000000000000000000000000000;;		//    weighted resource record sets that have the same name and type. Values
0000000000000000000000000000000000000000;;		//    other than 60 seconds (the TTL for load balancers) will change the effect
0000000000000000000000000000000000000000;;		//    of the values that you specify for Weight.
0000000000000000000000000000000000000000;;		TTL *int64 `type:"long"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// When you create a traffic policy instance, Amazon Route 53 automatically
0000000000000000000000000000000000000000;;		// creates a resource record set. TrafficPolicyInstanceId is the ID of the traffic
0000000000000000000000000000000000000000;;		// policy instance that Amazon Route 53 created this resource record set for.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// To delete the resource record set that is associated with a traffic policy
0000000000000000000000000000000000000000;;		// instance, use DeleteTrafficPolicyInstance. Amazon Route 53 will delete the
0000000000000000000000000000000000000000;;		// resource record set automatically. If you delete the resource record set
0000000000000000000000000000000000000000;;		// by using ChangeResourceRecordSets, Amazon Route 53 doesn't automatically
0000000000000000000000000000000000000000;;		// delete the traffic policy instance, and you'll continue to be charged for
0000000000000000000000000000000000000000;;		// it even though it's no longer in use.
0000000000000000000000000000000000000000;;		TrafficPolicyInstanceId *string `min:"1" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The DNS record type. For information about different record types and how
0000000000000000000000000000000000000000;;		// data is encoded for them, see Supported DNS Resource Record Types (http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html)
0000000000000000000000000000000000000000;;		// in the Amazon Route 53 Developer Guide.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Valid values for basic resource record sets: A | AAAA | CNAME | MX | NAPTR
0000000000000000000000000000000000000000;;		// | NS | PTR | SOA | SPF | SRV | TXT
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Values for weighted, latency, geolocation, and failover resource record sets:
0000000000000000000000000000000000000000;;		// A | AAAA | CNAME | MX | NAPTR | PTR | SPF | SRV | TXT. When creating a group
0000000000000000000000000000000000000000;;		// of weighted, latency, geolocation, or failover resource record sets, specify
0000000000000000000000000000000000000000;;		// the same value for all of the resource record sets in the group.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// SPF records were formerly used to verify the identity of the sender of email
0000000000000000000000000000000000000000;;		// messages. However, we no longer recommend that you create resource record
0000000000000000000000000000000000000000;;		// sets for which the value of Type is SPF. RFC 7208, Sender Policy Framework
0000000000000000000000000000000000000000;;		// (SPF) for Authorizing Use of Domains in Email, Version 1, has been updated
0000000000000000000000000000000000000000;;		// to say, "...[I]ts existence and mechanism defined in [RFC4408] have led to
0000000000000000000000000000000000000000;;		// some interoperability issues. Accordingly, its use is no longer appropriate
0000000000000000000000000000000000000000;;		// for SPF version 1; implementations are not to use it." In RFC 7208, see section
0000000000000000000000000000000000000000;;		// 14.1, The SPF DNS Record Type (http://tools.ietf.org/html/rfc7208#section-14.1).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Values for alias resource record sets:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * CloudFront distributions:A
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If IPv6 is enabled for the distribution, create two resource record sets
0000000000000000000000000000000000000000;;		//    to route traffic to your distribution, one with a value of A and one with
0000000000000000000000000000000000000000;;		//    a value of AAAA.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * AWS Elastic Beanstalk environment that has a regionalized subdomain:
0000000000000000000000000000000000000000;;		//    A
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * ELB load balancers:A | AAAA
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * Amazon S3 buckets:A
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * Another resource record set in this hosted zone: Specify the type of
0000000000000000000000000000000000000000;;		//    the resource record set for which you're creating the alias. Specify any
0000000000000000000000000000000000000000;;		//    value except NS or SOA.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Type is a required field
0000000000000000000000000000000000000000;;		Type *string `type:"string" required:"true" enum:"RRType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Weighted resource record sets only: Among resource record sets that have
0000000000000000000000000000000000000000;;		// the same combination of DNS name and type, a value that determines the proportion
0000000000000000000000000000000000000000;;		// of DNS queries that Amazon Route 53 responds to using the current resource
0000000000000000000000000000000000000000;;		// record set. Amazon Route 53 calculates the sum of the weights for the resource
0000000000000000000000000000000000000000;;		// record sets that have the same combination of DNS name and type. Amazon Route
0000000000000000000000000000000000000000;;		// 53 then responds to queries based on the ratio of a resource's weight to
0000000000000000000000000000000000000000;;		// the total. Note the following:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * You must specify a value for the Weight element for every weighted resource
0000000000000000000000000000000000000000;;		//    record set.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * You can only specify one ResourceRecord per weighted resource record
0000000000000000000000000000000000000000;;		//    set.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * You can't create latency, failover, or geolocation resource record sets
0000000000000000000000000000000000000000;;		//    that have the same values for the Name and Type elements as weighted resource
0000000000000000000000000000000000000000;;		//    record sets.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * You can create a maximum of 100 weighted resource record sets that have
0000000000000000000000000000000000000000;;		//    the same values for the Name and Type elements.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * For weighted (but not weighted alias) resource record sets, if you set
0000000000000000000000000000000000000000;;		//    Weight to 0 for a resource record set, Amazon Route 53 never responds
0000000000000000000000000000000000000000;;		//    to queries with the applicable value for that resource record set. However,
0000000000000000000000000000000000000000;;		//    if you set Weight to 0 for all resource record sets that have the same
0000000000000000000000000000000000000000;;		//    combination of DNS name and type, traffic is routed to all resources with
0000000000000000000000000000000000000000;;		//    equal probability.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// The effect of setting Weight to 0 is different when you associate health
0000000000000000000000000000000000000000;;		//    checks with weighted resource record sets. For more information, see Options
0000000000000000000000000000000000000000;;		//    for Configuring Amazon Route 53 Active-Active and Active-Passive Failover
0000000000000000000000000000000000000000;;		//    (http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-configuring-options.html)
0000000000000000000000000000000000000000;;		//    in the Amazon Route 53 Developer Guide.
0000000000000000000000000000000000000000;;		Weight *int64 `type:"long"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ResourceRecordSet) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ResourceRecordSet) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *ResourceRecordSet) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "ResourceRecordSet"}
0000000000000000000000000000000000000000;;		if s.Name == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Name"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Region != nil && len(*s.Region) < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("Region", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.ResourceRecords != nil && len(s.ResourceRecords) < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("ResourceRecords", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.SetIdentifier != nil && len(*s.SetIdentifier) < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("SetIdentifier", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.TrafficPolicyInstanceId != nil && len(*s.TrafficPolicyInstanceId) < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("TrafficPolicyInstanceId", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Type == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Type"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.AliasTarget != nil {
0000000000000000000000000000000000000000;;			if err := s.AliasTarget.Validate(); err != nil {
0000000000000000000000000000000000000000;;				invalidParams.AddNested("AliasTarget", err.(request.ErrInvalidParams))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.GeoLocation != nil {
0000000000000000000000000000000000000000;;			if err := s.GeoLocation.Validate(); err != nil {
0000000000000000000000000000000000000000;;				invalidParams.AddNested("GeoLocation", err.(request.ErrInvalidParams))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.ResourceRecords != nil {
0000000000000000000000000000000000000000;;			for i, v := range s.ResourceRecords {
0000000000000000000000000000000000000000;;				if v == nil {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if err := v.Validate(); err != nil {
0000000000000000000000000000000000000000;;					invalidParams.AddNested(fmt.Sprintf("%s[%v]", "ResourceRecords", i), err.(request.ErrInvalidParams))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAliasTarget sets the AliasTarget field's value.
0000000000000000000000000000000000000000;;	func (s *ResourceRecordSet) SetAliasTarget(v *AliasTarget) *ResourceRecordSet {
0000000000000000000000000000000000000000;;		s.AliasTarget = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFailover sets the Failover field's value.
0000000000000000000000000000000000000000;;	func (s *ResourceRecordSet) SetFailover(v string) *ResourceRecordSet {
0000000000000000000000000000000000000000;;		s.Failover = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGeoLocation sets the GeoLocation field's value.
0000000000000000000000000000000000000000;;	func (s *ResourceRecordSet) SetGeoLocation(v *GeoLocation) *ResourceRecordSet {
0000000000000000000000000000000000000000;;		s.GeoLocation = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHealthCheckId sets the HealthCheckId field's value.
0000000000000000000000000000000000000000;;	func (s *ResourceRecordSet) SetHealthCheckId(v string) *ResourceRecordSet {
0000000000000000000000000000000000000000;;		s.HealthCheckId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetName sets the Name field's value.
0000000000000000000000000000000000000000;;	func (s *ResourceRecordSet) SetName(v string) *ResourceRecordSet {
0000000000000000000000000000000000000000;;		s.Name = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRegion sets the Region field's value.
0000000000000000000000000000000000000000;;	func (s *ResourceRecordSet) SetRegion(v string) *ResourceRecordSet {
0000000000000000000000000000000000000000;;		s.Region = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetResourceRecords sets the ResourceRecords field's value.
0000000000000000000000000000000000000000;;	func (s *ResourceRecordSet) SetResourceRecords(v []*ResourceRecord) *ResourceRecordSet {
0000000000000000000000000000000000000000;;		s.ResourceRecords = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSetIdentifier sets the SetIdentifier field's value.
0000000000000000000000000000000000000000;;	func (s *ResourceRecordSet) SetSetIdentifier(v string) *ResourceRecordSet {
0000000000000000000000000000000000000000;;		s.SetIdentifier = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTTL sets the TTL field's value.
0000000000000000000000000000000000000000;;	func (s *ResourceRecordSet) SetTTL(v int64) *ResourceRecordSet {
0000000000000000000000000000000000000000;;		s.TTL = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTrafficPolicyInstanceId sets the TrafficPolicyInstanceId field's value.
0000000000000000000000000000000000000000;;	func (s *ResourceRecordSet) SetTrafficPolicyInstanceId(v string) *ResourceRecordSet {
0000000000000000000000000000000000000000;;		s.TrafficPolicyInstanceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetType sets the Type field's value.
0000000000000000000000000000000000000000;;	func (s *ResourceRecordSet) SetType(v string) *ResourceRecordSet {
0000000000000000000000000000000000000000;;		s.Type = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetWeight sets the Weight field's value.
0000000000000000000000000000000000000000;;	func (s *ResourceRecordSet) SetWeight(v int64) *ResourceRecordSet {
0000000000000000000000000000000000000000;;		s.Weight = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type containing a resource and its associated tags.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/ResourceTagSet
0000000000000000000000000000000000000000;;	type ResourceTagSet struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID for the specified resource.
0000000000000000000000000000000000000000;;		ResourceId *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The type of the resource.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * The resource type for health checks is healthcheck.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * The resource type for hosted zones is hostedzone.
0000000000000000000000000000000000000000;;		ResourceType *string `type:"string" enum:"TagResourceType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The tags associated with the specified resource.
0000000000000000000000000000000000000000;;		Tags []*Tag `locationNameList:"Tag" min:"1" type:"list"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s ResourceTagSet) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s ResourceTagSet) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetResourceId sets the ResourceId field's value.
0000000000000000000000000000000000000000;;	func (s *ResourceTagSet) SetResourceId(v string) *ResourceTagSet {
0000000000000000000000000000000000000000;;		s.ResourceId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetResourceType sets the ResourceType field's value.
0000000000000000000000000000000000000000;;	func (s *ResourceTagSet) SetResourceType(v string) *ResourceTagSet {
0000000000000000000000000000000000000000;;		s.ResourceType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTags sets the Tags field's value.
0000000000000000000000000000000000000000;;	func (s *ResourceTagSet) SetTags(v []*Tag) *ResourceTagSet {
0000000000000000000000000000000000000000;;		s.Tags = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains the status that one Amazon Route 53 health checker
0000000000000000000000000000000000000000;;	// reports and the time of the health check.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/StatusReport
0000000000000000000000000000000000000000;;	type StatusReport struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The time at which the health checker performed the health check in ISO 8601
0000000000000000000000000000000000000000;;		// format (https://en.wikipedia.org/wiki/ISO_8601) and Coordinated Universal
0000000000000000000000000000000000000000;;		// Time (UTC). For example, the value 2014-10-27T17:48:16.751Z represents October
0000000000000000000000000000000000000000;;		// 27, 2014 at 17:48:16.751 UTC.
0000000000000000000000000000000000000000;;		CheckedTime *time.Time `type:"timestamp" timestampFormat:"iso8601"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A description of the status of the health check endpoint as reported by one
0000000000000000000000000000000000000000;;		// of the Amazon Route 53 health checkers.
0000000000000000000000000000000000000000;;		Status *string `type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s StatusReport) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s StatusReport) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCheckedTime sets the CheckedTime field's value.
0000000000000000000000000000000000000000;;	func (s *StatusReport) SetCheckedTime(v time.Time) *StatusReport {
0000000000000000000000000000000000000000;;		s.CheckedTime = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetStatus sets the Status field's value.
0000000000000000000000000000000000000000;;	func (s *StatusReport) SetStatus(v string) *StatusReport {
0000000000000000000000000000000000000000;;		s.Status = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains information about a tag that you want to add
0000000000000000000000000000000000000000;;	// or edit for the specified health check or hosted zone.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/Tag
0000000000000000000000000000000000000000;;	type Tag struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The value of Key depends on the operation that you want to perform:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * Add a tag to a health check or hosted zone: Key is the name that you
0000000000000000000000000000000000000000;;		//    want to give the new tag.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * Edit a tag: Key is the name of the tag whose Value element you want
0000000000000000000000000000000000000000;;		//    to remove.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    *  Delete a key: Key is the name of the tag you want to remove.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * Give a name to a health check: Edit the default Name tag. In the Amazon
0000000000000000000000000000000000000000;;		//    Route 53 console, the list of your health checks includes a Name column
0000000000000000000000000000000000000000;;		//    that lets you see the name that you've given to each health check.
0000000000000000000000000000000000000000;;		Key *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The value of Value depends on the operation that you want to perform:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * Add a tag to a health check or hosted zone: Value is the value that
0000000000000000000000000000000000000000;;		//    you want to give the new tag.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * Edit a tag: Value is the new value that you want to assign the tag.
0000000000000000000000000000000000000000;;		Value *string `type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s Tag) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s Tag) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetKey sets the Key field's value.
0000000000000000000000000000000000000000;;	func (s *Tag) SetKey(v string) *Tag {
0000000000000000000000000000000000000000;;		s.Key = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetValue sets the Value field's value.
0000000000000000000000000000000000000000;;	func (s *Tag) SetValue(v string) *Tag {
0000000000000000000000000000000000000000;;		s.Value = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Gets the value that Amazon Route 53 returns in response to a DNS request
0000000000000000000000000000000000000000;;	// for a specified record name and type. You can optionally specify the IP address
0000000000000000000000000000000000000000;;	// of a DNS resolver, an EDNS0 client subnet IP address, and a subnet mask.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Parameters
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// hostedzoneidThe ID of the hosted zone that you want Amazon Route 53 to simulate
0000000000000000000000000000000000000000;;	// a query for.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// recordnameThe name of the resource record set that you want Amazon Route
0000000000000000000000000000000000000000;;	// 53 to simulate a query for.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// recordtypeThe type of the resource record set.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// resolverip (optional)If you want to simulate a request from a specific DNS
0000000000000000000000000000000000000000;;	// resolver, specify the IP address for that resolver. If you omit this value,
0000000000000000000000000000000000000000;;	// TestDNSAnswer uses the IP address of a DNS resolver in the AWS US East region.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// edns0clientsubnetip (optional)If the resolver that you specified for resolverip
0000000000000000000000000000000000000000;;	// supports EDNS0, specify the IP address of a client in the applicable location.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// edns0clientsubnetmask (optional)If you specify an IP address for edns0clientsubnetip,
0000000000000000000000000000000000000000;;	// you can optionally specify the number of bits of the IP address that you
0000000000000000000000000000000000000000;;	// want the checking tool to include in the DNS query. For example, if you specify
0000000000000000000000000000000000000000;;	// 192.0.2.44 for edns0clientsubnetip and 24 for edns0clientsubnetmask, the
0000000000000000000000000000000000000000;;	// checking tool will simulate a request from 192.0.2.0/24. The default value
0000000000000000000000000000000000000000;;	// is 24 bits.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/TestDNSAnswerRequest
0000000000000000000000000000000000000000;;	type TestDNSAnswerInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If the resolver that you specified for resolverip supports EDNS0, specify
0000000000000000000000000000000000000000;;		// the IP address of a client in the applicable location.
0000000000000000000000000000000000000000;;		EDNS0ClientSubnetIP *string `location:"querystring" locationName:"edns0clientsubnetip" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If you specify an IP address for edns0clientsubnetip, you can optionally
0000000000000000000000000000000000000000;;		// specify the number of bits of the IP address that you want the checking tool
0000000000000000000000000000000000000000;;		// to include in the DNS query. For example, if you specify 192.0.2.44 for edns0clientsubnetip
0000000000000000000000000000000000000000;;		// and 24 for edns0clientsubnetmask, the checking tool will simulate a request
0000000000000000000000000000000000000000;;		// from 192.0.2.0/24. The default value is 24 bits.
0000000000000000000000000000000000000000;;		EDNS0ClientSubnetMask *string `location:"querystring" locationName:"edns0clientsubnetmask" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the hosted zone that you want Amazon Route 53 to simulate a query
0000000000000000000000000000000000000000;;		// for.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// HostedZoneId is a required field
0000000000000000000000000000000000000000;;		HostedZoneId *string `location:"querystring" locationName:"hostedzoneid" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the resource record set that you want Amazon Route 53 to simulate
0000000000000000000000000000000000000000;;		// a query for.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// RecordName is a required field
0000000000000000000000000000000000000000;;		RecordName *string `location:"querystring" locationName:"recordname" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The type of the resource record set.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// RecordType is a required field
0000000000000000000000000000000000000000;;		RecordType *string `location:"querystring" locationName:"recordtype" type:"string" required:"true" enum:"RRType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If you want to simulate a request from a specific DNS resolver, specify the
0000000000000000000000000000000000000000;;		// IP address for that resolver. If you omit this value, TestDnsAnswer uses
0000000000000000000000000000000000000000;;		// the IP address of a DNS resolver in the AWS US East region.
0000000000000000000000000000000000000000;;		ResolverIP *string `location:"querystring" locationName:"resolverip" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s TestDNSAnswerInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s TestDNSAnswerInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *TestDNSAnswerInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "TestDNSAnswerInput"}
0000000000000000000000000000000000000000;;		if s.HostedZoneId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("HostedZoneId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.RecordName == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("RecordName"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.RecordType == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("RecordType"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEDNS0ClientSubnetIP sets the EDNS0ClientSubnetIP field's value.
0000000000000000000000000000000000000000;;	func (s *TestDNSAnswerInput) SetEDNS0ClientSubnetIP(v string) *TestDNSAnswerInput {
0000000000000000000000000000000000000000;;		s.EDNS0ClientSubnetIP = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEDNS0ClientSubnetMask sets the EDNS0ClientSubnetMask field's value.
0000000000000000000000000000000000000000;;	func (s *TestDNSAnswerInput) SetEDNS0ClientSubnetMask(v string) *TestDNSAnswerInput {
0000000000000000000000000000000000000000;;		s.EDNS0ClientSubnetMask = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHostedZoneId sets the HostedZoneId field's value.
0000000000000000000000000000000000000000;;	func (s *TestDNSAnswerInput) SetHostedZoneId(v string) *TestDNSAnswerInput {
0000000000000000000000000000000000000000;;		s.HostedZoneId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRecordName sets the RecordName field's value.
0000000000000000000000000000000000000000;;	func (s *TestDNSAnswerInput) SetRecordName(v string) *TestDNSAnswerInput {
0000000000000000000000000000000000000000;;		s.RecordName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRecordType sets the RecordType field's value.
0000000000000000000000000000000000000000;;	func (s *TestDNSAnswerInput) SetRecordType(v string) *TestDNSAnswerInput {
0000000000000000000000000000000000000000;;		s.RecordType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetResolverIP sets the ResolverIP field's value.
0000000000000000000000000000000000000000;;	func (s *TestDNSAnswerInput) SetResolverIP(v string) *TestDNSAnswerInput {
0000000000000000000000000000000000000000;;		s.ResolverIP = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains the response to a TestDNSAnswer request.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/TestDNSAnswerResponse
0000000000000000000000000000000000000000;;	type TestDNSAnswerOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Amazon Route 53 name server used to respond to the request.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Nameserver is a required field
0000000000000000000000000000000000000000;;		Nameserver *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The protocol that Amazon Route 53 used to respond to the request, either
0000000000000000000000000000000000000000;;		// UDP or TCP.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Protocol is a required field
0000000000000000000000000000000000000000;;		Protocol *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A list that contains values that Amazon Route 53 returned for this resource
0000000000000000000000000000000000000000;;		// record set.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// RecordData is a required field
0000000000000000000000000000000000000000;;		RecordData []*string `locationNameList:"RecordDataEntry" type:"list" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the resource record set that you submitted a request for.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// RecordName is a required field
0000000000000000000000000000000000000000;;		RecordName *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The type of the resource record set that you submitted a request for.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// RecordType is a required field
0000000000000000000000000000000000000000;;		RecordType *string `type:"string" required:"true" enum:"RRType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A code that indicates whether the request is valid or not. The most common
0000000000000000000000000000000000000000;;		// response code is NOERROR, meaning that the request is valid. If the response
0000000000000000000000000000000000000000;;		// is not valid, Amazon Route 53 returns a response code that describes the
0000000000000000000000000000000000000000;;		// error. For a list of possible response codes, see DNS RCODES (http://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-6)
0000000000000000000000000000000000000000;;		// on the IANA website.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// ResponseCode is a required field
0000000000000000000000000000000000000000;;		ResponseCode *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s TestDNSAnswerOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s TestDNSAnswerOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNameserver sets the Nameserver field's value.
0000000000000000000000000000000000000000;;	func (s *TestDNSAnswerOutput) SetNameserver(v string) *TestDNSAnswerOutput {
0000000000000000000000000000000000000000;;		s.Nameserver = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetProtocol sets the Protocol field's value.
0000000000000000000000000000000000000000;;	func (s *TestDNSAnswerOutput) SetProtocol(v string) *TestDNSAnswerOutput {
0000000000000000000000000000000000000000;;		s.Protocol = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRecordData sets the RecordData field's value.
0000000000000000000000000000000000000000;;	func (s *TestDNSAnswerOutput) SetRecordData(v []*string) *TestDNSAnswerOutput {
0000000000000000000000000000000000000000;;		s.RecordData = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRecordName sets the RecordName field's value.
0000000000000000000000000000000000000000;;	func (s *TestDNSAnswerOutput) SetRecordName(v string) *TestDNSAnswerOutput {
0000000000000000000000000000000000000000;;		s.RecordName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRecordType sets the RecordType field's value.
0000000000000000000000000000000000000000;;	func (s *TestDNSAnswerOutput) SetRecordType(v string) *TestDNSAnswerOutput {
0000000000000000000000000000000000000000;;		s.RecordType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetResponseCode sets the ResponseCode field's value.
0000000000000000000000000000000000000000;;	func (s *TestDNSAnswerOutput) SetResponseCode(v string) *TestDNSAnswerOutput {
0000000000000000000000000000000000000000;;		s.ResponseCode = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains settings for a traffic policy.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/TrafficPolicy
0000000000000000000000000000000000000000;;	type TrafficPolicy struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The comment that you specify in the CreateTrafficPolicy request, if any.
0000000000000000000000000000000000000000;;		Comment *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The definition of a traffic policy in JSON format. You specify the JSON document
0000000000000000000000000000000000000000;;		// to use for a new traffic policy in the CreateTrafficPolicy request. For more
0000000000000000000000000000000000000000;;		// information about the JSON format, see Traffic Policy Document Format (http://docs.aws.amazon.com/Route53/latest/APIReference/api-policies-traffic-policy-document-format.html).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Document is a required field
0000000000000000000000000000000000000000;;		Document *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID that Amazon Route 53 assigned to a traffic policy when you created
0000000000000000000000000000000000000000;;		// it.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Id is a required field
0000000000000000000000000000000000000000;;		Id *string `min:"1" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name that you specified when you created the traffic policy.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Name is a required field
0000000000000000000000000000000000000000;;		Name *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The DNS type of the resource record sets that Amazon Route 53 creates when
0000000000000000000000000000000000000000;;		// you use a traffic policy to create a traffic policy instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Type is a required field
0000000000000000000000000000000000000000;;		Type *string `type:"string" required:"true" enum:"RRType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The version number that Amazon Route 53 assigns to a traffic policy. For
0000000000000000000000000000000000000000;;		// a new traffic policy, the value of Version is always 1.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Version is a required field
0000000000000000000000000000000000000000;;		Version *int64 `min:"1" type:"integer" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s TrafficPolicy) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s TrafficPolicy) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetComment sets the Comment field's value.
0000000000000000000000000000000000000000;;	func (s *TrafficPolicy) SetComment(v string) *TrafficPolicy {
0000000000000000000000000000000000000000;;		s.Comment = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDocument sets the Document field's value.
0000000000000000000000000000000000000000;;	func (s *TrafficPolicy) SetDocument(v string) *TrafficPolicy {
0000000000000000000000000000000000000000;;		s.Document = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetId sets the Id field's value.
0000000000000000000000000000000000000000;;	func (s *TrafficPolicy) SetId(v string) *TrafficPolicy {
0000000000000000000000000000000000000000;;		s.Id = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetName sets the Name field's value.
0000000000000000000000000000000000000000;;	func (s *TrafficPolicy) SetName(v string) *TrafficPolicy {
0000000000000000000000000000000000000000;;		s.Name = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetType sets the Type field's value.
0000000000000000000000000000000000000000;;	func (s *TrafficPolicy) SetType(v string) *TrafficPolicy {
0000000000000000000000000000000000000000;;		s.Type = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVersion sets the Version field's value.
0000000000000000000000000000000000000000;;	func (s *TrafficPolicy) SetVersion(v int64) *TrafficPolicy {
0000000000000000000000000000000000000000;;		s.Version = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains settings for the new traffic policy instance.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/TrafficPolicyInstance
0000000000000000000000000000000000000000;;	type TrafficPolicyInstance struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the hosted zone that Amazon Route 53 created resource record sets
0000000000000000000000000000000000000000;;		// in.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// HostedZoneId is a required field
0000000000000000000000000000000000000000;;		HostedZoneId *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID that Amazon Route 53 assigned to the new traffic policy instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Id is a required field
0000000000000000000000000000000000000000;;		Id *string `min:"1" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If State is Failed, an explanation of the reason for the failure. If State
0000000000000000000000000000000000000000;;		// is another value, Message is empty.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Message is a required field
0000000000000000000000000000000000000000;;		Message *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The DNS name, such as www.example.com, for which Amazon Route 53 responds
0000000000000000000000000000000000000000;;		// to queries by using the resource record sets that are associated with this
0000000000000000000000000000000000000000;;		// traffic policy instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Name is a required field
0000000000000000000000000000000000000000;;		Name *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The value of State is one of the following values:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// AppliedAmazon Route 53 has finished creating resource record sets, and changes
0000000000000000000000000000000000000000;;		// have propagated to all Amazon Route 53 edge locations.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// CreatingAmazon Route 53 is creating the resource record sets. Use GetTrafficPolicyInstance
0000000000000000000000000000000000000000;;		// to confirm that the CreateTrafficPolicyInstance request completed successfully.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// FailedAmazon Route 53 wasn't able to create or update the resource record
0000000000000000000000000000000000000000;;		// sets. When the value of State is Failed, see Message for an explanation of
0000000000000000000000000000000000000000;;		// what caused the request to fail.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// State is a required field
0000000000000000000000000000000000000000;;		State *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The TTL that Amazon Route 53 assigned to all of the resource record sets
0000000000000000000000000000000000000000;;		// that it created in the specified hosted zone.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// TTL is a required field
0000000000000000000000000000000000000000;;		TTL *int64 `type:"long" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the traffic policy that Amazon Route 53 used to create resource
0000000000000000000000000000000000000000;;		// record sets in the specified hosted zone.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// TrafficPolicyId is a required field
0000000000000000000000000000000000000000;;		TrafficPolicyId *string `min:"1" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The DNS type that Amazon Route 53 assigned to all of the resource record
0000000000000000000000000000000000000000;;		// sets that it created for this traffic policy instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// TrafficPolicyType is a required field
0000000000000000000000000000000000000000;;		TrafficPolicyType *string `type:"string" required:"true" enum:"RRType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The version of the traffic policy that Amazon Route 53 used to create resource
0000000000000000000000000000000000000000;;		// record sets in the specified hosted zone.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// TrafficPolicyVersion is a required field
0000000000000000000000000000000000000000;;		TrafficPolicyVersion *int64 `min:"1" type:"integer" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s TrafficPolicyInstance) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s TrafficPolicyInstance) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHostedZoneId sets the HostedZoneId field's value.
0000000000000000000000000000000000000000;;	func (s *TrafficPolicyInstance) SetHostedZoneId(v string) *TrafficPolicyInstance {
0000000000000000000000000000000000000000;;		s.HostedZoneId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetId sets the Id field's value.
0000000000000000000000000000000000000000;;	func (s *TrafficPolicyInstance) SetId(v string) *TrafficPolicyInstance {
0000000000000000000000000000000000000000;;		s.Id = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMessage sets the Message field's value.
0000000000000000000000000000000000000000;;	func (s *TrafficPolicyInstance) SetMessage(v string) *TrafficPolicyInstance {
0000000000000000000000000000000000000000;;		s.Message = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetName sets the Name field's value.
0000000000000000000000000000000000000000;;	func (s *TrafficPolicyInstance) SetName(v string) *TrafficPolicyInstance {
0000000000000000000000000000000000000000;;		s.Name = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetState sets the State field's value.
0000000000000000000000000000000000000000;;	func (s *TrafficPolicyInstance) SetState(v string) *TrafficPolicyInstance {
0000000000000000000000000000000000000000;;		s.State = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTTL sets the TTL field's value.
0000000000000000000000000000000000000000;;	func (s *TrafficPolicyInstance) SetTTL(v int64) *TrafficPolicyInstance {
0000000000000000000000000000000000000000;;		s.TTL = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTrafficPolicyId sets the TrafficPolicyId field's value.
0000000000000000000000000000000000000000;;	func (s *TrafficPolicyInstance) SetTrafficPolicyId(v string) *TrafficPolicyInstance {
0000000000000000000000000000000000000000;;		s.TrafficPolicyId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTrafficPolicyType sets the TrafficPolicyType field's value.
0000000000000000000000000000000000000000;;	func (s *TrafficPolicyInstance) SetTrafficPolicyType(v string) *TrafficPolicyInstance {
0000000000000000000000000000000000000000;;		s.TrafficPolicyType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTrafficPolicyVersion sets the TrafficPolicyVersion field's value.
0000000000000000000000000000000000000000;;	func (s *TrafficPolicyInstance) SetTrafficPolicyVersion(v int64) *TrafficPolicyInstance {
0000000000000000000000000000000000000000;;		s.TrafficPolicyVersion = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains information about the latest version of one
0000000000000000000000000000000000000000;;	// traffic policy that is associated with the current AWS account.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/TrafficPolicySummary
0000000000000000000000000000000000000000;;	type TrafficPolicySummary struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID that Amazon Route 53 assigned to the traffic policy when you created
0000000000000000000000000000000000000000;;		// it.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Id is a required field
0000000000000000000000000000000000000000;;		Id *string `min:"1" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The version number of the latest version of the traffic policy.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// LatestVersion is a required field
0000000000000000000000000000000000000000;;		LatestVersion *int64 `min:"1" type:"integer" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name that you specified for the traffic policy when you created it.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Name is a required field
0000000000000000000000000000000000000000;;		Name *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of traffic policies that are associated with the current AWS account.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// TrafficPolicyCount is a required field
0000000000000000000000000000000000000000;;		TrafficPolicyCount *int64 `min:"1" type:"integer" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The DNS type of the resource record sets that Amazon Route 53 creates when
0000000000000000000000000000000000000000;;		// you use a traffic policy to create a traffic policy instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Type is a required field
0000000000000000000000000000000000000000;;		Type *string `type:"string" required:"true" enum:"RRType"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s TrafficPolicySummary) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s TrafficPolicySummary) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetId sets the Id field's value.
0000000000000000000000000000000000000000;;	func (s *TrafficPolicySummary) SetId(v string) *TrafficPolicySummary {
0000000000000000000000000000000000000000;;		s.Id = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetLatestVersion sets the LatestVersion field's value.
0000000000000000000000000000000000000000;;	func (s *TrafficPolicySummary) SetLatestVersion(v int64) *TrafficPolicySummary {
0000000000000000000000000000000000000000;;		s.LatestVersion = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetName sets the Name field's value.
0000000000000000000000000000000000000000;;	func (s *TrafficPolicySummary) SetName(v string) *TrafficPolicySummary {
0000000000000000000000000000000000000000;;		s.Name = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTrafficPolicyCount sets the TrafficPolicyCount field's value.
0000000000000000000000000000000000000000;;	func (s *TrafficPolicySummary) SetTrafficPolicyCount(v int64) *TrafficPolicySummary {
0000000000000000000000000000000000000000;;		s.TrafficPolicyCount = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetType sets the Type field's value.
0000000000000000000000000000000000000000;;	func (s *TrafficPolicySummary) SetType(v string) *TrafficPolicySummary {
0000000000000000000000000000000000000000;;		s.Type = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains the health check request information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/UpdateHealthCheckRequest
0000000000000000000000000000000000000000;;	type UpdateHealthCheckInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `locationName:"UpdateHealthCheckRequest" type:"structure" xmlURI:"https://route53.amazonaws.com/doc/2013-04-01/"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that identifies the CloudWatch alarm that you want Amazon
0000000000000000000000000000000000000000;;		// Route 53 health checkers to use to determine whether this health check is
0000000000000000000000000000000000000000;;		// healthy.
0000000000000000000000000000000000000000;;		AlarmIdentifier *AlarmIdentifier `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that contains one ChildHealthCheck element for each health
0000000000000000000000000000000000000000;;		// check that you want to associate with a CALCULATED health check.
0000000000000000000000000000000000000000;;		ChildHealthChecks []*string `locationNameList:"ChildHealthCheck" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Specify whether you want Amazon Route 53 to send the value of FullyQualifiedDomainName
0000000000000000000000000000000000000000;;		// to the endpoint in the client_hello message during TLS negotiation. This
0000000000000000000000000000000000000000;;		// allows the endpoint to respond to HTTPS health check requests with the applicable
0000000000000000000000000000000000000000;;		// SSL/TLS certificate.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Some endpoints require that HTTPS requests include the host name in the client_hello
0000000000000000000000000000000000000000;;		// message. If you don't enable SNI, the status of the health check will be
0000000000000000000000000000000000000000;;		// SSL alert handshake_failure. A health check can also have that status for
0000000000000000000000000000000000000000;;		// other reasons. If SNI is enabled and you're still getting the error, check
0000000000000000000000000000000000000000;;		// the SSL/TLS configuration on your endpoint and confirm that your certificate
0000000000000000000000000000000000000000;;		// is valid.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// The SSL/TLS certificate on your endpoint includes a domain name in the Common
0000000000000000000000000000000000000000;;		// Name field and possibly several more in the Subject Alternative Names field.
0000000000000000000000000000000000000000;;		// One of the domain names in the certificate should match the value that you
0000000000000000000000000000000000000000;;		// specify for FullyQualifiedDomainName. If the endpoint responds to the client_hello
0000000000000000000000000000000000000000;;		// message with a certificate that does not include the domain name that you
0000000000000000000000000000000000000000;;		// specified in FullyQualifiedDomainName, a health checker will retry the handshake.
0000000000000000000000000000000000000000;;		// In the second attempt, the health checker will omit FullyQualifiedDomainName
0000000000000000000000000000000000000000;;		// from the client_hello message.
0000000000000000000000000000000000000000;;		EnableSNI *bool `type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of consecutive health checks that an endpoint must pass or fail
0000000000000000000000000000000000000000;;		// for Amazon Route 53 to change the current status of the endpoint from unhealthy
0000000000000000000000000000000000000000;;		// to healthy or vice versa. For more information, see How Amazon Route 53 Determines
0000000000000000000000000000000000000000;;		// Whether an Endpoint Is Healthy (http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-determining-health-of-endpoints.html)
0000000000000000000000000000000000000000;;		// in the Amazon Route 53 Developer Guide.
0000000000000000000000000000000000000000;;		FailureThreshold *int64 `min:"1" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Amazon Route 53 behavior depends on whether you specify a value for IPAddress.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If a health check already has a value for IPAddress, you can change the value.
0000000000000000000000000000000000000000;;		// However, you can't update an existing health check to add or remove the value
0000000000000000000000000000000000000000;;		// of IPAddress.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If you specify a value forIPAddress:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Amazon Route 53 sends health check requests to the specified IPv4 or IPv6
0000000000000000000000000000000000000000;;		// address and passes the value of FullyQualifiedDomainName in the Host header
0000000000000000000000000000000000000000;;		// for all health checks except TCP health checks. This is typically the fully
0000000000000000000000000000000000000000;;		// qualified DNS name of the endpoint on which you want Amazon Route 53 to perform
0000000000000000000000000000000000000000;;		// health checks.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// When Amazon Route 53 checks the health of an endpoint, here is how it constructs
0000000000000000000000000000000000000000;;		// the Host header:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * If you specify a value of 80 for Port and HTTP or HTTP_STR_MATCH for
0000000000000000000000000000000000000000;;		//    Type, Amazon Route 53 passes the value of FullyQualifiedDomainName to
0000000000000000000000000000000000000000;;		//    the endpoint in the Host header.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * If you specify a value of 443 for Port and HTTPS or HTTPS_STR_MATCH
0000000000000000000000000000000000000000;;		//    for Type, Amazon Route 53 passes the value of FullyQualifiedDomainName
0000000000000000000000000000000000000000;;		//    to the endpoint in the Host header.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * If you specify another value for Port and any value except TCP for Type,
0000000000000000000000000000000000000000;;		//    Amazon Route 53 passes FullyQualifiedDomainName:Port to the endpoint in
0000000000000000000000000000000000000000;;		//    the Host header.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If you don't specify a value for FullyQualifiedDomainName, Amazon Route 53
0000000000000000000000000000000000000000;;		// substitutes the value of IPAddress in the Host header in each of the above
0000000000000000000000000000000000000000;;		// cases.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If you don't specify a value forIPAddress:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If you don't specify a value for IPAddress, Amazon Route 53 sends a DNS request
0000000000000000000000000000000000000000;;		// to the domain that you specify in FullyQualifiedDomainName at the interval
0000000000000000000000000000000000000000;;		// you specify in RequestInterval. Using an IPv4 address that is returned by
0000000000000000000000000000000000000000;;		// DNS, Amazon Route 53 then checks the health of the endpoint.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If you don't specify a value for IPAddress, Amazon Route 53 uses only IPv4
0000000000000000000000000000000000000000;;		// to send health checks to the endpoint. If there's no resource record set
0000000000000000000000000000000000000000;;		// with a type of A for the name that you specify for FullyQualifiedDomainName,
0000000000000000000000000000000000000000;;		// the health check fails with a "DNS resolution failed" error.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If you want to check the health of weighted, latency, or failover resource
0000000000000000000000000000000000000000;;		// record sets and you choose to specify the endpoint only by FullyQualifiedDomainName,
0000000000000000000000000000000000000000;;		// we recommend that you create a separate health check for each endpoint. For
0000000000000000000000000000000000000000;;		// example, create a health check for each HTTP server that is serving content
0000000000000000000000000000000000000000;;		// for www.example.com. For the value of FullyQualifiedDomainName, specify the
0000000000000000000000000000000000000000;;		// domain name of the server (such as us-east-1-www.example.com), not the name
0000000000000000000000000000000000000000;;		// of the resource record sets (www.example.com).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// In this configuration, if the value of FullyQualifiedDomainName matches the
0000000000000000000000000000000000000000;;		// name of the resource record sets and you then associate the health check
0000000000000000000000000000000000000000;;		// with those resource record sets, health check results will be unpredictable.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// In addition, if the value of Type is HTTP, HTTPS, HTTP_STR_MATCH, or HTTPS_STR_MATCH,
0000000000000000000000000000000000000000;;		// Amazon Route 53 passes the value of FullyQualifiedDomainName in the Host
0000000000000000000000000000000000000000;;		// header, as it does when you specify a value for IPAddress. If the value of
0000000000000000000000000000000000000000;;		// Type is TCP, Amazon Route 53 doesn't pass a Host header.
0000000000000000000000000000000000000000;;		FullyQualifiedDomainName *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID for the health check for which you want detailed information. When
0000000000000000000000000000000000000000;;		// you created the health check, CreateHealthCheck returned the ID in the response,
0000000000000000000000000000000000000000;;		// in the HealthCheckId element.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// HealthCheckId is a required field
0000000000000000000000000000000000000000;;		HealthCheckId *string `location:"uri" locationName:"HealthCheckId" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A sequential counter that Amazon Route 53 sets to 1 when you create a health
0000000000000000000000000000000000000000;;		// check and increments by 1 each time you update settings for the health check.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// We recommend that you use GetHealthCheck or ListHealthChecks to get the current
0000000000000000000000000000000000000000;;		// value of HealthCheckVersion for the health check that you want to update,
0000000000000000000000000000000000000000;;		// and that you include that value in your UpdateHealthCheck request. This prevents
0000000000000000000000000000000000000000;;		// Amazon Route 53 from overwriting an intervening update:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * f the value in the UpdateHealthCheck request matches the value of HealthCheckVersion
0000000000000000000000000000000000000000;;		//    in the health check, Amazon Route 53 updates the health check with the
0000000000000000000000000000000000000000;;		//    new settings.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * If the value of HealthCheckVersion in the health check is greater, the
0000000000000000000000000000000000000000;;		//    health check was changed after you got the version number. Amazon Route
0000000000000000000000000000000000000000;;		//    53 does not update the health check, and it returns a HealthCheckVersionMismatch
0000000000000000000000000000000000000000;;		//    error.
0000000000000000000000000000000000000000;;		HealthCheckVersion *int64 `min:"1" type:"long"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of child health checks that are associated with a CALCULATED health
0000000000000000000000000000000000000000;;		// that Amazon Route 53 must consider healthy for the CALCULATED health check
0000000000000000000000000000000000000000;;		// to be considered healthy. To specify the child health checks that you want
0000000000000000000000000000000000000000;;		// to associate with a CALCULATED health check, use the ChildHealthChecks and
0000000000000000000000000000000000000000;;		// ChildHealthCheck elements.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Note the following:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * If you specify a number greater than the number of child health checks,
0000000000000000000000000000000000000000;;		//    Amazon Route 53 always considers this health check to be unhealthy.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * If you specify 0, Amazon Route 53 always considers this health check
0000000000000000000000000000000000000000;;		//    to be healthy.
0000000000000000000000000000000000000000;;		HealthThreshold *int64 `type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The IPv4 or IPv6 IP address for the endpoint that you want Amazon Route 53
0000000000000000000000000000000000000000;;		// to perform health checks on. If you don't specify a value for IPAddress,
0000000000000000000000000000000000000000;;		// Amazon Route 53 sends a DNS request to resolve the domain name that you specify
0000000000000000000000000000000000000000;;		// in FullyQualifiedDomainName at the interval that you specify in RequestInterval.
0000000000000000000000000000000000000000;;		// Using an IP address that is returned by DNS, Amazon Route 53 then checks
0000000000000000000000000000000000000000;;		// the health of the endpoint.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If the endpoint is an EC2 instance, we recommend that you create an Elastic
0000000000000000000000000000000000000000;;		// IP address, associate it with your EC2 instance, and specify the Elastic
0000000000000000000000000000000000000000;;		// IP address for IPAddress. This ensures that the IP address of your instance
0000000000000000000000000000000000000000;;		// never changes. For more information, see Elastic IP Addresses (EIP) (http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html)
0000000000000000000000000000000000000000;;		// in the Amazon EC2 User Guide for Linux Instances.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If a health check already has a value for IPAddress, you can change the value.
0000000000000000000000000000000000000000;;		// However, you can't update an existing health check to add or remove the value
0000000000000000000000000000000000000000;;		// of IPAddress.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// For more information, see UpdateHealthCheckRequest$FullyQualifiedDomainName.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Constraints: Amazon Route 53 can't check the health of endpoints for which
0000000000000000000000000000000000000000;;		// the IP address is in local, private, non-routable, or multicast ranges. For
0000000000000000000000000000000000000000;;		// more information about IP addresses for which you can't create health checks,
0000000000000000000000000000000000000000;;		// see the following documents:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * RFC 5735, Special Use IPv4 Addresses (https://tools.ietf.org/html/rfc5735)
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * RFC 6598, IANA-Reserved IPv4 Prefix for Shared Address Space (https://tools.ietf.org/html/rfc6598)
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * RFC 5156, Special-Use IPv6 Addresses (https://tools.ietf.org/html/rfc5156)
0000000000000000000000000000000000000000;;		IPAddress *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// When CloudWatch has insufficient data about the metric to determine the alarm
0000000000000000000000000000000000000000;;		// state, the status that you want Amazon Route 53 to assign to the health check:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * Healthy: Amazon Route 53 considers the health check to be healthy.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * Unhealthy: Amazon Route 53 considers the health check to be unhealthy.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//    * LastKnownStatus: Amazon Route 53 uses the status of the health check
0000000000000000000000000000000000000000;;		//    from the last time CloudWatch had sufficient data to determine the alarm
0000000000000000000000000000000000000000;;		//    state. For new health checks that have no last known status, the default
0000000000000000000000000000000000000000;;		//    status for the health check is healthy.
0000000000000000000000000000000000000000;;		InsufficientDataHealthStatus *string `type:"string" enum:"InsufficientDataHealthStatus"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Specify whether you want Amazon Route 53 to invert the status of a health
0000000000000000000000000000000000000000;;		// check, for example, to consider a health check unhealthy when it otherwise
0000000000000000000000000000000000000000;;		// would be considered healthy.
0000000000000000000000000000000000000000;;		Inverted *bool `type:"boolean"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The port on the endpoint on which you want Amazon Route 53 to perform health
0000000000000000000000000000000000000000;;		// checks.
0000000000000000000000000000000000000000;;		Port *int64 `min:"1" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that contains one Region element for each region from which
0000000000000000000000000000000000000000;;		// you want Amazon Route 53 health checkers to check the specified endpoint.
0000000000000000000000000000000000000000;;		Regions []*string `locationNameList:"Region" min:"1" type:"list"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The path that you want Amazon Route 53 to request when performing health
0000000000000000000000000000000000000000;;		// checks. The path can be any value for which your endpoint will return an
0000000000000000000000000000000000000000;;		// HTTP status code of 2xx or 3xx when the endpoint is healthy, for example
0000000000000000000000000000000000000000;;		// the file /docs/route53-health-check.html.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Specify this value only if you want to change it.
0000000000000000000000000000000000000000;;		ResourcePath *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If the value of Type is HTTP_STR_MATCH or HTTP_STR_MATCH, the string that
0000000000000000000000000000000000000000;;		// you want Amazon Route 53 to search for in the response body from the specified
0000000000000000000000000000000000000000;;		// resource. If the string appears in the response body, Amazon Route 53 considers
0000000000000000000000000000000000000000;;		// the resource healthy. (You can't change the value of Type when you update
0000000000000000000000000000000000000000;;		// a health check.)
0000000000000000000000000000000000000000;;		SearchString *string `type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s UpdateHealthCheckInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s UpdateHealthCheckInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *UpdateHealthCheckInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "UpdateHealthCheckInput"}
0000000000000000000000000000000000000000;;		if s.FailureThreshold != nil && *s.FailureThreshold < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinValue("FailureThreshold", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.HealthCheckId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("HealthCheckId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.HealthCheckVersion != nil && *s.HealthCheckVersion < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinValue("HealthCheckVersion", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Port != nil && *s.Port < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinValue("Port", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Regions != nil && len(s.Regions) < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("Regions", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.AlarmIdentifier != nil {
0000000000000000000000000000000000000000;;			if err := s.AlarmIdentifier.Validate(); err != nil {
0000000000000000000000000000000000000000;;				invalidParams.AddNested("AlarmIdentifier", err.(request.ErrInvalidParams))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAlarmIdentifier sets the AlarmIdentifier field's value.
0000000000000000000000000000000000000000;;	func (s *UpdateHealthCheckInput) SetAlarmIdentifier(v *AlarmIdentifier) *UpdateHealthCheckInput {
0000000000000000000000000000000000000000;;		s.AlarmIdentifier = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetChildHealthChecks sets the ChildHealthChecks field's value.
0000000000000000000000000000000000000000;;	func (s *UpdateHealthCheckInput) SetChildHealthChecks(v []*string) *UpdateHealthCheckInput {
0000000000000000000000000000000000000000;;		s.ChildHealthChecks = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEnableSNI sets the EnableSNI field's value.
0000000000000000000000000000000000000000;;	func (s *UpdateHealthCheckInput) SetEnableSNI(v bool) *UpdateHealthCheckInput {
0000000000000000000000000000000000000000;;		s.EnableSNI = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFailureThreshold sets the FailureThreshold field's value.
0000000000000000000000000000000000000000;;	func (s *UpdateHealthCheckInput) SetFailureThreshold(v int64) *UpdateHealthCheckInput {
0000000000000000000000000000000000000000;;		s.FailureThreshold = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFullyQualifiedDomainName sets the FullyQualifiedDomainName field's value.
0000000000000000000000000000000000000000;;	func (s *UpdateHealthCheckInput) SetFullyQualifiedDomainName(v string) *UpdateHealthCheckInput {
0000000000000000000000000000000000000000;;		s.FullyQualifiedDomainName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHealthCheckId sets the HealthCheckId field's value.
0000000000000000000000000000000000000000;;	func (s *UpdateHealthCheckInput) SetHealthCheckId(v string) *UpdateHealthCheckInput {
0000000000000000000000000000000000000000;;		s.HealthCheckId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHealthCheckVersion sets the HealthCheckVersion field's value.
0000000000000000000000000000000000000000;;	func (s *UpdateHealthCheckInput) SetHealthCheckVersion(v int64) *UpdateHealthCheckInput {
0000000000000000000000000000000000000000;;		s.HealthCheckVersion = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHealthThreshold sets the HealthThreshold field's value.
0000000000000000000000000000000000000000;;	func (s *UpdateHealthCheckInput) SetHealthThreshold(v int64) *UpdateHealthCheckInput {
0000000000000000000000000000000000000000;;		s.HealthThreshold = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIPAddress sets the IPAddress field's value.
0000000000000000000000000000000000000000;;	func (s *UpdateHealthCheckInput) SetIPAddress(v string) *UpdateHealthCheckInput {
0000000000000000000000000000000000000000;;		s.IPAddress = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInsufficientDataHealthStatus sets the InsufficientDataHealthStatus field's value.
0000000000000000000000000000000000000000;;	func (s *UpdateHealthCheckInput) SetInsufficientDataHealthStatus(v string) *UpdateHealthCheckInput {
0000000000000000000000000000000000000000;;		s.InsufficientDataHealthStatus = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetInverted sets the Inverted field's value.
0000000000000000000000000000000000000000;;	func (s *UpdateHealthCheckInput) SetInverted(v bool) *UpdateHealthCheckInput {
0000000000000000000000000000000000000000;;		s.Inverted = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPort sets the Port field's value.
0000000000000000000000000000000000000000;;	func (s *UpdateHealthCheckInput) SetPort(v int64) *UpdateHealthCheckInput {
0000000000000000000000000000000000000000;;		s.Port = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRegions sets the Regions field's value.
0000000000000000000000000000000000000000;;	func (s *UpdateHealthCheckInput) SetRegions(v []*string) *UpdateHealthCheckInput {
0000000000000000000000000000000000000000;;		s.Regions = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetResourcePath sets the ResourcePath field's value.
0000000000000000000000000000000000000000;;	func (s *UpdateHealthCheckInput) SetResourcePath(v string) *UpdateHealthCheckInput {
0000000000000000000000000000000000000000;;		s.ResourcePath = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSearchString sets the SearchString field's value.
0000000000000000000000000000000000000000;;	func (s *UpdateHealthCheckInput) SetSearchString(v string) *UpdateHealthCheckInput {
0000000000000000000000000000000000000000;;		s.SearchString = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/UpdateHealthCheckResponse
0000000000000000000000000000000000000000;;	type UpdateHealthCheckOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that contains information about one health check that is associated
0000000000000000000000000000000000000000;;		// with the current AWS account.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// HealthCheck is a required field
0000000000000000000000000000000000000000;;		HealthCheck *HealthCheck `type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s UpdateHealthCheckOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s UpdateHealthCheckOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHealthCheck sets the HealthCheck field's value.
0000000000000000000000000000000000000000;;	func (s *UpdateHealthCheckOutput) SetHealthCheck(v *HealthCheck) *UpdateHealthCheckOutput {
0000000000000000000000000000000000000000;;		s.HealthCheck = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains the hosted zone request information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/UpdateHostedZoneCommentRequest
0000000000000000000000000000000000000000;;	type UpdateHostedZoneCommentInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `locationName:"UpdateHostedZoneCommentRequest" type:"structure" xmlURI:"https://route53.amazonaws.com/doc/2013-04-01/"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The new comment for the hosted zone. If you don't specify a value for Comment,
0000000000000000000000000000000000000000;;		// Amazon Route 53 deletes the existing value of the Comment element, if any.
0000000000000000000000000000000000000000;;		Comment *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID for the hosted zone for which you want to update the comment.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Id is a required field
0000000000000000000000000000000000000000;;		Id *string `location:"uri" locationName:"Id" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s UpdateHostedZoneCommentInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s UpdateHostedZoneCommentInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *UpdateHostedZoneCommentInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "UpdateHostedZoneCommentInput"}
0000000000000000000000000000000000000000;;		if s.Id == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Id"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetComment sets the Comment field's value.
0000000000000000000000000000000000000000;;	func (s *UpdateHostedZoneCommentInput) SetComment(v string) *UpdateHostedZoneCommentInput {
0000000000000000000000000000000000000000;;		s.Comment = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetId sets the Id field's value.
0000000000000000000000000000000000000000;;	func (s *UpdateHostedZoneCommentInput) SetId(v string) *UpdateHostedZoneCommentInput {
0000000000000000000000000000000000000000;;		s.Id = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains the response to the UpdateHostedZoneCommentRequest.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/UpdateHostedZoneCommentResponse
0000000000000000000000000000000000000000;;	type UpdateHostedZoneCommentOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that contains general information about the hosted zone.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// HostedZone is a required field
0000000000000000000000000000000000000000;;		HostedZone *HostedZone `type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s UpdateHostedZoneCommentOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s UpdateHostedZoneCommentOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHostedZone sets the HostedZone field's value.
0000000000000000000000000000000000000000;;	func (s *UpdateHostedZoneCommentOutput) SetHostedZone(v *HostedZone) *UpdateHostedZoneCommentOutput {
0000000000000000000000000000000000000000;;		s.HostedZone = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains information about the traffic policy for which
0000000000000000000000000000000000000000;;	// you want to update the comment.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/UpdateTrafficPolicyCommentRequest
0000000000000000000000000000000000000000;;	type UpdateTrafficPolicyCommentInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `locationName:"UpdateTrafficPolicyCommentRequest" type:"structure" xmlURI:"https://route53.amazonaws.com/doc/2013-04-01/"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The new comment for the specified traffic policy and version.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Comment is a required field
0000000000000000000000000000000000000000;;		Comment *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The value of Id for the traffic policy for which you want to update the comment.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Id is a required field
0000000000000000000000000000000000000000;;		Id *string `location:"uri" locationName:"Id" min:"1" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The value of Version for the traffic policy for which you want to update
0000000000000000000000000000000000000000;;		// the comment.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Version is a required field
0000000000000000000000000000000000000000;;		Version *int64 `location:"uri" locationName:"Version" min:"1" type:"integer" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s UpdateTrafficPolicyCommentInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s UpdateTrafficPolicyCommentInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *UpdateTrafficPolicyCommentInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "UpdateTrafficPolicyCommentInput"}
0000000000000000000000000000000000000000;;		if s.Comment == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Comment"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Id == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Id"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Id != nil && len(*s.Id) < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("Id", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Version == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Version"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Version != nil && *s.Version < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinValue("Version", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetComment sets the Comment field's value.
0000000000000000000000000000000000000000;;	func (s *UpdateTrafficPolicyCommentInput) SetComment(v string) *UpdateTrafficPolicyCommentInput {
0000000000000000000000000000000000000000;;		s.Comment = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetId sets the Id field's value.
0000000000000000000000000000000000000000;;	func (s *UpdateTrafficPolicyCommentInput) SetId(v string) *UpdateTrafficPolicyCommentInput {
0000000000000000000000000000000000000000;;		s.Id = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVersion sets the Version field's value.
0000000000000000000000000000000000000000;;	func (s *UpdateTrafficPolicyCommentInput) SetVersion(v int64) *UpdateTrafficPolicyCommentInput {
0000000000000000000000000000000000000000;;		s.Version = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains the response information for the traffic policy.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/UpdateTrafficPolicyCommentResponse
0000000000000000000000000000000000000000;;	type UpdateTrafficPolicyCommentOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that contains settings for the specified traffic policy.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// TrafficPolicy is a required field
0000000000000000000000000000000000000000;;		TrafficPolicy *TrafficPolicy `type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s UpdateTrafficPolicyCommentOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s UpdateTrafficPolicyCommentOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTrafficPolicy sets the TrafficPolicy field's value.
0000000000000000000000000000000000000000;;	func (s *UpdateTrafficPolicyCommentOutput) SetTrafficPolicy(v *TrafficPolicy) *UpdateTrafficPolicyCommentOutput {
0000000000000000000000000000000000000000;;		s.TrafficPolicy = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains information about the resource record sets that
0000000000000000000000000000000000000000;;	// you want to update based on a specified traffic policy instance.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/UpdateTrafficPolicyInstanceRequest
0000000000000000000000000000000000000000;;	type UpdateTrafficPolicyInstanceInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `locationName:"UpdateTrafficPolicyInstanceRequest" type:"structure" xmlURI:"https://route53.amazonaws.com/doc/2013-04-01/"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the traffic policy instance that you want to update.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Id is a required field
0000000000000000000000000000000000000000;;		Id *string `location:"uri" locationName:"Id" min:"1" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The TTL that you want Amazon Route 53 to assign to all of the updated resource
0000000000000000000000000000000000000000;;		// record sets.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// TTL is a required field
0000000000000000000000000000000000000000;;		TTL *int64 `type:"long" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of the traffic policy that you want Amazon Route 53 to use to update
0000000000000000000000000000000000000000;;		// resource record sets for the specified traffic policy instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// TrafficPolicyId is a required field
0000000000000000000000000000000000000000;;		TrafficPolicyId *string `min:"1" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The version of the traffic policy that you want Amazon Route 53 to use to
0000000000000000000000000000000000000000;;		// update resource record sets for the specified traffic policy instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// TrafficPolicyVersion is a required field
0000000000000000000000000000000000000000;;		TrafficPolicyVersion *int64 `min:"1" type:"integer" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s UpdateTrafficPolicyInstanceInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s UpdateTrafficPolicyInstanceInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *UpdateTrafficPolicyInstanceInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "UpdateTrafficPolicyInstanceInput"}
0000000000000000000000000000000000000000;;		if s.Id == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Id"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Id != nil && len(*s.Id) < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("Id", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.TTL == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("TTL"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.TrafficPolicyId == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("TrafficPolicyId"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.TrafficPolicyId != nil && len(*s.TrafficPolicyId) < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("TrafficPolicyId", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.TrafficPolicyVersion == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("TrafficPolicyVersion"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.TrafficPolicyVersion != nil && *s.TrafficPolicyVersion < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinValue("TrafficPolicyVersion", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetId sets the Id field's value.
0000000000000000000000000000000000000000;;	func (s *UpdateTrafficPolicyInstanceInput) SetId(v string) *UpdateTrafficPolicyInstanceInput {
0000000000000000000000000000000000000000;;		s.Id = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTTL sets the TTL field's value.
0000000000000000000000000000000000000000;;	func (s *UpdateTrafficPolicyInstanceInput) SetTTL(v int64) *UpdateTrafficPolicyInstanceInput {
0000000000000000000000000000000000000000;;		s.TTL = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTrafficPolicyId sets the TrafficPolicyId field's value.
0000000000000000000000000000000000000000;;	func (s *UpdateTrafficPolicyInstanceInput) SetTrafficPolicyId(v string) *UpdateTrafficPolicyInstanceInput {
0000000000000000000000000000000000000000;;		s.TrafficPolicyId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTrafficPolicyVersion sets the TrafficPolicyVersion field's value.
0000000000000000000000000000000000000000;;	func (s *UpdateTrafficPolicyInstanceInput) SetTrafficPolicyVersion(v int64) *UpdateTrafficPolicyInstanceInput {
0000000000000000000000000000000000000000;;		s.TrafficPolicyVersion = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains information about the resource record sets that
0000000000000000000000000000000000000000;;	// Amazon Route 53 created based on a specified traffic policy.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/UpdateTrafficPolicyInstanceResponse
0000000000000000000000000000000000000000;;	type UpdateTrafficPolicyInstanceOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A complex type that contains settings for the updated traffic policy instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// TrafficPolicyInstance is a required field
0000000000000000000000000000000000000000;;		TrafficPolicyInstance *TrafficPolicyInstance `type:"structure" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s UpdateTrafficPolicyInstanceOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s UpdateTrafficPolicyInstanceOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTrafficPolicyInstance sets the TrafficPolicyInstance field's value.
0000000000000000000000000000000000000000;;	func (s *UpdateTrafficPolicyInstanceOutput) SetTrafficPolicyInstance(v *TrafficPolicyInstance) *UpdateTrafficPolicyInstanceOutput {
0000000000000000000000000000000000000000;;		s.TrafficPolicyInstance = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A complex type that contains information about an Amazon VPC that is associated
0000000000000000000000000000000000000000;;	// with a private hosted zone.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/route53-2013-04-01/VPC
0000000000000000000000000000000000000000;;	type VPC struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ID of an Amazon VPC.
0000000000000000000000000000000000000000;;		VPCId *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The region in which you created the VPC that you want to associate with the
0000000000000000000000000000000000000000;;		// specified Amazon Route 53 hosted zone.
0000000000000000000000000000000000000000;;		VPCRegion *string `min:"1" type:"string" enum:"VPCRegion"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s VPC) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s VPC) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *VPC) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "VPC"}
0000000000000000000000000000000000000000;;		if s.VPCRegion != nil && len(*s.VPCRegion) < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("VPCRegion", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVPCId sets the VPCId field's value.
0000000000000000000000000000000000000000;;	func (s *VPC) SetVPCId(v string) *VPC {
0000000000000000000000000000000000000000;;		s.VPCId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetVPCRegion sets the VPCRegion field's value.
0000000000000000000000000000000000000000;;	func (s *VPC) SetVPCRegion(v string) *VPC {
0000000000000000000000000000000000000000;;		s.VPCRegion = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// ChangeActionCreate is a ChangeAction enum value
0000000000000000000000000000000000000000;;		ChangeActionCreate = "CREATE"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ChangeActionDelete is a ChangeAction enum value
0000000000000000000000000000000000000000;;		ChangeActionDelete = "DELETE"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ChangeActionUpsert is a ChangeAction enum value
0000000000000000000000000000000000000000;;		ChangeActionUpsert = "UPSERT"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// ChangeStatusPending is a ChangeStatus enum value
0000000000000000000000000000000000000000;;		ChangeStatusPending = "PENDING"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ChangeStatusInsync is a ChangeStatus enum value
0000000000000000000000000000000000000000;;		ChangeStatusInsync = "INSYNC"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// CloudWatchRegionUsEast1 is a CloudWatchRegion enum value
0000000000000000000000000000000000000000;;		CloudWatchRegionUsEast1 = "us-east-1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// CloudWatchRegionUsEast2 is a CloudWatchRegion enum value
0000000000000000000000000000000000000000;;		CloudWatchRegionUsEast2 = "us-east-2"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// CloudWatchRegionUsWest1 is a CloudWatchRegion enum value
0000000000000000000000000000000000000000;;		CloudWatchRegionUsWest1 = "us-west-1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// CloudWatchRegionUsWest2 is a CloudWatchRegion enum value
0000000000000000000000000000000000000000;;		CloudWatchRegionUsWest2 = "us-west-2"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// CloudWatchRegionEuCentral1 is a CloudWatchRegion enum value
0000000000000000000000000000000000000000;;		CloudWatchRegionEuCentral1 = "eu-central-1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// CloudWatchRegionEuWest1 is a CloudWatchRegion enum value
0000000000000000000000000000000000000000;;		CloudWatchRegionEuWest1 = "eu-west-1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// CloudWatchRegionApSouth1 is a CloudWatchRegion enum value
0000000000000000000000000000000000000000;;		CloudWatchRegionApSouth1 = "ap-south-1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// CloudWatchRegionApSoutheast1 is a CloudWatchRegion enum value
0000000000000000000000000000000000000000;;		CloudWatchRegionApSoutheast1 = "ap-southeast-1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// CloudWatchRegionApSoutheast2 is a CloudWatchRegion enum value
0000000000000000000000000000000000000000;;		CloudWatchRegionApSoutheast2 = "ap-southeast-2"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// CloudWatchRegionApNortheast1 is a CloudWatchRegion enum value
0000000000000000000000000000000000000000;;		CloudWatchRegionApNortheast1 = "ap-northeast-1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// CloudWatchRegionApNortheast2 is a CloudWatchRegion enum value
0000000000000000000000000000000000000000;;		CloudWatchRegionApNortheast2 = "ap-northeast-2"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// CloudWatchRegionSaEast1 is a CloudWatchRegion enum value
0000000000000000000000000000000000000000;;		CloudWatchRegionSaEast1 = "sa-east-1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// ComparisonOperatorGreaterThanOrEqualToThreshold is a ComparisonOperator enum value
0000000000000000000000000000000000000000;;		ComparisonOperatorGreaterThanOrEqualToThreshold = "GreaterThanOrEqualToThreshold"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ComparisonOperatorGreaterThanThreshold is a ComparisonOperator enum value
0000000000000000000000000000000000000000;;		ComparisonOperatorGreaterThanThreshold = "GreaterThanThreshold"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ComparisonOperatorLessThanThreshold is a ComparisonOperator enum value
0000000000000000000000000000000000000000;;		ComparisonOperatorLessThanThreshold = "LessThanThreshold"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ComparisonOperatorLessThanOrEqualToThreshold is a ComparisonOperator enum value
0000000000000000000000000000000000000000;;		ComparisonOperatorLessThanOrEqualToThreshold = "LessThanOrEqualToThreshold"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// An Amazon EC2 Region that you want Amazon Route 53 to use to perform health
0000000000000000000000000000000000000000;;	// checks.
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// HealthCheckRegionUsEast1 is a HealthCheckRegion enum value
0000000000000000000000000000000000000000;;		HealthCheckRegionUsEast1 = "us-east-1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// HealthCheckRegionUsWest1 is a HealthCheckRegion enum value
0000000000000000000000000000000000000000;;		HealthCheckRegionUsWest1 = "us-west-1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// HealthCheckRegionUsWest2 is a HealthCheckRegion enum value
0000000000000000000000000000000000000000;;		HealthCheckRegionUsWest2 = "us-west-2"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// HealthCheckRegionEuWest1 is a HealthCheckRegion enum value
0000000000000000000000000000000000000000;;		HealthCheckRegionEuWest1 = "eu-west-1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// HealthCheckRegionApSoutheast1 is a HealthCheckRegion enum value
0000000000000000000000000000000000000000;;		HealthCheckRegionApSoutheast1 = "ap-southeast-1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// HealthCheckRegionApSoutheast2 is a HealthCheckRegion enum value
0000000000000000000000000000000000000000;;		HealthCheckRegionApSoutheast2 = "ap-southeast-2"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// HealthCheckRegionApNortheast1 is a HealthCheckRegion enum value
0000000000000000000000000000000000000000;;		HealthCheckRegionApNortheast1 = "ap-northeast-1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// HealthCheckRegionSaEast1 is a HealthCheckRegion enum value
0000000000000000000000000000000000000000;;		HealthCheckRegionSaEast1 = "sa-east-1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// HealthCheckTypeHttp is a HealthCheckType enum value
0000000000000000000000000000000000000000;;		HealthCheckTypeHttp = "HTTP"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// HealthCheckTypeHttps is a HealthCheckType enum value
0000000000000000000000000000000000000000;;		HealthCheckTypeHttps = "HTTPS"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// HealthCheckTypeHttpStrMatch is a HealthCheckType enum value
0000000000000000000000000000000000000000;;		HealthCheckTypeHttpStrMatch = "HTTP_STR_MATCH"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// HealthCheckTypeHttpsStrMatch is a HealthCheckType enum value
0000000000000000000000000000000000000000;;		HealthCheckTypeHttpsStrMatch = "HTTPS_STR_MATCH"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// HealthCheckTypeTcp is a HealthCheckType enum value
0000000000000000000000000000000000000000;;		HealthCheckTypeTcp = "TCP"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// HealthCheckTypeCalculated is a HealthCheckType enum value
0000000000000000000000000000000000000000;;		HealthCheckTypeCalculated = "CALCULATED"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// HealthCheckTypeCloudwatchMetric is a HealthCheckType enum value
0000000000000000000000000000000000000000;;		HealthCheckTypeCloudwatchMetric = "CLOUDWATCH_METRIC"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// InsufficientDataHealthStatusHealthy is a InsufficientDataHealthStatus enum value
0000000000000000000000000000000000000000;;		InsufficientDataHealthStatusHealthy = "Healthy"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InsufficientDataHealthStatusUnhealthy is a InsufficientDataHealthStatus enum value
0000000000000000000000000000000000000000;;		InsufficientDataHealthStatusUnhealthy = "Unhealthy"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InsufficientDataHealthStatusLastKnownStatus is a InsufficientDataHealthStatus enum value
0000000000000000000000000000000000000000;;		InsufficientDataHealthStatusLastKnownStatus = "LastKnownStatus"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// RRTypeSoa is a RRType enum value
0000000000000000000000000000000000000000;;		RRTypeSoa = "SOA"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RRTypeA is a RRType enum value
0000000000000000000000000000000000000000;;		RRTypeA = "A"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RRTypeTxt is a RRType enum value
0000000000000000000000000000000000000000;;		RRTypeTxt = "TXT"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RRTypeNs is a RRType enum value
0000000000000000000000000000000000000000;;		RRTypeNs = "NS"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RRTypeCname is a RRType enum value
0000000000000000000000000000000000000000;;		RRTypeCname = "CNAME"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RRTypeMx is a RRType enum value
0000000000000000000000000000000000000000;;		RRTypeMx = "MX"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RRTypeNaptr is a RRType enum value
0000000000000000000000000000000000000000;;		RRTypeNaptr = "NAPTR"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RRTypePtr is a RRType enum value
0000000000000000000000000000000000000000;;		RRTypePtr = "PTR"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RRTypeSrv is a RRType enum value
0000000000000000000000000000000000000000;;		RRTypeSrv = "SRV"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RRTypeSpf is a RRType enum value
0000000000000000000000000000000000000000;;		RRTypeSpf = "SPF"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RRTypeAaaa is a RRType enum value
0000000000000000000000000000000000000000;;		RRTypeAaaa = "AAAA"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// ResourceRecordSetFailoverPrimary is a ResourceRecordSetFailover enum value
0000000000000000000000000000000000000000;;		ResourceRecordSetFailoverPrimary = "PRIMARY"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ResourceRecordSetFailoverSecondary is a ResourceRecordSetFailover enum value
0000000000000000000000000000000000000000;;		ResourceRecordSetFailoverSecondary = "SECONDARY"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// ResourceRecordSetRegionUsEast1 is a ResourceRecordSetRegion enum value
0000000000000000000000000000000000000000;;		ResourceRecordSetRegionUsEast1 = "us-east-1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ResourceRecordSetRegionUsEast2 is a ResourceRecordSetRegion enum value
0000000000000000000000000000000000000000;;		ResourceRecordSetRegionUsEast2 = "us-east-2"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ResourceRecordSetRegionUsWest1 is a ResourceRecordSetRegion enum value
0000000000000000000000000000000000000000;;		ResourceRecordSetRegionUsWest1 = "us-west-1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ResourceRecordSetRegionUsWest2 is a ResourceRecordSetRegion enum value
0000000000000000000000000000000000000000;;		ResourceRecordSetRegionUsWest2 = "us-west-2"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ResourceRecordSetRegionCaCentral1 is a ResourceRecordSetRegion enum value
0000000000000000000000000000000000000000;;		ResourceRecordSetRegionCaCentral1 = "ca-central-1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ResourceRecordSetRegionEuWest1 is a ResourceRecordSetRegion enum value
0000000000000000000000000000000000000000;;		ResourceRecordSetRegionEuWest1 = "eu-west-1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ResourceRecordSetRegionEuWest2 is a ResourceRecordSetRegion enum value
0000000000000000000000000000000000000000;;		ResourceRecordSetRegionEuWest2 = "eu-west-2"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ResourceRecordSetRegionEuCentral1 is a ResourceRecordSetRegion enum value
0000000000000000000000000000000000000000;;		ResourceRecordSetRegionEuCentral1 = "eu-central-1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ResourceRecordSetRegionApSoutheast1 is a ResourceRecordSetRegion enum value
0000000000000000000000000000000000000000;;		ResourceRecordSetRegionApSoutheast1 = "ap-southeast-1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ResourceRecordSetRegionApSoutheast2 is a ResourceRecordSetRegion enum value
0000000000000000000000000000000000000000;;		ResourceRecordSetRegionApSoutheast2 = "ap-southeast-2"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ResourceRecordSetRegionApNortheast1 is a ResourceRecordSetRegion enum value
0000000000000000000000000000000000000000;;		ResourceRecordSetRegionApNortheast1 = "ap-northeast-1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ResourceRecordSetRegionApNortheast2 is a ResourceRecordSetRegion enum value
0000000000000000000000000000000000000000;;		ResourceRecordSetRegionApNortheast2 = "ap-northeast-2"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ResourceRecordSetRegionSaEast1 is a ResourceRecordSetRegion enum value
0000000000000000000000000000000000000000;;		ResourceRecordSetRegionSaEast1 = "sa-east-1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ResourceRecordSetRegionCnNorth1 is a ResourceRecordSetRegion enum value
0000000000000000000000000000000000000000;;		ResourceRecordSetRegionCnNorth1 = "cn-north-1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ResourceRecordSetRegionApSouth1 is a ResourceRecordSetRegion enum value
0000000000000000000000000000000000000000;;		ResourceRecordSetRegionApSouth1 = "ap-south-1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// StatisticAverage is a Statistic enum value
0000000000000000000000000000000000000000;;		StatisticAverage = "Average"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// StatisticSum is a Statistic enum value
0000000000000000000000000000000000000000;;		StatisticSum = "Sum"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// StatisticSampleCount is a Statistic enum value
0000000000000000000000000000000000000000;;		StatisticSampleCount = "SampleCount"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// StatisticMaximum is a Statistic enum value
0000000000000000000000000000000000000000;;		StatisticMaximum = "Maximum"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// StatisticMinimum is a Statistic enum value
0000000000000000000000000000000000000000;;		StatisticMinimum = "Minimum"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// TagResourceTypeHealthcheck is a TagResourceType enum value
0000000000000000000000000000000000000000;;		TagResourceTypeHealthcheck = "healthcheck"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TagResourceTypeHostedzone is a TagResourceType enum value
0000000000000000000000000000000000000000;;		TagResourceTypeHostedzone = "hostedzone"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// VPCRegionUsEast1 is a VPCRegion enum value
0000000000000000000000000000000000000000;;		VPCRegionUsEast1 = "us-east-1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VPCRegionUsEast2 is a VPCRegion enum value
0000000000000000000000000000000000000000;;		VPCRegionUsEast2 = "us-east-2"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VPCRegionUsWest1 is a VPCRegion enum value
0000000000000000000000000000000000000000;;		VPCRegionUsWest1 = "us-west-1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VPCRegionUsWest2 is a VPCRegion enum value
0000000000000000000000000000000000000000;;		VPCRegionUsWest2 = "us-west-2"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VPCRegionEuWest1 is a VPCRegion enum value
0000000000000000000000000000000000000000;;		VPCRegionEuWest1 = "eu-west-1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VPCRegionEuWest2 is a VPCRegion enum value
0000000000000000000000000000000000000000;;		VPCRegionEuWest2 = "eu-west-2"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VPCRegionEuCentral1 is a VPCRegion enum value
0000000000000000000000000000000000000000;;		VPCRegionEuCentral1 = "eu-central-1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VPCRegionApSoutheast1 is a VPCRegion enum value
0000000000000000000000000000000000000000;;		VPCRegionApSoutheast1 = "ap-southeast-1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VPCRegionApSoutheast2 is a VPCRegion enum value
0000000000000000000000000000000000000000;;		VPCRegionApSoutheast2 = "ap-southeast-2"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VPCRegionApSouth1 is a VPCRegion enum value
0000000000000000000000000000000000000000;;		VPCRegionApSouth1 = "ap-south-1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VPCRegionApNortheast1 is a VPCRegion enum value
0000000000000000000000000000000000000000;;		VPCRegionApNortheast1 = "ap-northeast-1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VPCRegionApNortheast2 is a VPCRegion enum value
0000000000000000000000000000000000000000;;		VPCRegionApNortheast2 = "ap-northeast-2"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VPCRegionSaEast1 is a VPCRegion enum value
0000000000000000000000000000000000000000;;		VPCRegionSaEast1 = "sa-east-1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VPCRegionCaCentral1 is a VPCRegion enum value
0000000000000000000000000000000000000000;;		VPCRegionCaCentral1 = "ca-central-1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VPCRegionCnNorth1 is a VPCRegion enum value
0000000000000000000000000000000000000000;;		VPCRegionCnNorth1 = "cn-north-1"
0000000000000000000000000000000000000000;;	)
