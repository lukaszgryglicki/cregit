0000000000000000000000000000000000000000;;	package route53
7b662bd39f4f8ebe87658b72a7df9da9c5a74c80;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/xml"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/awserr"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/request"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/private/protocol/restxml"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type baseXMLErrorResponse struct {
0000000000000000000000000000000000000000;;		XMLName xml.Name
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type standardXMLErrorResponse struct {
0000000000000000000000000000000000000000;;		XMLName   xml.Name `xml:"ErrorResponse"`
0000000000000000000000000000000000000000;;		Code      string   `xml:"Error>Code"`
0000000000000000000000000000000000000000;;		Message   string   `xml:"Error>Message"`
0000000000000000000000000000000000000000;;		RequestID string   `xml:"RequestId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type invalidChangeBatchXMLErrorResponse struct {
0000000000000000000000000000000000000000;;		XMLName  xml.Name `xml:"InvalidChangeBatch"`
0000000000000000000000000000000000000000;;		Messages []string `xml:"Messages>Message"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func unmarshalChangeResourceRecordSetsError(r *request.Request) {
0000000000000000000000000000000000000000;;		defer r.HTTPResponse.Body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		responseBody, err := ioutil.ReadAll(r.HTTPResponse.Body)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.Error = awserr.New("SerializationError", "failed to read Route53 XML error response", err)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		baseError := &baseXMLErrorResponse{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := xml.Unmarshal(responseBody, baseError); err != nil {
0000000000000000000000000000000000000000;;			r.Error = awserr.New("SerializationError", "failed to decode Route53 XML error response", err)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch baseError.XMLName.Local {
0000000000000000000000000000000000000000;;		case "InvalidChangeBatch":
0000000000000000000000000000000000000000;;			unmarshalInvalidChangeBatchError(r, responseBody)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			r.HTTPResponse.Body = ioutil.NopCloser(bytes.NewReader(responseBody))
0000000000000000000000000000000000000000;;			restxml.UnmarshalError(r)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func unmarshalInvalidChangeBatchError(r *request.Request, requestBody []byte) {
0000000000000000000000000000000000000000;;		resp := &invalidChangeBatchXMLErrorResponse{}
0000000000000000000000000000000000000000;;		err := xml.Unmarshal(requestBody, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.Error = awserr.New("SerializationError", "failed to decode query XML error response", err)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		const errorCode = "InvalidChangeBatch"
0000000000000000000000000000000000000000;;		errors := []error{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, msg := range resp.Messages {
0000000000000000000000000000000000000000;;			errors = append(errors, awserr.New(errorCode, msg, nil))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r.Error = awserr.NewRequestFailure(
0000000000000000000000000000000000000000;;			awserr.NewBatchError(errorCode, "ChangeBatch errors occurred", errors),
0000000000000000000000000000000000000000;;			r.HTTPResponse.StatusCode,
0000000000000000000000000000000000000000;;			r.RequestID,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
