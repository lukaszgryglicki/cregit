0000000000000000000000000000000000000000;;	// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
7b662bd39f4f8ebe87658b72a7df9da9c5a74c80;;	
0000000000000000000000000000000000000000;;	// Package sts provides a client for AWS Security Token Service.
0000000000000000000000000000000000000000;;	package sts
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/awsutil"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/request"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opAssumeRole = "AssumeRole"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AssumeRoleRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the AssumeRole operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See AssumeRole for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the AssumeRole method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the AssumeRoleRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.AssumeRoleRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/sts-2011-06-15/AssumeRole
0000000000000000000000000000000000000000;;	func (c *STS) AssumeRoleRequest(input *AssumeRoleInput) (req *request.Request, output *AssumeRoleOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opAssumeRole,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &AssumeRoleInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &AssumeRoleOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AssumeRole API operation for AWS Security Token Service.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns a set of temporary security credentials (consisting of an access
0000000000000000000000000000000000000000;;	// key ID, a secret access key, and a security token) that you can use to access
0000000000000000000000000000000000000000;;	// AWS resources that you might not normally have access to. Typically, you
0000000000000000000000000000000000000000;;	// use AssumeRole for cross-account access or federation. For a comparison of
0000000000000000000000000000000000000000;;	// AssumeRole with the other APIs that produce temporary credentials, see Requesting
0000000000000000000000000000000000000000;;	// Temporary Security Credentials (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html)
0000000000000000000000000000000000000000;;	// and Comparing the AWS STS APIs (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#stsapi_comparison)
0000000000000000000000000000000000000000;;	// in the IAM User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Important: You cannot call AssumeRole by using AWS root account credentials;
0000000000000000000000000000000000000000;;	// access is denied. You must use credentials for an IAM user or an IAM role
0000000000000000000000000000000000000000;;	// to call AssumeRole.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For cross-account access, imagine that you own multiple accounts and need
0000000000000000000000000000000000000000;;	// to access resources in each account. You could create long-term credentials
0000000000000000000000000000000000000000;;	// in each account to access those resources. However, managing all those credentials
0000000000000000000000000000000000000000;;	// and remembering which one can access which account can be time consuming.
0000000000000000000000000000000000000000;;	// Instead, you can create one set of long-term credentials in one account and
0000000000000000000000000000000000000000;;	// then use temporary security credentials to access all the other accounts
0000000000000000000000000000000000000000;;	// by assuming roles in those accounts. For more information about roles, see
0000000000000000000000000000000000000000;;	// IAM Roles (Delegation and Federation) (http://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html)
0000000000000000000000000000000000000000;;	// in the IAM User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For federation, you can, for example, grant single sign-on access to the
0000000000000000000000000000000000000000;;	// AWS Management Console. If you already have an identity and authentication
0000000000000000000000000000000000000000;;	// system in your corporate network, you don't have to recreate user identities
0000000000000000000000000000000000000000;;	// in AWS in order to grant those user identities access to AWS. Instead, after
0000000000000000000000000000000000000000;;	// a user has been authenticated, you call AssumeRole (and specify the role
0000000000000000000000000000000000000000;;	// with the appropriate permissions) to get temporary security credentials for
0000000000000000000000000000000000000000;;	// that user. With those temporary security credentials, you construct a sign-in
0000000000000000000000000000000000000000;;	// URL that users can use to access the console. For more information, see Common
0000000000000000000000000000000000000000;;	// Scenarios for Temporary Credentials (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp.html#sts-introduction)
0000000000000000000000000000000000000000;;	// in the IAM User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The temporary security credentials are valid for the duration that you specified
0000000000000000000000000000000000000000;;	// when calling AssumeRole, which can be from 900 seconds (15 minutes) to a
0000000000000000000000000000000000000000;;	// maximum of 3600 seconds (1 hour). The default is 1 hour.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The temporary security credentials created by AssumeRole can be used to make
0000000000000000000000000000000000000000;;	// API calls to any AWS service with the following exception: you cannot call
0000000000000000000000000000000000000000;;	// the STS service's GetFederationToken or GetSessionToken APIs.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Optionally, you can pass an IAM access policy to this operation. If you choose
0000000000000000000000000000000000000000;;	// not to pass a policy, the temporary security credentials that are returned
0000000000000000000000000000000000000000;;	// by the operation have the permissions that are defined in the access policy
0000000000000000000000000000000000000000;;	// of the role that is being assumed. If you pass a policy to this operation,
0000000000000000000000000000000000000000;;	// the temporary security credentials that are returned by the operation have
0000000000000000000000000000000000000000;;	// the permissions that are allowed by both the access policy of the role that
0000000000000000000000000000000000000000;;	// is being assumed, and the policy that you pass. This gives you a way to further
0000000000000000000000000000000000000000;;	// restrict the permissions for the resulting temporary security credentials.
0000000000000000000000000000000000000000;;	// You cannot use the passed policy to grant permissions that are in excess
0000000000000000000000000000000000000000;;	// of those allowed by the access policy of the role that is being assumed.
0000000000000000000000000000000000000000;;	// For more information, see Permissions for AssumeRole, AssumeRoleWithSAML,
0000000000000000000000000000000000000000;;	// and AssumeRoleWithWebIdentity (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_control-access_assumerole.html)
0000000000000000000000000000000000000000;;	// in the IAM User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// To assume a role, your AWS account must be trusted by the role. The trust
0000000000000000000000000000000000000000;;	// relationship is defined in the role's trust policy when the role is created.
0000000000000000000000000000000000000000;;	// That trust policy states which accounts are allowed to delegate access to
0000000000000000000000000000000000000000;;	// this account's role.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The user who wants to access the role must also have permissions delegated
0000000000000000000000000000000000000000;;	// from the role's administrator. If the user is in a different account than
0000000000000000000000000000000000000000;;	// the role, then the user's administrator must attach a policy that allows
0000000000000000000000000000000000000000;;	// the user to call AssumeRole on the ARN of the role in the other account.
0000000000000000000000000000000000000000;;	// If the user is in the same account as the role, then you can either attach
0000000000000000000000000000000000000000;;	// a policy to the user (identical to the previous different account user),
0000000000000000000000000000000000000000;;	// or you can add the user as a principal directly in the role's trust policy
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Using MFA with AssumeRole
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// You can optionally include multi-factor authentication (MFA) information
0000000000000000000000000000000000000000;;	// when you call AssumeRole. This is useful for cross-account scenarios in which
0000000000000000000000000000000000000000;;	// you want to make sure that the user who is assuming the role has been authenticated
0000000000000000000000000000000000000000;;	// using an AWS MFA device. In that scenario, the trust policy of the role being
0000000000000000000000000000000000000000;;	// assumed includes a condition that tests for MFA authentication; if the caller
0000000000000000000000000000000000000000;;	// does not include valid MFA information, the request to assume the role is
0000000000000000000000000000000000000000;;	// denied. The condition in a trust policy that tests for MFA authentication
0000000000000000000000000000000000000000;;	// might look like the following example.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// "Condition": {"Bool": {"aws:MultiFactorAuthPresent": true}}
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information, see Configuring MFA-Protected API Access (http://docs.aws.amazon.com/IAM/latest/UserGuide/MFAProtectedAPI.html)
0000000000000000000000000000000000000000;;	// in the IAM User Guide guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// To use MFA with AssumeRole, you pass values for the SerialNumber and TokenCode
0000000000000000000000000000000000000000;;	// parameters. The SerialNumber value identifies the user's hardware or virtual
0000000000000000000000000000000000000000;;	// MFA device. The TokenCode is the time-based one-time password (TOTP) that
0000000000000000000000000000000000000000;;	// the MFA devices produces.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for AWS Security Token Service's
0000000000000000000000000000000000000000;;	// API operation AssumeRole for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * MalformedPolicyDocument
0000000000000000000000000000000000000000;;	//   The request was rejected because the policy document was malformed. The error
0000000000000000000000000000000000000000;;	//   message describes the specific error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * PackedPolicyTooLarge
0000000000000000000000000000000000000000;;	//   The request was rejected because the policy document was too large. The error
0000000000000000000000000000000000000000;;	//   message describes how big the policy document is, in packed form, as a percentage
0000000000000000000000000000000000000000;;	//   of what the API allows.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * RegionDisabledException
0000000000000000000000000000000000000000;;	//   STS is not activated in the requested region for the account that is being
0000000000000000000000000000000000000000;;	//   asked to generate credentials. The account administrator must use the IAM
0000000000000000000000000000000000000000;;	//   console to activate STS in that region. For more information, see Activating
0000000000000000000000000000000000000000;;	//   and Deactivating AWS STS in an AWS Region (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html)
0000000000000000000000000000000000000000;;	//   in the IAM User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/sts-2011-06-15/AssumeRole
0000000000000000000000000000000000000000;;	func (c *STS) AssumeRole(input *AssumeRoleInput) (*AssumeRoleOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.AssumeRoleRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opAssumeRoleWithSAML = "AssumeRoleWithSAML"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AssumeRoleWithSAMLRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the AssumeRoleWithSAML operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See AssumeRoleWithSAML for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the AssumeRoleWithSAML method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the AssumeRoleWithSAMLRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.AssumeRoleWithSAMLRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/sts-2011-06-15/AssumeRoleWithSAML
0000000000000000000000000000000000000000;;	func (c *STS) AssumeRoleWithSAMLRequest(input *AssumeRoleWithSAMLInput) (req *request.Request, output *AssumeRoleWithSAMLOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opAssumeRoleWithSAML,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &AssumeRoleWithSAMLInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &AssumeRoleWithSAMLOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AssumeRoleWithSAML API operation for AWS Security Token Service.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns a set of temporary security credentials for users who have been authenticated
0000000000000000000000000000000000000000;;	// via a SAML authentication response. This operation provides a mechanism for
0000000000000000000000000000000000000000;;	// tying an enterprise identity store or directory to role-based AWS access
0000000000000000000000000000000000000000;;	// without user-specific credentials or configuration. For a comparison of AssumeRoleWithSAML
0000000000000000000000000000000000000000;;	// with the other APIs that produce temporary credentials, see Requesting Temporary
0000000000000000000000000000000000000000;;	// Security Credentials (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html)
0000000000000000000000000000000000000000;;	// and Comparing the AWS STS APIs (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#stsapi_comparison)
0000000000000000000000000000000000000000;;	// in the IAM User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The temporary security credentials returned by this operation consist of
0000000000000000000000000000000000000000;;	// an access key ID, a secret access key, and a security token. Applications
0000000000000000000000000000000000000000;;	// can use these temporary security credentials to sign calls to AWS services.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The temporary security credentials are valid for the duration that you specified
0000000000000000000000000000000000000000;;	// when calling AssumeRole, or until the time specified in the SAML authentication
0000000000000000000000000000000000000000;;	// response's SessionNotOnOrAfter value, whichever is shorter. The duration
0000000000000000000000000000000000000000;;	// can be from 900 seconds (15 minutes) to a maximum of 3600 seconds (1 hour).
0000000000000000000000000000000000000000;;	// The default is 1 hour.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The temporary security credentials created by AssumeRoleWithSAML can be used
0000000000000000000000000000000000000000;;	// to make API calls to any AWS service with the following exception: you cannot
0000000000000000000000000000000000000000;;	// call the STS service's GetFederationToken or GetSessionToken APIs.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Optionally, you can pass an IAM access policy to this operation. If you choose
0000000000000000000000000000000000000000;;	// not to pass a policy, the temporary security credentials that are returned
0000000000000000000000000000000000000000;;	// by the operation have the permissions that are defined in the access policy
0000000000000000000000000000000000000000;;	// of the role that is being assumed. If you pass a policy to this operation,
0000000000000000000000000000000000000000;;	// the temporary security credentials that are returned by the operation have
0000000000000000000000000000000000000000;;	// the permissions that are allowed by the intersection of both the access policy
0000000000000000000000000000000000000000;;	// of the role that is being assumed, and the policy that you pass. This means
0000000000000000000000000000000000000000;;	// that both policies must grant the permission for the action to be allowed.
0000000000000000000000000000000000000000;;	// This gives you a way to further restrict the permissions for the resulting
0000000000000000000000000000000000000000;;	// temporary security credentials. You cannot use the passed policy to grant
0000000000000000000000000000000000000000;;	// permissions that are in excess of those allowed by the access policy of the
0000000000000000000000000000000000000000;;	// role that is being assumed. For more information, see Permissions for AssumeRole,
0000000000000000000000000000000000000000;;	// AssumeRoleWithSAML, and AssumeRoleWithWebIdentity (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_control-access_assumerole.html)
0000000000000000000000000000000000000000;;	// in the IAM User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Before your application can call AssumeRoleWithSAML, you must configure your
0000000000000000000000000000000000000000;;	// SAML identity provider (IdP) to issue the claims required by AWS. Additionally,
0000000000000000000000000000000000000000;;	// you must use AWS Identity and Access Management (IAM) to create a SAML provider
0000000000000000000000000000000000000000;;	// entity in your AWS account that represents your identity provider, and create
0000000000000000000000000000000000000000;;	// an IAM role that specifies this SAML provider in its trust policy.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Calling AssumeRoleWithSAML does not require the use of AWS security credentials.
0000000000000000000000000000000000000000;;	// The identity of the caller is validated by using keys in the metadata document
0000000000000000000000000000000000000000;;	// that is uploaded for the SAML provider entity for your identity provider.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Calling AssumeRoleWithSAML can result in an entry in your AWS CloudTrail
0000000000000000000000000000000000000000;;	// logs. The entry includes the value in the NameID element of the SAML assertion.
0000000000000000000000000000000000000000;;	// We recommend that you use a NameIDType that is not associated with any personally
0000000000000000000000000000000000000000;;	// identifiable information (PII). For example, you could instead use the Persistent
0000000000000000000000000000000000000000;;	// Identifier (urn:oasis:names:tc:SAML:2.0:nameid-format:persistent).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information, see the following resources:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * About SAML 2.0-based Federation (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html)
0000000000000000000000000000000000000000;;	//    in the IAM User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * Creating SAML Identity Providers (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_create_saml.html)
0000000000000000000000000000000000000000;;	//    in the IAM User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * Configuring a Relying Party and Claims (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_create_saml_relying-party.html)
0000000000000000000000000000000000000000;;	//    in the IAM User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * Creating a Role for SAML 2.0 Federation (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-idp_saml.html)
0000000000000000000000000000000000000000;;	//    in the IAM User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for AWS Security Token Service's
0000000000000000000000000000000000000000;;	// API operation AssumeRoleWithSAML for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * MalformedPolicyDocument
0000000000000000000000000000000000000000;;	//   The request was rejected because the policy document was malformed. The error
0000000000000000000000000000000000000000;;	//   message describes the specific error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * PackedPolicyTooLarge
0000000000000000000000000000000000000000;;	//   The request was rejected because the policy document was too large. The error
0000000000000000000000000000000000000000;;	//   message describes how big the policy document is, in packed form, as a percentage
0000000000000000000000000000000000000000;;	//   of what the API allows.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * IDPRejectedClaim
0000000000000000000000000000000000000000;;	//   The identity provider (IdP) reported that authentication failed. This might
0000000000000000000000000000000000000000;;	//   be because the claim is invalid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   If this error is returned for the AssumeRoleWithWebIdentity operation, it
0000000000000000000000000000000000000000;;	//   can also mean that the claim has expired or has been explicitly revoked.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * InvalidIdentityToken
0000000000000000000000000000000000000000;;	//   The web identity token that was passed could not be validated by AWS. Get
0000000000000000000000000000000000000000;;	//   a new identity token from the identity provider and then retry the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * ExpiredTokenException
0000000000000000000000000000000000000000;;	//   The web identity token that was passed is expired or is not valid. Get a
0000000000000000000000000000000000000000;;	//   new identity token from the identity provider and then retry the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * RegionDisabledException
0000000000000000000000000000000000000000;;	//   STS is not activated in the requested region for the account that is being
0000000000000000000000000000000000000000;;	//   asked to generate credentials. The account administrator must use the IAM
0000000000000000000000000000000000000000;;	//   console to activate STS in that region. For more information, see Activating
0000000000000000000000000000000000000000;;	//   and Deactivating AWS STS in an AWS Region (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html)
0000000000000000000000000000000000000000;;	//   in the IAM User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/sts-2011-06-15/AssumeRoleWithSAML
0000000000000000000000000000000000000000;;	func (c *STS) AssumeRoleWithSAML(input *AssumeRoleWithSAMLInput) (*AssumeRoleWithSAMLOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.AssumeRoleWithSAMLRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opAssumeRoleWithWebIdentity = "AssumeRoleWithWebIdentity"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AssumeRoleWithWebIdentityRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the AssumeRoleWithWebIdentity operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See AssumeRoleWithWebIdentity for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the AssumeRoleWithWebIdentity method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the AssumeRoleWithWebIdentityRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.AssumeRoleWithWebIdentityRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/sts-2011-06-15/AssumeRoleWithWebIdentity
0000000000000000000000000000000000000000;;	func (c *STS) AssumeRoleWithWebIdentityRequest(input *AssumeRoleWithWebIdentityInput) (req *request.Request, output *AssumeRoleWithWebIdentityOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opAssumeRoleWithWebIdentity,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &AssumeRoleWithWebIdentityInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &AssumeRoleWithWebIdentityOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AssumeRoleWithWebIdentity API operation for AWS Security Token Service.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns a set of temporary security credentials for users who have been authenticated
0000000000000000000000000000000000000000;;	// in a mobile or web application with a web identity provider, such as Amazon
0000000000000000000000000000000000000000;;	// Cognito, Login with Amazon, Facebook, Google, or any OpenID Connect-compatible
0000000000000000000000000000000000000000;;	// identity provider.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For mobile applications, we recommend that you use Amazon Cognito. You can
0000000000000000000000000000000000000000;;	// use Amazon Cognito with the AWS SDK for iOS (http://aws.amazon.com/sdkforios/)
0000000000000000000000000000000000000000;;	// and the AWS SDK for Android (http://aws.amazon.com/sdkforandroid/) to uniquely
0000000000000000000000000000000000000000;;	// identify a user and supply the user with a consistent identity throughout
0000000000000000000000000000000000000000;;	// the lifetime of an application.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// To learn more about Amazon Cognito, see Amazon Cognito Overview (http://docs.aws.amazon.com/mobile/sdkforandroid/developerguide/cognito-auth.html#d0e840)
0000000000000000000000000000000000000000;;	// in the AWS SDK for Android Developer Guide guide and Amazon Cognito Overview
0000000000000000000000000000000000000000;;	// (http://docs.aws.amazon.com/mobile/sdkforios/developerguide/cognito-auth.html#d0e664)
0000000000000000000000000000000000000000;;	// in the AWS SDK for iOS Developer Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Calling AssumeRoleWithWebIdentity does not require the use of AWS security
0000000000000000000000000000000000000000;;	// credentials. Therefore, you can distribute an application (for example, on
0000000000000000000000000000000000000000;;	// mobile devices) that requests temporary security credentials without including
0000000000000000000000000000000000000000;;	// long-term AWS credentials in the application, and without deploying server-based
0000000000000000000000000000000000000000;;	// proxy services that use long-term AWS credentials. Instead, the identity
0000000000000000000000000000000000000000;;	// of the caller is validated by using a token from the web identity provider.
0000000000000000000000000000000000000000;;	// For a comparison of AssumeRoleWithWebIdentity with the other APIs that produce
0000000000000000000000000000000000000000;;	// temporary credentials, see Requesting Temporary Security Credentials (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html)
0000000000000000000000000000000000000000;;	// and Comparing the AWS STS APIs (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#stsapi_comparison)
0000000000000000000000000000000000000000;;	// in the IAM User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The temporary security credentials returned by this API consist of an access
0000000000000000000000000000000000000000;;	// key ID, a secret access key, and a security token. Applications can use these
0000000000000000000000000000000000000000;;	// temporary security credentials to sign calls to AWS service APIs.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The credentials are valid for the duration that you specified when calling
0000000000000000000000000000000000000000;;	// AssumeRoleWithWebIdentity, which can be from 900 seconds (15 minutes) to
0000000000000000000000000000000000000000;;	// a maximum of 3600 seconds (1 hour). The default is 1 hour.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The temporary security credentials created by AssumeRoleWithWebIdentity can
0000000000000000000000000000000000000000;;	// be used to make API calls to any AWS service with the following exception:
0000000000000000000000000000000000000000;;	// you cannot call the STS service's GetFederationToken or GetSessionToken APIs.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Optionally, you can pass an IAM access policy to this operation. If you choose
0000000000000000000000000000000000000000;;	// not to pass a policy, the temporary security credentials that are returned
0000000000000000000000000000000000000000;;	// by the operation have the permissions that are defined in the access policy
0000000000000000000000000000000000000000;;	// of the role that is being assumed. If you pass a policy to this operation,
0000000000000000000000000000000000000000;;	// the temporary security credentials that are returned by the operation have
0000000000000000000000000000000000000000;;	// the permissions that are allowed by both the access policy of the role that
0000000000000000000000000000000000000000;;	// is being assumed, and the policy that you pass. This gives you a way to further
0000000000000000000000000000000000000000;;	// restrict the permissions for the resulting temporary security credentials.
0000000000000000000000000000000000000000;;	// You cannot use the passed policy to grant permissions that are in excess
0000000000000000000000000000000000000000;;	// of those allowed by the access policy of the role that is being assumed.
0000000000000000000000000000000000000000;;	// For more information, see Permissions for AssumeRole, AssumeRoleWithSAML,
0000000000000000000000000000000000000000;;	// and AssumeRoleWithWebIdentity (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_control-access_assumerole.html)
0000000000000000000000000000000000000000;;	// in the IAM User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Before your application can call AssumeRoleWithWebIdentity, you must have
0000000000000000000000000000000000000000;;	// an identity token from a supported identity provider and create a role that
0000000000000000000000000000000000000000;;	// the application can assume. The role that your application assumes must trust
0000000000000000000000000000000000000000;;	// the identity provider that is associated with the identity token. In other
0000000000000000000000000000000000000000;;	// words, the identity provider must be specified in the role's trust policy.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Calling AssumeRoleWithWebIdentity can result in an entry in your AWS CloudTrail
0000000000000000000000000000000000000000;;	// logs. The entry includes the Subject (http://openid.net/specs/openid-connect-core-1_0.html#Claims)
0000000000000000000000000000000000000000;;	// of the provided Web Identity Token. We recommend that you avoid using any
0000000000000000000000000000000000000000;;	// personally identifiable information (PII) in this field. For example, you
0000000000000000000000000000000000000000;;	// could instead use a GUID or a pairwise identifier, as suggested in the OIDC
0000000000000000000000000000000000000000;;	// specification (http://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information about how to use web identity federation and the AssumeRoleWithWebIdentity
0000000000000000000000000000000000000000;;	// API, see the following resources:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * Using Web Identity Federation APIs for Mobile Apps (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_oidc_manual.html)
0000000000000000000000000000000000000000;;	//    and Federation Through a Web-based Identity Provider (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#api_assumerolewithwebidentity).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    *  Web Identity Federation Playground (https://web-identity-federation-playground.s3.amazonaws.com/index.html).
0000000000000000000000000000000000000000;;	//    This interactive website lets you walk through the process of authenticating
0000000000000000000000000000000000000000;;	//    via Login with Amazon, Facebook, or Google, getting temporary security
0000000000000000000000000000000000000000;;	//    credentials, and then using those credentials to make a request to AWS.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * AWS SDK for iOS (http://aws.amazon.com/sdkforios/) and AWS SDK for Android
0000000000000000000000000000000000000000;;	//    (http://aws.amazon.com/sdkforandroid/). These toolkits contain sample
0000000000000000000000000000000000000000;;	//    apps that show how to invoke the identity providers, and then how to use
0000000000000000000000000000000000000000;;	//    the information from these providers to get and use temporary security
0000000000000000000000000000000000000000;;	//    credentials.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * Web Identity Federation with Mobile Applications (http://aws.amazon.com/articles/4617974389850313).
0000000000000000000000000000000000000000;;	//    This article discusses web identity federation and shows an example of
0000000000000000000000000000000000000000;;	//    how to use web identity federation to get access to content in Amazon
0000000000000000000000000000000000000000;;	//    S3.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for AWS Security Token Service's
0000000000000000000000000000000000000000;;	// API operation AssumeRoleWithWebIdentity for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * MalformedPolicyDocument
0000000000000000000000000000000000000000;;	//   The request was rejected because the policy document was malformed. The error
0000000000000000000000000000000000000000;;	//   message describes the specific error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * PackedPolicyTooLarge
0000000000000000000000000000000000000000;;	//   The request was rejected because the policy document was too large. The error
0000000000000000000000000000000000000000;;	//   message describes how big the policy document is, in packed form, as a percentage
0000000000000000000000000000000000000000;;	//   of what the API allows.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * IDPRejectedClaim
0000000000000000000000000000000000000000;;	//   The identity provider (IdP) reported that authentication failed. This might
0000000000000000000000000000000000000000;;	//   be because the claim is invalid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   If this error is returned for the AssumeRoleWithWebIdentity operation, it
0000000000000000000000000000000000000000;;	//   can also mean that the claim has expired or has been explicitly revoked.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * IDPCommunicationError
0000000000000000000000000000000000000000;;	//   The request could not be fulfilled because the non-AWS identity provider
0000000000000000000000000000000000000000;;	//   (IDP) that was asked to verify the incoming identity token could not be reached.
0000000000000000000000000000000000000000;;	//   This is often a transient error caused by network conditions. Retry the request
0000000000000000000000000000000000000000;;	//   a limited number of times so that you don't exceed the request rate. If the
0000000000000000000000000000000000000000;;	//   error persists, the non-AWS identity provider might be down or not responding.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * InvalidIdentityToken
0000000000000000000000000000000000000000;;	//   The web identity token that was passed could not be validated by AWS. Get
0000000000000000000000000000000000000000;;	//   a new identity token from the identity provider and then retry the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * ExpiredTokenException
0000000000000000000000000000000000000000;;	//   The web identity token that was passed is expired or is not valid. Get a
0000000000000000000000000000000000000000;;	//   new identity token from the identity provider and then retry the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * RegionDisabledException
0000000000000000000000000000000000000000;;	//   STS is not activated in the requested region for the account that is being
0000000000000000000000000000000000000000;;	//   asked to generate credentials. The account administrator must use the IAM
0000000000000000000000000000000000000000;;	//   console to activate STS in that region. For more information, see Activating
0000000000000000000000000000000000000000;;	//   and Deactivating AWS STS in an AWS Region (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html)
0000000000000000000000000000000000000000;;	//   in the IAM User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/sts-2011-06-15/AssumeRoleWithWebIdentity
0000000000000000000000000000000000000000;;	func (c *STS) AssumeRoleWithWebIdentity(input *AssumeRoleWithWebIdentityInput) (*AssumeRoleWithWebIdentityOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.AssumeRoleWithWebIdentityRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opDecodeAuthorizationMessage = "DecodeAuthorizationMessage"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DecodeAuthorizationMessageRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the DecodeAuthorizationMessage operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See DecodeAuthorizationMessage for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the DecodeAuthorizationMessage method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the DecodeAuthorizationMessageRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.DecodeAuthorizationMessageRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/sts-2011-06-15/DecodeAuthorizationMessage
0000000000000000000000000000000000000000;;	func (c *STS) DecodeAuthorizationMessageRequest(input *DecodeAuthorizationMessageInput) (req *request.Request, output *DecodeAuthorizationMessageOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opDecodeAuthorizationMessage,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &DecodeAuthorizationMessageInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &DecodeAuthorizationMessageOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DecodeAuthorizationMessage API operation for AWS Security Token Service.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Decodes additional information about the authorization status of a request
0000000000000000000000000000000000000000;;	// from an encoded message returned in response to an AWS request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For example, if a user is not authorized to perform an action that he or
0000000000000000000000000000000000000000;;	// she has requested, the request returns a Client.UnauthorizedOperation response
0000000000000000000000000000000000000000;;	// (an HTTP 403 response). Some AWS actions additionally return an encoded message
0000000000000000000000000000000000000000;;	// that can provide details about this authorization failure.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Only certain AWS actions return an encoded authorization message. The documentation
0000000000000000000000000000000000000000;;	// for an individual action indicates whether that action returns an encoded
0000000000000000000000000000000000000000;;	// message in addition to returning an HTTP code.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The message is encoded because the details of the authorization status can
0000000000000000000000000000000000000000;;	// constitute privileged information that the user who requested the action
0000000000000000000000000000000000000000;;	// should not see. To decode an authorization status message, a user must be
0000000000000000000000000000000000000000;;	// granted permissions via an IAM policy to request the DecodeAuthorizationMessage
0000000000000000000000000000000000000000;;	// (sts:DecodeAuthorizationMessage) action.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The decoded message includes the following type of information:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * Whether the request was denied due to an explicit deny or due to the
0000000000000000000000000000000000000000;;	//    absence of an explicit allow. For more information, see Determining Whether
0000000000000000000000000000000000000000;;	//    a Request is Allowed or Denied (http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-denyallow)
0000000000000000000000000000000000000000;;	//    in the IAM User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * The principal who made the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * The requested action.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * The requested resource.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * The values of condition keys in the context of the user's request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for AWS Security Token Service's
0000000000000000000000000000000000000000;;	// API operation DecodeAuthorizationMessage for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * InvalidAuthorizationMessageException
0000000000000000000000000000000000000000;;	//   The error returned if the message passed to DecodeAuthorizationMessage was
0000000000000000000000000000000000000000;;	//   invalid. This can happen if the token contains invalid characters, such as
0000000000000000000000000000000000000000;;	//   linebreaks.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/sts-2011-06-15/DecodeAuthorizationMessage
0000000000000000000000000000000000000000;;	func (c *STS) DecodeAuthorizationMessage(input *DecodeAuthorizationMessageInput) (*DecodeAuthorizationMessageOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.DecodeAuthorizationMessageRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opGetCallerIdentity = "GetCallerIdentity"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetCallerIdentityRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the GetCallerIdentity operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See GetCallerIdentity for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the GetCallerIdentity method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the GetCallerIdentityRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.GetCallerIdentityRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/sts-2011-06-15/GetCallerIdentity
0000000000000000000000000000000000000000;;	func (c *STS) GetCallerIdentityRequest(input *GetCallerIdentityInput) (req *request.Request, output *GetCallerIdentityOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opGetCallerIdentity,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &GetCallerIdentityInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &GetCallerIdentityOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetCallerIdentity API operation for AWS Security Token Service.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns details about the IAM identity whose credentials are used to call
0000000000000000000000000000000000000000;;	// the API.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for AWS Security Token Service's
0000000000000000000000000000000000000000;;	// API operation GetCallerIdentity for usage and error information.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/sts-2011-06-15/GetCallerIdentity
0000000000000000000000000000000000000000;;	func (c *STS) GetCallerIdentity(input *GetCallerIdentityInput) (*GetCallerIdentityOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.GetCallerIdentityRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opGetFederationToken = "GetFederationToken"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetFederationTokenRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the GetFederationToken operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See GetFederationToken for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the GetFederationToken method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the GetFederationTokenRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.GetFederationTokenRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/sts-2011-06-15/GetFederationToken
0000000000000000000000000000000000000000;;	func (c *STS) GetFederationTokenRequest(input *GetFederationTokenInput) (req *request.Request, output *GetFederationTokenOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opGetFederationToken,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &GetFederationTokenInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &GetFederationTokenOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetFederationToken API operation for AWS Security Token Service.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns a set of temporary security credentials (consisting of an access
0000000000000000000000000000000000000000;;	// key ID, a secret access key, and a security token) for a federated user.
0000000000000000000000000000000000000000;;	// A typical use is in a proxy application that gets temporary security credentials
0000000000000000000000000000000000000000;;	// on behalf of distributed applications inside a corporate network. Because
0000000000000000000000000000000000000000;;	// you must call the GetFederationToken action using the long-term security
0000000000000000000000000000000000000000;;	// credentials of an IAM user, this call is appropriate in contexts where those
0000000000000000000000000000000000000000;;	// credentials can be safely stored, usually in a server-based application.
0000000000000000000000000000000000000000;;	// For a comparison of GetFederationToken with the other APIs that produce temporary
0000000000000000000000000000000000000000;;	// credentials, see Requesting Temporary Security Credentials (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html)
0000000000000000000000000000000000000000;;	// and Comparing the AWS STS APIs (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#stsapi_comparison)
0000000000000000000000000000000000000000;;	// in the IAM User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If you are creating a mobile-based or browser-based app that can authenticate
0000000000000000000000000000000000000000;;	// users using a web identity provider like Login with Amazon, Facebook, Google,
0000000000000000000000000000000000000000;;	// or an OpenID Connect-compatible identity provider, we recommend that you
0000000000000000000000000000000000000000;;	// use Amazon Cognito (http://aws.amazon.com/cognito/) or AssumeRoleWithWebIdentity.
0000000000000000000000000000000000000000;;	// For more information, see Federation Through a Web-based Identity Provider
0000000000000000000000000000000000000000;;	// (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#api_assumerolewithwebidentity).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The GetFederationToken action must be called by using the long-term AWS security
0000000000000000000000000000000000000000;;	// credentials of an IAM user. You can also call GetFederationToken using the
0000000000000000000000000000000000000000;;	// security credentials of an AWS root account, but we do not recommended it.
0000000000000000000000000000000000000000;;	// Instead, we recommend that you create an IAM user for the purpose of the
0000000000000000000000000000000000000000;;	// proxy application and then attach a policy to the IAM user that limits federated
0000000000000000000000000000000000000000;;	// users to only the actions and resources that they need access to. For more
0000000000000000000000000000000000000000;;	// information, see IAM Best Practices (http://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html)
0000000000000000000000000000000000000000;;	// in the IAM User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The temporary security credentials that are obtained by using the long-term
0000000000000000000000000000000000000000;;	// credentials of an IAM user are valid for the specified duration, from 900
0000000000000000000000000000000000000000;;	// seconds (15 minutes) up to a maximium of 129600 seconds (36 hours). The default
0000000000000000000000000000000000000000;;	// is 43200 seconds (12 hours). Temporary credentials that are obtained by using
0000000000000000000000000000000000000000;;	// AWS root account credentials have a maximum duration of 3600 seconds (1 hour).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The temporary security credentials created by GetFederationToken can be used
0000000000000000000000000000000000000000;;	// to make API calls to any AWS service with the following exceptions:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * You cannot use these credentials to call any IAM APIs.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * You cannot call any STS APIs except GetCallerIdentity.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Permissions
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The permissions for the temporary security credentials returned by GetFederationToken
0000000000000000000000000000000000000000;;	// are determined by a combination of the following:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * The policy or policies that are attached to the IAM user whose credentials
0000000000000000000000000000000000000000;;	//    are used to call GetFederationToken.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * The policy that is passed as a parameter in the call.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The passed policy is attached to the temporary security credentials that
0000000000000000000000000000000000000000;;	// result from the GetFederationToken API call--that is, to the federated user.
0000000000000000000000000000000000000000;;	// When the federated user makes an AWS request, AWS evaluates the policy attached
0000000000000000000000000000000000000000;;	// to the federated user in combination with the policy or policies attached
0000000000000000000000000000000000000000;;	// to the IAM user whose credentials were used to call GetFederationToken. AWS
0000000000000000000000000000000000000000;;	// allows the federated user's request only when both the federated user and
0000000000000000000000000000000000000000;;	// the IAM user are explicitly allowed to perform the requested action. The
0000000000000000000000000000000000000000;;	// passed policy cannot grant more permissions than those that are defined in
0000000000000000000000000000000000000000;;	// the IAM user policy.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// A typical use case is that the permissions of the IAM user whose credentials
0000000000000000000000000000000000000000;;	// are used to call GetFederationToken are designed to allow access to all the
0000000000000000000000000000000000000000;;	// actions and resources that any federated user will need. Then, for individual
0000000000000000000000000000000000000000;;	// users, you pass a policy to the operation that scopes down the permissions
0000000000000000000000000000000000000000;;	// to a level that's appropriate to that individual user, using a policy that
0000000000000000000000000000000000000000;;	// allows only a subset of permissions that are granted to the IAM user.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If you do not pass a policy, the resulting temporary security credentials
0000000000000000000000000000000000000000;;	// have no effective permissions. The only exception is when the temporary security
0000000000000000000000000000000000000000;;	// credentials are used to access a resource that has a resource-based policy
0000000000000000000000000000000000000000;;	// that specifically allows the federated user to access the resource.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information about how permissions work, see Permissions for GetFederationToken
0000000000000000000000000000000000000000;;	// (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_control-access_getfederationtoken.html).
0000000000000000000000000000000000000000;;	// For information about using GetFederationToken to create temporary security
0000000000000000000000000000000000000000;;	// credentials, see GetFederationToken—Federation Through a Custom Identity
0000000000000000000000000000000000000000;;	// Broker (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#api_getfederationtoken).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for AWS Security Token Service's
0000000000000000000000000000000000000000;;	// API operation GetFederationToken for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * MalformedPolicyDocument
0000000000000000000000000000000000000000;;	//   The request was rejected because the policy document was malformed. The error
0000000000000000000000000000000000000000;;	//   message describes the specific error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * PackedPolicyTooLarge
0000000000000000000000000000000000000000;;	//   The request was rejected because the policy document was too large. The error
0000000000000000000000000000000000000000;;	//   message describes how big the policy document is, in packed form, as a percentage
0000000000000000000000000000000000000000;;	//   of what the API allows.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   * RegionDisabledException
0000000000000000000000000000000000000000;;	//   STS is not activated in the requested region for the account that is being
0000000000000000000000000000000000000000;;	//   asked to generate credentials. The account administrator must use the IAM
0000000000000000000000000000000000000000;;	//   console to activate STS in that region. For more information, see Activating
0000000000000000000000000000000000000000;;	//   and Deactivating AWS STS in an AWS Region (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html)
0000000000000000000000000000000000000000;;	//   in the IAM User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/sts-2011-06-15/GetFederationToken
0000000000000000000000000000000000000000;;	func (c *STS) GetFederationToken(input *GetFederationTokenInput) (*GetFederationTokenOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.GetFederationTokenRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const opGetSessionToken = "GetSessionToken"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetSessionTokenRequest generates a "aws/request.Request" representing the
0000000000000000000000000000000000000000;;	// client's request for the GetSessionToken operation. The "output" return
0000000000000000000000000000000000000000;;	// value can be used to capture response data after the request's "Send" method
0000000000000000000000000000000000000000;;	// is called.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See GetSessionToken for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Creating a request object using this method should be used when you want to inject
0000000000000000000000000000000000000000;;	// custom logic into the request's lifecycle using a custom handler, or if you want to
0000000000000000000000000000000000000000;;	// access properties on the request object before or after sending the request. If
0000000000000000000000000000000000000000;;	// you just want the service response, call the GetSessionToken method directly
0000000000000000000000000000000000000000;;	// instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: You must call the "Send" method on the returned request object in order
0000000000000000000000000000000000000000;;	// to execute the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    // Example sending a request using the GetSessionTokenRequest method.
0000000000000000000000000000000000000000;;	//    req, resp := client.GetSessionTokenRequest(params)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    err := req.Send()
0000000000000000000000000000000000000000;;	//    if err == nil { // resp is now filled
0000000000000000000000000000000000000000;;	//        fmt.Println(resp)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/sts-2011-06-15/GetSessionToken
0000000000000000000000000000000000000000;;	func (c *STS) GetSessionTokenRequest(input *GetSessionTokenInput) (req *request.Request, output *GetSessionTokenOutput) {
0000000000000000000000000000000000000000;;		op := &request.Operation{
0000000000000000000000000000000000000000;;			Name:       opGetSessionToken,
0000000000000000000000000000000000000000;;			HTTPMethod: "POST",
0000000000000000000000000000000000000000;;			HTTPPath:   "/",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if input == nil {
0000000000000000000000000000000000000000;;			input = &GetSessionTokenInput{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output = &GetSessionTokenOutput{}
0000000000000000000000000000000000000000;;		req = c.newRequest(op, input, output)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetSessionToken API operation for AWS Security Token Service.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns a set of temporary credentials for an AWS account or IAM user. The
0000000000000000000000000000000000000000;;	// credentials consist of an access key ID, a secret access key, and a security
0000000000000000000000000000000000000000;;	// token. Typically, you use GetSessionToken if you want to use MFA to protect
0000000000000000000000000000000000000000;;	// programmatic calls to specific AWS APIs like Amazon EC2 StopInstances. MFA-enabled
0000000000000000000000000000000000000000;;	// IAM users would need to call GetSessionToken and submit an MFA code that
0000000000000000000000000000000000000000;;	// is associated with their MFA device. Using the temporary security credentials
0000000000000000000000000000000000000000;;	// that are returned from the call, IAM users can then make programmatic calls
0000000000000000000000000000000000000000;;	// to APIs that require MFA authentication. If you do not supply a correct MFA
0000000000000000000000000000000000000000;;	// code, then the API returns an access denied error. For a comparison of GetSessionToken
0000000000000000000000000000000000000000;;	// with the other APIs that produce temporary credentials, see Requesting Temporary
0000000000000000000000000000000000000000;;	// Security Credentials (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html)
0000000000000000000000000000000000000000;;	// and Comparing the AWS STS APIs (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#stsapi_comparison)
0000000000000000000000000000000000000000;;	// in the IAM User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The GetSessionToken action must be called by using the long-term AWS security
0000000000000000000000000000000000000000;;	// credentials of the AWS account or an IAM user. Credentials that are created
0000000000000000000000000000000000000000;;	// by IAM users are valid for the duration that you specify, from 900 seconds
0000000000000000000000000000000000000000;;	// (15 minutes) up to a maximum of 129600 seconds (36 hours), with a default
0000000000000000000000000000000000000000;;	// of 43200 seconds (12 hours); credentials that are created by using account
0000000000000000000000000000000000000000;;	// credentials can range from 900 seconds (15 minutes) up to a maximum of 3600
0000000000000000000000000000000000000000;;	// seconds (1 hour), with a default of 1 hour.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The temporary security credentials created by GetSessionToken can be used
0000000000000000000000000000000000000000;;	// to make API calls to any AWS service with the following exceptions:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * You cannot call any IAM APIs unless MFA authentication information is
0000000000000000000000000000000000000000;;	//    included in the request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    * You cannot call any STS API exceptAssumeRole or GetCallerIdentity.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// We recommend that you do not call GetSessionToken with root account credentials.
0000000000000000000000000000000000000000;;	// Instead, follow our best practices (http://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#create-iam-users)
0000000000000000000000000000000000000000;;	// by creating one or more IAM users, giving them the necessary permissions,
0000000000000000000000000000000000000000;;	// and using IAM users for everyday interaction with AWS.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The permissions associated with the temporary security credentials returned
0000000000000000000000000000000000000000;;	// by GetSessionToken are based on the permissions associated with account or
0000000000000000000000000000000000000000;;	// IAM user whose credentials are used to call the action. If GetSessionToken
0000000000000000000000000000000000000000;;	// is called using root account credentials, the temporary credentials have
0000000000000000000000000000000000000000;;	// root account permissions. Similarly, if GetSessionToken is called using the
0000000000000000000000000000000000000000;;	// credentials of an IAM user, the temporary credentials have the same permissions
0000000000000000000000000000000000000000;;	// as the IAM user.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For more information about using GetSessionToken to create temporary credentials,
0000000000000000000000000000000000000000;;	// go to Temporary Credentials for Users in Untrusted Environments (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#api_getsessiontoken)
0000000000000000000000000000000000000000;;	// in the IAM User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
0000000000000000000000000000000000000000;;	// with awserr.Error's Code and Message methods to get detailed information about
0000000000000000000000000000000000000000;;	// the error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the AWS API reference guide for AWS Security Token Service's
0000000000000000000000000000000000000000;;	// API operation GetSessionToken for usage and error information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returned Error Codes:
0000000000000000000000000000000000000000;;	//   * RegionDisabledException
0000000000000000000000000000000000000000;;	//   STS is not activated in the requested region for the account that is being
0000000000000000000000000000000000000000;;	//   asked to generate credentials. The account administrator must use the IAM
0000000000000000000000000000000000000000;;	//   console to activate STS in that region. For more information, see Activating
0000000000000000000000000000000000000000;;	//   and Deactivating AWS STS in an AWS Region (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html)
0000000000000000000000000000000000000000;;	//   in the IAM User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/sts-2011-06-15/GetSessionToken
0000000000000000000000000000000000000000;;	func (c *STS) GetSessionToken(input *GetSessionTokenInput) (*GetSessionTokenOutput, error) {
0000000000000000000000000000000000000000;;		req, out := c.GetSessionTokenRequest(input)
0000000000000000000000000000000000000000;;		err := req.Send()
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/sts-2011-06-15/AssumeRoleRequest
0000000000000000000000000000000000000000;;	type AssumeRoleInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The duration, in seconds, of the role session. The value can range from 900
0000000000000000000000000000000000000000;;		// seconds (15 minutes) to 3600 seconds (1 hour). By default, the value is set
0000000000000000000000000000000000000000;;		// to 3600 seconds.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// This is separate from the duration of a console session that you might request
0000000000000000000000000000000000000000;;		// using the returned credentials. The request to the federation endpoint for
0000000000000000000000000000000000000000;;		// a console sign-in token takes a SessionDuration parameter that specifies
0000000000000000000000000000000000000000;;		// the maximum length of the console session, separately from the DurationSeconds
0000000000000000000000000000000000000000;;		// parameter on this API. For more information, see Creating a URL that Enables
0000000000000000000000000000000000000000;;		// Federated Users to Access the AWS Management Console (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-custom-url.html)
0000000000000000000000000000000000000000;;		// in the IAM User Guide.
0000000000000000000000000000000000000000;;		DurationSeconds *int64 `min:"900" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A unique identifier that is used by third parties when assuming roles in
0000000000000000000000000000000000000000;;		// their customers' accounts. For each role that the third party can assume,
0000000000000000000000000000000000000000;;		// they should instruct their customers to ensure the role's trust policy checks
0000000000000000000000000000000000000000;;		// for the external ID that the third party generated. Each time the third party
0000000000000000000000000000000000000000;;		// assumes the role, they should pass the customer's external ID. The external
0000000000000000000000000000000000000000;;		// ID is useful in order to help third parties bind a role to the customer who
0000000000000000000000000000000000000000;;		// created it. For more information about the external ID, see How to Use an
0000000000000000000000000000000000000000;;		// External ID When Granting Access to Your AWS Resources to a Third Party (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html)
0000000000000000000000000000000000000000;;		// in the IAM User Guide.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// The regex used to validated this parameter is a string of characters consisting
0000000000000000000000000000000000000000;;		// of upper- and lower-case alphanumeric characters with no spaces. You can
0000000000000000000000000000000000000000;;		// also include underscores or any of the following characters: =,.@:\/-
0000000000000000000000000000000000000000;;		ExternalId *string `min:"2" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// An IAM policy in JSON format.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// This parameter is optional. If you pass a policy, the temporary security
0000000000000000000000000000000000000000;;		// credentials that are returned by the operation have the permissions that
0000000000000000000000000000000000000000;;		// are allowed by both (the intersection of) the access policy of the role that
0000000000000000000000000000000000000000;;		// is being assumed, and the policy that you pass. This gives you a way to further
0000000000000000000000000000000000000000;;		// restrict the permissions for the resulting temporary security credentials.
0000000000000000000000000000000000000000;;		// You cannot use the passed policy to grant permissions that are in excess
0000000000000000000000000000000000000000;;		// of those allowed by the access policy of the role that is being assumed.
0000000000000000000000000000000000000000;;		// For more information, see Permissions for AssumeRole, AssumeRoleWithSAML,
0000000000000000000000000000000000000000;;		// and AssumeRoleWithWebIdentity (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_control-access_assumerole.html)
0000000000000000000000000000000000000000;;		// in the IAM User Guide.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// The format for this parameter, as described by its regex pattern, is a string
0000000000000000000000000000000000000000;;		// of characters up to 2048 characters in length. The characters can be any
0000000000000000000000000000000000000000;;		// ASCII character from the space character to the end of the valid character
0000000000000000000000000000000000000000;;		// list (\u0020-\u00FF). It can also include the tab (\u0009), linefeed (\u000A),
0000000000000000000000000000000000000000;;		// and carriage return (\u000D) characters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// The policy plain text must be 2048 bytes or shorter. However, an internal
0000000000000000000000000000000000000000;;		// conversion compresses it into a packed binary format with a separate limit.
0000000000000000000000000000000000000000;;		// The PackedPolicySize response element indicates by percentage how close to
0000000000000000000000000000000000000000;;		// the upper size limit the policy is, with 100% equaling the maximum allowed
0000000000000000000000000000000000000000;;		// size.
0000000000000000000000000000000000000000;;		Policy *string `min:"1" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Amazon Resource Name (ARN) of the role to assume.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// RoleArn is a required field
0000000000000000000000000000000000000000;;		RoleArn *string `min:"20" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// An identifier for the assumed role session.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Use the role session name to uniquely identify a session when the same role
0000000000000000000000000000000000000000;;		// is assumed by different principals or for different reasons. In cross-account
0000000000000000000000000000000000000000;;		// scenarios, the role session name is visible to, and can be logged by the
0000000000000000000000000000000000000000;;		// account that owns the role. The role session name is also used in the ARN
0000000000000000000000000000000000000000;;		// of the assumed role principal. This means that subsequent cross-account API
0000000000000000000000000000000000000000;;		// requests using the temporary security credentials will expose the role session
0000000000000000000000000000000000000000;;		// name to the external account in their CloudTrail logs.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// The regex used to validate this parameter is a string of characters consisting
0000000000000000000000000000000000000000;;		// of upper- and lower-case alphanumeric characters with no spaces. You can
0000000000000000000000000000000000000000;;		// also include underscores or any of the following characters: =,.@-
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// RoleSessionName is a required field
0000000000000000000000000000000000000000;;		RoleSessionName *string `min:"2" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The identification number of the MFA device that is associated with the user
0000000000000000000000000000000000000000;;		// who is making the AssumeRole call. Specify this value if the trust policy
0000000000000000000000000000000000000000;;		// of the role being assumed includes a condition that requires MFA authentication.
0000000000000000000000000000000000000000;;		// The value is either the serial number for a hardware device (such as GAHT12345678)
0000000000000000000000000000000000000000;;		// or an Amazon Resource Name (ARN) for a virtual device (such as arn:aws:iam::123456789012:mfa/user).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// The regex used to validate this parameter is a string of characters consisting
0000000000000000000000000000000000000000;;		// of upper- and lower-case alphanumeric characters with no spaces. You can
0000000000000000000000000000000000000000;;		// also include underscores or any of the following characters: =,.@-
0000000000000000000000000000000000000000;;		SerialNumber *string `min:"9" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The value provided by the MFA device, if the trust policy of the role being
0000000000000000000000000000000000000000;;		// assumed requires MFA (that is, if the policy includes a condition that tests
0000000000000000000000000000000000000000;;		// for MFA). If the role being assumed requires MFA and if the TokenCode value
0000000000000000000000000000000000000000;;		// is missing or expired, the AssumeRole call returns an "access denied" error.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// The format for this parameter, as described by its regex pattern, is a sequence
0000000000000000000000000000000000000000;;		// of six numeric digits.
0000000000000000000000000000000000000000;;		TokenCode *string `min:"6" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AssumeRoleInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AssumeRoleInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *AssumeRoleInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "AssumeRoleInput"}
0000000000000000000000000000000000000000;;		if s.DurationSeconds != nil && *s.DurationSeconds < 900 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinValue("DurationSeconds", 900))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.ExternalId != nil && len(*s.ExternalId) < 2 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("ExternalId", 2))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Policy != nil && len(*s.Policy) < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("Policy", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.RoleArn == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("RoleArn"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.RoleArn != nil && len(*s.RoleArn) < 20 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("RoleArn", 20))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.RoleSessionName == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("RoleSessionName"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.RoleSessionName != nil && len(*s.RoleSessionName) < 2 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("RoleSessionName", 2))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.SerialNumber != nil && len(*s.SerialNumber) < 9 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("SerialNumber", 9))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.TokenCode != nil && len(*s.TokenCode) < 6 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("TokenCode", 6))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDurationSeconds sets the DurationSeconds field's value.
0000000000000000000000000000000000000000;;	func (s *AssumeRoleInput) SetDurationSeconds(v int64) *AssumeRoleInput {
0000000000000000000000000000000000000000;;		s.DurationSeconds = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetExternalId sets the ExternalId field's value.
0000000000000000000000000000000000000000;;	func (s *AssumeRoleInput) SetExternalId(v string) *AssumeRoleInput {
0000000000000000000000000000000000000000;;		s.ExternalId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPolicy sets the Policy field's value.
0000000000000000000000000000000000000000;;	func (s *AssumeRoleInput) SetPolicy(v string) *AssumeRoleInput {
0000000000000000000000000000000000000000;;		s.Policy = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRoleArn sets the RoleArn field's value.
0000000000000000000000000000000000000000;;	func (s *AssumeRoleInput) SetRoleArn(v string) *AssumeRoleInput {
0000000000000000000000000000000000000000;;		s.RoleArn = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRoleSessionName sets the RoleSessionName field's value.
0000000000000000000000000000000000000000;;	func (s *AssumeRoleInput) SetRoleSessionName(v string) *AssumeRoleInput {
0000000000000000000000000000000000000000;;		s.RoleSessionName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSerialNumber sets the SerialNumber field's value.
0000000000000000000000000000000000000000;;	func (s *AssumeRoleInput) SetSerialNumber(v string) *AssumeRoleInput {
0000000000000000000000000000000000000000;;		s.SerialNumber = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTokenCode sets the TokenCode field's value.
0000000000000000000000000000000000000000;;	func (s *AssumeRoleInput) SetTokenCode(v string) *AssumeRoleInput {
0000000000000000000000000000000000000000;;		s.TokenCode = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the response to a successful AssumeRole request, including temporary
0000000000000000000000000000000000000000;;	// AWS credentials that can be used to make AWS requests.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/sts-2011-06-15/AssumeRoleResponse
0000000000000000000000000000000000000000;;	type AssumeRoleOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Amazon Resource Name (ARN) and the assumed role ID, which are identifiers
0000000000000000000000000000000000000000;;		// that you can use to refer to the resulting temporary security credentials.
0000000000000000000000000000000000000000;;		// For example, you can reference these credentials as a principal in a resource-based
0000000000000000000000000000000000000000;;		// policy by using the ARN or assumed role ID. The ARN and ID include the RoleSessionName
0000000000000000000000000000000000000000;;		// that you specified when you called AssumeRole.
0000000000000000000000000000000000000000;;		AssumedRoleUser *AssumedRoleUser `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The temporary security credentials, which include an access key ID, a secret
0000000000000000000000000000000000000000;;		// access key, and a security (or session) token.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Note: The size of the security token that STS APIs return is not fixed. We
0000000000000000000000000000000000000000;;		// strongly recommend that you make no assumptions about the maximum size. As
0000000000000000000000000000000000000000;;		// of this writing, the typical size is less than 4096 bytes, but that can vary.
0000000000000000000000000000000000000000;;		// Also, future updates to AWS might require larger sizes.
0000000000000000000000000000000000000000;;		Credentials *Credentials `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A percentage value that indicates the size of the policy in packed form.
0000000000000000000000000000000000000000;;		// The service rejects any policy with a packed size greater than 100 percent,
0000000000000000000000000000000000000000;;		// which means the policy exceeded the allowed space.
0000000000000000000000000000000000000000;;		PackedPolicySize *int64 `type:"integer"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AssumeRoleOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AssumeRoleOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAssumedRoleUser sets the AssumedRoleUser field's value.
0000000000000000000000000000000000000000;;	func (s *AssumeRoleOutput) SetAssumedRoleUser(v *AssumedRoleUser) *AssumeRoleOutput {
0000000000000000000000000000000000000000;;		s.AssumedRoleUser = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCredentials sets the Credentials field's value.
0000000000000000000000000000000000000000;;	func (s *AssumeRoleOutput) SetCredentials(v *Credentials) *AssumeRoleOutput {
0000000000000000000000000000000000000000;;		s.Credentials = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPackedPolicySize sets the PackedPolicySize field's value.
0000000000000000000000000000000000000000;;	func (s *AssumeRoleOutput) SetPackedPolicySize(v int64) *AssumeRoleOutput {
0000000000000000000000000000000000000000;;		s.PackedPolicySize = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/sts-2011-06-15/AssumeRoleWithSAMLRequest
0000000000000000000000000000000000000000;;	type AssumeRoleWithSAMLInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The duration, in seconds, of the role session. The value can range from 900
0000000000000000000000000000000000000000;;		// seconds (15 minutes) to 3600 seconds (1 hour). By default, the value is set
0000000000000000000000000000000000000000;;		// to 3600 seconds. An expiration can also be specified in the SAML authentication
0000000000000000000000000000000000000000;;		// response's SessionNotOnOrAfter value. The actual expiration time is whichever
0000000000000000000000000000000000000000;;		// value is shorter.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// This is separate from the duration of a console session that you might request
0000000000000000000000000000000000000000;;		// using the returned credentials. The request to the federation endpoint for
0000000000000000000000000000000000000000;;		// a console sign-in token takes a SessionDuration parameter that specifies
0000000000000000000000000000000000000000;;		// the maximum length of the console session, separately from the DurationSeconds
0000000000000000000000000000000000000000;;		// parameter on this API. For more information, see Enabling SAML 2.0 Federated
0000000000000000000000000000000000000000;;		// Users to Access the AWS Management Console (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html)
0000000000000000000000000000000000000000;;		// in the IAM User Guide.
0000000000000000000000000000000000000000;;		DurationSeconds *int64 `min:"900" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// An IAM policy in JSON format.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// The policy parameter is optional. If you pass a policy, the temporary security
0000000000000000000000000000000000000000;;		// credentials that are returned by the operation have the permissions that
0000000000000000000000000000000000000000;;		// are allowed by both the access policy of the role that is being assumed,
0000000000000000000000000000000000000000;;		// and the policy that you pass. This gives you a way to further restrict the
0000000000000000000000000000000000000000;;		// permissions for the resulting temporary security credentials. You cannot
0000000000000000000000000000000000000000;;		// use the passed policy to grant permissions that are in excess of those allowed
0000000000000000000000000000000000000000;;		// by the access policy of the role that is being assumed. For more information,
0000000000000000000000000000000000000000;;		// Permissions for AssumeRole, AssumeRoleWithSAML, and AssumeRoleWithWebIdentity
0000000000000000000000000000000000000000;;		// (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_control-access_assumerole.html)
0000000000000000000000000000000000000000;;		// in the IAM User Guide.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// The format for this parameter, as described by its regex pattern, is a string
0000000000000000000000000000000000000000;;		// of characters up to 2048 characters in length. The characters can be any
0000000000000000000000000000000000000000;;		// ASCII character from the space character to the end of the valid character
0000000000000000000000000000000000000000;;		// list (\u0020-\u00FF). It can also include the tab (\u0009), linefeed (\u000A),
0000000000000000000000000000000000000000;;		// and carriage return (\u000D) characters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// The policy plain text must be 2048 bytes or shorter. However, an internal
0000000000000000000000000000000000000000;;		// conversion compresses it into a packed binary format with a separate limit.
0000000000000000000000000000000000000000;;		// The PackedPolicySize response element indicates by percentage how close to
0000000000000000000000000000000000000000;;		// the upper size limit the policy is, with 100% equaling the maximum allowed
0000000000000000000000000000000000000000;;		// size.
0000000000000000000000000000000000000000;;		Policy *string `min:"1" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Amazon Resource Name (ARN) of the SAML provider in IAM that describes
0000000000000000000000000000000000000000;;		// the IdP.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// PrincipalArn is a required field
0000000000000000000000000000000000000000;;		PrincipalArn *string `min:"20" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Amazon Resource Name (ARN) of the role that the caller is assuming.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// RoleArn is a required field
0000000000000000000000000000000000000000;;		RoleArn *string `min:"20" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The base-64 encoded SAML authentication response provided by the IdP.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// For more information, see Configuring a Relying Party and Adding Claims (http://docs.aws.amazon.com/IAM/latest/UserGuide/create-role-saml-IdP-tasks.html)
0000000000000000000000000000000000000000;;		// in the Using IAM guide.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// SAMLAssertion is a required field
0000000000000000000000000000000000000000;;		SAMLAssertion *string `min:"4" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AssumeRoleWithSAMLInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AssumeRoleWithSAMLInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *AssumeRoleWithSAMLInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "AssumeRoleWithSAMLInput"}
0000000000000000000000000000000000000000;;		if s.DurationSeconds != nil && *s.DurationSeconds < 900 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinValue("DurationSeconds", 900))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Policy != nil && len(*s.Policy) < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("Policy", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.PrincipalArn == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("PrincipalArn"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.PrincipalArn != nil && len(*s.PrincipalArn) < 20 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("PrincipalArn", 20))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.RoleArn == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("RoleArn"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.RoleArn != nil && len(*s.RoleArn) < 20 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("RoleArn", 20))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.SAMLAssertion == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("SAMLAssertion"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.SAMLAssertion != nil && len(*s.SAMLAssertion) < 4 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("SAMLAssertion", 4))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDurationSeconds sets the DurationSeconds field's value.
0000000000000000000000000000000000000000;;	func (s *AssumeRoleWithSAMLInput) SetDurationSeconds(v int64) *AssumeRoleWithSAMLInput {
0000000000000000000000000000000000000000;;		s.DurationSeconds = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPolicy sets the Policy field's value.
0000000000000000000000000000000000000000;;	func (s *AssumeRoleWithSAMLInput) SetPolicy(v string) *AssumeRoleWithSAMLInput {
0000000000000000000000000000000000000000;;		s.Policy = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPrincipalArn sets the PrincipalArn field's value.
0000000000000000000000000000000000000000;;	func (s *AssumeRoleWithSAMLInput) SetPrincipalArn(v string) *AssumeRoleWithSAMLInput {
0000000000000000000000000000000000000000;;		s.PrincipalArn = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRoleArn sets the RoleArn field's value.
0000000000000000000000000000000000000000;;	func (s *AssumeRoleWithSAMLInput) SetRoleArn(v string) *AssumeRoleWithSAMLInput {
0000000000000000000000000000000000000000;;		s.RoleArn = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSAMLAssertion sets the SAMLAssertion field's value.
0000000000000000000000000000000000000000;;	func (s *AssumeRoleWithSAMLInput) SetSAMLAssertion(v string) *AssumeRoleWithSAMLInput {
0000000000000000000000000000000000000000;;		s.SAMLAssertion = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the response to a successful AssumeRoleWithSAML request, including
0000000000000000000000000000000000000000;;	// temporary AWS credentials that can be used to make AWS requests.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/sts-2011-06-15/AssumeRoleWithSAMLResponse
0000000000000000000000000000000000000000;;	type AssumeRoleWithSAMLOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The identifiers for the temporary security credentials that the operation
0000000000000000000000000000000000000000;;		// returns.
0000000000000000000000000000000000000000;;		AssumedRoleUser *AssumedRoleUser `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The value of the Recipient attribute of the SubjectConfirmationData element
0000000000000000000000000000000000000000;;		// of the SAML assertion.
0000000000000000000000000000000000000000;;		Audience *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The temporary security credentials, which include an access key ID, a secret
0000000000000000000000000000000000000000;;		// access key, and a security (or session) token.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Note: The size of the security token that STS APIs return is not fixed. We
0000000000000000000000000000000000000000;;		// strongly recommend that you make no assumptions about the maximum size. As
0000000000000000000000000000000000000000;;		// of this writing, the typical size is less than 4096 bytes, but that can vary.
0000000000000000000000000000000000000000;;		// Also, future updates to AWS might require larger sizes.
0000000000000000000000000000000000000000;;		Credentials *Credentials `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The value of the Issuer element of the SAML assertion.
0000000000000000000000000000000000000000;;		Issuer *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A hash value based on the concatenation of the Issuer response value, the
0000000000000000000000000000000000000000;;		// AWS account ID, and the friendly name (the last part of the ARN) of the SAML
0000000000000000000000000000000000000000;;		// provider in IAM. The combination of NameQualifier and Subject can be used
0000000000000000000000000000000000000000;;		// to uniquely identify a federated user.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// The following pseudocode shows how the hash value is calculated:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// BASE64 ( SHA1 ( "https://example.com/saml" + "123456789012" + "/MySAMLIdP"
0000000000000000000000000000000000000000;;		// ) )
0000000000000000000000000000000000000000;;		NameQualifier *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A percentage value that indicates the size of the policy in packed form.
0000000000000000000000000000000000000000;;		// The service rejects any policy with a packed size greater than 100 percent,
0000000000000000000000000000000000000000;;		// which means the policy exceeded the allowed space.
0000000000000000000000000000000000000000;;		PackedPolicySize *int64 `type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The value of the NameID element in the Subject element of the SAML assertion.
0000000000000000000000000000000000000000;;		Subject *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The format of the name ID, as defined by the Format attribute in the NameID
0000000000000000000000000000000000000000;;		// element of the SAML assertion. Typical examples of the format are transient
0000000000000000000000000000000000000000;;		// or persistent.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If the format includes the prefix urn:oasis:names:tc:SAML:2.0:nameid-format,
0000000000000000000000000000000000000000;;		// that prefix is removed. For example, urn:oasis:names:tc:SAML:2.0:nameid-format:transient
0000000000000000000000000000000000000000;;		// is returned as transient. If the format includes any other prefix, the format
0000000000000000000000000000000000000000;;		// is returned with no modifications.
0000000000000000000000000000000000000000;;		SubjectType *string `type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AssumeRoleWithSAMLOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AssumeRoleWithSAMLOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAssumedRoleUser sets the AssumedRoleUser field's value.
0000000000000000000000000000000000000000;;	func (s *AssumeRoleWithSAMLOutput) SetAssumedRoleUser(v *AssumedRoleUser) *AssumeRoleWithSAMLOutput {
0000000000000000000000000000000000000000;;		s.AssumedRoleUser = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAudience sets the Audience field's value.
0000000000000000000000000000000000000000;;	func (s *AssumeRoleWithSAMLOutput) SetAudience(v string) *AssumeRoleWithSAMLOutput {
0000000000000000000000000000000000000000;;		s.Audience = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCredentials sets the Credentials field's value.
0000000000000000000000000000000000000000;;	func (s *AssumeRoleWithSAMLOutput) SetCredentials(v *Credentials) *AssumeRoleWithSAMLOutput {
0000000000000000000000000000000000000000;;		s.Credentials = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIssuer sets the Issuer field's value.
0000000000000000000000000000000000000000;;	func (s *AssumeRoleWithSAMLOutput) SetIssuer(v string) *AssumeRoleWithSAMLOutput {
0000000000000000000000000000000000000000;;		s.Issuer = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNameQualifier sets the NameQualifier field's value.
0000000000000000000000000000000000000000;;	func (s *AssumeRoleWithSAMLOutput) SetNameQualifier(v string) *AssumeRoleWithSAMLOutput {
0000000000000000000000000000000000000000;;		s.NameQualifier = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPackedPolicySize sets the PackedPolicySize field's value.
0000000000000000000000000000000000000000;;	func (s *AssumeRoleWithSAMLOutput) SetPackedPolicySize(v int64) *AssumeRoleWithSAMLOutput {
0000000000000000000000000000000000000000;;		s.PackedPolicySize = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSubject sets the Subject field's value.
0000000000000000000000000000000000000000;;	func (s *AssumeRoleWithSAMLOutput) SetSubject(v string) *AssumeRoleWithSAMLOutput {
0000000000000000000000000000000000000000;;		s.Subject = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSubjectType sets the SubjectType field's value.
0000000000000000000000000000000000000000;;	func (s *AssumeRoleWithSAMLOutput) SetSubjectType(v string) *AssumeRoleWithSAMLOutput {
0000000000000000000000000000000000000000;;		s.SubjectType = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/sts-2011-06-15/AssumeRoleWithWebIdentityRequest
0000000000000000000000000000000000000000;;	type AssumeRoleWithWebIdentityInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The duration, in seconds, of the role session. The value can range from 900
0000000000000000000000000000000000000000;;		// seconds (15 minutes) to 3600 seconds (1 hour). By default, the value is set
0000000000000000000000000000000000000000;;		// to 3600 seconds.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// This is separate from the duration of a console session that you might request
0000000000000000000000000000000000000000;;		// using the returned credentials. The request to the federation endpoint for
0000000000000000000000000000000000000000;;		// a console sign-in token takes a SessionDuration parameter that specifies
0000000000000000000000000000000000000000;;		// the maximum length of the console session, separately from the DurationSeconds
0000000000000000000000000000000000000000;;		// parameter on this API. For more information, see Creating a URL that Enables
0000000000000000000000000000000000000000;;		// Federated Users to Access the AWS Management Console (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-custom-url.html)
0000000000000000000000000000000000000000;;		// in the IAM User Guide.
0000000000000000000000000000000000000000;;		DurationSeconds *int64 `min:"900" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// An IAM policy in JSON format.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// The policy parameter is optional. If you pass a policy, the temporary security
0000000000000000000000000000000000000000;;		// credentials that are returned by the operation have the permissions that
0000000000000000000000000000000000000000;;		// are allowed by both the access policy of the role that is being assumed,
0000000000000000000000000000000000000000;;		// and the policy that you pass. This gives you a way to further restrict the
0000000000000000000000000000000000000000;;		// permissions for the resulting temporary security credentials. You cannot
0000000000000000000000000000000000000000;;		// use the passed policy to grant permissions that are in excess of those allowed
0000000000000000000000000000000000000000;;		// by the access policy of the role that is being assumed. For more information,
0000000000000000000000000000000000000000;;		// see Permissions for AssumeRoleWithWebIdentity (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_control-access_assumerole.html)
0000000000000000000000000000000000000000;;		// in the IAM User Guide.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// The format for this parameter, as described by its regex pattern, is a string
0000000000000000000000000000000000000000;;		// of characters up to 2048 characters in length. The characters can be any
0000000000000000000000000000000000000000;;		// ASCII character from the space character to the end of the valid character
0000000000000000000000000000000000000000;;		// list (\u0020-\u00FF). It can also include the tab (\u0009), linefeed (\u000A),
0000000000000000000000000000000000000000;;		// and carriage return (\u000D) characters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// The policy plain text must be 2048 bytes or shorter. However, an internal
0000000000000000000000000000000000000000;;		// conversion compresses it into a packed binary format with a separate limit.
0000000000000000000000000000000000000000;;		// The PackedPolicySize response element indicates by percentage how close to
0000000000000000000000000000000000000000;;		// the upper size limit the policy is, with 100% equaling the maximum allowed
0000000000000000000000000000000000000000;;		// size.
0000000000000000000000000000000000000000;;		Policy *string `min:"1" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The fully qualified host component of the domain name of the identity provider.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Specify this value only for OAuth 2.0 access tokens. Currently www.amazon.com
0000000000000000000000000000000000000000;;		// and graph.facebook.com are the only supported identity providers for OAuth
0000000000000000000000000000000000000000;;		// 2.0 access tokens. Do not include URL schemes and port numbers.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Do not specify this value for OpenID Connect ID tokens.
0000000000000000000000000000000000000000;;		ProviderId *string `min:"4" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Amazon Resource Name (ARN) of the role that the caller is assuming.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// RoleArn is a required field
0000000000000000000000000000000000000000;;		RoleArn *string `min:"20" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// An identifier for the assumed role session. Typically, you pass the name
0000000000000000000000000000000000000000;;		// or identifier that is associated with the user who is using your application.
0000000000000000000000000000000000000000;;		// That way, the temporary security credentials that your application will use
0000000000000000000000000000000000000000;;		// are associated with that user. This session name is included as part of the
0000000000000000000000000000000000000000;;		// ARN and assumed role ID in the AssumedRoleUser response element.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// The regex used to validate this parameter is a string of characters consisting
0000000000000000000000000000000000000000;;		// of upper- and lower-case alphanumeric characters with no spaces. You can
0000000000000000000000000000000000000000;;		// also include underscores or any of the following characters: =,.@-
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// RoleSessionName is a required field
0000000000000000000000000000000000000000;;		RoleSessionName *string `min:"2" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The OAuth 2.0 access token or OpenID Connect ID token that is provided by
0000000000000000000000000000000000000000;;		// the identity provider. Your application must get this token by authenticating
0000000000000000000000000000000000000000;;		// the user who is using your application with a web identity provider before
0000000000000000000000000000000000000000;;		// the application makes an AssumeRoleWithWebIdentity call.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// WebIdentityToken is a required field
0000000000000000000000000000000000000000;;		WebIdentityToken *string `min:"4" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AssumeRoleWithWebIdentityInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AssumeRoleWithWebIdentityInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *AssumeRoleWithWebIdentityInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "AssumeRoleWithWebIdentityInput"}
0000000000000000000000000000000000000000;;		if s.DurationSeconds != nil && *s.DurationSeconds < 900 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinValue("DurationSeconds", 900))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Policy != nil && len(*s.Policy) < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("Policy", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.ProviderId != nil && len(*s.ProviderId) < 4 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("ProviderId", 4))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.RoleArn == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("RoleArn"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.RoleArn != nil && len(*s.RoleArn) < 20 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("RoleArn", 20))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.RoleSessionName == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("RoleSessionName"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.RoleSessionName != nil && len(*s.RoleSessionName) < 2 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("RoleSessionName", 2))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.WebIdentityToken == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("WebIdentityToken"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.WebIdentityToken != nil && len(*s.WebIdentityToken) < 4 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("WebIdentityToken", 4))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDurationSeconds sets the DurationSeconds field's value.
0000000000000000000000000000000000000000;;	func (s *AssumeRoleWithWebIdentityInput) SetDurationSeconds(v int64) *AssumeRoleWithWebIdentityInput {
0000000000000000000000000000000000000000;;		s.DurationSeconds = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPolicy sets the Policy field's value.
0000000000000000000000000000000000000000;;	func (s *AssumeRoleWithWebIdentityInput) SetPolicy(v string) *AssumeRoleWithWebIdentityInput {
0000000000000000000000000000000000000000;;		s.Policy = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetProviderId sets the ProviderId field's value.
0000000000000000000000000000000000000000;;	func (s *AssumeRoleWithWebIdentityInput) SetProviderId(v string) *AssumeRoleWithWebIdentityInput {
0000000000000000000000000000000000000000;;		s.ProviderId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRoleArn sets the RoleArn field's value.
0000000000000000000000000000000000000000;;	func (s *AssumeRoleWithWebIdentityInput) SetRoleArn(v string) *AssumeRoleWithWebIdentityInput {
0000000000000000000000000000000000000000;;		s.RoleArn = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRoleSessionName sets the RoleSessionName field's value.
0000000000000000000000000000000000000000;;	func (s *AssumeRoleWithWebIdentityInput) SetRoleSessionName(v string) *AssumeRoleWithWebIdentityInput {
0000000000000000000000000000000000000000;;		s.RoleSessionName = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetWebIdentityToken sets the WebIdentityToken field's value.
0000000000000000000000000000000000000000;;	func (s *AssumeRoleWithWebIdentityInput) SetWebIdentityToken(v string) *AssumeRoleWithWebIdentityInput {
0000000000000000000000000000000000000000;;		s.WebIdentityToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the response to a successful AssumeRoleWithWebIdentity request,
0000000000000000000000000000000000000000;;	// including temporary AWS credentials that can be used to make AWS requests.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/sts-2011-06-15/AssumeRoleWithWebIdentityResponse
0000000000000000000000000000000000000000;;	type AssumeRoleWithWebIdentityOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The Amazon Resource Name (ARN) and the assumed role ID, which are identifiers
0000000000000000000000000000000000000000;;		// that you can use to refer to the resulting temporary security credentials.
0000000000000000000000000000000000000000;;		// For example, you can reference these credentials as a principal in a resource-based
0000000000000000000000000000000000000000;;		// policy by using the ARN or assumed role ID. The ARN and ID include the RoleSessionName
0000000000000000000000000000000000000000;;		// that you specified when you called AssumeRole.
0000000000000000000000000000000000000000;;		AssumedRoleUser *AssumedRoleUser `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The intended audience (also known as client ID) of the web identity token.
0000000000000000000000000000000000000000;;		// This is traditionally the client identifier issued to the application that
0000000000000000000000000000000000000000;;		// requested the web identity token.
0000000000000000000000000000000000000000;;		Audience *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The temporary security credentials, which include an access key ID, a secret
0000000000000000000000000000000000000000;;		// access key, and a security token.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Note: The size of the security token that STS APIs return is not fixed. We
0000000000000000000000000000000000000000;;		// strongly recommend that you make no assumptions about the maximum size. As
0000000000000000000000000000000000000000;;		// of this writing, the typical size is less than 4096 bytes, but that can vary.
0000000000000000000000000000000000000000;;		// Also, future updates to AWS might require larger sizes.
0000000000000000000000000000000000000000;;		Credentials *Credentials `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A percentage value that indicates the size of the policy in packed form.
0000000000000000000000000000000000000000;;		// The service rejects any policy with a packed size greater than 100 percent,
0000000000000000000000000000000000000000;;		// which means the policy exceeded the allowed space.
0000000000000000000000000000000000000000;;		PackedPolicySize *int64 `type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The issuing authority of the web identity token presented. For OpenID Connect
0000000000000000000000000000000000000000;;		// ID Tokens this contains the value of the iss field. For OAuth 2.0 access
0000000000000000000000000000000000000000;;		// tokens, this contains the value of the ProviderId parameter that was passed
0000000000000000000000000000000000000000;;		// in the AssumeRoleWithWebIdentity request.
0000000000000000000000000000000000000000;;		Provider *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The unique user identifier that is returned by the identity provider. This
0000000000000000000000000000000000000000;;		// identifier is associated with the WebIdentityToken that was submitted with
0000000000000000000000000000000000000000;;		// the AssumeRoleWithWebIdentity call. The identifier is typically unique to
0000000000000000000000000000000000000000;;		// the user and the application that acquired the WebIdentityToken (pairwise
0000000000000000000000000000000000000000;;		// identifier). For OpenID Connect ID tokens, this field contains the value
0000000000000000000000000000000000000000;;		// returned by the identity provider as the token's sub (Subject) claim.
0000000000000000000000000000000000000000;;		SubjectFromWebIdentityToken *string `min:"6" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AssumeRoleWithWebIdentityOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AssumeRoleWithWebIdentityOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAssumedRoleUser sets the AssumedRoleUser field's value.
0000000000000000000000000000000000000000;;	func (s *AssumeRoleWithWebIdentityOutput) SetAssumedRoleUser(v *AssumedRoleUser) *AssumeRoleWithWebIdentityOutput {
0000000000000000000000000000000000000000;;		s.AssumedRoleUser = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAudience sets the Audience field's value.
0000000000000000000000000000000000000000;;	func (s *AssumeRoleWithWebIdentityOutput) SetAudience(v string) *AssumeRoleWithWebIdentityOutput {
0000000000000000000000000000000000000000;;		s.Audience = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCredentials sets the Credentials field's value.
0000000000000000000000000000000000000000;;	func (s *AssumeRoleWithWebIdentityOutput) SetCredentials(v *Credentials) *AssumeRoleWithWebIdentityOutput {
0000000000000000000000000000000000000000;;		s.Credentials = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPackedPolicySize sets the PackedPolicySize field's value.
0000000000000000000000000000000000000000;;	func (s *AssumeRoleWithWebIdentityOutput) SetPackedPolicySize(v int64) *AssumeRoleWithWebIdentityOutput {
0000000000000000000000000000000000000000;;		s.PackedPolicySize = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetProvider sets the Provider field's value.
0000000000000000000000000000000000000000;;	func (s *AssumeRoleWithWebIdentityOutput) SetProvider(v string) *AssumeRoleWithWebIdentityOutput {
0000000000000000000000000000000000000000;;		s.Provider = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSubjectFromWebIdentityToken sets the SubjectFromWebIdentityToken field's value.
0000000000000000000000000000000000000000;;	func (s *AssumeRoleWithWebIdentityOutput) SetSubjectFromWebIdentityToken(v string) *AssumeRoleWithWebIdentityOutput {
0000000000000000000000000000000000000000;;		s.SubjectFromWebIdentityToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The identifiers for the temporary security credentials that the operation
0000000000000000000000000000000000000000;;	// returns.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/sts-2011-06-15/AssumedRoleUser
0000000000000000000000000000000000000000;;	type AssumedRoleUser struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ARN of the temporary security credentials that are returned from the
0000000000000000000000000000000000000000;;		// AssumeRole action. For more information about ARNs and how to use them in
0000000000000000000000000000000000000000;;		// policies, see IAM Identifiers (http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html)
0000000000000000000000000000000000000000;;		// in Using IAM.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Arn is a required field
0000000000000000000000000000000000000000;;		Arn *string `min:"20" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A unique identifier that contains the role ID and the role session name of
0000000000000000000000000000000000000000;;		// the role that is being assumed. The role ID is generated by AWS when the
0000000000000000000000000000000000000000;;		// role is created.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// AssumedRoleId is a required field
0000000000000000000000000000000000000000;;		AssumedRoleId *string `min:"2" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s AssumedRoleUser) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s AssumedRoleUser) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetArn sets the Arn field's value.
0000000000000000000000000000000000000000;;	func (s *AssumedRoleUser) SetArn(v string) *AssumedRoleUser {
0000000000000000000000000000000000000000;;		s.Arn = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAssumedRoleId sets the AssumedRoleId field's value.
0000000000000000000000000000000000000000;;	func (s *AssumedRoleUser) SetAssumedRoleId(v string) *AssumedRoleUser {
0000000000000000000000000000000000000000;;		s.AssumedRoleId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AWS credentials for API authentication.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/sts-2011-06-15/Credentials
0000000000000000000000000000000000000000;;	type Credentials struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The access key ID that identifies the temporary security credentials.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// AccessKeyId is a required field
0000000000000000000000000000000000000000;;		AccessKeyId *string `min:"16" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The date on which the current credentials expire.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Expiration is a required field
0000000000000000000000000000000000000000;;		Expiration *time.Time `type:"timestamp" timestampFormat:"iso8601" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The secret access key that can be used to sign requests.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// SecretAccessKey is a required field
0000000000000000000000000000000000000000;;		SecretAccessKey *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The token that users must pass to the service API to use the temporary credentials.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// SessionToken is a required field
0000000000000000000000000000000000000000;;		SessionToken *string `type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s Credentials) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s Credentials) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAccessKeyId sets the AccessKeyId field's value.
0000000000000000000000000000000000000000;;	func (s *Credentials) SetAccessKeyId(v string) *Credentials {
0000000000000000000000000000000000000000;;		s.AccessKeyId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetExpiration sets the Expiration field's value.
0000000000000000000000000000000000000000;;	func (s *Credentials) SetExpiration(v time.Time) *Credentials {
0000000000000000000000000000000000000000;;		s.Expiration = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSecretAccessKey sets the SecretAccessKey field's value.
0000000000000000000000000000000000000000;;	func (s *Credentials) SetSecretAccessKey(v string) *Credentials {
0000000000000000000000000000000000000000;;		s.SecretAccessKey = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSessionToken sets the SessionToken field's value.
0000000000000000000000000000000000000000;;	func (s *Credentials) SetSessionToken(v string) *Credentials {
0000000000000000000000000000000000000000;;		s.SessionToken = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/sts-2011-06-15/DecodeAuthorizationMessageRequest
0000000000000000000000000000000000000000;;	type DecodeAuthorizationMessageInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The encoded message that was returned with the response.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// EncodedMessage is a required field
0000000000000000000000000000000000000000;;		EncodedMessage *string `min:"1" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DecodeAuthorizationMessageInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DecodeAuthorizationMessageInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *DecodeAuthorizationMessageInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "DecodeAuthorizationMessageInput"}
0000000000000000000000000000000000000000;;		if s.EncodedMessage == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("EncodedMessage"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.EncodedMessage != nil && len(*s.EncodedMessage) < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("EncodedMessage", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetEncodedMessage sets the EncodedMessage field's value.
0000000000000000000000000000000000000000;;	func (s *DecodeAuthorizationMessageInput) SetEncodedMessage(v string) *DecodeAuthorizationMessageInput {
0000000000000000000000000000000000000000;;		s.EncodedMessage = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A document that contains additional information about the authorization status
0000000000000000000000000000000000000000;;	// of a request from an encoded message that is returned in response to an AWS
0000000000000000000000000000000000000000;;	// request.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/sts-2011-06-15/DecodeAuthorizationMessageResponse
0000000000000000000000000000000000000000;;	type DecodeAuthorizationMessageOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// An XML document that contains the decoded message.
0000000000000000000000000000000000000000;;		DecodedMessage *string `type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s DecodeAuthorizationMessageOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s DecodeAuthorizationMessageOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDecodedMessage sets the DecodedMessage field's value.
0000000000000000000000000000000000000000;;	func (s *DecodeAuthorizationMessageOutput) SetDecodedMessage(v string) *DecodeAuthorizationMessageOutput {
0000000000000000000000000000000000000000;;		s.DecodedMessage = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Identifiers for the federated user that is associated with the credentials.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/sts-2011-06-15/FederatedUser
0000000000000000000000000000000000000000;;	type FederatedUser struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The ARN that specifies the federated user that is associated with the credentials.
0000000000000000000000000000000000000000;;		// For more information about ARNs and how to use them in policies, see IAM
0000000000000000000000000000000000000000;;		// Identifiers (http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html)
0000000000000000000000000000000000000000;;		// in Using IAM.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Arn is a required field
0000000000000000000000000000000000000000;;		Arn *string `min:"20" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The string that identifies the federated user associated with the credentials,
0000000000000000000000000000000000000000;;		// similar to the unique ID of an IAM user.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// FederatedUserId is a required field
0000000000000000000000000000000000000000;;		FederatedUserId *string `min:"2" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s FederatedUser) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s FederatedUser) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetArn sets the Arn field's value.
0000000000000000000000000000000000000000;;	func (s *FederatedUser) SetArn(v string) *FederatedUser {
0000000000000000000000000000000000000000;;		s.Arn = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFederatedUserId sets the FederatedUserId field's value.
0000000000000000000000000000000000000000;;	func (s *FederatedUser) SetFederatedUserId(v string) *FederatedUser {
0000000000000000000000000000000000000000;;		s.FederatedUserId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/sts-2011-06-15/GetCallerIdentityRequest
0000000000000000000000000000000000000000;;	type GetCallerIdentityInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s GetCallerIdentityInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s GetCallerIdentityInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the response to a successful GetCallerIdentity request, including
0000000000000000000000000000000000000000;;	// information about the entity making the request.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/sts-2011-06-15/GetCallerIdentityResponse
0000000000000000000000000000000000000000;;	type GetCallerIdentityOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The AWS account ID number of the account that owns or contains the calling
0000000000000000000000000000000000000000;;		// entity.
0000000000000000000000000000000000000000;;		Account *string `type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The AWS ARN associated with the calling entity.
0000000000000000000000000000000000000000;;		Arn *string `min:"20" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The unique identifier of the calling entity. The exact value depends on the
0000000000000000000000000000000000000000;;		// type of entity making the call. The values returned are those listed in the
0000000000000000000000000000000000000000;;		// aws:userid column in the Principal table (http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_variables.html#principaltable)
0000000000000000000000000000000000000000;;		// found on the Policy Variables reference page in the IAM User Guide.
0000000000000000000000000000000000000000;;		UserId *string `type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s GetCallerIdentityOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s GetCallerIdentityOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAccount sets the Account field's value.
0000000000000000000000000000000000000000;;	func (s *GetCallerIdentityOutput) SetAccount(v string) *GetCallerIdentityOutput {
0000000000000000000000000000000000000000;;		s.Account = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetArn sets the Arn field's value.
0000000000000000000000000000000000000000;;	func (s *GetCallerIdentityOutput) SetArn(v string) *GetCallerIdentityOutput {
0000000000000000000000000000000000000000;;		s.Arn = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetUserId sets the UserId field's value.
0000000000000000000000000000000000000000;;	func (s *GetCallerIdentityOutput) SetUserId(v string) *GetCallerIdentityOutput {
0000000000000000000000000000000000000000;;		s.UserId = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/sts-2011-06-15/GetFederationTokenRequest
0000000000000000000000000000000000000000;;	type GetFederationTokenInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The duration, in seconds, that the session should last. Acceptable durations
0000000000000000000000000000000000000000;;		// for federation sessions range from 900 seconds (15 minutes) to 129600 seconds
0000000000000000000000000000000000000000;;		// (36 hours), with 43200 seconds (12 hours) as the default. Sessions obtained
0000000000000000000000000000000000000000;;		// using AWS account (root) credentials are restricted to a maximum of 3600
0000000000000000000000000000000000000000;;		// seconds (one hour). If the specified duration is longer than one hour, the
0000000000000000000000000000000000000000;;		// session obtained by using AWS account (root) credentials defaults to one
0000000000000000000000000000000000000000;;		// hour.
0000000000000000000000000000000000000000;;		DurationSeconds *int64 `min:"900" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The name of the federated user. The name is used as an identifier for the
0000000000000000000000000000000000000000;;		// temporary security credentials (such as Bob). For example, you can reference
0000000000000000000000000000000000000000;;		// the federated user name in a resource-based policy, such as in an Amazon
0000000000000000000000000000000000000000;;		// S3 bucket policy.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// The regex used to validate this parameter is a string of characters consisting
0000000000000000000000000000000000000000;;		// of upper- and lower-case alphanumeric characters with no spaces. You can
0000000000000000000000000000000000000000;;		// also include underscores or any of the following characters: =,.@-
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Name is a required field
0000000000000000000000000000000000000000;;		Name *string `min:"2" type:"string" required:"true"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// An IAM policy in JSON format that is passed with the GetFederationToken call
0000000000000000000000000000000000000000;;		// and evaluated along with the policy or policies that are attached to the
0000000000000000000000000000000000000000;;		// IAM user whose credentials are used to call GetFederationToken. The passed
0000000000000000000000000000000000000000;;		// policy is used to scope down the permissions that are available to the IAM
0000000000000000000000000000000000000000;;		// user, by allowing only a subset of the permissions that are granted to the
0000000000000000000000000000000000000000;;		// IAM user. The passed policy cannot grant more permissions than those granted
0000000000000000000000000000000000000000;;		// to the IAM user. The final permissions for the federated user are the most
0000000000000000000000000000000000000000;;		// restrictive set based on the intersection of the passed policy and the IAM
0000000000000000000000000000000000000000;;		// user policy.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If you do not pass a policy, the resulting temporary security credentials
0000000000000000000000000000000000000000;;		// have no effective permissions. The only exception is when the temporary security
0000000000000000000000000000000000000000;;		// credentials are used to access a resource that has a resource-based policy
0000000000000000000000000000000000000000;;		// that specifically allows the federated user to access the resource.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// The format for this parameter, as described by its regex pattern, is a string
0000000000000000000000000000000000000000;;		// of characters up to 2048 characters in length. The characters can be any
0000000000000000000000000000000000000000;;		// ASCII character from the space character to the end of the valid character
0000000000000000000000000000000000000000;;		// list (\u0020-\u00FF). It can also include the tab (\u0009), linefeed (\u000A),
0000000000000000000000000000000000000000;;		// and carriage return (\u000D) characters.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// The policy plain text must be 2048 bytes or shorter. However, an internal
0000000000000000000000000000000000000000;;		// conversion compresses it into a packed binary format with a separate limit.
0000000000000000000000000000000000000000;;		// The PackedPolicySize response element indicates by percentage how close to
0000000000000000000000000000000000000000;;		// the upper size limit the policy is, with 100% equaling the maximum allowed
0000000000000000000000000000000000000000;;		// size.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// For more information about how permissions work, see Permissions for GetFederationToken
0000000000000000000000000000000000000000;;		// (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_control-access_getfederationtoken.html).
0000000000000000000000000000000000000000;;		Policy *string `min:"1" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s GetFederationTokenInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s GetFederationTokenInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *GetFederationTokenInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "GetFederationTokenInput"}
0000000000000000000000000000000000000000;;		if s.DurationSeconds != nil && *s.DurationSeconds < 900 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinValue("DurationSeconds", 900))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Name == nil {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamRequired("Name"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Name != nil && len(*s.Name) < 2 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("Name", 2))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Policy != nil && len(*s.Policy) < 1 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("Policy", 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDurationSeconds sets the DurationSeconds field's value.
0000000000000000000000000000000000000000;;	func (s *GetFederationTokenInput) SetDurationSeconds(v int64) *GetFederationTokenInput {
0000000000000000000000000000000000000000;;		s.DurationSeconds = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetName sets the Name field's value.
0000000000000000000000000000000000000000;;	func (s *GetFederationTokenInput) SetName(v string) *GetFederationTokenInput {
0000000000000000000000000000000000000000;;		s.Name = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPolicy sets the Policy field's value.
0000000000000000000000000000000000000000;;	func (s *GetFederationTokenInput) SetPolicy(v string) *GetFederationTokenInput {
0000000000000000000000000000000000000000;;		s.Policy = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the response to a successful GetFederationToken request, including
0000000000000000000000000000000000000000;;	// temporary AWS credentials that can be used to make AWS requests.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/sts-2011-06-15/GetFederationTokenResponse
0000000000000000000000000000000000000000;;	type GetFederationTokenOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The temporary security credentials, which include an access key ID, a secret
0000000000000000000000000000000000000000;;		// access key, and a security (or session) token.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Note: The size of the security token that STS APIs return is not fixed. We
0000000000000000000000000000000000000000;;		// strongly recommend that you make no assumptions about the maximum size. As
0000000000000000000000000000000000000000;;		// of this writing, the typical size is less than 4096 bytes, but that can vary.
0000000000000000000000000000000000000000;;		// Also, future updates to AWS might require larger sizes.
0000000000000000000000000000000000000000;;		Credentials *Credentials `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Identifiers for the federated user associated with the credentials (such
0000000000000000000000000000000000000000;;		// as arn:aws:sts::123456789012:federated-user/Bob or 123456789012:Bob). You
0000000000000000000000000000000000000000;;		// can use the federated user's ARN in your resource-based policies, such as
0000000000000000000000000000000000000000;;		// an Amazon S3 bucket policy.
0000000000000000000000000000000000000000;;		FederatedUser *FederatedUser `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A percentage value indicating the size of the policy in packed form. The
0000000000000000000000000000000000000000;;		// service rejects policies for which the packed size is greater than 100 percent
0000000000000000000000000000000000000000;;		// of the allowed value.
0000000000000000000000000000000000000000;;		PackedPolicySize *int64 `type:"integer"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s GetFederationTokenOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s GetFederationTokenOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCredentials sets the Credentials field's value.
0000000000000000000000000000000000000000;;	func (s *GetFederationTokenOutput) SetCredentials(v *Credentials) *GetFederationTokenOutput {
0000000000000000000000000000000000000000;;		s.Credentials = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFederatedUser sets the FederatedUser field's value.
0000000000000000000000000000000000000000;;	func (s *GetFederationTokenOutput) SetFederatedUser(v *FederatedUser) *GetFederationTokenOutput {
0000000000000000000000000000000000000000;;		s.FederatedUser = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetPackedPolicySize sets the PackedPolicySize field's value.
0000000000000000000000000000000000000000;;	func (s *GetFederationTokenOutput) SetPackedPolicySize(v int64) *GetFederationTokenOutput {
0000000000000000000000000000000000000000;;		s.PackedPolicySize = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/sts-2011-06-15/GetSessionTokenRequest
0000000000000000000000000000000000000000;;	type GetSessionTokenInput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The duration, in seconds, that the credentials should remain valid. Acceptable
0000000000000000000000000000000000000000;;		// durations for IAM user sessions range from 900 seconds (15 minutes) to 129600
0000000000000000000000000000000000000000;;		// seconds (36 hours), with 43200 seconds (12 hours) as the default. Sessions
0000000000000000000000000000000000000000;;		// for AWS account owners are restricted to a maximum of 3600 seconds (one hour).
0000000000000000000000000000000000000000;;		// If the duration is longer than one hour, the session for AWS account owners
0000000000000000000000000000000000000000;;		// defaults to one hour.
0000000000000000000000000000000000000000;;		DurationSeconds *int64 `min:"900" type:"integer"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The identification number of the MFA device that is associated with the IAM
0000000000000000000000000000000000000000;;		// user who is making the GetSessionToken call. Specify this value if the IAM
0000000000000000000000000000000000000000;;		// user has a policy that requires MFA authentication. The value is either the
0000000000000000000000000000000000000000;;		// serial number for a hardware device (such as GAHT12345678) or an Amazon Resource
0000000000000000000000000000000000000000;;		// Name (ARN) for a virtual device (such as arn:aws:iam::123456789012:mfa/user).
0000000000000000000000000000000000000000;;		// You can find the device for an IAM user by going to the AWS Management Console
0000000000000000000000000000000000000000;;		// and viewing the user's security credentials.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// The regex used to validate this parameter is a string of characters consisting
0000000000000000000000000000000000000000;;		// of upper- and lower-case alphanumeric characters with no spaces. You can
0000000000000000000000000000000000000000;;		// also include underscores or any of the following characters: =,.@-
0000000000000000000000000000000000000000;;		SerialNumber *string `min:"9" type:"string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The value provided by the MFA device, if MFA is required. If any policy requires
0000000000000000000000000000000000000000;;		// the IAM user to submit an MFA code, specify this value. If MFA authentication
0000000000000000000000000000000000000000;;		// is required, and the user does not provide a code when requesting a set of
0000000000000000000000000000000000000000;;		// temporary security credentials, the user will receive an "access denied"
0000000000000000000000000000000000000000;;		// response when requesting resources that require MFA authentication.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// The format for this parameter, as described by its regex pattern, is a sequence
0000000000000000000000000000000000000000;;		// of six numeric digits.
0000000000000000000000000000000000000000;;		TokenCode *string `min:"6" type:"string"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s GetSessionTokenInput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s GetSessionTokenInput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validate inspects the fields of the type to determine if they are valid.
0000000000000000000000000000000000000000;;	func (s *GetSessionTokenInput) Validate() error {
0000000000000000000000000000000000000000;;		invalidParams := request.ErrInvalidParams{Context: "GetSessionTokenInput"}
0000000000000000000000000000000000000000;;		if s.DurationSeconds != nil && *s.DurationSeconds < 900 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinValue("DurationSeconds", 900))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.SerialNumber != nil && len(*s.SerialNumber) < 9 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("SerialNumber", 9))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.TokenCode != nil && len(*s.TokenCode) < 6 {
0000000000000000000000000000000000000000;;			invalidParams.Add(request.NewErrParamMinLen("TokenCode", 6))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if invalidParams.Len() > 0 {
0000000000000000000000000000000000000000;;			return invalidParams
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetDurationSeconds sets the DurationSeconds field's value.
0000000000000000000000000000000000000000;;	func (s *GetSessionTokenInput) SetDurationSeconds(v int64) *GetSessionTokenInput {
0000000000000000000000000000000000000000;;		s.DurationSeconds = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSerialNumber sets the SerialNumber field's value.
0000000000000000000000000000000000000000;;	func (s *GetSessionTokenInput) SetSerialNumber(v string) *GetSessionTokenInput {
0000000000000000000000000000000000000000;;		s.SerialNumber = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetTokenCode sets the TokenCode field's value.
0000000000000000000000000000000000000000;;	func (s *GetSessionTokenInput) SetTokenCode(v string) *GetSessionTokenInput {
0000000000000000000000000000000000000000;;		s.TokenCode = &v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains the response to a successful GetSessionToken request, including
0000000000000000000000000000000000000000;;	// temporary AWS credentials that can be used to make AWS requests.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/sts-2011-06-15/GetSessionTokenResponse
0000000000000000000000000000000000000000;;	type GetSessionTokenOutput struct {
0000000000000000000000000000000000000000;;		_ struct{} `type:"structure"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The temporary security credentials, which include an access key ID, a secret
0000000000000000000000000000000000000000;;		// access key, and a security (or session) token.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Note: The size of the security token that STS APIs return is not fixed. We
0000000000000000000000000000000000000000;;		// strongly recommend that you make no assumptions about the maximum size. As
0000000000000000000000000000000000000000;;		// of this writing, the typical size is less than 4096 bytes, but that can vary.
0000000000000000000000000000000000000000;;		// Also, future updates to AWS might require larger sizes.
0000000000000000000000000000000000000000;;		Credentials *Credentials `type:"structure"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string representation
0000000000000000000000000000000000000000;;	func (s GetSessionTokenOutput) String() string {
0000000000000000000000000000000000000000;;		return awsutil.Prettify(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GoString returns the string representation
0000000000000000000000000000000000000000;;	func (s GetSessionTokenOutput) GoString() string {
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCredentials sets the Credentials field's value.
0000000000000000000000000000000000000000;;	func (s *GetSessionTokenOutput) SetCredentials(v *Credentials) *GetSessionTokenOutput {
0000000000000000000000000000000000000000;;		s.Credentials = v
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
