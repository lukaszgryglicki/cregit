0000000000000000000000000000000000000000;;	// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
7b662bd39f4f8ebe87658b72a7df9da9c5a74c80;;	
0000000000000000000000000000000000000000;;	package sts
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/client"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/client/metadata"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/request"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/signer/v4"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/private/protocol/query"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The AWS Security Token Service (STS) is a web service that enables you to
0000000000000000000000000000000000000000;;	// request temporary, limited-privilege credentials for AWS Identity and Access
0000000000000000000000000000000000000000;;	// Management (IAM) users or for users that you authenticate (federated users).
0000000000000000000000000000000000000000;;	// This guide provides descriptions of the STS API. For more detailed information
0000000000000000000000000000000000000000;;	// about using this service, go to Temporary Security Credentials (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp.html).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// As an alternative to using the API, you can use one of the AWS SDKs, which
0000000000000000000000000000000000000000;;	// consist of libraries and sample code for various programming languages and
0000000000000000000000000000000000000000;;	// platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs provide a convenient
0000000000000000000000000000000000000000;;	// way to create programmatic access to STS. For example, the SDKs take care
0000000000000000000000000000000000000000;;	// of cryptographically signing requests, managing errors, and retrying requests
0000000000000000000000000000000000000000;;	// automatically. For information about the AWS SDKs, including how to download
0000000000000000000000000000000000000000;;	// and install them, see the Tools for Amazon Web Services page (http://aws.amazon.com/tools/).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For information about setting up signatures and authorization through the
0000000000000000000000000000000000000000;;	// API, go to Signing AWS API Requests (http://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html)
0000000000000000000000000000000000000000;;	// in the AWS General Reference. For general information about the Query API,
0000000000000000000000000000000000000000;;	// go to Making Query Requests (http://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html)
0000000000000000000000000000000000000000;;	// in Using IAM. For information about using security tokens with other AWS
0000000000000000000000000000000000000000;;	// products, go to AWS Services That Work with IAM (http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html)
0000000000000000000000000000000000000000;;	// in the IAM User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If you're new to AWS and need additional technical information about a specific
0000000000000000000000000000000000000000;;	// AWS product, you can find the product's technical documentation at http://aws.amazon.com/documentation/
0000000000000000000000000000000000000000;;	// (http://aws.amazon.com/documentation/).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Endpoints
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The AWS Security Token Service (STS) has a default endpoint of https://sts.amazonaws.com
0000000000000000000000000000000000000000;;	// that maps to the US East (N. Virginia) region. Additional regions are available
0000000000000000000000000000000000000000;;	// and are activated by default. For more information, see Activating and Deactivating
0000000000000000000000000000000000000000;;	// AWS STS in an AWS Region (http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html)
0000000000000000000000000000000000000000;;	// in the IAM User Guide.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For information about STS endpoints, see Regions and Endpoints (http://docs.aws.amazon.com/general/latest/gr/rande.html#sts_region)
0000000000000000000000000000000000000000;;	// in the AWS General Reference.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Recording API requests
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// STS supports AWS CloudTrail, which is a service that records AWS calls for
0000000000000000000000000000000000000000;;	// your AWS account and delivers log files to an Amazon S3 bucket. By using
0000000000000000000000000000000000000000;;	// information collected by CloudTrail, you can determine what requests were
0000000000000000000000000000000000000000;;	// successfully made to STS, who made the request, when it was made, and so
0000000000000000000000000000000000000000;;	// on. To learn more about CloudTrail, including how to turn it on and find
0000000000000000000000000000000000000000;;	// your log files, see the AWS CloudTrail User Guide (http://docs.aws.amazon.com/awscloudtrail/latest/userguide/what_is_cloud_trail_top_level.html).
0000000000000000000000000000000000000000;;	// The service client's operations are safe to be used concurrently.
0000000000000000000000000000000000000000;;	// It is not safe to mutate any of the client's properties though.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/sts-2011-06-15
0000000000000000000000000000000000000000;;	type STS struct {
0000000000000000000000000000000000000000;;		*client.Client
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Used for custom client initialization logic
0000000000000000000000000000000000000000;;	var initClient func(*client.Client)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Used for custom request initialization logic
0000000000000000000000000000000000000000;;	var initRequest func(*request.Request)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Service information constants
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		ServiceName = "sts"       // Service endpoint prefix API calls made to.
0000000000000000000000000000000000000000;;		EndpointsID = ServiceName // Service ID for Regions and Endpoints metadata.
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// New creates a new instance of the STS client with a session.
0000000000000000000000000000000000000000;;	// If additional configuration is needed for the client instance use the optional
0000000000000000000000000000000000000000;;	// aws.Config parameter to add your extra config.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Example:
0000000000000000000000000000000000000000;;	//     // Create a STS client from just a session.
0000000000000000000000000000000000000000;;	//     svc := sts.New(mySession)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     // Create a STS client with additional configuration
0000000000000000000000000000000000000000;;	//     svc := sts.New(mySession, aws.NewConfig().WithRegion("us-west-2"))
0000000000000000000000000000000000000000;;	func New(p client.ConfigProvider, cfgs ...*aws.Config) *STS {
0000000000000000000000000000000000000000;;		c := p.ClientConfig(EndpointsID, cfgs...)
0000000000000000000000000000000000000000;;		return newClient(*c.Config, c.Handlers, c.Endpoint, c.SigningRegion, c.SigningName)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// newClient creates, initializes and returns a new service client instance.
0000000000000000000000000000000000000000;;	func newClient(cfg aws.Config, handlers request.Handlers, endpoint, signingRegion, signingName string) *STS {
0000000000000000000000000000000000000000;;		svc := &STS{
0000000000000000000000000000000000000000;;			Client: client.New(
0000000000000000000000000000000000000000;;				cfg,
0000000000000000000000000000000000000000;;				metadata.ClientInfo{
0000000000000000000000000000000000000000;;					ServiceName:   ServiceName,
0000000000000000000000000000000000000000;;					SigningName:   signingName,
0000000000000000000000000000000000000000;;					SigningRegion: signingRegion,
0000000000000000000000000000000000000000;;					Endpoint:      endpoint,
0000000000000000000000000000000000000000;;					APIVersion:    "2011-06-15",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				handlers,
0000000000000000000000000000000000000000;;			),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Handlers
0000000000000000000000000000000000000000;;		svc.Handlers.Sign.PushBackNamed(v4.SignRequestHandler)
0000000000000000000000000000000000000000;;		svc.Handlers.Build.PushBackNamed(query.BuildHandler)
0000000000000000000000000000000000000000;;		svc.Handlers.Unmarshal.PushBackNamed(query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		svc.Handlers.UnmarshalMeta.PushBackNamed(query.UnmarshalMetaHandler)
0000000000000000000000000000000000000000;;		svc.Handlers.UnmarshalError.PushBackNamed(query.UnmarshalErrorHandler)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Run custom client initialization if present
0000000000000000000000000000000000000000;;		if initClient != nil {
0000000000000000000000000000000000000000;;			initClient(svc.Client)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return svc
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// newRequest creates a new request for a STS operation and runs any
0000000000000000000000000000000000000000;;	// custom request initialization.
0000000000000000000000000000000000000000;;	func (c *STS) newRequest(op *request.Operation, params, data interface{}) *request.Request {
0000000000000000000000000000000000000000;;		req := c.NewRequest(op, params, data)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Run custom request initialization if present
0000000000000000000000000000000000000000;;		if initRequest != nil {
0000000000000000000000000000000000000000;;			initRequest(req)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return req
0000000000000000000000000000000000000000;;	}
