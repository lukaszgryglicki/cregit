0000000000000000000000000000000000000000;;	// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
15505fe0b7961d9c807ac0af0b1f8961fbc154fb;Godeps/_workspace/src/github.com/awslabs/aws-sdk-go/service/elb/service.go[Godeps/_workspace/src/github.com/awslabs/aws-sdk-go/service/elb/service.go][vendor/github.com/aws/aws-sdk-go/service/elb/service.go];	
0000000000000000000000000000000000000000;;	package elb
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/client"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/client/metadata"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/request"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/signer/v4"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/private/protocol/query"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A load balancer distributes incoming traffic across your EC2 instances. This
0000000000000000000000000000000000000000;;	// enables you to increase the availability of your application. The load balancer
0000000000000000000000000000000000000000;;	// also monitors the health of its registered instances and ensures that it
0000000000000000000000000000000000000000;;	// routes traffic only to healthy instances. You configure your load balancer
0000000000000000000000000000000000000000;;	// to accept incoming traffic by specifying one or more listeners, which are
0000000000000000000000000000000000000000;;	// configured with a protocol and port number for connections from clients to
0000000000000000000000000000000000000000;;	// the load balancer and a protocol and port number for connections from the
0000000000000000000000000000000000000000;;	// load balancer to the instances.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Elastic Load Balancing supports two types of load balancers: Classic load
0000000000000000000000000000000000000000;;	// balancers and Application load balancers (new). A Classic load balancer makes
0000000000000000000000000000000000000000;;	// routing and load balancing decisions either at the transport layer (TCP/SSL)
0000000000000000000000000000000000000000;;	// or the application layer (HTTP/HTTPS), and supports either EC2-Classic or
0000000000000000000000000000000000000000;;	// a VPC. An Application load balancer makes routing and load balancing decisions
0000000000000000000000000000000000000000;;	// at the application layer (HTTP/HTTPS), supports path-based routing, and can
0000000000000000000000000000000000000000;;	// route requests to one or more ports on each EC2 instance or container instance
0000000000000000000000000000000000000000;;	// in your virtual private cloud (VPC). For more information, see the .
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This reference covers the 2012-06-01 API, which supports Classic load balancers.
0000000000000000000000000000000000000000;;	// The 2015-12-01 API supports Application load balancers.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// To get started, create a load balancer with one or more listeners using CreateLoadBalancer.
0000000000000000000000000000000000000000;;	// Register your instances with the load balancer using RegisterInstancesWithLoadBalancer.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// All Elastic Load Balancing operations are idempotent, which means that they
0000000000000000000000000000000000000000;;	// complete at most one time. If you repeat an operation, it succeeds with a
0000000000000000000000000000000000000000;;	// 200 OK response code.
0000000000000000000000000000000000000000;;	// The service client's operations are safe to be used concurrently.
0000000000000000000000000000000000000000;;	// It is not safe to mutate any of the client's properties though.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/elasticloadbalancing-2012-06-01
0000000000000000000000000000000000000000;;	type ELB struct {
0000000000000000000000000000000000000000;;		*client.Client
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Used for custom client initialization logic
0000000000000000000000000000000000000000;;	var initClient func(*client.Client)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Used for custom request initialization logic
0000000000000000000000000000000000000000;;	var initRequest func(*request.Request)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Service information constants
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		ServiceName = "elasticloadbalancing" // Service endpoint prefix API calls made to.
0000000000000000000000000000000000000000;;		EndpointsID = ServiceName            // Service ID for Regions and Endpoints metadata.
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// New creates a new instance of the ELB client with a session.
0000000000000000000000000000000000000000;;	// If additional configuration is needed for the client instance use the optional
0000000000000000000000000000000000000000;;	// aws.Config parameter to add your extra config.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Example:
0000000000000000000000000000000000000000;;	//     // Create a ELB client from just a session.
0000000000000000000000000000000000000000;;	//     svc := elb.New(mySession)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     // Create a ELB client with additional configuration
0000000000000000000000000000000000000000;;	//     svc := elb.New(mySession, aws.NewConfig().WithRegion("us-west-2"))
0000000000000000000000000000000000000000;;	func New(p client.ConfigProvider, cfgs ...*aws.Config) *ELB {
0000000000000000000000000000000000000000;;		c := p.ClientConfig(EndpointsID, cfgs...)
0000000000000000000000000000000000000000;;		return newClient(*c.Config, c.Handlers, c.Endpoint, c.SigningRegion, c.SigningName)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// newClient creates, initializes and returns a new service client instance.
0000000000000000000000000000000000000000;;	func newClient(cfg aws.Config, handlers request.Handlers, endpoint, signingRegion, signingName string) *ELB {
0000000000000000000000000000000000000000;;		svc := &ELB{
0000000000000000000000000000000000000000;;			Client: client.New(
0000000000000000000000000000000000000000;;				cfg,
0000000000000000000000000000000000000000;;				metadata.ClientInfo{
0000000000000000000000000000000000000000;;					ServiceName:   ServiceName,
0000000000000000000000000000000000000000;;					SigningName:   signingName,
0000000000000000000000000000000000000000;;					SigningRegion: signingRegion,
0000000000000000000000000000000000000000;;					Endpoint:      endpoint,
0000000000000000000000000000000000000000;;					APIVersion:    "2012-06-01",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				handlers,
0000000000000000000000000000000000000000;;			),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Handlers
0000000000000000000000000000000000000000;;		svc.Handlers.Sign.PushBackNamed(v4.SignRequestHandler)
0000000000000000000000000000000000000000;;		svc.Handlers.Build.PushBackNamed(query.BuildHandler)
0000000000000000000000000000000000000000;;		svc.Handlers.Unmarshal.PushBackNamed(query.UnmarshalHandler)
0000000000000000000000000000000000000000;;		svc.Handlers.UnmarshalMeta.PushBackNamed(query.UnmarshalMetaHandler)
0000000000000000000000000000000000000000;;		svc.Handlers.UnmarshalError.PushBackNamed(query.UnmarshalErrorHandler)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Run custom client initialization if present
0000000000000000000000000000000000000000;;		if initClient != nil {
0000000000000000000000000000000000000000;;			initClient(svc.Client)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return svc
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// newRequest creates a new request for a ELB operation and runs any
0000000000000000000000000000000000000000;;	// custom request initialization.
0000000000000000000000000000000000000000;;	func (c *ELB) newRequest(op *request.Operation, params, data interface{}) *request.Request {
0000000000000000000000000000000000000000;;		req := c.NewRequest(op, params, data)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Run custom request initialization if present
0000000000000000000000000000000000000000;;		if initRequest != nil {
0000000000000000000000000000000000000000;;			initRequest(req)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return req
0000000000000000000000000000000000000000;;	}
