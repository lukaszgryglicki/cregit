0000000000000000000000000000000000000000;;	// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
837c40a351ee83c902024069c1ae048b6b398947;Godeps/_workspace/src/github.com/aws/aws-sdk-go/service/ecr/service.go[Godeps/_workspace/src/github.com/aws/aws-sdk-go/service/ecr/service.go][vendor/github.com/aws/aws-sdk-go/service/ecr/service.go];	
0000000000000000000000000000000000000000;;	package ecr
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/client"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/client/metadata"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/request"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/aws/signer/v4"
0000000000000000000000000000000000000000;;		"github.com/aws/aws-sdk-go/private/protocol/jsonrpc"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Amazon EC2 Container Registry (Amazon ECR) is a managed AWS Docker registry
0000000000000000000000000000000000000000;;	// service. Customers can use the familiar Docker CLI to push, pull, and manage
0000000000000000000000000000000000000000;;	// images. Amazon ECR provides a secure, scalable, and reliable registry. Amazon
0000000000000000000000000000000000000000;;	// ECR supports private Docker repositories with resource-based permissions
0000000000000000000000000000000000000000;;	// using AWS IAM so that specific users or Amazon EC2 instances can access repositories
0000000000000000000000000000000000000000;;	// and images. Developers can use the Docker CLI to author and manage images.
0000000000000000000000000000000000000000;;	// The service client's operations are safe to be used concurrently.
0000000000000000000000000000000000000000;;	// It is not safe to mutate any of the client's properties though.
0000000000000000000000000000000000000000;;	// Please also see https://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21
0000000000000000000000000000000000000000;;	type ECR struct {
0000000000000000000000000000000000000000;;		*client.Client
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Used for custom client initialization logic
0000000000000000000000000000000000000000;;	var initClient func(*client.Client)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Used for custom request initialization logic
0000000000000000000000000000000000000000;;	var initRequest func(*request.Request)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Service information constants
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		ServiceName = "ecr"       // Service endpoint prefix API calls made to.
0000000000000000000000000000000000000000;;		EndpointsID = ServiceName // Service ID for Regions and Endpoints metadata.
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// New creates a new instance of the ECR client with a session.
0000000000000000000000000000000000000000;;	// If additional configuration is needed for the client instance use the optional
0000000000000000000000000000000000000000;;	// aws.Config parameter to add your extra config.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Example:
0000000000000000000000000000000000000000;;	//     // Create a ECR client from just a session.
0000000000000000000000000000000000000000;;	//     svc := ecr.New(mySession)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     // Create a ECR client with additional configuration
0000000000000000000000000000000000000000;;	//     svc := ecr.New(mySession, aws.NewConfig().WithRegion("us-west-2"))
0000000000000000000000000000000000000000;;	func New(p client.ConfigProvider, cfgs ...*aws.Config) *ECR {
0000000000000000000000000000000000000000;;		c := p.ClientConfig(EndpointsID, cfgs...)
0000000000000000000000000000000000000000;;		return newClient(*c.Config, c.Handlers, c.Endpoint, c.SigningRegion, c.SigningName)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// newClient creates, initializes and returns a new service client instance.
0000000000000000000000000000000000000000;;	func newClient(cfg aws.Config, handlers request.Handlers, endpoint, signingRegion, signingName string) *ECR {
0000000000000000000000000000000000000000;;		svc := &ECR{
0000000000000000000000000000000000000000;;			Client: client.New(
0000000000000000000000000000000000000000;;				cfg,
0000000000000000000000000000000000000000;;				metadata.ClientInfo{
0000000000000000000000000000000000000000;;					ServiceName:   ServiceName,
0000000000000000000000000000000000000000;;					SigningName:   signingName,
0000000000000000000000000000000000000000;;					SigningRegion: signingRegion,
0000000000000000000000000000000000000000;;					Endpoint:      endpoint,
0000000000000000000000000000000000000000;;					APIVersion:    "2015-09-21",
0000000000000000000000000000000000000000;;					JSONVersion:   "1.1",
0000000000000000000000000000000000000000;;					TargetPrefix:  "AmazonEC2ContainerRegistry_V20150921",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				handlers,
0000000000000000000000000000000000000000;;			),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Handlers
0000000000000000000000000000000000000000;;		svc.Handlers.Sign.PushBackNamed(v4.SignRequestHandler)
0000000000000000000000000000000000000000;;		svc.Handlers.Build.PushBackNamed(jsonrpc.BuildHandler)
0000000000000000000000000000000000000000;;		svc.Handlers.Unmarshal.PushBackNamed(jsonrpc.UnmarshalHandler)
0000000000000000000000000000000000000000;;		svc.Handlers.UnmarshalMeta.PushBackNamed(jsonrpc.UnmarshalMetaHandler)
0000000000000000000000000000000000000000;;		svc.Handlers.UnmarshalError.PushBackNamed(jsonrpc.UnmarshalErrorHandler)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Run custom client initialization if present
0000000000000000000000000000000000000000;;		if initClient != nil {
0000000000000000000000000000000000000000;;			initClient(svc.Client)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return svc
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// newRequest creates a new request for a ECR operation and runs any
0000000000000000000000000000000000000000;;	// custom request initialization.
0000000000000000000000000000000000000000;;	func (c *ECR) newRequest(op *request.Operation, params, data interface{}) *request.Request {
0000000000000000000000000000000000000000;;		req := c.NewRequest(op, params, data)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Run custom request initialization if present
0000000000000000000000000000000000000000;;		if initRequest != nil {
0000000000000000000000000000000000000000;;			initRequest(req)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return req
0000000000000000000000000000000000000000;;	}
