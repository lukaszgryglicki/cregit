0000000000000000000000000000000000000000;;	// Go support for Protocol Buffers - Google's data interchange format
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Copyright 2016 The Go Authors.  All rights reserved.
0000000000000000000000000000000000000000;;	// https://github.com/golang/protobuf
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Redistribution and use in source and binary forms, with or without
0000000000000000000000000000000000000000;;	// modification, are permitted provided that the following conditions are
0000000000000000000000000000000000000000;;	// met:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     * Redistributions of source code must retain the above copyright
0000000000000000000000000000000000000000;;	// notice, this list of conditions and the following disclaimer.
0000000000000000000000000000000000000000;;	//     * Redistributions in binary form must reproduce the above
0000000000000000000000000000000000000000;;	// copyright notice, this list of conditions and the following disclaimer
0000000000000000000000000000000000000000;;	// in the documentation and/or other materials provided with the
0000000000000000000000000000000000000000;;	// distribution.
0000000000000000000000000000000000000000;;	//     * Neither the name of Google Inc. nor the names of its
0000000000000000000000000000000000000000;;	// contributors may be used to endorse or promote products derived from
0000000000000000000000000000000000000000;;	// this software without specific prior written permission.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
0000000000000000000000000000000000000000;;	// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
0000000000000000000000000000000000000000;;	// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
0000000000000000000000000000000000000000;;	// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
0000000000000000000000000000000000000000;;	// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
0000000000000000000000000000000000000000;;	// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
0000000000000000000000000000000000000000;;	// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
0000000000000000000000000000000000000000;;	// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
0000000000000000000000000000000000000000;;	// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
8337c2fc62f66cf6db7638dc013660183869f458;;	
0000000000000000000000000000000000000000;;	package ptypes
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This file implements conversions between google.protobuf.Duration
0000000000000000000000000000000000000000;;	// and time.Duration.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		durpb "github.com/golang/protobuf/ptypes/duration"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Range of a durpb.Duration in seconds, as specified in
0000000000000000000000000000000000000000;;		// google/protobuf/duration.proto. This is about 10,000 years in seconds.
0000000000000000000000000000000000000000;;		maxSeconds = int64(10000 * 365.25 * 24 * 60 * 60)
0000000000000000000000000000000000000000;;		minSeconds = -maxSeconds
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// validateDuration determines whether the durpb.Duration is valid according to the
0000000000000000000000000000000000000000;;	// definition in google/protobuf/duration.proto. A valid durpb.Duration
0000000000000000000000000000000000000000;;	// may still be too large to fit into a time.Duration (the range of durpb.Duration
0000000000000000000000000000000000000000;;	// is about 10,000 years, and the range of time.Duration is about 290).
0000000000000000000000000000000000000000;;	func validateDuration(d *durpb.Duration) error {
0000000000000000000000000000000000000000;;		if d == nil {
0000000000000000000000000000000000000000;;			return errors.New("duration: nil Duration")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if d.Seconds < minSeconds || d.Seconds > maxSeconds {
0000000000000000000000000000000000000000;;			return fmt.Errorf("duration: %v: seconds out of range", d)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if d.Nanos <= -1e9 || d.Nanos >= 1e9 {
0000000000000000000000000000000000000000;;			return fmt.Errorf("duration: %v: nanos out of range", d)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Seconds and Nanos must have the same sign, unless d.Nanos is zero.
0000000000000000000000000000000000000000;;		if (d.Seconds < 0 && d.Nanos > 0) || (d.Seconds > 0 && d.Nanos < 0) {
0000000000000000000000000000000000000000;;			return fmt.Errorf("duration: %v: seconds and nanos have different signs", d)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Duration converts a durpb.Duration to a time.Duration. Duration
0000000000000000000000000000000000000000;;	// returns an error if the durpb.Duration is invalid or is too large to be
0000000000000000000000000000000000000000;;	// represented in a time.Duration.
0000000000000000000000000000000000000000;;	func Duration(p *durpb.Duration) (time.Duration, error) {
0000000000000000000000000000000000000000;;		if err := validateDuration(p); err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		d := time.Duration(p.Seconds) * time.Second
0000000000000000000000000000000000000000;;		if int64(d/time.Second) != p.Seconds {
0000000000000000000000000000000000000000;;			return 0, fmt.Errorf("duration: %v is out of range for time.Duration", p)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if p.Nanos != 0 {
0000000000000000000000000000000000000000;;			d += time.Duration(p.Nanos)
0000000000000000000000000000000000000000;;			if (d < 0) != (p.Nanos < 0) {
0000000000000000000000000000000000000000;;				return 0, fmt.Errorf("duration: %v is out of range for time.Duration", p)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return d, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DurationProto converts a time.Duration to a durpb.Duration.
0000000000000000000000000000000000000000;;	func DurationProto(d time.Duration) *durpb.Duration {
0000000000000000000000000000000000000000;;		nanos := d.Nanoseconds()
0000000000000000000000000000000000000000;;		secs := nanos / 1e9
0000000000000000000000000000000000000000;;		nanos -= secs * 1e9
0000000000000000000000000000000000000000;;		return &durpb.Duration{
0000000000000000000000000000000000000000;;			Seconds: secs,
0000000000000000000000000000000000000000;;			Nanos:   int32(nanos),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
