0000000000000000000000000000000000000000;;	// Go support for Protocol Buffers - Google's data interchange format
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Copyright 2010 The Go Authors.  All rights reserved.
0000000000000000000000000000000000000000;;	// https://github.com/golang/protobuf
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Redistribution and use in source and binary forms, with or without
0000000000000000000000000000000000000000;;	// modification, are permitted provided that the following conditions are
0000000000000000000000000000000000000000;;	// met:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     * Redistributions of source code must retain the above copyright
0000000000000000000000000000000000000000;;	// notice, this list of conditions and the following disclaimer.
0000000000000000000000000000000000000000;;	//     * Redistributions in binary form must reproduce the above
0000000000000000000000000000000000000000;;	// copyright notice, this list of conditions and the following disclaimer
0000000000000000000000000000000000000000;;	// in the documentation and/or other materials provided with the
0000000000000000000000000000000000000000;;	// distribution.
0000000000000000000000000000000000000000;;	//     * Neither the name of Google Inc. nor the names of its
0000000000000000000000000000000000000000;;	// contributors may be used to endorse or promote products derived from
0000000000000000000000000000000000000000;;	// this software without specific prior written permission.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
0000000000000000000000000000000000000000;;	// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
0000000000000000000000000000000000000000;;	// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
0000000000000000000000000000000000000000;;	// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
0000000000000000000000000000000000000000;;	// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
0000000000000000000000000000000000000000;;	// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
0000000000000000000000000000000000000000;;	// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
0000000000000000000000000000000000000000;;	// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
0000000000000000000000000000000000000000;;	// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
8329b5f94b1a4a7919ce36cf38e5a9fa0715aaf4;Godeps/_workspace/src/github.com/gogo/protobuf/proto/message_set.go[Godeps/_workspace/src/github.com/gogo/protobuf/proto/message_set.go][vendor/github.com/golang/protobuf/proto/message_set.go];	
0000000000000000000000000000000000000000;;	package proto
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	 * Support for message sets.
0000000000000000000000000000000000000000;;	 */
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// errNoMessageTypeID occurs when a protocol buffer does not have a message type ID.
0000000000000000000000000000000000000000;;	// A message type ID is required for storing a protocol buffer in a message set.
0000000000000000000000000000000000000000;;	var errNoMessageTypeID = errors.New("proto does not have a message type ID")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The first two types (_MessageSet_Item and messageSet)
0000000000000000000000000000000000000000;;	// model what the protocol compiler produces for the following protocol message:
0000000000000000000000000000000000000000;;	//   message MessageSet {
0000000000000000000000000000000000000000;;	//     repeated group Item = 1 {
0000000000000000000000000000000000000000;;	//       required int32 type_id = 2;
0000000000000000000000000000000000000000;;	//       required string message = 3;
0000000000000000000000000000000000000000;;	//     };
0000000000000000000000000000000000000000;;	//   }
0000000000000000000000000000000000000000;;	// That is the MessageSet wire format. We can't use a proto to generate these
0000000000000000000000000000000000000000;;	// because that would introduce a circular dependency between it and this package.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type _MessageSet_Item struct {
0000000000000000000000000000000000000000;;		TypeId  *int32 `protobuf:"varint,2,req,name=type_id"`
0000000000000000000000000000000000000000;;		Message []byte `protobuf:"bytes,3,req,name=message"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type messageSet struct {
0000000000000000000000000000000000000000;;		Item             []*_MessageSet_Item `protobuf:"group,1,rep"`
0000000000000000000000000000000000000000;;		XXX_unrecognized []byte
0000000000000000000000000000000000000000;;		// TODO: caching?
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Make sure messageSet is a Message.
0000000000000000000000000000000000000000;;	var _ Message = (*messageSet)(nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// messageTypeIder is an interface satisfied by a protocol buffer type
0000000000000000000000000000000000000000;;	// that may be stored in a MessageSet.
0000000000000000000000000000000000000000;;	type messageTypeIder interface {
0000000000000000000000000000000000000000;;		MessageTypeId() int32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ms *messageSet) find(pb Message) *_MessageSet_Item {
0000000000000000000000000000000000000000;;		mti, ok := pb.(messageTypeIder)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		id := mti.MessageTypeId()
0000000000000000000000000000000000000000;;		for _, item := range ms.Item {
0000000000000000000000000000000000000000;;			if *item.TypeId == id {
0000000000000000000000000000000000000000;;				return item
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ms *messageSet) Has(pb Message) bool {
0000000000000000000000000000000000000000;;		if ms.find(pb) != nil {
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ms *messageSet) Unmarshal(pb Message) error {
0000000000000000000000000000000000000000;;		if item := ms.find(pb); item != nil {
0000000000000000000000000000000000000000;;			return Unmarshal(item.Message, pb)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, ok := pb.(messageTypeIder); !ok {
0000000000000000000000000000000000000000;;			return errNoMessageTypeID
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil // TODO: return error instead?
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ms *messageSet) Marshal(pb Message) error {
0000000000000000000000000000000000000000;;		msg, err := Marshal(pb)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if item := ms.find(pb); item != nil {
0000000000000000000000000000000000000000;;			// reuse existing item
0000000000000000000000000000000000000000;;			item.Message = msg
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		mti, ok := pb.(messageTypeIder)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return errNoMessageTypeID
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		mtid := mti.MessageTypeId()
0000000000000000000000000000000000000000;;		ms.Item = append(ms.Item, &_MessageSet_Item{
0000000000000000000000000000000000000000;;			TypeId:  &mtid,
0000000000000000000000000000000000000000;;			Message: msg,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ms *messageSet) Reset()         { *ms = messageSet{} }
0000000000000000000000000000000000000000;;	func (ms *messageSet) String() string { return CompactTextString(ms) }
0000000000000000000000000000000000000000;;	func (*messageSet) ProtoMessage()     {}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Support for the message_set_wire_format message option.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func skipVarint(buf []byte) []byte {
0000000000000000000000000000000000000000;;		i := 0
0000000000000000000000000000000000000000;;		for ; buf[i]&0x80 != 0; i++ {
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return buf[i+1:]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalMessageSet encodes the extension map represented by m in the message set wire format.
0000000000000000000000000000000000000000;;	// It is called by generated Marshal methods on protocol buffer messages with the message_set_wire_format option.
0000000000000000000000000000000000000000;;	func MarshalMessageSet(exts interface{}) ([]byte, error) {
0000000000000000000000000000000000000000;;		var m map[int32]Extension
0000000000000000000000000000000000000000;;		switch exts := exts.(type) {
0000000000000000000000000000000000000000;;		case *XXX_InternalExtensions:
0000000000000000000000000000000000000000;;			if err := encodeExtensions(exts); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			m, _ = exts.extensionsRead()
0000000000000000000000000000000000000000;;		case map[int32]Extension:
0000000000000000000000000000000000000000;;			if err := encodeExtensionsMap(exts); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			m = exts
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return nil, errors.New("proto: not an extension map")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Sort extension IDs to provide a deterministic encoding.
0000000000000000000000000000000000000000;;		// See also enc_map in encode.go.
0000000000000000000000000000000000000000;;		ids := make([]int, 0, len(m))
0000000000000000000000000000000000000000;;		for id := range m {
0000000000000000000000000000000000000000;;			ids = append(ids, int(id))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sort.Ints(ids)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ms := &messageSet{Item: make([]*_MessageSet_Item, 0, len(m))}
0000000000000000000000000000000000000000;;		for _, id := range ids {
0000000000000000000000000000000000000000;;			e := m[int32(id)]
0000000000000000000000000000000000000000;;			// Remove the wire type and field number varint, as well as the length varint.
0000000000000000000000000000000000000000;;			msg := skipVarint(skipVarint(e.enc))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			ms.Item = append(ms.Item, &_MessageSet_Item{
0000000000000000000000000000000000000000;;				TypeId:  Int32(int32(id)),
0000000000000000000000000000000000000000;;				Message: msg,
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return Marshal(ms)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalMessageSet decodes the extension map encoded in buf in the message set wire format.
0000000000000000000000000000000000000000;;	// It is called by generated Unmarshal methods on protocol buffer messages with the message_set_wire_format option.
0000000000000000000000000000000000000000;;	func UnmarshalMessageSet(buf []byte, exts interface{}) error {
0000000000000000000000000000000000000000;;		var m map[int32]Extension
0000000000000000000000000000000000000000;;		switch exts := exts.(type) {
0000000000000000000000000000000000000000;;		case *XXX_InternalExtensions:
0000000000000000000000000000000000000000;;			m = exts.extensionsWrite()
0000000000000000000000000000000000000000;;		case map[int32]Extension:
0000000000000000000000000000000000000000;;			m = exts
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return errors.New("proto: not an extension map")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ms := new(messageSet)
0000000000000000000000000000000000000000;;		if err := Unmarshal(buf, ms); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, item := range ms.Item {
0000000000000000000000000000000000000000;;			id := *item.TypeId
0000000000000000000000000000000000000000;;			msg := item.Message
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Restore wire type and field number varint, plus length varint.
0000000000000000000000000000000000000000;;			// Be careful to preserve duplicate items.
0000000000000000000000000000000000000000;;			b := EncodeVarint(uint64(id)<<3 | WireBytes)
0000000000000000000000000000000000000000;;			if ext, ok := m[id]; ok {
0000000000000000000000000000000000000000;;				// Existing data; rip off the tag and length varint
0000000000000000000000000000000000000000;;				// so we join the new data correctly.
0000000000000000000000000000000000000000;;				// We can assume that ext.enc is set because we are unmarshaling.
0000000000000000000000000000000000000000;;				o := ext.enc[len(b):]   // skip wire type and field number
0000000000000000000000000000000000000000;;				_, n := DecodeVarint(o) // calculate length of length varint
0000000000000000000000000000000000000000;;				o = o[n:]               // skip length varint
0000000000000000000000000000000000000000;;				msg = append(o, msg...) // join old data and new data
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			b = append(b, EncodeVarint(uint64(len(msg)))...)
0000000000000000000000000000000000000000;;			b = append(b, msg...)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			m[id] = Extension{enc: b}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalMessageSetJSON encodes the extension map represented by m in JSON format.
0000000000000000000000000000000000000000;;	// It is called by generated MarshalJSON methods on protocol buffer messages with the message_set_wire_format option.
0000000000000000000000000000000000000000;;	func MarshalMessageSetJSON(exts interface{}) ([]byte, error) {
0000000000000000000000000000000000000000;;		var m map[int32]Extension
0000000000000000000000000000000000000000;;		switch exts := exts.(type) {
0000000000000000000000000000000000000000;;		case *XXX_InternalExtensions:
0000000000000000000000000000000000000000;;			m, _ = exts.extensionsRead()
0000000000000000000000000000000000000000;;		case map[int32]Extension:
0000000000000000000000000000000000000000;;			m = exts
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return nil, errors.New("proto: not an extension map")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var b bytes.Buffer
0000000000000000000000000000000000000000;;		b.WriteByte('{')
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Process the map in key order for deterministic output.
0000000000000000000000000000000000000000;;		ids := make([]int32, 0, len(m))
0000000000000000000000000000000000000000;;		for id := range m {
0000000000000000000000000000000000000000;;			ids = append(ids, id)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sort.Sort(int32Slice(ids)) // int32Slice defined in text.go
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, id := range ids {
0000000000000000000000000000000000000000;;			ext := m[id]
0000000000000000000000000000000000000000;;			if i > 0 {
0000000000000000000000000000000000000000;;				b.WriteByte(',')
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			msd, ok := messageSetMap[id]
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				// Unknown type; we can't render it, so skip it.
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			fmt.Fprintf(&b, `"[%s]":`, msd.name)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			x := ext.value
0000000000000000000000000000000000000000;;			if x == nil {
0000000000000000000000000000000000000000;;				x = reflect.New(msd.t.Elem()).Interface()
0000000000000000000000000000000000000000;;				if err := Unmarshal(ext.enc, x.(Message)); err != nil {
0000000000000000000000000000000000000000;;					return nil, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			d, err := json.Marshal(x)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			b.Write(d)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		b.WriteByte('}')
0000000000000000000000000000000000000000;;		return b.Bytes(), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalMessageSetJSON decodes the extension map encoded in buf in JSON format.
0000000000000000000000000000000000000000;;	// It is called by generated UnmarshalJSON methods on protocol buffer messages with the message_set_wire_format option.
0000000000000000000000000000000000000000;;	func UnmarshalMessageSetJSON(buf []byte, exts interface{}) error {
0000000000000000000000000000000000000000;;		// Common-case fast path.
0000000000000000000000000000000000000000;;		if len(buf) == 0 || bytes.Equal(buf, []byte("{}")) {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// This is fairly tricky, and it's not clear that it is needed.
0000000000000000000000000000000000000000;;		return errors.New("TODO: UnmarshalMessageSetJSON not yet implemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A global registry of types that can be used in a MessageSet.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var messageSetMap = make(map[int32]messageSetDesc)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type messageSetDesc struct {
0000000000000000000000000000000000000000;;		t    reflect.Type // pointer to struct
0000000000000000000000000000000000000000;;		name string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RegisterMessageSetType is called from the generated code.
0000000000000000000000000000000000000000;;	func RegisterMessageSetType(m Message, fieldNum int32, name string) {
0000000000000000000000000000000000000000;;		messageSetMap[fieldNum] = messageSetDesc{
0000000000000000000000000000000000000000;;			t:    reflect.TypeOf(m),
0000000000000000000000000000000000000000;;			name: name,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
