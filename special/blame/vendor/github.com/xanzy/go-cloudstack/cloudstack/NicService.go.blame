0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Copyright 2016, Sander van Harmelen
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
0000000000000000000000000000000000000000;;	//
0a16da49b5158d8aef850f86fc8936f4afa6c64a;;	
0000000000000000000000000000000000000000;;	package cloudstack
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddIpToNicParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AddIpToNicParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["ipaddress"]; found {
0000000000000000000000000000000000000000;;			u.Set("ipaddress", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["nicid"]; found {
0000000000000000000000000000000000000000;;			u.Set("nicid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AddIpToNicParams) SetIpaddress(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["ipaddress"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AddIpToNicParams) SetNicid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["nicid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new AddIpToNicParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *NicService) NewAddIpToNicParams(nicid string) *AddIpToNicParams {
0000000000000000000000000000000000000000;;		p := &AddIpToNicParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["nicid"] = nicid
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Assigns secondary IP to NIC
0000000000000000000000000000000000000000;;	func (s *NicService) AddIpToNic(p *AddIpToNicParams) (*AddIpToNicResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("addIpToNic", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r AddIpToNicResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddIpToNicResponse struct {
0000000000000000000000000000000000000000;;		JobID            string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Id               string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Ipaddress        string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;		Networkid        string `json:"networkid,omitempty"`
0000000000000000000000000000000000000000;;		Nicid            string `json:"nicid,omitempty"`
0000000000000000000000000000000000000000;;		Virtualmachineid string `json:"virtualmachineid,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveIpFromNicParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *RemoveIpFromNicParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *RemoveIpFromNicParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new RemoveIpFromNicParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *NicService) NewRemoveIpFromNicParams(id string) *RemoveIpFromNicParams {
0000000000000000000000000000000000000000;;		p := &RemoveIpFromNicParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Removes secondary IP from the NIC.
0000000000000000000000000000000000000000;;	func (s *NicService) RemoveIpFromNic(p *RemoveIpFromNicParams) (*RemoveIpFromNicResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("removeIpFromNic", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r RemoveIpFromNicResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveIpFromNicResponse struct {
0000000000000000000000000000000000000000;;		JobID       string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Displaytext string `json:"displaytext,omitempty"`
0000000000000000000000000000000000000000;;		Success     bool   `json:"success,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateVmNicIpParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateVmNicIpParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["ipaddress"]; found {
0000000000000000000000000000000000000000;;			u.Set("ipaddress", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["nicid"]; found {
0000000000000000000000000000000000000000;;			u.Set("nicid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateVmNicIpParams) SetIpaddress(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["ipaddress"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateVmNicIpParams) SetNicid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["nicid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new UpdateVmNicIpParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *NicService) NewUpdateVmNicIpParams(nicid string) *UpdateVmNicIpParams {
0000000000000000000000000000000000000000;;		p := &UpdateVmNicIpParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["nicid"] = nicid
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Update the default Ip of a VM Nic
0000000000000000000000000000000000000000;;	func (s *NicService) UpdateVmNicIp(p *UpdateVmNicIpParams) (*UpdateVmNicIpResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("updateVmNicIp", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r UpdateVmNicIpResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateVmNicIpResponse struct {
0000000000000000000000000000000000000000;;		JobID         string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Account       string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Affinitygroup []struct {
0000000000000000000000000000000000000000;;			Account           string   `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Description       string   `json:"description,omitempty"`
0000000000000000000000000000000000000000;;			Domain            string   `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid          string   `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Id                string   `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Name              string   `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Project           string   `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid         string   `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Type              string   `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			VirtualmachineIds []string `json:"virtualmachineIds,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"affinitygroup,omitempty"`
0000000000000000000000000000000000000000;;		Cpunumber             int               `json:"cpunumber,omitempty"`
0000000000000000000000000000000000000000;;		Cpuspeed              int               `json:"cpuspeed,omitempty"`
0000000000000000000000000000000000000000;;		Cpuused               string            `json:"cpuused,omitempty"`
0000000000000000000000000000000000000000;;		Created               string            `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Details               map[string]string `json:"details,omitempty"`
0000000000000000000000000000000000000000;;		Diskioread            int64             `json:"diskioread,omitempty"`
0000000000000000000000000000000000000000;;		Diskiowrite           int64             `json:"diskiowrite,omitempty"`
0000000000000000000000000000000000000000;;		Diskkbsread           int64             `json:"diskkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Diskkbswrite          int64             `json:"diskkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingid        string            `json:"diskofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingname      string            `json:"diskofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Displayname           string            `json:"displayname,omitempty"`
0000000000000000000000000000000000000000;;		Displayvm             bool              `json:"displayvm,omitempty"`
0000000000000000000000000000000000000000;;		Domain                string            `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid              string            `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Forvirtualnetwork     bool              `json:"forvirtualnetwork,omitempty"`
0000000000000000000000000000000000000000;;		Group                 string            `json:"group,omitempty"`
0000000000000000000000000000000000000000;;		Groupid               string            `json:"groupid,omitempty"`
0000000000000000000000000000000000000000;;		Guestosid             string            `json:"guestosid,omitempty"`
0000000000000000000000000000000000000000;;		Haenable              bool              `json:"haenable,omitempty"`
0000000000000000000000000000000000000000;;		Hostid                string            `json:"hostid,omitempty"`
0000000000000000000000000000000000000000;;		Hostname              string            `json:"hostname,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor            string            `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Id                    string            `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Instancename          string            `json:"instancename,omitempty"`
0000000000000000000000000000000000000000;;		Isdynamicallyscalable bool              `json:"isdynamicallyscalable,omitempty"`
0000000000000000000000000000000000000000;;		Isodisplaytext        string            `json:"isodisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Isoid                 string            `json:"isoid,omitempty"`
0000000000000000000000000000000000000000;;		Isoname               string            `json:"isoname,omitempty"`
0000000000000000000000000000000000000000;;		Keypair               string            `json:"keypair,omitempty"`
0000000000000000000000000000000000000000;;		Memory                int               `json:"memory,omitempty"`
0000000000000000000000000000000000000000;;		Name                  string            `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbsread        int64             `json:"networkkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbswrite       int64             `json:"networkkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Nic                   []struct {
0000000000000000000000000000000000000000;;			Broadcasturi string `json:"broadcasturi,omitempty"`
0000000000000000000000000000000000000000;;			Deviceid     string `json:"deviceid,omitempty"`
0000000000000000000000000000000000000000;;			Gateway      string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;			Id           string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ip6address   string `json:"ip6address,omitempty"`
0000000000000000000000000000000000000000;;			Ip6cidr      string `json:"ip6cidr,omitempty"`
0000000000000000000000000000000000000000;;			Ip6gateway   string `json:"ip6gateway,omitempty"`
0000000000000000000000000000000000000000;;			Ipaddress    string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			Isdefault    bool   `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;			Isolationuri string `json:"isolationuri,omitempty"`
0000000000000000000000000000000000000000;;			Macaddress   string `json:"macaddress,omitempty"`
0000000000000000000000000000000000000000;;			Netmask      string `json:"netmask,omitempty"`
0000000000000000000000000000000000000000;;			Networkid    string `json:"networkid,omitempty"`
0000000000000000000000000000000000000000;;			Networkname  string `json:"networkname,omitempty"`
0000000000000000000000000000000000000000;;			Secondaryip  []struct {
0000000000000000000000000000000000000000;;				Id        string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;				Ipaddress string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"secondaryip,omitempty"`
0000000000000000000000000000000000000000;;			Traffictype      string `json:"traffictype,omitempty"`
0000000000000000000000000000000000000000;;			Type             string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachineid string `json:"virtualmachineid,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"nic,omitempty"`
0000000000000000000000000000000000000000;;		Ostypeid        int64  `json:"ostypeid,omitempty"`
0000000000000000000000000000000000000000;;		Password        string `json:"password,omitempty"`
0000000000000000000000000000000000000000;;		Passwordenabled bool   `json:"passwordenabled,omitempty"`
0000000000000000000000000000000000000000;;		Project         string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid       string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;		Publicip        string `json:"publicip,omitempty"`
0000000000000000000000000000000000000000;;		Publicipid      string `json:"publicipid,omitempty"`
0000000000000000000000000000000000000000;;		Rootdeviceid    int64  `json:"rootdeviceid,omitempty"`
0000000000000000000000000000000000000000;;		Rootdevicetype  string `json:"rootdevicetype,omitempty"`
0000000000000000000000000000000000000000;;		Securitygroup   []struct {
0000000000000000000000000000000000000000;;			Account     string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Description string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;			Domain      string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid    string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Egressrule  []struct {
0000000000000000000000000000000000000000;;				Account           string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Cidr              string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;				Endport           int    `json:"endport,omitempty"`
0000000000000000000000000000000000000000;;				Icmpcode          int    `json:"icmpcode,omitempty"`
0000000000000000000000000000000000000000;;				Icmptype          int    `json:"icmptype,omitempty"`
0000000000000000000000000000000000000000;;				Protocol          string `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;				Ruleid            string `json:"ruleid,omitempty"`
0000000000000000000000000000000000000000;;				Securitygroupname string `json:"securitygroupname,omitempty"`
0000000000000000000000000000000000000000;;				Startport         int    `json:"startport,omitempty"`
0000000000000000000000000000000000000000;;				Tags              []struct {
0000000000000000000000000000000000000000;;					Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;					Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;					Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;					Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;					Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;					Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;					Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;					Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;					Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;					Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"egressrule,omitempty"`
0000000000000000000000000000000000000000;;			Id          string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ingressrule []struct {
0000000000000000000000000000000000000000;;				Account           string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Cidr              string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;				Endport           int    `json:"endport,omitempty"`
0000000000000000000000000000000000000000;;				Icmpcode          int    `json:"icmpcode,omitempty"`
0000000000000000000000000000000000000000;;				Icmptype          int    `json:"icmptype,omitempty"`
0000000000000000000000000000000000000000;;				Protocol          string `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;				Ruleid            string `json:"ruleid,omitempty"`
0000000000000000000000000000000000000000;;				Securitygroupname string `json:"securitygroupname,omitempty"`
0000000000000000000000000000000000000000;;				Startport         int    `json:"startport,omitempty"`
0000000000000000000000000000000000000000;;				Tags              []struct {
0000000000000000000000000000000000000000;;					Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;					Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;					Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;					Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;					Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;					Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;					Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;					Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;					Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;					Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"ingressrule,omitempty"`
0000000000000000000000000000000000000000;;			Name      string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Project   string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Tags      []struct {
0000000000000000000000000000000000000000;;				Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;				Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;				Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;				Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;				Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;				Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;				Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;				Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;				Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachinecount int      `json:"virtualmachinecount,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachineids   []string `json:"virtualmachineids,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"securitygroup,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingid   string `json:"serviceofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingname string `json:"serviceofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Servicestate        string `json:"servicestate,omitempty"`
0000000000000000000000000000000000000000;;		State               string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Tags                []struct {
0000000000000000000000000000000000000000;;			Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;			Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;			Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;			Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;			Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Templatedisplaytext string `json:"templatedisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Templateid          string `json:"templateid,omitempty"`
0000000000000000000000000000000000000000;;		Templatename        string `json:"templatename,omitempty"`
0000000000000000000000000000000000000000;;		Userid              string `json:"userid,omitempty"`
0000000000000000000000000000000000000000;;		Username            string `json:"username,omitempty"`
0000000000000000000000000000000000000000;;		Vgpu                string `json:"vgpu,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid              string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename            string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListNicsParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListNicsParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["fordisplay"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("fordisplay", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["keyword"]; found {
0000000000000000000000000000000000000000;;			u.Set("keyword", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["networkid"]; found {
0000000000000000000000000000000000000000;;			u.Set("networkid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["nicid"]; found {
0000000000000000000000000000000000000000;;			u.Set("nicid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["page"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.Itoa(v.(int))
0000000000000000000000000000000000000000;;			u.Set("page", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["pagesize"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.Itoa(v.(int))
0000000000000000000000000000000000000000;;			u.Set("pagesize", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["virtualmachineid"]; found {
0000000000000000000000000000000000000000;;			u.Set("virtualmachineid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListNicsParams) SetFordisplay(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["fordisplay"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListNicsParams) SetKeyword(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["keyword"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListNicsParams) SetNetworkid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["networkid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListNicsParams) SetNicid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["nicid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListNicsParams) SetPage(v int) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["page"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListNicsParams) SetPagesize(v int) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["pagesize"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListNicsParams) SetVirtualmachineid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["virtualmachineid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new ListNicsParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *NicService) NewListNicsParams(virtualmachineid string) *ListNicsParams {
0000000000000000000000000000000000000000;;		p := &ListNicsParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["virtualmachineid"] = virtualmachineid
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// list the vm nics  IP to NIC
0000000000000000000000000000000000000000;;	func (s *NicService) ListNics(p *ListNicsParams) (*ListNicsResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("listNics", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r ListNicsResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListNicsResponse struct {
0000000000000000000000000000000000000000;;		Count int    `json:"count"`
0000000000000000000000000000000000000000;;		Nics  []*Nic `json:"nic"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Nic struct {
0000000000000000000000000000000000000000;;		Broadcasturi string `json:"broadcasturi,omitempty"`
0000000000000000000000000000000000000000;;		Deviceid     string `json:"deviceid,omitempty"`
0000000000000000000000000000000000000000;;		Gateway      string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;		Id           string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Ip6address   string `json:"ip6address,omitempty"`
0000000000000000000000000000000000000000;;		Ip6cidr      string `json:"ip6cidr,omitempty"`
0000000000000000000000000000000000000000;;		Ip6gateway   string `json:"ip6gateway,omitempty"`
0000000000000000000000000000000000000000;;		Ipaddress    string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;		Isdefault    bool   `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;		Isolationuri string `json:"isolationuri,omitempty"`
0000000000000000000000000000000000000000;;		Macaddress   string `json:"macaddress,omitempty"`
0000000000000000000000000000000000000000;;		Netmask      string `json:"netmask,omitempty"`
0000000000000000000000000000000000000000;;		Networkid    string `json:"networkid,omitempty"`
0000000000000000000000000000000000000000;;		Networkname  string `json:"networkname,omitempty"`
0000000000000000000000000000000000000000;;		Secondaryip  []struct {
0000000000000000000000000000000000000000;;			Id        string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ipaddress string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"secondaryip,omitempty"`
0000000000000000000000000000000000000000;;		Traffictype      string `json:"traffictype,omitempty"`
0000000000000000000000000000000000000000;;		Type             string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Virtualmachineid string `json:"virtualmachineid,omitempty"`
0000000000000000000000000000000000000000;;	}
