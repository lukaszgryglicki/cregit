0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Copyright 2016, Sander van Harmelen
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
0000000000000000000000000000000000000000;;	//
0a16da49b5158d8aef850f86fc8936f4afa6c64a;;	
0000000000000000000000000000000000000000;;	package cloudstack
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateDomainParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateDomainParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["domainid"]; found {
0000000000000000000000000000000000000000;;			u.Set("domainid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["name"]; found {
0000000000000000000000000000000000000000;;			u.Set("name", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["networkdomain"]; found {
0000000000000000000000000000000000000000;;			u.Set("networkdomain", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["parentdomainid"]; found {
0000000000000000000000000000000000000000;;			u.Set("parentdomainid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateDomainParams) SetDomainid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["domainid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateDomainParams) SetName(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["name"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateDomainParams) SetNetworkdomain(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["networkdomain"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateDomainParams) SetParentdomainid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["parentdomainid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new CreateDomainParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *DomainService) NewCreateDomainParams(name string) *CreateDomainParams {
0000000000000000000000000000000000000000;;		p := &CreateDomainParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["name"] = name
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Creates a domain
0000000000000000000000000000000000000000;;	func (s *DomainService) CreateDomain(p *CreateDomainParams) (*CreateDomainResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("createDomain", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r CreateDomainResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateDomainResponse struct {
0000000000000000000000000000000000000000;;		Cpuavailable              string `json:"cpuavailable,omitempty"`
0000000000000000000000000000000000000000;;		Cpulimit                  string `json:"cpulimit,omitempty"`
0000000000000000000000000000000000000000;;		Cputotal                  int64  `json:"cputotal,omitempty"`
0000000000000000000000000000000000000000;;		Haschild                  bool   `json:"haschild,omitempty"`
0000000000000000000000000000000000000000;;		Id                        string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Ipavailable               string `json:"ipavailable,omitempty"`
0000000000000000000000000000000000000000;;		Iplimit                   string `json:"iplimit,omitempty"`
0000000000000000000000000000000000000000;;		Iptotal                   int64  `json:"iptotal,omitempty"`
0000000000000000000000000000000000000000;;		Level                     int    `json:"level,omitempty"`
0000000000000000000000000000000000000000;;		Memoryavailable           string `json:"memoryavailable,omitempty"`
0000000000000000000000000000000000000000;;		Memorylimit               string `json:"memorylimit,omitempty"`
0000000000000000000000000000000000000000;;		Memorytotal               int64  `json:"memorytotal,omitempty"`
0000000000000000000000000000000000000000;;		Name                      string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkavailable          string `json:"networkavailable,omitempty"`
0000000000000000000000000000000000000000;;		Networkdomain             string `json:"networkdomain,omitempty"`
0000000000000000000000000000000000000000;;		Networklimit              string `json:"networklimit,omitempty"`
0000000000000000000000000000000000000000;;		Networktotal              int64  `json:"networktotal,omitempty"`
0000000000000000000000000000000000000000;;		Parentdomainid            string `json:"parentdomainid,omitempty"`
0000000000000000000000000000000000000000;;		Parentdomainname          string `json:"parentdomainname,omitempty"`
0000000000000000000000000000000000000000;;		Path                      string `json:"path,omitempty"`
0000000000000000000000000000000000000000;;		Primarystorageavailable   string `json:"primarystorageavailable,omitempty"`
0000000000000000000000000000000000000000;;		Primarystoragelimit       string `json:"primarystoragelimit,omitempty"`
0000000000000000000000000000000000000000;;		Primarystoragetotal       int64  `json:"primarystoragetotal,omitempty"`
0000000000000000000000000000000000000000;;		Projectavailable          string `json:"projectavailable,omitempty"`
0000000000000000000000000000000000000000;;		Projectlimit              string `json:"projectlimit,omitempty"`
0000000000000000000000000000000000000000;;		Projecttotal              int64  `json:"projecttotal,omitempty"`
0000000000000000000000000000000000000000;;		Secondarystorageavailable string `json:"secondarystorageavailable,omitempty"`
0000000000000000000000000000000000000000;;		Secondarystoragelimit     string `json:"secondarystoragelimit,omitempty"`
0000000000000000000000000000000000000000;;		Secondarystoragetotal     int64  `json:"secondarystoragetotal,omitempty"`
0000000000000000000000000000000000000000;;		Snapshotavailable         string `json:"snapshotavailable,omitempty"`
0000000000000000000000000000000000000000;;		Snapshotlimit             string `json:"snapshotlimit,omitempty"`
0000000000000000000000000000000000000000;;		Snapshottotal             int64  `json:"snapshottotal,omitempty"`
0000000000000000000000000000000000000000;;		State                     string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Templateavailable         string `json:"templateavailable,omitempty"`
0000000000000000000000000000000000000000;;		Templatelimit             string `json:"templatelimit,omitempty"`
0000000000000000000000000000000000000000;;		Templatetotal             int64  `json:"templatetotal,omitempty"`
0000000000000000000000000000000000000000;;		Vmavailable               string `json:"vmavailable,omitempty"`
0000000000000000000000000000000000000000;;		Vmlimit                   string `json:"vmlimit,omitempty"`
0000000000000000000000000000000000000000;;		Vmtotal                   int64  `json:"vmtotal,omitempty"`
0000000000000000000000000000000000000000;;		Volumeavailable           string `json:"volumeavailable,omitempty"`
0000000000000000000000000000000000000000;;		Volumelimit               string `json:"volumelimit,omitempty"`
0000000000000000000000000000000000000000;;		Volumetotal               int64  `json:"volumetotal,omitempty"`
0000000000000000000000000000000000000000;;		Vpcavailable              string `json:"vpcavailable,omitempty"`
0000000000000000000000000000000000000000;;		Vpclimit                  string `json:"vpclimit,omitempty"`
0000000000000000000000000000000000000000;;		Vpctotal                  int64  `json:"vpctotal,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateDomainParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateDomainParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["name"]; found {
0000000000000000000000000000000000000000;;			u.Set("name", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["networkdomain"]; found {
0000000000000000000000000000000000000000;;			u.Set("networkdomain", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateDomainParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateDomainParams) SetName(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["name"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateDomainParams) SetNetworkdomain(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["networkdomain"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new UpdateDomainParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *DomainService) NewUpdateDomainParams(id string) *UpdateDomainParams {
0000000000000000000000000000000000000000;;		p := &UpdateDomainParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Updates a domain with a new name
0000000000000000000000000000000000000000;;	func (s *DomainService) UpdateDomain(p *UpdateDomainParams) (*UpdateDomainResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("updateDomain", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r UpdateDomainResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateDomainResponse struct {
0000000000000000000000000000000000000000;;		Cpuavailable              string `json:"cpuavailable,omitempty"`
0000000000000000000000000000000000000000;;		Cpulimit                  string `json:"cpulimit,omitempty"`
0000000000000000000000000000000000000000;;		Cputotal                  int64  `json:"cputotal,omitempty"`
0000000000000000000000000000000000000000;;		Haschild                  bool   `json:"haschild,omitempty"`
0000000000000000000000000000000000000000;;		Id                        string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Ipavailable               string `json:"ipavailable,omitempty"`
0000000000000000000000000000000000000000;;		Iplimit                   string `json:"iplimit,omitempty"`
0000000000000000000000000000000000000000;;		Iptotal                   int64  `json:"iptotal,omitempty"`
0000000000000000000000000000000000000000;;		Level                     int    `json:"level,omitempty"`
0000000000000000000000000000000000000000;;		Memoryavailable           string `json:"memoryavailable,omitempty"`
0000000000000000000000000000000000000000;;		Memorylimit               string `json:"memorylimit,omitempty"`
0000000000000000000000000000000000000000;;		Memorytotal               int64  `json:"memorytotal,omitempty"`
0000000000000000000000000000000000000000;;		Name                      string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkavailable          string `json:"networkavailable,omitempty"`
0000000000000000000000000000000000000000;;		Networkdomain             string `json:"networkdomain,omitempty"`
0000000000000000000000000000000000000000;;		Networklimit              string `json:"networklimit,omitempty"`
0000000000000000000000000000000000000000;;		Networktotal              int64  `json:"networktotal,omitempty"`
0000000000000000000000000000000000000000;;		Parentdomainid            string `json:"parentdomainid,omitempty"`
0000000000000000000000000000000000000000;;		Parentdomainname          string `json:"parentdomainname,omitempty"`
0000000000000000000000000000000000000000;;		Path                      string `json:"path,omitempty"`
0000000000000000000000000000000000000000;;		Primarystorageavailable   string `json:"primarystorageavailable,omitempty"`
0000000000000000000000000000000000000000;;		Primarystoragelimit       string `json:"primarystoragelimit,omitempty"`
0000000000000000000000000000000000000000;;		Primarystoragetotal       int64  `json:"primarystoragetotal,omitempty"`
0000000000000000000000000000000000000000;;		Projectavailable          string `json:"projectavailable,omitempty"`
0000000000000000000000000000000000000000;;		Projectlimit              string `json:"projectlimit,omitempty"`
0000000000000000000000000000000000000000;;		Projecttotal              int64  `json:"projecttotal,omitempty"`
0000000000000000000000000000000000000000;;		Secondarystorageavailable string `json:"secondarystorageavailable,omitempty"`
0000000000000000000000000000000000000000;;		Secondarystoragelimit     string `json:"secondarystoragelimit,omitempty"`
0000000000000000000000000000000000000000;;		Secondarystoragetotal     int64  `json:"secondarystoragetotal,omitempty"`
0000000000000000000000000000000000000000;;		Snapshotavailable         string `json:"snapshotavailable,omitempty"`
0000000000000000000000000000000000000000;;		Snapshotlimit             string `json:"snapshotlimit,omitempty"`
0000000000000000000000000000000000000000;;		Snapshottotal             int64  `json:"snapshottotal,omitempty"`
0000000000000000000000000000000000000000;;		State                     string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Templateavailable         string `json:"templateavailable,omitempty"`
0000000000000000000000000000000000000000;;		Templatelimit             string `json:"templatelimit,omitempty"`
0000000000000000000000000000000000000000;;		Templatetotal             int64  `json:"templatetotal,omitempty"`
0000000000000000000000000000000000000000;;		Vmavailable               string `json:"vmavailable,omitempty"`
0000000000000000000000000000000000000000;;		Vmlimit                   string `json:"vmlimit,omitempty"`
0000000000000000000000000000000000000000;;		Vmtotal                   int64  `json:"vmtotal,omitempty"`
0000000000000000000000000000000000000000;;		Volumeavailable           string `json:"volumeavailable,omitempty"`
0000000000000000000000000000000000000000;;		Volumelimit               string `json:"volumelimit,omitempty"`
0000000000000000000000000000000000000000;;		Volumetotal               int64  `json:"volumetotal,omitempty"`
0000000000000000000000000000000000000000;;		Vpcavailable              string `json:"vpcavailable,omitempty"`
0000000000000000000000000000000000000000;;		Vpclimit                  string `json:"vpclimit,omitempty"`
0000000000000000000000000000000000000000;;		Vpctotal                  int64  `json:"vpctotal,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteDomainParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeleteDomainParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["cleanup"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("cleanup", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeleteDomainParams) SetCleanup(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["cleanup"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeleteDomainParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new DeleteDomainParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *DomainService) NewDeleteDomainParams(id string) *DeleteDomainParams {
0000000000000000000000000000000000000000;;		p := &DeleteDomainParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Deletes a specified domain
0000000000000000000000000000000000000000;;	func (s *DomainService) DeleteDomain(p *DeleteDomainParams) (*DeleteDomainResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("deleteDomain", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r DeleteDomainResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteDomainResponse struct {
0000000000000000000000000000000000000000;;		JobID       string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Displaytext string `json:"displaytext,omitempty"`
0000000000000000000000000000000000000000;;		Success     bool   `json:"success,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListDomainsParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListDomainsParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["keyword"]; found {
0000000000000000000000000000000000000000;;			u.Set("keyword", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["level"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.Itoa(v.(int))
0000000000000000000000000000000000000000;;			u.Set("level", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["listall"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("listall", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["name"]; found {
0000000000000000000000000000000000000000;;			u.Set("name", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["page"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.Itoa(v.(int))
0000000000000000000000000000000000000000;;			u.Set("page", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["pagesize"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.Itoa(v.(int))
0000000000000000000000000000000000000000;;			u.Set("pagesize", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListDomainsParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListDomainsParams) SetKeyword(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["keyword"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListDomainsParams) SetLevel(v int) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["level"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListDomainsParams) SetListall(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["listall"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListDomainsParams) SetName(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["name"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListDomainsParams) SetPage(v int) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["page"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListDomainsParams) SetPagesize(v int) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["pagesize"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new ListDomainsParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *DomainService) NewListDomainsParams() *ListDomainsParams {
0000000000000000000000000000000000000000;;		p := &ListDomainsParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is a courtesy helper function, which in some cases may not work as expected!
0000000000000000000000000000000000000000;;	func (s *DomainService) GetDomainID(name string, opts ...OptionFunc) (string, int, error) {
0000000000000000000000000000000000000000;;		p := &ListDomainsParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.p["name"] = name
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, fn := range opts {
0000000000000000000000000000000000000000;;			if err := fn(s.cs, p); err != nil {
0000000000000000000000000000000000000000;;				return "", -1, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		l, err := s.ListDomains(p)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", -1, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 0 {
0000000000000000000000000000000000000000;;			return "", l.Count, fmt.Errorf("No match found for %s: %+v", name, l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 1 {
0000000000000000000000000000000000000000;;			return l.Domains[0].Id, l.Count, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count > 1 {
0000000000000000000000000000000000000000;;			for _, v := range l.Domains {
0000000000000000000000000000000000000000;;				if v.Name == name {
0000000000000000000000000000000000000000;;					return v.Id, l.Count, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "", l.Count, fmt.Errorf("Could not find an exact match for %s: %+v", name, l)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is a courtesy helper function, which in some cases may not work as expected!
0000000000000000000000000000000000000000;;	func (s *DomainService) GetDomainByName(name string, opts ...OptionFunc) (*Domain, int, error) {
0000000000000000000000000000000000000000;;		id, count, err := s.GetDomainID(name, opts...)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, count, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r, count, err := s.GetDomainByID(id, opts...)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, count, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return r, count, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is a courtesy helper function, which in some cases may not work as expected!
0000000000000000000000000000000000000000;;	func (s *DomainService) GetDomainByID(id string, opts ...OptionFunc) (*Domain, int, error) {
0000000000000000000000000000000000000000;;		p := &ListDomainsParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, fn := range opts {
0000000000000000000000000000000000000000;;			if err := fn(s.cs, p); err != nil {
0000000000000000000000000000000000000000;;				return nil, -1, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		l, err := s.ListDomains(p)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if strings.Contains(err.Error(), fmt.Sprintf(
0000000000000000000000000000000000000000;;				"Invalid parameter id value=%s due to incorrect long value format, "+
0000000000000000000000000000000000000000;;					"or entity does not exist", id)) {
0000000000000000000000000000000000000000;;				return nil, 0, fmt.Errorf("No match found for %s: %+v", id, l)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, -1, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 0 {
0000000000000000000000000000000000000000;;			return nil, l.Count, fmt.Errorf("No match found for %s: %+v", id, l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 1 {
0000000000000000000000000000000000000000;;			return l.Domains[0], l.Count, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, l.Count, fmt.Errorf("There is more then one result for Domain UUID: %s!", id)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Lists domains and provides detailed information for listed domains
0000000000000000000000000000000000000000;;	func (s *DomainService) ListDomains(p *ListDomainsParams) (*ListDomainsResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("listDomains", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r ListDomainsResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListDomainsResponse struct {
0000000000000000000000000000000000000000;;		Count   int       `json:"count"`
0000000000000000000000000000000000000000;;		Domains []*Domain `json:"domain"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Domain struct {
0000000000000000000000000000000000000000;;		Cpuavailable              string `json:"cpuavailable,omitempty"`
0000000000000000000000000000000000000000;;		Cpulimit                  string `json:"cpulimit,omitempty"`
0000000000000000000000000000000000000000;;		Cputotal                  int64  `json:"cputotal,omitempty"`
0000000000000000000000000000000000000000;;		Haschild                  bool   `json:"haschild,omitempty"`
0000000000000000000000000000000000000000;;		Id                        string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Ipavailable               string `json:"ipavailable,omitempty"`
0000000000000000000000000000000000000000;;		Iplimit                   string `json:"iplimit,omitempty"`
0000000000000000000000000000000000000000;;		Iptotal                   int64  `json:"iptotal,omitempty"`
0000000000000000000000000000000000000000;;		Level                     int    `json:"level,omitempty"`
0000000000000000000000000000000000000000;;		Memoryavailable           string `json:"memoryavailable,omitempty"`
0000000000000000000000000000000000000000;;		Memorylimit               string `json:"memorylimit,omitempty"`
0000000000000000000000000000000000000000;;		Memorytotal               int64  `json:"memorytotal,omitempty"`
0000000000000000000000000000000000000000;;		Name                      string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkavailable          string `json:"networkavailable,omitempty"`
0000000000000000000000000000000000000000;;		Networkdomain             string `json:"networkdomain,omitempty"`
0000000000000000000000000000000000000000;;		Networklimit              string `json:"networklimit,omitempty"`
0000000000000000000000000000000000000000;;		Networktotal              int64  `json:"networktotal,omitempty"`
0000000000000000000000000000000000000000;;		Parentdomainid            string `json:"parentdomainid,omitempty"`
0000000000000000000000000000000000000000;;		Parentdomainname          string `json:"parentdomainname,omitempty"`
0000000000000000000000000000000000000000;;		Path                      string `json:"path,omitempty"`
0000000000000000000000000000000000000000;;		Primarystorageavailable   string `json:"primarystorageavailable,omitempty"`
0000000000000000000000000000000000000000;;		Primarystoragelimit       string `json:"primarystoragelimit,omitempty"`
0000000000000000000000000000000000000000;;		Primarystoragetotal       int64  `json:"primarystoragetotal,omitempty"`
0000000000000000000000000000000000000000;;		Projectavailable          string `json:"projectavailable,omitempty"`
0000000000000000000000000000000000000000;;		Projectlimit              string `json:"projectlimit,omitempty"`
0000000000000000000000000000000000000000;;		Projecttotal              int64  `json:"projecttotal,omitempty"`
0000000000000000000000000000000000000000;;		Secondarystorageavailable string `json:"secondarystorageavailable,omitempty"`
0000000000000000000000000000000000000000;;		Secondarystoragelimit     string `json:"secondarystoragelimit,omitempty"`
0000000000000000000000000000000000000000;;		Secondarystoragetotal     int64  `json:"secondarystoragetotal,omitempty"`
0000000000000000000000000000000000000000;;		Snapshotavailable         string `json:"snapshotavailable,omitempty"`
0000000000000000000000000000000000000000;;		Snapshotlimit             string `json:"snapshotlimit,omitempty"`
0000000000000000000000000000000000000000;;		Snapshottotal             int64  `json:"snapshottotal,omitempty"`
0000000000000000000000000000000000000000;;		State                     string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Templateavailable         string `json:"templateavailable,omitempty"`
0000000000000000000000000000000000000000;;		Templatelimit             string `json:"templatelimit,omitempty"`
0000000000000000000000000000000000000000;;		Templatetotal             int64  `json:"templatetotal,omitempty"`
0000000000000000000000000000000000000000;;		Vmavailable               string `json:"vmavailable,omitempty"`
0000000000000000000000000000000000000000;;		Vmlimit                   string `json:"vmlimit,omitempty"`
0000000000000000000000000000000000000000;;		Vmtotal                   int64  `json:"vmtotal,omitempty"`
0000000000000000000000000000000000000000;;		Volumeavailable           string `json:"volumeavailable,omitempty"`
0000000000000000000000000000000000000000;;		Volumelimit               string `json:"volumelimit,omitempty"`
0000000000000000000000000000000000000000;;		Volumetotal               int64  `json:"volumetotal,omitempty"`
0000000000000000000000000000000000000000;;		Vpcavailable              string `json:"vpcavailable,omitempty"`
0000000000000000000000000000000000000000;;		Vpclimit                  string `json:"vpclimit,omitempty"`
0000000000000000000000000000000000000000;;		Vpctotal                  int64  `json:"vpctotal,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListDomainChildrenParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListDomainChildrenParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["isrecursive"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("isrecursive", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["keyword"]; found {
0000000000000000000000000000000000000000;;			u.Set("keyword", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["listall"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("listall", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["name"]; found {
0000000000000000000000000000000000000000;;			u.Set("name", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["page"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.Itoa(v.(int))
0000000000000000000000000000000000000000;;			u.Set("page", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["pagesize"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.Itoa(v.(int))
0000000000000000000000000000000000000000;;			u.Set("pagesize", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListDomainChildrenParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListDomainChildrenParams) SetIsrecursive(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["isrecursive"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListDomainChildrenParams) SetKeyword(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["keyword"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListDomainChildrenParams) SetListall(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["listall"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListDomainChildrenParams) SetName(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["name"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListDomainChildrenParams) SetPage(v int) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["page"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListDomainChildrenParams) SetPagesize(v int) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["pagesize"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new ListDomainChildrenParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *DomainService) NewListDomainChildrenParams() *ListDomainChildrenParams {
0000000000000000000000000000000000000000;;		p := &ListDomainChildrenParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is a courtesy helper function, which in some cases may not work as expected!
0000000000000000000000000000000000000000;;	func (s *DomainService) GetDomainChildrenID(name string, opts ...OptionFunc) (string, int, error) {
0000000000000000000000000000000000000000;;		p := &ListDomainChildrenParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.p["name"] = name
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, fn := range opts {
0000000000000000000000000000000000000000;;			if err := fn(s.cs, p); err != nil {
0000000000000000000000000000000000000000;;				return "", -1, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		l, err := s.ListDomainChildren(p)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", -1, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 0 {
0000000000000000000000000000000000000000;;			return "", l.Count, fmt.Errorf("No match found for %s: %+v", name, l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 1 {
0000000000000000000000000000000000000000;;			return l.DomainChildren[0].Id, l.Count, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count > 1 {
0000000000000000000000000000000000000000;;			for _, v := range l.DomainChildren {
0000000000000000000000000000000000000000;;				if v.Name == name {
0000000000000000000000000000000000000000;;					return v.Id, l.Count, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "", l.Count, fmt.Errorf("Could not find an exact match for %s: %+v", name, l)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is a courtesy helper function, which in some cases may not work as expected!
0000000000000000000000000000000000000000;;	func (s *DomainService) GetDomainChildrenByName(name string, opts ...OptionFunc) (*DomainChildren, int, error) {
0000000000000000000000000000000000000000;;		id, count, err := s.GetDomainChildrenID(name, opts...)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, count, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r, count, err := s.GetDomainChildrenByID(id, opts...)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, count, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return r, count, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is a courtesy helper function, which in some cases may not work as expected!
0000000000000000000000000000000000000000;;	func (s *DomainService) GetDomainChildrenByID(id string, opts ...OptionFunc) (*DomainChildren, int, error) {
0000000000000000000000000000000000000000;;		p := &ListDomainChildrenParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, fn := range opts {
0000000000000000000000000000000000000000;;			if err := fn(s.cs, p); err != nil {
0000000000000000000000000000000000000000;;				return nil, -1, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		l, err := s.ListDomainChildren(p)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if strings.Contains(err.Error(), fmt.Sprintf(
0000000000000000000000000000000000000000;;				"Invalid parameter id value=%s due to incorrect long value format, "+
0000000000000000000000000000000000000000;;					"or entity does not exist", id)) {
0000000000000000000000000000000000000000;;				return nil, 0, fmt.Errorf("No match found for %s: %+v", id, l)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, -1, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 0 {
0000000000000000000000000000000000000000;;			return nil, l.Count, fmt.Errorf("No match found for %s: %+v", id, l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 1 {
0000000000000000000000000000000000000000;;			return l.DomainChildren[0], l.Count, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, l.Count, fmt.Errorf("There is more then one result for DomainChildren UUID: %s!", id)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Lists all children domains belonging to a specified domain
0000000000000000000000000000000000000000;;	func (s *DomainService) ListDomainChildren(p *ListDomainChildrenParams) (*ListDomainChildrenResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("listDomainChildren", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r ListDomainChildrenResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListDomainChildrenResponse struct {
0000000000000000000000000000000000000000;;		Count          int               `json:"count"`
0000000000000000000000000000000000000000;;		DomainChildren []*DomainChildren `json:"domainchildren"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DomainChildren struct {
0000000000000000000000000000000000000000;;		Cpuavailable              string `json:"cpuavailable,omitempty"`
0000000000000000000000000000000000000000;;		Cpulimit                  string `json:"cpulimit,omitempty"`
0000000000000000000000000000000000000000;;		Cputotal                  int64  `json:"cputotal,omitempty"`
0000000000000000000000000000000000000000;;		Haschild                  bool   `json:"haschild,omitempty"`
0000000000000000000000000000000000000000;;		Id                        string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Ipavailable               string `json:"ipavailable,omitempty"`
0000000000000000000000000000000000000000;;		Iplimit                   string `json:"iplimit,omitempty"`
0000000000000000000000000000000000000000;;		Iptotal                   int64  `json:"iptotal,omitempty"`
0000000000000000000000000000000000000000;;		Level                     int    `json:"level,omitempty"`
0000000000000000000000000000000000000000;;		Memoryavailable           string `json:"memoryavailable,omitempty"`
0000000000000000000000000000000000000000;;		Memorylimit               string `json:"memorylimit,omitempty"`
0000000000000000000000000000000000000000;;		Memorytotal               int64  `json:"memorytotal,omitempty"`
0000000000000000000000000000000000000000;;		Name                      string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkavailable          string `json:"networkavailable,omitempty"`
0000000000000000000000000000000000000000;;		Networkdomain             string `json:"networkdomain,omitempty"`
0000000000000000000000000000000000000000;;		Networklimit              string `json:"networklimit,omitempty"`
0000000000000000000000000000000000000000;;		Networktotal              int64  `json:"networktotal,omitempty"`
0000000000000000000000000000000000000000;;		Parentdomainid            string `json:"parentdomainid,omitempty"`
0000000000000000000000000000000000000000;;		Parentdomainname          string `json:"parentdomainname,omitempty"`
0000000000000000000000000000000000000000;;		Path                      string `json:"path,omitempty"`
0000000000000000000000000000000000000000;;		Primarystorageavailable   string `json:"primarystorageavailable,omitempty"`
0000000000000000000000000000000000000000;;		Primarystoragelimit       string `json:"primarystoragelimit,omitempty"`
0000000000000000000000000000000000000000;;		Primarystoragetotal       int64  `json:"primarystoragetotal,omitempty"`
0000000000000000000000000000000000000000;;		Projectavailable          string `json:"projectavailable,omitempty"`
0000000000000000000000000000000000000000;;		Projectlimit              string `json:"projectlimit,omitempty"`
0000000000000000000000000000000000000000;;		Projecttotal              int64  `json:"projecttotal,omitempty"`
0000000000000000000000000000000000000000;;		Secondarystorageavailable string `json:"secondarystorageavailable,omitempty"`
0000000000000000000000000000000000000000;;		Secondarystoragelimit     string `json:"secondarystoragelimit,omitempty"`
0000000000000000000000000000000000000000;;		Secondarystoragetotal     int64  `json:"secondarystoragetotal,omitempty"`
0000000000000000000000000000000000000000;;		Snapshotavailable         string `json:"snapshotavailable,omitempty"`
0000000000000000000000000000000000000000;;		Snapshotlimit             string `json:"snapshotlimit,omitempty"`
0000000000000000000000000000000000000000;;		Snapshottotal             int64  `json:"snapshottotal,omitempty"`
0000000000000000000000000000000000000000;;		State                     string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Templateavailable         string `json:"templateavailable,omitempty"`
0000000000000000000000000000000000000000;;		Templatelimit             string `json:"templatelimit,omitempty"`
0000000000000000000000000000000000000000;;		Templatetotal             int64  `json:"templatetotal,omitempty"`
0000000000000000000000000000000000000000;;		Vmavailable               string `json:"vmavailable,omitempty"`
0000000000000000000000000000000000000000;;		Vmlimit                   string `json:"vmlimit,omitempty"`
0000000000000000000000000000000000000000;;		Vmtotal                   int64  `json:"vmtotal,omitempty"`
0000000000000000000000000000000000000000;;		Volumeavailable           string `json:"volumeavailable,omitempty"`
0000000000000000000000000000000000000000;;		Volumelimit               string `json:"volumelimit,omitempty"`
0000000000000000000000000000000000000000;;		Volumetotal               int64  `json:"volumetotal,omitempty"`
0000000000000000000000000000000000000000;;		Vpcavailable              string `json:"vpcavailable,omitempty"`
0000000000000000000000000000000000000000;;		Vpclimit                  string `json:"vpclimit,omitempty"`
0000000000000000000000000000000000000000;;		Vpctotal                  int64  `json:"vpctotal,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LinkDomainToLdapParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *LinkDomainToLdapParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["accounttype"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.Itoa(v.(int))
0000000000000000000000000000000000000000;;			u.Set("accounttype", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["admin"]; found {
0000000000000000000000000000000000000000;;			u.Set("admin", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["domainid"]; found {
0000000000000000000000000000000000000000;;			u.Set("domainid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["name"]; found {
0000000000000000000000000000000000000000;;			u.Set("name", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["type"]; found {
0000000000000000000000000000000000000000;;			u.Set("type", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *LinkDomainToLdapParams) SetAccounttype(v int) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["accounttype"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *LinkDomainToLdapParams) SetAdmin(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["admin"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *LinkDomainToLdapParams) SetDomainid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["domainid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *LinkDomainToLdapParams) SetName(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["name"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *LinkDomainToLdapParams) SetType(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["domainType"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new LinkDomainToLdapParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *DomainService) NewLinkDomainToLdapParams(accounttype int, domainid string, name string, domainType string) *LinkDomainToLdapParams {
0000000000000000000000000000000000000000;;		p := &LinkDomainToLdapParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["accounttype"] = accounttype
0000000000000000000000000000000000000000;;		p.p["domainid"] = domainid
0000000000000000000000000000000000000000;;		p.p["name"] = name
0000000000000000000000000000000000000000;;		p.p["domainType"] = domainType
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// link an existing cloudstack domain to group or OU in ldap
0000000000000000000000000000000000000000;;	func (s *DomainService) LinkDomainToLdap(p *LinkDomainToLdapParams) (*LinkDomainToLdapResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("linkDomainToLdap", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r LinkDomainToLdapResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LinkDomainToLdapResponse struct {
0000000000000000000000000000000000000000;;		Accountid   string `json:"accountid,omitempty"`
0000000000000000000000000000000000000000;;		Accounttype int    `json:"accounttype,omitempty"`
0000000000000000000000000000000000000000;;		Domainid    int64  `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Name        string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Type        string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;	}
