0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Copyright 2016, Sander van Harmelen
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
0000000000000000000000000000000000000000;;	//
0a16da49b5158d8aef850f86fc8936f4afa6c64a;;	
0000000000000000000000000000000000000000;;	package cloudstack
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AttachIsoParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AttachIsoParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["virtualmachineid"]; found {
0000000000000000000000000000000000000000;;			u.Set("virtualmachineid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AttachIsoParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AttachIsoParams) SetVirtualmachineid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["virtualmachineid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new AttachIsoParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *ISOService) NewAttachIsoParams(id string, virtualmachineid string) *AttachIsoParams {
0000000000000000000000000000000000000000;;		p := &AttachIsoParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		p.p["virtualmachineid"] = virtualmachineid
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Attaches an ISO to a virtual machine.
0000000000000000000000000000000000000000;;	func (s *ISOService) AttachIso(p *AttachIsoParams) (*AttachIsoResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("attachIso", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r AttachIsoResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AttachIsoResponse struct {
0000000000000000000000000000000000000000;;		JobID         string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Account       string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Affinitygroup []struct {
0000000000000000000000000000000000000000;;			Account           string   `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Description       string   `json:"description,omitempty"`
0000000000000000000000000000000000000000;;			Domain            string   `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid          string   `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Id                string   `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Name              string   `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Project           string   `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid         string   `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Type              string   `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			VirtualmachineIds []string `json:"virtualmachineIds,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"affinitygroup,omitempty"`
0000000000000000000000000000000000000000;;		Cpunumber             int               `json:"cpunumber,omitempty"`
0000000000000000000000000000000000000000;;		Cpuspeed              int               `json:"cpuspeed,omitempty"`
0000000000000000000000000000000000000000;;		Cpuused               string            `json:"cpuused,omitempty"`
0000000000000000000000000000000000000000;;		Created               string            `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Details               map[string]string `json:"details,omitempty"`
0000000000000000000000000000000000000000;;		Diskioread            int64             `json:"diskioread,omitempty"`
0000000000000000000000000000000000000000;;		Diskiowrite           int64             `json:"diskiowrite,omitempty"`
0000000000000000000000000000000000000000;;		Diskkbsread           int64             `json:"diskkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Diskkbswrite          int64             `json:"diskkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingid        string            `json:"diskofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingname      string            `json:"diskofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Displayname           string            `json:"displayname,omitempty"`
0000000000000000000000000000000000000000;;		Displayvm             bool              `json:"displayvm,omitempty"`
0000000000000000000000000000000000000000;;		Domain                string            `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid              string            `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Forvirtualnetwork     bool              `json:"forvirtualnetwork,omitempty"`
0000000000000000000000000000000000000000;;		Group                 string            `json:"group,omitempty"`
0000000000000000000000000000000000000000;;		Groupid               string            `json:"groupid,omitempty"`
0000000000000000000000000000000000000000;;		Guestosid             string            `json:"guestosid,omitempty"`
0000000000000000000000000000000000000000;;		Haenable              bool              `json:"haenable,omitempty"`
0000000000000000000000000000000000000000;;		Hostid                string            `json:"hostid,omitempty"`
0000000000000000000000000000000000000000;;		Hostname              string            `json:"hostname,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor            string            `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Id                    string            `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Instancename          string            `json:"instancename,omitempty"`
0000000000000000000000000000000000000000;;		Isdynamicallyscalable bool              `json:"isdynamicallyscalable,omitempty"`
0000000000000000000000000000000000000000;;		Isodisplaytext        string            `json:"isodisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Isoid                 string            `json:"isoid,omitempty"`
0000000000000000000000000000000000000000;;		Isoname               string            `json:"isoname,omitempty"`
0000000000000000000000000000000000000000;;		Keypair               string            `json:"keypair,omitempty"`
0000000000000000000000000000000000000000;;		Memory                int               `json:"memory,omitempty"`
0000000000000000000000000000000000000000;;		Name                  string            `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbsread        int64             `json:"networkkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbswrite       int64             `json:"networkkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Nic                   []struct {
0000000000000000000000000000000000000000;;			Broadcasturi string `json:"broadcasturi,omitempty"`
0000000000000000000000000000000000000000;;			Deviceid     string `json:"deviceid,omitempty"`
0000000000000000000000000000000000000000;;			Gateway      string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;			Id           string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ip6address   string `json:"ip6address,omitempty"`
0000000000000000000000000000000000000000;;			Ip6cidr      string `json:"ip6cidr,omitempty"`
0000000000000000000000000000000000000000;;			Ip6gateway   string `json:"ip6gateway,omitempty"`
0000000000000000000000000000000000000000;;			Ipaddress    string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			Isdefault    bool   `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;			Isolationuri string `json:"isolationuri,omitempty"`
0000000000000000000000000000000000000000;;			Macaddress   string `json:"macaddress,omitempty"`
0000000000000000000000000000000000000000;;			Netmask      string `json:"netmask,omitempty"`
0000000000000000000000000000000000000000;;			Networkid    string `json:"networkid,omitempty"`
0000000000000000000000000000000000000000;;			Networkname  string `json:"networkname,omitempty"`
0000000000000000000000000000000000000000;;			Secondaryip  []struct {
0000000000000000000000000000000000000000;;				Id        string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;				Ipaddress string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"secondaryip,omitempty"`
0000000000000000000000000000000000000000;;			Traffictype      string `json:"traffictype,omitempty"`
0000000000000000000000000000000000000000;;			Type             string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachineid string `json:"virtualmachineid,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"nic,omitempty"`
0000000000000000000000000000000000000000;;		Ostypeid        int64  `json:"ostypeid,omitempty"`
0000000000000000000000000000000000000000;;		Password        string `json:"password,omitempty"`
0000000000000000000000000000000000000000;;		Passwordenabled bool   `json:"passwordenabled,omitempty"`
0000000000000000000000000000000000000000;;		Project         string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid       string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;		Publicip        string `json:"publicip,omitempty"`
0000000000000000000000000000000000000000;;		Publicipid      string `json:"publicipid,omitempty"`
0000000000000000000000000000000000000000;;		Rootdeviceid    int64  `json:"rootdeviceid,omitempty"`
0000000000000000000000000000000000000000;;		Rootdevicetype  string `json:"rootdevicetype,omitempty"`
0000000000000000000000000000000000000000;;		Securitygroup   []struct {
0000000000000000000000000000000000000000;;			Account     string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Description string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;			Domain      string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid    string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Egressrule  []struct {
0000000000000000000000000000000000000000;;				Account           string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Cidr              string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;				Endport           int    `json:"endport,omitempty"`
0000000000000000000000000000000000000000;;				Icmpcode          int    `json:"icmpcode,omitempty"`
0000000000000000000000000000000000000000;;				Icmptype          int    `json:"icmptype,omitempty"`
0000000000000000000000000000000000000000;;				Protocol          string `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;				Ruleid            string `json:"ruleid,omitempty"`
0000000000000000000000000000000000000000;;				Securitygroupname string `json:"securitygroupname,omitempty"`
0000000000000000000000000000000000000000;;				Startport         int    `json:"startport,omitempty"`
0000000000000000000000000000000000000000;;				Tags              []struct {
0000000000000000000000000000000000000000;;					Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;					Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;					Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;					Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;					Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;					Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;					Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;					Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;					Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;					Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"egressrule,omitempty"`
0000000000000000000000000000000000000000;;			Id          string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ingressrule []struct {
0000000000000000000000000000000000000000;;				Account           string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Cidr              string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;				Endport           int    `json:"endport,omitempty"`
0000000000000000000000000000000000000000;;				Icmpcode          int    `json:"icmpcode,omitempty"`
0000000000000000000000000000000000000000;;				Icmptype          int    `json:"icmptype,omitempty"`
0000000000000000000000000000000000000000;;				Protocol          string `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;				Ruleid            string `json:"ruleid,omitempty"`
0000000000000000000000000000000000000000;;				Securitygroupname string `json:"securitygroupname,omitempty"`
0000000000000000000000000000000000000000;;				Startport         int    `json:"startport,omitempty"`
0000000000000000000000000000000000000000;;				Tags              []struct {
0000000000000000000000000000000000000000;;					Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;					Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;					Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;					Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;					Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;					Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;					Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;					Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;					Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;					Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"ingressrule,omitempty"`
0000000000000000000000000000000000000000;;			Name      string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Project   string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Tags      []struct {
0000000000000000000000000000000000000000;;				Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;				Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;				Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;				Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;				Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;				Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;				Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;				Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;				Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachinecount int      `json:"virtualmachinecount,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachineids   []string `json:"virtualmachineids,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"securitygroup,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingid   string `json:"serviceofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingname string `json:"serviceofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Servicestate        string `json:"servicestate,omitempty"`
0000000000000000000000000000000000000000;;		State               string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Tags                []struct {
0000000000000000000000000000000000000000;;			Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;			Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;			Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;			Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;			Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Templatedisplaytext string `json:"templatedisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Templateid          string `json:"templateid,omitempty"`
0000000000000000000000000000000000000000;;		Templatename        string `json:"templatename,omitempty"`
0000000000000000000000000000000000000000;;		Userid              string `json:"userid,omitempty"`
0000000000000000000000000000000000000000;;		Username            string `json:"username,omitempty"`
0000000000000000000000000000000000000000;;		Vgpu                string `json:"vgpu,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid              string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename            string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DetachIsoParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DetachIsoParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["virtualmachineid"]; found {
0000000000000000000000000000000000000000;;			u.Set("virtualmachineid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DetachIsoParams) SetVirtualmachineid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["virtualmachineid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new DetachIsoParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *ISOService) NewDetachIsoParams(virtualmachineid string) *DetachIsoParams {
0000000000000000000000000000000000000000;;		p := &DetachIsoParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["virtualmachineid"] = virtualmachineid
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Detaches any ISO file (if any) currently attached to a virtual machine.
0000000000000000000000000000000000000000;;	func (s *ISOService) DetachIso(p *DetachIsoParams) (*DetachIsoResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("detachIso", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r DetachIsoResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DetachIsoResponse struct {
0000000000000000000000000000000000000000;;		JobID         string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Account       string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Affinitygroup []struct {
0000000000000000000000000000000000000000;;			Account           string   `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Description       string   `json:"description,omitempty"`
0000000000000000000000000000000000000000;;			Domain            string   `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid          string   `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Id                string   `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Name              string   `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Project           string   `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid         string   `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Type              string   `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			VirtualmachineIds []string `json:"virtualmachineIds,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"affinitygroup,omitempty"`
0000000000000000000000000000000000000000;;		Cpunumber             int               `json:"cpunumber,omitempty"`
0000000000000000000000000000000000000000;;		Cpuspeed              int               `json:"cpuspeed,omitempty"`
0000000000000000000000000000000000000000;;		Cpuused               string            `json:"cpuused,omitempty"`
0000000000000000000000000000000000000000;;		Created               string            `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Details               map[string]string `json:"details,omitempty"`
0000000000000000000000000000000000000000;;		Diskioread            int64             `json:"diskioread,omitempty"`
0000000000000000000000000000000000000000;;		Diskiowrite           int64             `json:"diskiowrite,omitempty"`
0000000000000000000000000000000000000000;;		Diskkbsread           int64             `json:"diskkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Diskkbswrite          int64             `json:"diskkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingid        string            `json:"diskofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingname      string            `json:"diskofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Displayname           string            `json:"displayname,omitempty"`
0000000000000000000000000000000000000000;;		Displayvm             bool              `json:"displayvm,omitempty"`
0000000000000000000000000000000000000000;;		Domain                string            `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid              string            `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Forvirtualnetwork     bool              `json:"forvirtualnetwork,omitempty"`
0000000000000000000000000000000000000000;;		Group                 string            `json:"group,omitempty"`
0000000000000000000000000000000000000000;;		Groupid               string            `json:"groupid,omitempty"`
0000000000000000000000000000000000000000;;		Guestosid             string            `json:"guestosid,omitempty"`
0000000000000000000000000000000000000000;;		Haenable              bool              `json:"haenable,omitempty"`
0000000000000000000000000000000000000000;;		Hostid                string            `json:"hostid,omitempty"`
0000000000000000000000000000000000000000;;		Hostname              string            `json:"hostname,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor            string            `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Id                    string            `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Instancename          string            `json:"instancename,omitempty"`
0000000000000000000000000000000000000000;;		Isdynamicallyscalable bool              `json:"isdynamicallyscalable,omitempty"`
0000000000000000000000000000000000000000;;		Isodisplaytext        string            `json:"isodisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Isoid                 string            `json:"isoid,omitempty"`
0000000000000000000000000000000000000000;;		Isoname               string            `json:"isoname,omitempty"`
0000000000000000000000000000000000000000;;		Keypair               string            `json:"keypair,omitempty"`
0000000000000000000000000000000000000000;;		Memory                int               `json:"memory,omitempty"`
0000000000000000000000000000000000000000;;		Name                  string            `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbsread        int64             `json:"networkkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbswrite       int64             `json:"networkkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Nic                   []struct {
0000000000000000000000000000000000000000;;			Broadcasturi string `json:"broadcasturi,omitempty"`
0000000000000000000000000000000000000000;;			Deviceid     string `json:"deviceid,omitempty"`
0000000000000000000000000000000000000000;;			Gateway      string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;			Id           string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ip6address   string `json:"ip6address,omitempty"`
0000000000000000000000000000000000000000;;			Ip6cidr      string `json:"ip6cidr,omitempty"`
0000000000000000000000000000000000000000;;			Ip6gateway   string `json:"ip6gateway,omitempty"`
0000000000000000000000000000000000000000;;			Ipaddress    string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			Isdefault    bool   `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;			Isolationuri string `json:"isolationuri,omitempty"`
0000000000000000000000000000000000000000;;			Macaddress   string `json:"macaddress,omitempty"`
0000000000000000000000000000000000000000;;			Netmask      string `json:"netmask,omitempty"`
0000000000000000000000000000000000000000;;			Networkid    string `json:"networkid,omitempty"`
0000000000000000000000000000000000000000;;			Networkname  string `json:"networkname,omitempty"`
0000000000000000000000000000000000000000;;			Secondaryip  []struct {
0000000000000000000000000000000000000000;;				Id        string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;				Ipaddress string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"secondaryip,omitempty"`
0000000000000000000000000000000000000000;;			Traffictype      string `json:"traffictype,omitempty"`
0000000000000000000000000000000000000000;;			Type             string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachineid string `json:"virtualmachineid,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"nic,omitempty"`
0000000000000000000000000000000000000000;;		Ostypeid        int64  `json:"ostypeid,omitempty"`
0000000000000000000000000000000000000000;;		Password        string `json:"password,omitempty"`
0000000000000000000000000000000000000000;;		Passwordenabled bool   `json:"passwordenabled,omitempty"`
0000000000000000000000000000000000000000;;		Project         string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid       string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;		Publicip        string `json:"publicip,omitempty"`
0000000000000000000000000000000000000000;;		Publicipid      string `json:"publicipid,omitempty"`
0000000000000000000000000000000000000000;;		Rootdeviceid    int64  `json:"rootdeviceid,omitempty"`
0000000000000000000000000000000000000000;;		Rootdevicetype  string `json:"rootdevicetype,omitempty"`
0000000000000000000000000000000000000000;;		Securitygroup   []struct {
0000000000000000000000000000000000000000;;			Account     string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Description string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;			Domain      string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid    string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Egressrule  []struct {
0000000000000000000000000000000000000000;;				Account           string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Cidr              string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;				Endport           int    `json:"endport,omitempty"`
0000000000000000000000000000000000000000;;				Icmpcode          int    `json:"icmpcode,omitempty"`
0000000000000000000000000000000000000000;;				Icmptype          int    `json:"icmptype,omitempty"`
0000000000000000000000000000000000000000;;				Protocol          string `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;				Ruleid            string `json:"ruleid,omitempty"`
0000000000000000000000000000000000000000;;				Securitygroupname string `json:"securitygroupname,omitempty"`
0000000000000000000000000000000000000000;;				Startport         int    `json:"startport,omitempty"`
0000000000000000000000000000000000000000;;				Tags              []struct {
0000000000000000000000000000000000000000;;					Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;					Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;					Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;					Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;					Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;					Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;					Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;					Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;					Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;					Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"egressrule,omitempty"`
0000000000000000000000000000000000000000;;			Id          string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ingressrule []struct {
0000000000000000000000000000000000000000;;				Account           string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Cidr              string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;				Endport           int    `json:"endport,omitempty"`
0000000000000000000000000000000000000000;;				Icmpcode          int    `json:"icmpcode,omitempty"`
0000000000000000000000000000000000000000;;				Icmptype          int    `json:"icmptype,omitempty"`
0000000000000000000000000000000000000000;;				Protocol          string `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;				Ruleid            string `json:"ruleid,omitempty"`
0000000000000000000000000000000000000000;;				Securitygroupname string `json:"securitygroupname,omitempty"`
0000000000000000000000000000000000000000;;				Startport         int    `json:"startport,omitempty"`
0000000000000000000000000000000000000000;;				Tags              []struct {
0000000000000000000000000000000000000000;;					Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;					Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;					Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;					Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;					Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;					Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;					Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;					Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;					Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;					Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"ingressrule,omitempty"`
0000000000000000000000000000000000000000;;			Name      string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Project   string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Tags      []struct {
0000000000000000000000000000000000000000;;				Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;				Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;				Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;				Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;				Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;				Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;				Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;				Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;				Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachinecount int      `json:"virtualmachinecount,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachineids   []string `json:"virtualmachineids,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"securitygroup,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingid   string `json:"serviceofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingname string `json:"serviceofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Servicestate        string `json:"servicestate,omitempty"`
0000000000000000000000000000000000000000;;		State               string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Tags                []struct {
0000000000000000000000000000000000000000;;			Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;			Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;			Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;			Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;			Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Templatedisplaytext string `json:"templatedisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Templateid          string `json:"templateid,omitempty"`
0000000000000000000000000000000000000000;;		Templatename        string `json:"templatename,omitempty"`
0000000000000000000000000000000000000000;;		Userid              string `json:"userid,omitempty"`
0000000000000000000000000000000000000000;;		Username            string `json:"username,omitempty"`
0000000000000000000000000000000000000000;;		Vgpu                string `json:"vgpu,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid              string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename            string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListIsosParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListIsosParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["account"]; found {
0000000000000000000000000000000000000000;;			u.Set("account", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["bootable"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("bootable", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["domainid"]; found {
0000000000000000000000000000000000000000;;			u.Set("domainid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["hypervisor"]; found {
0000000000000000000000000000000000000000;;			u.Set("hypervisor", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["isofilter"]; found {
0000000000000000000000000000000000000000;;			u.Set("isofilter", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["ispublic"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("ispublic", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["isready"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("isready", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["isrecursive"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("isrecursive", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["keyword"]; found {
0000000000000000000000000000000000000000;;			u.Set("keyword", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["listall"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("listall", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["name"]; found {
0000000000000000000000000000000000000000;;			u.Set("name", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["page"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.Itoa(v.(int))
0000000000000000000000000000000000000000;;			u.Set("page", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["pagesize"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.Itoa(v.(int))
0000000000000000000000000000000000000000;;			u.Set("pagesize", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["projectid"]; found {
0000000000000000000000000000000000000000;;			u.Set("projectid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["showremoved"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("showremoved", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["tags"]; found {
0000000000000000000000000000000000000000;;			i := 0
0000000000000000000000000000000000000000;;			for k, vv := range v.(map[string]string) {
0000000000000000000000000000000000000000;;				u.Set(fmt.Sprintf("tags[%d].key", i), k)
0000000000000000000000000000000000000000;;				u.Set(fmt.Sprintf("tags[%d].value", i), vv)
0000000000000000000000000000000000000000;;				i++
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["zoneid"]; found {
0000000000000000000000000000000000000000;;			u.Set("zoneid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListIsosParams) SetAccount(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["account"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListIsosParams) SetBootable(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["bootable"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListIsosParams) SetDomainid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["domainid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListIsosParams) SetHypervisor(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["hypervisor"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListIsosParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListIsosParams) SetIsofilter(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["isofilter"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListIsosParams) SetIspublic(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["ispublic"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListIsosParams) SetIsready(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["isready"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListIsosParams) SetIsrecursive(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["isrecursive"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListIsosParams) SetKeyword(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["keyword"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListIsosParams) SetListall(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["listall"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListIsosParams) SetName(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["name"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListIsosParams) SetPage(v int) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["page"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListIsosParams) SetPagesize(v int) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["pagesize"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListIsosParams) SetProjectid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["projectid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListIsosParams) SetShowremoved(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["showremoved"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListIsosParams) SetTags(v map[string]string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["tags"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListIsosParams) SetZoneid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["zoneid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new ListIsosParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *ISOService) NewListIsosParams() *ListIsosParams {
0000000000000000000000000000000000000000;;		p := &ListIsosParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is a courtesy helper function, which in some cases may not work as expected!
0000000000000000000000000000000000000000;;	func (s *ISOService) GetIsoID(name string, isofilter string, zoneid string, opts ...OptionFunc) (string, int, error) {
0000000000000000000000000000000000000000;;		p := &ListIsosParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.p["name"] = name
0000000000000000000000000000000000000000;;		p.p["isofilter"] = isofilter
0000000000000000000000000000000000000000;;		p.p["zoneid"] = zoneid
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, fn := range opts {
0000000000000000000000000000000000000000;;			if err := fn(s.cs, p); err != nil {
0000000000000000000000000000000000000000;;				return "", -1, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		l, err := s.ListIsos(p)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", -1, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 0 {
0000000000000000000000000000000000000000;;			return "", l.Count, fmt.Errorf("No match found for %s: %+v", name, l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 1 {
0000000000000000000000000000000000000000;;			return l.Isos[0].Id, l.Count, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count > 1 {
0000000000000000000000000000000000000000;;			for _, v := range l.Isos {
0000000000000000000000000000000000000000;;				if v.Name == name {
0000000000000000000000000000000000000000;;					return v.Id, l.Count, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "", l.Count, fmt.Errorf("Could not find an exact match for %s: %+v", name, l)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is a courtesy helper function, which in some cases may not work as expected!
0000000000000000000000000000000000000000;;	func (s *ISOService) GetIsoByName(name string, isofilter string, zoneid string, opts ...OptionFunc) (*Iso, int, error) {
0000000000000000000000000000000000000000;;		id, count, err := s.GetIsoID(name, isofilter, zoneid, opts...)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, count, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r, count, err := s.GetIsoByID(id, opts...)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, count, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return r, count, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is a courtesy helper function, which in some cases may not work as expected!
0000000000000000000000000000000000000000;;	func (s *ISOService) GetIsoByID(id string, opts ...OptionFunc) (*Iso, int, error) {
0000000000000000000000000000000000000000;;		p := &ListIsosParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, fn := range opts {
0000000000000000000000000000000000000000;;			if err := fn(s.cs, p); err != nil {
0000000000000000000000000000000000000000;;				return nil, -1, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		l, err := s.ListIsos(p)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if strings.Contains(err.Error(), fmt.Sprintf(
0000000000000000000000000000000000000000;;				"Invalid parameter id value=%s due to incorrect long value format, "+
0000000000000000000000000000000000000000;;					"or entity does not exist", id)) {
0000000000000000000000000000000000000000;;				return nil, 0, fmt.Errorf("No match found for %s: %+v", id, l)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, -1, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 0 {
0000000000000000000000000000000000000000;;			return nil, l.Count, fmt.Errorf("No match found for %s: %+v", id, l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 1 {
0000000000000000000000000000000000000000;;			return l.Isos[0], l.Count, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, l.Count, fmt.Errorf("There is more then one result for Iso UUID: %s!", id)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Lists all available ISO files.
0000000000000000000000000000000000000000;;	func (s *ISOService) ListIsos(p *ListIsosParams) (*ListIsosResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("listIsos", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r ListIsosResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListIsosResponse struct {
0000000000000000000000000000000000000000;;		Count int    `json:"count"`
0000000000000000000000000000000000000000;;		Isos  []*Iso `json:"iso"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Iso struct {
0000000000000000000000000000000000000000;;		Account               string            `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Accountid             string            `json:"accountid,omitempty"`
0000000000000000000000000000000000000000;;		Bootable              bool              `json:"bootable,omitempty"`
0000000000000000000000000000000000000000;;		Checksum              string            `json:"checksum,omitempty"`
0000000000000000000000000000000000000000;;		Created               string            `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		CrossZones            bool              `json:"crossZones,omitempty"`
0000000000000000000000000000000000000000;;		Details               map[string]string `json:"details,omitempty"`
0000000000000000000000000000000000000000;;		Displaytext           string            `json:"displaytext,omitempty"`
0000000000000000000000000000000000000000;;		Domain                string            `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid              string            `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Format                string            `json:"format,omitempty"`
0000000000000000000000000000000000000000;;		Hostid                string            `json:"hostid,omitempty"`
0000000000000000000000000000000000000000;;		Hostname              string            `json:"hostname,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor            string            `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Id                    string            `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Isdynamicallyscalable bool              `json:"isdynamicallyscalable,omitempty"`
0000000000000000000000000000000000000000;;		Isextractable         bool              `json:"isextractable,omitempty"`
0000000000000000000000000000000000000000;;		Isfeatured            bool              `json:"isfeatured,omitempty"`
0000000000000000000000000000000000000000;;		Ispublic              bool              `json:"ispublic,omitempty"`
0000000000000000000000000000000000000000;;		Isready               bool              `json:"isready,omitempty"`
0000000000000000000000000000000000000000;;		Name                  string            `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Ostypeid              string            `json:"ostypeid,omitempty"`
0000000000000000000000000000000000000000;;		Ostypename            string            `json:"ostypename,omitempty"`
0000000000000000000000000000000000000000;;		Passwordenabled       bool              `json:"passwordenabled,omitempty"`
0000000000000000000000000000000000000000;;		Project               string            `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid             string            `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;		Removed               string            `json:"removed,omitempty"`
0000000000000000000000000000000000000000;;		Size                  int64             `json:"size,omitempty"`
0000000000000000000000000000000000000000;;		Sourcetemplateid      string            `json:"sourcetemplateid,omitempty"`
0000000000000000000000000000000000000000;;		Sshkeyenabled         bool              `json:"sshkeyenabled,omitempty"`
0000000000000000000000000000000000000000;;		Status                string            `json:"status,omitempty"`
0000000000000000000000000000000000000000;;		Tags                  []struct {
0000000000000000000000000000000000000000;;			Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;			Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;			Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;			Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;			Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Templatetag  string `json:"templatetag,omitempty"`
0000000000000000000000000000000000000000;;		Templatetype string `json:"templatetype,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid       string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename     string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RegisterIsoParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *RegisterIsoParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["account"]; found {
0000000000000000000000000000000000000000;;			u.Set("account", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["bootable"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("bootable", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["checksum"]; found {
0000000000000000000000000000000000000000;;			u.Set("checksum", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["displaytext"]; found {
0000000000000000000000000000000000000000;;			u.Set("displaytext", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["domainid"]; found {
0000000000000000000000000000000000000000;;			u.Set("domainid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["imagestoreuuid"]; found {
0000000000000000000000000000000000000000;;			u.Set("imagestoreuuid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["isdynamicallyscalable"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("isdynamicallyscalable", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["isextractable"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("isextractable", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["isfeatured"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("isfeatured", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["ispublic"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("ispublic", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["name"]; found {
0000000000000000000000000000000000000000;;			u.Set("name", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["ostypeid"]; found {
0000000000000000000000000000000000000000;;			u.Set("ostypeid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["projectid"]; found {
0000000000000000000000000000000000000000;;			u.Set("projectid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["url"]; found {
0000000000000000000000000000000000000000;;			u.Set("url", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["zoneid"]; found {
0000000000000000000000000000000000000000;;			u.Set("zoneid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *RegisterIsoParams) SetAccount(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["account"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *RegisterIsoParams) SetBootable(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["bootable"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *RegisterIsoParams) SetChecksum(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["checksum"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *RegisterIsoParams) SetDisplaytext(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["displaytext"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *RegisterIsoParams) SetDomainid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["domainid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *RegisterIsoParams) SetImagestoreuuid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["imagestoreuuid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *RegisterIsoParams) SetIsdynamicallyscalable(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["isdynamicallyscalable"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *RegisterIsoParams) SetIsextractable(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["isextractable"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *RegisterIsoParams) SetIsfeatured(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["isfeatured"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *RegisterIsoParams) SetIspublic(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["ispublic"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *RegisterIsoParams) SetName(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["name"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *RegisterIsoParams) SetOstypeid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["ostypeid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *RegisterIsoParams) SetProjectid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["projectid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *RegisterIsoParams) SetUrl(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["url"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *RegisterIsoParams) SetZoneid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["zoneid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new RegisterIsoParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *ISOService) NewRegisterIsoParams(displaytext string, name string, url string, zoneid string) *RegisterIsoParams {
0000000000000000000000000000000000000000;;		p := &RegisterIsoParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["displaytext"] = displaytext
0000000000000000000000000000000000000000;;		p.p["name"] = name
0000000000000000000000000000000000000000;;		p.p["url"] = url
0000000000000000000000000000000000000000;;		p.p["zoneid"] = zoneid
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Registers an existing ISO into the CloudStack Cloud.
0000000000000000000000000000000000000000;;	func (s *ISOService) RegisterIso(p *RegisterIsoParams) (*RegisterIsoResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("registerIso", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r RegisterIsoResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RegisterIsoResponse struct {
0000000000000000000000000000000000000000;;		Account               string            `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Accountid             string            `json:"accountid,omitempty"`
0000000000000000000000000000000000000000;;		Bootable              bool              `json:"bootable,omitempty"`
0000000000000000000000000000000000000000;;		Checksum              string            `json:"checksum,omitempty"`
0000000000000000000000000000000000000000;;		Created               string            `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		CrossZones            bool              `json:"crossZones,omitempty"`
0000000000000000000000000000000000000000;;		Details               map[string]string `json:"details,omitempty"`
0000000000000000000000000000000000000000;;		Displaytext           string            `json:"displaytext,omitempty"`
0000000000000000000000000000000000000000;;		Domain                string            `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid              string            `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Format                string            `json:"format,omitempty"`
0000000000000000000000000000000000000000;;		Hostid                string            `json:"hostid,omitempty"`
0000000000000000000000000000000000000000;;		Hostname              string            `json:"hostname,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor            string            `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Id                    string            `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Isdynamicallyscalable bool              `json:"isdynamicallyscalable,omitempty"`
0000000000000000000000000000000000000000;;		Isextractable         bool              `json:"isextractable,omitempty"`
0000000000000000000000000000000000000000;;		Isfeatured            bool              `json:"isfeatured,omitempty"`
0000000000000000000000000000000000000000;;		Ispublic              bool              `json:"ispublic,omitempty"`
0000000000000000000000000000000000000000;;		Isready               bool              `json:"isready,omitempty"`
0000000000000000000000000000000000000000;;		Name                  string            `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Ostypeid              string            `json:"ostypeid,omitempty"`
0000000000000000000000000000000000000000;;		Ostypename            string            `json:"ostypename,omitempty"`
0000000000000000000000000000000000000000;;		Passwordenabled       bool              `json:"passwordenabled,omitempty"`
0000000000000000000000000000000000000000;;		Project               string            `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid             string            `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;		Removed               string            `json:"removed,omitempty"`
0000000000000000000000000000000000000000;;		Size                  int64             `json:"size,omitempty"`
0000000000000000000000000000000000000000;;		Sourcetemplateid      string            `json:"sourcetemplateid,omitempty"`
0000000000000000000000000000000000000000;;		Sshkeyenabled         bool              `json:"sshkeyenabled,omitempty"`
0000000000000000000000000000000000000000;;		Status                string            `json:"status,omitempty"`
0000000000000000000000000000000000000000;;		Tags                  []struct {
0000000000000000000000000000000000000000;;			Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;			Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;			Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;			Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;			Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Templatetag  string `json:"templatetag,omitempty"`
0000000000000000000000000000000000000000;;		Templatetype string `json:"templatetype,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid       string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename     string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateIsoParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateIsoParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["bootable"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("bootable", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["details"]; found {
0000000000000000000000000000000000000000;;			i := 0
0000000000000000000000000000000000000000;;			for k, vv := range v.(map[string]string) {
0000000000000000000000000000000000000000;;				u.Set(fmt.Sprintf("details[%d].key", i), k)
0000000000000000000000000000000000000000;;				u.Set(fmt.Sprintf("details[%d].value", i), vv)
0000000000000000000000000000000000000000;;				i++
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["displaytext"]; found {
0000000000000000000000000000000000000000;;			u.Set("displaytext", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["format"]; found {
0000000000000000000000000000000000000000;;			u.Set("format", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["isdynamicallyscalable"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("isdynamicallyscalable", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["isrouting"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("isrouting", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["name"]; found {
0000000000000000000000000000000000000000;;			u.Set("name", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["ostypeid"]; found {
0000000000000000000000000000000000000000;;			u.Set("ostypeid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["passwordenabled"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("passwordenabled", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["requireshvm"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("requireshvm", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["sortkey"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.Itoa(v.(int))
0000000000000000000000000000000000000000;;			u.Set("sortkey", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateIsoParams) SetBootable(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["bootable"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateIsoParams) SetDetails(v map[string]string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["details"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateIsoParams) SetDisplaytext(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["displaytext"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateIsoParams) SetFormat(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["format"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateIsoParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateIsoParams) SetIsdynamicallyscalable(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["isdynamicallyscalable"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateIsoParams) SetIsrouting(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["isrouting"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateIsoParams) SetName(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["name"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateIsoParams) SetOstypeid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["ostypeid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateIsoParams) SetPasswordenabled(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["passwordenabled"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateIsoParams) SetRequireshvm(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["requireshvm"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateIsoParams) SetSortkey(v int) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["sortkey"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new UpdateIsoParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *ISOService) NewUpdateIsoParams(id string) *UpdateIsoParams {
0000000000000000000000000000000000000000;;		p := &UpdateIsoParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Updates an ISO file.
0000000000000000000000000000000000000000;;	func (s *ISOService) UpdateIso(p *UpdateIsoParams) (*UpdateIsoResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("updateIso", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r UpdateIsoResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateIsoResponse struct {
0000000000000000000000000000000000000000;;		Account               string            `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Accountid             string            `json:"accountid,omitempty"`
0000000000000000000000000000000000000000;;		Bootable              bool              `json:"bootable,omitempty"`
0000000000000000000000000000000000000000;;		Checksum              string            `json:"checksum,omitempty"`
0000000000000000000000000000000000000000;;		Created               string            `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		CrossZones            bool              `json:"crossZones,omitempty"`
0000000000000000000000000000000000000000;;		Details               map[string]string `json:"details,omitempty"`
0000000000000000000000000000000000000000;;		Displaytext           string            `json:"displaytext,omitempty"`
0000000000000000000000000000000000000000;;		Domain                string            `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid              string            `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Format                string            `json:"format,omitempty"`
0000000000000000000000000000000000000000;;		Hostid                string            `json:"hostid,omitempty"`
0000000000000000000000000000000000000000;;		Hostname              string            `json:"hostname,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor            string            `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Id                    string            `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Isdynamicallyscalable bool              `json:"isdynamicallyscalable,omitempty"`
0000000000000000000000000000000000000000;;		Isextractable         bool              `json:"isextractable,omitempty"`
0000000000000000000000000000000000000000;;		Isfeatured            bool              `json:"isfeatured,omitempty"`
0000000000000000000000000000000000000000;;		Ispublic              bool              `json:"ispublic,omitempty"`
0000000000000000000000000000000000000000;;		Isready               bool              `json:"isready,omitempty"`
0000000000000000000000000000000000000000;;		Name                  string            `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Ostypeid              string            `json:"ostypeid,omitempty"`
0000000000000000000000000000000000000000;;		Ostypename            string            `json:"ostypename,omitempty"`
0000000000000000000000000000000000000000;;		Passwordenabled       bool              `json:"passwordenabled,omitempty"`
0000000000000000000000000000000000000000;;		Project               string            `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid             string            `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;		Removed               string            `json:"removed,omitempty"`
0000000000000000000000000000000000000000;;		Size                  int64             `json:"size,omitempty"`
0000000000000000000000000000000000000000;;		Sourcetemplateid      string            `json:"sourcetemplateid,omitempty"`
0000000000000000000000000000000000000000;;		Sshkeyenabled         bool              `json:"sshkeyenabled,omitempty"`
0000000000000000000000000000000000000000;;		Status                string            `json:"status,omitempty"`
0000000000000000000000000000000000000000;;		Tags                  []struct {
0000000000000000000000000000000000000000;;			Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;			Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;			Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;			Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;			Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Templatetag  string `json:"templatetag,omitempty"`
0000000000000000000000000000000000000000;;		Templatetype string `json:"templatetype,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid       string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename     string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteIsoParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeleteIsoParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["zoneid"]; found {
0000000000000000000000000000000000000000;;			u.Set("zoneid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeleteIsoParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeleteIsoParams) SetZoneid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["zoneid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new DeleteIsoParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *ISOService) NewDeleteIsoParams(id string) *DeleteIsoParams {
0000000000000000000000000000000000000000;;		p := &DeleteIsoParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Deletes an ISO file.
0000000000000000000000000000000000000000;;	func (s *ISOService) DeleteIso(p *DeleteIsoParams) (*DeleteIsoResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("deleteIso", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r DeleteIsoResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteIsoResponse struct {
0000000000000000000000000000000000000000;;		JobID       string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Displaytext string `json:"displaytext,omitempty"`
0000000000000000000000000000000000000000;;		Success     bool   `json:"success,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CopyIsoParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CopyIsoParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["destzoneid"]; found {
0000000000000000000000000000000000000000;;			u.Set("destzoneid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["sourcezoneid"]; found {
0000000000000000000000000000000000000000;;			u.Set("sourcezoneid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CopyIsoParams) SetDestzoneid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["destzoneid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CopyIsoParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CopyIsoParams) SetSourcezoneid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["sourcezoneid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new CopyIsoParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *ISOService) NewCopyIsoParams(destzoneid string, id string) *CopyIsoParams {
0000000000000000000000000000000000000000;;		p := &CopyIsoParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["destzoneid"] = destzoneid
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Copies an ISO from one zone to another.
0000000000000000000000000000000000000000;;	func (s *ISOService) CopyIso(p *CopyIsoParams) (*CopyIsoResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("copyIso", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r CopyIsoResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CopyIsoResponse struct {
0000000000000000000000000000000000000000;;		JobID                 string            `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Account               string            `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Accountid             string            `json:"accountid,omitempty"`
0000000000000000000000000000000000000000;;		Bootable              bool              `json:"bootable,omitempty"`
0000000000000000000000000000000000000000;;		Checksum              string            `json:"checksum,omitempty"`
0000000000000000000000000000000000000000;;		Created               string            `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		CrossZones            bool              `json:"crossZones,omitempty"`
0000000000000000000000000000000000000000;;		Details               map[string]string `json:"details,omitempty"`
0000000000000000000000000000000000000000;;		Displaytext           string            `json:"displaytext,omitempty"`
0000000000000000000000000000000000000000;;		Domain                string            `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid              string            `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Format                string            `json:"format,omitempty"`
0000000000000000000000000000000000000000;;		Hostid                string            `json:"hostid,omitempty"`
0000000000000000000000000000000000000000;;		Hostname              string            `json:"hostname,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor            string            `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Id                    string            `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Isdynamicallyscalable bool              `json:"isdynamicallyscalable,omitempty"`
0000000000000000000000000000000000000000;;		Isextractable         bool              `json:"isextractable,omitempty"`
0000000000000000000000000000000000000000;;		Isfeatured            bool              `json:"isfeatured,omitempty"`
0000000000000000000000000000000000000000;;		Ispublic              bool              `json:"ispublic,omitempty"`
0000000000000000000000000000000000000000;;		Isready               bool              `json:"isready,omitempty"`
0000000000000000000000000000000000000000;;		Name                  string            `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Ostypeid              string            `json:"ostypeid,omitempty"`
0000000000000000000000000000000000000000;;		Ostypename            string            `json:"ostypename,omitempty"`
0000000000000000000000000000000000000000;;		Passwordenabled       bool              `json:"passwordenabled,omitempty"`
0000000000000000000000000000000000000000;;		Project               string            `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid             string            `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;		Removed               string            `json:"removed,omitempty"`
0000000000000000000000000000000000000000;;		Size                  int64             `json:"size,omitempty"`
0000000000000000000000000000000000000000;;		Sourcetemplateid      string            `json:"sourcetemplateid,omitempty"`
0000000000000000000000000000000000000000;;		Sshkeyenabled         bool              `json:"sshkeyenabled,omitempty"`
0000000000000000000000000000000000000000;;		Status                string            `json:"status,omitempty"`
0000000000000000000000000000000000000000;;		Tags                  []struct {
0000000000000000000000000000000000000000;;			Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;			Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;			Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;			Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;			Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Templatetag  string `json:"templatetag,omitempty"`
0000000000000000000000000000000000000000;;		Templatetype string `json:"templatetype,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid       string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename     string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateIsoPermissionsParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateIsoPermissionsParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["accounts"]; found {
0000000000000000000000000000000000000000;;			vv := strings.Join(v.([]string), ",")
0000000000000000000000000000000000000000;;			u.Set("accounts", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["isextractable"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("isextractable", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["isfeatured"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("isfeatured", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["ispublic"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("ispublic", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["op"]; found {
0000000000000000000000000000000000000000;;			u.Set("op", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["projectids"]; found {
0000000000000000000000000000000000000000;;			vv := strings.Join(v.([]string), ",")
0000000000000000000000000000000000000000;;			u.Set("projectids", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateIsoPermissionsParams) SetAccounts(v []string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["accounts"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateIsoPermissionsParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateIsoPermissionsParams) SetIsextractable(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["isextractable"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateIsoPermissionsParams) SetIsfeatured(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["isfeatured"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateIsoPermissionsParams) SetIspublic(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["ispublic"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateIsoPermissionsParams) SetOp(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["op"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateIsoPermissionsParams) SetProjectids(v []string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["projectids"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new UpdateIsoPermissionsParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *ISOService) NewUpdateIsoPermissionsParams(id string) *UpdateIsoPermissionsParams {
0000000000000000000000000000000000000000;;		p := &UpdateIsoPermissionsParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Updates ISO permissions
0000000000000000000000000000000000000000;;	func (s *ISOService) UpdateIsoPermissions(p *UpdateIsoPermissionsParams) (*UpdateIsoPermissionsResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("updateIsoPermissions", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r UpdateIsoPermissionsResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateIsoPermissionsResponse struct {
0000000000000000000000000000000000000000;;		Displaytext string `json:"displaytext,omitempty"`
0000000000000000000000000000000000000000;;		Success     string `json:"success,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListIsoPermissionsParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListIsoPermissionsParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListIsoPermissionsParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new ListIsoPermissionsParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *ISOService) NewListIsoPermissionsParams(id string) *ListIsoPermissionsParams {
0000000000000000000000000000000000000000;;		p := &ListIsoPermissionsParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is a courtesy helper function, which in some cases may not work as expected!
0000000000000000000000000000000000000000;;	func (s *ISOService) GetIsoPermissionByID(id string, opts ...OptionFunc) (*IsoPermission, int, error) {
0000000000000000000000000000000000000000;;		p := &ListIsoPermissionsParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, fn := range opts {
0000000000000000000000000000000000000000;;			if err := fn(s.cs, p); err != nil {
0000000000000000000000000000000000000000;;				return nil, -1, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		l, err := s.ListIsoPermissions(p)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if strings.Contains(err.Error(), fmt.Sprintf(
0000000000000000000000000000000000000000;;				"Invalid parameter id value=%s due to incorrect long value format, "+
0000000000000000000000000000000000000000;;					"or entity does not exist", id)) {
0000000000000000000000000000000000000000;;				return nil, 0, fmt.Errorf("No match found for %s: %+v", id, l)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, -1, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 0 {
0000000000000000000000000000000000000000;;			return nil, l.Count, fmt.Errorf("No match found for %s: %+v", id, l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 1 {
0000000000000000000000000000000000000000;;			return l.IsoPermissions[0], l.Count, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, l.Count, fmt.Errorf("There is more then one result for IsoPermission UUID: %s!", id)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List iso visibility and all accounts that have permissions to view this iso.
0000000000000000000000000000000000000000;;	func (s *ISOService) ListIsoPermissions(p *ListIsoPermissionsParams) (*ListIsoPermissionsResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("listIsoPermissions", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r ListIsoPermissionsResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListIsoPermissionsResponse struct {
0000000000000000000000000000000000000000;;		Count          int              `json:"count"`
0000000000000000000000000000000000000000;;		IsoPermissions []*IsoPermission `json:"isopermission"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IsoPermission struct {
0000000000000000000000000000000000000000;;		Account    []string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Domainid   string   `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Id         string   `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Ispublic   bool     `json:"ispublic,omitempty"`
0000000000000000000000000000000000000000;;		Projectids []string `json:"projectids,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtractIsoParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ExtractIsoParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["mode"]; found {
0000000000000000000000000000000000000000;;			u.Set("mode", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["url"]; found {
0000000000000000000000000000000000000000;;			u.Set("url", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["zoneid"]; found {
0000000000000000000000000000000000000000;;			u.Set("zoneid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ExtractIsoParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ExtractIsoParams) SetMode(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["mode"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ExtractIsoParams) SetUrl(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["url"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ExtractIsoParams) SetZoneid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["zoneid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new ExtractIsoParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *ISOService) NewExtractIsoParams(id string, mode string) *ExtractIsoParams {
0000000000000000000000000000000000000000;;		p := &ExtractIsoParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		p.p["mode"] = mode
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Extracts an ISO
0000000000000000000000000000000000000000;;	func (s *ISOService) ExtractIso(p *ExtractIsoParams) (*ExtractIsoResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("extractIso", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r ExtractIsoResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtractIsoResponse struct {
0000000000000000000000000000000000000000;;		JobID            string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Accountid        string `json:"accountid,omitempty"`
0000000000000000000000000000000000000000;;		Created          string `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		ExtractId        string `json:"extractId,omitempty"`
0000000000000000000000000000000000000000;;		ExtractMode      string `json:"extractMode,omitempty"`
0000000000000000000000000000000000000000;;		Id               string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Name             string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Resultstring     string `json:"resultstring,omitempty"`
0000000000000000000000000000000000000000;;		State            string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Status           string `json:"status,omitempty"`
0000000000000000000000000000000000000000;;		Storagetype      string `json:"storagetype,omitempty"`
0000000000000000000000000000000000000000;;		Uploadpercentage int    `json:"uploadpercentage,omitempty"`
0000000000000000000000000000000000000000;;		Url              string `json:"url,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid           string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename         string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
