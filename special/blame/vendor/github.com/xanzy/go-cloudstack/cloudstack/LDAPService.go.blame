0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Copyright 2016, Sander van Harmelen
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
0000000000000000000000000000000000000000;;	//
0a16da49b5158d8aef850f86fc8936f4afa6c64a;;	
0000000000000000000000000000000000000000;;	package cloudstack
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LdapCreateAccountParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *LdapCreateAccountParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["account"]; found {
0000000000000000000000000000000000000000;;			u.Set("account", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["accountdetails"]; found {
0000000000000000000000000000000000000000;;			i := 0
0000000000000000000000000000000000000000;;			for k, vv := range v.(map[string]string) {
0000000000000000000000000000000000000000;;				u.Set(fmt.Sprintf("accountdetails[%d].key", i), k)
0000000000000000000000000000000000000000;;				u.Set(fmt.Sprintf("accountdetails[%d].value", i), vv)
0000000000000000000000000000000000000000;;				i++
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["accountid"]; found {
0000000000000000000000000000000000000000;;			u.Set("accountid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["accounttype"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.Itoa(v.(int))
0000000000000000000000000000000000000000;;			u.Set("accounttype", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["domainid"]; found {
0000000000000000000000000000000000000000;;			u.Set("domainid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["networkdomain"]; found {
0000000000000000000000000000000000000000;;			u.Set("networkdomain", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["timezone"]; found {
0000000000000000000000000000000000000000;;			u.Set("timezone", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["userid"]; found {
0000000000000000000000000000000000000000;;			u.Set("userid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["username"]; found {
0000000000000000000000000000000000000000;;			u.Set("username", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *LdapCreateAccountParams) SetAccount(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["account"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *LdapCreateAccountParams) SetAccountdetails(v map[string]string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["accountdetails"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *LdapCreateAccountParams) SetAccountid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["accountid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *LdapCreateAccountParams) SetAccounttype(v int) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["accounttype"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *LdapCreateAccountParams) SetDomainid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["domainid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *LdapCreateAccountParams) SetNetworkdomain(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["networkdomain"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *LdapCreateAccountParams) SetTimezone(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["timezone"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *LdapCreateAccountParams) SetUserid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["userid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *LdapCreateAccountParams) SetUsername(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["username"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new LdapCreateAccountParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *LDAPService) NewLdapCreateAccountParams(accounttype int, username string) *LdapCreateAccountParams {
0000000000000000000000000000000000000000;;		p := &LdapCreateAccountParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["accounttype"] = accounttype
0000000000000000000000000000000000000000;;		p.p["username"] = username
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Creates an account from an LDAP user
0000000000000000000000000000000000000000;;	func (s *LDAPService) LdapCreateAccount(p *LdapCreateAccountParams) (*LdapCreateAccountResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("ldapCreateAccount", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r LdapCreateAccountResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LdapCreateAccountResponse struct {
0000000000000000000000000000000000000000;;		Accountdetails            map[string]string `json:"accountdetails,omitempty"`
0000000000000000000000000000000000000000;;		Accounttype               int               `json:"accounttype,omitempty"`
0000000000000000000000000000000000000000;;		Cpuavailable              string            `json:"cpuavailable,omitempty"`
0000000000000000000000000000000000000000;;		Cpulimit                  string            `json:"cpulimit,omitempty"`
0000000000000000000000000000000000000000;;		Cputotal                  int64             `json:"cputotal,omitempty"`
0000000000000000000000000000000000000000;;		Defaultzoneid             string            `json:"defaultzoneid,omitempty"`
0000000000000000000000000000000000000000;;		Domain                    string            `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid                  string            `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Groups                    []string          `json:"groups,omitempty"`
0000000000000000000000000000000000000000;;		Id                        string            `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Ipavailable               string            `json:"ipavailable,omitempty"`
0000000000000000000000000000000000000000;;		Iplimit                   string            `json:"iplimit,omitempty"`
0000000000000000000000000000000000000000;;		Iptotal                   int64             `json:"iptotal,omitempty"`
0000000000000000000000000000000000000000;;		Iscleanuprequired         bool              `json:"iscleanuprequired,omitempty"`
0000000000000000000000000000000000000000;;		Isdefault                 bool              `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;		Memoryavailable           string            `json:"memoryavailable,omitempty"`
0000000000000000000000000000000000000000;;		Memorylimit               string            `json:"memorylimit,omitempty"`
0000000000000000000000000000000000000000;;		Memorytotal               int64             `json:"memorytotal,omitempty"`
0000000000000000000000000000000000000000;;		Name                      string            `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkavailable          string            `json:"networkavailable,omitempty"`
0000000000000000000000000000000000000000;;		Networkdomain             string            `json:"networkdomain,omitempty"`
0000000000000000000000000000000000000000;;		Networklimit              string            `json:"networklimit,omitempty"`
0000000000000000000000000000000000000000;;		Networktotal              int64             `json:"networktotal,omitempty"`
0000000000000000000000000000000000000000;;		Primarystorageavailable   string            `json:"primarystorageavailable,omitempty"`
0000000000000000000000000000000000000000;;		Primarystoragelimit       string            `json:"primarystoragelimit,omitempty"`
0000000000000000000000000000000000000000;;		Primarystoragetotal       int64             `json:"primarystoragetotal,omitempty"`
0000000000000000000000000000000000000000;;		Projectavailable          string            `json:"projectavailable,omitempty"`
0000000000000000000000000000000000000000;;		Projectlimit              string            `json:"projectlimit,omitempty"`
0000000000000000000000000000000000000000;;		Projecttotal              int64             `json:"projecttotal,omitempty"`
0000000000000000000000000000000000000000;;		Receivedbytes             int64             `json:"receivedbytes,omitempty"`
0000000000000000000000000000000000000000;;		Secondarystorageavailable string            `json:"secondarystorageavailable,omitempty"`
0000000000000000000000000000000000000000;;		Secondarystoragelimit     string            `json:"secondarystoragelimit,omitempty"`
0000000000000000000000000000000000000000;;		Secondarystoragetotal     int64             `json:"secondarystoragetotal,omitempty"`
0000000000000000000000000000000000000000;;		Sentbytes                 int64             `json:"sentbytes,omitempty"`
0000000000000000000000000000000000000000;;		Snapshotavailable         string            `json:"snapshotavailable,omitempty"`
0000000000000000000000000000000000000000;;		Snapshotlimit             string            `json:"snapshotlimit,omitempty"`
0000000000000000000000000000000000000000;;		Snapshottotal             int64             `json:"snapshottotal,omitempty"`
0000000000000000000000000000000000000000;;		State                     string            `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Templateavailable         string            `json:"templateavailable,omitempty"`
0000000000000000000000000000000000000000;;		Templatelimit             string            `json:"templatelimit,omitempty"`
0000000000000000000000000000000000000000;;		Templatetotal             int64             `json:"templatetotal,omitempty"`
0000000000000000000000000000000000000000;;		User                      []struct {
0000000000000000000000000000000000000000;;			Account             string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Accountid           string `json:"accountid,omitempty"`
0000000000000000000000000000000000000000;;			Accounttype         int    `json:"accounttype,omitempty"`
0000000000000000000000000000000000000000;;			Apikey              string `json:"apikey,omitempty"`
0000000000000000000000000000000000000000;;			Created             string `json:"created,omitempty"`
0000000000000000000000000000000000000000;;			Domain              string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid            string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Email               string `json:"email,omitempty"`
0000000000000000000000000000000000000000;;			Firstname           string `json:"firstname,omitempty"`
0000000000000000000000000000000000000000;;			Id                  string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Iscallerchilddomain bool   `json:"iscallerchilddomain,omitempty"`
0000000000000000000000000000000000000000;;			Isdefault           bool   `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;			Lastname            string `json:"lastname,omitempty"`
0000000000000000000000000000000000000000;;			Secretkey           string `json:"secretkey,omitempty"`
0000000000000000000000000000000000000000;;			State               string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;			Timezone            string `json:"timezone,omitempty"`
0000000000000000000000000000000000000000;;			Username            string `json:"username,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"user,omitempty"`
0000000000000000000000000000000000000000;;		Vmavailable     string `json:"vmavailable,omitempty"`
0000000000000000000000000000000000000000;;		Vmlimit         string `json:"vmlimit,omitempty"`
0000000000000000000000000000000000000000;;		Vmrunning       int    `json:"vmrunning,omitempty"`
0000000000000000000000000000000000000000;;		Vmstopped       int    `json:"vmstopped,omitempty"`
0000000000000000000000000000000000000000;;		Vmtotal         int64  `json:"vmtotal,omitempty"`
0000000000000000000000000000000000000000;;		Volumeavailable string `json:"volumeavailable,omitempty"`
0000000000000000000000000000000000000000;;		Volumelimit     string `json:"volumelimit,omitempty"`
0000000000000000000000000000000000000000;;		Volumetotal     int64  `json:"volumetotal,omitempty"`
0000000000000000000000000000000000000000;;		Vpcavailable    string `json:"vpcavailable,omitempty"`
0000000000000000000000000000000000000000;;		Vpclimit        string `json:"vpclimit,omitempty"`
0000000000000000000000000000000000000000;;		Vpctotal        int64  `json:"vpctotal,omitempty"`
0000000000000000000000000000000000000000;;	}
