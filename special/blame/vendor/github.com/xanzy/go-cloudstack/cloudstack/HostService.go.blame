0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Copyright 2016, Sander van Harmelen
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
0000000000000000000000000000000000000000;;	//
0a16da49b5158d8aef850f86fc8936f4afa6c64a;;	
0000000000000000000000000000000000000000;;	package cloudstack
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddHostParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AddHostParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["allocationstate"]; found {
0000000000000000000000000000000000000000;;			u.Set("allocationstate", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["clusterid"]; found {
0000000000000000000000000000000000000000;;			u.Set("clusterid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["clustername"]; found {
0000000000000000000000000000000000000000;;			u.Set("clustername", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["hosttags"]; found {
0000000000000000000000000000000000000000;;			vv := strings.Join(v.([]string), ",")
0000000000000000000000000000000000000000;;			u.Set("hosttags", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["hypervisor"]; found {
0000000000000000000000000000000000000000;;			u.Set("hypervisor", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["password"]; found {
0000000000000000000000000000000000000000;;			u.Set("password", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["podid"]; found {
0000000000000000000000000000000000000000;;			u.Set("podid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["url"]; found {
0000000000000000000000000000000000000000;;			u.Set("url", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["username"]; found {
0000000000000000000000000000000000000000;;			u.Set("username", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["zoneid"]; found {
0000000000000000000000000000000000000000;;			u.Set("zoneid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AddHostParams) SetAllocationstate(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["allocationstate"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AddHostParams) SetClusterid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["clusterid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AddHostParams) SetClustername(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["clustername"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AddHostParams) SetHosttags(v []string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["hosttags"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AddHostParams) SetHypervisor(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["hypervisor"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AddHostParams) SetPassword(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["password"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AddHostParams) SetPodid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["podid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AddHostParams) SetUrl(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["url"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AddHostParams) SetUsername(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["username"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AddHostParams) SetZoneid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["zoneid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new AddHostParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *HostService) NewAddHostParams(hypervisor string, password string, podid string, url string, username string, zoneid string) *AddHostParams {
0000000000000000000000000000000000000000;;		p := &AddHostParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["hypervisor"] = hypervisor
0000000000000000000000000000000000000000;;		p.p["password"] = password
0000000000000000000000000000000000000000;;		p.p["podid"] = podid
0000000000000000000000000000000000000000;;		p.p["url"] = url
0000000000000000000000000000000000000000;;		p.p["username"] = username
0000000000000000000000000000000000000000;;		p.p["zoneid"] = zoneid
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Adds a new host.
0000000000000000000000000000000000000000;;	func (s *HostService) AddHost(p *AddHostParams) (*AddHostResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("addHost", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r AddHostResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddHostResponse struct {
0000000000000000000000000000000000000000;;		Averageload             int64             `json:"averageload,omitempty"`
0000000000000000000000000000000000000000;;		Capabilities            string            `json:"capabilities,omitempty"`
0000000000000000000000000000000000000000;;		Clusterid               string            `json:"clusterid,omitempty"`
0000000000000000000000000000000000000000;;		Clustername             string            `json:"clustername,omitempty"`
0000000000000000000000000000000000000000;;		Clustertype             string            `json:"clustertype,omitempty"`
0000000000000000000000000000000000000000;;		Cpuallocated            string            `json:"cpuallocated,omitempty"`
0000000000000000000000000000000000000000;;		Cpunumber               int               `json:"cpunumber,omitempty"`
0000000000000000000000000000000000000000;;		Cpusockets              int               `json:"cpusockets,omitempty"`
0000000000000000000000000000000000000000;;		Cpuspeed                int64             `json:"cpuspeed,omitempty"`
0000000000000000000000000000000000000000;;		Cpuused                 string            `json:"cpuused,omitempty"`
0000000000000000000000000000000000000000;;		Cpuwithoverprovisioning string            `json:"cpuwithoverprovisioning,omitempty"`
0000000000000000000000000000000000000000;;		Created                 string            `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Details                 map[string]string `json:"details,omitempty"`
0000000000000000000000000000000000000000;;		Disconnected            string            `json:"disconnected,omitempty"`
0000000000000000000000000000000000000000;;		Disksizeallocated       int64             `json:"disksizeallocated,omitempty"`
0000000000000000000000000000000000000000;;		Disksizetotal           int64             `json:"disksizetotal,omitempty"`
0000000000000000000000000000000000000000;;		Events                  string            `json:"events,omitempty"`
0000000000000000000000000000000000000000;;		Gpugroup                []struct {
0000000000000000000000000000000000000000;;			Gpugroupname string `json:"gpugroupname,omitempty"`
0000000000000000000000000000000000000000;;			Vgpu         []struct {
0000000000000000000000000000000000000000;;				Maxcapacity       int64  `json:"maxcapacity,omitempty"`
0000000000000000000000000000000000000000;;				Maxheads          int64  `json:"maxheads,omitempty"`
0000000000000000000000000000000000000000;;				Maxresolutionx    int64  `json:"maxresolutionx,omitempty"`
0000000000000000000000000000000000000000;;				Maxresolutiony    int64  `json:"maxresolutiony,omitempty"`
0000000000000000000000000000000000000000;;				Maxvgpuperpgpu    int64  `json:"maxvgpuperpgpu,omitempty"`
0000000000000000000000000000000000000000;;				Remainingcapacity int64  `json:"remainingcapacity,omitempty"`
0000000000000000000000000000000000000000;;				Vgputype          string `json:"vgputype,omitempty"`
0000000000000000000000000000000000000000;;				Videoram          int64  `json:"videoram,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"vgpu,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"gpugroup,omitempty"`
0000000000000000000000000000000000000000;;		Hahost               bool   `json:"hahost,omitempty"`
0000000000000000000000000000000000000000;;		Hasenoughcapacity    bool   `json:"hasenoughcapacity,omitempty"`
0000000000000000000000000000000000000000;;		Hosttags             string `json:"hosttags,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor           string `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisorversion    string `json:"hypervisorversion,omitempty"`
0000000000000000000000000000000000000000;;		Id                   string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Ipaddress            string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;		Islocalstorageactive bool   `json:"islocalstorageactive,omitempty"`
0000000000000000000000000000000000000000;;		Lastpinged           string `json:"lastpinged,omitempty"`
0000000000000000000000000000000000000000;;		Managementserverid   int64  `json:"managementserverid,omitempty"`
0000000000000000000000000000000000000000;;		Memoryallocated      int64  `json:"memoryallocated,omitempty"`
0000000000000000000000000000000000000000;;		Memorytotal          int64  `json:"memorytotal,omitempty"`
0000000000000000000000000000000000000000;;		Memoryused           int64  `json:"memoryused,omitempty"`
0000000000000000000000000000000000000000;;		Name                 string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbsread       int64  `json:"networkkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbswrite      int64  `json:"networkkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Oscategoryid         string `json:"oscategoryid,omitempty"`
0000000000000000000000000000000000000000;;		Oscategoryname       string `json:"oscategoryname,omitempty"`
0000000000000000000000000000000000000000;;		Podid                string `json:"podid,omitempty"`
0000000000000000000000000000000000000000;;		Podname              string `json:"podname,omitempty"`
0000000000000000000000000000000000000000;;		Removed              string `json:"removed,omitempty"`
0000000000000000000000000000000000000000;;		Resourcestate        string `json:"resourcestate,omitempty"`
0000000000000000000000000000000000000000;;		State                string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Suitableformigration bool   `json:"suitableformigration,omitempty"`
0000000000000000000000000000000000000000;;		Type                 string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Version              string `json:"version,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid               string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename             string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconnectHostParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ReconnectHostParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ReconnectHostParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new ReconnectHostParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *HostService) NewReconnectHostParams(id string) *ReconnectHostParams {
0000000000000000000000000000000000000000;;		p := &ReconnectHostParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Reconnects a host.
0000000000000000000000000000000000000000;;	func (s *HostService) ReconnectHost(p *ReconnectHostParams) (*ReconnectHostResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("reconnectHost", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r ReconnectHostResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReconnectHostResponse struct {
0000000000000000000000000000000000000000;;		JobID                   string            `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Averageload             int64             `json:"averageload,omitempty"`
0000000000000000000000000000000000000000;;		Capabilities            string            `json:"capabilities,omitempty"`
0000000000000000000000000000000000000000;;		Clusterid               string            `json:"clusterid,omitempty"`
0000000000000000000000000000000000000000;;		Clustername             string            `json:"clustername,omitempty"`
0000000000000000000000000000000000000000;;		Clustertype             string            `json:"clustertype,omitempty"`
0000000000000000000000000000000000000000;;		Cpuallocated            string            `json:"cpuallocated,omitempty"`
0000000000000000000000000000000000000000;;		Cpunumber               int               `json:"cpunumber,omitempty"`
0000000000000000000000000000000000000000;;		Cpusockets              int               `json:"cpusockets,omitempty"`
0000000000000000000000000000000000000000;;		Cpuspeed                int64             `json:"cpuspeed,omitempty"`
0000000000000000000000000000000000000000;;		Cpuused                 string            `json:"cpuused,omitempty"`
0000000000000000000000000000000000000000;;		Cpuwithoverprovisioning string            `json:"cpuwithoverprovisioning,omitempty"`
0000000000000000000000000000000000000000;;		Created                 string            `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Details                 map[string]string `json:"details,omitempty"`
0000000000000000000000000000000000000000;;		Disconnected            string            `json:"disconnected,omitempty"`
0000000000000000000000000000000000000000;;		Disksizeallocated       int64             `json:"disksizeallocated,omitempty"`
0000000000000000000000000000000000000000;;		Disksizetotal           int64             `json:"disksizetotal,omitempty"`
0000000000000000000000000000000000000000;;		Events                  string            `json:"events,omitempty"`
0000000000000000000000000000000000000000;;		Gpugroup                []struct {
0000000000000000000000000000000000000000;;			Gpugroupname string `json:"gpugroupname,omitempty"`
0000000000000000000000000000000000000000;;			Vgpu         []struct {
0000000000000000000000000000000000000000;;				Maxcapacity       int64  `json:"maxcapacity,omitempty"`
0000000000000000000000000000000000000000;;				Maxheads          int64  `json:"maxheads,omitempty"`
0000000000000000000000000000000000000000;;				Maxresolutionx    int64  `json:"maxresolutionx,omitempty"`
0000000000000000000000000000000000000000;;				Maxresolutiony    int64  `json:"maxresolutiony,omitempty"`
0000000000000000000000000000000000000000;;				Maxvgpuperpgpu    int64  `json:"maxvgpuperpgpu,omitempty"`
0000000000000000000000000000000000000000;;				Remainingcapacity int64  `json:"remainingcapacity,omitempty"`
0000000000000000000000000000000000000000;;				Vgputype          string `json:"vgputype,omitempty"`
0000000000000000000000000000000000000000;;				Videoram          int64  `json:"videoram,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"vgpu,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"gpugroup,omitempty"`
0000000000000000000000000000000000000000;;		Hahost               bool   `json:"hahost,omitempty"`
0000000000000000000000000000000000000000;;		Hasenoughcapacity    bool   `json:"hasenoughcapacity,omitempty"`
0000000000000000000000000000000000000000;;		Hosttags             string `json:"hosttags,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor           string `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisorversion    string `json:"hypervisorversion,omitempty"`
0000000000000000000000000000000000000000;;		Id                   string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Ipaddress            string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;		Islocalstorageactive bool   `json:"islocalstorageactive,omitempty"`
0000000000000000000000000000000000000000;;		Lastpinged           string `json:"lastpinged,omitempty"`
0000000000000000000000000000000000000000;;		Managementserverid   int64  `json:"managementserverid,omitempty"`
0000000000000000000000000000000000000000;;		Memoryallocated      int64  `json:"memoryallocated,omitempty"`
0000000000000000000000000000000000000000;;		Memorytotal          int64  `json:"memorytotal,omitempty"`
0000000000000000000000000000000000000000;;		Memoryused           int64  `json:"memoryused,omitempty"`
0000000000000000000000000000000000000000;;		Name                 string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbsread       int64  `json:"networkkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbswrite      int64  `json:"networkkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Oscategoryid         string `json:"oscategoryid,omitempty"`
0000000000000000000000000000000000000000;;		Oscategoryname       string `json:"oscategoryname,omitempty"`
0000000000000000000000000000000000000000;;		Podid                string `json:"podid,omitempty"`
0000000000000000000000000000000000000000;;		Podname              string `json:"podname,omitempty"`
0000000000000000000000000000000000000000;;		Removed              string `json:"removed,omitempty"`
0000000000000000000000000000000000000000;;		Resourcestate        string `json:"resourcestate,omitempty"`
0000000000000000000000000000000000000000;;		State                string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Suitableformigration bool   `json:"suitableformigration,omitempty"`
0000000000000000000000000000000000000000;;		Type                 string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Version              string `json:"version,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid               string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename             string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateHostParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateHostParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["allocationstate"]; found {
0000000000000000000000000000000000000000;;			u.Set("allocationstate", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["hosttags"]; found {
0000000000000000000000000000000000000000;;			vv := strings.Join(v.([]string), ",")
0000000000000000000000000000000000000000;;			u.Set("hosttags", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["oscategoryid"]; found {
0000000000000000000000000000000000000000;;			u.Set("oscategoryid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["url"]; found {
0000000000000000000000000000000000000000;;			u.Set("url", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateHostParams) SetAllocationstate(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["allocationstate"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateHostParams) SetHosttags(v []string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["hosttags"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateHostParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateHostParams) SetOscategoryid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["oscategoryid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateHostParams) SetUrl(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["url"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new UpdateHostParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *HostService) NewUpdateHostParams(id string) *UpdateHostParams {
0000000000000000000000000000000000000000;;		p := &UpdateHostParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Updates a host.
0000000000000000000000000000000000000000;;	func (s *HostService) UpdateHost(p *UpdateHostParams) (*UpdateHostResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("updateHost", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r UpdateHostResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateHostResponse struct {
0000000000000000000000000000000000000000;;		Averageload             int64             `json:"averageload,omitempty"`
0000000000000000000000000000000000000000;;		Capabilities            string            `json:"capabilities,omitempty"`
0000000000000000000000000000000000000000;;		Clusterid               string            `json:"clusterid,omitempty"`
0000000000000000000000000000000000000000;;		Clustername             string            `json:"clustername,omitempty"`
0000000000000000000000000000000000000000;;		Clustertype             string            `json:"clustertype,omitempty"`
0000000000000000000000000000000000000000;;		Cpuallocated            string            `json:"cpuallocated,omitempty"`
0000000000000000000000000000000000000000;;		Cpunumber               int               `json:"cpunumber,omitempty"`
0000000000000000000000000000000000000000;;		Cpusockets              int               `json:"cpusockets,omitempty"`
0000000000000000000000000000000000000000;;		Cpuspeed                int64             `json:"cpuspeed,omitempty"`
0000000000000000000000000000000000000000;;		Cpuused                 string            `json:"cpuused,omitempty"`
0000000000000000000000000000000000000000;;		Cpuwithoverprovisioning string            `json:"cpuwithoverprovisioning,omitempty"`
0000000000000000000000000000000000000000;;		Created                 string            `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Details                 map[string]string `json:"details,omitempty"`
0000000000000000000000000000000000000000;;		Disconnected            string            `json:"disconnected,omitempty"`
0000000000000000000000000000000000000000;;		Disksizeallocated       int64             `json:"disksizeallocated,omitempty"`
0000000000000000000000000000000000000000;;		Disksizetotal           int64             `json:"disksizetotal,omitempty"`
0000000000000000000000000000000000000000;;		Events                  string            `json:"events,omitempty"`
0000000000000000000000000000000000000000;;		Gpugroup                []struct {
0000000000000000000000000000000000000000;;			Gpugroupname string `json:"gpugroupname,omitempty"`
0000000000000000000000000000000000000000;;			Vgpu         []struct {
0000000000000000000000000000000000000000;;				Maxcapacity       int64  `json:"maxcapacity,omitempty"`
0000000000000000000000000000000000000000;;				Maxheads          int64  `json:"maxheads,omitempty"`
0000000000000000000000000000000000000000;;				Maxresolutionx    int64  `json:"maxresolutionx,omitempty"`
0000000000000000000000000000000000000000;;				Maxresolutiony    int64  `json:"maxresolutiony,omitempty"`
0000000000000000000000000000000000000000;;				Maxvgpuperpgpu    int64  `json:"maxvgpuperpgpu,omitempty"`
0000000000000000000000000000000000000000;;				Remainingcapacity int64  `json:"remainingcapacity,omitempty"`
0000000000000000000000000000000000000000;;				Vgputype          string `json:"vgputype,omitempty"`
0000000000000000000000000000000000000000;;				Videoram          int64  `json:"videoram,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"vgpu,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"gpugroup,omitempty"`
0000000000000000000000000000000000000000;;		Hahost               bool   `json:"hahost,omitempty"`
0000000000000000000000000000000000000000;;		Hasenoughcapacity    bool   `json:"hasenoughcapacity,omitempty"`
0000000000000000000000000000000000000000;;		Hosttags             string `json:"hosttags,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor           string `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisorversion    string `json:"hypervisorversion,omitempty"`
0000000000000000000000000000000000000000;;		Id                   string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Ipaddress            string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;		Islocalstorageactive bool   `json:"islocalstorageactive,omitempty"`
0000000000000000000000000000000000000000;;		Lastpinged           string `json:"lastpinged,omitempty"`
0000000000000000000000000000000000000000;;		Managementserverid   int64  `json:"managementserverid,omitempty"`
0000000000000000000000000000000000000000;;		Memoryallocated      int64  `json:"memoryallocated,omitempty"`
0000000000000000000000000000000000000000;;		Memorytotal          int64  `json:"memorytotal,omitempty"`
0000000000000000000000000000000000000000;;		Memoryused           int64  `json:"memoryused,omitempty"`
0000000000000000000000000000000000000000;;		Name                 string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbsread       int64  `json:"networkkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbswrite      int64  `json:"networkkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Oscategoryid         string `json:"oscategoryid,omitempty"`
0000000000000000000000000000000000000000;;		Oscategoryname       string `json:"oscategoryname,omitempty"`
0000000000000000000000000000000000000000;;		Podid                string `json:"podid,omitempty"`
0000000000000000000000000000000000000000;;		Podname              string `json:"podname,omitempty"`
0000000000000000000000000000000000000000;;		Removed              string `json:"removed,omitempty"`
0000000000000000000000000000000000000000;;		Resourcestate        string `json:"resourcestate,omitempty"`
0000000000000000000000000000000000000000;;		State                string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Suitableformigration bool   `json:"suitableformigration,omitempty"`
0000000000000000000000000000000000000000;;		Type                 string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Version              string `json:"version,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid               string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename             string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteHostParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeleteHostParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["forced"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("forced", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["forcedestroylocalstorage"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("forcedestroylocalstorage", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeleteHostParams) SetForced(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["forced"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeleteHostParams) SetForcedestroylocalstorage(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["forcedestroylocalstorage"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeleteHostParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new DeleteHostParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *HostService) NewDeleteHostParams(id string) *DeleteHostParams {
0000000000000000000000000000000000000000;;		p := &DeleteHostParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Deletes a host.
0000000000000000000000000000000000000000;;	func (s *HostService) DeleteHost(p *DeleteHostParams) (*DeleteHostResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("deleteHost", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r DeleteHostResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteHostResponse struct {
0000000000000000000000000000000000000000;;		Displaytext string `json:"displaytext,omitempty"`
0000000000000000000000000000000000000000;;		Success     string `json:"success,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PrepareHostForMaintenanceParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *PrepareHostForMaintenanceParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *PrepareHostForMaintenanceParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new PrepareHostForMaintenanceParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *HostService) NewPrepareHostForMaintenanceParams(id string) *PrepareHostForMaintenanceParams {
0000000000000000000000000000000000000000;;		p := &PrepareHostForMaintenanceParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Prepares a host for maintenance.
0000000000000000000000000000000000000000;;	func (s *HostService) PrepareHostForMaintenance(p *PrepareHostForMaintenanceParams) (*PrepareHostForMaintenanceResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("prepareHostForMaintenance", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r PrepareHostForMaintenanceResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PrepareHostForMaintenanceResponse struct {
0000000000000000000000000000000000000000;;		JobID                   string            `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Averageload             int64             `json:"averageload,omitempty"`
0000000000000000000000000000000000000000;;		Capabilities            string            `json:"capabilities,omitempty"`
0000000000000000000000000000000000000000;;		Clusterid               string            `json:"clusterid,omitempty"`
0000000000000000000000000000000000000000;;		Clustername             string            `json:"clustername,omitempty"`
0000000000000000000000000000000000000000;;		Clustertype             string            `json:"clustertype,omitempty"`
0000000000000000000000000000000000000000;;		Cpuallocated            string            `json:"cpuallocated,omitempty"`
0000000000000000000000000000000000000000;;		Cpunumber               int               `json:"cpunumber,omitempty"`
0000000000000000000000000000000000000000;;		Cpusockets              int               `json:"cpusockets,omitempty"`
0000000000000000000000000000000000000000;;		Cpuspeed                int64             `json:"cpuspeed,omitempty"`
0000000000000000000000000000000000000000;;		Cpuused                 string            `json:"cpuused,omitempty"`
0000000000000000000000000000000000000000;;		Cpuwithoverprovisioning string            `json:"cpuwithoverprovisioning,omitempty"`
0000000000000000000000000000000000000000;;		Created                 string            `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Details                 map[string]string `json:"details,omitempty"`
0000000000000000000000000000000000000000;;		Disconnected            string            `json:"disconnected,omitempty"`
0000000000000000000000000000000000000000;;		Disksizeallocated       int64             `json:"disksizeallocated,omitempty"`
0000000000000000000000000000000000000000;;		Disksizetotal           int64             `json:"disksizetotal,omitempty"`
0000000000000000000000000000000000000000;;		Events                  string            `json:"events,omitempty"`
0000000000000000000000000000000000000000;;		Gpugroup                []struct {
0000000000000000000000000000000000000000;;			Gpugroupname string `json:"gpugroupname,omitempty"`
0000000000000000000000000000000000000000;;			Vgpu         []struct {
0000000000000000000000000000000000000000;;				Maxcapacity       int64  `json:"maxcapacity,omitempty"`
0000000000000000000000000000000000000000;;				Maxheads          int64  `json:"maxheads,omitempty"`
0000000000000000000000000000000000000000;;				Maxresolutionx    int64  `json:"maxresolutionx,omitempty"`
0000000000000000000000000000000000000000;;				Maxresolutiony    int64  `json:"maxresolutiony,omitempty"`
0000000000000000000000000000000000000000;;				Maxvgpuperpgpu    int64  `json:"maxvgpuperpgpu,omitempty"`
0000000000000000000000000000000000000000;;				Remainingcapacity int64  `json:"remainingcapacity,omitempty"`
0000000000000000000000000000000000000000;;				Vgputype          string `json:"vgputype,omitempty"`
0000000000000000000000000000000000000000;;				Videoram          int64  `json:"videoram,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"vgpu,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"gpugroup,omitempty"`
0000000000000000000000000000000000000000;;		Hahost               bool   `json:"hahost,omitempty"`
0000000000000000000000000000000000000000;;		Hasenoughcapacity    bool   `json:"hasenoughcapacity,omitempty"`
0000000000000000000000000000000000000000;;		Hosttags             string `json:"hosttags,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor           string `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisorversion    string `json:"hypervisorversion,omitempty"`
0000000000000000000000000000000000000000;;		Id                   string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Ipaddress            string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;		Islocalstorageactive bool   `json:"islocalstorageactive,omitempty"`
0000000000000000000000000000000000000000;;		Lastpinged           string `json:"lastpinged,omitempty"`
0000000000000000000000000000000000000000;;		Managementserverid   int64  `json:"managementserverid,omitempty"`
0000000000000000000000000000000000000000;;		Memoryallocated      int64  `json:"memoryallocated,omitempty"`
0000000000000000000000000000000000000000;;		Memorytotal          int64  `json:"memorytotal,omitempty"`
0000000000000000000000000000000000000000;;		Memoryused           int64  `json:"memoryused,omitempty"`
0000000000000000000000000000000000000000;;		Name                 string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbsread       int64  `json:"networkkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbswrite      int64  `json:"networkkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Oscategoryid         string `json:"oscategoryid,omitempty"`
0000000000000000000000000000000000000000;;		Oscategoryname       string `json:"oscategoryname,omitempty"`
0000000000000000000000000000000000000000;;		Podid                string `json:"podid,omitempty"`
0000000000000000000000000000000000000000;;		Podname              string `json:"podname,omitempty"`
0000000000000000000000000000000000000000;;		Removed              string `json:"removed,omitempty"`
0000000000000000000000000000000000000000;;		Resourcestate        string `json:"resourcestate,omitempty"`
0000000000000000000000000000000000000000;;		State                string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Suitableformigration bool   `json:"suitableformigration,omitempty"`
0000000000000000000000000000000000000000;;		Type                 string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Version              string `json:"version,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid               string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename             string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CancelHostMaintenanceParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CancelHostMaintenanceParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CancelHostMaintenanceParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new CancelHostMaintenanceParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *HostService) NewCancelHostMaintenanceParams(id string) *CancelHostMaintenanceParams {
0000000000000000000000000000000000000000;;		p := &CancelHostMaintenanceParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Cancels host maintenance.
0000000000000000000000000000000000000000;;	func (s *HostService) CancelHostMaintenance(p *CancelHostMaintenanceParams) (*CancelHostMaintenanceResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("cancelHostMaintenance", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r CancelHostMaintenanceResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CancelHostMaintenanceResponse struct {
0000000000000000000000000000000000000000;;		JobID                   string            `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Averageload             int64             `json:"averageload,omitempty"`
0000000000000000000000000000000000000000;;		Capabilities            string            `json:"capabilities,omitempty"`
0000000000000000000000000000000000000000;;		Clusterid               string            `json:"clusterid,omitempty"`
0000000000000000000000000000000000000000;;		Clustername             string            `json:"clustername,omitempty"`
0000000000000000000000000000000000000000;;		Clustertype             string            `json:"clustertype,omitempty"`
0000000000000000000000000000000000000000;;		Cpuallocated            string            `json:"cpuallocated,omitempty"`
0000000000000000000000000000000000000000;;		Cpunumber               int               `json:"cpunumber,omitempty"`
0000000000000000000000000000000000000000;;		Cpusockets              int               `json:"cpusockets,omitempty"`
0000000000000000000000000000000000000000;;		Cpuspeed                int64             `json:"cpuspeed,omitempty"`
0000000000000000000000000000000000000000;;		Cpuused                 string            `json:"cpuused,omitempty"`
0000000000000000000000000000000000000000;;		Cpuwithoverprovisioning string            `json:"cpuwithoverprovisioning,omitempty"`
0000000000000000000000000000000000000000;;		Created                 string            `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Details                 map[string]string `json:"details,omitempty"`
0000000000000000000000000000000000000000;;		Disconnected            string            `json:"disconnected,omitempty"`
0000000000000000000000000000000000000000;;		Disksizeallocated       int64             `json:"disksizeallocated,omitempty"`
0000000000000000000000000000000000000000;;		Disksizetotal           int64             `json:"disksizetotal,omitempty"`
0000000000000000000000000000000000000000;;		Events                  string            `json:"events,omitempty"`
0000000000000000000000000000000000000000;;		Gpugroup                []struct {
0000000000000000000000000000000000000000;;			Gpugroupname string `json:"gpugroupname,omitempty"`
0000000000000000000000000000000000000000;;			Vgpu         []struct {
0000000000000000000000000000000000000000;;				Maxcapacity       int64  `json:"maxcapacity,omitempty"`
0000000000000000000000000000000000000000;;				Maxheads          int64  `json:"maxheads,omitempty"`
0000000000000000000000000000000000000000;;				Maxresolutionx    int64  `json:"maxresolutionx,omitempty"`
0000000000000000000000000000000000000000;;				Maxresolutiony    int64  `json:"maxresolutiony,omitempty"`
0000000000000000000000000000000000000000;;				Maxvgpuperpgpu    int64  `json:"maxvgpuperpgpu,omitempty"`
0000000000000000000000000000000000000000;;				Remainingcapacity int64  `json:"remainingcapacity,omitempty"`
0000000000000000000000000000000000000000;;				Vgputype          string `json:"vgputype,omitempty"`
0000000000000000000000000000000000000000;;				Videoram          int64  `json:"videoram,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"vgpu,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"gpugroup,omitempty"`
0000000000000000000000000000000000000000;;		Hahost               bool   `json:"hahost,omitempty"`
0000000000000000000000000000000000000000;;		Hasenoughcapacity    bool   `json:"hasenoughcapacity,omitempty"`
0000000000000000000000000000000000000000;;		Hosttags             string `json:"hosttags,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor           string `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisorversion    string `json:"hypervisorversion,omitempty"`
0000000000000000000000000000000000000000;;		Id                   string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Ipaddress            string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;		Islocalstorageactive bool   `json:"islocalstorageactive,omitempty"`
0000000000000000000000000000000000000000;;		Lastpinged           string `json:"lastpinged,omitempty"`
0000000000000000000000000000000000000000;;		Managementserverid   int64  `json:"managementserverid,omitempty"`
0000000000000000000000000000000000000000;;		Memoryallocated      int64  `json:"memoryallocated,omitempty"`
0000000000000000000000000000000000000000;;		Memorytotal          int64  `json:"memorytotal,omitempty"`
0000000000000000000000000000000000000000;;		Memoryused           int64  `json:"memoryused,omitempty"`
0000000000000000000000000000000000000000;;		Name                 string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbsread       int64  `json:"networkkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbswrite      int64  `json:"networkkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Oscategoryid         string `json:"oscategoryid,omitempty"`
0000000000000000000000000000000000000000;;		Oscategoryname       string `json:"oscategoryname,omitempty"`
0000000000000000000000000000000000000000;;		Podid                string `json:"podid,omitempty"`
0000000000000000000000000000000000000000;;		Podname              string `json:"podname,omitempty"`
0000000000000000000000000000000000000000;;		Removed              string `json:"removed,omitempty"`
0000000000000000000000000000000000000000;;		Resourcestate        string `json:"resourcestate,omitempty"`
0000000000000000000000000000000000000000;;		State                string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Suitableformigration bool   `json:"suitableformigration,omitempty"`
0000000000000000000000000000000000000000;;		Type                 string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Version              string `json:"version,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid               string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename             string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListHostsParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListHostsParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["clusterid"]; found {
0000000000000000000000000000000000000000;;			u.Set("clusterid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["details"]; found {
0000000000000000000000000000000000000000;;			vv := strings.Join(v.([]string), ",")
0000000000000000000000000000000000000000;;			u.Set("details", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["hahost"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("hahost", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["hypervisor"]; found {
0000000000000000000000000000000000000000;;			u.Set("hypervisor", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["keyword"]; found {
0000000000000000000000000000000000000000;;			u.Set("keyword", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["name"]; found {
0000000000000000000000000000000000000000;;			u.Set("name", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["page"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.Itoa(v.(int))
0000000000000000000000000000000000000000;;			u.Set("page", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["pagesize"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.Itoa(v.(int))
0000000000000000000000000000000000000000;;			u.Set("pagesize", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["podid"]; found {
0000000000000000000000000000000000000000;;			u.Set("podid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["resourcestate"]; found {
0000000000000000000000000000000000000000;;			u.Set("resourcestate", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["state"]; found {
0000000000000000000000000000000000000000;;			u.Set("state", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["type"]; found {
0000000000000000000000000000000000000000;;			u.Set("type", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["virtualmachineid"]; found {
0000000000000000000000000000000000000000;;			u.Set("virtualmachineid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["zoneid"]; found {
0000000000000000000000000000000000000000;;			u.Set("zoneid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListHostsParams) SetClusterid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["clusterid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListHostsParams) SetDetails(v []string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["details"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListHostsParams) SetHahost(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["hahost"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListHostsParams) SetHypervisor(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["hypervisor"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListHostsParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListHostsParams) SetKeyword(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["keyword"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListHostsParams) SetName(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["name"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListHostsParams) SetPage(v int) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["page"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListHostsParams) SetPagesize(v int) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["pagesize"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListHostsParams) SetPodid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["podid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListHostsParams) SetResourcestate(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["resourcestate"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListHostsParams) SetState(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["state"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListHostsParams) SetType(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["hostType"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListHostsParams) SetVirtualmachineid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["virtualmachineid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListHostsParams) SetZoneid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["zoneid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new ListHostsParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *HostService) NewListHostsParams() *ListHostsParams {
0000000000000000000000000000000000000000;;		p := &ListHostsParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is a courtesy helper function, which in some cases may not work as expected!
0000000000000000000000000000000000000000;;	func (s *HostService) GetHostID(name string, opts ...OptionFunc) (string, int, error) {
0000000000000000000000000000000000000000;;		p := &ListHostsParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.p["name"] = name
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, fn := range opts {
0000000000000000000000000000000000000000;;			if err := fn(s.cs, p); err != nil {
0000000000000000000000000000000000000000;;				return "", -1, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		l, err := s.ListHosts(p)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", -1, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 0 {
0000000000000000000000000000000000000000;;			return "", l.Count, fmt.Errorf("No match found for %s: %+v", name, l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 1 {
0000000000000000000000000000000000000000;;			return l.Hosts[0].Id, l.Count, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count > 1 {
0000000000000000000000000000000000000000;;			for _, v := range l.Hosts {
0000000000000000000000000000000000000000;;				if v.Name == name {
0000000000000000000000000000000000000000;;					return v.Id, l.Count, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "", l.Count, fmt.Errorf("Could not find an exact match for %s: %+v", name, l)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is a courtesy helper function, which in some cases may not work as expected!
0000000000000000000000000000000000000000;;	func (s *HostService) GetHostByName(name string, opts ...OptionFunc) (*Host, int, error) {
0000000000000000000000000000000000000000;;		id, count, err := s.GetHostID(name, opts...)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, count, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r, count, err := s.GetHostByID(id, opts...)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, count, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return r, count, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is a courtesy helper function, which in some cases may not work as expected!
0000000000000000000000000000000000000000;;	func (s *HostService) GetHostByID(id string, opts ...OptionFunc) (*Host, int, error) {
0000000000000000000000000000000000000000;;		p := &ListHostsParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, fn := range opts {
0000000000000000000000000000000000000000;;			if err := fn(s.cs, p); err != nil {
0000000000000000000000000000000000000000;;				return nil, -1, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		l, err := s.ListHosts(p)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if strings.Contains(err.Error(), fmt.Sprintf(
0000000000000000000000000000000000000000;;				"Invalid parameter id value=%s due to incorrect long value format, "+
0000000000000000000000000000000000000000;;					"or entity does not exist", id)) {
0000000000000000000000000000000000000000;;				return nil, 0, fmt.Errorf("No match found for %s: %+v", id, l)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, -1, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 0 {
0000000000000000000000000000000000000000;;			return nil, l.Count, fmt.Errorf("No match found for %s: %+v", id, l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 1 {
0000000000000000000000000000000000000000;;			return l.Hosts[0], l.Count, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, l.Count, fmt.Errorf("There is more then one result for Host UUID: %s!", id)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Lists hosts.
0000000000000000000000000000000000000000;;	func (s *HostService) ListHosts(p *ListHostsParams) (*ListHostsResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("listHosts", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r ListHostsResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListHostsResponse struct {
0000000000000000000000000000000000000000;;		Count int     `json:"count"`
0000000000000000000000000000000000000000;;		Hosts []*Host `json:"host"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Host struct {
0000000000000000000000000000000000000000;;		Averageload             int64             `json:"averageload,omitempty"`
0000000000000000000000000000000000000000;;		Capabilities            string            `json:"capabilities,omitempty"`
0000000000000000000000000000000000000000;;		Clusterid               string            `json:"clusterid,omitempty"`
0000000000000000000000000000000000000000;;		Clustername             string            `json:"clustername,omitempty"`
0000000000000000000000000000000000000000;;		Clustertype             string            `json:"clustertype,omitempty"`
0000000000000000000000000000000000000000;;		Cpuallocated            string            `json:"cpuallocated,omitempty"`
0000000000000000000000000000000000000000;;		Cpunumber               int               `json:"cpunumber,omitempty"`
0000000000000000000000000000000000000000;;		Cpusockets              int               `json:"cpusockets,omitempty"`
0000000000000000000000000000000000000000;;		Cpuspeed                int64             `json:"cpuspeed,omitempty"`
0000000000000000000000000000000000000000;;		Cpuused                 string            `json:"cpuused,omitempty"`
0000000000000000000000000000000000000000;;		Cpuwithoverprovisioning string            `json:"cpuwithoverprovisioning,omitempty"`
0000000000000000000000000000000000000000;;		Created                 string            `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Details                 map[string]string `json:"details,omitempty"`
0000000000000000000000000000000000000000;;		Disconnected            string            `json:"disconnected,omitempty"`
0000000000000000000000000000000000000000;;		Disksizeallocated       int64             `json:"disksizeallocated,omitempty"`
0000000000000000000000000000000000000000;;		Disksizetotal           int64             `json:"disksizetotal,omitempty"`
0000000000000000000000000000000000000000;;		Events                  string            `json:"events,omitempty"`
0000000000000000000000000000000000000000;;		Gpugroup                []struct {
0000000000000000000000000000000000000000;;			Gpugroupname string `json:"gpugroupname,omitempty"`
0000000000000000000000000000000000000000;;			Vgpu         []struct {
0000000000000000000000000000000000000000;;				Maxcapacity       int64  `json:"maxcapacity,omitempty"`
0000000000000000000000000000000000000000;;				Maxheads          int64  `json:"maxheads,omitempty"`
0000000000000000000000000000000000000000;;				Maxresolutionx    int64  `json:"maxresolutionx,omitempty"`
0000000000000000000000000000000000000000;;				Maxresolutiony    int64  `json:"maxresolutiony,omitempty"`
0000000000000000000000000000000000000000;;				Maxvgpuperpgpu    int64  `json:"maxvgpuperpgpu,omitempty"`
0000000000000000000000000000000000000000;;				Remainingcapacity int64  `json:"remainingcapacity,omitempty"`
0000000000000000000000000000000000000000;;				Vgputype          string `json:"vgputype,omitempty"`
0000000000000000000000000000000000000000;;				Videoram          int64  `json:"videoram,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"vgpu,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"gpugroup,omitempty"`
0000000000000000000000000000000000000000;;		Hahost               bool   `json:"hahost,omitempty"`
0000000000000000000000000000000000000000;;		Hasenoughcapacity    bool   `json:"hasenoughcapacity,omitempty"`
0000000000000000000000000000000000000000;;		Hosttags             string `json:"hosttags,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor           string `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisorversion    string `json:"hypervisorversion,omitempty"`
0000000000000000000000000000000000000000;;		Id                   string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Ipaddress            string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;		Islocalstorageactive bool   `json:"islocalstorageactive,omitempty"`
0000000000000000000000000000000000000000;;		Lastpinged           string `json:"lastpinged,omitempty"`
0000000000000000000000000000000000000000;;		Managementserverid   int64  `json:"managementserverid,omitempty"`
0000000000000000000000000000000000000000;;		Memoryallocated      int64  `json:"memoryallocated,omitempty"`
0000000000000000000000000000000000000000;;		Memorytotal          int64  `json:"memorytotal,omitempty"`
0000000000000000000000000000000000000000;;		Memoryused           int64  `json:"memoryused,omitempty"`
0000000000000000000000000000000000000000;;		Name                 string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbsread       int64  `json:"networkkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbswrite      int64  `json:"networkkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Oscategoryid         string `json:"oscategoryid,omitempty"`
0000000000000000000000000000000000000000;;		Oscategoryname       string `json:"oscategoryname,omitempty"`
0000000000000000000000000000000000000000;;		Podid                string `json:"podid,omitempty"`
0000000000000000000000000000000000000000;;		Podname              string `json:"podname,omitempty"`
0000000000000000000000000000000000000000;;		Removed              string `json:"removed,omitempty"`
0000000000000000000000000000000000000000;;		Resourcestate        string `json:"resourcestate,omitempty"`
0000000000000000000000000000000000000000;;		State                string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Suitableformigration bool   `json:"suitableformigration,omitempty"`
0000000000000000000000000000000000000000;;		Type                 string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Version              string `json:"version,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid               string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename             string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListHostTagsParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListHostTagsParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["keyword"]; found {
0000000000000000000000000000000000000000;;			u.Set("keyword", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["page"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.Itoa(v.(int))
0000000000000000000000000000000000000000;;			u.Set("page", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["pagesize"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.Itoa(v.(int))
0000000000000000000000000000000000000000;;			u.Set("pagesize", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListHostTagsParams) SetKeyword(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["keyword"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListHostTagsParams) SetPage(v int) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["page"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListHostTagsParams) SetPagesize(v int) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["pagesize"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new ListHostTagsParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *HostService) NewListHostTagsParams() *ListHostTagsParams {
0000000000000000000000000000000000000000;;		p := &ListHostTagsParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is a courtesy helper function, which in some cases may not work as expected!
0000000000000000000000000000000000000000;;	func (s *HostService) GetHostTagID(keyword string, opts ...OptionFunc) (string, int, error) {
0000000000000000000000000000000000000000;;		p := &ListHostTagsParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.p["keyword"] = keyword
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, fn := range opts {
0000000000000000000000000000000000000000;;			if err := fn(s.cs, p); err != nil {
0000000000000000000000000000000000000000;;				return "", -1, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		l, err := s.ListHostTags(p)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", -1, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 0 {
0000000000000000000000000000000000000000;;			return "", l.Count, fmt.Errorf("No match found for %s: %+v", keyword, l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 1 {
0000000000000000000000000000000000000000;;			return l.HostTags[0].Id, l.Count, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count > 1 {
0000000000000000000000000000000000000000;;			for _, v := range l.HostTags {
0000000000000000000000000000000000000000;;				if v.Name == keyword {
0000000000000000000000000000000000000000;;					return v.Id, l.Count, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "", l.Count, fmt.Errorf("Could not find an exact match for %s: %+v", keyword, l)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Lists host tags
0000000000000000000000000000000000000000;;	func (s *HostService) ListHostTags(p *ListHostTagsParams) (*ListHostTagsResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("listHostTags", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r ListHostTagsResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListHostTagsResponse struct {
0000000000000000000000000000000000000000;;		Count    int        `json:"count"`
0000000000000000000000000000000000000000;;		HostTags []*HostTag `json:"hosttag"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostTag struct {
0000000000000000000000000000000000000000;;		Hostid int64  `json:"hostid,omitempty"`
0000000000000000000000000000000000000000;;		Id     string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Name   string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FindHostsForMigrationParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *FindHostsForMigrationParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["keyword"]; found {
0000000000000000000000000000000000000000;;			u.Set("keyword", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["page"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.Itoa(v.(int))
0000000000000000000000000000000000000000;;			u.Set("page", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["pagesize"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.Itoa(v.(int))
0000000000000000000000000000000000000000;;			u.Set("pagesize", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["virtualmachineid"]; found {
0000000000000000000000000000000000000000;;			u.Set("virtualmachineid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *FindHostsForMigrationParams) SetKeyword(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["keyword"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *FindHostsForMigrationParams) SetPage(v int) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["page"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *FindHostsForMigrationParams) SetPagesize(v int) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["pagesize"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *FindHostsForMigrationParams) SetVirtualmachineid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["virtualmachineid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new FindHostsForMigrationParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *HostService) NewFindHostsForMigrationParams(virtualmachineid string) *FindHostsForMigrationParams {
0000000000000000000000000000000000000000;;		p := &FindHostsForMigrationParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["virtualmachineid"] = virtualmachineid
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Find hosts suitable for migrating a virtual machine.
0000000000000000000000000000000000000000;;	func (s *HostService) FindHostsForMigration(p *FindHostsForMigrationParams) (*FindHostsForMigrationResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("findHostsForMigration", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r FindHostsForMigrationResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FindHostsForMigrationResponse struct {
0000000000000000000000000000000000000000;;		Averageload             int64  `json:"averageload,omitempty"`
0000000000000000000000000000000000000000;;		Capabilities            string `json:"capabilities,omitempty"`
0000000000000000000000000000000000000000;;		Clusterid               string `json:"clusterid,omitempty"`
0000000000000000000000000000000000000000;;		Clustername             string `json:"clustername,omitempty"`
0000000000000000000000000000000000000000;;		Clustertype             string `json:"clustertype,omitempty"`
0000000000000000000000000000000000000000;;		Cpuallocated            string `json:"cpuallocated,omitempty"`
0000000000000000000000000000000000000000;;		Cpunumber               int    `json:"cpunumber,omitempty"`
0000000000000000000000000000000000000000;;		Cpuspeed                int64  `json:"cpuspeed,omitempty"`
0000000000000000000000000000000000000000;;		Cpuused                 string `json:"cpuused,omitempty"`
0000000000000000000000000000000000000000;;		Cpuwithoverprovisioning string `json:"cpuwithoverprovisioning,omitempty"`
0000000000000000000000000000000000000000;;		Created                 string `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Disconnected            string `json:"disconnected,omitempty"`
0000000000000000000000000000000000000000;;		Disksizeallocated       int64  `json:"disksizeallocated,omitempty"`
0000000000000000000000000000000000000000;;		Disksizetotal           int64  `json:"disksizetotal,omitempty"`
0000000000000000000000000000000000000000;;		Events                  string `json:"events,omitempty"`
0000000000000000000000000000000000000000;;		Hahost                  bool   `json:"hahost,omitempty"`
0000000000000000000000000000000000000000;;		Hasenoughcapacity       bool   `json:"hasenoughcapacity,omitempty"`
0000000000000000000000000000000000000000;;		Hosttags                string `json:"hosttags,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor              string `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisorversion       string `json:"hypervisorversion,omitempty"`
0000000000000000000000000000000000000000;;		Id                      string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Ipaddress               string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;		Islocalstorageactive    bool   `json:"islocalstorageactive,omitempty"`
0000000000000000000000000000000000000000;;		Lastpinged              string `json:"lastpinged,omitempty"`
0000000000000000000000000000000000000000;;		Managementserverid      int64  `json:"managementserverid,omitempty"`
0000000000000000000000000000000000000000;;		Memoryallocated         int64  `json:"memoryallocated,omitempty"`
0000000000000000000000000000000000000000;;		Memorytotal             int64  `json:"memorytotal,omitempty"`
0000000000000000000000000000000000000000;;		Memoryused              int64  `json:"memoryused,omitempty"`
0000000000000000000000000000000000000000;;		Name                    string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbsread          int64  `json:"networkkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbswrite         int64  `json:"networkkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Oscategoryid            string `json:"oscategoryid,omitempty"`
0000000000000000000000000000000000000000;;		Oscategoryname          string `json:"oscategoryname,omitempty"`
0000000000000000000000000000000000000000;;		Podid                   string `json:"podid,omitempty"`
0000000000000000000000000000000000000000;;		Podname                 string `json:"podname,omitempty"`
0000000000000000000000000000000000000000;;		Removed                 string `json:"removed,omitempty"`
0000000000000000000000000000000000000000;;		RequiresStorageMotion   bool   `json:"requiresStorageMotion,omitempty"`
0000000000000000000000000000000000000000;;		Resourcestate           string `json:"resourcestate,omitempty"`
0000000000000000000000000000000000000000;;		State                   string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Suitableformigration    bool   `json:"suitableformigration,omitempty"`
0000000000000000000000000000000000000000;;		Type                    string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Version                 string `json:"version,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid                  string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename                string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddSecondaryStorageParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AddSecondaryStorageParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["url"]; found {
0000000000000000000000000000000000000000;;			u.Set("url", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["zoneid"]; found {
0000000000000000000000000000000000000000;;			u.Set("zoneid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AddSecondaryStorageParams) SetUrl(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["url"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AddSecondaryStorageParams) SetZoneid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["zoneid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new AddSecondaryStorageParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *HostService) NewAddSecondaryStorageParams(url string) *AddSecondaryStorageParams {
0000000000000000000000000000000000000000;;		p := &AddSecondaryStorageParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["url"] = url
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Adds secondary storage.
0000000000000000000000000000000000000000;;	func (s *HostService) AddSecondaryStorage(p *AddSecondaryStorageParams) (*AddSecondaryStorageResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("addSecondaryStorage", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r AddSecondaryStorageResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddSecondaryStorageResponse struct {
0000000000000000000000000000000000000000;;		Details      []string `json:"details,omitempty"`
0000000000000000000000000000000000000000;;		Id           string   `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Name         string   `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Protocol     string   `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;		Providername string   `json:"providername,omitempty"`
0000000000000000000000000000000000000000;;		Scope        string   `json:"scope,omitempty"`
0000000000000000000000000000000000000000;;		Url          string   `json:"url,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid       string   `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename     string   `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateHostPasswordParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateHostPasswordParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["clusterid"]; found {
0000000000000000000000000000000000000000;;			u.Set("clusterid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["hostid"]; found {
0000000000000000000000000000000000000000;;			u.Set("hostid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["password"]; found {
0000000000000000000000000000000000000000;;			u.Set("password", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["update_passwd_on_host"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("update_passwd_on_host", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["username"]; found {
0000000000000000000000000000000000000000;;			u.Set("username", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateHostPasswordParams) SetClusterid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["clusterid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateHostPasswordParams) SetHostid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["hostid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateHostPasswordParams) SetPassword(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["password"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateHostPasswordParams) SetUpdate_passwd_on_host(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["update_passwd_on_host"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateHostPasswordParams) SetUsername(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["username"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new UpdateHostPasswordParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *HostService) NewUpdateHostPasswordParams(password string, username string) *UpdateHostPasswordParams {
0000000000000000000000000000000000000000;;		p := &UpdateHostPasswordParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["password"] = password
0000000000000000000000000000000000000000;;		p.p["username"] = username
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Update password of a host/pool on management server.
0000000000000000000000000000000000000000;;	func (s *HostService) UpdateHostPassword(p *UpdateHostPasswordParams) (*UpdateHostPasswordResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("updateHostPassword", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r UpdateHostPasswordResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateHostPasswordResponse struct {
0000000000000000000000000000000000000000;;		Displaytext string `json:"displaytext,omitempty"`
0000000000000000000000000000000000000000;;		Success     string `json:"success,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReleaseHostReservationParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ReleaseHostReservationParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ReleaseHostReservationParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new ReleaseHostReservationParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *HostService) NewReleaseHostReservationParams(id string) *ReleaseHostReservationParams {
0000000000000000000000000000000000000000;;		p := &ReleaseHostReservationParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Releases host reservation.
0000000000000000000000000000000000000000;;	func (s *HostService) ReleaseHostReservation(p *ReleaseHostReservationParams) (*ReleaseHostReservationResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("releaseHostReservation", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r ReleaseHostReservationResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReleaseHostReservationResponse struct {
0000000000000000000000000000000000000000;;		JobID       string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Displaytext string `json:"displaytext,omitempty"`
0000000000000000000000000000000000000000;;		Success     bool   `json:"success,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddBaremetalHostParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AddBaremetalHostParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["allocationstate"]; found {
0000000000000000000000000000000000000000;;			u.Set("allocationstate", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["clusterid"]; found {
0000000000000000000000000000000000000000;;			u.Set("clusterid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["clustername"]; found {
0000000000000000000000000000000000000000;;			u.Set("clustername", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["hosttags"]; found {
0000000000000000000000000000000000000000;;			vv := strings.Join(v.([]string), ",")
0000000000000000000000000000000000000000;;			u.Set("hosttags", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["hypervisor"]; found {
0000000000000000000000000000000000000000;;			u.Set("hypervisor", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["ipaddress"]; found {
0000000000000000000000000000000000000000;;			u.Set("ipaddress", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["password"]; found {
0000000000000000000000000000000000000000;;			u.Set("password", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["podid"]; found {
0000000000000000000000000000000000000000;;			u.Set("podid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["url"]; found {
0000000000000000000000000000000000000000;;			u.Set("url", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["username"]; found {
0000000000000000000000000000000000000000;;			u.Set("username", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["zoneid"]; found {
0000000000000000000000000000000000000000;;			u.Set("zoneid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AddBaremetalHostParams) SetAllocationstate(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["allocationstate"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AddBaremetalHostParams) SetClusterid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["clusterid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AddBaremetalHostParams) SetClustername(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["clustername"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AddBaremetalHostParams) SetHosttags(v []string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["hosttags"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AddBaremetalHostParams) SetHypervisor(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["hypervisor"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AddBaremetalHostParams) SetIpaddress(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["ipaddress"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AddBaremetalHostParams) SetPassword(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["password"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AddBaremetalHostParams) SetPodid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["podid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AddBaremetalHostParams) SetUrl(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["url"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AddBaremetalHostParams) SetUsername(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["username"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AddBaremetalHostParams) SetZoneid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["zoneid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new AddBaremetalHostParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *HostService) NewAddBaremetalHostParams(hypervisor string, password string, podid string, url string, username string, zoneid string) *AddBaremetalHostParams {
0000000000000000000000000000000000000000;;		p := &AddBaremetalHostParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["hypervisor"] = hypervisor
0000000000000000000000000000000000000000;;		p.p["password"] = password
0000000000000000000000000000000000000000;;		p.p["podid"] = podid
0000000000000000000000000000000000000000;;		p.p["url"] = url
0000000000000000000000000000000000000000;;		p.p["username"] = username
0000000000000000000000000000000000000000;;		p.p["zoneid"] = zoneid
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// add a baremetal host
0000000000000000000000000000000000000000;;	func (s *HostService) AddBaremetalHost(p *AddBaremetalHostParams) (*AddBaremetalHostResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("addBaremetalHost", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r AddBaremetalHostResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddBaremetalHostResponse struct {
0000000000000000000000000000000000000000;;		Averageload             int64             `json:"averageload,omitempty"`
0000000000000000000000000000000000000000;;		Capabilities            string            `json:"capabilities,omitempty"`
0000000000000000000000000000000000000000;;		Clusterid               string            `json:"clusterid,omitempty"`
0000000000000000000000000000000000000000;;		Clustername             string            `json:"clustername,omitempty"`
0000000000000000000000000000000000000000;;		Clustertype             string            `json:"clustertype,omitempty"`
0000000000000000000000000000000000000000;;		Cpuallocated            string            `json:"cpuallocated,omitempty"`
0000000000000000000000000000000000000000;;		Cpunumber               int               `json:"cpunumber,omitempty"`
0000000000000000000000000000000000000000;;		Cpusockets              int               `json:"cpusockets,omitempty"`
0000000000000000000000000000000000000000;;		Cpuspeed                int64             `json:"cpuspeed,omitempty"`
0000000000000000000000000000000000000000;;		Cpuused                 string            `json:"cpuused,omitempty"`
0000000000000000000000000000000000000000;;		Cpuwithoverprovisioning string            `json:"cpuwithoverprovisioning,omitempty"`
0000000000000000000000000000000000000000;;		Created                 string            `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Details                 map[string]string `json:"details,omitempty"`
0000000000000000000000000000000000000000;;		Disconnected            string            `json:"disconnected,omitempty"`
0000000000000000000000000000000000000000;;		Disksizeallocated       int64             `json:"disksizeallocated,omitempty"`
0000000000000000000000000000000000000000;;		Disksizetotal           int64             `json:"disksizetotal,omitempty"`
0000000000000000000000000000000000000000;;		Events                  string            `json:"events,omitempty"`
0000000000000000000000000000000000000000;;		Gpugroup                []struct {
0000000000000000000000000000000000000000;;			Gpugroupname string `json:"gpugroupname,omitempty"`
0000000000000000000000000000000000000000;;			Vgpu         []struct {
0000000000000000000000000000000000000000;;				Maxcapacity       int64  `json:"maxcapacity,omitempty"`
0000000000000000000000000000000000000000;;				Maxheads          int64  `json:"maxheads,omitempty"`
0000000000000000000000000000000000000000;;				Maxresolutionx    int64  `json:"maxresolutionx,omitempty"`
0000000000000000000000000000000000000000;;				Maxresolutiony    int64  `json:"maxresolutiony,omitempty"`
0000000000000000000000000000000000000000;;				Maxvgpuperpgpu    int64  `json:"maxvgpuperpgpu,omitempty"`
0000000000000000000000000000000000000000;;				Remainingcapacity int64  `json:"remainingcapacity,omitempty"`
0000000000000000000000000000000000000000;;				Vgputype          string `json:"vgputype,omitempty"`
0000000000000000000000000000000000000000;;				Videoram          int64  `json:"videoram,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"vgpu,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"gpugroup,omitempty"`
0000000000000000000000000000000000000000;;		Hahost               bool   `json:"hahost,omitempty"`
0000000000000000000000000000000000000000;;		Hasenoughcapacity    bool   `json:"hasenoughcapacity,omitempty"`
0000000000000000000000000000000000000000;;		Hosttags             string `json:"hosttags,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor           string `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisorversion    string `json:"hypervisorversion,omitempty"`
0000000000000000000000000000000000000000;;		Id                   string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Ipaddress            string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;		Islocalstorageactive bool   `json:"islocalstorageactive,omitempty"`
0000000000000000000000000000000000000000;;		Lastpinged           string `json:"lastpinged,omitempty"`
0000000000000000000000000000000000000000;;		Managementserverid   int64  `json:"managementserverid,omitempty"`
0000000000000000000000000000000000000000;;		Memoryallocated      int64  `json:"memoryallocated,omitempty"`
0000000000000000000000000000000000000000;;		Memorytotal          int64  `json:"memorytotal,omitempty"`
0000000000000000000000000000000000000000;;		Memoryused           int64  `json:"memoryused,omitempty"`
0000000000000000000000000000000000000000;;		Name                 string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbsread       int64  `json:"networkkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbswrite      int64  `json:"networkkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Oscategoryid         string `json:"oscategoryid,omitempty"`
0000000000000000000000000000000000000000;;		Oscategoryname       string `json:"oscategoryname,omitempty"`
0000000000000000000000000000000000000000;;		Podid                string `json:"podid,omitempty"`
0000000000000000000000000000000000000000;;		Podname              string `json:"podname,omitempty"`
0000000000000000000000000000000000000000;;		Removed              string `json:"removed,omitempty"`
0000000000000000000000000000000000000000;;		Resourcestate        string `json:"resourcestate,omitempty"`
0000000000000000000000000000000000000000;;		State                string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Suitableformigration bool   `json:"suitableformigration,omitempty"`
0000000000000000000000000000000000000000;;		Type                 string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Version              string `json:"version,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid               string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename             string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DedicateHostParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DedicateHostParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["account"]; found {
0000000000000000000000000000000000000000;;			u.Set("account", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["domainid"]; found {
0000000000000000000000000000000000000000;;			u.Set("domainid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["hostid"]; found {
0000000000000000000000000000000000000000;;			u.Set("hostid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DedicateHostParams) SetAccount(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["account"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DedicateHostParams) SetDomainid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["domainid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DedicateHostParams) SetHostid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["hostid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new DedicateHostParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *HostService) NewDedicateHostParams(domainid string, hostid string) *DedicateHostParams {
0000000000000000000000000000000000000000;;		p := &DedicateHostParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["domainid"] = domainid
0000000000000000000000000000000000000000;;		p.p["hostid"] = hostid
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Dedicates a host.
0000000000000000000000000000000000000000;;	func (s *HostService) DedicateHost(p *DedicateHostParams) (*DedicateHostResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("dedicateHost", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r DedicateHostResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DedicateHostResponse struct {
0000000000000000000000000000000000000000;;		JobID           string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Accountid       string `json:"accountid,omitempty"`
0000000000000000000000000000000000000000;;		Affinitygroupid string `json:"affinitygroupid,omitempty"`
0000000000000000000000000000000000000000;;		Domainid        string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Hostid          string `json:"hostid,omitempty"`
0000000000000000000000000000000000000000;;		Hostname        string `json:"hostname,omitempty"`
0000000000000000000000000000000000000000;;		Id              string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReleaseDedicatedHostParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ReleaseDedicatedHostParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["hostid"]; found {
0000000000000000000000000000000000000000;;			u.Set("hostid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ReleaseDedicatedHostParams) SetHostid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["hostid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new ReleaseDedicatedHostParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *HostService) NewReleaseDedicatedHostParams(hostid string) *ReleaseDedicatedHostParams {
0000000000000000000000000000000000000000;;		p := &ReleaseDedicatedHostParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["hostid"] = hostid
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Release the dedication for host
0000000000000000000000000000000000000000;;	func (s *HostService) ReleaseDedicatedHost(p *ReleaseDedicatedHostParams) (*ReleaseDedicatedHostResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("releaseDedicatedHost", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r ReleaseDedicatedHostResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReleaseDedicatedHostResponse struct {
0000000000000000000000000000000000000000;;		JobID       string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Displaytext string `json:"displaytext,omitempty"`
0000000000000000000000000000000000000000;;		Success     bool   `json:"success,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListDedicatedHostsParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListDedicatedHostsParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["account"]; found {
0000000000000000000000000000000000000000;;			u.Set("account", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["affinitygroupid"]; found {
0000000000000000000000000000000000000000;;			u.Set("affinitygroupid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["domainid"]; found {
0000000000000000000000000000000000000000;;			u.Set("domainid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["hostid"]; found {
0000000000000000000000000000000000000000;;			u.Set("hostid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["keyword"]; found {
0000000000000000000000000000000000000000;;			u.Set("keyword", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["page"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.Itoa(v.(int))
0000000000000000000000000000000000000000;;			u.Set("page", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["pagesize"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.Itoa(v.(int))
0000000000000000000000000000000000000000;;			u.Set("pagesize", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListDedicatedHostsParams) SetAccount(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["account"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListDedicatedHostsParams) SetAffinitygroupid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["affinitygroupid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListDedicatedHostsParams) SetDomainid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["domainid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListDedicatedHostsParams) SetHostid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["hostid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListDedicatedHostsParams) SetKeyword(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["keyword"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListDedicatedHostsParams) SetPage(v int) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["page"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListDedicatedHostsParams) SetPagesize(v int) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["pagesize"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new ListDedicatedHostsParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *HostService) NewListDedicatedHostsParams() *ListDedicatedHostsParams {
0000000000000000000000000000000000000000;;		p := &ListDedicatedHostsParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Lists dedicated hosts.
0000000000000000000000000000000000000000;;	func (s *HostService) ListDedicatedHosts(p *ListDedicatedHostsParams) (*ListDedicatedHostsResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("listDedicatedHosts", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r ListDedicatedHostsResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListDedicatedHostsResponse struct {
0000000000000000000000000000000000000000;;		Count          int              `json:"count"`
0000000000000000000000000000000000000000;;		DedicatedHosts []*DedicatedHost `json:"dedicatedhost"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DedicatedHost struct {
0000000000000000000000000000000000000000;;		Accountid       string `json:"accountid,omitempty"`
0000000000000000000000000000000000000000;;		Affinitygroupid string `json:"affinitygroupid,omitempty"`
0000000000000000000000000000000000000000;;		Domainid        string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Hostid          string `json:"hostid,omitempty"`
0000000000000000000000000000000000000000;;		Hostname        string `json:"hostname,omitempty"`
0000000000000000000000000000000000000000;;		Id              string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddGloboDnsHostParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AddGloboDnsHostParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["password"]; found {
0000000000000000000000000000000000000000;;			u.Set("password", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["physicalnetworkid"]; found {
0000000000000000000000000000000000000000;;			u.Set("physicalnetworkid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["url"]; found {
0000000000000000000000000000000000000000;;			u.Set("url", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["username"]; found {
0000000000000000000000000000000000000000;;			u.Set("username", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AddGloboDnsHostParams) SetPassword(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["password"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AddGloboDnsHostParams) SetPhysicalnetworkid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["physicalnetworkid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AddGloboDnsHostParams) SetUrl(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["url"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AddGloboDnsHostParams) SetUsername(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["username"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new AddGloboDnsHostParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *HostService) NewAddGloboDnsHostParams(password string, physicalnetworkid string, url string, username string) *AddGloboDnsHostParams {
0000000000000000000000000000000000000000;;		p := &AddGloboDnsHostParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["password"] = password
0000000000000000000000000000000000000000;;		p.p["physicalnetworkid"] = physicalnetworkid
0000000000000000000000000000000000000000;;		p.p["url"] = url
0000000000000000000000000000000000000000;;		p.p["username"] = username
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Adds the GloboDNS external host
0000000000000000000000000000000000000000;;	func (s *HostService) AddGloboDnsHost(p *AddGloboDnsHostParams) (*AddGloboDnsHostResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("addGloboDnsHost", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r AddGloboDnsHostResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddGloboDnsHostResponse struct {
0000000000000000000000000000000000000000;;		JobID       string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Displaytext string `json:"displaytext,omitempty"`
0000000000000000000000000000000000000000;;		Success     bool   `json:"success,omitempty"`
0000000000000000000000000000000000000000;;	}
