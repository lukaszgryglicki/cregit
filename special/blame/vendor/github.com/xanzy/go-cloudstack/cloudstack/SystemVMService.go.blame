0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Copyright 2016, Sander van Harmelen
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
0000000000000000000000000000000000000000;;	//
0a16da49b5158d8aef850f86fc8936f4afa6c64a;;	
0000000000000000000000000000000000000000;;	package cloudstack
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StartSystemVmParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *StartSystemVmParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *StartSystemVmParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new StartSystemVmParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *SystemVMService) NewStartSystemVmParams(id string) *StartSystemVmParams {
0000000000000000000000000000000000000000;;		p := &StartSystemVmParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Starts a system virtual machine.
0000000000000000000000000000000000000000;;	func (s *SystemVMService) StartSystemVm(p *StartSystemVmParams) (*StartSystemVmResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("startSystemVm", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r StartSystemVmResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StartSystemVmResponse struct {
0000000000000000000000000000000000000000;;		JobID                string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Activeviewersessions int    `json:"activeviewersessions,omitempty"`
0000000000000000000000000000000000000000;;		Created              string `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Dns1                 string `json:"dns1,omitempty"`
0000000000000000000000000000000000000000;;		Dns2                 string `json:"dns2,omitempty"`
0000000000000000000000000000000000000000;;		Gateway              string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;		Hostid               string `json:"hostid,omitempty"`
0000000000000000000000000000000000000000;;		Hostname             string `json:"hostname,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor           string `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Id                   string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Jobid                string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Jobstatus            int    `json:"jobstatus,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalip          string `json:"linklocalip,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalmacaddress  string `json:"linklocalmacaddress,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalnetmask     string `json:"linklocalnetmask,omitempty"`
0000000000000000000000000000000000000000;;		Name                 string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkdomain        string `json:"networkdomain,omitempty"`
0000000000000000000000000000000000000000;;		Podid                string `json:"podid,omitempty"`
0000000000000000000000000000000000000000;;		Privateip            string `json:"privateip,omitempty"`
0000000000000000000000000000000000000000;;		Privatemacaddress    string `json:"privatemacaddress,omitempty"`
0000000000000000000000000000000000000000;;		Privatenetmask       string `json:"privatenetmask,omitempty"`
0000000000000000000000000000000000000000;;		Publicip             string `json:"publicip,omitempty"`
0000000000000000000000000000000000000000;;		Publicmacaddress     string `json:"publicmacaddress,omitempty"`
0000000000000000000000000000000000000000;;		Publicnetmask        string `json:"publicnetmask,omitempty"`
0000000000000000000000000000000000000000;;		State                string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Systemvmtype         string `json:"systemvmtype,omitempty"`
0000000000000000000000000000000000000000;;		Templateid           string `json:"templateid,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid               string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename             string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RebootSystemVmParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *RebootSystemVmParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *RebootSystemVmParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new RebootSystemVmParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *SystemVMService) NewRebootSystemVmParams(id string) *RebootSystemVmParams {
0000000000000000000000000000000000000000;;		p := &RebootSystemVmParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Reboots a system VM.
0000000000000000000000000000000000000000;;	func (s *SystemVMService) RebootSystemVm(p *RebootSystemVmParams) (*RebootSystemVmResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("rebootSystemVm", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r RebootSystemVmResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RebootSystemVmResponse struct {
0000000000000000000000000000000000000000;;		JobID                string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Activeviewersessions int    `json:"activeviewersessions,omitempty"`
0000000000000000000000000000000000000000;;		Created              string `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Dns1                 string `json:"dns1,omitempty"`
0000000000000000000000000000000000000000;;		Dns2                 string `json:"dns2,omitempty"`
0000000000000000000000000000000000000000;;		Gateway              string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;		Hostid               string `json:"hostid,omitempty"`
0000000000000000000000000000000000000000;;		Hostname             string `json:"hostname,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor           string `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Id                   string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Jobid                string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Jobstatus            int    `json:"jobstatus,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalip          string `json:"linklocalip,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalmacaddress  string `json:"linklocalmacaddress,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalnetmask     string `json:"linklocalnetmask,omitempty"`
0000000000000000000000000000000000000000;;		Name                 string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkdomain        string `json:"networkdomain,omitempty"`
0000000000000000000000000000000000000000;;		Podid                string `json:"podid,omitempty"`
0000000000000000000000000000000000000000;;		Privateip            string `json:"privateip,omitempty"`
0000000000000000000000000000000000000000;;		Privatemacaddress    string `json:"privatemacaddress,omitempty"`
0000000000000000000000000000000000000000;;		Privatenetmask       string `json:"privatenetmask,omitempty"`
0000000000000000000000000000000000000000;;		Publicip             string `json:"publicip,omitempty"`
0000000000000000000000000000000000000000;;		Publicmacaddress     string `json:"publicmacaddress,omitempty"`
0000000000000000000000000000000000000000;;		Publicnetmask        string `json:"publicnetmask,omitempty"`
0000000000000000000000000000000000000000;;		State                string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Systemvmtype         string `json:"systemvmtype,omitempty"`
0000000000000000000000000000000000000000;;		Templateid           string `json:"templateid,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid               string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename             string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StopSystemVmParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *StopSystemVmParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["forced"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("forced", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *StopSystemVmParams) SetForced(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["forced"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *StopSystemVmParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new StopSystemVmParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *SystemVMService) NewStopSystemVmParams(id string) *StopSystemVmParams {
0000000000000000000000000000000000000000;;		p := &StopSystemVmParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Stops a system VM.
0000000000000000000000000000000000000000;;	func (s *SystemVMService) StopSystemVm(p *StopSystemVmParams) (*StopSystemVmResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("stopSystemVm", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r StopSystemVmResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StopSystemVmResponse struct {
0000000000000000000000000000000000000000;;		JobID                string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Activeviewersessions int    `json:"activeviewersessions,omitempty"`
0000000000000000000000000000000000000000;;		Created              string `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Dns1                 string `json:"dns1,omitempty"`
0000000000000000000000000000000000000000;;		Dns2                 string `json:"dns2,omitempty"`
0000000000000000000000000000000000000000;;		Gateway              string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;		Hostid               string `json:"hostid,omitempty"`
0000000000000000000000000000000000000000;;		Hostname             string `json:"hostname,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor           string `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Id                   string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Jobid                string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Jobstatus            int    `json:"jobstatus,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalip          string `json:"linklocalip,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalmacaddress  string `json:"linklocalmacaddress,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalnetmask     string `json:"linklocalnetmask,omitempty"`
0000000000000000000000000000000000000000;;		Name                 string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkdomain        string `json:"networkdomain,omitempty"`
0000000000000000000000000000000000000000;;		Podid                string `json:"podid,omitempty"`
0000000000000000000000000000000000000000;;		Privateip            string `json:"privateip,omitempty"`
0000000000000000000000000000000000000000;;		Privatemacaddress    string `json:"privatemacaddress,omitempty"`
0000000000000000000000000000000000000000;;		Privatenetmask       string `json:"privatenetmask,omitempty"`
0000000000000000000000000000000000000000;;		Publicip             string `json:"publicip,omitempty"`
0000000000000000000000000000000000000000;;		Publicmacaddress     string `json:"publicmacaddress,omitempty"`
0000000000000000000000000000000000000000;;		Publicnetmask        string `json:"publicnetmask,omitempty"`
0000000000000000000000000000000000000000;;		State                string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Systemvmtype         string `json:"systemvmtype,omitempty"`
0000000000000000000000000000000000000000;;		Templateid           string `json:"templateid,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid               string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename             string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DestroySystemVmParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DestroySystemVmParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DestroySystemVmParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new DestroySystemVmParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *SystemVMService) NewDestroySystemVmParams(id string) *DestroySystemVmParams {
0000000000000000000000000000000000000000;;		p := &DestroySystemVmParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Destroyes a system virtual machine.
0000000000000000000000000000000000000000;;	func (s *SystemVMService) DestroySystemVm(p *DestroySystemVmParams) (*DestroySystemVmResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("destroySystemVm", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r DestroySystemVmResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DestroySystemVmResponse struct {
0000000000000000000000000000000000000000;;		JobID                string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Activeviewersessions int    `json:"activeviewersessions,omitempty"`
0000000000000000000000000000000000000000;;		Created              string `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Dns1                 string `json:"dns1,omitempty"`
0000000000000000000000000000000000000000;;		Dns2                 string `json:"dns2,omitempty"`
0000000000000000000000000000000000000000;;		Gateway              string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;		Hostid               string `json:"hostid,omitempty"`
0000000000000000000000000000000000000000;;		Hostname             string `json:"hostname,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor           string `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Id                   string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Jobid                string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Jobstatus            int    `json:"jobstatus,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalip          string `json:"linklocalip,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalmacaddress  string `json:"linklocalmacaddress,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalnetmask     string `json:"linklocalnetmask,omitempty"`
0000000000000000000000000000000000000000;;		Name                 string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkdomain        string `json:"networkdomain,omitempty"`
0000000000000000000000000000000000000000;;		Podid                string `json:"podid,omitempty"`
0000000000000000000000000000000000000000;;		Privateip            string `json:"privateip,omitempty"`
0000000000000000000000000000000000000000;;		Privatemacaddress    string `json:"privatemacaddress,omitempty"`
0000000000000000000000000000000000000000;;		Privatenetmask       string `json:"privatenetmask,omitempty"`
0000000000000000000000000000000000000000;;		Publicip             string `json:"publicip,omitempty"`
0000000000000000000000000000000000000000;;		Publicmacaddress     string `json:"publicmacaddress,omitempty"`
0000000000000000000000000000000000000000;;		Publicnetmask        string `json:"publicnetmask,omitempty"`
0000000000000000000000000000000000000000;;		State                string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Systemvmtype         string `json:"systemvmtype,omitempty"`
0000000000000000000000000000000000000000;;		Templateid           string `json:"templateid,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid               string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename             string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListSystemVmsParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListSystemVmsParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["hostid"]; found {
0000000000000000000000000000000000000000;;			u.Set("hostid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["keyword"]; found {
0000000000000000000000000000000000000000;;			u.Set("keyword", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["name"]; found {
0000000000000000000000000000000000000000;;			u.Set("name", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["page"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.Itoa(v.(int))
0000000000000000000000000000000000000000;;			u.Set("page", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["pagesize"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.Itoa(v.(int))
0000000000000000000000000000000000000000;;			u.Set("pagesize", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["podid"]; found {
0000000000000000000000000000000000000000;;			u.Set("podid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["state"]; found {
0000000000000000000000000000000000000000;;			u.Set("state", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["storageid"]; found {
0000000000000000000000000000000000000000;;			u.Set("storageid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["systemvmtype"]; found {
0000000000000000000000000000000000000000;;			u.Set("systemvmtype", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["zoneid"]; found {
0000000000000000000000000000000000000000;;			u.Set("zoneid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListSystemVmsParams) SetHostid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["hostid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListSystemVmsParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListSystemVmsParams) SetKeyword(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["keyword"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListSystemVmsParams) SetName(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["name"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListSystemVmsParams) SetPage(v int) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["page"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListSystemVmsParams) SetPagesize(v int) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["pagesize"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListSystemVmsParams) SetPodid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["podid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListSystemVmsParams) SetState(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["state"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListSystemVmsParams) SetStorageid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["storageid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListSystemVmsParams) SetSystemvmtype(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["systemvmtype"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListSystemVmsParams) SetZoneid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["zoneid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new ListSystemVmsParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *SystemVMService) NewListSystemVmsParams() *ListSystemVmsParams {
0000000000000000000000000000000000000000;;		p := &ListSystemVmsParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is a courtesy helper function, which in some cases may not work as expected!
0000000000000000000000000000000000000000;;	func (s *SystemVMService) GetSystemVmID(name string, opts ...OptionFunc) (string, int, error) {
0000000000000000000000000000000000000000;;		p := &ListSystemVmsParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.p["name"] = name
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, fn := range opts {
0000000000000000000000000000000000000000;;			if err := fn(s.cs, p); err != nil {
0000000000000000000000000000000000000000;;				return "", -1, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		l, err := s.ListSystemVms(p)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", -1, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 0 {
0000000000000000000000000000000000000000;;			return "", l.Count, fmt.Errorf("No match found for %s: %+v", name, l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 1 {
0000000000000000000000000000000000000000;;			return l.SystemVms[0].Id, l.Count, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count > 1 {
0000000000000000000000000000000000000000;;			for _, v := range l.SystemVms {
0000000000000000000000000000000000000000;;				if v.Name == name {
0000000000000000000000000000000000000000;;					return v.Id, l.Count, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "", l.Count, fmt.Errorf("Could not find an exact match for %s: %+v", name, l)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is a courtesy helper function, which in some cases may not work as expected!
0000000000000000000000000000000000000000;;	func (s *SystemVMService) GetSystemVmByName(name string, opts ...OptionFunc) (*SystemVm, int, error) {
0000000000000000000000000000000000000000;;		id, count, err := s.GetSystemVmID(name, opts...)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, count, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r, count, err := s.GetSystemVmByID(id, opts...)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, count, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return r, count, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is a courtesy helper function, which in some cases may not work as expected!
0000000000000000000000000000000000000000;;	func (s *SystemVMService) GetSystemVmByID(id string, opts ...OptionFunc) (*SystemVm, int, error) {
0000000000000000000000000000000000000000;;		p := &ListSystemVmsParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, fn := range opts {
0000000000000000000000000000000000000000;;			if err := fn(s.cs, p); err != nil {
0000000000000000000000000000000000000000;;				return nil, -1, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		l, err := s.ListSystemVms(p)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if strings.Contains(err.Error(), fmt.Sprintf(
0000000000000000000000000000000000000000;;				"Invalid parameter id value=%s due to incorrect long value format, "+
0000000000000000000000000000000000000000;;					"or entity does not exist", id)) {
0000000000000000000000000000000000000000;;				return nil, 0, fmt.Errorf("No match found for %s: %+v", id, l)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, -1, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 0 {
0000000000000000000000000000000000000000;;			return nil, l.Count, fmt.Errorf("No match found for %s: %+v", id, l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 1 {
0000000000000000000000000000000000000000;;			return l.SystemVms[0], l.Count, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, l.Count, fmt.Errorf("There is more then one result for SystemVm UUID: %s!", id)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List system virtual machines.
0000000000000000000000000000000000000000;;	func (s *SystemVMService) ListSystemVms(p *ListSystemVmsParams) (*ListSystemVmsResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("listSystemVms", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r ListSystemVmsResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListSystemVmsResponse struct {
0000000000000000000000000000000000000000;;		Count     int         `json:"count"`
0000000000000000000000000000000000000000;;		SystemVms []*SystemVm `json:"systemvm"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SystemVm struct {
0000000000000000000000000000000000000000;;		Activeviewersessions int    `json:"activeviewersessions,omitempty"`
0000000000000000000000000000000000000000;;		Created              string `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Dns1                 string `json:"dns1,omitempty"`
0000000000000000000000000000000000000000;;		Dns2                 string `json:"dns2,omitempty"`
0000000000000000000000000000000000000000;;		Gateway              string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;		Hostid               string `json:"hostid,omitempty"`
0000000000000000000000000000000000000000;;		Hostname             string `json:"hostname,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor           string `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Id                   string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Jobid                string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Jobstatus            int    `json:"jobstatus,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalip          string `json:"linklocalip,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalmacaddress  string `json:"linklocalmacaddress,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalnetmask     string `json:"linklocalnetmask,omitempty"`
0000000000000000000000000000000000000000;;		Name                 string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkdomain        string `json:"networkdomain,omitempty"`
0000000000000000000000000000000000000000;;		Podid                string `json:"podid,omitempty"`
0000000000000000000000000000000000000000;;		Privateip            string `json:"privateip,omitempty"`
0000000000000000000000000000000000000000;;		Privatemacaddress    string `json:"privatemacaddress,omitempty"`
0000000000000000000000000000000000000000;;		Privatenetmask       string `json:"privatenetmask,omitempty"`
0000000000000000000000000000000000000000;;		Publicip             string `json:"publicip,omitempty"`
0000000000000000000000000000000000000000;;		Publicmacaddress     string `json:"publicmacaddress,omitempty"`
0000000000000000000000000000000000000000;;		Publicnetmask        string `json:"publicnetmask,omitempty"`
0000000000000000000000000000000000000000;;		State                string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Systemvmtype         string `json:"systemvmtype,omitempty"`
0000000000000000000000000000000000000000;;		Templateid           string `json:"templateid,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid               string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename             string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MigrateSystemVmParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *MigrateSystemVmParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["hostid"]; found {
0000000000000000000000000000000000000000;;			u.Set("hostid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["virtualmachineid"]; found {
0000000000000000000000000000000000000000;;			u.Set("virtualmachineid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *MigrateSystemVmParams) SetHostid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["hostid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *MigrateSystemVmParams) SetVirtualmachineid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["virtualmachineid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new MigrateSystemVmParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *SystemVMService) NewMigrateSystemVmParams(hostid string, virtualmachineid string) *MigrateSystemVmParams {
0000000000000000000000000000000000000000;;		p := &MigrateSystemVmParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["hostid"] = hostid
0000000000000000000000000000000000000000;;		p.p["virtualmachineid"] = virtualmachineid
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Attempts Migration of a system virtual machine to the host specified.
0000000000000000000000000000000000000000;;	func (s *SystemVMService) MigrateSystemVm(p *MigrateSystemVmParams) (*MigrateSystemVmResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("migrateSystemVm", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r MigrateSystemVmResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MigrateSystemVmResponse struct {
0000000000000000000000000000000000000000;;		JobID                string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Activeviewersessions int    `json:"activeviewersessions,omitempty"`
0000000000000000000000000000000000000000;;		Created              string `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Dns1                 string `json:"dns1,omitempty"`
0000000000000000000000000000000000000000;;		Dns2                 string `json:"dns2,omitempty"`
0000000000000000000000000000000000000000;;		Gateway              string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;		Hostid               string `json:"hostid,omitempty"`
0000000000000000000000000000000000000000;;		Hostname             string `json:"hostname,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor           string `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Id                   string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Jobid                string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Jobstatus            int    `json:"jobstatus,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalip          string `json:"linklocalip,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalmacaddress  string `json:"linklocalmacaddress,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalnetmask     string `json:"linklocalnetmask,omitempty"`
0000000000000000000000000000000000000000;;		Name                 string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkdomain        string `json:"networkdomain,omitempty"`
0000000000000000000000000000000000000000;;		Podid                string `json:"podid,omitempty"`
0000000000000000000000000000000000000000;;		Privateip            string `json:"privateip,omitempty"`
0000000000000000000000000000000000000000;;		Privatemacaddress    string `json:"privatemacaddress,omitempty"`
0000000000000000000000000000000000000000;;		Privatenetmask       string `json:"privatenetmask,omitempty"`
0000000000000000000000000000000000000000;;		Publicip             string `json:"publicip,omitempty"`
0000000000000000000000000000000000000000;;		Publicmacaddress     string `json:"publicmacaddress,omitempty"`
0000000000000000000000000000000000000000;;		Publicnetmask        string `json:"publicnetmask,omitempty"`
0000000000000000000000000000000000000000;;		State                string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Systemvmtype         string `json:"systemvmtype,omitempty"`
0000000000000000000000000000000000000000;;		Templateid           string `json:"templateid,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid               string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename             string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ChangeServiceForSystemVmParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ChangeServiceForSystemVmParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["details"]; found {
0000000000000000000000000000000000000000;;			i := 0
0000000000000000000000000000000000000000;;			for k, vv := range v.(map[string]string) {
0000000000000000000000000000000000000000;;				u.Set(fmt.Sprintf("details[%d].key", i), k)
0000000000000000000000000000000000000000;;				u.Set(fmt.Sprintf("details[%d].value", i), vv)
0000000000000000000000000000000000000000;;				i++
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["serviceofferingid"]; found {
0000000000000000000000000000000000000000;;			u.Set("serviceofferingid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ChangeServiceForSystemVmParams) SetDetails(v map[string]string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["details"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ChangeServiceForSystemVmParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ChangeServiceForSystemVmParams) SetServiceofferingid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["serviceofferingid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new ChangeServiceForSystemVmParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *SystemVMService) NewChangeServiceForSystemVmParams(id string, serviceofferingid string) *ChangeServiceForSystemVmParams {
0000000000000000000000000000000000000000;;		p := &ChangeServiceForSystemVmParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		p.p["serviceofferingid"] = serviceofferingid
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Changes the service offering for a system vm (console proxy or secondary storage). The system vm must be in a "Stopped" state for this command to take effect.
0000000000000000000000000000000000000000;;	func (s *SystemVMService) ChangeServiceForSystemVm(p *ChangeServiceForSystemVmParams) (*ChangeServiceForSystemVmResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("changeServiceForSystemVm", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r ChangeServiceForSystemVmResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ChangeServiceForSystemVmResponse struct {
0000000000000000000000000000000000000000;;		Activeviewersessions int    `json:"activeviewersessions,omitempty"`
0000000000000000000000000000000000000000;;		Created              string `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Dns1                 string `json:"dns1,omitempty"`
0000000000000000000000000000000000000000;;		Dns2                 string `json:"dns2,omitempty"`
0000000000000000000000000000000000000000;;		Gateway              string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;		Hostid               string `json:"hostid,omitempty"`
0000000000000000000000000000000000000000;;		Hostname             string `json:"hostname,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor           string `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Id                   string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Jobid                string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Jobstatus            int    `json:"jobstatus,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalip          string `json:"linklocalip,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalmacaddress  string `json:"linklocalmacaddress,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalnetmask     string `json:"linklocalnetmask,omitempty"`
0000000000000000000000000000000000000000;;		Name                 string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkdomain        string `json:"networkdomain,omitempty"`
0000000000000000000000000000000000000000;;		Podid                string `json:"podid,omitempty"`
0000000000000000000000000000000000000000;;		Privateip            string `json:"privateip,omitempty"`
0000000000000000000000000000000000000000;;		Privatemacaddress    string `json:"privatemacaddress,omitempty"`
0000000000000000000000000000000000000000;;		Privatenetmask       string `json:"privatenetmask,omitempty"`
0000000000000000000000000000000000000000;;		Publicip             string `json:"publicip,omitempty"`
0000000000000000000000000000000000000000;;		Publicmacaddress     string `json:"publicmacaddress,omitempty"`
0000000000000000000000000000000000000000;;		Publicnetmask        string `json:"publicnetmask,omitempty"`
0000000000000000000000000000000000000000;;		State                string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Systemvmtype         string `json:"systemvmtype,omitempty"`
0000000000000000000000000000000000000000;;		Templateid           string `json:"templateid,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid               string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename             string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ScaleSystemVmParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ScaleSystemVmParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["details"]; found {
0000000000000000000000000000000000000000;;			i := 0
0000000000000000000000000000000000000000;;			for k, vv := range v.(map[string]string) {
0000000000000000000000000000000000000000;;				u.Set(fmt.Sprintf("details[%d].key", i), k)
0000000000000000000000000000000000000000;;				u.Set(fmt.Sprintf("details[%d].value", i), vv)
0000000000000000000000000000000000000000;;				i++
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["serviceofferingid"]; found {
0000000000000000000000000000000000000000;;			u.Set("serviceofferingid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ScaleSystemVmParams) SetDetails(v map[string]string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["details"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ScaleSystemVmParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ScaleSystemVmParams) SetServiceofferingid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["serviceofferingid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new ScaleSystemVmParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *SystemVMService) NewScaleSystemVmParams(id string, serviceofferingid string) *ScaleSystemVmParams {
0000000000000000000000000000000000000000;;		p := &ScaleSystemVmParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		p.p["serviceofferingid"] = serviceofferingid
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Scale the service offering for a system vm (console proxy or secondary storage). The system vm must be in a "Stopped" state for this command to take effect.
0000000000000000000000000000000000000000;;	func (s *SystemVMService) ScaleSystemVm(p *ScaleSystemVmParams) (*ScaleSystemVmResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("scaleSystemVm", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r ScaleSystemVmResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ScaleSystemVmResponse struct {
0000000000000000000000000000000000000000;;		JobID                string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Activeviewersessions int    `json:"activeviewersessions,omitempty"`
0000000000000000000000000000000000000000;;		Created              string `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Dns1                 string `json:"dns1,omitempty"`
0000000000000000000000000000000000000000;;		Dns2                 string `json:"dns2,omitempty"`
0000000000000000000000000000000000000000;;		Gateway              string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;		Hostid               string `json:"hostid,omitempty"`
0000000000000000000000000000000000000000;;		Hostname             string `json:"hostname,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor           string `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Id                   string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Jobid                string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Jobstatus            int    `json:"jobstatus,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalip          string `json:"linklocalip,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalmacaddress  string `json:"linklocalmacaddress,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalnetmask     string `json:"linklocalnetmask,omitempty"`
0000000000000000000000000000000000000000;;		Name                 string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkdomain        string `json:"networkdomain,omitempty"`
0000000000000000000000000000000000000000;;		Podid                string `json:"podid,omitempty"`
0000000000000000000000000000000000000000;;		Privateip            string `json:"privateip,omitempty"`
0000000000000000000000000000000000000000;;		Privatemacaddress    string `json:"privatemacaddress,omitempty"`
0000000000000000000000000000000000000000;;		Privatenetmask       string `json:"privatenetmask,omitempty"`
0000000000000000000000000000000000000000;;		Publicip             string `json:"publicip,omitempty"`
0000000000000000000000000000000000000000;;		Publicmacaddress     string `json:"publicmacaddress,omitempty"`
0000000000000000000000000000000000000000;;		Publicnetmask        string `json:"publicnetmask,omitempty"`
0000000000000000000000000000000000000000;;		State                string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Systemvmtype         string `json:"systemvmtype,omitempty"`
0000000000000000000000000000000000000000;;		Templateid           string `json:"templateid,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid               string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename             string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
