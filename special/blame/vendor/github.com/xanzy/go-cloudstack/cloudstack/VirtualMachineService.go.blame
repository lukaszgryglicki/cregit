0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Copyright 2016, Sander van Harmelen
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
0000000000000000000000000000000000000000;;	//
0a16da49b5158d8aef850f86fc8936f4afa6c64a;;	
0000000000000000000000000000000000000000;;	package cloudstack
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeployVirtualMachineParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeployVirtualMachineParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["account"]; found {
0000000000000000000000000000000000000000;;			u.Set("account", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["affinitygroupids"]; found {
0000000000000000000000000000000000000000;;			vv := strings.Join(v.([]string), ",")
0000000000000000000000000000000000000000;;			u.Set("affinitygroupids", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["affinitygroupnames"]; found {
0000000000000000000000000000000000000000;;			vv := strings.Join(v.([]string), ",")
0000000000000000000000000000000000000000;;			u.Set("affinitygroupnames", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["customid"]; found {
0000000000000000000000000000000000000000;;			u.Set("customid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["deploymentplanner"]; found {
0000000000000000000000000000000000000000;;			u.Set("deploymentplanner", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["details"]; found {
0000000000000000000000000000000000000000;;			i := 0
0000000000000000000000000000000000000000;;			for k, vv := range v.(map[string]string) {
0000000000000000000000000000000000000000;;				u.Set(fmt.Sprintf("details[%d].key", i), k)
0000000000000000000000000000000000000000;;				u.Set(fmt.Sprintf("details[%d].value", i), vv)
0000000000000000000000000000000000000000;;				i++
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["diskofferingid"]; found {
0000000000000000000000000000000000000000;;			u.Set("diskofferingid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["displayname"]; found {
0000000000000000000000000000000000000000;;			u.Set("displayname", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["displayvm"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("displayvm", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["domainid"]; found {
0000000000000000000000000000000000000000;;			u.Set("domainid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["group"]; found {
0000000000000000000000000000000000000000;;			u.Set("group", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["hostid"]; found {
0000000000000000000000000000000000000000;;			u.Set("hostid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["hypervisor"]; found {
0000000000000000000000000000000000000000;;			u.Set("hypervisor", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["ip6address"]; found {
0000000000000000000000000000000000000000;;			u.Set("ip6address", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["ipaddress"]; found {
0000000000000000000000000000000000000000;;			u.Set("ipaddress", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["iptonetworklist"]; found {
0000000000000000000000000000000000000000;;			i := 0
0000000000000000000000000000000000000000;;			for k, vv := range v.(map[string]string) {
0000000000000000000000000000000000000000;;				u.Set(fmt.Sprintf("iptonetworklist[%d].key", i), k)
0000000000000000000000000000000000000000;;				u.Set(fmt.Sprintf("iptonetworklist[%d].value", i), vv)
0000000000000000000000000000000000000000;;				i++
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["keyboard"]; found {
0000000000000000000000000000000000000000;;			u.Set("keyboard", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["keypair"]; found {
0000000000000000000000000000000000000000;;			u.Set("keypair", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["name"]; found {
0000000000000000000000000000000000000000;;			u.Set("name", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["networkids"]; found {
0000000000000000000000000000000000000000;;			vv := strings.Join(v.([]string), ",")
0000000000000000000000000000000000000000;;			u.Set("networkids", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["projectid"]; found {
0000000000000000000000000000000000000000;;			u.Set("projectid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["rootdisksize"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatInt(v.(int64), 10)
0000000000000000000000000000000000000000;;			u.Set("rootdisksize", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["securitygroupids"]; found {
0000000000000000000000000000000000000000;;			vv := strings.Join(v.([]string), ",")
0000000000000000000000000000000000000000;;			u.Set("securitygroupids", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["securitygroupnames"]; found {
0000000000000000000000000000000000000000;;			vv := strings.Join(v.([]string), ",")
0000000000000000000000000000000000000000;;			u.Set("securitygroupnames", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["serviceofferingid"]; found {
0000000000000000000000000000000000000000;;			u.Set("serviceofferingid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["size"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatInt(v.(int64), 10)
0000000000000000000000000000000000000000;;			u.Set("size", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["startvm"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("startvm", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["templateid"]; found {
0000000000000000000000000000000000000000;;			u.Set("templateid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["userdata"]; found {
0000000000000000000000000000000000000000;;			u.Set("userdata", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["zoneid"]; found {
0000000000000000000000000000000000000000;;			u.Set("zoneid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeployVirtualMachineParams) SetAccount(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["account"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeployVirtualMachineParams) SetAffinitygroupids(v []string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["affinitygroupids"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeployVirtualMachineParams) SetAffinitygroupnames(v []string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["affinitygroupnames"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeployVirtualMachineParams) SetCustomid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["customid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeployVirtualMachineParams) SetDeploymentplanner(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["deploymentplanner"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeployVirtualMachineParams) SetDetails(v map[string]string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["details"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeployVirtualMachineParams) SetDiskofferingid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["diskofferingid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeployVirtualMachineParams) SetDisplayname(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["displayname"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeployVirtualMachineParams) SetDisplayvm(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["displayvm"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeployVirtualMachineParams) SetDomainid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["domainid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeployVirtualMachineParams) SetGroup(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["group"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeployVirtualMachineParams) SetHostid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["hostid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeployVirtualMachineParams) SetHypervisor(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["hypervisor"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeployVirtualMachineParams) SetIp6address(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["ip6address"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeployVirtualMachineParams) SetIpaddress(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["ipaddress"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeployVirtualMachineParams) SetIptonetworklist(v map[string]string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["iptonetworklist"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeployVirtualMachineParams) SetKeyboard(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["keyboard"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeployVirtualMachineParams) SetKeypair(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["keypair"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeployVirtualMachineParams) SetName(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["name"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeployVirtualMachineParams) SetNetworkids(v []string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["networkids"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeployVirtualMachineParams) SetProjectid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["projectid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeployVirtualMachineParams) SetRootdisksize(v int64) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["rootdisksize"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeployVirtualMachineParams) SetSecuritygroupids(v []string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["securitygroupids"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeployVirtualMachineParams) SetSecuritygroupnames(v []string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["securitygroupnames"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeployVirtualMachineParams) SetServiceofferingid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["serviceofferingid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeployVirtualMachineParams) SetSize(v int64) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["size"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeployVirtualMachineParams) SetStartvm(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["startvm"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeployVirtualMachineParams) SetTemplateid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["templateid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeployVirtualMachineParams) SetUserdata(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["userdata"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeployVirtualMachineParams) SetZoneid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["zoneid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new DeployVirtualMachineParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VirtualMachineService) NewDeployVirtualMachineParams(serviceofferingid string, templateid string, zoneid string) *DeployVirtualMachineParams {
0000000000000000000000000000000000000000;;		p := &DeployVirtualMachineParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["serviceofferingid"] = serviceofferingid
0000000000000000000000000000000000000000;;		p.p["templateid"] = templateid
0000000000000000000000000000000000000000;;		p.p["zoneid"] = zoneid
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Creates and automatically starts a virtual machine based on a service offering, disk offering, and template.
0000000000000000000000000000000000000000;;	func (s *VirtualMachineService) DeployVirtualMachine(p *DeployVirtualMachineParams) (*DeployVirtualMachineResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("deployVirtualMachine", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r DeployVirtualMachineResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeployVirtualMachineResponse struct {
0000000000000000000000000000000000000000;;		JobID         string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Account       string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Affinitygroup []struct {
0000000000000000000000000000000000000000;;			Account           string   `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Description       string   `json:"description,omitempty"`
0000000000000000000000000000000000000000;;			Domain            string   `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid          string   `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Id                string   `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Name              string   `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Project           string   `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid         string   `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Type              string   `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			VirtualmachineIds []string `json:"virtualmachineIds,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"affinitygroup,omitempty"`
0000000000000000000000000000000000000000;;		Cpunumber             int               `json:"cpunumber,omitempty"`
0000000000000000000000000000000000000000;;		Cpuspeed              int               `json:"cpuspeed,omitempty"`
0000000000000000000000000000000000000000;;		Cpuused               string            `json:"cpuused,omitempty"`
0000000000000000000000000000000000000000;;		Created               string            `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Details               map[string]string `json:"details,omitempty"`
0000000000000000000000000000000000000000;;		Diskioread            int64             `json:"diskioread,omitempty"`
0000000000000000000000000000000000000000;;		Diskiowrite           int64             `json:"diskiowrite,omitempty"`
0000000000000000000000000000000000000000;;		Diskkbsread           int64             `json:"diskkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Diskkbswrite          int64             `json:"diskkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingid        string            `json:"diskofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingname      string            `json:"diskofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Displayname           string            `json:"displayname,omitempty"`
0000000000000000000000000000000000000000;;		Displayvm             bool              `json:"displayvm,omitempty"`
0000000000000000000000000000000000000000;;		Domain                string            `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid              string            `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Forvirtualnetwork     bool              `json:"forvirtualnetwork,omitempty"`
0000000000000000000000000000000000000000;;		Group                 string            `json:"group,omitempty"`
0000000000000000000000000000000000000000;;		Groupid               string            `json:"groupid,omitempty"`
0000000000000000000000000000000000000000;;		Guestosid             string            `json:"guestosid,omitempty"`
0000000000000000000000000000000000000000;;		Haenable              bool              `json:"haenable,omitempty"`
0000000000000000000000000000000000000000;;		Hostid                string            `json:"hostid,omitempty"`
0000000000000000000000000000000000000000;;		Hostname              string            `json:"hostname,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor            string            `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Id                    string            `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Instancename          string            `json:"instancename,omitempty"`
0000000000000000000000000000000000000000;;		Isdynamicallyscalable bool              `json:"isdynamicallyscalable,omitempty"`
0000000000000000000000000000000000000000;;		Isodisplaytext        string            `json:"isodisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Isoid                 string            `json:"isoid,omitempty"`
0000000000000000000000000000000000000000;;		Isoname               string            `json:"isoname,omitempty"`
0000000000000000000000000000000000000000;;		Keypair               string            `json:"keypair,omitempty"`
0000000000000000000000000000000000000000;;		Memory                int               `json:"memory,omitempty"`
0000000000000000000000000000000000000000;;		Name                  string            `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbsread        int64             `json:"networkkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbswrite       int64             `json:"networkkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Nic                   []struct {
0000000000000000000000000000000000000000;;			Broadcasturi string `json:"broadcasturi,omitempty"`
0000000000000000000000000000000000000000;;			Deviceid     string `json:"deviceid,omitempty"`
0000000000000000000000000000000000000000;;			Gateway      string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;			Id           string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ip6address   string `json:"ip6address,omitempty"`
0000000000000000000000000000000000000000;;			Ip6cidr      string `json:"ip6cidr,omitempty"`
0000000000000000000000000000000000000000;;			Ip6gateway   string `json:"ip6gateway,omitempty"`
0000000000000000000000000000000000000000;;			Ipaddress    string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			Isdefault    bool   `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;			Isolationuri string `json:"isolationuri,omitempty"`
0000000000000000000000000000000000000000;;			Macaddress   string `json:"macaddress,omitempty"`
0000000000000000000000000000000000000000;;			Netmask      string `json:"netmask,omitempty"`
0000000000000000000000000000000000000000;;			Networkid    string `json:"networkid,omitempty"`
0000000000000000000000000000000000000000;;			Networkname  string `json:"networkname,omitempty"`
0000000000000000000000000000000000000000;;			Secondaryip  []struct {
0000000000000000000000000000000000000000;;				Id        string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;				Ipaddress string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"secondaryip,omitempty"`
0000000000000000000000000000000000000000;;			Traffictype      string `json:"traffictype,omitempty"`
0000000000000000000000000000000000000000;;			Type             string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachineid string `json:"virtualmachineid,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"nic,omitempty"`
0000000000000000000000000000000000000000;;		Ostypeid        int64  `json:"ostypeid,omitempty"`
0000000000000000000000000000000000000000;;		Password        string `json:"password,omitempty"`
0000000000000000000000000000000000000000;;		Passwordenabled bool   `json:"passwordenabled,omitempty"`
0000000000000000000000000000000000000000;;		Project         string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid       string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;		Publicip        string `json:"publicip,omitempty"`
0000000000000000000000000000000000000000;;		Publicipid      string `json:"publicipid,omitempty"`
0000000000000000000000000000000000000000;;		Rootdeviceid    int64  `json:"rootdeviceid,omitempty"`
0000000000000000000000000000000000000000;;		Rootdevicetype  string `json:"rootdevicetype,omitempty"`
0000000000000000000000000000000000000000;;		Securitygroup   []struct {
0000000000000000000000000000000000000000;;			Account     string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Description string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;			Domain      string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid    string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Egressrule  []struct {
0000000000000000000000000000000000000000;;				Account           string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Cidr              string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;				Endport           int    `json:"endport,omitempty"`
0000000000000000000000000000000000000000;;				Icmpcode          int    `json:"icmpcode,omitempty"`
0000000000000000000000000000000000000000;;				Icmptype          int    `json:"icmptype,omitempty"`
0000000000000000000000000000000000000000;;				Protocol          string `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;				Ruleid            string `json:"ruleid,omitempty"`
0000000000000000000000000000000000000000;;				Securitygroupname string `json:"securitygroupname,omitempty"`
0000000000000000000000000000000000000000;;				Startport         int    `json:"startport,omitempty"`
0000000000000000000000000000000000000000;;				Tags              []struct {
0000000000000000000000000000000000000000;;					Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;					Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;					Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;					Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;					Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;					Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;					Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;					Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;					Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;					Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"egressrule,omitempty"`
0000000000000000000000000000000000000000;;			Id          string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ingressrule []struct {
0000000000000000000000000000000000000000;;				Account           string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Cidr              string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;				Endport           int    `json:"endport,omitempty"`
0000000000000000000000000000000000000000;;				Icmpcode          int    `json:"icmpcode,omitempty"`
0000000000000000000000000000000000000000;;				Icmptype          int    `json:"icmptype,omitempty"`
0000000000000000000000000000000000000000;;				Protocol          string `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;				Ruleid            string `json:"ruleid,omitempty"`
0000000000000000000000000000000000000000;;				Securitygroupname string `json:"securitygroupname,omitempty"`
0000000000000000000000000000000000000000;;				Startport         int    `json:"startport,omitempty"`
0000000000000000000000000000000000000000;;				Tags              []struct {
0000000000000000000000000000000000000000;;					Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;					Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;					Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;					Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;					Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;					Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;					Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;					Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;					Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;					Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"ingressrule,omitempty"`
0000000000000000000000000000000000000000;;			Name      string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Project   string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Tags      []struct {
0000000000000000000000000000000000000000;;				Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;				Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;				Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;				Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;				Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;				Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;				Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;				Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;				Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachinecount int      `json:"virtualmachinecount,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachineids   []string `json:"virtualmachineids,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"securitygroup,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingid   string `json:"serviceofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingname string `json:"serviceofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Servicestate        string `json:"servicestate,omitempty"`
0000000000000000000000000000000000000000;;		State               string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Tags                []struct {
0000000000000000000000000000000000000000;;			Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;			Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;			Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;			Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;			Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Templatedisplaytext string `json:"templatedisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Templateid          string `json:"templateid,omitempty"`
0000000000000000000000000000000000000000;;		Templatename        string `json:"templatename,omitempty"`
0000000000000000000000000000000000000000;;		Userid              string `json:"userid,omitempty"`
0000000000000000000000000000000000000000;;		Username            string `json:"username,omitempty"`
0000000000000000000000000000000000000000;;		Vgpu                string `json:"vgpu,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid              string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename            string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DestroyVirtualMachineParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DestroyVirtualMachineParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["expunge"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("expunge", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DestroyVirtualMachineParams) SetExpunge(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["expunge"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DestroyVirtualMachineParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new DestroyVirtualMachineParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VirtualMachineService) NewDestroyVirtualMachineParams(id string) *DestroyVirtualMachineParams {
0000000000000000000000000000000000000000;;		p := &DestroyVirtualMachineParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Destroys a virtual machine.
0000000000000000000000000000000000000000;;	func (s *VirtualMachineService) DestroyVirtualMachine(p *DestroyVirtualMachineParams) (*DestroyVirtualMachineResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("destroyVirtualMachine", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r DestroyVirtualMachineResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DestroyVirtualMachineResponse struct {
0000000000000000000000000000000000000000;;		JobID         string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Account       string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Affinitygroup []struct {
0000000000000000000000000000000000000000;;			Account           string   `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Description       string   `json:"description,omitempty"`
0000000000000000000000000000000000000000;;			Domain            string   `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid          string   `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Id                string   `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Name              string   `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Project           string   `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid         string   `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Type              string   `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			VirtualmachineIds []string `json:"virtualmachineIds,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"affinitygroup,omitempty"`
0000000000000000000000000000000000000000;;		Cpunumber             int               `json:"cpunumber,omitempty"`
0000000000000000000000000000000000000000;;		Cpuspeed              int               `json:"cpuspeed,omitempty"`
0000000000000000000000000000000000000000;;		Cpuused               string            `json:"cpuused,omitempty"`
0000000000000000000000000000000000000000;;		Created               string            `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Details               map[string]string `json:"details,omitempty"`
0000000000000000000000000000000000000000;;		Diskioread            int64             `json:"diskioread,omitempty"`
0000000000000000000000000000000000000000;;		Diskiowrite           int64             `json:"diskiowrite,omitempty"`
0000000000000000000000000000000000000000;;		Diskkbsread           int64             `json:"diskkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Diskkbswrite          int64             `json:"diskkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingid        string            `json:"diskofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingname      string            `json:"diskofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Displayname           string            `json:"displayname,omitempty"`
0000000000000000000000000000000000000000;;		Displayvm             bool              `json:"displayvm,omitempty"`
0000000000000000000000000000000000000000;;		Domain                string            `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid              string            `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Forvirtualnetwork     bool              `json:"forvirtualnetwork,omitempty"`
0000000000000000000000000000000000000000;;		Group                 string            `json:"group,omitempty"`
0000000000000000000000000000000000000000;;		Groupid               string            `json:"groupid,omitempty"`
0000000000000000000000000000000000000000;;		Guestosid             string            `json:"guestosid,omitempty"`
0000000000000000000000000000000000000000;;		Haenable              bool              `json:"haenable,omitempty"`
0000000000000000000000000000000000000000;;		Hostid                string            `json:"hostid,omitempty"`
0000000000000000000000000000000000000000;;		Hostname              string            `json:"hostname,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor            string            `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Id                    string            `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Instancename          string            `json:"instancename,omitempty"`
0000000000000000000000000000000000000000;;		Isdynamicallyscalable bool              `json:"isdynamicallyscalable,omitempty"`
0000000000000000000000000000000000000000;;		Isodisplaytext        string            `json:"isodisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Isoid                 string            `json:"isoid,omitempty"`
0000000000000000000000000000000000000000;;		Isoname               string            `json:"isoname,omitempty"`
0000000000000000000000000000000000000000;;		Keypair               string            `json:"keypair,omitempty"`
0000000000000000000000000000000000000000;;		Memory                int               `json:"memory,omitempty"`
0000000000000000000000000000000000000000;;		Name                  string            `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbsread        int64             `json:"networkkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbswrite       int64             `json:"networkkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Nic                   []struct {
0000000000000000000000000000000000000000;;			Broadcasturi string `json:"broadcasturi,omitempty"`
0000000000000000000000000000000000000000;;			Deviceid     string `json:"deviceid,omitempty"`
0000000000000000000000000000000000000000;;			Gateway      string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;			Id           string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ip6address   string `json:"ip6address,omitempty"`
0000000000000000000000000000000000000000;;			Ip6cidr      string `json:"ip6cidr,omitempty"`
0000000000000000000000000000000000000000;;			Ip6gateway   string `json:"ip6gateway,omitempty"`
0000000000000000000000000000000000000000;;			Ipaddress    string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			Isdefault    bool   `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;			Isolationuri string `json:"isolationuri,omitempty"`
0000000000000000000000000000000000000000;;			Macaddress   string `json:"macaddress,omitempty"`
0000000000000000000000000000000000000000;;			Netmask      string `json:"netmask,omitempty"`
0000000000000000000000000000000000000000;;			Networkid    string `json:"networkid,omitempty"`
0000000000000000000000000000000000000000;;			Networkname  string `json:"networkname,omitempty"`
0000000000000000000000000000000000000000;;			Secondaryip  []struct {
0000000000000000000000000000000000000000;;				Id        string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;				Ipaddress string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"secondaryip,omitempty"`
0000000000000000000000000000000000000000;;			Traffictype      string `json:"traffictype,omitempty"`
0000000000000000000000000000000000000000;;			Type             string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachineid string `json:"virtualmachineid,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"nic,omitempty"`
0000000000000000000000000000000000000000;;		Ostypeid        int64  `json:"ostypeid,omitempty"`
0000000000000000000000000000000000000000;;		Password        string `json:"password,omitempty"`
0000000000000000000000000000000000000000;;		Passwordenabled bool   `json:"passwordenabled,omitempty"`
0000000000000000000000000000000000000000;;		Project         string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid       string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;		Publicip        string `json:"publicip,omitempty"`
0000000000000000000000000000000000000000;;		Publicipid      string `json:"publicipid,omitempty"`
0000000000000000000000000000000000000000;;		Rootdeviceid    int64  `json:"rootdeviceid,omitempty"`
0000000000000000000000000000000000000000;;		Rootdevicetype  string `json:"rootdevicetype,omitempty"`
0000000000000000000000000000000000000000;;		Securitygroup   []struct {
0000000000000000000000000000000000000000;;			Account     string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Description string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;			Domain      string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid    string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Egressrule  []struct {
0000000000000000000000000000000000000000;;				Account           string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Cidr              string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;				Endport           int    `json:"endport,omitempty"`
0000000000000000000000000000000000000000;;				Icmpcode          int    `json:"icmpcode,omitempty"`
0000000000000000000000000000000000000000;;				Icmptype          int    `json:"icmptype,omitempty"`
0000000000000000000000000000000000000000;;				Protocol          string `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;				Ruleid            string `json:"ruleid,omitempty"`
0000000000000000000000000000000000000000;;				Securitygroupname string `json:"securitygroupname,omitempty"`
0000000000000000000000000000000000000000;;				Startport         int    `json:"startport,omitempty"`
0000000000000000000000000000000000000000;;				Tags              []struct {
0000000000000000000000000000000000000000;;					Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;					Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;					Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;					Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;					Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;					Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;					Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;					Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;					Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;					Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"egressrule,omitempty"`
0000000000000000000000000000000000000000;;			Id          string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ingressrule []struct {
0000000000000000000000000000000000000000;;				Account           string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Cidr              string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;				Endport           int    `json:"endport,omitempty"`
0000000000000000000000000000000000000000;;				Icmpcode          int    `json:"icmpcode,omitempty"`
0000000000000000000000000000000000000000;;				Icmptype          int    `json:"icmptype,omitempty"`
0000000000000000000000000000000000000000;;				Protocol          string `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;				Ruleid            string `json:"ruleid,omitempty"`
0000000000000000000000000000000000000000;;				Securitygroupname string `json:"securitygroupname,omitempty"`
0000000000000000000000000000000000000000;;				Startport         int    `json:"startport,omitempty"`
0000000000000000000000000000000000000000;;				Tags              []struct {
0000000000000000000000000000000000000000;;					Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;					Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;					Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;					Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;					Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;					Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;					Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;					Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;					Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;					Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"ingressrule,omitempty"`
0000000000000000000000000000000000000000;;			Name      string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Project   string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Tags      []struct {
0000000000000000000000000000000000000000;;				Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;				Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;				Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;				Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;				Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;				Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;				Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;				Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;				Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachinecount int      `json:"virtualmachinecount,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachineids   []string `json:"virtualmachineids,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"securitygroup,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingid   string `json:"serviceofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingname string `json:"serviceofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Servicestate        string `json:"servicestate,omitempty"`
0000000000000000000000000000000000000000;;		State               string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Tags                []struct {
0000000000000000000000000000000000000000;;			Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;			Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;			Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;			Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;			Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Templatedisplaytext string `json:"templatedisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Templateid          string `json:"templateid,omitempty"`
0000000000000000000000000000000000000000;;		Templatename        string `json:"templatename,omitempty"`
0000000000000000000000000000000000000000;;		Userid              string `json:"userid,omitempty"`
0000000000000000000000000000000000000000;;		Username            string `json:"username,omitempty"`
0000000000000000000000000000000000000000;;		Vgpu                string `json:"vgpu,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid              string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename            string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RebootVirtualMachineParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *RebootVirtualMachineParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *RebootVirtualMachineParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new RebootVirtualMachineParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VirtualMachineService) NewRebootVirtualMachineParams(id string) *RebootVirtualMachineParams {
0000000000000000000000000000000000000000;;		p := &RebootVirtualMachineParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Reboots a virtual machine.
0000000000000000000000000000000000000000;;	func (s *VirtualMachineService) RebootVirtualMachine(p *RebootVirtualMachineParams) (*RebootVirtualMachineResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("rebootVirtualMachine", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r RebootVirtualMachineResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RebootVirtualMachineResponse struct {
0000000000000000000000000000000000000000;;		JobID         string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Account       string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Affinitygroup []struct {
0000000000000000000000000000000000000000;;			Account           string   `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Description       string   `json:"description,omitempty"`
0000000000000000000000000000000000000000;;			Domain            string   `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid          string   `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Id                string   `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Name              string   `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Project           string   `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid         string   `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Type              string   `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			VirtualmachineIds []string `json:"virtualmachineIds,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"affinitygroup,omitempty"`
0000000000000000000000000000000000000000;;		Cpunumber             int               `json:"cpunumber,omitempty"`
0000000000000000000000000000000000000000;;		Cpuspeed              int               `json:"cpuspeed,omitempty"`
0000000000000000000000000000000000000000;;		Cpuused               string            `json:"cpuused,omitempty"`
0000000000000000000000000000000000000000;;		Created               string            `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Details               map[string]string `json:"details,omitempty"`
0000000000000000000000000000000000000000;;		Diskioread            int64             `json:"diskioread,omitempty"`
0000000000000000000000000000000000000000;;		Diskiowrite           int64             `json:"diskiowrite,omitempty"`
0000000000000000000000000000000000000000;;		Diskkbsread           int64             `json:"diskkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Diskkbswrite          int64             `json:"diskkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingid        string            `json:"diskofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingname      string            `json:"diskofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Displayname           string            `json:"displayname,omitempty"`
0000000000000000000000000000000000000000;;		Displayvm             bool              `json:"displayvm,omitempty"`
0000000000000000000000000000000000000000;;		Domain                string            `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid              string            `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Forvirtualnetwork     bool              `json:"forvirtualnetwork,omitempty"`
0000000000000000000000000000000000000000;;		Group                 string            `json:"group,omitempty"`
0000000000000000000000000000000000000000;;		Groupid               string            `json:"groupid,omitempty"`
0000000000000000000000000000000000000000;;		Guestosid             string            `json:"guestosid,omitempty"`
0000000000000000000000000000000000000000;;		Haenable              bool              `json:"haenable,omitempty"`
0000000000000000000000000000000000000000;;		Hostid                string            `json:"hostid,omitempty"`
0000000000000000000000000000000000000000;;		Hostname              string            `json:"hostname,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor            string            `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Id                    string            `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Instancename          string            `json:"instancename,omitempty"`
0000000000000000000000000000000000000000;;		Isdynamicallyscalable bool              `json:"isdynamicallyscalable,omitempty"`
0000000000000000000000000000000000000000;;		Isodisplaytext        string            `json:"isodisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Isoid                 string            `json:"isoid,omitempty"`
0000000000000000000000000000000000000000;;		Isoname               string            `json:"isoname,omitempty"`
0000000000000000000000000000000000000000;;		Keypair               string            `json:"keypair,omitempty"`
0000000000000000000000000000000000000000;;		Memory                int               `json:"memory,omitempty"`
0000000000000000000000000000000000000000;;		Name                  string            `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbsread        int64             `json:"networkkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbswrite       int64             `json:"networkkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Nic                   []struct {
0000000000000000000000000000000000000000;;			Broadcasturi string `json:"broadcasturi,omitempty"`
0000000000000000000000000000000000000000;;			Deviceid     string `json:"deviceid,omitempty"`
0000000000000000000000000000000000000000;;			Gateway      string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;			Id           string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ip6address   string `json:"ip6address,omitempty"`
0000000000000000000000000000000000000000;;			Ip6cidr      string `json:"ip6cidr,omitempty"`
0000000000000000000000000000000000000000;;			Ip6gateway   string `json:"ip6gateway,omitempty"`
0000000000000000000000000000000000000000;;			Ipaddress    string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			Isdefault    bool   `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;			Isolationuri string `json:"isolationuri,omitempty"`
0000000000000000000000000000000000000000;;			Macaddress   string `json:"macaddress,omitempty"`
0000000000000000000000000000000000000000;;			Netmask      string `json:"netmask,omitempty"`
0000000000000000000000000000000000000000;;			Networkid    string `json:"networkid,omitempty"`
0000000000000000000000000000000000000000;;			Networkname  string `json:"networkname,omitempty"`
0000000000000000000000000000000000000000;;			Secondaryip  []struct {
0000000000000000000000000000000000000000;;				Id        string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;				Ipaddress string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"secondaryip,omitempty"`
0000000000000000000000000000000000000000;;			Traffictype      string `json:"traffictype,omitempty"`
0000000000000000000000000000000000000000;;			Type             string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachineid string `json:"virtualmachineid,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"nic,omitempty"`
0000000000000000000000000000000000000000;;		Ostypeid        int64  `json:"ostypeid,omitempty"`
0000000000000000000000000000000000000000;;		Password        string `json:"password,omitempty"`
0000000000000000000000000000000000000000;;		Passwordenabled bool   `json:"passwordenabled,omitempty"`
0000000000000000000000000000000000000000;;		Project         string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid       string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;		Publicip        string `json:"publicip,omitempty"`
0000000000000000000000000000000000000000;;		Publicipid      string `json:"publicipid,omitempty"`
0000000000000000000000000000000000000000;;		Rootdeviceid    int64  `json:"rootdeviceid,omitempty"`
0000000000000000000000000000000000000000;;		Rootdevicetype  string `json:"rootdevicetype,omitempty"`
0000000000000000000000000000000000000000;;		Securitygroup   []struct {
0000000000000000000000000000000000000000;;			Account     string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Description string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;			Domain      string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid    string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Egressrule  []struct {
0000000000000000000000000000000000000000;;				Account           string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Cidr              string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;				Endport           int    `json:"endport,omitempty"`
0000000000000000000000000000000000000000;;				Icmpcode          int    `json:"icmpcode,omitempty"`
0000000000000000000000000000000000000000;;				Icmptype          int    `json:"icmptype,omitempty"`
0000000000000000000000000000000000000000;;				Protocol          string `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;				Ruleid            string `json:"ruleid,omitempty"`
0000000000000000000000000000000000000000;;				Securitygroupname string `json:"securitygroupname,omitempty"`
0000000000000000000000000000000000000000;;				Startport         int    `json:"startport,omitempty"`
0000000000000000000000000000000000000000;;				Tags              []struct {
0000000000000000000000000000000000000000;;					Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;					Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;					Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;					Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;					Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;					Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;					Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;					Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;					Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;					Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"egressrule,omitempty"`
0000000000000000000000000000000000000000;;			Id          string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ingressrule []struct {
0000000000000000000000000000000000000000;;				Account           string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Cidr              string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;				Endport           int    `json:"endport,omitempty"`
0000000000000000000000000000000000000000;;				Icmpcode          int    `json:"icmpcode,omitempty"`
0000000000000000000000000000000000000000;;				Icmptype          int    `json:"icmptype,omitempty"`
0000000000000000000000000000000000000000;;				Protocol          string `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;				Ruleid            string `json:"ruleid,omitempty"`
0000000000000000000000000000000000000000;;				Securitygroupname string `json:"securitygroupname,omitempty"`
0000000000000000000000000000000000000000;;				Startport         int    `json:"startport,omitempty"`
0000000000000000000000000000000000000000;;				Tags              []struct {
0000000000000000000000000000000000000000;;					Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;					Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;					Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;					Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;					Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;					Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;					Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;					Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;					Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;					Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"ingressrule,omitempty"`
0000000000000000000000000000000000000000;;			Name      string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Project   string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Tags      []struct {
0000000000000000000000000000000000000000;;				Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;				Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;				Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;				Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;				Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;				Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;				Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;				Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;				Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachinecount int      `json:"virtualmachinecount,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachineids   []string `json:"virtualmachineids,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"securitygroup,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingid   string `json:"serviceofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingname string `json:"serviceofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Servicestate        string `json:"servicestate,omitempty"`
0000000000000000000000000000000000000000;;		State               string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Tags                []struct {
0000000000000000000000000000000000000000;;			Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;			Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;			Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;			Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;			Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Templatedisplaytext string `json:"templatedisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Templateid          string `json:"templateid,omitempty"`
0000000000000000000000000000000000000000;;		Templatename        string `json:"templatename,omitempty"`
0000000000000000000000000000000000000000;;		Userid              string `json:"userid,omitempty"`
0000000000000000000000000000000000000000;;		Username            string `json:"username,omitempty"`
0000000000000000000000000000000000000000;;		Vgpu                string `json:"vgpu,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid              string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename            string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StartVirtualMachineParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *StartVirtualMachineParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["deploymentplanner"]; found {
0000000000000000000000000000000000000000;;			u.Set("deploymentplanner", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["hostid"]; found {
0000000000000000000000000000000000000000;;			u.Set("hostid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *StartVirtualMachineParams) SetDeploymentplanner(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["deploymentplanner"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *StartVirtualMachineParams) SetHostid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["hostid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *StartVirtualMachineParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new StartVirtualMachineParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VirtualMachineService) NewStartVirtualMachineParams(id string) *StartVirtualMachineParams {
0000000000000000000000000000000000000000;;		p := &StartVirtualMachineParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Starts a virtual machine.
0000000000000000000000000000000000000000;;	func (s *VirtualMachineService) StartVirtualMachine(p *StartVirtualMachineParams) (*StartVirtualMachineResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("startVirtualMachine", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r StartVirtualMachineResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StartVirtualMachineResponse struct {
0000000000000000000000000000000000000000;;		JobID         string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Account       string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Affinitygroup []struct {
0000000000000000000000000000000000000000;;			Account           string   `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Description       string   `json:"description,omitempty"`
0000000000000000000000000000000000000000;;			Domain            string   `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid          string   `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Id                string   `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Name              string   `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Project           string   `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid         string   `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Type              string   `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			VirtualmachineIds []string `json:"virtualmachineIds,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"affinitygroup,omitempty"`
0000000000000000000000000000000000000000;;		Cpunumber             int               `json:"cpunumber,omitempty"`
0000000000000000000000000000000000000000;;		Cpuspeed              int               `json:"cpuspeed,omitempty"`
0000000000000000000000000000000000000000;;		Cpuused               string            `json:"cpuused,omitempty"`
0000000000000000000000000000000000000000;;		Created               string            `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Details               map[string]string `json:"details,omitempty"`
0000000000000000000000000000000000000000;;		Diskioread            int64             `json:"diskioread,omitempty"`
0000000000000000000000000000000000000000;;		Diskiowrite           int64             `json:"diskiowrite,omitempty"`
0000000000000000000000000000000000000000;;		Diskkbsread           int64             `json:"diskkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Diskkbswrite          int64             `json:"diskkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingid        string            `json:"diskofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingname      string            `json:"diskofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Displayname           string            `json:"displayname,omitempty"`
0000000000000000000000000000000000000000;;		Displayvm             bool              `json:"displayvm,omitempty"`
0000000000000000000000000000000000000000;;		Domain                string            `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid              string            `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Forvirtualnetwork     bool              `json:"forvirtualnetwork,omitempty"`
0000000000000000000000000000000000000000;;		Group                 string            `json:"group,omitempty"`
0000000000000000000000000000000000000000;;		Groupid               string            `json:"groupid,omitempty"`
0000000000000000000000000000000000000000;;		Guestosid             string            `json:"guestosid,omitempty"`
0000000000000000000000000000000000000000;;		Haenable              bool              `json:"haenable,omitempty"`
0000000000000000000000000000000000000000;;		Hostid                string            `json:"hostid,omitempty"`
0000000000000000000000000000000000000000;;		Hostname              string            `json:"hostname,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor            string            `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Id                    string            `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Instancename          string            `json:"instancename,omitempty"`
0000000000000000000000000000000000000000;;		Isdynamicallyscalable bool              `json:"isdynamicallyscalable,omitempty"`
0000000000000000000000000000000000000000;;		Isodisplaytext        string            `json:"isodisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Isoid                 string            `json:"isoid,omitempty"`
0000000000000000000000000000000000000000;;		Isoname               string            `json:"isoname,omitempty"`
0000000000000000000000000000000000000000;;		Keypair               string            `json:"keypair,omitempty"`
0000000000000000000000000000000000000000;;		Memory                int               `json:"memory,omitempty"`
0000000000000000000000000000000000000000;;		Name                  string            `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbsread        int64             `json:"networkkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbswrite       int64             `json:"networkkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Nic                   []struct {
0000000000000000000000000000000000000000;;			Broadcasturi string `json:"broadcasturi,omitempty"`
0000000000000000000000000000000000000000;;			Deviceid     string `json:"deviceid,omitempty"`
0000000000000000000000000000000000000000;;			Gateway      string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;			Id           string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ip6address   string `json:"ip6address,omitempty"`
0000000000000000000000000000000000000000;;			Ip6cidr      string `json:"ip6cidr,omitempty"`
0000000000000000000000000000000000000000;;			Ip6gateway   string `json:"ip6gateway,omitempty"`
0000000000000000000000000000000000000000;;			Ipaddress    string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			Isdefault    bool   `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;			Isolationuri string `json:"isolationuri,omitempty"`
0000000000000000000000000000000000000000;;			Macaddress   string `json:"macaddress,omitempty"`
0000000000000000000000000000000000000000;;			Netmask      string `json:"netmask,omitempty"`
0000000000000000000000000000000000000000;;			Networkid    string `json:"networkid,omitempty"`
0000000000000000000000000000000000000000;;			Networkname  string `json:"networkname,omitempty"`
0000000000000000000000000000000000000000;;			Secondaryip  []struct {
0000000000000000000000000000000000000000;;				Id        string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;				Ipaddress string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"secondaryip,omitempty"`
0000000000000000000000000000000000000000;;			Traffictype      string `json:"traffictype,omitempty"`
0000000000000000000000000000000000000000;;			Type             string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachineid string `json:"virtualmachineid,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"nic,omitempty"`
0000000000000000000000000000000000000000;;		Ostypeid        int64  `json:"ostypeid,omitempty"`
0000000000000000000000000000000000000000;;		Password        string `json:"password,omitempty"`
0000000000000000000000000000000000000000;;		Passwordenabled bool   `json:"passwordenabled,omitempty"`
0000000000000000000000000000000000000000;;		Project         string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid       string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;		Publicip        string `json:"publicip,omitempty"`
0000000000000000000000000000000000000000;;		Publicipid      string `json:"publicipid,omitempty"`
0000000000000000000000000000000000000000;;		Rootdeviceid    int64  `json:"rootdeviceid,omitempty"`
0000000000000000000000000000000000000000;;		Rootdevicetype  string `json:"rootdevicetype,omitempty"`
0000000000000000000000000000000000000000;;		Securitygroup   []struct {
0000000000000000000000000000000000000000;;			Account     string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Description string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;			Domain      string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid    string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Egressrule  []struct {
0000000000000000000000000000000000000000;;				Account           string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Cidr              string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;				Endport           int    `json:"endport,omitempty"`
0000000000000000000000000000000000000000;;				Icmpcode          int    `json:"icmpcode,omitempty"`
0000000000000000000000000000000000000000;;				Icmptype          int    `json:"icmptype,omitempty"`
0000000000000000000000000000000000000000;;				Protocol          string `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;				Ruleid            string `json:"ruleid,omitempty"`
0000000000000000000000000000000000000000;;				Securitygroupname string `json:"securitygroupname,omitempty"`
0000000000000000000000000000000000000000;;				Startport         int    `json:"startport,omitempty"`
0000000000000000000000000000000000000000;;				Tags              []struct {
0000000000000000000000000000000000000000;;					Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;					Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;					Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;					Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;					Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;					Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;					Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;					Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;					Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;					Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"egressrule,omitempty"`
0000000000000000000000000000000000000000;;			Id          string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ingressrule []struct {
0000000000000000000000000000000000000000;;				Account           string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Cidr              string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;				Endport           int    `json:"endport,omitempty"`
0000000000000000000000000000000000000000;;				Icmpcode          int    `json:"icmpcode,omitempty"`
0000000000000000000000000000000000000000;;				Icmptype          int    `json:"icmptype,omitempty"`
0000000000000000000000000000000000000000;;				Protocol          string `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;				Ruleid            string `json:"ruleid,omitempty"`
0000000000000000000000000000000000000000;;				Securitygroupname string `json:"securitygroupname,omitempty"`
0000000000000000000000000000000000000000;;				Startport         int    `json:"startport,omitempty"`
0000000000000000000000000000000000000000;;				Tags              []struct {
0000000000000000000000000000000000000000;;					Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;					Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;					Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;					Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;					Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;					Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;					Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;					Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;					Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;					Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"ingressrule,omitempty"`
0000000000000000000000000000000000000000;;			Name      string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Project   string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Tags      []struct {
0000000000000000000000000000000000000000;;				Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;				Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;				Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;				Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;				Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;				Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;				Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;				Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;				Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachinecount int      `json:"virtualmachinecount,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachineids   []string `json:"virtualmachineids,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"securitygroup,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingid   string `json:"serviceofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingname string `json:"serviceofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Servicestate        string `json:"servicestate,omitempty"`
0000000000000000000000000000000000000000;;		State               string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Tags                []struct {
0000000000000000000000000000000000000000;;			Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;			Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;			Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;			Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;			Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Templatedisplaytext string `json:"templatedisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Templateid          string `json:"templateid,omitempty"`
0000000000000000000000000000000000000000;;		Templatename        string `json:"templatename,omitempty"`
0000000000000000000000000000000000000000;;		Userid              string `json:"userid,omitempty"`
0000000000000000000000000000000000000000;;		Username            string `json:"username,omitempty"`
0000000000000000000000000000000000000000;;		Vgpu                string `json:"vgpu,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid              string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename            string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StopVirtualMachineParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *StopVirtualMachineParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["forced"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("forced", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *StopVirtualMachineParams) SetForced(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["forced"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *StopVirtualMachineParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new StopVirtualMachineParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VirtualMachineService) NewStopVirtualMachineParams(id string) *StopVirtualMachineParams {
0000000000000000000000000000000000000000;;		p := &StopVirtualMachineParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Stops a virtual machine.
0000000000000000000000000000000000000000;;	func (s *VirtualMachineService) StopVirtualMachine(p *StopVirtualMachineParams) (*StopVirtualMachineResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("stopVirtualMachine", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r StopVirtualMachineResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StopVirtualMachineResponse struct {
0000000000000000000000000000000000000000;;		JobID         string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Account       string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Affinitygroup []struct {
0000000000000000000000000000000000000000;;			Account           string   `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Description       string   `json:"description,omitempty"`
0000000000000000000000000000000000000000;;			Domain            string   `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid          string   `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Id                string   `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Name              string   `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Project           string   `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid         string   `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Type              string   `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			VirtualmachineIds []string `json:"virtualmachineIds,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"affinitygroup,omitempty"`
0000000000000000000000000000000000000000;;		Cpunumber             int               `json:"cpunumber,omitempty"`
0000000000000000000000000000000000000000;;		Cpuspeed              int               `json:"cpuspeed,omitempty"`
0000000000000000000000000000000000000000;;		Cpuused               string            `json:"cpuused,omitempty"`
0000000000000000000000000000000000000000;;		Created               string            `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Details               map[string]string `json:"details,omitempty"`
0000000000000000000000000000000000000000;;		Diskioread            int64             `json:"diskioread,omitempty"`
0000000000000000000000000000000000000000;;		Diskiowrite           int64             `json:"diskiowrite,omitempty"`
0000000000000000000000000000000000000000;;		Diskkbsread           int64             `json:"diskkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Diskkbswrite          int64             `json:"diskkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingid        string            `json:"diskofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingname      string            `json:"diskofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Displayname           string            `json:"displayname,omitempty"`
0000000000000000000000000000000000000000;;		Displayvm             bool              `json:"displayvm,omitempty"`
0000000000000000000000000000000000000000;;		Domain                string            `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid              string            `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Forvirtualnetwork     bool              `json:"forvirtualnetwork,omitempty"`
0000000000000000000000000000000000000000;;		Group                 string            `json:"group,omitempty"`
0000000000000000000000000000000000000000;;		Groupid               string            `json:"groupid,omitempty"`
0000000000000000000000000000000000000000;;		Guestosid             string            `json:"guestosid,omitempty"`
0000000000000000000000000000000000000000;;		Haenable              bool              `json:"haenable,omitempty"`
0000000000000000000000000000000000000000;;		Hostid                string            `json:"hostid,omitempty"`
0000000000000000000000000000000000000000;;		Hostname              string            `json:"hostname,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor            string            `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Id                    string            `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Instancename          string            `json:"instancename,omitempty"`
0000000000000000000000000000000000000000;;		Isdynamicallyscalable bool              `json:"isdynamicallyscalable,omitempty"`
0000000000000000000000000000000000000000;;		Isodisplaytext        string            `json:"isodisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Isoid                 string            `json:"isoid,omitempty"`
0000000000000000000000000000000000000000;;		Isoname               string            `json:"isoname,omitempty"`
0000000000000000000000000000000000000000;;		Keypair               string            `json:"keypair,omitempty"`
0000000000000000000000000000000000000000;;		Memory                int               `json:"memory,omitempty"`
0000000000000000000000000000000000000000;;		Name                  string            `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbsread        int64             `json:"networkkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbswrite       int64             `json:"networkkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Nic                   []struct {
0000000000000000000000000000000000000000;;			Broadcasturi string `json:"broadcasturi,omitempty"`
0000000000000000000000000000000000000000;;			Deviceid     string `json:"deviceid,omitempty"`
0000000000000000000000000000000000000000;;			Gateway      string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;			Id           string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ip6address   string `json:"ip6address,omitempty"`
0000000000000000000000000000000000000000;;			Ip6cidr      string `json:"ip6cidr,omitempty"`
0000000000000000000000000000000000000000;;			Ip6gateway   string `json:"ip6gateway,omitempty"`
0000000000000000000000000000000000000000;;			Ipaddress    string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			Isdefault    bool   `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;			Isolationuri string `json:"isolationuri,omitempty"`
0000000000000000000000000000000000000000;;			Macaddress   string `json:"macaddress,omitempty"`
0000000000000000000000000000000000000000;;			Netmask      string `json:"netmask,omitempty"`
0000000000000000000000000000000000000000;;			Networkid    string `json:"networkid,omitempty"`
0000000000000000000000000000000000000000;;			Networkname  string `json:"networkname,omitempty"`
0000000000000000000000000000000000000000;;			Secondaryip  []struct {
0000000000000000000000000000000000000000;;				Id        string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;				Ipaddress string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"secondaryip,omitempty"`
0000000000000000000000000000000000000000;;			Traffictype      string `json:"traffictype,omitempty"`
0000000000000000000000000000000000000000;;			Type             string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachineid string `json:"virtualmachineid,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"nic,omitempty"`
0000000000000000000000000000000000000000;;		Ostypeid        int64  `json:"ostypeid,omitempty"`
0000000000000000000000000000000000000000;;		Password        string `json:"password,omitempty"`
0000000000000000000000000000000000000000;;		Passwordenabled bool   `json:"passwordenabled,omitempty"`
0000000000000000000000000000000000000000;;		Project         string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid       string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;		Publicip        string `json:"publicip,omitempty"`
0000000000000000000000000000000000000000;;		Publicipid      string `json:"publicipid,omitempty"`
0000000000000000000000000000000000000000;;		Rootdeviceid    int64  `json:"rootdeviceid,omitempty"`
0000000000000000000000000000000000000000;;		Rootdevicetype  string `json:"rootdevicetype,omitempty"`
0000000000000000000000000000000000000000;;		Securitygroup   []struct {
0000000000000000000000000000000000000000;;			Account     string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Description string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;			Domain      string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid    string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Egressrule  []struct {
0000000000000000000000000000000000000000;;				Account           string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Cidr              string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;				Endport           int    `json:"endport,omitempty"`
0000000000000000000000000000000000000000;;				Icmpcode          int    `json:"icmpcode,omitempty"`
0000000000000000000000000000000000000000;;				Icmptype          int    `json:"icmptype,omitempty"`
0000000000000000000000000000000000000000;;				Protocol          string `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;				Ruleid            string `json:"ruleid,omitempty"`
0000000000000000000000000000000000000000;;				Securitygroupname string `json:"securitygroupname,omitempty"`
0000000000000000000000000000000000000000;;				Startport         int    `json:"startport,omitempty"`
0000000000000000000000000000000000000000;;				Tags              []struct {
0000000000000000000000000000000000000000;;					Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;					Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;					Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;					Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;					Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;					Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;					Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;					Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;					Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;					Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"egressrule,omitempty"`
0000000000000000000000000000000000000000;;			Id          string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ingressrule []struct {
0000000000000000000000000000000000000000;;				Account           string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Cidr              string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;				Endport           int    `json:"endport,omitempty"`
0000000000000000000000000000000000000000;;				Icmpcode          int    `json:"icmpcode,omitempty"`
0000000000000000000000000000000000000000;;				Icmptype          int    `json:"icmptype,omitempty"`
0000000000000000000000000000000000000000;;				Protocol          string `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;				Ruleid            string `json:"ruleid,omitempty"`
0000000000000000000000000000000000000000;;				Securitygroupname string `json:"securitygroupname,omitempty"`
0000000000000000000000000000000000000000;;				Startport         int    `json:"startport,omitempty"`
0000000000000000000000000000000000000000;;				Tags              []struct {
0000000000000000000000000000000000000000;;					Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;					Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;					Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;					Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;					Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;					Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;					Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;					Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;					Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;					Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"ingressrule,omitempty"`
0000000000000000000000000000000000000000;;			Name      string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Project   string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Tags      []struct {
0000000000000000000000000000000000000000;;				Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;				Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;				Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;				Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;				Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;				Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;				Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;				Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;				Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachinecount int      `json:"virtualmachinecount,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachineids   []string `json:"virtualmachineids,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"securitygroup,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingid   string `json:"serviceofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingname string `json:"serviceofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Servicestate        string `json:"servicestate,omitempty"`
0000000000000000000000000000000000000000;;		State               string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Tags                []struct {
0000000000000000000000000000000000000000;;			Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;			Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;			Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;			Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;			Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Templatedisplaytext string `json:"templatedisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Templateid          string `json:"templateid,omitempty"`
0000000000000000000000000000000000000000;;		Templatename        string `json:"templatename,omitempty"`
0000000000000000000000000000000000000000;;		Userid              string `json:"userid,omitempty"`
0000000000000000000000000000000000000000;;		Username            string `json:"username,omitempty"`
0000000000000000000000000000000000000000;;		Vgpu                string `json:"vgpu,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid              string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename            string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResetPasswordForVirtualMachineParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ResetPasswordForVirtualMachineParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ResetPasswordForVirtualMachineParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new ResetPasswordForVirtualMachineParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VirtualMachineService) NewResetPasswordForVirtualMachineParams(id string) *ResetPasswordForVirtualMachineParams {
0000000000000000000000000000000000000000;;		p := &ResetPasswordForVirtualMachineParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Resets the password for virtual machine. The virtual machine must be in a "Stopped" state and the template must already support this feature for this command to take effect. [async]
0000000000000000000000000000000000000000;;	func (s *VirtualMachineService) ResetPasswordForVirtualMachine(p *ResetPasswordForVirtualMachineParams) (*ResetPasswordForVirtualMachineResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("resetPasswordForVirtualMachine", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r ResetPasswordForVirtualMachineResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResetPasswordForVirtualMachineResponse struct {
0000000000000000000000000000000000000000;;		JobID         string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Account       string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Affinitygroup []struct {
0000000000000000000000000000000000000000;;			Account           string   `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Description       string   `json:"description,omitempty"`
0000000000000000000000000000000000000000;;			Domain            string   `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid          string   `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Id                string   `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Name              string   `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Project           string   `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid         string   `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Type              string   `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			VirtualmachineIds []string `json:"virtualmachineIds,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"affinitygroup,omitempty"`
0000000000000000000000000000000000000000;;		Cpunumber             int               `json:"cpunumber,omitempty"`
0000000000000000000000000000000000000000;;		Cpuspeed              int               `json:"cpuspeed,omitempty"`
0000000000000000000000000000000000000000;;		Cpuused               string            `json:"cpuused,omitempty"`
0000000000000000000000000000000000000000;;		Created               string            `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Details               map[string]string `json:"details,omitempty"`
0000000000000000000000000000000000000000;;		Diskioread            int64             `json:"diskioread,omitempty"`
0000000000000000000000000000000000000000;;		Diskiowrite           int64             `json:"diskiowrite,omitempty"`
0000000000000000000000000000000000000000;;		Diskkbsread           int64             `json:"diskkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Diskkbswrite          int64             `json:"diskkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingid        string            `json:"diskofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingname      string            `json:"diskofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Displayname           string            `json:"displayname,omitempty"`
0000000000000000000000000000000000000000;;		Displayvm             bool              `json:"displayvm,omitempty"`
0000000000000000000000000000000000000000;;		Domain                string            `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid              string            `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Forvirtualnetwork     bool              `json:"forvirtualnetwork,omitempty"`
0000000000000000000000000000000000000000;;		Group                 string            `json:"group,omitempty"`
0000000000000000000000000000000000000000;;		Groupid               string            `json:"groupid,omitempty"`
0000000000000000000000000000000000000000;;		Guestosid             string            `json:"guestosid,omitempty"`
0000000000000000000000000000000000000000;;		Haenable              bool              `json:"haenable,omitempty"`
0000000000000000000000000000000000000000;;		Hostid                string            `json:"hostid,omitempty"`
0000000000000000000000000000000000000000;;		Hostname              string            `json:"hostname,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor            string            `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Id                    string            `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Instancename          string            `json:"instancename,omitempty"`
0000000000000000000000000000000000000000;;		Isdynamicallyscalable bool              `json:"isdynamicallyscalable,omitempty"`
0000000000000000000000000000000000000000;;		Isodisplaytext        string            `json:"isodisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Isoid                 string            `json:"isoid,omitempty"`
0000000000000000000000000000000000000000;;		Isoname               string            `json:"isoname,omitempty"`
0000000000000000000000000000000000000000;;		Keypair               string            `json:"keypair,omitempty"`
0000000000000000000000000000000000000000;;		Memory                int               `json:"memory,omitempty"`
0000000000000000000000000000000000000000;;		Name                  string            `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbsread        int64             `json:"networkkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbswrite       int64             `json:"networkkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Nic                   []struct {
0000000000000000000000000000000000000000;;			Broadcasturi string `json:"broadcasturi,omitempty"`
0000000000000000000000000000000000000000;;			Deviceid     string `json:"deviceid,omitempty"`
0000000000000000000000000000000000000000;;			Gateway      string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;			Id           string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ip6address   string `json:"ip6address,omitempty"`
0000000000000000000000000000000000000000;;			Ip6cidr      string `json:"ip6cidr,omitempty"`
0000000000000000000000000000000000000000;;			Ip6gateway   string `json:"ip6gateway,omitempty"`
0000000000000000000000000000000000000000;;			Ipaddress    string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			Isdefault    bool   `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;			Isolationuri string `json:"isolationuri,omitempty"`
0000000000000000000000000000000000000000;;			Macaddress   string `json:"macaddress,omitempty"`
0000000000000000000000000000000000000000;;			Netmask      string `json:"netmask,omitempty"`
0000000000000000000000000000000000000000;;			Networkid    string `json:"networkid,omitempty"`
0000000000000000000000000000000000000000;;			Networkname  string `json:"networkname,omitempty"`
0000000000000000000000000000000000000000;;			Secondaryip  []struct {
0000000000000000000000000000000000000000;;				Id        string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;				Ipaddress string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"secondaryip,omitempty"`
0000000000000000000000000000000000000000;;			Traffictype      string `json:"traffictype,omitempty"`
0000000000000000000000000000000000000000;;			Type             string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachineid string `json:"virtualmachineid,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"nic,omitempty"`
0000000000000000000000000000000000000000;;		Ostypeid        int64  `json:"ostypeid,omitempty"`
0000000000000000000000000000000000000000;;		Password        string `json:"password,omitempty"`
0000000000000000000000000000000000000000;;		Passwordenabled bool   `json:"passwordenabled,omitempty"`
0000000000000000000000000000000000000000;;		Project         string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid       string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;		Publicip        string `json:"publicip,omitempty"`
0000000000000000000000000000000000000000;;		Publicipid      string `json:"publicipid,omitempty"`
0000000000000000000000000000000000000000;;		Rootdeviceid    int64  `json:"rootdeviceid,omitempty"`
0000000000000000000000000000000000000000;;		Rootdevicetype  string `json:"rootdevicetype,omitempty"`
0000000000000000000000000000000000000000;;		Securitygroup   []struct {
0000000000000000000000000000000000000000;;			Account     string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Description string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;			Domain      string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid    string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Egressrule  []struct {
0000000000000000000000000000000000000000;;				Account           string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Cidr              string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;				Endport           int    `json:"endport,omitempty"`
0000000000000000000000000000000000000000;;				Icmpcode          int    `json:"icmpcode,omitempty"`
0000000000000000000000000000000000000000;;				Icmptype          int    `json:"icmptype,omitempty"`
0000000000000000000000000000000000000000;;				Protocol          string `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;				Ruleid            string `json:"ruleid,omitempty"`
0000000000000000000000000000000000000000;;				Securitygroupname string `json:"securitygroupname,omitempty"`
0000000000000000000000000000000000000000;;				Startport         int    `json:"startport,omitempty"`
0000000000000000000000000000000000000000;;				Tags              []struct {
0000000000000000000000000000000000000000;;					Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;					Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;					Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;					Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;					Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;					Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;					Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;					Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;					Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;					Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"egressrule,omitempty"`
0000000000000000000000000000000000000000;;			Id          string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ingressrule []struct {
0000000000000000000000000000000000000000;;				Account           string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Cidr              string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;				Endport           int    `json:"endport,omitempty"`
0000000000000000000000000000000000000000;;				Icmpcode          int    `json:"icmpcode,omitempty"`
0000000000000000000000000000000000000000;;				Icmptype          int    `json:"icmptype,omitempty"`
0000000000000000000000000000000000000000;;				Protocol          string `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;				Ruleid            string `json:"ruleid,omitempty"`
0000000000000000000000000000000000000000;;				Securitygroupname string `json:"securitygroupname,omitempty"`
0000000000000000000000000000000000000000;;				Startport         int    `json:"startport,omitempty"`
0000000000000000000000000000000000000000;;				Tags              []struct {
0000000000000000000000000000000000000000;;					Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;					Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;					Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;					Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;					Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;					Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;					Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;					Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;					Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;					Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"ingressrule,omitempty"`
0000000000000000000000000000000000000000;;			Name      string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Project   string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Tags      []struct {
0000000000000000000000000000000000000000;;				Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;				Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;				Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;				Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;				Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;				Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;				Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;				Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;				Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachinecount int      `json:"virtualmachinecount,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachineids   []string `json:"virtualmachineids,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"securitygroup,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingid   string `json:"serviceofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingname string `json:"serviceofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Servicestate        string `json:"servicestate,omitempty"`
0000000000000000000000000000000000000000;;		State               string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Tags                []struct {
0000000000000000000000000000000000000000;;			Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;			Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;			Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;			Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;			Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Templatedisplaytext string `json:"templatedisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Templateid          string `json:"templateid,omitempty"`
0000000000000000000000000000000000000000;;		Templatename        string `json:"templatename,omitempty"`
0000000000000000000000000000000000000000;;		Userid              string `json:"userid,omitempty"`
0000000000000000000000000000000000000000;;		Username            string `json:"username,omitempty"`
0000000000000000000000000000000000000000;;		Vgpu                string `json:"vgpu,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid              string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename            string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateVirtualMachineParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateVirtualMachineParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["customid"]; found {
0000000000000000000000000000000000000000;;			u.Set("customid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["details"]; found {
0000000000000000000000000000000000000000;;			i := 0
0000000000000000000000000000000000000000;;			for k, vv := range v.(map[string]string) {
0000000000000000000000000000000000000000;;				u.Set(fmt.Sprintf("details[%d].key", i), k)
0000000000000000000000000000000000000000;;				u.Set(fmt.Sprintf("details[%d].value", i), vv)
0000000000000000000000000000000000000000;;				i++
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["displayname"]; found {
0000000000000000000000000000000000000000;;			u.Set("displayname", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["displayvm"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("displayvm", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["group"]; found {
0000000000000000000000000000000000000000;;			u.Set("group", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["haenable"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("haenable", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["instancename"]; found {
0000000000000000000000000000000000000000;;			u.Set("instancename", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["isdynamicallyscalable"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("isdynamicallyscalable", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["name"]; found {
0000000000000000000000000000000000000000;;			u.Set("name", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["ostypeid"]; found {
0000000000000000000000000000000000000000;;			u.Set("ostypeid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["userdata"]; found {
0000000000000000000000000000000000000000;;			u.Set("userdata", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateVirtualMachineParams) SetCustomid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["customid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateVirtualMachineParams) SetDetails(v map[string]string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["details"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateVirtualMachineParams) SetDisplayname(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["displayname"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateVirtualMachineParams) SetDisplayvm(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["displayvm"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateVirtualMachineParams) SetGroup(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["group"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateVirtualMachineParams) SetHaenable(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["haenable"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateVirtualMachineParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateVirtualMachineParams) SetInstancename(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["instancename"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateVirtualMachineParams) SetIsdynamicallyscalable(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["isdynamicallyscalable"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateVirtualMachineParams) SetName(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["name"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateVirtualMachineParams) SetOstypeid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["ostypeid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateVirtualMachineParams) SetUserdata(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["userdata"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new UpdateVirtualMachineParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VirtualMachineService) NewUpdateVirtualMachineParams(id string) *UpdateVirtualMachineParams {
0000000000000000000000000000000000000000;;		p := &UpdateVirtualMachineParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Updates properties of a virtual machine. The VM has to be stopped and restarted for the new properties to take effect. UpdateVirtualMachine does not first check whether the VM is stopped. Therefore, stop the VM manually before issuing this call.
0000000000000000000000000000000000000000;;	func (s *VirtualMachineService) UpdateVirtualMachine(p *UpdateVirtualMachineParams) (*UpdateVirtualMachineResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("updateVirtualMachine", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r UpdateVirtualMachineResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateVirtualMachineResponse struct {
0000000000000000000000000000000000000000;;		Account       string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Affinitygroup []struct {
0000000000000000000000000000000000000000;;			Account           string   `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Description       string   `json:"description,omitempty"`
0000000000000000000000000000000000000000;;			Domain            string   `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid          string   `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Id                string   `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Name              string   `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Project           string   `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid         string   `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Type              string   `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			VirtualmachineIds []string `json:"virtualmachineIds,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"affinitygroup,omitempty"`
0000000000000000000000000000000000000000;;		Cpunumber             int               `json:"cpunumber,omitempty"`
0000000000000000000000000000000000000000;;		Cpuspeed              int               `json:"cpuspeed,omitempty"`
0000000000000000000000000000000000000000;;		Cpuused               string            `json:"cpuused,omitempty"`
0000000000000000000000000000000000000000;;		Created               string            `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Details               map[string]string `json:"details,omitempty"`
0000000000000000000000000000000000000000;;		Diskioread            int64             `json:"diskioread,omitempty"`
0000000000000000000000000000000000000000;;		Diskiowrite           int64             `json:"diskiowrite,omitempty"`
0000000000000000000000000000000000000000;;		Diskkbsread           int64             `json:"diskkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Diskkbswrite          int64             `json:"diskkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingid        string            `json:"diskofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingname      string            `json:"diskofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Displayname           string            `json:"displayname,omitempty"`
0000000000000000000000000000000000000000;;		Displayvm             bool              `json:"displayvm,omitempty"`
0000000000000000000000000000000000000000;;		Domain                string            `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid              string            `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Forvirtualnetwork     bool              `json:"forvirtualnetwork,omitempty"`
0000000000000000000000000000000000000000;;		Group                 string            `json:"group,omitempty"`
0000000000000000000000000000000000000000;;		Groupid               string            `json:"groupid,omitempty"`
0000000000000000000000000000000000000000;;		Guestosid             string            `json:"guestosid,omitempty"`
0000000000000000000000000000000000000000;;		Haenable              bool              `json:"haenable,omitempty"`
0000000000000000000000000000000000000000;;		Hostid                string            `json:"hostid,omitempty"`
0000000000000000000000000000000000000000;;		Hostname              string            `json:"hostname,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor            string            `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Id                    string            `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Instancename          string            `json:"instancename,omitempty"`
0000000000000000000000000000000000000000;;		Isdynamicallyscalable bool              `json:"isdynamicallyscalable,omitempty"`
0000000000000000000000000000000000000000;;		Isodisplaytext        string            `json:"isodisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Isoid                 string            `json:"isoid,omitempty"`
0000000000000000000000000000000000000000;;		Isoname               string            `json:"isoname,omitempty"`
0000000000000000000000000000000000000000;;		Keypair               string            `json:"keypair,omitempty"`
0000000000000000000000000000000000000000;;		Memory                int               `json:"memory,omitempty"`
0000000000000000000000000000000000000000;;		Name                  string            `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbsread        int64             `json:"networkkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbswrite       int64             `json:"networkkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Nic                   []struct {
0000000000000000000000000000000000000000;;			Broadcasturi string `json:"broadcasturi,omitempty"`
0000000000000000000000000000000000000000;;			Deviceid     string `json:"deviceid,omitempty"`
0000000000000000000000000000000000000000;;			Gateway      string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;			Id           string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ip6address   string `json:"ip6address,omitempty"`
0000000000000000000000000000000000000000;;			Ip6cidr      string `json:"ip6cidr,omitempty"`
0000000000000000000000000000000000000000;;			Ip6gateway   string `json:"ip6gateway,omitempty"`
0000000000000000000000000000000000000000;;			Ipaddress    string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			Isdefault    bool   `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;			Isolationuri string `json:"isolationuri,omitempty"`
0000000000000000000000000000000000000000;;			Macaddress   string `json:"macaddress,omitempty"`
0000000000000000000000000000000000000000;;			Netmask      string `json:"netmask,omitempty"`
0000000000000000000000000000000000000000;;			Networkid    string `json:"networkid,omitempty"`
0000000000000000000000000000000000000000;;			Networkname  string `json:"networkname,omitempty"`
0000000000000000000000000000000000000000;;			Secondaryip  []struct {
0000000000000000000000000000000000000000;;				Id        string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;				Ipaddress string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"secondaryip,omitempty"`
0000000000000000000000000000000000000000;;			Traffictype      string `json:"traffictype,omitempty"`
0000000000000000000000000000000000000000;;			Type             string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachineid string `json:"virtualmachineid,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"nic,omitempty"`
0000000000000000000000000000000000000000;;		Ostypeid        int64  `json:"ostypeid,omitempty"`
0000000000000000000000000000000000000000;;		Password        string `json:"password,omitempty"`
0000000000000000000000000000000000000000;;		Passwordenabled bool   `json:"passwordenabled,omitempty"`
0000000000000000000000000000000000000000;;		Project         string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid       string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;		Publicip        string `json:"publicip,omitempty"`
0000000000000000000000000000000000000000;;		Publicipid      string `json:"publicipid,omitempty"`
0000000000000000000000000000000000000000;;		Rootdeviceid    int64  `json:"rootdeviceid,omitempty"`
0000000000000000000000000000000000000000;;		Rootdevicetype  string `json:"rootdevicetype,omitempty"`
0000000000000000000000000000000000000000;;		Securitygroup   []struct {
0000000000000000000000000000000000000000;;			Account     string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Description string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;			Domain      string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid    string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Egressrule  []struct {
0000000000000000000000000000000000000000;;				Account           string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Cidr              string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;				Endport           int    `json:"endport,omitempty"`
0000000000000000000000000000000000000000;;				Icmpcode          int    `json:"icmpcode,omitempty"`
0000000000000000000000000000000000000000;;				Icmptype          int    `json:"icmptype,omitempty"`
0000000000000000000000000000000000000000;;				Protocol          string `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;				Ruleid            string `json:"ruleid,omitempty"`
0000000000000000000000000000000000000000;;				Securitygroupname string `json:"securitygroupname,omitempty"`
0000000000000000000000000000000000000000;;				Startport         int    `json:"startport,omitempty"`
0000000000000000000000000000000000000000;;				Tags              []struct {
0000000000000000000000000000000000000000;;					Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;					Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;					Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;					Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;					Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;					Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;					Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;					Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;					Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;					Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"egressrule,omitempty"`
0000000000000000000000000000000000000000;;			Id          string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ingressrule []struct {
0000000000000000000000000000000000000000;;				Account           string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Cidr              string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;				Endport           int    `json:"endport,omitempty"`
0000000000000000000000000000000000000000;;				Icmpcode          int    `json:"icmpcode,omitempty"`
0000000000000000000000000000000000000000;;				Icmptype          int    `json:"icmptype,omitempty"`
0000000000000000000000000000000000000000;;				Protocol          string `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;				Ruleid            string `json:"ruleid,omitempty"`
0000000000000000000000000000000000000000;;				Securitygroupname string `json:"securitygroupname,omitempty"`
0000000000000000000000000000000000000000;;				Startport         int    `json:"startport,omitempty"`
0000000000000000000000000000000000000000;;				Tags              []struct {
0000000000000000000000000000000000000000;;					Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;					Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;					Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;					Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;					Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;					Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;					Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;					Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;					Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;					Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"ingressrule,omitempty"`
0000000000000000000000000000000000000000;;			Name      string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Project   string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Tags      []struct {
0000000000000000000000000000000000000000;;				Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;				Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;				Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;				Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;				Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;				Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;				Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;				Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;				Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachinecount int      `json:"virtualmachinecount,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachineids   []string `json:"virtualmachineids,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"securitygroup,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingid   string `json:"serviceofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingname string `json:"serviceofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Servicestate        string `json:"servicestate,omitempty"`
0000000000000000000000000000000000000000;;		State               string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Tags                []struct {
0000000000000000000000000000000000000000;;			Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;			Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;			Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;			Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;			Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Templatedisplaytext string `json:"templatedisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Templateid          string `json:"templateid,omitempty"`
0000000000000000000000000000000000000000;;		Templatename        string `json:"templatename,omitempty"`
0000000000000000000000000000000000000000;;		Userid              string `json:"userid,omitempty"`
0000000000000000000000000000000000000000;;		Username            string `json:"username,omitempty"`
0000000000000000000000000000000000000000;;		Vgpu                string `json:"vgpu,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid              string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename            string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListVirtualMachinesParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVirtualMachinesParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["account"]; found {
0000000000000000000000000000000000000000;;			u.Set("account", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["affinitygroupid"]; found {
0000000000000000000000000000000000000000;;			u.Set("affinitygroupid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["details"]; found {
0000000000000000000000000000000000000000;;			vv := strings.Join(v.([]string), ",")
0000000000000000000000000000000000000000;;			u.Set("details", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["displayvm"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("displayvm", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["domainid"]; found {
0000000000000000000000000000000000000000;;			u.Set("domainid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["forvirtualnetwork"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("forvirtualnetwork", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["groupid"]; found {
0000000000000000000000000000000000000000;;			u.Set("groupid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["hostid"]; found {
0000000000000000000000000000000000000000;;			u.Set("hostid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["hostid"]; found {
0000000000000000000000000000000000000000;;			u.Set("hostid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["hypervisor"]; found {
0000000000000000000000000000000000000000;;			u.Set("hypervisor", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["ids"]; found {
0000000000000000000000000000000000000000;;			vv := strings.Join(v.([]string), ",")
0000000000000000000000000000000000000000;;			u.Set("ids", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["isoid"]; found {
0000000000000000000000000000000000000000;;			u.Set("isoid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["isrecursive"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("isrecursive", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["keypair"]; found {
0000000000000000000000000000000000000000;;			u.Set("keypair", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["keyword"]; found {
0000000000000000000000000000000000000000;;			u.Set("keyword", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["listall"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("listall", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["name"]; found {
0000000000000000000000000000000000000000;;			u.Set("name", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["networkid"]; found {
0000000000000000000000000000000000000000;;			u.Set("networkid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["page"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.Itoa(v.(int))
0000000000000000000000000000000000000000;;			u.Set("page", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["pagesize"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.Itoa(v.(int))
0000000000000000000000000000000000000000;;			u.Set("pagesize", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["podid"]; found {
0000000000000000000000000000000000000000;;			u.Set("podid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["podid"]; found {
0000000000000000000000000000000000000000;;			u.Set("podid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["projectid"]; found {
0000000000000000000000000000000000000000;;			u.Set("projectid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["serviceofferingid"]; found {
0000000000000000000000000000000000000000;;			u.Set("serviceofferingid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["state"]; found {
0000000000000000000000000000000000000000;;			u.Set("state", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["storageid"]; found {
0000000000000000000000000000000000000000;;			u.Set("storageid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["storageid"]; found {
0000000000000000000000000000000000000000;;			u.Set("storageid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["tags"]; found {
0000000000000000000000000000000000000000;;			i := 0
0000000000000000000000000000000000000000;;			for k, vv := range v.(map[string]string) {
0000000000000000000000000000000000000000;;				u.Set(fmt.Sprintf("tags[%d].key", i), k)
0000000000000000000000000000000000000000;;				u.Set(fmt.Sprintf("tags[%d].value", i), vv)
0000000000000000000000000000000000000000;;				i++
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["templateid"]; found {
0000000000000000000000000000000000000000;;			u.Set("templateid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["userid"]; found {
0000000000000000000000000000000000000000;;			u.Set("userid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["vpcid"]; found {
0000000000000000000000000000000000000000;;			u.Set("vpcid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["zoneid"]; found {
0000000000000000000000000000000000000000;;			u.Set("zoneid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVirtualMachinesParams) SetAccount(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["account"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVirtualMachinesParams) SetAffinitygroupid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["affinitygroupid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVirtualMachinesParams) SetDetails(v []string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["details"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVirtualMachinesParams) SetDisplayvm(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["displayvm"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVirtualMachinesParams) SetDomainid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["domainid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVirtualMachinesParams) SetForvirtualnetwork(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["forvirtualnetwork"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVirtualMachinesParams) SetGroupid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["groupid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVirtualMachinesParams) SetHostid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["hostid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVirtualMachinesParams) SetHypervisor(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["hypervisor"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVirtualMachinesParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVirtualMachinesParams) SetIds(v []string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["ids"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVirtualMachinesParams) SetIsoid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["isoid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVirtualMachinesParams) SetIsrecursive(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["isrecursive"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVirtualMachinesParams) SetKeypair(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["keypair"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVirtualMachinesParams) SetKeyword(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["keyword"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVirtualMachinesParams) SetListall(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["listall"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVirtualMachinesParams) SetName(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["name"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVirtualMachinesParams) SetNetworkid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["networkid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVirtualMachinesParams) SetPage(v int) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["page"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVirtualMachinesParams) SetPagesize(v int) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["pagesize"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVirtualMachinesParams) SetPodid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["podid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVirtualMachinesParams) SetProjectid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["projectid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVirtualMachinesParams) SetServiceofferingid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["serviceofferingid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVirtualMachinesParams) SetState(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["state"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVirtualMachinesParams) SetStorageid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["storageid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVirtualMachinesParams) SetTags(v map[string]string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["tags"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVirtualMachinesParams) SetTemplateid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["templateid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVirtualMachinesParams) SetUserid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["userid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVirtualMachinesParams) SetVpcid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["vpcid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVirtualMachinesParams) SetZoneid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["zoneid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new ListVirtualMachinesParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VirtualMachineService) NewListVirtualMachinesParams() *ListVirtualMachinesParams {
0000000000000000000000000000000000000000;;		p := &ListVirtualMachinesParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is a courtesy helper function, which in some cases may not work as expected!
0000000000000000000000000000000000000000;;	func (s *VirtualMachineService) GetVirtualMachineID(name string, opts ...OptionFunc) (string, int, error) {
0000000000000000000000000000000000000000;;		p := &ListVirtualMachinesParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.p["name"] = name
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, fn := range opts {
0000000000000000000000000000000000000000;;			if err := fn(s.cs, p); err != nil {
0000000000000000000000000000000000000000;;				return "", -1, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		l, err := s.ListVirtualMachines(p)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", -1, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 0 {
0000000000000000000000000000000000000000;;			return "", l.Count, fmt.Errorf("No match found for %s: %+v", name, l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 1 {
0000000000000000000000000000000000000000;;			return l.VirtualMachines[0].Id, l.Count, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count > 1 {
0000000000000000000000000000000000000000;;			for _, v := range l.VirtualMachines {
0000000000000000000000000000000000000000;;				if v.Name == name {
0000000000000000000000000000000000000000;;					return v.Id, l.Count, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "", l.Count, fmt.Errorf("Could not find an exact match for %s: %+v", name, l)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is a courtesy helper function, which in some cases may not work as expected!
0000000000000000000000000000000000000000;;	func (s *VirtualMachineService) GetVirtualMachineByName(name string, opts ...OptionFunc) (*VirtualMachine, int, error) {
0000000000000000000000000000000000000000;;		id, count, err := s.GetVirtualMachineID(name, opts...)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, count, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r, count, err := s.GetVirtualMachineByID(id, opts...)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, count, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return r, count, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is a courtesy helper function, which in some cases may not work as expected!
0000000000000000000000000000000000000000;;	func (s *VirtualMachineService) GetVirtualMachineByID(id string, opts ...OptionFunc) (*VirtualMachine, int, error) {
0000000000000000000000000000000000000000;;		p := &ListVirtualMachinesParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, fn := range opts {
0000000000000000000000000000000000000000;;			if err := fn(s.cs, p); err != nil {
0000000000000000000000000000000000000000;;				return nil, -1, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		l, err := s.ListVirtualMachines(p)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if strings.Contains(err.Error(), fmt.Sprintf(
0000000000000000000000000000000000000000;;				"Invalid parameter id value=%s due to incorrect long value format, "+
0000000000000000000000000000000000000000;;					"or entity does not exist", id)) {
0000000000000000000000000000000000000000;;				return nil, 0, fmt.Errorf("No match found for %s: %+v", id, l)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, -1, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 0 {
0000000000000000000000000000000000000000;;			return nil, l.Count, fmt.Errorf("No match found for %s: %+v", id, l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 1 {
0000000000000000000000000000000000000000;;			return l.VirtualMachines[0], l.Count, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, l.Count, fmt.Errorf("There is more then one result for VirtualMachine UUID: %s!", id)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List the virtual machines owned by the account.
0000000000000000000000000000000000000000;;	func (s *VirtualMachineService) ListVirtualMachines(p *ListVirtualMachinesParams) (*ListVirtualMachinesResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("listVirtualMachines", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r ListVirtualMachinesResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListVirtualMachinesResponse struct {
0000000000000000000000000000000000000000;;		Count           int               `json:"count"`
0000000000000000000000000000000000000000;;		VirtualMachines []*VirtualMachine `json:"virtualmachine"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachine struct {
0000000000000000000000000000000000000000;;		Account       string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Affinitygroup []struct {
0000000000000000000000000000000000000000;;			Account           string   `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Description       string   `json:"description,omitempty"`
0000000000000000000000000000000000000000;;			Domain            string   `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid          string   `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Id                string   `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Name              string   `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Project           string   `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid         string   `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Type              string   `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			VirtualmachineIds []string `json:"virtualmachineIds,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"affinitygroup,omitempty"`
0000000000000000000000000000000000000000;;		Cpunumber             int               `json:"cpunumber,omitempty"`
0000000000000000000000000000000000000000;;		Cpuspeed              int               `json:"cpuspeed,omitempty"`
0000000000000000000000000000000000000000;;		Cpuused               string            `json:"cpuused,omitempty"`
0000000000000000000000000000000000000000;;		Created               string            `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Details               map[string]string `json:"details,omitempty"`
0000000000000000000000000000000000000000;;		Diskioread            int64             `json:"diskioread,omitempty"`
0000000000000000000000000000000000000000;;		Diskiowrite           int64             `json:"diskiowrite,omitempty"`
0000000000000000000000000000000000000000;;		Diskkbsread           int64             `json:"diskkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Diskkbswrite          int64             `json:"diskkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingid        string            `json:"diskofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingname      string            `json:"diskofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Displayname           string            `json:"displayname,omitempty"`
0000000000000000000000000000000000000000;;		Displayvm             bool              `json:"displayvm,omitempty"`
0000000000000000000000000000000000000000;;		Domain                string            `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid              string            `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Forvirtualnetwork     bool              `json:"forvirtualnetwork,omitempty"`
0000000000000000000000000000000000000000;;		Group                 string            `json:"group,omitempty"`
0000000000000000000000000000000000000000;;		Groupid               string            `json:"groupid,omitempty"`
0000000000000000000000000000000000000000;;		Guestosid             string            `json:"guestosid,omitempty"`
0000000000000000000000000000000000000000;;		Haenable              bool              `json:"haenable,omitempty"`
0000000000000000000000000000000000000000;;		Hostid                string            `json:"hostid,omitempty"`
0000000000000000000000000000000000000000;;		Hostname              string            `json:"hostname,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor            string            `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Id                    string            `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Instancename          string            `json:"instancename,omitempty"`
0000000000000000000000000000000000000000;;		Isdynamicallyscalable bool              `json:"isdynamicallyscalable,omitempty"`
0000000000000000000000000000000000000000;;		Isodisplaytext        string            `json:"isodisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Isoid                 string            `json:"isoid,omitempty"`
0000000000000000000000000000000000000000;;		Isoname               string            `json:"isoname,omitempty"`
0000000000000000000000000000000000000000;;		Keypair               string            `json:"keypair,omitempty"`
0000000000000000000000000000000000000000;;		Memory                int               `json:"memory,omitempty"`
0000000000000000000000000000000000000000;;		Name                  string            `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbsread        int64             `json:"networkkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbswrite       int64             `json:"networkkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Nic                   []struct {
0000000000000000000000000000000000000000;;			Broadcasturi string `json:"broadcasturi,omitempty"`
0000000000000000000000000000000000000000;;			Deviceid     string `json:"deviceid,omitempty"`
0000000000000000000000000000000000000000;;			Gateway      string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;			Id           string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ip6address   string `json:"ip6address,omitempty"`
0000000000000000000000000000000000000000;;			Ip6cidr      string `json:"ip6cidr,omitempty"`
0000000000000000000000000000000000000000;;			Ip6gateway   string `json:"ip6gateway,omitempty"`
0000000000000000000000000000000000000000;;			Ipaddress    string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			Isdefault    bool   `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;			Isolationuri string `json:"isolationuri,omitempty"`
0000000000000000000000000000000000000000;;			Macaddress   string `json:"macaddress,omitempty"`
0000000000000000000000000000000000000000;;			Netmask      string `json:"netmask,omitempty"`
0000000000000000000000000000000000000000;;			Networkid    string `json:"networkid,omitempty"`
0000000000000000000000000000000000000000;;			Networkname  string `json:"networkname,omitempty"`
0000000000000000000000000000000000000000;;			Secondaryip  []struct {
0000000000000000000000000000000000000000;;				Id        string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;				Ipaddress string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"secondaryip,omitempty"`
0000000000000000000000000000000000000000;;			Traffictype      string `json:"traffictype,omitempty"`
0000000000000000000000000000000000000000;;			Type             string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachineid string `json:"virtualmachineid,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"nic,omitempty"`
0000000000000000000000000000000000000000;;		Ostypeid        int64  `json:"ostypeid,omitempty"`
0000000000000000000000000000000000000000;;		Password        string `json:"password,omitempty"`
0000000000000000000000000000000000000000;;		Passwordenabled bool   `json:"passwordenabled,omitempty"`
0000000000000000000000000000000000000000;;		Project         string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid       string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;		Publicip        string `json:"publicip,omitempty"`
0000000000000000000000000000000000000000;;		Publicipid      string `json:"publicipid,omitempty"`
0000000000000000000000000000000000000000;;		Rootdeviceid    int64  `json:"rootdeviceid,omitempty"`
0000000000000000000000000000000000000000;;		Rootdevicetype  string `json:"rootdevicetype,omitempty"`
0000000000000000000000000000000000000000;;		Securitygroup   []struct {
0000000000000000000000000000000000000000;;			Account     string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Description string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;			Domain      string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid    string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Egressrule  []struct {
0000000000000000000000000000000000000000;;				Account           string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Cidr              string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;				Endport           int    `json:"endport,omitempty"`
0000000000000000000000000000000000000000;;				Icmpcode          int    `json:"icmpcode,omitempty"`
0000000000000000000000000000000000000000;;				Icmptype          int    `json:"icmptype,omitempty"`
0000000000000000000000000000000000000000;;				Protocol          string `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;				Ruleid            string `json:"ruleid,omitempty"`
0000000000000000000000000000000000000000;;				Securitygroupname string `json:"securitygroupname,omitempty"`
0000000000000000000000000000000000000000;;				Startport         int    `json:"startport,omitempty"`
0000000000000000000000000000000000000000;;				Tags              []struct {
0000000000000000000000000000000000000000;;					Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;					Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;					Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;					Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;					Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;					Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;					Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;					Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;					Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;					Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"egressrule,omitempty"`
0000000000000000000000000000000000000000;;			Id          string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ingressrule []struct {
0000000000000000000000000000000000000000;;				Account           string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Cidr              string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;				Endport           int    `json:"endport,omitempty"`
0000000000000000000000000000000000000000;;				Icmpcode          int    `json:"icmpcode,omitempty"`
0000000000000000000000000000000000000000;;				Icmptype          int    `json:"icmptype,omitempty"`
0000000000000000000000000000000000000000;;				Protocol          string `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;				Ruleid            string `json:"ruleid,omitempty"`
0000000000000000000000000000000000000000;;				Securitygroupname string `json:"securitygroupname,omitempty"`
0000000000000000000000000000000000000000;;				Startport         int    `json:"startport,omitempty"`
0000000000000000000000000000000000000000;;				Tags              []struct {
0000000000000000000000000000000000000000;;					Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;					Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;					Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;					Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;					Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;					Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;					Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;					Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;					Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;					Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"ingressrule,omitempty"`
0000000000000000000000000000000000000000;;			Name      string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Project   string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Tags      []struct {
0000000000000000000000000000000000000000;;				Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;				Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;				Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;				Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;				Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;				Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;				Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;				Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;				Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachinecount int      `json:"virtualmachinecount,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachineids   []string `json:"virtualmachineids,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"securitygroup,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingid   string `json:"serviceofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingname string `json:"serviceofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Servicestate        string `json:"servicestate,omitempty"`
0000000000000000000000000000000000000000;;		State               string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Tags                []struct {
0000000000000000000000000000000000000000;;			Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;			Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;			Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;			Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;			Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Templatedisplaytext string `json:"templatedisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Templateid          string `json:"templateid,omitempty"`
0000000000000000000000000000000000000000;;		Templatename        string `json:"templatename,omitempty"`
0000000000000000000000000000000000000000;;		Userid              string `json:"userid,omitempty"`
0000000000000000000000000000000000000000;;		Username            string `json:"username,omitempty"`
0000000000000000000000000000000000000000;;		Vgpu                string `json:"vgpu,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid              string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename            string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GetVMPasswordParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *GetVMPasswordParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *GetVMPasswordParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new GetVMPasswordParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VirtualMachineService) NewGetVMPasswordParams(id string) *GetVMPasswordParams {
0000000000000000000000000000000000000000;;		p := &GetVMPasswordParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Returns an encrypted password for the VM
0000000000000000000000000000000000000000;;	func (s *VirtualMachineService) GetVMPassword(p *GetVMPasswordParams) (*GetVMPasswordResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("getVMPassword", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r GetVMPasswordResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GetVMPasswordResponse struct {
0000000000000000000000000000000000000000;;		Encryptedpassword string `json:"encryptedpassword,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RestoreVirtualMachineParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *RestoreVirtualMachineParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["templateid"]; found {
0000000000000000000000000000000000000000;;			u.Set("templateid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["virtualmachineid"]; found {
0000000000000000000000000000000000000000;;			u.Set("virtualmachineid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *RestoreVirtualMachineParams) SetTemplateid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["templateid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *RestoreVirtualMachineParams) SetVirtualmachineid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["virtualmachineid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new RestoreVirtualMachineParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VirtualMachineService) NewRestoreVirtualMachineParams(virtualmachineid string) *RestoreVirtualMachineParams {
0000000000000000000000000000000000000000;;		p := &RestoreVirtualMachineParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["virtualmachineid"] = virtualmachineid
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Restore a VM to original template/ISO or new template/ISO
0000000000000000000000000000000000000000;;	func (s *VirtualMachineService) RestoreVirtualMachine(p *RestoreVirtualMachineParams) (*RestoreVirtualMachineResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("restoreVirtualMachine", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r RestoreVirtualMachineResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RestoreVirtualMachineResponse struct {
0000000000000000000000000000000000000000;;		JobID         string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Account       string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Affinitygroup []struct {
0000000000000000000000000000000000000000;;			Account           string   `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Description       string   `json:"description,omitempty"`
0000000000000000000000000000000000000000;;			Domain            string   `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid          string   `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Id                string   `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Name              string   `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Project           string   `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid         string   `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Type              string   `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			VirtualmachineIds []string `json:"virtualmachineIds,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"affinitygroup,omitempty"`
0000000000000000000000000000000000000000;;		Cpunumber             int               `json:"cpunumber,omitempty"`
0000000000000000000000000000000000000000;;		Cpuspeed              int               `json:"cpuspeed,omitempty"`
0000000000000000000000000000000000000000;;		Cpuused               string            `json:"cpuused,omitempty"`
0000000000000000000000000000000000000000;;		Created               string            `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Details               map[string]string `json:"details,omitempty"`
0000000000000000000000000000000000000000;;		Diskioread            int64             `json:"diskioread,omitempty"`
0000000000000000000000000000000000000000;;		Diskiowrite           int64             `json:"diskiowrite,omitempty"`
0000000000000000000000000000000000000000;;		Diskkbsread           int64             `json:"diskkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Diskkbswrite          int64             `json:"diskkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingid        string            `json:"diskofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingname      string            `json:"diskofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Displayname           string            `json:"displayname,omitempty"`
0000000000000000000000000000000000000000;;		Displayvm             bool              `json:"displayvm,omitempty"`
0000000000000000000000000000000000000000;;		Domain                string            `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid              string            `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Forvirtualnetwork     bool              `json:"forvirtualnetwork,omitempty"`
0000000000000000000000000000000000000000;;		Group                 string            `json:"group,omitempty"`
0000000000000000000000000000000000000000;;		Groupid               string            `json:"groupid,omitempty"`
0000000000000000000000000000000000000000;;		Guestosid             string            `json:"guestosid,omitempty"`
0000000000000000000000000000000000000000;;		Haenable              bool              `json:"haenable,omitempty"`
0000000000000000000000000000000000000000;;		Hostid                string            `json:"hostid,omitempty"`
0000000000000000000000000000000000000000;;		Hostname              string            `json:"hostname,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor            string            `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Id                    string            `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Instancename          string            `json:"instancename,omitempty"`
0000000000000000000000000000000000000000;;		Isdynamicallyscalable bool              `json:"isdynamicallyscalable,omitempty"`
0000000000000000000000000000000000000000;;		Isodisplaytext        string            `json:"isodisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Isoid                 string            `json:"isoid,omitempty"`
0000000000000000000000000000000000000000;;		Isoname               string            `json:"isoname,omitempty"`
0000000000000000000000000000000000000000;;		Keypair               string            `json:"keypair,omitempty"`
0000000000000000000000000000000000000000;;		Memory                int               `json:"memory,omitempty"`
0000000000000000000000000000000000000000;;		Name                  string            `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbsread        int64             `json:"networkkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbswrite       int64             `json:"networkkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Nic                   []struct {
0000000000000000000000000000000000000000;;			Broadcasturi string `json:"broadcasturi,omitempty"`
0000000000000000000000000000000000000000;;			Deviceid     string `json:"deviceid,omitempty"`
0000000000000000000000000000000000000000;;			Gateway      string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;			Id           string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ip6address   string `json:"ip6address,omitempty"`
0000000000000000000000000000000000000000;;			Ip6cidr      string `json:"ip6cidr,omitempty"`
0000000000000000000000000000000000000000;;			Ip6gateway   string `json:"ip6gateway,omitempty"`
0000000000000000000000000000000000000000;;			Ipaddress    string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			Isdefault    bool   `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;			Isolationuri string `json:"isolationuri,omitempty"`
0000000000000000000000000000000000000000;;			Macaddress   string `json:"macaddress,omitempty"`
0000000000000000000000000000000000000000;;			Netmask      string `json:"netmask,omitempty"`
0000000000000000000000000000000000000000;;			Networkid    string `json:"networkid,omitempty"`
0000000000000000000000000000000000000000;;			Networkname  string `json:"networkname,omitempty"`
0000000000000000000000000000000000000000;;			Secondaryip  []struct {
0000000000000000000000000000000000000000;;				Id        string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;				Ipaddress string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"secondaryip,omitempty"`
0000000000000000000000000000000000000000;;			Traffictype      string `json:"traffictype,omitempty"`
0000000000000000000000000000000000000000;;			Type             string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachineid string `json:"virtualmachineid,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"nic,omitempty"`
0000000000000000000000000000000000000000;;		Ostypeid        int64  `json:"ostypeid,omitempty"`
0000000000000000000000000000000000000000;;		Password        string `json:"password,omitempty"`
0000000000000000000000000000000000000000;;		Passwordenabled bool   `json:"passwordenabled,omitempty"`
0000000000000000000000000000000000000000;;		Project         string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid       string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;		Publicip        string `json:"publicip,omitempty"`
0000000000000000000000000000000000000000;;		Publicipid      string `json:"publicipid,omitempty"`
0000000000000000000000000000000000000000;;		Rootdeviceid    int64  `json:"rootdeviceid,omitempty"`
0000000000000000000000000000000000000000;;		Rootdevicetype  string `json:"rootdevicetype,omitempty"`
0000000000000000000000000000000000000000;;		Securitygroup   []struct {
0000000000000000000000000000000000000000;;			Account     string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Description string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;			Domain      string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid    string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Egressrule  []struct {
0000000000000000000000000000000000000000;;				Account           string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Cidr              string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;				Endport           int    `json:"endport,omitempty"`
0000000000000000000000000000000000000000;;				Icmpcode          int    `json:"icmpcode,omitempty"`
0000000000000000000000000000000000000000;;				Icmptype          int    `json:"icmptype,omitempty"`
0000000000000000000000000000000000000000;;				Protocol          string `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;				Ruleid            string `json:"ruleid,omitempty"`
0000000000000000000000000000000000000000;;				Securitygroupname string `json:"securitygroupname,omitempty"`
0000000000000000000000000000000000000000;;				Startport         int    `json:"startport,omitempty"`
0000000000000000000000000000000000000000;;				Tags              []struct {
0000000000000000000000000000000000000000;;					Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;					Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;					Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;					Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;					Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;					Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;					Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;					Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;					Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;					Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"egressrule,omitempty"`
0000000000000000000000000000000000000000;;			Id          string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ingressrule []struct {
0000000000000000000000000000000000000000;;				Account           string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Cidr              string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;				Endport           int    `json:"endport,omitempty"`
0000000000000000000000000000000000000000;;				Icmpcode          int    `json:"icmpcode,omitempty"`
0000000000000000000000000000000000000000;;				Icmptype          int    `json:"icmptype,omitempty"`
0000000000000000000000000000000000000000;;				Protocol          string `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;				Ruleid            string `json:"ruleid,omitempty"`
0000000000000000000000000000000000000000;;				Securitygroupname string `json:"securitygroupname,omitempty"`
0000000000000000000000000000000000000000;;				Startport         int    `json:"startport,omitempty"`
0000000000000000000000000000000000000000;;				Tags              []struct {
0000000000000000000000000000000000000000;;					Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;					Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;					Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;					Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;					Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;					Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;					Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;					Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;					Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;					Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"ingressrule,omitempty"`
0000000000000000000000000000000000000000;;			Name      string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Project   string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Tags      []struct {
0000000000000000000000000000000000000000;;				Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;				Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;				Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;				Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;				Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;				Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;				Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;				Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;				Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachinecount int      `json:"virtualmachinecount,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachineids   []string `json:"virtualmachineids,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"securitygroup,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingid   string `json:"serviceofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingname string `json:"serviceofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Servicestate        string `json:"servicestate,omitempty"`
0000000000000000000000000000000000000000;;		State               string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Tags                []struct {
0000000000000000000000000000000000000000;;			Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;			Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;			Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;			Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;			Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Templatedisplaytext string `json:"templatedisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Templateid          string `json:"templateid,omitempty"`
0000000000000000000000000000000000000000;;		Templatename        string `json:"templatename,omitempty"`
0000000000000000000000000000000000000000;;		Userid              string `json:"userid,omitempty"`
0000000000000000000000000000000000000000;;		Username            string `json:"username,omitempty"`
0000000000000000000000000000000000000000;;		Vgpu                string `json:"vgpu,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid              string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename            string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ChangeServiceForVirtualMachineParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ChangeServiceForVirtualMachineParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["details"]; found {
0000000000000000000000000000000000000000;;			i := 0
0000000000000000000000000000000000000000;;			for k, vv := range v.(map[string]string) {
0000000000000000000000000000000000000000;;				u.Set(fmt.Sprintf("details[%d].key", i), k)
0000000000000000000000000000000000000000;;				u.Set(fmt.Sprintf("details[%d].value", i), vv)
0000000000000000000000000000000000000000;;				i++
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["serviceofferingid"]; found {
0000000000000000000000000000000000000000;;			u.Set("serviceofferingid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ChangeServiceForVirtualMachineParams) SetDetails(v map[string]string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["details"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ChangeServiceForVirtualMachineParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ChangeServiceForVirtualMachineParams) SetServiceofferingid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["serviceofferingid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new ChangeServiceForVirtualMachineParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VirtualMachineService) NewChangeServiceForVirtualMachineParams(id string, serviceofferingid string) *ChangeServiceForVirtualMachineParams {
0000000000000000000000000000000000000000;;		p := &ChangeServiceForVirtualMachineParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		p.p["serviceofferingid"] = serviceofferingid
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Changes the service offering for a virtual machine. The virtual machine must be in a "Stopped" state for this command to take effect.
0000000000000000000000000000000000000000;;	func (s *VirtualMachineService) ChangeServiceForVirtualMachine(p *ChangeServiceForVirtualMachineParams) (*ChangeServiceForVirtualMachineResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("changeServiceForVirtualMachine", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r ChangeServiceForVirtualMachineResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ChangeServiceForVirtualMachineResponse struct {
0000000000000000000000000000000000000000;;		Account       string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Affinitygroup []struct {
0000000000000000000000000000000000000000;;			Account           string   `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Description       string   `json:"description,omitempty"`
0000000000000000000000000000000000000000;;			Domain            string   `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid          string   `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Id                string   `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Name              string   `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Project           string   `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid         string   `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Type              string   `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			VirtualmachineIds []string `json:"virtualmachineIds,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"affinitygroup,omitempty"`
0000000000000000000000000000000000000000;;		Cpunumber             int               `json:"cpunumber,omitempty"`
0000000000000000000000000000000000000000;;		Cpuspeed              int               `json:"cpuspeed,omitempty"`
0000000000000000000000000000000000000000;;		Cpuused               string            `json:"cpuused,omitempty"`
0000000000000000000000000000000000000000;;		Created               string            `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Details               map[string]string `json:"details,omitempty"`
0000000000000000000000000000000000000000;;		Diskioread            int64             `json:"diskioread,omitempty"`
0000000000000000000000000000000000000000;;		Diskiowrite           int64             `json:"diskiowrite,omitempty"`
0000000000000000000000000000000000000000;;		Diskkbsread           int64             `json:"diskkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Diskkbswrite          int64             `json:"diskkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingid        string            `json:"diskofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingname      string            `json:"diskofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Displayname           string            `json:"displayname,omitempty"`
0000000000000000000000000000000000000000;;		Displayvm             bool              `json:"displayvm,omitempty"`
0000000000000000000000000000000000000000;;		Domain                string            `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid              string            `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Forvirtualnetwork     bool              `json:"forvirtualnetwork,omitempty"`
0000000000000000000000000000000000000000;;		Group                 string            `json:"group,omitempty"`
0000000000000000000000000000000000000000;;		Groupid               string            `json:"groupid,omitempty"`
0000000000000000000000000000000000000000;;		Guestosid             string            `json:"guestosid,omitempty"`
0000000000000000000000000000000000000000;;		Haenable              bool              `json:"haenable,omitempty"`
0000000000000000000000000000000000000000;;		Hostid                string            `json:"hostid,omitempty"`
0000000000000000000000000000000000000000;;		Hostname              string            `json:"hostname,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor            string            `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Id                    string            `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Instancename          string            `json:"instancename,omitempty"`
0000000000000000000000000000000000000000;;		Isdynamicallyscalable bool              `json:"isdynamicallyscalable,omitempty"`
0000000000000000000000000000000000000000;;		Isodisplaytext        string            `json:"isodisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Isoid                 string            `json:"isoid,omitempty"`
0000000000000000000000000000000000000000;;		Isoname               string            `json:"isoname,omitempty"`
0000000000000000000000000000000000000000;;		Keypair               string            `json:"keypair,omitempty"`
0000000000000000000000000000000000000000;;		Memory                int               `json:"memory,omitempty"`
0000000000000000000000000000000000000000;;		Name                  string            `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbsread        int64             `json:"networkkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbswrite       int64             `json:"networkkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Nic                   []struct {
0000000000000000000000000000000000000000;;			Broadcasturi string `json:"broadcasturi,omitempty"`
0000000000000000000000000000000000000000;;			Deviceid     string `json:"deviceid,omitempty"`
0000000000000000000000000000000000000000;;			Gateway      string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;			Id           string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ip6address   string `json:"ip6address,omitempty"`
0000000000000000000000000000000000000000;;			Ip6cidr      string `json:"ip6cidr,omitempty"`
0000000000000000000000000000000000000000;;			Ip6gateway   string `json:"ip6gateway,omitempty"`
0000000000000000000000000000000000000000;;			Ipaddress    string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			Isdefault    bool   `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;			Isolationuri string `json:"isolationuri,omitempty"`
0000000000000000000000000000000000000000;;			Macaddress   string `json:"macaddress,omitempty"`
0000000000000000000000000000000000000000;;			Netmask      string `json:"netmask,omitempty"`
0000000000000000000000000000000000000000;;			Networkid    string `json:"networkid,omitempty"`
0000000000000000000000000000000000000000;;			Networkname  string `json:"networkname,omitempty"`
0000000000000000000000000000000000000000;;			Secondaryip  []struct {
0000000000000000000000000000000000000000;;				Id        string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;				Ipaddress string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"secondaryip,omitempty"`
0000000000000000000000000000000000000000;;			Traffictype      string `json:"traffictype,omitempty"`
0000000000000000000000000000000000000000;;			Type             string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachineid string `json:"virtualmachineid,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"nic,omitempty"`
0000000000000000000000000000000000000000;;		Ostypeid        int64  `json:"ostypeid,omitempty"`
0000000000000000000000000000000000000000;;		Password        string `json:"password,omitempty"`
0000000000000000000000000000000000000000;;		Passwordenabled bool   `json:"passwordenabled,omitempty"`
0000000000000000000000000000000000000000;;		Project         string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid       string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;		Publicip        string `json:"publicip,omitempty"`
0000000000000000000000000000000000000000;;		Publicipid      string `json:"publicipid,omitempty"`
0000000000000000000000000000000000000000;;		Rootdeviceid    int64  `json:"rootdeviceid,omitempty"`
0000000000000000000000000000000000000000;;		Rootdevicetype  string `json:"rootdevicetype,omitempty"`
0000000000000000000000000000000000000000;;		Securitygroup   []struct {
0000000000000000000000000000000000000000;;			Account     string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Description string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;			Domain      string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid    string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Egressrule  []struct {
0000000000000000000000000000000000000000;;				Account           string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Cidr              string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;				Endport           int    `json:"endport,omitempty"`
0000000000000000000000000000000000000000;;				Icmpcode          int    `json:"icmpcode,omitempty"`
0000000000000000000000000000000000000000;;				Icmptype          int    `json:"icmptype,omitempty"`
0000000000000000000000000000000000000000;;				Protocol          string `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;				Ruleid            string `json:"ruleid,omitempty"`
0000000000000000000000000000000000000000;;				Securitygroupname string `json:"securitygroupname,omitempty"`
0000000000000000000000000000000000000000;;				Startport         int    `json:"startport,omitempty"`
0000000000000000000000000000000000000000;;				Tags              []struct {
0000000000000000000000000000000000000000;;					Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;					Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;					Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;					Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;					Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;					Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;					Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;					Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;					Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;					Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"egressrule,omitempty"`
0000000000000000000000000000000000000000;;			Id          string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ingressrule []struct {
0000000000000000000000000000000000000000;;				Account           string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Cidr              string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;				Endport           int    `json:"endport,omitempty"`
0000000000000000000000000000000000000000;;				Icmpcode          int    `json:"icmpcode,omitempty"`
0000000000000000000000000000000000000000;;				Icmptype          int    `json:"icmptype,omitempty"`
0000000000000000000000000000000000000000;;				Protocol          string `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;				Ruleid            string `json:"ruleid,omitempty"`
0000000000000000000000000000000000000000;;				Securitygroupname string `json:"securitygroupname,omitempty"`
0000000000000000000000000000000000000000;;				Startport         int    `json:"startport,omitempty"`
0000000000000000000000000000000000000000;;				Tags              []struct {
0000000000000000000000000000000000000000;;					Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;					Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;					Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;					Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;					Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;					Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;					Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;					Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;					Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;					Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"ingressrule,omitempty"`
0000000000000000000000000000000000000000;;			Name      string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Project   string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Tags      []struct {
0000000000000000000000000000000000000000;;				Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;				Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;				Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;				Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;				Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;				Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;				Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;				Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;				Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachinecount int      `json:"virtualmachinecount,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachineids   []string `json:"virtualmachineids,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"securitygroup,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingid   string `json:"serviceofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingname string `json:"serviceofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Servicestate        string `json:"servicestate,omitempty"`
0000000000000000000000000000000000000000;;		State               string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Tags                []struct {
0000000000000000000000000000000000000000;;			Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;			Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;			Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;			Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;			Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Templatedisplaytext string `json:"templatedisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Templateid          string `json:"templateid,omitempty"`
0000000000000000000000000000000000000000;;		Templatename        string `json:"templatename,omitempty"`
0000000000000000000000000000000000000000;;		Userid              string `json:"userid,omitempty"`
0000000000000000000000000000000000000000;;		Username            string `json:"username,omitempty"`
0000000000000000000000000000000000000000;;		Vgpu                string `json:"vgpu,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid              string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename            string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ScaleVirtualMachineParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ScaleVirtualMachineParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["details"]; found {
0000000000000000000000000000000000000000;;			i := 0
0000000000000000000000000000000000000000;;			for k, vv := range v.(map[string]string) {
0000000000000000000000000000000000000000;;				u.Set(fmt.Sprintf("details[%d].key", i), k)
0000000000000000000000000000000000000000;;				u.Set(fmt.Sprintf("details[%d].value", i), vv)
0000000000000000000000000000000000000000;;				i++
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["serviceofferingid"]; found {
0000000000000000000000000000000000000000;;			u.Set("serviceofferingid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ScaleVirtualMachineParams) SetDetails(v map[string]string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["details"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ScaleVirtualMachineParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ScaleVirtualMachineParams) SetServiceofferingid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["serviceofferingid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new ScaleVirtualMachineParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VirtualMachineService) NewScaleVirtualMachineParams(id string, serviceofferingid string) *ScaleVirtualMachineParams {
0000000000000000000000000000000000000000;;		p := &ScaleVirtualMachineParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		p.p["serviceofferingid"] = serviceofferingid
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Scales the virtual machine to a new service offering.
0000000000000000000000000000000000000000;;	func (s *VirtualMachineService) ScaleVirtualMachine(p *ScaleVirtualMachineParams) (*ScaleVirtualMachineResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("scaleVirtualMachine", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r ScaleVirtualMachineResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ScaleVirtualMachineResponse struct {
0000000000000000000000000000000000000000;;		JobID       string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Displaytext string `json:"displaytext,omitempty"`
0000000000000000000000000000000000000000;;		Success     bool   `json:"success,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AssignVirtualMachineParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AssignVirtualMachineParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["account"]; found {
0000000000000000000000000000000000000000;;			u.Set("account", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["domainid"]; found {
0000000000000000000000000000000000000000;;			u.Set("domainid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["networkids"]; found {
0000000000000000000000000000000000000000;;			vv := strings.Join(v.([]string), ",")
0000000000000000000000000000000000000000;;			u.Set("networkids", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["securitygroupids"]; found {
0000000000000000000000000000000000000000;;			vv := strings.Join(v.([]string), ",")
0000000000000000000000000000000000000000;;			u.Set("securitygroupids", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["virtualmachineid"]; found {
0000000000000000000000000000000000000000;;			u.Set("virtualmachineid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AssignVirtualMachineParams) SetAccount(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["account"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AssignVirtualMachineParams) SetDomainid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["domainid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AssignVirtualMachineParams) SetNetworkids(v []string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["networkids"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AssignVirtualMachineParams) SetSecuritygroupids(v []string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["securitygroupids"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AssignVirtualMachineParams) SetVirtualmachineid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["virtualmachineid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new AssignVirtualMachineParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VirtualMachineService) NewAssignVirtualMachineParams(account string, domainid string, virtualmachineid string) *AssignVirtualMachineParams {
0000000000000000000000000000000000000000;;		p := &AssignVirtualMachineParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["account"] = account
0000000000000000000000000000000000000000;;		p.p["domainid"] = domainid
0000000000000000000000000000000000000000;;		p.p["virtualmachineid"] = virtualmachineid
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Change ownership of a VM from one account to another. This API is available for Basic zones with security groups and Advanced zones with guest networks. A root administrator can reassign a VM from any account to any other account in any domain. A domain administrator can reassign a VM to any account in the same domain.
0000000000000000000000000000000000000000;;	func (s *VirtualMachineService) AssignVirtualMachine(p *AssignVirtualMachineParams) (*AssignVirtualMachineResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("assignVirtualMachine", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r AssignVirtualMachineResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AssignVirtualMachineResponse struct {
0000000000000000000000000000000000000000;;		Account       string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Affinitygroup []struct {
0000000000000000000000000000000000000000;;			Account           string   `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Description       string   `json:"description,omitempty"`
0000000000000000000000000000000000000000;;			Domain            string   `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid          string   `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Id                string   `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Name              string   `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Project           string   `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid         string   `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Type              string   `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			VirtualmachineIds []string `json:"virtualmachineIds,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"affinitygroup,omitempty"`
0000000000000000000000000000000000000000;;		Cpunumber             int               `json:"cpunumber,omitempty"`
0000000000000000000000000000000000000000;;		Cpuspeed              int               `json:"cpuspeed,omitempty"`
0000000000000000000000000000000000000000;;		Cpuused               string            `json:"cpuused,omitempty"`
0000000000000000000000000000000000000000;;		Created               string            `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Details               map[string]string `json:"details,omitempty"`
0000000000000000000000000000000000000000;;		Diskioread            int64             `json:"diskioread,omitempty"`
0000000000000000000000000000000000000000;;		Diskiowrite           int64             `json:"diskiowrite,omitempty"`
0000000000000000000000000000000000000000;;		Diskkbsread           int64             `json:"diskkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Diskkbswrite          int64             `json:"diskkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingid        string            `json:"diskofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingname      string            `json:"diskofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Displayname           string            `json:"displayname,omitempty"`
0000000000000000000000000000000000000000;;		Displayvm             bool              `json:"displayvm,omitempty"`
0000000000000000000000000000000000000000;;		Domain                string            `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid              string            `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Forvirtualnetwork     bool              `json:"forvirtualnetwork,omitempty"`
0000000000000000000000000000000000000000;;		Group                 string            `json:"group,omitempty"`
0000000000000000000000000000000000000000;;		Groupid               string            `json:"groupid,omitempty"`
0000000000000000000000000000000000000000;;		Guestosid             string            `json:"guestosid,omitempty"`
0000000000000000000000000000000000000000;;		Haenable              bool              `json:"haenable,omitempty"`
0000000000000000000000000000000000000000;;		Hostid                string            `json:"hostid,omitempty"`
0000000000000000000000000000000000000000;;		Hostname              string            `json:"hostname,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor            string            `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Id                    string            `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Instancename          string            `json:"instancename,omitempty"`
0000000000000000000000000000000000000000;;		Isdynamicallyscalable bool              `json:"isdynamicallyscalable,omitempty"`
0000000000000000000000000000000000000000;;		Isodisplaytext        string            `json:"isodisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Isoid                 string            `json:"isoid,omitempty"`
0000000000000000000000000000000000000000;;		Isoname               string            `json:"isoname,omitempty"`
0000000000000000000000000000000000000000;;		Keypair               string            `json:"keypair,omitempty"`
0000000000000000000000000000000000000000;;		Memory                int               `json:"memory,omitempty"`
0000000000000000000000000000000000000000;;		Name                  string            `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbsread        int64             `json:"networkkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbswrite       int64             `json:"networkkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Nic                   []struct {
0000000000000000000000000000000000000000;;			Broadcasturi string `json:"broadcasturi,omitempty"`
0000000000000000000000000000000000000000;;			Deviceid     string `json:"deviceid,omitempty"`
0000000000000000000000000000000000000000;;			Gateway      string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;			Id           string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ip6address   string `json:"ip6address,omitempty"`
0000000000000000000000000000000000000000;;			Ip6cidr      string `json:"ip6cidr,omitempty"`
0000000000000000000000000000000000000000;;			Ip6gateway   string `json:"ip6gateway,omitempty"`
0000000000000000000000000000000000000000;;			Ipaddress    string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			Isdefault    bool   `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;			Isolationuri string `json:"isolationuri,omitempty"`
0000000000000000000000000000000000000000;;			Macaddress   string `json:"macaddress,omitempty"`
0000000000000000000000000000000000000000;;			Netmask      string `json:"netmask,omitempty"`
0000000000000000000000000000000000000000;;			Networkid    string `json:"networkid,omitempty"`
0000000000000000000000000000000000000000;;			Networkname  string `json:"networkname,omitempty"`
0000000000000000000000000000000000000000;;			Secondaryip  []struct {
0000000000000000000000000000000000000000;;				Id        string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;				Ipaddress string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"secondaryip,omitempty"`
0000000000000000000000000000000000000000;;			Traffictype      string `json:"traffictype,omitempty"`
0000000000000000000000000000000000000000;;			Type             string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachineid string `json:"virtualmachineid,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"nic,omitempty"`
0000000000000000000000000000000000000000;;		Ostypeid        int64  `json:"ostypeid,omitempty"`
0000000000000000000000000000000000000000;;		Password        string `json:"password,omitempty"`
0000000000000000000000000000000000000000;;		Passwordenabled bool   `json:"passwordenabled,omitempty"`
0000000000000000000000000000000000000000;;		Project         string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid       string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;		Publicip        string `json:"publicip,omitempty"`
0000000000000000000000000000000000000000;;		Publicipid      string `json:"publicipid,omitempty"`
0000000000000000000000000000000000000000;;		Rootdeviceid    int64  `json:"rootdeviceid,omitempty"`
0000000000000000000000000000000000000000;;		Rootdevicetype  string `json:"rootdevicetype,omitempty"`
0000000000000000000000000000000000000000;;		Securitygroup   []struct {
0000000000000000000000000000000000000000;;			Account     string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Description string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;			Domain      string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid    string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Egressrule  []struct {
0000000000000000000000000000000000000000;;				Account           string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Cidr              string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;				Endport           int    `json:"endport,omitempty"`
0000000000000000000000000000000000000000;;				Icmpcode          int    `json:"icmpcode,omitempty"`
0000000000000000000000000000000000000000;;				Icmptype          int    `json:"icmptype,omitempty"`
0000000000000000000000000000000000000000;;				Protocol          string `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;				Ruleid            string `json:"ruleid,omitempty"`
0000000000000000000000000000000000000000;;				Securitygroupname string `json:"securitygroupname,omitempty"`
0000000000000000000000000000000000000000;;				Startport         int    `json:"startport,omitempty"`
0000000000000000000000000000000000000000;;				Tags              []struct {
0000000000000000000000000000000000000000;;					Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;					Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;					Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;					Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;					Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;					Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;					Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;					Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;					Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;					Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"egressrule,omitempty"`
0000000000000000000000000000000000000000;;			Id          string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ingressrule []struct {
0000000000000000000000000000000000000000;;				Account           string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Cidr              string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;				Endport           int    `json:"endport,omitempty"`
0000000000000000000000000000000000000000;;				Icmpcode          int    `json:"icmpcode,omitempty"`
0000000000000000000000000000000000000000;;				Icmptype          int    `json:"icmptype,omitempty"`
0000000000000000000000000000000000000000;;				Protocol          string `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;				Ruleid            string `json:"ruleid,omitempty"`
0000000000000000000000000000000000000000;;				Securitygroupname string `json:"securitygroupname,omitempty"`
0000000000000000000000000000000000000000;;				Startport         int    `json:"startport,omitempty"`
0000000000000000000000000000000000000000;;				Tags              []struct {
0000000000000000000000000000000000000000;;					Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;					Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;					Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;					Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;					Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;					Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;					Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;					Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;					Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;					Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"ingressrule,omitempty"`
0000000000000000000000000000000000000000;;			Name      string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Project   string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Tags      []struct {
0000000000000000000000000000000000000000;;				Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;				Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;				Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;				Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;				Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;				Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;				Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;				Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;				Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachinecount int      `json:"virtualmachinecount,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachineids   []string `json:"virtualmachineids,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"securitygroup,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingid   string `json:"serviceofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingname string `json:"serviceofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Servicestate        string `json:"servicestate,omitempty"`
0000000000000000000000000000000000000000;;		State               string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Tags                []struct {
0000000000000000000000000000000000000000;;			Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;			Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;			Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;			Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;			Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Templatedisplaytext string `json:"templatedisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Templateid          string `json:"templateid,omitempty"`
0000000000000000000000000000000000000000;;		Templatename        string `json:"templatename,omitempty"`
0000000000000000000000000000000000000000;;		Userid              string `json:"userid,omitempty"`
0000000000000000000000000000000000000000;;		Username            string `json:"username,omitempty"`
0000000000000000000000000000000000000000;;		Vgpu                string `json:"vgpu,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid              string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename            string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MigrateVirtualMachineParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *MigrateVirtualMachineParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["hostid"]; found {
0000000000000000000000000000000000000000;;			u.Set("hostid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["storageid"]; found {
0000000000000000000000000000000000000000;;			u.Set("storageid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["virtualmachineid"]; found {
0000000000000000000000000000000000000000;;			u.Set("virtualmachineid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *MigrateVirtualMachineParams) SetHostid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["hostid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *MigrateVirtualMachineParams) SetStorageid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["storageid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *MigrateVirtualMachineParams) SetVirtualmachineid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["virtualmachineid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new MigrateVirtualMachineParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VirtualMachineService) NewMigrateVirtualMachineParams(virtualmachineid string) *MigrateVirtualMachineParams {
0000000000000000000000000000000000000000;;		p := &MigrateVirtualMachineParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["virtualmachineid"] = virtualmachineid
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Attempts Migration of a VM to a different host or Root volume of the vm to a different storage pool
0000000000000000000000000000000000000000;;	func (s *VirtualMachineService) MigrateVirtualMachine(p *MigrateVirtualMachineParams) (*MigrateVirtualMachineResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("migrateVirtualMachine", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r MigrateVirtualMachineResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MigrateVirtualMachineResponse struct {
0000000000000000000000000000000000000000;;		JobID         string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Account       string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Affinitygroup []struct {
0000000000000000000000000000000000000000;;			Account           string   `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Description       string   `json:"description,omitempty"`
0000000000000000000000000000000000000000;;			Domain            string   `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid          string   `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Id                string   `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Name              string   `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Project           string   `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid         string   `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Type              string   `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			VirtualmachineIds []string `json:"virtualmachineIds,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"affinitygroup,omitempty"`
0000000000000000000000000000000000000000;;		Cpunumber             int               `json:"cpunumber,omitempty"`
0000000000000000000000000000000000000000;;		Cpuspeed              int               `json:"cpuspeed,omitempty"`
0000000000000000000000000000000000000000;;		Cpuused               string            `json:"cpuused,omitempty"`
0000000000000000000000000000000000000000;;		Created               string            `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Details               map[string]string `json:"details,omitempty"`
0000000000000000000000000000000000000000;;		Diskioread            int64             `json:"diskioread,omitempty"`
0000000000000000000000000000000000000000;;		Diskiowrite           int64             `json:"diskiowrite,omitempty"`
0000000000000000000000000000000000000000;;		Diskkbsread           int64             `json:"diskkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Diskkbswrite          int64             `json:"diskkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingid        string            `json:"diskofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingname      string            `json:"diskofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Displayname           string            `json:"displayname,omitempty"`
0000000000000000000000000000000000000000;;		Displayvm             bool              `json:"displayvm,omitempty"`
0000000000000000000000000000000000000000;;		Domain                string            `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid              string            `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Forvirtualnetwork     bool              `json:"forvirtualnetwork,omitempty"`
0000000000000000000000000000000000000000;;		Group                 string            `json:"group,omitempty"`
0000000000000000000000000000000000000000;;		Groupid               string            `json:"groupid,omitempty"`
0000000000000000000000000000000000000000;;		Guestosid             string            `json:"guestosid,omitempty"`
0000000000000000000000000000000000000000;;		Haenable              bool              `json:"haenable,omitempty"`
0000000000000000000000000000000000000000;;		Hostid                string            `json:"hostid,omitempty"`
0000000000000000000000000000000000000000;;		Hostname              string            `json:"hostname,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor            string            `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Id                    string            `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Instancename          string            `json:"instancename,omitempty"`
0000000000000000000000000000000000000000;;		Isdynamicallyscalable bool              `json:"isdynamicallyscalable,omitempty"`
0000000000000000000000000000000000000000;;		Isodisplaytext        string            `json:"isodisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Isoid                 string            `json:"isoid,omitempty"`
0000000000000000000000000000000000000000;;		Isoname               string            `json:"isoname,omitempty"`
0000000000000000000000000000000000000000;;		Keypair               string            `json:"keypair,omitempty"`
0000000000000000000000000000000000000000;;		Memory                int               `json:"memory,omitempty"`
0000000000000000000000000000000000000000;;		Name                  string            `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbsread        int64             `json:"networkkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbswrite       int64             `json:"networkkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Nic                   []struct {
0000000000000000000000000000000000000000;;			Broadcasturi string `json:"broadcasturi,omitempty"`
0000000000000000000000000000000000000000;;			Deviceid     string `json:"deviceid,omitempty"`
0000000000000000000000000000000000000000;;			Gateway      string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;			Id           string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ip6address   string `json:"ip6address,omitempty"`
0000000000000000000000000000000000000000;;			Ip6cidr      string `json:"ip6cidr,omitempty"`
0000000000000000000000000000000000000000;;			Ip6gateway   string `json:"ip6gateway,omitempty"`
0000000000000000000000000000000000000000;;			Ipaddress    string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			Isdefault    bool   `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;			Isolationuri string `json:"isolationuri,omitempty"`
0000000000000000000000000000000000000000;;			Macaddress   string `json:"macaddress,omitempty"`
0000000000000000000000000000000000000000;;			Netmask      string `json:"netmask,omitempty"`
0000000000000000000000000000000000000000;;			Networkid    string `json:"networkid,omitempty"`
0000000000000000000000000000000000000000;;			Networkname  string `json:"networkname,omitempty"`
0000000000000000000000000000000000000000;;			Secondaryip  []struct {
0000000000000000000000000000000000000000;;				Id        string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;				Ipaddress string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"secondaryip,omitempty"`
0000000000000000000000000000000000000000;;			Traffictype      string `json:"traffictype,omitempty"`
0000000000000000000000000000000000000000;;			Type             string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachineid string `json:"virtualmachineid,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"nic,omitempty"`
0000000000000000000000000000000000000000;;		Ostypeid        int64  `json:"ostypeid,omitempty"`
0000000000000000000000000000000000000000;;		Password        string `json:"password,omitempty"`
0000000000000000000000000000000000000000;;		Passwordenabled bool   `json:"passwordenabled,omitempty"`
0000000000000000000000000000000000000000;;		Project         string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid       string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;		Publicip        string `json:"publicip,omitempty"`
0000000000000000000000000000000000000000;;		Publicipid      string `json:"publicipid,omitempty"`
0000000000000000000000000000000000000000;;		Rootdeviceid    int64  `json:"rootdeviceid,omitempty"`
0000000000000000000000000000000000000000;;		Rootdevicetype  string `json:"rootdevicetype,omitempty"`
0000000000000000000000000000000000000000;;		Securitygroup   []struct {
0000000000000000000000000000000000000000;;			Account     string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Description string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;			Domain      string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid    string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Egressrule  []struct {
0000000000000000000000000000000000000000;;				Account           string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Cidr              string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;				Endport           int    `json:"endport,omitempty"`
0000000000000000000000000000000000000000;;				Icmpcode          int    `json:"icmpcode,omitempty"`
0000000000000000000000000000000000000000;;				Icmptype          int    `json:"icmptype,omitempty"`
0000000000000000000000000000000000000000;;				Protocol          string `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;				Ruleid            string `json:"ruleid,omitempty"`
0000000000000000000000000000000000000000;;				Securitygroupname string `json:"securitygroupname,omitempty"`
0000000000000000000000000000000000000000;;				Startport         int    `json:"startport,omitempty"`
0000000000000000000000000000000000000000;;				Tags              []struct {
0000000000000000000000000000000000000000;;					Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;					Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;					Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;					Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;					Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;					Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;					Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;					Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;					Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;					Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"egressrule,omitempty"`
0000000000000000000000000000000000000000;;			Id          string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ingressrule []struct {
0000000000000000000000000000000000000000;;				Account           string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Cidr              string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;				Endport           int    `json:"endport,omitempty"`
0000000000000000000000000000000000000000;;				Icmpcode          int    `json:"icmpcode,omitempty"`
0000000000000000000000000000000000000000;;				Icmptype          int    `json:"icmptype,omitempty"`
0000000000000000000000000000000000000000;;				Protocol          string `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;				Ruleid            string `json:"ruleid,omitempty"`
0000000000000000000000000000000000000000;;				Securitygroupname string `json:"securitygroupname,omitempty"`
0000000000000000000000000000000000000000;;				Startport         int    `json:"startport,omitempty"`
0000000000000000000000000000000000000000;;				Tags              []struct {
0000000000000000000000000000000000000000;;					Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;					Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;					Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;					Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;					Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;					Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;					Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;					Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;					Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;					Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"ingressrule,omitempty"`
0000000000000000000000000000000000000000;;			Name      string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Project   string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Tags      []struct {
0000000000000000000000000000000000000000;;				Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;				Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;				Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;				Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;				Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;				Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;				Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;				Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;				Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachinecount int      `json:"virtualmachinecount,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachineids   []string `json:"virtualmachineids,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"securitygroup,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingid   string `json:"serviceofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingname string `json:"serviceofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Servicestate        string `json:"servicestate,omitempty"`
0000000000000000000000000000000000000000;;		State               string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Tags                []struct {
0000000000000000000000000000000000000000;;			Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;			Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;			Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;			Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;			Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Templatedisplaytext string `json:"templatedisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Templateid          string `json:"templateid,omitempty"`
0000000000000000000000000000000000000000;;		Templatename        string `json:"templatename,omitempty"`
0000000000000000000000000000000000000000;;		Userid              string `json:"userid,omitempty"`
0000000000000000000000000000000000000000;;		Username            string `json:"username,omitempty"`
0000000000000000000000000000000000000000;;		Vgpu                string `json:"vgpu,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid              string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename            string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MigrateVirtualMachineWithVolumeParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *MigrateVirtualMachineWithVolumeParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["hostid"]; found {
0000000000000000000000000000000000000000;;			u.Set("hostid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["migrateto"]; found {
0000000000000000000000000000000000000000;;			i := 0
0000000000000000000000000000000000000000;;			for k, vv := range v.(map[string]string) {
0000000000000000000000000000000000000000;;				u.Set(fmt.Sprintf("migrateto[%d].key", i), k)
0000000000000000000000000000000000000000;;				u.Set(fmt.Sprintf("migrateto[%d].value", i), vv)
0000000000000000000000000000000000000000;;				i++
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["virtualmachineid"]; found {
0000000000000000000000000000000000000000;;			u.Set("virtualmachineid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *MigrateVirtualMachineWithVolumeParams) SetHostid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["hostid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *MigrateVirtualMachineWithVolumeParams) SetMigrateto(v map[string]string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["migrateto"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *MigrateVirtualMachineWithVolumeParams) SetVirtualmachineid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["virtualmachineid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new MigrateVirtualMachineWithVolumeParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VirtualMachineService) NewMigrateVirtualMachineWithVolumeParams(hostid string, virtualmachineid string) *MigrateVirtualMachineWithVolumeParams {
0000000000000000000000000000000000000000;;		p := &MigrateVirtualMachineWithVolumeParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["hostid"] = hostid
0000000000000000000000000000000000000000;;		p.p["virtualmachineid"] = virtualmachineid
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Attempts Migration of a VM with its volumes to a different host
0000000000000000000000000000000000000000;;	func (s *VirtualMachineService) MigrateVirtualMachineWithVolume(p *MigrateVirtualMachineWithVolumeParams) (*MigrateVirtualMachineWithVolumeResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("migrateVirtualMachineWithVolume", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r MigrateVirtualMachineWithVolumeResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MigrateVirtualMachineWithVolumeResponse struct {
0000000000000000000000000000000000000000;;		JobID         string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Account       string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Affinitygroup []struct {
0000000000000000000000000000000000000000;;			Account           string   `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Description       string   `json:"description,omitempty"`
0000000000000000000000000000000000000000;;			Domain            string   `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid          string   `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Id                string   `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Name              string   `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Project           string   `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid         string   `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Type              string   `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			VirtualmachineIds []string `json:"virtualmachineIds,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"affinitygroup,omitempty"`
0000000000000000000000000000000000000000;;		Cpunumber             int               `json:"cpunumber,omitempty"`
0000000000000000000000000000000000000000;;		Cpuspeed              int               `json:"cpuspeed,omitempty"`
0000000000000000000000000000000000000000;;		Cpuused               string            `json:"cpuused,omitempty"`
0000000000000000000000000000000000000000;;		Created               string            `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Details               map[string]string `json:"details,omitempty"`
0000000000000000000000000000000000000000;;		Diskioread            int64             `json:"diskioread,omitempty"`
0000000000000000000000000000000000000000;;		Diskiowrite           int64             `json:"diskiowrite,omitempty"`
0000000000000000000000000000000000000000;;		Diskkbsread           int64             `json:"diskkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Diskkbswrite          int64             `json:"diskkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingid        string            `json:"diskofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingname      string            `json:"diskofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Displayname           string            `json:"displayname,omitempty"`
0000000000000000000000000000000000000000;;		Displayvm             bool              `json:"displayvm,omitempty"`
0000000000000000000000000000000000000000;;		Domain                string            `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid              string            `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Forvirtualnetwork     bool              `json:"forvirtualnetwork,omitempty"`
0000000000000000000000000000000000000000;;		Group                 string            `json:"group,omitempty"`
0000000000000000000000000000000000000000;;		Groupid               string            `json:"groupid,omitempty"`
0000000000000000000000000000000000000000;;		Guestosid             string            `json:"guestosid,omitempty"`
0000000000000000000000000000000000000000;;		Haenable              bool              `json:"haenable,omitempty"`
0000000000000000000000000000000000000000;;		Hostid                string            `json:"hostid,omitempty"`
0000000000000000000000000000000000000000;;		Hostname              string            `json:"hostname,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor            string            `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Id                    string            `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Instancename          string            `json:"instancename,omitempty"`
0000000000000000000000000000000000000000;;		Isdynamicallyscalable bool              `json:"isdynamicallyscalable,omitempty"`
0000000000000000000000000000000000000000;;		Isodisplaytext        string            `json:"isodisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Isoid                 string            `json:"isoid,omitempty"`
0000000000000000000000000000000000000000;;		Isoname               string            `json:"isoname,omitempty"`
0000000000000000000000000000000000000000;;		Keypair               string            `json:"keypair,omitempty"`
0000000000000000000000000000000000000000;;		Memory                int               `json:"memory,omitempty"`
0000000000000000000000000000000000000000;;		Name                  string            `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbsread        int64             `json:"networkkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbswrite       int64             `json:"networkkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Nic                   []struct {
0000000000000000000000000000000000000000;;			Broadcasturi string `json:"broadcasturi,omitempty"`
0000000000000000000000000000000000000000;;			Deviceid     string `json:"deviceid,omitempty"`
0000000000000000000000000000000000000000;;			Gateway      string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;			Id           string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ip6address   string `json:"ip6address,omitempty"`
0000000000000000000000000000000000000000;;			Ip6cidr      string `json:"ip6cidr,omitempty"`
0000000000000000000000000000000000000000;;			Ip6gateway   string `json:"ip6gateway,omitempty"`
0000000000000000000000000000000000000000;;			Ipaddress    string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			Isdefault    bool   `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;			Isolationuri string `json:"isolationuri,omitempty"`
0000000000000000000000000000000000000000;;			Macaddress   string `json:"macaddress,omitempty"`
0000000000000000000000000000000000000000;;			Netmask      string `json:"netmask,omitempty"`
0000000000000000000000000000000000000000;;			Networkid    string `json:"networkid,omitempty"`
0000000000000000000000000000000000000000;;			Networkname  string `json:"networkname,omitempty"`
0000000000000000000000000000000000000000;;			Secondaryip  []struct {
0000000000000000000000000000000000000000;;				Id        string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;				Ipaddress string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"secondaryip,omitempty"`
0000000000000000000000000000000000000000;;			Traffictype      string `json:"traffictype,omitempty"`
0000000000000000000000000000000000000000;;			Type             string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachineid string `json:"virtualmachineid,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"nic,omitempty"`
0000000000000000000000000000000000000000;;		Ostypeid        int64  `json:"ostypeid,omitempty"`
0000000000000000000000000000000000000000;;		Password        string `json:"password,omitempty"`
0000000000000000000000000000000000000000;;		Passwordenabled bool   `json:"passwordenabled,omitempty"`
0000000000000000000000000000000000000000;;		Project         string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid       string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;		Publicip        string `json:"publicip,omitempty"`
0000000000000000000000000000000000000000;;		Publicipid      string `json:"publicipid,omitempty"`
0000000000000000000000000000000000000000;;		Rootdeviceid    int64  `json:"rootdeviceid,omitempty"`
0000000000000000000000000000000000000000;;		Rootdevicetype  string `json:"rootdevicetype,omitempty"`
0000000000000000000000000000000000000000;;		Securitygroup   []struct {
0000000000000000000000000000000000000000;;			Account     string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Description string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;			Domain      string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid    string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Egressrule  []struct {
0000000000000000000000000000000000000000;;				Account           string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Cidr              string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;				Endport           int    `json:"endport,omitempty"`
0000000000000000000000000000000000000000;;				Icmpcode          int    `json:"icmpcode,omitempty"`
0000000000000000000000000000000000000000;;				Icmptype          int    `json:"icmptype,omitempty"`
0000000000000000000000000000000000000000;;				Protocol          string `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;				Ruleid            string `json:"ruleid,omitempty"`
0000000000000000000000000000000000000000;;				Securitygroupname string `json:"securitygroupname,omitempty"`
0000000000000000000000000000000000000000;;				Startport         int    `json:"startport,omitempty"`
0000000000000000000000000000000000000000;;				Tags              []struct {
0000000000000000000000000000000000000000;;					Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;					Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;					Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;					Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;					Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;					Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;					Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;					Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;					Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;					Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"egressrule,omitempty"`
0000000000000000000000000000000000000000;;			Id          string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ingressrule []struct {
0000000000000000000000000000000000000000;;				Account           string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Cidr              string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;				Endport           int    `json:"endport,omitempty"`
0000000000000000000000000000000000000000;;				Icmpcode          int    `json:"icmpcode,omitempty"`
0000000000000000000000000000000000000000;;				Icmptype          int    `json:"icmptype,omitempty"`
0000000000000000000000000000000000000000;;				Protocol          string `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;				Ruleid            string `json:"ruleid,omitempty"`
0000000000000000000000000000000000000000;;				Securitygroupname string `json:"securitygroupname,omitempty"`
0000000000000000000000000000000000000000;;				Startport         int    `json:"startport,omitempty"`
0000000000000000000000000000000000000000;;				Tags              []struct {
0000000000000000000000000000000000000000;;					Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;					Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;					Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;					Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;					Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;					Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;					Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;					Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;					Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;					Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"ingressrule,omitempty"`
0000000000000000000000000000000000000000;;			Name      string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Project   string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Tags      []struct {
0000000000000000000000000000000000000000;;				Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;				Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;				Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;				Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;				Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;				Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;				Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;				Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;				Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachinecount int      `json:"virtualmachinecount,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachineids   []string `json:"virtualmachineids,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"securitygroup,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingid   string `json:"serviceofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingname string `json:"serviceofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Servicestate        string `json:"servicestate,omitempty"`
0000000000000000000000000000000000000000;;		State               string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Tags                []struct {
0000000000000000000000000000000000000000;;			Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;			Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;			Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;			Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;			Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Templatedisplaytext string `json:"templatedisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Templateid          string `json:"templateid,omitempty"`
0000000000000000000000000000000000000000;;		Templatename        string `json:"templatename,omitempty"`
0000000000000000000000000000000000000000;;		Userid              string `json:"userid,omitempty"`
0000000000000000000000000000000000000000;;		Username            string `json:"username,omitempty"`
0000000000000000000000000000000000000000;;		Vgpu                string `json:"vgpu,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid              string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename            string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RecoverVirtualMachineParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *RecoverVirtualMachineParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *RecoverVirtualMachineParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new RecoverVirtualMachineParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VirtualMachineService) NewRecoverVirtualMachineParams(id string) *RecoverVirtualMachineParams {
0000000000000000000000000000000000000000;;		p := &RecoverVirtualMachineParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Recovers a virtual machine.
0000000000000000000000000000000000000000;;	func (s *VirtualMachineService) RecoverVirtualMachine(p *RecoverVirtualMachineParams) (*RecoverVirtualMachineResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("recoverVirtualMachine", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r RecoverVirtualMachineResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RecoverVirtualMachineResponse struct {
0000000000000000000000000000000000000000;;		Account       string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Affinitygroup []struct {
0000000000000000000000000000000000000000;;			Account           string   `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Description       string   `json:"description,omitempty"`
0000000000000000000000000000000000000000;;			Domain            string   `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid          string   `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Id                string   `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Name              string   `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Project           string   `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid         string   `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Type              string   `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			VirtualmachineIds []string `json:"virtualmachineIds,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"affinitygroup,omitempty"`
0000000000000000000000000000000000000000;;		Cpunumber             int               `json:"cpunumber,omitempty"`
0000000000000000000000000000000000000000;;		Cpuspeed              int               `json:"cpuspeed,omitempty"`
0000000000000000000000000000000000000000;;		Cpuused               string            `json:"cpuused,omitempty"`
0000000000000000000000000000000000000000;;		Created               string            `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Details               map[string]string `json:"details,omitempty"`
0000000000000000000000000000000000000000;;		Diskioread            int64             `json:"diskioread,omitempty"`
0000000000000000000000000000000000000000;;		Diskiowrite           int64             `json:"diskiowrite,omitempty"`
0000000000000000000000000000000000000000;;		Diskkbsread           int64             `json:"diskkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Diskkbswrite          int64             `json:"diskkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingid        string            `json:"diskofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingname      string            `json:"diskofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Displayname           string            `json:"displayname,omitempty"`
0000000000000000000000000000000000000000;;		Displayvm             bool              `json:"displayvm,omitempty"`
0000000000000000000000000000000000000000;;		Domain                string            `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid              string            `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Forvirtualnetwork     bool              `json:"forvirtualnetwork,omitempty"`
0000000000000000000000000000000000000000;;		Group                 string            `json:"group,omitempty"`
0000000000000000000000000000000000000000;;		Groupid               string            `json:"groupid,omitempty"`
0000000000000000000000000000000000000000;;		Guestosid             string            `json:"guestosid,omitempty"`
0000000000000000000000000000000000000000;;		Haenable              bool              `json:"haenable,omitempty"`
0000000000000000000000000000000000000000;;		Hostid                string            `json:"hostid,omitempty"`
0000000000000000000000000000000000000000;;		Hostname              string            `json:"hostname,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor            string            `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Id                    string            `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Instancename          string            `json:"instancename,omitempty"`
0000000000000000000000000000000000000000;;		Isdynamicallyscalable bool              `json:"isdynamicallyscalable,omitempty"`
0000000000000000000000000000000000000000;;		Isodisplaytext        string            `json:"isodisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Isoid                 string            `json:"isoid,omitempty"`
0000000000000000000000000000000000000000;;		Isoname               string            `json:"isoname,omitempty"`
0000000000000000000000000000000000000000;;		Keypair               string            `json:"keypair,omitempty"`
0000000000000000000000000000000000000000;;		Memory                int               `json:"memory,omitempty"`
0000000000000000000000000000000000000000;;		Name                  string            `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbsread        int64             `json:"networkkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbswrite       int64             `json:"networkkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Nic                   []struct {
0000000000000000000000000000000000000000;;			Broadcasturi string `json:"broadcasturi,omitempty"`
0000000000000000000000000000000000000000;;			Deviceid     string `json:"deviceid,omitempty"`
0000000000000000000000000000000000000000;;			Gateway      string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;			Id           string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ip6address   string `json:"ip6address,omitempty"`
0000000000000000000000000000000000000000;;			Ip6cidr      string `json:"ip6cidr,omitempty"`
0000000000000000000000000000000000000000;;			Ip6gateway   string `json:"ip6gateway,omitempty"`
0000000000000000000000000000000000000000;;			Ipaddress    string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			Isdefault    bool   `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;			Isolationuri string `json:"isolationuri,omitempty"`
0000000000000000000000000000000000000000;;			Macaddress   string `json:"macaddress,omitempty"`
0000000000000000000000000000000000000000;;			Netmask      string `json:"netmask,omitempty"`
0000000000000000000000000000000000000000;;			Networkid    string `json:"networkid,omitempty"`
0000000000000000000000000000000000000000;;			Networkname  string `json:"networkname,omitempty"`
0000000000000000000000000000000000000000;;			Secondaryip  []struct {
0000000000000000000000000000000000000000;;				Id        string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;				Ipaddress string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"secondaryip,omitempty"`
0000000000000000000000000000000000000000;;			Traffictype      string `json:"traffictype,omitempty"`
0000000000000000000000000000000000000000;;			Type             string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachineid string `json:"virtualmachineid,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"nic,omitempty"`
0000000000000000000000000000000000000000;;		Ostypeid        int64  `json:"ostypeid,omitempty"`
0000000000000000000000000000000000000000;;		Password        string `json:"password,omitempty"`
0000000000000000000000000000000000000000;;		Passwordenabled bool   `json:"passwordenabled,omitempty"`
0000000000000000000000000000000000000000;;		Project         string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid       string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;		Publicip        string `json:"publicip,omitempty"`
0000000000000000000000000000000000000000;;		Publicipid      string `json:"publicipid,omitempty"`
0000000000000000000000000000000000000000;;		Rootdeviceid    int64  `json:"rootdeviceid,omitempty"`
0000000000000000000000000000000000000000;;		Rootdevicetype  string `json:"rootdevicetype,omitempty"`
0000000000000000000000000000000000000000;;		Securitygroup   []struct {
0000000000000000000000000000000000000000;;			Account     string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Description string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;			Domain      string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid    string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Egressrule  []struct {
0000000000000000000000000000000000000000;;				Account           string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Cidr              string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;				Endport           int    `json:"endport,omitempty"`
0000000000000000000000000000000000000000;;				Icmpcode          int    `json:"icmpcode,omitempty"`
0000000000000000000000000000000000000000;;				Icmptype          int    `json:"icmptype,omitempty"`
0000000000000000000000000000000000000000;;				Protocol          string `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;				Ruleid            string `json:"ruleid,omitempty"`
0000000000000000000000000000000000000000;;				Securitygroupname string `json:"securitygroupname,omitempty"`
0000000000000000000000000000000000000000;;				Startport         int    `json:"startport,omitempty"`
0000000000000000000000000000000000000000;;				Tags              []struct {
0000000000000000000000000000000000000000;;					Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;					Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;					Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;					Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;					Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;					Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;					Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;					Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;					Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;					Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"egressrule,omitempty"`
0000000000000000000000000000000000000000;;			Id          string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ingressrule []struct {
0000000000000000000000000000000000000000;;				Account           string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Cidr              string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;				Endport           int    `json:"endport,omitempty"`
0000000000000000000000000000000000000000;;				Icmpcode          int    `json:"icmpcode,omitempty"`
0000000000000000000000000000000000000000;;				Icmptype          int    `json:"icmptype,omitempty"`
0000000000000000000000000000000000000000;;				Protocol          string `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;				Ruleid            string `json:"ruleid,omitempty"`
0000000000000000000000000000000000000000;;				Securitygroupname string `json:"securitygroupname,omitempty"`
0000000000000000000000000000000000000000;;				Startport         int    `json:"startport,omitempty"`
0000000000000000000000000000000000000000;;				Tags              []struct {
0000000000000000000000000000000000000000;;					Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;					Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;					Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;					Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;					Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;					Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;					Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;					Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;					Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;					Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"ingressrule,omitempty"`
0000000000000000000000000000000000000000;;			Name      string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Project   string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Tags      []struct {
0000000000000000000000000000000000000000;;				Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;				Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;				Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;				Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;				Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;				Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;				Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;				Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;				Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachinecount int      `json:"virtualmachinecount,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachineids   []string `json:"virtualmachineids,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"securitygroup,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingid   string `json:"serviceofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingname string `json:"serviceofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Servicestate        string `json:"servicestate,omitempty"`
0000000000000000000000000000000000000000;;		State               string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Tags                []struct {
0000000000000000000000000000000000000000;;			Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;			Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;			Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;			Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;			Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Templatedisplaytext string `json:"templatedisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Templateid          string `json:"templateid,omitempty"`
0000000000000000000000000000000000000000;;		Templatename        string `json:"templatename,omitempty"`
0000000000000000000000000000000000000000;;		Userid              string `json:"userid,omitempty"`
0000000000000000000000000000000000000000;;		Username            string `json:"username,omitempty"`
0000000000000000000000000000000000000000;;		Vgpu                string `json:"vgpu,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid              string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename            string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExpungeVirtualMachineParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ExpungeVirtualMachineParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ExpungeVirtualMachineParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new ExpungeVirtualMachineParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VirtualMachineService) NewExpungeVirtualMachineParams(id string) *ExpungeVirtualMachineParams {
0000000000000000000000000000000000000000;;		p := &ExpungeVirtualMachineParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Expunge a virtual machine. Once expunged, it cannot be recoverd.
0000000000000000000000000000000000000000;;	func (s *VirtualMachineService) ExpungeVirtualMachine(p *ExpungeVirtualMachineParams) (*ExpungeVirtualMachineResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("expungeVirtualMachine", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r ExpungeVirtualMachineResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExpungeVirtualMachineResponse struct {
0000000000000000000000000000000000000000;;		JobID       string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Displaytext string `json:"displaytext,omitempty"`
0000000000000000000000000000000000000000;;		Success     bool   `json:"success,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CleanVMReservationsParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CleanVMReservationsParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new CleanVMReservationsParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VirtualMachineService) NewCleanVMReservationsParams() *CleanVMReservationsParams {
0000000000000000000000000000000000000000;;		p := &CleanVMReservationsParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Cleanups VM reservations in the database.
0000000000000000000000000000000000000000;;	func (s *VirtualMachineService) CleanVMReservations(p *CleanVMReservationsParams) (*CleanVMReservationsResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("cleanVMReservations", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r CleanVMReservationsResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CleanVMReservationsResponse struct {
0000000000000000000000000000000000000000;;		JobID       string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Displaytext string `json:"displaytext,omitempty"`
0000000000000000000000000000000000000000;;		Success     bool   `json:"success,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddNicToVirtualMachineParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AddNicToVirtualMachineParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["ipaddress"]; found {
0000000000000000000000000000000000000000;;			u.Set("ipaddress", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["networkid"]; found {
0000000000000000000000000000000000000000;;			u.Set("networkid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["virtualmachineid"]; found {
0000000000000000000000000000000000000000;;			u.Set("virtualmachineid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AddNicToVirtualMachineParams) SetIpaddress(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["ipaddress"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AddNicToVirtualMachineParams) SetNetworkid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["networkid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AddNicToVirtualMachineParams) SetVirtualmachineid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["virtualmachineid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new AddNicToVirtualMachineParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VirtualMachineService) NewAddNicToVirtualMachineParams(networkid string, virtualmachineid string) *AddNicToVirtualMachineParams {
0000000000000000000000000000000000000000;;		p := &AddNicToVirtualMachineParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["networkid"] = networkid
0000000000000000000000000000000000000000;;		p.p["virtualmachineid"] = virtualmachineid
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Adds VM to specified network by creating a NIC
0000000000000000000000000000000000000000;;	func (s *VirtualMachineService) AddNicToVirtualMachine(p *AddNicToVirtualMachineParams) (*AddNicToVirtualMachineResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("addNicToVirtualMachine", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r AddNicToVirtualMachineResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddNicToVirtualMachineResponse struct {
0000000000000000000000000000000000000000;;		JobID         string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Account       string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Affinitygroup []struct {
0000000000000000000000000000000000000000;;			Account           string   `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Description       string   `json:"description,omitempty"`
0000000000000000000000000000000000000000;;			Domain            string   `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid          string   `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Id                string   `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Name              string   `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Project           string   `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid         string   `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Type              string   `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			VirtualmachineIds []string `json:"virtualmachineIds,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"affinitygroup,omitempty"`
0000000000000000000000000000000000000000;;		Cpunumber             int               `json:"cpunumber,omitempty"`
0000000000000000000000000000000000000000;;		Cpuspeed              int               `json:"cpuspeed,omitempty"`
0000000000000000000000000000000000000000;;		Cpuused               string            `json:"cpuused,omitempty"`
0000000000000000000000000000000000000000;;		Created               string            `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Details               map[string]string `json:"details,omitempty"`
0000000000000000000000000000000000000000;;		Diskioread            int64             `json:"diskioread,omitempty"`
0000000000000000000000000000000000000000;;		Diskiowrite           int64             `json:"diskiowrite,omitempty"`
0000000000000000000000000000000000000000;;		Diskkbsread           int64             `json:"diskkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Diskkbswrite          int64             `json:"diskkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingid        string            `json:"diskofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingname      string            `json:"diskofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Displayname           string            `json:"displayname,omitempty"`
0000000000000000000000000000000000000000;;		Displayvm             bool              `json:"displayvm,omitempty"`
0000000000000000000000000000000000000000;;		Domain                string            `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid              string            `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Forvirtualnetwork     bool              `json:"forvirtualnetwork,omitempty"`
0000000000000000000000000000000000000000;;		Group                 string            `json:"group,omitempty"`
0000000000000000000000000000000000000000;;		Groupid               string            `json:"groupid,omitempty"`
0000000000000000000000000000000000000000;;		Guestosid             string            `json:"guestosid,omitempty"`
0000000000000000000000000000000000000000;;		Haenable              bool              `json:"haenable,omitempty"`
0000000000000000000000000000000000000000;;		Hostid                string            `json:"hostid,omitempty"`
0000000000000000000000000000000000000000;;		Hostname              string            `json:"hostname,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor            string            `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Id                    string            `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Instancename          string            `json:"instancename,omitempty"`
0000000000000000000000000000000000000000;;		Isdynamicallyscalable bool              `json:"isdynamicallyscalable,omitempty"`
0000000000000000000000000000000000000000;;		Isodisplaytext        string            `json:"isodisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Isoid                 string            `json:"isoid,omitempty"`
0000000000000000000000000000000000000000;;		Isoname               string            `json:"isoname,omitempty"`
0000000000000000000000000000000000000000;;		Keypair               string            `json:"keypair,omitempty"`
0000000000000000000000000000000000000000;;		Memory                int               `json:"memory,omitempty"`
0000000000000000000000000000000000000000;;		Name                  string            `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbsread        int64             `json:"networkkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbswrite       int64             `json:"networkkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Nic                   []struct {
0000000000000000000000000000000000000000;;			Broadcasturi string `json:"broadcasturi,omitempty"`
0000000000000000000000000000000000000000;;			Deviceid     string `json:"deviceid,omitempty"`
0000000000000000000000000000000000000000;;			Gateway      string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;			Id           string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ip6address   string `json:"ip6address,omitempty"`
0000000000000000000000000000000000000000;;			Ip6cidr      string `json:"ip6cidr,omitempty"`
0000000000000000000000000000000000000000;;			Ip6gateway   string `json:"ip6gateway,omitempty"`
0000000000000000000000000000000000000000;;			Ipaddress    string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			Isdefault    bool   `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;			Isolationuri string `json:"isolationuri,omitempty"`
0000000000000000000000000000000000000000;;			Macaddress   string `json:"macaddress,omitempty"`
0000000000000000000000000000000000000000;;			Netmask      string `json:"netmask,omitempty"`
0000000000000000000000000000000000000000;;			Networkid    string `json:"networkid,omitempty"`
0000000000000000000000000000000000000000;;			Networkname  string `json:"networkname,omitempty"`
0000000000000000000000000000000000000000;;			Secondaryip  []struct {
0000000000000000000000000000000000000000;;				Id        string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;				Ipaddress string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"secondaryip,omitempty"`
0000000000000000000000000000000000000000;;			Traffictype      string `json:"traffictype,omitempty"`
0000000000000000000000000000000000000000;;			Type             string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachineid string `json:"virtualmachineid,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"nic,omitempty"`
0000000000000000000000000000000000000000;;		Ostypeid        int64  `json:"ostypeid,omitempty"`
0000000000000000000000000000000000000000;;		Password        string `json:"password,omitempty"`
0000000000000000000000000000000000000000;;		Passwordenabled bool   `json:"passwordenabled,omitempty"`
0000000000000000000000000000000000000000;;		Project         string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid       string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;		Publicip        string `json:"publicip,omitempty"`
0000000000000000000000000000000000000000;;		Publicipid      string `json:"publicipid,omitempty"`
0000000000000000000000000000000000000000;;		Rootdeviceid    int64  `json:"rootdeviceid,omitempty"`
0000000000000000000000000000000000000000;;		Rootdevicetype  string `json:"rootdevicetype,omitempty"`
0000000000000000000000000000000000000000;;		Securitygroup   []struct {
0000000000000000000000000000000000000000;;			Account     string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Description string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;			Domain      string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid    string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Egressrule  []struct {
0000000000000000000000000000000000000000;;				Account           string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Cidr              string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;				Endport           int    `json:"endport,omitempty"`
0000000000000000000000000000000000000000;;				Icmpcode          int    `json:"icmpcode,omitempty"`
0000000000000000000000000000000000000000;;				Icmptype          int    `json:"icmptype,omitempty"`
0000000000000000000000000000000000000000;;				Protocol          string `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;				Ruleid            string `json:"ruleid,omitempty"`
0000000000000000000000000000000000000000;;				Securitygroupname string `json:"securitygroupname,omitempty"`
0000000000000000000000000000000000000000;;				Startport         int    `json:"startport,omitempty"`
0000000000000000000000000000000000000000;;				Tags              []struct {
0000000000000000000000000000000000000000;;					Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;					Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;					Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;					Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;					Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;					Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;					Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;					Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;					Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;					Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"egressrule,omitempty"`
0000000000000000000000000000000000000000;;			Id          string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ingressrule []struct {
0000000000000000000000000000000000000000;;				Account           string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Cidr              string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;				Endport           int    `json:"endport,omitempty"`
0000000000000000000000000000000000000000;;				Icmpcode          int    `json:"icmpcode,omitempty"`
0000000000000000000000000000000000000000;;				Icmptype          int    `json:"icmptype,omitempty"`
0000000000000000000000000000000000000000;;				Protocol          string `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;				Ruleid            string `json:"ruleid,omitempty"`
0000000000000000000000000000000000000000;;				Securitygroupname string `json:"securitygroupname,omitempty"`
0000000000000000000000000000000000000000;;				Startport         int    `json:"startport,omitempty"`
0000000000000000000000000000000000000000;;				Tags              []struct {
0000000000000000000000000000000000000000;;					Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;					Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;					Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;					Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;					Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;					Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;					Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;					Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;					Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;					Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"ingressrule,omitempty"`
0000000000000000000000000000000000000000;;			Name      string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Project   string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Tags      []struct {
0000000000000000000000000000000000000000;;				Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;				Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;				Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;				Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;				Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;				Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;				Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;				Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;				Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachinecount int      `json:"virtualmachinecount,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachineids   []string `json:"virtualmachineids,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"securitygroup,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingid   string `json:"serviceofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingname string `json:"serviceofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Servicestate        string `json:"servicestate,omitempty"`
0000000000000000000000000000000000000000;;		State               string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Tags                []struct {
0000000000000000000000000000000000000000;;			Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;			Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;			Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;			Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;			Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Templatedisplaytext string `json:"templatedisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Templateid          string `json:"templateid,omitempty"`
0000000000000000000000000000000000000000;;		Templatename        string `json:"templatename,omitempty"`
0000000000000000000000000000000000000000;;		Userid              string `json:"userid,omitempty"`
0000000000000000000000000000000000000000;;		Username            string `json:"username,omitempty"`
0000000000000000000000000000000000000000;;		Vgpu                string `json:"vgpu,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid              string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename            string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveNicFromVirtualMachineParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *RemoveNicFromVirtualMachineParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["nicid"]; found {
0000000000000000000000000000000000000000;;			u.Set("nicid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["virtualmachineid"]; found {
0000000000000000000000000000000000000000;;			u.Set("virtualmachineid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *RemoveNicFromVirtualMachineParams) SetNicid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["nicid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *RemoveNicFromVirtualMachineParams) SetVirtualmachineid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["virtualmachineid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new RemoveNicFromVirtualMachineParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VirtualMachineService) NewRemoveNicFromVirtualMachineParams(nicid string, virtualmachineid string) *RemoveNicFromVirtualMachineParams {
0000000000000000000000000000000000000000;;		p := &RemoveNicFromVirtualMachineParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["nicid"] = nicid
0000000000000000000000000000000000000000;;		p.p["virtualmachineid"] = virtualmachineid
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Removes VM from specified network by deleting a NIC
0000000000000000000000000000000000000000;;	func (s *VirtualMachineService) RemoveNicFromVirtualMachine(p *RemoveNicFromVirtualMachineParams) (*RemoveNicFromVirtualMachineResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("removeNicFromVirtualMachine", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r RemoveNicFromVirtualMachineResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RemoveNicFromVirtualMachineResponse struct {
0000000000000000000000000000000000000000;;		JobID         string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Account       string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Affinitygroup []struct {
0000000000000000000000000000000000000000;;			Account           string   `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Description       string   `json:"description,omitempty"`
0000000000000000000000000000000000000000;;			Domain            string   `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid          string   `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Id                string   `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Name              string   `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Project           string   `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid         string   `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Type              string   `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			VirtualmachineIds []string `json:"virtualmachineIds,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"affinitygroup,omitempty"`
0000000000000000000000000000000000000000;;		Cpunumber             int               `json:"cpunumber,omitempty"`
0000000000000000000000000000000000000000;;		Cpuspeed              int               `json:"cpuspeed,omitempty"`
0000000000000000000000000000000000000000;;		Cpuused               string            `json:"cpuused,omitempty"`
0000000000000000000000000000000000000000;;		Created               string            `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Details               map[string]string `json:"details,omitempty"`
0000000000000000000000000000000000000000;;		Diskioread            int64             `json:"diskioread,omitempty"`
0000000000000000000000000000000000000000;;		Diskiowrite           int64             `json:"diskiowrite,omitempty"`
0000000000000000000000000000000000000000;;		Diskkbsread           int64             `json:"diskkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Diskkbswrite          int64             `json:"diskkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingid        string            `json:"diskofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingname      string            `json:"diskofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Displayname           string            `json:"displayname,omitempty"`
0000000000000000000000000000000000000000;;		Displayvm             bool              `json:"displayvm,omitempty"`
0000000000000000000000000000000000000000;;		Domain                string            `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid              string            `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Forvirtualnetwork     bool              `json:"forvirtualnetwork,omitempty"`
0000000000000000000000000000000000000000;;		Group                 string            `json:"group,omitempty"`
0000000000000000000000000000000000000000;;		Groupid               string            `json:"groupid,omitempty"`
0000000000000000000000000000000000000000;;		Guestosid             string            `json:"guestosid,omitempty"`
0000000000000000000000000000000000000000;;		Haenable              bool              `json:"haenable,omitempty"`
0000000000000000000000000000000000000000;;		Hostid                string            `json:"hostid,omitempty"`
0000000000000000000000000000000000000000;;		Hostname              string            `json:"hostname,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor            string            `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Id                    string            `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Instancename          string            `json:"instancename,omitempty"`
0000000000000000000000000000000000000000;;		Isdynamicallyscalable bool              `json:"isdynamicallyscalable,omitempty"`
0000000000000000000000000000000000000000;;		Isodisplaytext        string            `json:"isodisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Isoid                 string            `json:"isoid,omitempty"`
0000000000000000000000000000000000000000;;		Isoname               string            `json:"isoname,omitempty"`
0000000000000000000000000000000000000000;;		Keypair               string            `json:"keypair,omitempty"`
0000000000000000000000000000000000000000;;		Memory                int               `json:"memory,omitempty"`
0000000000000000000000000000000000000000;;		Name                  string            `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbsread        int64             `json:"networkkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbswrite       int64             `json:"networkkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Nic                   []struct {
0000000000000000000000000000000000000000;;			Broadcasturi string `json:"broadcasturi,omitempty"`
0000000000000000000000000000000000000000;;			Deviceid     string `json:"deviceid,omitempty"`
0000000000000000000000000000000000000000;;			Gateway      string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;			Id           string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ip6address   string `json:"ip6address,omitempty"`
0000000000000000000000000000000000000000;;			Ip6cidr      string `json:"ip6cidr,omitempty"`
0000000000000000000000000000000000000000;;			Ip6gateway   string `json:"ip6gateway,omitempty"`
0000000000000000000000000000000000000000;;			Ipaddress    string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			Isdefault    bool   `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;			Isolationuri string `json:"isolationuri,omitempty"`
0000000000000000000000000000000000000000;;			Macaddress   string `json:"macaddress,omitempty"`
0000000000000000000000000000000000000000;;			Netmask      string `json:"netmask,omitempty"`
0000000000000000000000000000000000000000;;			Networkid    string `json:"networkid,omitempty"`
0000000000000000000000000000000000000000;;			Networkname  string `json:"networkname,omitempty"`
0000000000000000000000000000000000000000;;			Secondaryip  []struct {
0000000000000000000000000000000000000000;;				Id        string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;				Ipaddress string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"secondaryip,omitempty"`
0000000000000000000000000000000000000000;;			Traffictype      string `json:"traffictype,omitempty"`
0000000000000000000000000000000000000000;;			Type             string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachineid string `json:"virtualmachineid,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"nic,omitempty"`
0000000000000000000000000000000000000000;;		Ostypeid        int64  `json:"ostypeid,omitempty"`
0000000000000000000000000000000000000000;;		Password        string `json:"password,omitempty"`
0000000000000000000000000000000000000000;;		Passwordenabled bool   `json:"passwordenabled,omitempty"`
0000000000000000000000000000000000000000;;		Project         string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid       string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;		Publicip        string `json:"publicip,omitempty"`
0000000000000000000000000000000000000000;;		Publicipid      string `json:"publicipid,omitempty"`
0000000000000000000000000000000000000000;;		Rootdeviceid    int64  `json:"rootdeviceid,omitempty"`
0000000000000000000000000000000000000000;;		Rootdevicetype  string `json:"rootdevicetype,omitempty"`
0000000000000000000000000000000000000000;;		Securitygroup   []struct {
0000000000000000000000000000000000000000;;			Account     string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Description string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;			Domain      string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid    string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Egressrule  []struct {
0000000000000000000000000000000000000000;;				Account           string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Cidr              string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;				Endport           int    `json:"endport,omitempty"`
0000000000000000000000000000000000000000;;				Icmpcode          int    `json:"icmpcode,omitempty"`
0000000000000000000000000000000000000000;;				Icmptype          int    `json:"icmptype,omitempty"`
0000000000000000000000000000000000000000;;				Protocol          string `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;				Ruleid            string `json:"ruleid,omitempty"`
0000000000000000000000000000000000000000;;				Securitygroupname string `json:"securitygroupname,omitempty"`
0000000000000000000000000000000000000000;;				Startport         int    `json:"startport,omitempty"`
0000000000000000000000000000000000000000;;				Tags              []struct {
0000000000000000000000000000000000000000;;					Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;					Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;					Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;					Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;					Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;					Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;					Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;					Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;					Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;					Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"egressrule,omitempty"`
0000000000000000000000000000000000000000;;			Id          string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ingressrule []struct {
0000000000000000000000000000000000000000;;				Account           string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Cidr              string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;				Endport           int    `json:"endport,omitempty"`
0000000000000000000000000000000000000000;;				Icmpcode          int    `json:"icmpcode,omitempty"`
0000000000000000000000000000000000000000;;				Icmptype          int    `json:"icmptype,omitempty"`
0000000000000000000000000000000000000000;;				Protocol          string `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;				Ruleid            string `json:"ruleid,omitempty"`
0000000000000000000000000000000000000000;;				Securitygroupname string `json:"securitygroupname,omitempty"`
0000000000000000000000000000000000000000;;				Startport         int    `json:"startport,omitempty"`
0000000000000000000000000000000000000000;;				Tags              []struct {
0000000000000000000000000000000000000000;;					Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;					Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;					Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;					Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;					Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;					Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;					Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;					Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;					Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;					Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"ingressrule,omitempty"`
0000000000000000000000000000000000000000;;			Name      string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Project   string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Tags      []struct {
0000000000000000000000000000000000000000;;				Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;				Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;				Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;				Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;				Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;				Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;				Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;				Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;				Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachinecount int      `json:"virtualmachinecount,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachineids   []string `json:"virtualmachineids,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"securitygroup,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingid   string `json:"serviceofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingname string `json:"serviceofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Servicestate        string `json:"servicestate,omitempty"`
0000000000000000000000000000000000000000;;		State               string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Tags                []struct {
0000000000000000000000000000000000000000;;			Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;			Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;			Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;			Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;			Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Templatedisplaytext string `json:"templatedisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Templateid          string `json:"templateid,omitempty"`
0000000000000000000000000000000000000000;;		Templatename        string `json:"templatename,omitempty"`
0000000000000000000000000000000000000000;;		Userid              string `json:"userid,omitempty"`
0000000000000000000000000000000000000000;;		Username            string `json:"username,omitempty"`
0000000000000000000000000000000000000000;;		Vgpu                string `json:"vgpu,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid              string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename            string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateDefaultNicForVirtualMachineParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateDefaultNicForVirtualMachineParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["nicid"]; found {
0000000000000000000000000000000000000000;;			u.Set("nicid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["virtualmachineid"]; found {
0000000000000000000000000000000000000000;;			u.Set("virtualmachineid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateDefaultNicForVirtualMachineParams) SetNicid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["nicid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateDefaultNicForVirtualMachineParams) SetVirtualmachineid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["virtualmachineid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new UpdateDefaultNicForVirtualMachineParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VirtualMachineService) NewUpdateDefaultNicForVirtualMachineParams(nicid string, virtualmachineid string) *UpdateDefaultNicForVirtualMachineParams {
0000000000000000000000000000000000000000;;		p := &UpdateDefaultNicForVirtualMachineParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["nicid"] = nicid
0000000000000000000000000000000000000000;;		p.p["virtualmachineid"] = virtualmachineid
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Changes the default NIC on a VM
0000000000000000000000000000000000000000;;	func (s *VirtualMachineService) UpdateDefaultNicForVirtualMachine(p *UpdateDefaultNicForVirtualMachineParams) (*UpdateDefaultNicForVirtualMachineResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("updateDefaultNicForVirtualMachine", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r UpdateDefaultNicForVirtualMachineResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateDefaultNicForVirtualMachineResponse struct {
0000000000000000000000000000000000000000;;		JobID         string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Account       string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Affinitygroup []struct {
0000000000000000000000000000000000000000;;			Account           string   `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Description       string   `json:"description,omitempty"`
0000000000000000000000000000000000000000;;			Domain            string   `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid          string   `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Id                string   `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Name              string   `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Project           string   `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid         string   `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Type              string   `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			VirtualmachineIds []string `json:"virtualmachineIds,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"affinitygroup,omitempty"`
0000000000000000000000000000000000000000;;		Cpunumber             int               `json:"cpunumber,omitempty"`
0000000000000000000000000000000000000000;;		Cpuspeed              int               `json:"cpuspeed,omitempty"`
0000000000000000000000000000000000000000;;		Cpuused               string            `json:"cpuused,omitempty"`
0000000000000000000000000000000000000000;;		Created               string            `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Details               map[string]string `json:"details,omitempty"`
0000000000000000000000000000000000000000;;		Diskioread            int64             `json:"diskioread,omitempty"`
0000000000000000000000000000000000000000;;		Diskiowrite           int64             `json:"diskiowrite,omitempty"`
0000000000000000000000000000000000000000;;		Diskkbsread           int64             `json:"diskkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Diskkbswrite          int64             `json:"diskkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingid        string            `json:"diskofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingname      string            `json:"diskofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Displayname           string            `json:"displayname,omitempty"`
0000000000000000000000000000000000000000;;		Displayvm             bool              `json:"displayvm,omitempty"`
0000000000000000000000000000000000000000;;		Domain                string            `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid              string            `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Forvirtualnetwork     bool              `json:"forvirtualnetwork,omitempty"`
0000000000000000000000000000000000000000;;		Group                 string            `json:"group,omitempty"`
0000000000000000000000000000000000000000;;		Groupid               string            `json:"groupid,omitempty"`
0000000000000000000000000000000000000000;;		Guestosid             string            `json:"guestosid,omitempty"`
0000000000000000000000000000000000000000;;		Haenable              bool              `json:"haenable,omitempty"`
0000000000000000000000000000000000000000;;		Hostid                string            `json:"hostid,omitempty"`
0000000000000000000000000000000000000000;;		Hostname              string            `json:"hostname,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor            string            `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Id                    string            `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Instancename          string            `json:"instancename,omitempty"`
0000000000000000000000000000000000000000;;		Isdynamicallyscalable bool              `json:"isdynamicallyscalable,omitempty"`
0000000000000000000000000000000000000000;;		Isodisplaytext        string            `json:"isodisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Isoid                 string            `json:"isoid,omitempty"`
0000000000000000000000000000000000000000;;		Isoname               string            `json:"isoname,omitempty"`
0000000000000000000000000000000000000000;;		Keypair               string            `json:"keypair,omitempty"`
0000000000000000000000000000000000000000;;		Memory                int               `json:"memory,omitempty"`
0000000000000000000000000000000000000000;;		Name                  string            `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbsread        int64             `json:"networkkbsread,omitempty"`
0000000000000000000000000000000000000000;;		Networkkbswrite       int64             `json:"networkkbswrite,omitempty"`
0000000000000000000000000000000000000000;;		Nic                   []struct {
0000000000000000000000000000000000000000;;			Broadcasturi string `json:"broadcasturi,omitempty"`
0000000000000000000000000000000000000000;;			Deviceid     string `json:"deviceid,omitempty"`
0000000000000000000000000000000000000000;;			Gateway      string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;			Id           string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ip6address   string `json:"ip6address,omitempty"`
0000000000000000000000000000000000000000;;			Ip6cidr      string `json:"ip6cidr,omitempty"`
0000000000000000000000000000000000000000;;			Ip6gateway   string `json:"ip6gateway,omitempty"`
0000000000000000000000000000000000000000;;			Ipaddress    string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			Isdefault    bool   `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;			Isolationuri string `json:"isolationuri,omitempty"`
0000000000000000000000000000000000000000;;			Macaddress   string `json:"macaddress,omitempty"`
0000000000000000000000000000000000000000;;			Netmask      string `json:"netmask,omitempty"`
0000000000000000000000000000000000000000;;			Networkid    string `json:"networkid,omitempty"`
0000000000000000000000000000000000000000;;			Networkname  string `json:"networkname,omitempty"`
0000000000000000000000000000000000000000;;			Secondaryip  []struct {
0000000000000000000000000000000000000000;;				Id        string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;				Ipaddress string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"secondaryip,omitempty"`
0000000000000000000000000000000000000000;;			Traffictype      string `json:"traffictype,omitempty"`
0000000000000000000000000000000000000000;;			Type             string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachineid string `json:"virtualmachineid,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"nic,omitempty"`
0000000000000000000000000000000000000000;;		Ostypeid        int64  `json:"ostypeid,omitempty"`
0000000000000000000000000000000000000000;;		Password        string `json:"password,omitempty"`
0000000000000000000000000000000000000000;;		Passwordenabled bool   `json:"passwordenabled,omitempty"`
0000000000000000000000000000000000000000;;		Project         string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid       string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;		Publicip        string `json:"publicip,omitempty"`
0000000000000000000000000000000000000000;;		Publicipid      string `json:"publicipid,omitempty"`
0000000000000000000000000000000000000000;;		Rootdeviceid    int64  `json:"rootdeviceid,omitempty"`
0000000000000000000000000000000000000000;;		Rootdevicetype  string `json:"rootdevicetype,omitempty"`
0000000000000000000000000000000000000000;;		Securitygroup   []struct {
0000000000000000000000000000000000000000;;			Account     string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Description string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;			Domain      string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid    string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Egressrule  []struct {
0000000000000000000000000000000000000000;;				Account           string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Cidr              string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;				Endport           int    `json:"endport,omitempty"`
0000000000000000000000000000000000000000;;				Icmpcode          int    `json:"icmpcode,omitempty"`
0000000000000000000000000000000000000000;;				Icmptype          int    `json:"icmptype,omitempty"`
0000000000000000000000000000000000000000;;				Protocol          string `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;				Ruleid            string `json:"ruleid,omitempty"`
0000000000000000000000000000000000000000;;				Securitygroupname string `json:"securitygroupname,omitempty"`
0000000000000000000000000000000000000000;;				Startport         int    `json:"startport,omitempty"`
0000000000000000000000000000000000000000;;				Tags              []struct {
0000000000000000000000000000000000000000;;					Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;					Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;					Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;					Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;					Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;					Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;					Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;					Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;					Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;					Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"egressrule,omitempty"`
0000000000000000000000000000000000000000;;			Id          string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ingressrule []struct {
0000000000000000000000000000000000000000;;				Account           string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Cidr              string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;				Endport           int    `json:"endport,omitempty"`
0000000000000000000000000000000000000000;;				Icmpcode          int    `json:"icmpcode,omitempty"`
0000000000000000000000000000000000000000;;				Icmptype          int    `json:"icmptype,omitempty"`
0000000000000000000000000000000000000000;;				Protocol          string `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;				Ruleid            string `json:"ruleid,omitempty"`
0000000000000000000000000000000000000000;;				Securitygroupname string `json:"securitygroupname,omitempty"`
0000000000000000000000000000000000000000;;				Startport         int    `json:"startport,omitempty"`
0000000000000000000000000000000000000000;;				Tags              []struct {
0000000000000000000000000000000000000000;;					Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;					Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;					Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;					Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;					Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;					Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;					Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;					Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;					Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;					Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"ingressrule,omitempty"`
0000000000000000000000000000000000000000;;			Name      string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Project   string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Tags      []struct {
0000000000000000000000000000000000000000;;				Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;				Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;				Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;				Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;				Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;				Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;				Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;				Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;				Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachinecount int      `json:"virtualmachinecount,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachineids   []string `json:"virtualmachineids,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"securitygroup,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingid   string `json:"serviceofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingname string `json:"serviceofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Servicestate        string `json:"servicestate,omitempty"`
0000000000000000000000000000000000000000;;		State               string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Tags                []struct {
0000000000000000000000000000000000000000;;			Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;			Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;			Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;			Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;			Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Templatedisplaytext string `json:"templatedisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Templateid          string `json:"templateid,omitempty"`
0000000000000000000000000000000000000000;;		Templatename        string `json:"templatename,omitempty"`
0000000000000000000000000000000000000000;;		Userid              string `json:"userid,omitempty"`
0000000000000000000000000000000000000000;;		Username            string `json:"username,omitempty"`
0000000000000000000000000000000000000000;;		Vgpu                string `json:"vgpu,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid              string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename            string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
