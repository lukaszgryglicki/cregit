0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Copyright 2016, Sander van Harmelen
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
0000000000000000000000000000000000000000;;	//
0a16da49b5158d8aef850f86fc8936f4afa6c64a;;	
0000000000000000000000000000000000000000;;	package cloudstack
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StartRouterParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *StartRouterParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *StartRouterParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new StartRouterParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *RouterService) NewStartRouterParams(id string) *StartRouterParams {
0000000000000000000000000000000000000000;;		p := &StartRouterParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Starts a router.
0000000000000000000000000000000000000000;;	func (s *RouterService) StartRouter(p *StartRouterParams) (*StartRouterResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("startRouter", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r StartRouterResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StartRouterResponse struct {
0000000000000000000000000000000000000000;;		JobID               string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Account             string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Created             string `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Dns1                string `json:"dns1,omitempty"`
0000000000000000000000000000000000000000;;		Dns2                string `json:"dns2,omitempty"`
0000000000000000000000000000000000000000;;		Domain              string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid            string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Gateway             string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;		Guestipaddress      string `json:"guestipaddress,omitempty"`
0000000000000000000000000000000000000000;;		Guestmacaddress     string `json:"guestmacaddress,omitempty"`
0000000000000000000000000000000000000000;;		Guestnetmask        string `json:"guestnetmask,omitempty"`
0000000000000000000000000000000000000000;;		Guestnetworkid      string `json:"guestnetworkid,omitempty"`
0000000000000000000000000000000000000000;;		Guestnetworkname    string `json:"guestnetworkname,omitempty"`
0000000000000000000000000000000000000000;;		Hostid              string `json:"hostid,omitempty"`
0000000000000000000000000000000000000000;;		Hostname            string `json:"hostname,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor          string `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Id                  string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Ip6dns1             string `json:"ip6dns1,omitempty"`
0000000000000000000000000000000000000000;;		Ip6dns2             string `json:"ip6dns2,omitempty"`
0000000000000000000000000000000000000000;;		Isredundantrouter   bool   `json:"isredundantrouter,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalip         string `json:"linklocalip,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalmacaddress string `json:"linklocalmacaddress,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalnetmask    string `json:"linklocalnetmask,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalnetworkid  string `json:"linklocalnetworkid,omitempty"`
0000000000000000000000000000000000000000;;		Name                string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkdomain       string `json:"networkdomain,omitempty"`
0000000000000000000000000000000000000000;;		Nic                 []struct {
0000000000000000000000000000000000000000;;			Broadcasturi string `json:"broadcasturi,omitempty"`
0000000000000000000000000000000000000000;;			Deviceid     string `json:"deviceid,omitempty"`
0000000000000000000000000000000000000000;;			Gateway      string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;			Id           string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ip6address   string `json:"ip6address,omitempty"`
0000000000000000000000000000000000000000;;			Ip6cidr      string `json:"ip6cidr,omitempty"`
0000000000000000000000000000000000000000;;			Ip6gateway   string `json:"ip6gateway,omitempty"`
0000000000000000000000000000000000000000;;			Ipaddress    string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			Isdefault    bool   `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;			Isolationuri string `json:"isolationuri,omitempty"`
0000000000000000000000000000000000000000;;			Macaddress   string `json:"macaddress,omitempty"`
0000000000000000000000000000000000000000;;			Netmask      string `json:"netmask,omitempty"`
0000000000000000000000000000000000000000;;			Networkid    string `json:"networkid,omitempty"`
0000000000000000000000000000000000000000;;			Networkname  string `json:"networkname,omitempty"`
0000000000000000000000000000000000000000;;			Secondaryip  []struct {
0000000000000000000000000000000000000000;;				Id        string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;				Ipaddress string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"secondaryip,omitempty"`
0000000000000000000000000000000000000000;;			Traffictype      string `json:"traffictype,omitempty"`
0000000000000000000000000000000000000000;;			Type             string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachineid string `json:"virtualmachineid,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"nic,omitempty"`
0000000000000000000000000000000000000000;;		Podid               string `json:"podid,omitempty"`
0000000000000000000000000000000000000000;;		Project             string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid           string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;		Publicip            string `json:"publicip,omitempty"`
0000000000000000000000000000000000000000;;		Publicmacaddress    string `json:"publicmacaddress,omitempty"`
0000000000000000000000000000000000000000;;		Publicnetmask       string `json:"publicnetmask,omitempty"`
0000000000000000000000000000000000000000;;		Publicnetworkid     string `json:"publicnetworkid,omitempty"`
0000000000000000000000000000000000000000;;		Redundantstate      string `json:"redundantstate,omitempty"`
0000000000000000000000000000000000000000;;		Requiresupgrade     bool   `json:"requiresupgrade,omitempty"`
0000000000000000000000000000000000000000;;		Role                string `json:"role,omitempty"`
0000000000000000000000000000000000000000;;		Scriptsversion      string `json:"scriptsversion,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingid   string `json:"serviceofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingname string `json:"serviceofferingname,omitempty"`
0000000000000000000000000000000000000000;;		State               string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Templateid          string `json:"templateid,omitempty"`
0000000000000000000000000000000000000000;;		Version             string `json:"version,omitempty"`
0000000000000000000000000000000000000000;;		Vpcid               string `json:"vpcid,omitempty"`
0000000000000000000000000000000000000000;;		Vpcname             string `json:"vpcname,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid              string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename            string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RebootRouterParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *RebootRouterParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *RebootRouterParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new RebootRouterParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *RouterService) NewRebootRouterParams(id string) *RebootRouterParams {
0000000000000000000000000000000000000000;;		p := &RebootRouterParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Starts a router.
0000000000000000000000000000000000000000;;	func (s *RouterService) RebootRouter(p *RebootRouterParams) (*RebootRouterResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("rebootRouter", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r RebootRouterResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RebootRouterResponse struct {
0000000000000000000000000000000000000000;;		JobID               string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Account             string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Created             string `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Dns1                string `json:"dns1,omitempty"`
0000000000000000000000000000000000000000;;		Dns2                string `json:"dns2,omitempty"`
0000000000000000000000000000000000000000;;		Domain              string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid            string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Gateway             string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;		Guestipaddress      string `json:"guestipaddress,omitempty"`
0000000000000000000000000000000000000000;;		Guestmacaddress     string `json:"guestmacaddress,omitempty"`
0000000000000000000000000000000000000000;;		Guestnetmask        string `json:"guestnetmask,omitempty"`
0000000000000000000000000000000000000000;;		Guestnetworkid      string `json:"guestnetworkid,omitempty"`
0000000000000000000000000000000000000000;;		Guestnetworkname    string `json:"guestnetworkname,omitempty"`
0000000000000000000000000000000000000000;;		Hostid              string `json:"hostid,omitempty"`
0000000000000000000000000000000000000000;;		Hostname            string `json:"hostname,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor          string `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Id                  string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Ip6dns1             string `json:"ip6dns1,omitempty"`
0000000000000000000000000000000000000000;;		Ip6dns2             string `json:"ip6dns2,omitempty"`
0000000000000000000000000000000000000000;;		Isredundantrouter   bool   `json:"isredundantrouter,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalip         string `json:"linklocalip,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalmacaddress string `json:"linklocalmacaddress,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalnetmask    string `json:"linklocalnetmask,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalnetworkid  string `json:"linklocalnetworkid,omitempty"`
0000000000000000000000000000000000000000;;		Name                string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkdomain       string `json:"networkdomain,omitempty"`
0000000000000000000000000000000000000000;;		Nic                 []struct {
0000000000000000000000000000000000000000;;			Broadcasturi string `json:"broadcasturi,omitempty"`
0000000000000000000000000000000000000000;;			Deviceid     string `json:"deviceid,omitempty"`
0000000000000000000000000000000000000000;;			Gateway      string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;			Id           string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ip6address   string `json:"ip6address,omitempty"`
0000000000000000000000000000000000000000;;			Ip6cidr      string `json:"ip6cidr,omitempty"`
0000000000000000000000000000000000000000;;			Ip6gateway   string `json:"ip6gateway,omitempty"`
0000000000000000000000000000000000000000;;			Ipaddress    string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			Isdefault    bool   `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;			Isolationuri string `json:"isolationuri,omitempty"`
0000000000000000000000000000000000000000;;			Macaddress   string `json:"macaddress,omitempty"`
0000000000000000000000000000000000000000;;			Netmask      string `json:"netmask,omitempty"`
0000000000000000000000000000000000000000;;			Networkid    string `json:"networkid,omitempty"`
0000000000000000000000000000000000000000;;			Networkname  string `json:"networkname,omitempty"`
0000000000000000000000000000000000000000;;			Secondaryip  []struct {
0000000000000000000000000000000000000000;;				Id        string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;				Ipaddress string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"secondaryip,omitempty"`
0000000000000000000000000000000000000000;;			Traffictype      string `json:"traffictype,omitempty"`
0000000000000000000000000000000000000000;;			Type             string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachineid string `json:"virtualmachineid,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"nic,omitempty"`
0000000000000000000000000000000000000000;;		Podid               string `json:"podid,omitempty"`
0000000000000000000000000000000000000000;;		Project             string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid           string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;		Publicip            string `json:"publicip,omitempty"`
0000000000000000000000000000000000000000;;		Publicmacaddress    string `json:"publicmacaddress,omitempty"`
0000000000000000000000000000000000000000;;		Publicnetmask       string `json:"publicnetmask,omitempty"`
0000000000000000000000000000000000000000;;		Publicnetworkid     string `json:"publicnetworkid,omitempty"`
0000000000000000000000000000000000000000;;		Redundantstate      string `json:"redundantstate,omitempty"`
0000000000000000000000000000000000000000;;		Requiresupgrade     bool   `json:"requiresupgrade,omitempty"`
0000000000000000000000000000000000000000;;		Role                string `json:"role,omitempty"`
0000000000000000000000000000000000000000;;		Scriptsversion      string `json:"scriptsversion,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingid   string `json:"serviceofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingname string `json:"serviceofferingname,omitempty"`
0000000000000000000000000000000000000000;;		State               string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Templateid          string `json:"templateid,omitempty"`
0000000000000000000000000000000000000000;;		Version             string `json:"version,omitempty"`
0000000000000000000000000000000000000000;;		Vpcid               string `json:"vpcid,omitempty"`
0000000000000000000000000000000000000000;;		Vpcname             string `json:"vpcname,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid              string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename            string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StopRouterParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *StopRouterParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["forced"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("forced", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *StopRouterParams) SetForced(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["forced"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *StopRouterParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new StopRouterParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *RouterService) NewStopRouterParams(id string) *StopRouterParams {
0000000000000000000000000000000000000000;;		p := &StopRouterParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Stops a router.
0000000000000000000000000000000000000000;;	func (s *RouterService) StopRouter(p *StopRouterParams) (*StopRouterResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("stopRouter", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r StopRouterResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StopRouterResponse struct {
0000000000000000000000000000000000000000;;		JobID               string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Account             string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Created             string `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Dns1                string `json:"dns1,omitempty"`
0000000000000000000000000000000000000000;;		Dns2                string `json:"dns2,omitempty"`
0000000000000000000000000000000000000000;;		Domain              string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid            string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Gateway             string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;		Guestipaddress      string `json:"guestipaddress,omitempty"`
0000000000000000000000000000000000000000;;		Guestmacaddress     string `json:"guestmacaddress,omitempty"`
0000000000000000000000000000000000000000;;		Guestnetmask        string `json:"guestnetmask,omitempty"`
0000000000000000000000000000000000000000;;		Guestnetworkid      string `json:"guestnetworkid,omitempty"`
0000000000000000000000000000000000000000;;		Guestnetworkname    string `json:"guestnetworkname,omitempty"`
0000000000000000000000000000000000000000;;		Hostid              string `json:"hostid,omitempty"`
0000000000000000000000000000000000000000;;		Hostname            string `json:"hostname,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor          string `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Id                  string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Ip6dns1             string `json:"ip6dns1,omitempty"`
0000000000000000000000000000000000000000;;		Ip6dns2             string `json:"ip6dns2,omitempty"`
0000000000000000000000000000000000000000;;		Isredundantrouter   bool   `json:"isredundantrouter,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalip         string `json:"linklocalip,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalmacaddress string `json:"linklocalmacaddress,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalnetmask    string `json:"linklocalnetmask,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalnetworkid  string `json:"linklocalnetworkid,omitempty"`
0000000000000000000000000000000000000000;;		Name                string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkdomain       string `json:"networkdomain,omitempty"`
0000000000000000000000000000000000000000;;		Nic                 []struct {
0000000000000000000000000000000000000000;;			Broadcasturi string `json:"broadcasturi,omitempty"`
0000000000000000000000000000000000000000;;			Deviceid     string `json:"deviceid,omitempty"`
0000000000000000000000000000000000000000;;			Gateway      string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;			Id           string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ip6address   string `json:"ip6address,omitempty"`
0000000000000000000000000000000000000000;;			Ip6cidr      string `json:"ip6cidr,omitempty"`
0000000000000000000000000000000000000000;;			Ip6gateway   string `json:"ip6gateway,omitempty"`
0000000000000000000000000000000000000000;;			Ipaddress    string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			Isdefault    bool   `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;			Isolationuri string `json:"isolationuri,omitempty"`
0000000000000000000000000000000000000000;;			Macaddress   string `json:"macaddress,omitempty"`
0000000000000000000000000000000000000000;;			Netmask      string `json:"netmask,omitempty"`
0000000000000000000000000000000000000000;;			Networkid    string `json:"networkid,omitempty"`
0000000000000000000000000000000000000000;;			Networkname  string `json:"networkname,omitempty"`
0000000000000000000000000000000000000000;;			Secondaryip  []struct {
0000000000000000000000000000000000000000;;				Id        string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;				Ipaddress string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"secondaryip,omitempty"`
0000000000000000000000000000000000000000;;			Traffictype      string `json:"traffictype,omitempty"`
0000000000000000000000000000000000000000;;			Type             string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachineid string `json:"virtualmachineid,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"nic,omitempty"`
0000000000000000000000000000000000000000;;		Podid               string `json:"podid,omitempty"`
0000000000000000000000000000000000000000;;		Project             string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid           string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;		Publicip            string `json:"publicip,omitempty"`
0000000000000000000000000000000000000000;;		Publicmacaddress    string `json:"publicmacaddress,omitempty"`
0000000000000000000000000000000000000000;;		Publicnetmask       string `json:"publicnetmask,omitempty"`
0000000000000000000000000000000000000000;;		Publicnetworkid     string `json:"publicnetworkid,omitempty"`
0000000000000000000000000000000000000000;;		Redundantstate      string `json:"redundantstate,omitempty"`
0000000000000000000000000000000000000000;;		Requiresupgrade     bool   `json:"requiresupgrade,omitempty"`
0000000000000000000000000000000000000000;;		Role                string `json:"role,omitempty"`
0000000000000000000000000000000000000000;;		Scriptsversion      string `json:"scriptsversion,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingid   string `json:"serviceofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingname string `json:"serviceofferingname,omitempty"`
0000000000000000000000000000000000000000;;		State               string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Templateid          string `json:"templateid,omitempty"`
0000000000000000000000000000000000000000;;		Version             string `json:"version,omitempty"`
0000000000000000000000000000000000000000;;		Vpcid               string `json:"vpcid,omitempty"`
0000000000000000000000000000000000000000;;		Vpcname             string `json:"vpcname,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid              string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename            string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DestroyRouterParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DestroyRouterParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DestroyRouterParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new DestroyRouterParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *RouterService) NewDestroyRouterParams(id string) *DestroyRouterParams {
0000000000000000000000000000000000000000;;		p := &DestroyRouterParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Destroys a router.
0000000000000000000000000000000000000000;;	func (s *RouterService) DestroyRouter(p *DestroyRouterParams) (*DestroyRouterResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("destroyRouter", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r DestroyRouterResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DestroyRouterResponse struct {
0000000000000000000000000000000000000000;;		JobID               string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Account             string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Created             string `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Dns1                string `json:"dns1,omitempty"`
0000000000000000000000000000000000000000;;		Dns2                string `json:"dns2,omitempty"`
0000000000000000000000000000000000000000;;		Domain              string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid            string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Gateway             string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;		Guestipaddress      string `json:"guestipaddress,omitempty"`
0000000000000000000000000000000000000000;;		Guestmacaddress     string `json:"guestmacaddress,omitempty"`
0000000000000000000000000000000000000000;;		Guestnetmask        string `json:"guestnetmask,omitempty"`
0000000000000000000000000000000000000000;;		Guestnetworkid      string `json:"guestnetworkid,omitempty"`
0000000000000000000000000000000000000000;;		Guestnetworkname    string `json:"guestnetworkname,omitempty"`
0000000000000000000000000000000000000000;;		Hostid              string `json:"hostid,omitempty"`
0000000000000000000000000000000000000000;;		Hostname            string `json:"hostname,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor          string `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Id                  string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Ip6dns1             string `json:"ip6dns1,omitempty"`
0000000000000000000000000000000000000000;;		Ip6dns2             string `json:"ip6dns2,omitempty"`
0000000000000000000000000000000000000000;;		Isredundantrouter   bool   `json:"isredundantrouter,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalip         string `json:"linklocalip,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalmacaddress string `json:"linklocalmacaddress,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalnetmask    string `json:"linklocalnetmask,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalnetworkid  string `json:"linklocalnetworkid,omitempty"`
0000000000000000000000000000000000000000;;		Name                string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkdomain       string `json:"networkdomain,omitempty"`
0000000000000000000000000000000000000000;;		Nic                 []struct {
0000000000000000000000000000000000000000;;			Broadcasturi string `json:"broadcasturi,omitempty"`
0000000000000000000000000000000000000000;;			Deviceid     string `json:"deviceid,omitempty"`
0000000000000000000000000000000000000000;;			Gateway      string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;			Id           string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ip6address   string `json:"ip6address,omitempty"`
0000000000000000000000000000000000000000;;			Ip6cidr      string `json:"ip6cidr,omitempty"`
0000000000000000000000000000000000000000;;			Ip6gateway   string `json:"ip6gateway,omitempty"`
0000000000000000000000000000000000000000;;			Ipaddress    string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			Isdefault    bool   `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;			Isolationuri string `json:"isolationuri,omitempty"`
0000000000000000000000000000000000000000;;			Macaddress   string `json:"macaddress,omitempty"`
0000000000000000000000000000000000000000;;			Netmask      string `json:"netmask,omitempty"`
0000000000000000000000000000000000000000;;			Networkid    string `json:"networkid,omitempty"`
0000000000000000000000000000000000000000;;			Networkname  string `json:"networkname,omitempty"`
0000000000000000000000000000000000000000;;			Secondaryip  []struct {
0000000000000000000000000000000000000000;;				Id        string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;				Ipaddress string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"secondaryip,omitempty"`
0000000000000000000000000000000000000000;;			Traffictype      string `json:"traffictype,omitempty"`
0000000000000000000000000000000000000000;;			Type             string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachineid string `json:"virtualmachineid,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"nic,omitempty"`
0000000000000000000000000000000000000000;;		Podid               string `json:"podid,omitempty"`
0000000000000000000000000000000000000000;;		Project             string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid           string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;		Publicip            string `json:"publicip,omitempty"`
0000000000000000000000000000000000000000;;		Publicmacaddress    string `json:"publicmacaddress,omitempty"`
0000000000000000000000000000000000000000;;		Publicnetmask       string `json:"publicnetmask,omitempty"`
0000000000000000000000000000000000000000;;		Publicnetworkid     string `json:"publicnetworkid,omitempty"`
0000000000000000000000000000000000000000;;		Redundantstate      string `json:"redundantstate,omitempty"`
0000000000000000000000000000000000000000;;		Requiresupgrade     bool   `json:"requiresupgrade,omitempty"`
0000000000000000000000000000000000000000;;		Role                string `json:"role,omitempty"`
0000000000000000000000000000000000000000;;		Scriptsversion      string `json:"scriptsversion,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingid   string `json:"serviceofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingname string `json:"serviceofferingname,omitempty"`
0000000000000000000000000000000000000000;;		State               string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Templateid          string `json:"templateid,omitempty"`
0000000000000000000000000000000000000000;;		Version             string `json:"version,omitempty"`
0000000000000000000000000000000000000000;;		Vpcid               string `json:"vpcid,omitempty"`
0000000000000000000000000000000000000000;;		Vpcname             string `json:"vpcname,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid              string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename            string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ChangeServiceForRouterParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ChangeServiceForRouterParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["serviceofferingid"]; found {
0000000000000000000000000000000000000000;;			u.Set("serviceofferingid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ChangeServiceForRouterParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ChangeServiceForRouterParams) SetServiceofferingid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["serviceofferingid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new ChangeServiceForRouterParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *RouterService) NewChangeServiceForRouterParams(id string, serviceofferingid string) *ChangeServiceForRouterParams {
0000000000000000000000000000000000000000;;		p := &ChangeServiceForRouterParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		p.p["serviceofferingid"] = serviceofferingid
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Upgrades domain router to a new service offering
0000000000000000000000000000000000000000;;	func (s *RouterService) ChangeServiceForRouter(p *ChangeServiceForRouterParams) (*ChangeServiceForRouterResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("changeServiceForRouter", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r ChangeServiceForRouterResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ChangeServiceForRouterResponse struct {
0000000000000000000000000000000000000000;;		Account             string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Created             string `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Dns1                string `json:"dns1,omitempty"`
0000000000000000000000000000000000000000;;		Dns2                string `json:"dns2,omitempty"`
0000000000000000000000000000000000000000;;		Domain              string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid            string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Gateway             string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;		Guestipaddress      string `json:"guestipaddress,omitempty"`
0000000000000000000000000000000000000000;;		Guestmacaddress     string `json:"guestmacaddress,omitempty"`
0000000000000000000000000000000000000000;;		Guestnetmask        string `json:"guestnetmask,omitempty"`
0000000000000000000000000000000000000000;;		Guestnetworkid      string `json:"guestnetworkid,omitempty"`
0000000000000000000000000000000000000000;;		Guestnetworkname    string `json:"guestnetworkname,omitempty"`
0000000000000000000000000000000000000000;;		Hostid              string `json:"hostid,omitempty"`
0000000000000000000000000000000000000000;;		Hostname            string `json:"hostname,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor          string `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Id                  string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Ip6dns1             string `json:"ip6dns1,omitempty"`
0000000000000000000000000000000000000000;;		Ip6dns2             string `json:"ip6dns2,omitempty"`
0000000000000000000000000000000000000000;;		Isredundantrouter   bool   `json:"isredundantrouter,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalip         string `json:"linklocalip,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalmacaddress string `json:"linklocalmacaddress,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalnetmask    string `json:"linklocalnetmask,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalnetworkid  string `json:"linklocalnetworkid,omitempty"`
0000000000000000000000000000000000000000;;		Name                string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkdomain       string `json:"networkdomain,omitempty"`
0000000000000000000000000000000000000000;;		Nic                 []struct {
0000000000000000000000000000000000000000;;			Broadcasturi string `json:"broadcasturi,omitempty"`
0000000000000000000000000000000000000000;;			Deviceid     string `json:"deviceid,omitempty"`
0000000000000000000000000000000000000000;;			Gateway      string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;			Id           string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ip6address   string `json:"ip6address,omitempty"`
0000000000000000000000000000000000000000;;			Ip6cidr      string `json:"ip6cidr,omitempty"`
0000000000000000000000000000000000000000;;			Ip6gateway   string `json:"ip6gateway,omitempty"`
0000000000000000000000000000000000000000;;			Ipaddress    string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			Isdefault    bool   `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;			Isolationuri string `json:"isolationuri,omitempty"`
0000000000000000000000000000000000000000;;			Macaddress   string `json:"macaddress,omitempty"`
0000000000000000000000000000000000000000;;			Netmask      string `json:"netmask,omitempty"`
0000000000000000000000000000000000000000;;			Networkid    string `json:"networkid,omitempty"`
0000000000000000000000000000000000000000;;			Networkname  string `json:"networkname,omitempty"`
0000000000000000000000000000000000000000;;			Secondaryip  []struct {
0000000000000000000000000000000000000000;;				Id        string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;				Ipaddress string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"secondaryip,omitempty"`
0000000000000000000000000000000000000000;;			Traffictype      string `json:"traffictype,omitempty"`
0000000000000000000000000000000000000000;;			Type             string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachineid string `json:"virtualmachineid,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"nic,omitempty"`
0000000000000000000000000000000000000000;;		Podid               string `json:"podid,omitempty"`
0000000000000000000000000000000000000000;;		Project             string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid           string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;		Publicip            string `json:"publicip,omitempty"`
0000000000000000000000000000000000000000;;		Publicmacaddress    string `json:"publicmacaddress,omitempty"`
0000000000000000000000000000000000000000;;		Publicnetmask       string `json:"publicnetmask,omitempty"`
0000000000000000000000000000000000000000;;		Publicnetworkid     string `json:"publicnetworkid,omitempty"`
0000000000000000000000000000000000000000;;		Redundantstate      string `json:"redundantstate,omitempty"`
0000000000000000000000000000000000000000;;		Requiresupgrade     bool   `json:"requiresupgrade,omitempty"`
0000000000000000000000000000000000000000;;		Role                string `json:"role,omitempty"`
0000000000000000000000000000000000000000;;		Scriptsversion      string `json:"scriptsversion,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingid   string `json:"serviceofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingname string `json:"serviceofferingname,omitempty"`
0000000000000000000000000000000000000000;;		State               string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Templateid          string `json:"templateid,omitempty"`
0000000000000000000000000000000000000000;;		Version             string `json:"version,omitempty"`
0000000000000000000000000000000000000000;;		Vpcid               string `json:"vpcid,omitempty"`
0000000000000000000000000000000000000000;;		Vpcname             string `json:"vpcname,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid              string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename            string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListRoutersParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListRoutersParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["account"]; found {
0000000000000000000000000000000000000000;;			u.Set("account", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["clusterid"]; found {
0000000000000000000000000000000000000000;;			u.Set("clusterid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["domainid"]; found {
0000000000000000000000000000000000000000;;			u.Set("domainid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["forvpc"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("forvpc", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["hostid"]; found {
0000000000000000000000000000000000000000;;			u.Set("hostid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["isrecursive"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("isrecursive", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["keyword"]; found {
0000000000000000000000000000000000000000;;			u.Set("keyword", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["listall"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("listall", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["name"]; found {
0000000000000000000000000000000000000000;;			u.Set("name", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["networkid"]; found {
0000000000000000000000000000000000000000;;			u.Set("networkid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["page"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.Itoa(v.(int))
0000000000000000000000000000000000000000;;			u.Set("page", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["pagesize"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.Itoa(v.(int))
0000000000000000000000000000000000000000;;			u.Set("pagesize", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["podid"]; found {
0000000000000000000000000000000000000000;;			u.Set("podid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["projectid"]; found {
0000000000000000000000000000000000000000;;			u.Set("projectid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["state"]; found {
0000000000000000000000000000000000000000;;			u.Set("state", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["version"]; found {
0000000000000000000000000000000000000000;;			u.Set("version", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["vpcid"]; found {
0000000000000000000000000000000000000000;;			u.Set("vpcid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["zoneid"]; found {
0000000000000000000000000000000000000000;;			u.Set("zoneid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListRoutersParams) SetAccount(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["account"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListRoutersParams) SetClusterid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["clusterid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListRoutersParams) SetDomainid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["domainid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListRoutersParams) SetForvpc(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["forvpc"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListRoutersParams) SetHostid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["hostid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListRoutersParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListRoutersParams) SetIsrecursive(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["isrecursive"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListRoutersParams) SetKeyword(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["keyword"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListRoutersParams) SetListall(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["listall"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListRoutersParams) SetName(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["name"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListRoutersParams) SetNetworkid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["networkid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListRoutersParams) SetPage(v int) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["page"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListRoutersParams) SetPagesize(v int) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["pagesize"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListRoutersParams) SetPodid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["podid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListRoutersParams) SetProjectid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["projectid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListRoutersParams) SetState(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["state"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListRoutersParams) SetVersion(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["version"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListRoutersParams) SetVpcid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["vpcid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListRoutersParams) SetZoneid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["zoneid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new ListRoutersParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *RouterService) NewListRoutersParams() *ListRoutersParams {
0000000000000000000000000000000000000000;;		p := &ListRoutersParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is a courtesy helper function, which in some cases may not work as expected!
0000000000000000000000000000000000000000;;	func (s *RouterService) GetRouterID(name string, opts ...OptionFunc) (string, int, error) {
0000000000000000000000000000000000000000;;		p := &ListRoutersParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.p["name"] = name
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, fn := range opts {
0000000000000000000000000000000000000000;;			if err := fn(s.cs, p); err != nil {
0000000000000000000000000000000000000000;;				return "", -1, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		l, err := s.ListRouters(p)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", -1, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 0 {
0000000000000000000000000000000000000000;;			return "", l.Count, fmt.Errorf("No match found for %s: %+v", name, l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 1 {
0000000000000000000000000000000000000000;;			return l.Routers[0].Id, l.Count, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count > 1 {
0000000000000000000000000000000000000000;;			for _, v := range l.Routers {
0000000000000000000000000000000000000000;;				if v.Name == name {
0000000000000000000000000000000000000000;;					return v.Id, l.Count, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "", l.Count, fmt.Errorf("Could not find an exact match for %s: %+v", name, l)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is a courtesy helper function, which in some cases may not work as expected!
0000000000000000000000000000000000000000;;	func (s *RouterService) GetRouterByName(name string, opts ...OptionFunc) (*Router, int, error) {
0000000000000000000000000000000000000000;;		id, count, err := s.GetRouterID(name, opts...)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, count, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r, count, err := s.GetRouterByID(id, opts...)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, count, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return r, count, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is a courtesy helper function, which in some cases may not work as expected!
0000000000000000000000000000000000000000;;	func (s *RouterService) GetRouterByID(id string, opts ...OptionFunc) (*Router, int, error) {
0000000000000000000000000000000000000000;;		p := &ListRoutersParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, fn := range opts {
0000000000000000000000000000000000000000;;			if err := fn(s.cs, p); err != nil {
0000000000000000000000000000000000000000;;				return nil, -1, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		l, err := s.ListRouters(p)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if strings.Contains(err.Error(), fmt.Sprintf(
0000000000000000000000000000000000000000;;				"Invalid parameter id value=%s due to incorrect long value format, "+
0000000000000000000000000000000000000000;;					"or entity does not exist", id)) {
0000000000000000000000000000000000000000;;				return nil, 0, fmt.Errorf("No match found for %s: %+v", id, l)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, -1, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 0 {
0000000000000000000000000000000000000000;;			return nil, l.Count, fmt.Errorf("No match found for %s: %+v", id, l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 1 {
0000000000000000000000000000000000000000;;			return l.Routers[0], l.Count, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, l.Count, fmt.Errorf("There is more then one result for Router UUID: %s!", id)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List routers.
0000000000000000000000000000000000000000;;	func (s *RouterService) ListRouters(p *ListRoutersParams) (*ListRoutersResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("listRouters", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r ListRoutersResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListRoutersResponse struct {
0000000000000000000000000000000000000000;;		Count   int       `json:"count"`
0000000000000000000000000000000000000000;;		Routers []*Router `json:"router"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Router struct {
0000000000000000000000000000000000000000;;		Account             string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Created             string `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Dns1                string `json:"dns1,omitempty"`
0000000000000000000000000000000000000000;;		Dns2                string `json:"dns2,omitempty"`
0000000000000000000000000000000000000000;;		Domain              string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid            string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Gateway             string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;		Guestipaddress      string `json:"guestipaddress,omitempty"`
0000000000000000000000000000000000000000;;		Guestmacaddress     string `json:"guestmacaddress,omitempty"`
0000000000000000000000000000000000000000;;		Guestnetmask        string `json:"guestnetmask,omitempty"`
0000000000000000000000000000000000000000;;		Guestnetworkid      string `json:"guestnetworkid,omitempty"`
0000000000000000000000000000000000000000;;		Guestnetworkname    string `json:"guestnetworkname,omitempty"`
0000000000000000000000000000000000000000;;		Hostid              string `json:"hostid,omitempty"`
0000000000000000000000000000000000000000;;		Hostname            string `json:"hostname,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor          string `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Id                  string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Ip6dns1             string `json:"ip6dns1,omitempty"`
0000000000000000000000000000000000000000;;		Ip6dns2             string `json:"ip6dns2,omitempty"`
0000000000000000000000000000000000000000;;		Isredundantrouter   bool   `json:"isredundantrouter,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalip         string `json:"linklocalip,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalmacaddress string `json:"linklocalmacaddress,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalnetmask    string `json:"linklocalnetmask,omitempty"`
0000000000000000000000000000000000000000;;		Linklocalnetworkid  string `json:"linklocalnetworkid,omitempty"`
0000000000000000000000000000000000000000;;		Name                string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkdomain       string `json:"networkdomain,omitempty"`
0000000000000000000000000000000000000000;;		Nic                 []struct {
0000000000000000000000000000000000000000;;			Broadcasturi string `json:"broadcasturi,omitempty"`
0000000000000000000000000000000000000000;;			Deviceid     string `json:"deviceid,omitempty"`
0000000000000000000000000000000000000000;;			Gateway      string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;			Id           string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ip6address   string `json:"ip6address,omitempty"`
0000000000000000000000000000000000000000;;			Ip6cidr      string `json:"ip6cidr,omitempty"`
0000000000000000000000000000000000000000;;			Ip6gateway   string `json:"ip6gateway,omitempty"`
0000000000000000000000000000000000000000;;			Ipaddress    string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			Isdefault    bool   `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;			Isolationuri string `json:"isolationuri,omitempty"`
0000000000000000000000000000000000000000;;			Macaddress   string `json:"macaddress,omitempty"`
0000000000000000000000000000000000000000;;			Netmask      string `json:"netmask,omitempty"`
0000000000000000000000000000000000000000;;			Networkid    string `json:"networkid,omitempty"`
0000000000000000000000000000000000000000;;			Networkname  string `json:"networkname,omitempty"`
0000000000000000000000000000000000000000;;			Secondaryip  []struct {
0000000000000000000000000000000000000000;;				Id        string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;				Ipaddress string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"secondaryip,omitempty"`
0000000000000000000000000000000000000000;;			Traffictype      string `json:"traffictype,omitempty"`
0000000000000000000000000000000000000000;;			Type             string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			Virtualmachineid string `json:"virtualmachineid,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"nic,omitempty"`
0000000000000000000000000000000000000000;;		Podid               string `json:"podid,omitempty"`
0000000000000000000000000000000000000000;;		Project             string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid           string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;		Publicip            string `json:"publicip,omitempty"`
0000000000000000000000000000000000000000;;		Publicmacaddress    string `json:"publicmacaddress,omitempty"`
0000000000000000000000000000000000000000;;		Publicnetmask       string `json:"publicnetmask,omitempty"`
0000000000000000000000000000000000000000;;		Publicnetworkid     string `json:"publicnetworkid,omitempty"`
0000000000000000000000000000000000000000;;		Redundantstate      string `json:"redundantstate,omitempty"`
0000000000000000000000000000000000000000;;		Requiresupgrade     bool   `json:"requiresupgrade,omitempty"`
0000000000000000000000000000000000000000;;		Role                string `json:"role,omitempty"`
0000000000000000000000000000000000000000;;		Scriptsversion      string `json:"scriptsversion,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingid   string `json:"serviceofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingname string `json:"serviceofferingname,omitempty"`
0000000000000000000000000000000000000000;;		State               string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Templateid          string `json:"templateid,omitempty"`
0000000000000000000000000000000000000000;;		Version             string `json:"version,omitempty"`
0000000000000000000000000000000000000000;;		Vpcid               string `json:"vpcid,omitempty"`
0000000000000000000000000000000000000000;;		Vpcname             string `json:"vpcname,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid              string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename            string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListVirtualRouterElementsParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVirtualRouterElementsParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["enabled"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("enabled", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["keyword"]; found {
0000000000000000000000000000000000000000;;			u.Set("keyword", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["nspid"]; found {
0000000000000000000000000000000000000000;;			u.Set("nspid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["page"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.Itoa(v.(int))
0000000000000000000000000000000000000000;;			u.Set("page", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["pagesize"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.Itoa(v.(int))
0000000000000000000000000000000000000000;;			u.Set("pagesize", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVirtualRouterElementsParams) SetEnabled(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["enabled"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVirtualRouterElementsParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVirtualRouterElementsParams) SetKeyword(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["keyword"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVirtualRouterElementsParams) SetNspid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["nspid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVirtualRouterElementsParams) SetPage(v int) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["page"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVirtualRouterElementsParams) SetPagesize(v int) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["pagesize"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new ListVirtualRouterElementsParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *RouterService) NewListVirtualRouterElementsParams() *ListVirtualRouterElementsParams {
0000000000000000000000000000000000000000;;		p := &ListVirtualRouterElementsParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is a courtesy helper function, which in some cases may not work as expected!
0000000000000000000000000000000000000000;;	func (s *RouterService) GetVirtualRouterElementByID(id string, opts ...OptionFunc) (*VirtualRouterElement, int, error) {
0000000000000000000000000000000000000000;;		p := &ListVirtualRouterElementsParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, fn := range opts {
0000000000000000000000000000000000000000;;			if err := fn(s.cs, p); err != nil {
0000000000000000000000000000000000000000;;				return nil, -1, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		l, err := s.ListVirtualRouterElements(p)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if strings.Contains(err.Error(), fmt.Sprintf(
0000000000000000000000000000000000000000;;				"Invalid parameter id value=%s due to incorrect long value format, "+
0000000000000000000000000000000000000000;;					"or entity does not exist", id)) {
0000000000000000000000000000000000000000;;				return nil, 0, fmt.Errorf("No match found for %s: %+v", id, l)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, -1, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 0 {
0000000000000000000000000000000000000000;;			return nil, l.Count, fmt.Errorf("No match found for %s: %+v", id, l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 1 {
0000000000000000000000000000000000000000;;			return l.VirtualRouterElements[0], l.Count, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, l.Count, fmt.Errorf("There is more then one result for VirtualRouterElement UUID: %s!", id)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Lists all available virtual router elements.
0000000000000000000000000000000000000000;;	func (s *RouterService) ListVirtualRouterElements(p *ListVirtualRouterElementsParams) (*ListVirtualRouterElementsResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("listVirtualRouterElements", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r ListVirtualRouterElementsResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListVirtualRouterElementsResponse struct {
0000000000000000000000000000000000000000;;		Count                 int                     `json:"count"`
0000000000000000000000000000000000000000;;		VirtualRouterElements []*VirtualRouterElement `json:"virtualrouterelement"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualRouterElement struct {
0000000000000000000000000000000000000000;;		Account   string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Domain    string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid  string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Enabled   bool   `json:"enabled,omitempty"`
0000000000000000000000000000000000000000;;		Id        string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Nspid     string `json:"nspid,omitempty"`
0000000000000000000000000000000000000000;;		Project   string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConfigureVirtualRouterElementParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ConfigureVirtualRouterElementParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["enabled"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("enabled", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ConfigureVirtualRouterElementParams) SetEnabled(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["enabled"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ConfigureVirtualRouterElementParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new ConfigureVirtualRouterElementParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *RouterService) NewConfigureVirtualRouterElementParams(enabled bool, id string) *ConfigureVirtualRouterElementParams {
0000000000000000000000000000000000000000;;		p := &ConfigureVirtualRouterElementParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["enabled"] = enabled
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Configures a virtual router element.
0000000000000000000000000000000000000000;;	func (s *RouterService) ConfigureVirtualRouterElement(p *ConfigureVirtualRouterElementParams) (*ConfigureVirtualRouterElementResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("configureVirtualRouterElement", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r ConfigureVirtualRouterElementResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConfigureVirtualRouterElementResponse struct {
0000000000000000000000000000000000000000;;		JobID     string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Account   string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Domain    string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid  string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Enabled   bool   `json:"enabled,omitempty"`
0000000000000000000000000000000000000000;;		Id        string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Nspid     string `json:"nspid,omitempty"`
0000000000000000000000000000000000000000;;		Project   string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateVirtualRouterElementParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateVirtualRouterElementParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["nspid"]; found {
0000000000000000000000000000000000000000;;			u.Set("nspid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["providertype"]; found {
0000000000000000000000000000000000000000;;			u.Set("providertype", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateVirtualRouterElementParams) SetNspid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["nspid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateVirtualRouterElementParams) SetProvidertype(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["providertype"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new CreateVirtualRouterElementParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *RouterService) NewCreateVirtualRouterElementParams(nspid string) *CreateVirtualRouterElementParams {
0000000000000000000000000000000000000000;;		p := &CreateVirtualRouterElementParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["nspid"] = nspid
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create a virtual router element.
0000000000000000000000000000000000000000;;	func (s *RouterService) CreateVirtualRouterElement(p *CreateVirtualRouterElementParams) (*CreateVirtualRouterElementResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("createVirtualRouterElement", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r CreateVirtualRouterElementResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateVirtualRouterElementResponse struct {
0000000000000000000000000000000000000000;;		JobID     string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Account   string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Domain    string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid  string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Enabled   bool   `json:"enabled,omitempty"`
0000000000000000000000000000000000000000;;		Id        string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Nspid     string `json:"nspid,omitempty"`
0000000000000000000000000000000000000000;;		Project   string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;	}
