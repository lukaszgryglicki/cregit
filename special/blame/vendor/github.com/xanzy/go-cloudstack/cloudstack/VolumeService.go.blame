0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Copyright 2016, Sander van Harmelen
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
0000000000000000000000000000000000000000;;	//
0a16da49b5158d8aef850f86fc8936f4afa6c64a;;	
0000000000000000000000000000000000000000;;	package cloudstack
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AttachVolumeParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AttachVolumeParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["deviceid"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatInt(v.(int64), 10)
0000000000000000000000000000000000000000;;			u.Set("deviceid", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["virtualmachineid"]; found {
0000000000000000000000000000000000000000;;			u.Set("virtualmachineid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AttachVolumeParams) SetDeviceid(v int64) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["deviceid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AttachVolumeParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AttachVolumeParams) SetVirtualmachineid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["virtualmachineid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new AttachVolumeParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VolumeService) NewAttachVolumeParams(id string, virtualmachineid string) *AttachVolumeParams {
0000000000000000000000000000000000000000;;		p := &AttachVolumeParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		p.p["virtualmachineid"] = virtualmachineid
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Attaches a disk volume to a virtual machine.
0000000000000000000000000000000000000000;;	func (s *VolumeService) AttachVolume(p *AttachVolumeParams) (*AttachVolumeResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("attachVolume", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r AttachVolumeResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AttachVolumeResponse struct {
0000000000000000000000000000000000000000;;		JobID                      string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Account                    string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Attached                   string `json:"attached,omitempty"`
0000000000000000000000000000000000000000;;		Chaininfo                  string `json:"chaininfo,omitempty"`
0000000000000000000000000000000000000000;;		Created                    string `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Destroyed                  bool   `json:"destroyed,omitempty"`
0000000000000000000000000000000000000000;;		Deviceid                   int64  `json:"deviceid,omitempty"`
0000000000000000000000000000000000000000;;		DiskBytesReadRate          int64  `json:"diskBytesReadRate,omitempty"`
0000000000000000000000000000000000000000;;		DiskBytesWriteRate         int64  `json:"diskBytesWriteRate,omitempty"`
0000000000000000000000000000000000000000;;		DiskIopsReadRate           int64  `json:"diskIopsReadRate,omitempty"`
0000000000000000000000000000000000000000;;		DiskIopsWriteRate          int64  `json:"diskIopsWriteRate,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingdisplaytext    string `json:"diskofferingdisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingid             string `json:"diskofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingname           string `json:"diskofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Displayvolume              bool   `json:"displayvolume,omitempty"`
0000000000000000000000000000000000000000;;		Domain                     string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid                   string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor                 string `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Id                         string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Isextractable              bool   `json:"isextractable,omitempty"`
0000000000000000000000000000000000000000;;		Isodisplaytext             string `json:"isodisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Isoid                      string `json:"isoid,omitempty"`
0000000000000000000000000000000000000000;;		Isoname                    string `json:"isoname,omitempty"`
0000000000000000000000000000000000000000;;		Maxiops                    int64  `json:"maxiops,omitempty"`
0000000000000000000000000000000000000000;;		Miniops                    int64  `json:"miniops,omitempty"`
0000000000000000000000000000000000000000;;		Name                       string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Path                       string `json:"path,omitempty"`
0000000000000000000000000000000000000000;;		Project                    string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid                  string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;		Provisioningtype           string `json:"provisioningtype,omitempty"`
0000000000000000000000000000000000000000;;		Quiescevm                  bool   `json:"quiescevm,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingdisplaytext string `json:"serviceofferingdisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingid          string `json:"serviceofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingname        string `json:"serviceofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Size                       int64  `json:"size,omitempty"`
0000000000000000000000000000000000000000;;		Snapshotid                 string `json:"snapshotid,omitempty"`
0000000000000000000000000000000000000000;;		State                      string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Status                     string `json:"status,omitempty"`
0000000000000000000000000000000000000000;;		Storage                    string `json:"storage,omitempty"`
0000000000000000000000000000000000000000;;		Storageid                  string `json:"storageid,omitempty"`
0000000000000000000000000000000000000000;;		Storagetype                string `json:"storagetype,omitempty"`
0000000000000000000000000000000000000000;;		Tags                       []struct {
0000000000000000000000000000000000000000;;			Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;			Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;			Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;			Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;			Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Templatedisplaytext string `json:"templatedisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Templateid          string `json:"templateid,omitempty"`
0000000000000000000000000000000000000000;;		Templatename        string `json:"templatename,omitempty"`
0000000000000000000000000000000000000000;;		Type                string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Virtualmachineid    string `json:"virtualmachineid,omitempty"`
0000000000000000000000000000000000000000;;		Vmdisplayname       string `json:"vmdisplayname,omitempty"`
0000000000000000000000000000000000000000;;		Vmname              string `json:"vmname,omitempty"`
0000000000000000000000000000000000000000;;		Vmstate             string `json:"vmstate,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid              string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename            string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UploadVolumeParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UploadVolumeParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["account"]; found {
0000000000000000000000000000000000000000;;			u.Set("account", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["checksum"]; found {
0000000000000000000000000000000000000000;;			u.Set("checksum", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["diskofferingid"]; found {
0000000000000000000000000000000000000000;;			u.Set("diskofferingid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["domainid"]; found {
0000000000000000000000000000000000000000;;			u.Set("domainid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["format"]; found {
0000000000000000000000000000000000000000;;			u.Set("format", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["imagestoreuuid"]; found {
0000000000000000000000000000000000000000;;			u.Set("imagestoreuuid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["name"]; found {
0000000000000000000000000000000000000000;;			u.Set("name", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["projectid"]; found {
0000000000000000000000000000000000000000;;			u.Set("projectid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["url"]; found {
0000000000000000000000000000000000000000;;			u.Set("url", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["zoneid"]; found {
0000000000000000000000000000000000000000;;			u.Set("zoneid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UploadVolumeParams) SetAccount(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["account"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UploadVolumeParams) SetChecksum(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["checksum"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UploadVolumeParams) SetDiskofferingid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["diskofferingid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UploadVolumeParams) SetDomainid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["domainid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UploadVolumeParams) SetFormat(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["format"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UploadVolumeParams) SetImagestoreuuid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["imagestoreuuid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UploadVolumeParams) SetName(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["name"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UploadVolumeParams) SetProjectid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["projectid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UploadVolumeParams) SetUrl(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["url"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UploadVolumeParams) SetZoneid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["zoneid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new UploadVolumeParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VolumeService) NewUploadVolumeParams(format string, name string, url string, zoneid string) *UploadVolumeParams {
0000000000000000000000000000000000000000;;		p := &UploadVolumeParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["format"] = format
0000000000000000000000000000000000000000;;		p.p["name"] = name
0000000000000000000000000000000000000000;;		p.p["url"] = url
0000000000000000000000000000000000000000;;		p.p["zoneid"] = zoneid
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uploads a data disk.
0000000000000000000000000000000000000000;;	func (s *VolumeService) UploadVolume(p *UploadVolumeParams) (*UploadVolumeResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("uploadVolume", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r UploadVolumeResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UploadVolumeResponse struct {
0000000000000000000000000000000000000000;;		JobID                      string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Account                    string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Attached                   string `json:"attached,omitempty"`
0000000000000000000000000000000000000000;;		Chaininfo                  string `json:"chaininfo,omitempty"`
0000000000000000000000000000000000000000;;		Created                    string `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Destroyed                  bool   `json:"destroyed,omitempty"`
0000000000000000000000000000000000000000;;		Deviceid                   int64  `json:"deviceid,omitempty"`
0000000000000000000000000000000000000000;;		DiskBytesReadRate          int64  `json:"diskBytesReadRate,omitempty"`
0000000000000000000000000000000000000000;;		DiskBytesWriteRate         int64  `json:"diskBytesWriteRate,omitempty"`
0000000000000000000000000000000000000000;;		DiskIopsReadRate           int64  `json:"diskIopsReadRate,omitempty"`
0000000000000000000000000000000000000000;;		DiskIopsWriteRate          int64  `json:"diskIopsWriteRate,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingdisplaytext    string `json:"diskofferingdisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingid             string `json:"diskofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingname           string `json:"diskofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Displayvolume              bool   `json:"displayvolume,omitempty"`
0000000000000000000000000000000000000000;;		Domain                     string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid                   string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor                 string `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Id                         string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Isextractable              bool   `json:"isextractable,omitempty"`
0000000000000000000000000000000000000000;;		Isodisplaytext             string `json:"isodisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Isoid                      string `json:"isoid,omitempty"`
0000000000000000000000000000000000000000;;		Isoname                    string `json:"isoname,omitempty"`
0000000000000000000000000000000000000000;;		Maxiops                    int64  `json:"maxiops,omitempty"`
0000000000000000000000000000000000000000;;		Miniops                    int64  `json:"miniops,omitempty"`
0000000000000000000000000000000000000000;;		Name                       string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Path                       string `json:"path,omitempty"`
0000000000000000000000000000000000000000;;		Project                    string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid                  string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;		Provisioningtype           string `json:"provisioningtype,omitempty"`
0000000000000000000000000000000000000000;;		Quiescevm                  bool   `json:"quiescevm,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingdisplaytext string `json:"serviceofferingdisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingid          string `json:"serviceofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingname        string `json:"serviceofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Size                       int64  `json:"size,omitempty"`
0000000000000000000000000000000000000000;;		Snapshotid                 string `json:"snapshotid,omitempty"`
0000000000000000000000000000000000000000;;		State                      string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Status                     string `json:"status,omitempty"`
0000000000000000000000000000000000000000;;		Storage                    string `json:"storage,omitempty"`
0000000000000000000000000000000000000000;;		Storageid                  string `json:"storageid,omitempty"`
0000000000000000000000000000000000000000;;		Storagetype                string `json:"storagetype,omitempty"`
0000000000000000000000000000000000000000;;		Tags                       []struct {
0000000000000000000000000000000000000000;;			Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;			Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;			Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;			Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;			Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Templatedisplaytext string `json:"templatedisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Templateid          string `json:"templateid,omitempty"`
0000000000000000000000000000000000000000;;		Templatename        string `json:"templatename,omitempty"`
0000000000000000000000000000000000000000;;		Type                string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Virtualmachineid    string `json:"virtualmachineid,omitempty"`
0000000000000000000000000000000000000000;;		Vmdisplayname       string `json:"vmdisplayname,omitempty"`
0000000000000000000000000000000000000000;;		Vmname              string `json:"vmname,omitempty"`
0000000000000000000000000000000000000000;;		Vmstate             string `json:"vmstate,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid              string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename            string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DetachVolumeParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DetachVolumeParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["deviceid"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatInt(v.(int64), 10)
0000000000000000000000000000000000000000;;			u.Set("deviceid", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["virtualmachineid"]; found {
0000000000000000000000000000000000000000;;			u.Set("virtualmachineid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DetachVolumeParams) SetDeviceid(v int64) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["deviceid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DetachVolumeParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DetachVolumeParams) SetVirtualmachineid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["virtualmachineid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new DetachVolumeParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VolumeService) NewDetachVolumeParams() *DetachVolumeParams {
0000000000000000000000000000000000000000;;		p := &DetachVolumeParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Detaches a disk volume from a virtual machine.
0000000000000000000000000000000000000000;;	func (s *VolumeService) DetachVolume(p *DetachVolumeParams) (*DetachVolumeResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("detachVolume", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r DetachVolumeResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DetachVolumeResponse struct {
0000000000000000000000000000000000000000;;		JobID                      string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Account                    string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Attached                   string `json:"attached,omitempty"`
0000000000000000000000000000000000000000;;		Chaininfo                  string `json:"chaininfo,omitempty"`
0000000000000000000000000000000000000000;;		Created                    string `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Destroyed                  bool   `json:"destroyed,omitempty"`
0000000000000000000000000000000000000000;;		Deviceid                   int64  `json:"deviceid,omitempty"`
0000000000000000000000000000000000000000;;		DiskBytesReadRate          int64  `json:"diskBytesReadRate,omitempty"`
0000000000000000000000000000000000000000;;		DiskBytesWriteRate         int64  `json:"diskBytesWriteRate,omitempty"`
0000000000000000000000000000000000000000;;		DiskIopsReadRate           int64  `json:"diskIopsReadRate,omitempty"`
0000000000000000000000000000000000000000;;		DiskIopsWriteRate          int64  `json:"diskIopsWriteRate,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingdisplaytext    string `json:"diskofferingdisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingid             string `json:"diskofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingname           string `json:"diskofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Displayvolume              bool   `json:"displayvolume,omitempty"`
0000000000000000000000000000000000000000;;		Domain                     string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid                   string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor                 string `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Id                         string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Isextractable              bool   `json:"isextractable,omitempty"`
0000000000000000000000000000000000000000;;		Isodisplaytext             string `json:"isodisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Isoid                      string `json:"isoid,omitempty"`
0000000000000000000000000000000000000000;;		Isoname                    string `json:"isoname,omitempty"`
0000000000000000000000000000000000000000;;		Maxiops                    int64  `json:"maxiops,omitempty"`
0000000000000000000000000000000000000000;;		Miniops                    int64  `json:"miniops,omitempty"`
0000000000000000000000000000000000000000;;		Name                       string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Path                       string `json:"path,omitempty"`
0000000000000000000000000000000000000000;;		Project                    string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid                  string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;		Provisioningtype           string `json:"provisioningtype,omitempty"`
0000000000000000000000000000000000000000;;		Quiescevm                  bool   `json:"quiescevm,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingdisplaytext string `json:"serviceofferingdisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingid          string `json:"serviceofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingname        string `json:"serviceofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Size                       int64  `json:"size,omitempty"`
0000000000000000000000000000000000000000;;		Snapshotid                 string `json:"snapshotid,omitempty"`
0000000000000000000000000000000000000000;;		State                      string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Status                     string `json:"status,omitempty"`
0000000000000000000000000000000000000000;;		Storage                    string `json:"storage,omitempty"`
0000000000000000000000000000000000000000;;		Storageid                  string `json:"storageid,omitempty"`
0000000000000000000000000000000000000000;;		Storagetype                string `json:"storagetype,omitempty"`
0000000000000000000000000000000000000000;;		Tags                       []struct {
0000000000000000000000000000000000000000;;			Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;			Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;			Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;			Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;			Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Templatedisplaytext string `json:"templatedisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Templateid          string `json:"templateid,omitempty"`
0000000000000000000000000000000000000000;;		Templatename        string `json:"templatename,omitempty"`
0000000000000000000000000000000000000000;;		Type                string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Virtualmachineid    string `json:"virtualmachineid,omitempty"`
0000000000000000000000000000000000000000;;		Vmdisplayname       string `json:"vmdisplayname,omitempty"`
0000000000000000000000000000000000000000;;		Vmname              string `json:"vmname,omitempty"`
0000000000000000000000000000000000000000;;		Vmstate             string `json:"vmstate,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid              string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename            string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateVolumeParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateVolumeParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["account"]; found {
0000000000000000000000000000000000000000;;			u.Set("account", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["customid"]; found {
0000000000000000000000000000000000000000;;			u.Set("customid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["diskofferingid"]; found {
0000000000000000000000000000000000000000;;			u.Set("diskofferingid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["displayvolume"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("displayvolume", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["domainid"]; found {
0000000000000000000000000000000000000000;;			u.Set("domainid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["maxiops"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatInt(v.(int64), 10)
0000000000000000000000000000000000000000;;			u.Set("maxiops", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["miniops"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatInt(v.(int64), 10)
0000000000000000000000000000000000000000;;			u.Set("miniops", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["name"]; found {
0000000000000000000000000000000000000000;;			u.Set("name", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["projectid"]; found {
0000000000000000000000000000000000000000;;			u.Set("projectid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["size"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatInt(v.(int64), 10)
0000000000000000000000000000000000000000;;			u.Set("size", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["snapshotid"]; found {
0000000000000000000000000000000000000000;;			u.Set("snapshotid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["virtualmachineid"]; found {
0000000000000000000000000000000000000000;;			u.Set("virtualmachineid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["zoneid"]; found {
0000000000000000000000000000000000000000;;			u.Set("zoneid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateVolumeParams) SetAccount(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["account"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateVolumeParams) SetCustomid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["customid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateVolumeParams) SetDiskofferingid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["diskofferingid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateVolumeParams) SetDisplayvolume(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["displayvolume"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateVolumeParams) SetDomainid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["domainid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateVolumeParams) SetMaxiops(v int64) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["maxiops"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateVolumeParams) SetMiniops(v int64) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["miniops"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateVolumeParams) SetName(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["name"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateVolumeParams) SetProjectid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["projectid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateVolumeParams) SetSize(v int64) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["size"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateVolumeParams) SetSnapshotid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["snapshotid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateVolumeParams) SetVirtualmachineid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["virtualmachineid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateVolumeParams) SetZoneid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["zoneid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new CreateVolumeParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VolumeService) NewCreateVolumeParams() *CreateVolumeParams {
0000000000000000000000000000000000000000;;		p := &CreateVolumeParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Creates a disk volume from a disk offering. This disk volume must still be attached to a virtual machine to make use of it.
0000000000000000000000000000000000000000;;	func (s *VolumeService) CreateVolume(p *CreateVolumeParams) (*CreateVolumeResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("createVolume", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r CreateVolumeResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateVolumeResponse struct {
0000000000000000000000000000000000000000;;		JobID                      string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Account                    string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Attached                   string `json:"attached,omitempty"`
0000000000000000000000000000000000000000;;		Chaininfo                  string `json:"chaininfo,omitempty"`
0000000000000000000000000000000000000000;;		Created                    string `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Destroyed                  bool   `json:"destroyed,omitempty"`
0000000000000000000000000000000000000000;;		Deviceid                   int64  `json:"deviceid,omitempty"`
0000000000000000000000000000000000000000;;		DiskBytesReadRate          int64  `json:"diskBytesReadRate,omitempty"`
0000000000000000000000000000000000000000;;		DiskBytesWriteRate         int64  `json:"diskBytesWriteRate,omitempty"`
0000000000000000000000000000000000000000;;		DiskIopsReadRate           int64  `json:"diskIopsReadRate,omitempty"`
0000000000000000000000000000000000000000;;		DiskIopsWriteRate          int64  `json:"diskIopsWriteRate,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingdisplaytext    string `json:"diskofferingdisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingid             string `json:"diskofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingname           string `json:"diskofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Displayvolume              bool   `json:"displayvolume,omitempty"`
0000000000000000000000000000000000000000;;		Domain                     string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid                   string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor                 string `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Id                         string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Isextractable              bool   `json:"isextractable,omitempty"`
0000000000000000000000000000000000000000;;		Isodisplaytext             string `json:"isodisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Isoid                      string `json:"isoid,omitempty"`
0000000000000000000000000000000000000000;;		Isoname                    string `json:"isoname,omitempty"`
0000000000000000000000000000000000000000;;		Maxiops                    int64  `json:"maxiops,omitempty"`
0000000000000000000000000000000000000000;;		Miniops                    int64  `json:"miniops,omitempty"`
0000000000000000000000000000000000000000;;		Name                       string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Path                       string `json:"path,omitempty"`
0000000000000000000000000000000000000000;;		Project                    string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid                  string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;		Provisioningtype           string `json:"provisioningtype,omitempty"`
0000000000000000000000000000000000000000;;		Quiescevm                  bool   `json:"quiescevm,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingdisplaytext string `json:"serviceofferingdisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingid          string `json:"serviceofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingname        string `json:"serviceofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Size                       int64  `json:"size,omitempty"`
0000000000000000000000000000000000000000;;		Snapshotid                 string `json:"snapshotid,omitempty"`
0000000000000000000000000000000000000000;;		State                      string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Status                     string `json:"status,omitempty"`
0000000000000000000000000000000000000000;;		Storage                    string `json:"storage,omitempty"`
0000000000000000000000000000000000000000;;		Storageid                  string `json:"storageid,omitempty"`
0000000000000000000000000000000000000000;;		Storagetype                string `json:"storagetype,omitempty"`
0000000000000000000000000000000000000000;;		Tags                       []struct {
0000000000000000000000000000000000000000;;			Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;			Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;			Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;			Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;			Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Templatedisplaytext string `json:"templatedisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Templateid          string `json:"templateid,omitempty"`
0000000000000000000000000000000000000000;;		Templatename        string `json:"templatename,omitempty"`
0000000000000000000000000000000000000000;;		Type                string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Virtualmachineid    string `json:"virtualmachineid,omitempty"`
0000000000000000000000000000000000000000;;		Vmdisplayname       string `json:"vmdisplayname,omitempty"`
0000000000000000000000000000000000000000;;		Vmname              string `json:"vmname,omitempty"`
0000000000000000000000000000000000000000;;		Vmstate             string `json:"vmstate,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid              string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename            string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteVolumeParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeleteVolumeParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeleteVolumeParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new DeleteVolumeParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VolumeService) NewDeleteVolumeParams(id string) *DeleteVolumeParams {
0000000000000000000000000000000000000000;;		p := &DeleteVolumeParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Deletes a detached disk volume.
0000000000000000000000000000000000000000;;	func (s *VolumeService) DeleteVolume(p *DeleteVolumeParams) (*DeleteVolumeResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("deleteVolume", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r DeleteVolumeResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteVolumeResponse struct {
0000000000000000000000000000000000000000;;		Displaytext string `json:"displaytext,omitempty"`
0000000000000000000000000000000000000000;;		Success     string `json:"success,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListVolumesParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVolumesParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["account"]; found {
0000000000000000000000000000000000000000;;			u.Set("account", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["diskofferingid"]; found {
0000000000000000000000000000000000000000;;			u.Set("diskofferingid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["displayvolume"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("displayvolume", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["domainid"]; found {
0000000000000000000000000000000000000000;;			u.Set("domainid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["hostid"]; found {
0000000000000000000000000000000000000000;;			u.Set("hostid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["isrecursive"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("isrecursive", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["keyword"]; found {
0000000000000000000000000000000000000000;;			u.Set("keyword", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["listall"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("listall", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["name"]; found {
0000000000000000000000000000000000000000;;			u.Set("name", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["page"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.Itoa(v.(int))
0000000000000000000000000000000000000000;;			u.Set("page", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["pagesize"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.Itoa(v.(int))
0000000000000000000000000000000000000000;;			u.Set("pagesize", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["podid"]; found {
0000000000000000000000000000000000000000;;			u.Set("podid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["projectid"]; found {
0000000000000000000000000000000000000000;;			u.Set("projectid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["storageid"]; found {
0000000000000000000000000000000000000000;;			u.Set("storageid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["tags"]; found {
0000000000000000000000000000000000000000;;			i := 0
0000000000000000000000000000000000000000;;			for k, vv := range v.(map[string]string) {
0000000000000000000000000000000000000000;;				u.Set(fmt.Sprintf("tags[%d].key", i), k)
0000000000000000000000000000000000000000;;				u.Set(fmt.Sprintf("tags[%d].value", i), vv)
0000000000000000000000000000000000000000;;				i++
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["type"]; found {
0000000000000000000000000000000000000000;;			u.Set("type", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["virtualmachineid"]; found {
0000000000000000000000000000000000000000;;			u.Set("virtualmachineid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["zoneid"]; found {
0000000000000000000000000000000000000000;;			u.Set("zoneid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVolumesParams) SetAccount(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["account"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVolumesParams) SetDiskofferingid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["diskofferingid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVolumesParams) SetDisplayvolume(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["displayvolume"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVolumesParams) SetDomainid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["domainid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVolumesParams) SetHostid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["hostid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVolumesParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVolumesParams) SetIsrecursive(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["isrecursive"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVolumesParams) SetKeyword(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["keyword"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVolumesParams) SetListall(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["listall"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVolumesParams) SetName(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["name"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVolumesParams) SetPage(v int) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["page"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVolumesParams) SetPagesize(v int) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["pagesize"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVolumesParams) SetPodid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["podid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVolumesParams) SetProjectid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["projectid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVolumesParams) SetStorageid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["storageid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVolumesParams) SetTags(v map[string]string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["tags"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVolumesParams) SetType(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["volumeType"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVolumesParams) SetVirtualmachineid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["virtualmachineid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVolumesParams) SetZoneid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["zoneid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new ListVolumesParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VolumeService) NewListVolumesParams() *ListVolumesParams {
0000000000000000000000000000000000000000;;		p := &ListVolumesParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is a courtesy helper function, which in some cases may not work as expected!
0000000000000000000000000000000000000000;;	func (s *VolumeService) GetVolumeID(name string, opts ...OptionFunc) (string, int, error) {
0000000000000000000000000000000000000000;;		p := &ListVolumesParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.p["name"] = name
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, fn := range opts {
0000000000000000000000000000000000000000;;			if err := fn(s.cs, p); err != nil {
0000000000000000000000000000000000000000;;				return "", -1, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		l, err := s.ListVolumes(p)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", -1, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 0 {
0000000000000000000000000000000000000000;;			return "", l.Count, fmt.Errorf("No match found for %s: %+v", name, l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 1 {
0000000000000000000000000000000000000000;;			return l.Volumes[0].Id, l.Count, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count > 1 {
0000000000000000000000000000000000000000;;			for _, v := range l.Volumes {
0000000000000000000000000000000000000000;;				if v.Name == name {
0000000000000000000000000000000000000000;;					return v.Id, l.Count, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "", l.Count, fmt.Errorf("Could not find an exact match for %s: %+v", name, l)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is a courtesy helper function, which in some cases may not work as expected!
0000000000000000000000000000000000000000;;	func (s *VolumeService) GetVolumeByName(name string, opts ...OptionFunc) (*Volume, int, error) {
0000000000000000000000000000000000000000;;		id, count, err := s.GetVolumeID(name, opts...)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, count, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r, count, err := s.GetVolumeByID(id, opts...)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, count, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return r, count, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is a courtesy helper function, which in some cases may not work as expected!
0000000000000000000000000000000000000000;;	func (s *VolumeService) GetVolumeByID(id string, opts ...OptionFunc) (*Volume, int, error) {
0000000000000000000000000000000000000000;;		p := &ListVolumesParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, fn := range opts {
0000000000000000000000000000000000000000;;			if err := fn(s.cs, p); err != nil {
0000000000000000000000000000000000000000;;				return nil, -1, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		l, err := s.ListVolumes(p)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if strings.Contains(err.Error(), fmt.Sprintf(
0000000000000000000000000000000000000000;;				"Invalid parameter id value=%s due to incorrect long value format, "+
0000000000000000000000000000000000000000;;					"or entity does not exist", id)) {
0000000000000000000000000000000000000000;;				return nil, 0, fmt.Errorf("No match found for %s: %+v", id, l)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, -1, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 0 {
0000000000000000000000000000000000000000;;			return nil, l.Count, fmt.Errorf("No match found for %s: %+v", id, l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 1 {
0000000000000000000000000000000000000000;;			return l.Volumes[0], l.Count, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, l.Count, fmt.Errorf("There is more then one result for Volume UUID: %s!", id)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Lists all volumes.
0000000000000000000000000000000000000000;;	func (s *VolumeService) ListVolumes(p *ListVolumesParams) (*ListVolumesResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("listVolumes", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r ListVolumesResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListVolumesResponse struct {
0000000000000000000000000000000000000000;;		Count   int       `json:"count"`
0000000000000000000000000000000000000000;;		Volumes []*Volume `json:"volume"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Volume struct {
0000000000000000000000000000000000000000;;		Account                    string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Attached                   string `json:"attached,omitempty"`
0000000000000000000000000000000000000000;;		Chaininfo                  string `json:"chaininfo,omitempty"`
0000000000000000000000000000000000000000;;		Created                    string `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Destroyed                  bool   `json:"destroyed,omitempty"`
0000000000000000000000000000000000000000;;		Deviceid                   int64  `json:"deviceid,omitempty"`
0000000000000000000000000000000000000000;;		DiskBytesReadRate          int64  `json:"diskBytesReadRate,omitempty"`
0000000000000000000000000000000000000000;;		DiskBytesWriteRate         int64  `json:"diskBytesWriteRate,omitempty"`
0000000000000000000000000000000000000000;;		DiskIopsReadRate           int64  `json:"diskIopsReadRate,omitempty"`
0000000000000000000000000000000000000000;;		DiskIopsWriteRate          int64  `json:"diskIopsWriteRate,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingdisplaytext    string `json:"diskofferingdisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingid             string `json:"diskofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingname           string `json:"diskofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Displayvolume              bool   `json:"displayvolume,omitempty"`
0000000000000000000000000000000000000000;;		Domain                     string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid                   string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor                 string `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Id                         string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Isextractable              bool   `json:"isextractable,omitempty"`
0000000000000000000000000000000000000000;;		Isodisplaytext             string `json:"isodisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Isoid                      string `json:"isoid,omitempty"`
0000000000000000000000000000000000000000;;		Isoname                    string `json:"isoname,omitempty"`
0000000000000000000000000000000000000000;;		Maxiops                    int64  `json:"maxiops,omitempty"`
0000000000000000000000000000000000000000;;		Miniops                    int64  `json:"miniops,omitempty"`
0000000000000000000000000000000000000000;;		Name                       string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Path                       string `json:"path,omitempty"`
0000000000000000000000000000000000000000;;		Project                    string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid                  string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;		Provisioningtype           string `json:"provisioningtype,omitempty"`
0000000000000000000000000000000000000000;;		Quiescevm                  bool   `json:"quiescevm,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingdisplaytext string `json:"serviceofferingdisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingid          string `json:"serviceofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingname        string `json:"serviceofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Size                       int64  `json:"size,omitempty"`
0000000000000000000000000000000000000000;;		Snapshotid                 string `json:"snapshotid,omitempty"`
0000000000000000000000000000000000000000;;		State                      string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Status                     string `json:"status,omitempty"`
0000000000000000000000000000000000000000;;		Storage                    string `json:"storage,omitempty"`
0000000000000000000000000000000000000000;;		Storageid                  string `json:"storageid,omitempty"`
0000000000000000000000000000000000000000;;		Storagetype                string `json:"storagetype,omitempty"`
0000000000000000000000000000000000000000;;		Tags                       []struct {
0000000000000000000000000000000000000000;;			Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;			Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;			Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;			Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;			Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Templatedisplaytext string `json:"templatedisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Templateid          string `json:"templateid,omitempty"`
0000000000000000000000000000000000000000;;		Templatename        string `json:"templatename,omitempty"`
0000000000000000000000000000000000000000;;		Type                string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Virtualmachineid    string `json:"virtualmachineid,omitempty"`
0000000000000000000000000000000000000000;;		Vmdisplayname       string `json:"vmdisplayname,omitempty"`
0000000000000000000000000000000000000000;;		Vmname              string `json:"vmname,omitempty"`
0000000000000000000000000000000000000000;;		Vmstate             string `json:"vmstate,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid              string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename            string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtractVolumeParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ExtractVolumeParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["mode"]; found {
0000000000000000000000000000000000000000;;			u.Set("mode", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["url"]; found {
0000000000000000000000000000000000000000;;			u.Set("url", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["zoneid"]; found {
0000000000000000000000000000000000000000;;			u.Set("zoneid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ExtractVolumeParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ExtractVolumeParams) SetMode(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["mode"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ExtractVolumeParams) SetUrl(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["url"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ExtractVolumeParams) SetZoneid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["zoneid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new ExtractVolumeParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VolumeService) NewExtractVolumeParams(id string, mode string, zoneid string) *ExtractVolumeParams {
0000000000000000000000000000000000000000;;		p := &ExtractVolumeParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		p.p["mode"] = mode
0000000000000000000000000000000000000000;;		p.p["zoneid"] = zoneid
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Extracts volume
0000000000000000000000000000000000000000;;	func (s *VolumeService) ExtractVolume(p *ExtractVolumeParams) (*ExtractVolumeResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("extractVolume", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r ExtractVolumeResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtractVolumeResponse struct {
0000000000000000000000000000000000000000;;		JobID            string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Accountid        string `json:"accountid,omitempty"`
0000000000000000000000000000000000000000;;		Created          string `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		ExtractId        string `json:"extractId,omitempty"`
0000000000000000000000000000000000000000;;		ExtractMode      string `json:"extractMode,omitempty"`
0000000000000000000000000000000000000000;;		Id               string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Name             string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Resultstring     string `json:"resultstring,omitempty"`
0000000000000000000000000000000000000000;;		State            string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Status           string `json:"status,omitempty"`
0000000000000000000000000000000000000000;;		Storagetype      string `json:"storagetype,omitempty"`
0000000000000000000000000000000000000000;;		Uploadpercentage int    `json:"uploadpercentage,omitempty"`
0000000000000000000000000000000000000000;;		Url              string `json:"url,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid           string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename         string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MigrateVolumeParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *MigrateVolumeParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["livemigrate"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("livemigrate", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["storageid"]; found {
0000000000000000000000000000000000000000;;			u.Set("storageid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["volumeid"]; found {
0000000000000000000000000000000000000000;;			u.Set("volumeid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *MigrateVolumeParams) SetLivemigrate(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["livemigrate"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *MigrateVolumeParams) SetStorageid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["storageid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *MigrateVolumeParams) SetVolumeid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["volumeid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new MigrateVolumeParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VolumeService) NewMigrateVolumeParams(storageid string, volumeid string) *MigrateVolumeParams {
0000000000000000000000000000000000000000;;		p := &MigrateVolumeParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["storageid"] = storageid
0000000000000000000000000000000000000000;;		p.p["volumeid"] = volumeid
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Migrate volume
0000000000000000000000000000000000000000;;	func (s *VolumeService) MigrateVolume(p *MigrateVolumeParams) (*MigrateVolumeResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("migrateVolume", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r MigrateVolumeResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MigrateVolumeResponse struct {
0000000000000000000000000000000000000000;;		JobID                      string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Account                    string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Attached                   string `json:"attached,omitempty"`
0000000000000000000000000000000000000000;;		Chaininfo                  string `json:"chaininfo,omitempty"`
0000000000000000000000000000000000000000;;		Created                    string `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Destroyed                  bool   `json:"destroyed,omitempty"`
0000000000000000000000000000000000000000;;		Deviceid                   int64  `json:"deviceid,omitempty"`
0000000000000000000000000000000000000000;;		DiskBytesReadRate          int64  `json:"diskBytesReadRate,omitempty"`
0000000000000000000000000000000000000000;;		DiskBytesWriteRate         int64  `json:"diskBytesWriteRate,omitempty"`
0000000000000000000000000000000000000000;;		DiskIopsReadRate           int64  `json:"diskIopsReadRate,omitempty"`
0000000000000000000000000000000000000000;;		DiskIopsWriteRate          int64  `json:"diskIopsWriteRate,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingdisplaytext    string `json:"diskofferingdisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingid             string `json:"diskofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingname           string `json:"diskofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Displayvolume              bool   `json:"displayvolume,omitempty"`
0000000000000000000000000000000000000000;;		Domain                     string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid                   string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor                 string `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Id                         string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Isextractable              bool   `json:"isextractable,omitempty"`
0000000000000000000000000000000000000000;;		Isodisplaytext             string `json:"isodisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Isoid                      string `json:"isoid,omitempty"`
0000000000000000000000000000000000000000;;		Isoname                    string `json:"isoname,omitempty"`
0000000000000000000000000000000000000000;;		Maxiops                    int64  `json:"maxiops,omitempty"`
0000000000000000000000000000000000000000;;		Miniops                    int64  `json:"miniops,omitempty"`
0000000000000000000000000000000000000000;;		Name                       string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Path                       string `json:"path,omitempty"`
0000000000000000000000000000000000000000;;		Project                    string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid                  string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;		Provisioningtype           string `json:"provisioningtype,omitempty"`
0000000000000000000000000000000000000000;;		Quiescevm                  bool   `json:"quiescevm,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingdisplaytext string `json:"serviceofferingdisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingid          string `json:"serviceofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingname        string `json:"serviceofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Size                       int64  `json:"size,omitempty"`
0000000000000000000000000000000000000000;;		Snapshotid                 string `json:"snapshotid,omitempty"`
0000000000000000000000000000000000000000;;		State                      string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Status                     string `json:"status,omitempty"`
0000000000000000000000000000000000000000;;		Storage                    string `json:"storage,omitempty"`
0000000000000000000000000000000000000000;;		Storageid                  string `json:"storageid,omitempty"`
0000000000000000000000000000000000000000;;		Storagetype                string `json:"storagetype,omitempty"`
0000000000000000000000000000000000000000;;		Tags                       []struct {
0000000000000000000000000000000000000000;;			Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;			Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;			Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;			Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;			Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Templatedisplaytext string `json:"templatedisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Templateid          string `json:"templateid,omitempty"`
0000000000000000000000000000000000000000;;		Templatename        string `json:"templatename,omitempty"`
0000000000000000000000000000000000000000;;		Type                string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Virtualmachineid    string `json:"virtualmachineid,omitempty"`
0000000000000000000000000000000000000000;;		Vmdisplayname       string `json:"vmdisplayname,omitempty"`
0000000000000000000000000000000000000000;;		Vmname              string `json:"vmname,omitempty"`
0000000000000000000000000000000000000000;;		Vmstate             string `json:"vmstate,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid              string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename            string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResizeVolumeParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ResizeVolumeParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["diskofferingid"]; found {
0000000000000000000000000000000000000000;;			u.Set("diskofferingid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["maxiops"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatInt(v.(int64), 10)
0000000000000000000000000000000000000000;;			u.Set("maxiops", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["miniops"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatInt(v.(int64), 10)
0000000000000000000000000000000000000000;;			u.Set("miniops", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["shrinkok"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("shrinkok", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["size"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatInt(v.(int64), 10)
0000000000000000000000000000000000000000;;			u.Set("size", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ResizeVolumeParams) SetDiskofferingid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["diskofferingid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ResizeVolumeParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ResizeVolumeParams) SetMaxiops(v int64) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["maxiops"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ResizeVolumeParams) SetMiniops(v int64) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["miniops"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ResizeVolumeParams) SetShrinkok(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["shrinkok"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ResizeVolumeParams) SetSize(v int64) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["size"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new ResizeVolumeParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VolumeService) NewResizeVolumeParams(id string) *ResizeVolumeParams {
0000000000000000000000000000000000000000;;		p := &ResizeVolumeParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Resizes a volume
0000000000000000000000000000000000000000;;	func (s *VolumeService) ResizeVolume(p *ResizeVolumeParams) (*ResizeVolumeResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("resizeVolume", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r ResizeVolumeResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResizeVolumeResponse struct {
0000000000000000000000000000000000000000;;		JobID                      string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Account                    string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Attached                   string `json:"attached,omitempty"`
0000000000000000000000000000000000000000;;		Chaininfo                  string `json:"chaininfo,omitempty"`
0000000000000000000000000000000000000000;;		Created                    string `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Destroyed                  bool   `json:"destroyed,omitempty"`
0000000000000000000000000000000000000000;;		Deviceid                   int64  `json:"deviceid,omitempty"`
0000000000000000000000000000000000000000;;		DiskBytesReadRate          int64  `json:"diskBytesReadRate,omitempty"`
0000000000000000000000000000000000000000;;		DiskBytesWriteRate         int64  `json:"diskBytesWriteRate,omitempty"`
0000000000000000000000000000000000000000;;		DiskIopsReadRate           int64  `json:"diskIopsReadRate,omitempty"`
0000000000000000000000000000000000000000;;		DiskIopsWriteRate          int64  `json:"diskIopsWriteRate,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingdisplaytext    string `json:"diskofferingdisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingid             string `json:"diskofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingname           string `json:"diskofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Displayvolume              bool   `json:"displayvolume,omitempty"`
0000000000000000000000000000000000000000;;		Domain                     string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid                   string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor                 string `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Id                         string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Isextractable              bool   `json:"isextractable,omitempty"`
0000000000000000000000000000000000000000;;		Isodisplaytext             string `json:"isodisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Isoid                      string `json:"isoid,omitempty"`
0000000000000000000000000000000000000000;;		Isoname                    string `json:"isoname,omitempty"`
0000000000000000000000000000000000000000;;		Maxiops                    int64  `json:"maxiops,omitempty"`
0000000000000000000000000000000000000000;;		Miniops                    int64  `json:"miniops,omitempty"`
0000000000000000000000000000000000000000;;		Name                       string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Path                       string `json:"path,omitempty"`
0000000000000000000000000000000000000000;;		Project                    string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid                  string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;		Provisioningtype           string `json:"provisioningtype,omitempty"`
0000000000000000000000000000000000000000;;		Quiescevm                  bool   `json:"quiescevm,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingdisplaytext string `json:"serviceofferingdisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingid          string `json:"serviceofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingname        string `json:"serviceofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Size                       int64  `json:"size,omitempty"`
0000000000000000000000000000000000000000;;		Snapshotid                 string `json:"snapshotid,omitempty"`
0000000000000000000000000000000000000000;;		State                      string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Status                     string `json:"status,omitempty"`
0000000000000000000000000000000000000000;;		Storage                    string `json:"storage,omitempty"`
0000000000000000000000000000000000000000;;		Storageid                  string `json:"storageid,omitempty"`
0000000000000000000000000000000000000000;;		Storagetype                string `json:"storagetype,omitempty"`
0000000000000000000000000000000000000000;;		Tags                       []struct {
0000000000000000000000000000000000000000;;			Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;			Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;			Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;			Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;			Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Templatedisplaytext string `json:"templatedisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Templateid          string `json:"templateid,omitempty"`
0000000000000000000000000000000000000000;;		Templatename        string `json:"templatename,omitempty"`
0000000000000000000000000000000000000000;;		Type                string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Virtualmachineid    string `json:"virtualmachineid,omitempty"`
0000000000000000000000000000000000000000;;		Vmdisplayname       string `json:"vmdisplayname,omitempty"`
0000000000000000000000000000000000000000;;		Vmname              string `json:"vmname,omitempty"`
0000000000000000000000000000000000000000;;		Vmstate             string `json:"vmstate,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid              string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename            string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateVolumeParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateVolumeParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["chaininfo"]; found {
0000000000000000000000000000000000000000;;			u.Set("chaininfo", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["customid"]; found {
0000000000000000000000000000000000000000;;			u.Set("customid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["displayvolume"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("displayvolume", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["path"]; found {
0000000000000000000000000000000000000000;;			u.Set("path", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["state"]; found {
0000000000000000000000000000000000000000;;			u.Set("state", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["storageid"]; found {
0000000000000000000000000000000000000000;;			u.Set("storageid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateVolumeParams) SetChaininfo(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["chaininfo"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateVolumeParams) SetCustomid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["customid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateVolumeParams) SetDisplayvolume(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["displayvolume"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateVolumeParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateVolumeParams) SetPath(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["path"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateVolumeParams) SetState(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["state"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateVolumeParams) SetStorageid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["storageid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new UpdateVolumeParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VolumeService) NewUpdateVolumeParams() *UpdateVolumeParams {
0000000000000000000000000000000000000000;;		p := &UpdateVolumeParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Updates the volume.
0000000000000000000000000000000000000000;;	func (s *VolumeService) UpdateVolume(p *UpdateVolumeParams) (*UpdateVolumeResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("updateVolume", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r UpdateVolumeResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateVolumeResponse struct {
0000000000000000000000000000000000000000;;		JobID                      string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Account                    string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Attached                   string `json:"attached,omitempty"`
0000000000000000000000000000000000000000;;		Chaininfo                  string `json:"chaininfo,omitempty"`
0000000000000000000000000000000000000000;;		Created                    string `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Destroyed                  bool   `json:"destroyed,omitempty"`
0000000000000000000000000000000000000000;;		Deviceid                   int64  `json:"deviceid,omitempty"`
0000000000000000000000000000000000000000;;		DiskBytesReadRate          int64  `json:"diskBytesReadRate,omitempty"`
0000000000000000000000000000000000000000;;		DiskBytesWriteRate         int64  `json:"diskBytesWriteRate,omitempty"`
0000000000000000000000000000000000000000;;		DiskIopsReadRate           int64  `json:"diskIopsReadRate,omitempty"`
0000000000000000000000000000000000000000;;		DiskIopsWriteRate          int64  `json:"diskIopsWriteRate,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingdisplaytext    string `json:"diskofferingdisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingid             string `json:"diskofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Diskofferingname           string `json:"diskofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Displayvolume              bool   `json:"displayvolume,omitempty"`
0000000000000000000000000000000000000000;;		Domain                     string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid                   string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Hypervisor                 string `json:"hypervisor,omitempty"`
0000000000000000000000000000000000000000;;		Id                         string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Isextractable              bool   `json:"isextractable,omitempty"`
0000000000000000000000000000000000000000;;		Isodisplaytext             string `json:"isodisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Isoid                      string `json:"isoid,omitempty"`
0000000000000000000000000000000000000000;;		Isoname                    string `json:"isoname,omitempty"`
0000000000000000000000000000000000000000;;		Maxiops                    int64  `json:"maxiops,omitempty"`
0000000000000000000000000000000000000000;;		Miniops                    int64  `json:"miniops,omitempty"`
0000000000000000000000000000000000000000;;		Name                       string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Path                       string `json:"path,omitempty"`
0000000000000000000000000000000000000000;;		Project                    string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid                  string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;		Provisioningtype           string `json:"provisioningtype,omitempty"`
0000000000000000000000000000000000000000;;		Quiescevm                  bool   `json:"quiescevm,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingdisplaytext string `json:"serviceofferingdisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingid          string `json:"serviceofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Serviceofferingname        string `json:"serviceofferingname,omitempty"`
0000000000000000000000000000000000000000;;		Size                       int64  `json:"size,omitempty"`
0000000000000000000000000000000000000000;;		Snapshotid                 string `json:"snapshotid,omitempty"`
0000000000000000000000000000000000000000;;		State                      string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Status                     string `json:"status,omitempty"`
0000000000000000000000000000000000000000;;		Storage                    string `json:"storage,omitempty"`
0000000000000000000000000000000000000000;;		Storageid                  string `json:"storageid,omitempty"`
0000000000000000000000000000000000000000;;		Storagetype                string `json:"storagetype,omitempty"`
0000000000000000000000000000000000000000;;		Tags                       []struct {
0000000000000000000000000000000000000000;;			Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;			Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;			Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;			Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;			Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Templatedisplaytext string `json:"templatedisplaytext,omitempty"`
0000000000000000000000000000000000000000;;		Templateid          string `json:"templateid,omitempty"`
0000000000000000000000000000000000000000;;		Templatename        string `json:"templatename,omitempty"`
0000000000000000000000000000000000000000;;		Type                string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Virtualmachineid    string `json:"virtualmachineid,omitempty"`
0000000000000000000000000000000000000000;;		Vmdisplayname       string `json:"vmdisplayname,omitempty"`
0000000000000000000000000000000000000000;;		Vmname              string `json:"vmname,omitempty"`
0000000000000000000000000000000000000000;;		Vmstate             string `json:"vmstate,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid              string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename            string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GetSolidFireVolumeSizeParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *GetSolidFireVolumeSizeParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["storageid"]; found {
0000000000000000000000000000000000000000;;			u.Set("storageid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["volumeid"]; found {
0000000000000000000000000000000000000000;;			u.Set("volumeid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *GetSolidFireVolumeSizeParams) SetStorageid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["storageid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *GetSolidFireVolumeSizeParams) SetVolumeid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["volumeid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new GetSolidFireVolumeSizeParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VolumeService) NewGetSolidFireVolumeSizeParams(storageid string, volumeid string) *GetSolidFireVolumeSizeParams {
0000000000000000000000000000000000000000;;		p := &GetSolidFireVolumeSizeParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["storageid"] = storageid
0000000000000000000000000000000000000000;;		p.p["volumeid"] = volumeid
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get the SF volume size including Hypervisor Snapshot Reserve
0000000000000000000000000000000000000000;;	func (s *VolumeService) GetSolidFireVolumeSize(p *GetSolidFireVolumeSizeParams) (*GetSolidFireVolumeSizeResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("getSolidFireVolumeSize", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r GetSolidFireVolumeSizeResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GetSolidFireVolumeSizeResponse struct {
0000000000000000000000000000000000000000;;		SolidFireVolumeSize int64 `json:"solidFireVolumeSize,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GetSolidFireVolumeAccessGroupIdParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *GetSolidFireVolumeAccessGroupIdParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["clusterid"]; found {
0000000000000000000000000000000000000000;;			u.Set("clusterid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["storageid"]; found {
0000000000000000000000000000000000000000;;			u.Set("storageid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *GetSolidFireVolumeAccessGroupIdParams) SetClusterid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["clusterid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *GetSolidFireVolumeAccessGroupIdParams) SetStorageid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["storageid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new GetSolidFireVolumeAccessGroupIdParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VolumeService) NewGetSolidFireVolumeAccessGroupIdParams(clusterid string, storageid string) *GetSolidFireVolumeAccessGroupIdParams {
0000000000000000000000000000000000000000;;		p := &GetSolidFireVolumeAccessGroupIdParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["clusterid"] = clusterid
0000000000000000000000000000000000000000;;		p.p["storageid"] = storageid
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get the SF Volume Access Group ID
0000000000000000000000000000000000000000;;	func (s *VolumeService) GetSolidFireVolumeAccessGroupId(p *GetSolidFireVolumeAccessGroupIdParams) (*GetSolidFireVolumeAccessGroupIdResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("getSolidFireVolumeAccessGroupId", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r GetSolidFireVolumeAccessGroupIdResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GetSolidFireVolumeAccessGroupIdResponse struct {
0000000000000000000000000000000000000000;;		SolidFireVolumeAccessGroupId int64 `json:"solidFireVolumeAccessGroupId,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GetSolidFireVolumeIscsiNameParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *GetSolidFireVolumeIscsiNameParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["volumeid"]; found {
0000000000000000000000000000000000000000;;			u.Set("volumeid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *GetSolidFireVolumeIscsiNameParams) SetVolumeid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["volumeid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new GetSolidFireVolumeIscsiNameParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VolumeService) NewGetSolidFireVolumeIscsiNameParams(volumeid string) *GetSolidFireVolumeIscsiNameParams {
0000000000000000000000000000000000000000;;		p := &GetSolidFireVolumeIscsiNameParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["volumeid"] = volumeid
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get SolidFire Volume's Iscsi Name
0000000000000000000000000000000000000000;;	func (s *VolumeService) GetSolidFireVolumeIscsiName(p *GetSolidFireVolumeIscsiNameParams) (*GetSolidFireVolumeIscsiNameResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("getSolidFireVolumeIscsiName", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r GetSolidFireVolumeIscsiNameResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GetSolidFireVolumeIscsiNameResponse struct {
0000000000000000000000000000000000000000;;		SolidFireVolumeIscsiName string `json:"solidFireVolumeIscsiName,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GetUploadParamsForVolumeParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *GetUploadParamsForVolumeParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["account"]; found {
0000000000000000000000000000000000000000;;			u.Set("account", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["checksum"]; found {
0000000000000000000000000000000000000000;;			u.Set("checksum", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["diskofferingid"]; found {
0000000000000000000000000000000000000000;;			u.Set("diskofferingid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["domainid"]; found {
0000000000000000000000000000000000000000;;			u.Set("domainid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["format"]; found {
0000000000000000000000000000000000000000;;			u.Set("format", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["imagestoreuuid"]; found {
0000000000000000000000000000000000000000;;			u.Set("imagestoreuuid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["name"]; found {
0000000000000000000000000000000000000000;;			u.Set("name", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["projectid"]; found {
0000000000000000000000000000000000000000;;			u.Set("projectid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["zoneid"]; found {
0000000000000000000000000000000000000000;;			u.Set("zoneid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *GetUploadParamsForVolumeParams) SetAccount(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["account"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *GetUploadParamsForVolumeParams) SetChecksum(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["checksum"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *GetUploadParamsForVolumeParams) SetDiskofferingid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["diskofferingid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *GetUploadParamsForVolumeParams) SetDomainid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["domainid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *GetUploadParamsForVolumeParams) SetFormat(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["format"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *GetUploadParamsForVolumeParams) SetImagestoreuuid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["imagestoreuuid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *GetUploadParamsForVolumeParams) SetName(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["name"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *GetUploadParamsForVolumeParams) SetProjectid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["projectid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *GetUploadParamsForVolumeParams) SetZoneid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["zoneid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new GetUploadParamsForVolumeParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VolumeService) NewGetUploadParamsForVolumeParams(format string, name string, zoneid string) *GetUploadParamsForVolumeParams {
0000000000000000000000000000000000000000;;		p := &GetUploadParamsForVolumeParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["format"] = format
0000000000000000000000000000000000000000;;		p.p["name"] = name
0000000000000000000000000000000000000000;;		p.p["zoneid"] = zoneid
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Upload a data disk to the cloudstack cloud.
0000000000000000000000000000000000000000;;	func (s *VolumeService) GetUploadParamsForVolume(p *GetUploadParamsForVolumeParams) (*GetUploadParamsForVolumeResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("getUploadParamsForVolume", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r GetUploadParamsForVolumeResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GetUploadParamsForVolumeResponse struct {
0000000000000000000000000000000000000000;;		Expires   string `json:"expires,omitempty"`
0000000000000000000000000000000000000000;;		Id        string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Metadata  string `json:"metadata,omitempty"`
0000000000000000000000000000000000000000;;		PostURL   string `json:"postURL,omitempty"`
0000000000000000000000000000000000000000;;		Signature string `json:"signature,omitempty"`
0000000000000000000000000000000000000000;;	}
