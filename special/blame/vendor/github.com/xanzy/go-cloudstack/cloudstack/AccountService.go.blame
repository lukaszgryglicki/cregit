0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Copyright 2016, Sander van Harmelen
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
0000000000000000000000000000000000000000;;	//
0a16da49b5158d8aef850f86fc8936f4afa6c64a;;	
0000000000000000000000000000000000000000;;	package cloudstack
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateAccountParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateAccountParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["account"]; found {
0000000000000000000000000000000000000000;;			u.Set("account", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["accountdetails"]; found {
0000000000000000000000000000000000000000;;			i := 0
0000000000000000000000000000000000000000;;			for k, vv := range v.(map[string]string) {
0000000000000000000000000000000000000000;;				u.Set(fmt.Sprintf("accountdetails[%d].key", i), k)
0000000000000000000000000000000000000000;;				u.Set(fmt.Sprintf("accountdetails[%d].value", i), vv)
0000000000000000000000000000000000000000;;				i++
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["accountid"]; found {
0000000000000000000000000000000000000000;;			u.Set("accountid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["accounttype"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.Itoa(v.(int))
0000000000000000000000000000000000000000;;			u.Set("accounttype", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["domainid"]; found {
0000000000000000000000000000000000000000;;			u.Set("domainid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["email"]; found {
0000000000000000000000000000000000000000;;			u.Set("email", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["firstname"]; found {
0000000000000000000000000000000000000000;;			u.Set("firstname", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["lastname"]; found {
0000000000000000000000000000000000000000;;			u.Set("lastname", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["networkdomain"]; found {
0000000000000000000000000000000000000000;;			u.Set("networkdomain", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["password"]; found {
0000000000000000000000000000000000000000;;			u.Set("password", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["timezone"]; found {
0000000000000000000000000000000000000000;;			u.Set("timezone", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["userid"]; found {
0000000000000000000000000000000000000000;;			u.Set("userid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["username"]; found {
0000000000000000000000000000000000000000;;			u.Set("username", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateAccountParams) SetAccount(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["account"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateAccountParams) SetAccountdetails(v map[string]string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["accountdetails"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateAccountParams) SetAccountid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["accountid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateAccountParams) SetAccounttype(v int) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["accounttype"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateAccountParams) SetDomainid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["domainid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateAccountParams) SetEmail(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["email"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateAccountParams) SetFirstname(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["firstname"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateAccountParams) SetLastname(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["lastname"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateAccountParams) SetNetworkdomain(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["networkdomain"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateAccountParams) SetPassword(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["password"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateAccountParams) SetTimezone(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["timezone"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateAccountParams) SetUserid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["userid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateAccountParams) SetUsername(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["username"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new CreateAccountParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *AccountService) NewCreateAccountParams(accounttype int, email string, firstname string, lastname string, password string, username string) *CreateAccountParams {
0000000000000000000000000000000000000000;;		p := &CreateAccountParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["accounttype"] = accounttype
0000000000000000000000000000000000000000;;		p.p["email"] = email
0000000000000000000000000000000000000000;;		p.p["firstname"] = firstname
0000000000000000000000000000000000000000;;		p.p["lastname"] = lastname
0000000000000000000000000000000000000000;;		p.p["password"] = password
0000000000000000000000000000000000000000;;		p.p["username"] = username
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Creates an account
0000000000000000000000000000000000000000;;	func (s *AccountService) CreateAccount(p *CreateAccountParams) (*CreateAccountResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("createAccount", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r CreateAccountResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateAccountResponse struct {
0000000000000000000000000000000000000000;;		Accountdetails            map[string]string `json:"accountdetails,omitempty"`
0000000000000000000000000000000000000000;;		Accounttype               int               `json:"accounttype,omitempty"`
0000000000000000000000000000000000000000;;		Cpuavailable              string            `json:"cpuavailable,omitempty"`
0000000000000000000000000000000000000000;;		Cpulimit                  string            `json:"cpulimit,omitempty"`
0000000000000000000000000000000000000000;;		Cputotal                  int64             `json:"cputotal,omitempty"`
0000000000000000000000000000000000000000;;		Defaultzoneid             string            `json:"defaultzoneid,omitempty"`
0000000000000000000000000000000000000000;;		Domain                    string            `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid                  string            `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Groups                    []string          `json:"groups,omitempty"`
0000000000000000000000000000000000000000;;		Id                        string            `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Ipavailable               string            `json:"ipavailable,omitempty"`
0000000000000000000000000000000000000000;;		Iplimit                   string            `json:"iplimit,omitempty"`
0000000000000000000000000000000000000000;;		Iptotal                   int64             `json:"iptotal,omitempty"`
0000000000000000000000000000000000000000;;		Iscleanuprequired         bool              `json:"iscleanuprequired,omitempty"`
0000000000000000000000000000000000000000;;		Isdefault                 bool              `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;		Memoryavailable           string            `json:"memoryavailable,omitempty"`
0000000000000000000000000000000000000000;;		Memorylimit               string            `json:"memorylimit,omitempty"`
0000000000000000000000000000000000000000;;		Memorytotal               int64             `json:"memorytotal,omitempty"`
0000000000000000000000000000000000000000;;		Name                      string            `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkavailable          string            `json:"networkavailable,omitempty"`
0000000000000000000000000000000000000000;;		Networkdomain             string            `json:"networkdomain,omitempty"`
0000000000000000000000000000000000000000;;		Networklimit              string            `json:"networklimit,omitempty"`
0000000000000000000000000000000000000000;;		Networktotal              int64             `json:"networktotal,omitempty"`
0000000000000000000000000000000000000000;;		Primarystorageavailable   string            `json:"primarystorageavailable,omitempty"`
0000000000000000000000000000000000000000;;		Primarystoragelimit       string            `json:"primarystoragelimit,omitempty"`
0000000000000000000000000000000000000000;;		Primarystoragetotal       int64             `json:"primarystoragetotal,omitempty"`
0000000000000000000000000000000000000000;;		Projectavailable          string            `json:"projectavailable,omitempty"`
0000000000000000000000000000000000000000;;		Projectlimit              string            `json:"projectlimit,omitempty"`
0000000000000000000000000000000000000000;;		Projecttotal              int64             `json:"projecttotal,omitempty"`
0000000000000000000000000000000000000000;;		Receivedbytes             int64             `json:"receivedbytes,omitempty"`
0000000000000000000000000000000000000000;;		Secondarystorageavailable string            `json:"secondarystorageavailable,omitempty"`
0000000000000000000000000000000000000000;;		Secondarystoragelimit     string            `json:"secondarystoragelimit,omitempty"`
0000000000000000000000000000000000000000;;		Secondarystoragetotal     int64             `json:"secondarystoragetotal,omitempty"`
0000000000000000000000000000000000000000;;		Sentbytes                 int64             `json:"sentbytes,omitempty"`
0000000000000000000000000000000000000000;;		Snapshotavailable         string            `json:"snapshotavailable,omitempty"`
0000000000000000000000000000000000000000;;		Snapshotlimit             string            `json:"snapshotlimit,omitempty"`
0000000000000000000000000000000000000000;;		Snapshottotal             int64             `json:"snapshottotal,omitempty"`
0000000000000000000000000000000000000000;;		State                     string            `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Templateavailable         string            `json:"templateavailable,omitempty"`
0000000000000000000000000000000000000000;;		Templatelimit             string            `json:"templatelimit,omitempty"`
0000000000000000000000000000000000000000;;		Templatetotal             int64             `json:"templatetotal,omitempty"`
0000000000000000000000000000000000000000;;		User                      []struct {
0000000000000000000000000000000000000000;;			Account             string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Accountid           string `json:"accountid,omitempty"`
0000000000000000000000000000000000000000;;			Accounttype         int    `json:"accounttype,omitempty"`
0000000000000000000000000000000000000000;;			Apikey              string `json:"apikey,omitempty"`
0000000000000000000000000000000000000000;;			Created             string `json:"created,omitempty"`
0000000000000000000000000000000000000000;;			Domain              string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid            string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Email               string `json:"email,omitempty"`
0000000000000000000000000000000000000000;;			Firstname           string `json:"firstname,omitempty"`
0000000000000000000000000000000000000000;;			Id                  string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Iscallerchilddomain bool   `json:"iscallerchilddomain,omitempty"`
0000000000000000000000000000000000000000;;			Isdefault           bool   `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;			Lastname            string `json:"lastname,omitempty"`
0000000000000000000000000000000000000000;;			Secretkey           string `json:"secretkey,omitempty"`
0000000000000000000000000000000000000000;;			State               string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;			Timezone            string `json:"timezone,omitempty"`
0000000000000000000000000000000000000000;;			Username            string `json:"username,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"user,omitempty"`
0000000000000000000000000000000000000000;;		Vmavailable     string `json:"vmavailable,omitempty"`
0000000000000000000000000000000000000000;;		Vmlimit         string `json:"vmlimit,omitempty"`
0000000000000000000000000000000000000000;;		Vmrunning       int    `json:"vmrunning,omitempty"`
0000000000000000000000000000000000000000;;		Vmstopped       int    `json:"vmstopped,omitempty"`
0000000000000000000000000000000000000000;;		Vmtotal         int64  `json:"vmtotal,omitempty"`
0000000000000000000000000000000000000000;;		Volumeavailable string `json:"volumeavailable,omitempty"`
0000000000000000000000000000000000000000;;		Volumelimit     string `json:"volumelimit,omitempty"`
0000000000000000000000000000000000000000;;		Volumetotal     int64  `json:"volumetotal,omitempty"`
0000000000000000000000000000000000000000;;		Vpcavailable    string `json:"vpcavailable,omitempty"`
0000000000000000000000000000000000000000;;		Vpclimit        string `json:"vpclimit,omitempty"`
0000000000000000000000000000000000000000;;		Vpctotal        int64  `json:"vpctotal,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteAccountParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeleteAccountParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeleteAccountParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new DeleteAccountParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *AccountService) NewDeleteAccountParams(id string) *DeleteAccountParams {
0000000000000000000000000000000000000000;;		p := &DeleteAccountParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Deletes a account, and all users associated with this account
0000000000000000000000000000000000000000;;	func (s *AccountService) DeleteAccount(p *DeleteAccountParams) (*DeleteAccountResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("deleteAccount", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r DeleteAccountResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteAccountResponse struct {
0000000000000000000000000000000000000000;;		JobID       string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Displaytext string `json:"displaytext,omitempty"`
0000000000000000000000000000000000000000;;		Success     bool   `json:"success,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateAccountParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateAccountParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["account"]; found {
0000000000000000000000000000000000000000;;			u.Set("account", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["accountdetails"]; found {
0000000000000000000000000000000000000000;;			i := 0
0000000000000000000000000000000000000000;;			for k, vv := range v.(map[string]string) {
0000000000000000000000000000000000000000;;				u.Set(fmt.Sprintf("accountdetails[%d].key", i), k)
0000000000000000000000000000000000000000;;				u.Set(fmt.Sprintf("accountdetails[%d].value", i), vv)
0000000000000000000000000000000000000000;;				i++
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["domainid"]; found {
0000000000000000000000000000000000000000;;			u.Set("domainid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["networkdomain"]; found {
0000000000000000000000000000000000000000;;			u.Set("networkdomain", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["newname"]; found {
0000000000000000000000000000000000000000;;			u.Set("newname", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateAccountParams) SetAccount(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["account"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateAccountParams) SetAccountdetails(v map[string]string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["accountdetails"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateAccountParams) SetDomainid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["domainid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateAccountParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateAccountParams) SetNetworkdomain(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["networkdomain"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateAccountParams) SetNewname(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["newname"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new UpdateAccountParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *AccountService) NewUpdateAccountParams(newname string) *UpdateAccountParams {
0000000000000000000000000000000000000000;;		p := &UpdateAccountParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["newname"] = newname
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Updates account information for the authenticated user
0000000000000000000000000000000000000000;;	func (s *AccountService) UpdateAccount(p *UpdateAccountParams) (*UpdateAccountResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("updateAccount", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r UpdateAccountResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateAccountResponse struct {
0000000000000000000000000000000000000000;;		Accountdetails            map[string]string `json:"accountdetails,omitempty"`
0000000000000000000000000000000000000000;;		Accounttype               int               `json:"accounttype,omitempty"`
0000000000000000000000000000000000000000;;		Cpuavailable              string            `json:"cpuavailable,omitempty"`
0000000000000000000000000000000000000000;;		Cpulimit                  string            `json:"cpulimit,omitempty"`
0000000000000000000000000000000000000000;;		Cputotal                  int64             `json:"cputotal,omitempty"`
0000000000000000000000000000000000000000;;		Defaultzoneid             string            `json:"defaultzoneid,omitempty"`
0000000000000000000000000000000000000000;;		Domain                    string            `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid                  string            `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Groups                    []string          `json:"groups,omitempty"`
0000000000000000000000000000000000000000;;		Id                        string            `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Ipavailable               string            `json:"ipavailable,omitempty"`
0000000000000000000000000000000000000000;;		Iplimit                   string            `json:"iplimit,omitempty"`
0000000000000000000000000000000000000000;;		Iptotal                   int64             `json:"iptotal,omitempty"`
0000000000000000000000000000000000000000;;		Iscleanuprequired         bool              `json:"iscleanuprequired,omitempty"`
0000000000000000000000000000000000000000;;		Isdefault                 bool              `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;		Memoryavailable           string            `json:"memoryavailable,omitempty"`
0000000000000000000000000000000000000000;;		Memorylimit               string            `json:"memorylimit,omitempty"`
0000000000000000000000000000000000000000;;		Memorytotal               int64             `json:"memorytotal,omitempty"`
0000000000000000000000000000000000000000;;		Name                      string            `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkavailable          string            `json:"networkavailable,omitempty"`
0000000000000000000000000000000000000000;;		Networkdomain             string            `json:"networkdomain,omitempty"`
0000000000000000000000000000000000000000;;		Networklimit              string            `json:"networklimit,omitempty"`
0000000000000000000000000000000000000000;;		Networktotal              int64             `json:"networktotal,omitempty"`
0000000000000000000000000000000000000000;;		Primarystorageavailable   string            `json:"primarystorageavailable,omitempty"`
0000000000000000000000000000000000000000;;		Primarystoragelimit       string            `json:"primarystoragelimit,omitempty"`
0000000000000000000000000000000000000000;;		Primarystoragetotal       int64             `json:"primarystoragetotal,omitempty"`
0000000000000000000000000000000000000000;;		Projectavailable          string            `json:"projectavailable,omitempty"`
0000000000000000000000000000000000000000;;		Projectlimit              string            `json:"projectlimit,omitempty"`
0000000000000000000000000000000000000000;;		Projecttotal              int64             `json:"projecttotal,omitempty"`
0000000000000000000000000000000000000000;;		Receivedbytes             int64             `json:"receivedbytes,omitempty"`
0000000000000000000000000000000000000000;;		Secondarystorageavailable string            `json:"secondarystorageavailable,omitempty"`
0000000000000000000000000000000000000000;;		Secondarystoragelimit     string            `json:"secondarystoragelimit,omitempty"`
0000000000000000000000000000000000000000;;		Secondarystoragetotal     int64             `json:"secondarystoragetotal,omitempty"`
0000000000000000000000000000000000000000;;		Sentbytes                 int64             `json:"sentbytes,omitempty"`
0000000000000000000000000000000000000000;;		Snapshotavailable         string            `json:"snapshotavailable,omitempty"`
0000000000000000000000000000000000000000;;		Snapshotlimit             string            `json:"snapshotlimit,omitempty"`
0000000000000000000000000000000000000000;;		Snapshottotal             int64             `json:"snapshottotal,omitempty"`
0000000000000000000000000000000000000000;;		State                     string            `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Templateavailable         string            `json:"templateavailable,omitempty"`
0000000000000000000000000000000000000000;;		Templatelimit             string            `json:"templatelimit,omitempty"`
0000000000000000000000000000000000000000;;		Templatetotal             int64             `json:"templatetotal,omitempty"`
0000000000000000000000000000000000000000;;		User                      []struct {
0000000000000000000000000000000000000000;;			Account             string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Accountid           string `json:"accountid,omitempty"`
0000000000000000000000000000000000000000;;			Accounttype         int    `json:"accounttype,omitempty"`
0000000000000000000000000000000000000000;;			Apikey              string `json:"apikey,omitempty"`
0000000000000000000000000000000000000000;;			Created             string `json:"created,omitempty"`
0000000000000000000000000000000000000000;;			Domain              string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid            string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Email               string `json:"email,omitempty"`
0000000000000000000000000000000000000000;;			Firstname           string `json:"firstname,omitempty"`
0000000000000000000000000000000000000000;;			Id                  string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Iscallerchilddomain bool   `json:"iscallerchilddomain,omitempty"`
0000000000000000000000000000000000000000;;			Isdefault           bool   `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;			Lastname            string `json:"lastname,omitempty"`
0000000000000000000000000000000000000000;;			Secretkey           string `json:"secretkey,omitempty"`
0000000000000000000000000000000000000000;;			State               string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;			Timezone            string `json:"timezone,omitempty"`
0000000000000000000000000000000000000000;;			Username            string `json:"username,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"user,omitempty"`
0000000000000000000000000000000000000000;;		Vmavailable     string `json:"vmavailable,omitempty"`
0000000000000000000000000000000000000000;;		Vmlimit         string `json:"vmlimit,omitempty"`
0000000000000000000000000000000000000000;;		Vmrunning       int    `json:"vmrunning,omitempty"`
0000000000000000000000000000000000000000;;		Vmstopped       int    `json:"vmstopped,omitempty"`
0000000000000000000000000000000000000000;;		Vmtotal         int64  `json:"vmtotal,omitempty"`
0000000000000000000000000000000000000000;;		Volumeavailable string `json:"volumeavailable,omitempty"`
0000000000000000000000000000000000000000;;		Volumelimit     string `json:"volumelimit,omitempty"`
0000000000000000000000000000000000000000;;		Volumetotal     int64  `json:"volumetotal,omitempty"`
0000000000000000000000000000000000000000;;		Vpcavailable    string `json:"vpcavailable,omitempty"`
0000000000000000000000000000000000000000;;		Vpclimit        string `json:"vpclimit,omitempty"`
0000000000000000000000000000000000000000;;		Vpctotal        int64  `json:"vpctotal,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DisableAccountParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DisableAccountParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["account"]; found {
0000000000000000000000000000000000000000;;			u.Set("account", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["domainid"]; found {
0000000000000000000000000000000000000000;;			u.Set("domainid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["lock"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("lock", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DisableAccountParams) SetAccount(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["account"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DisableAccountParams) SetDomainid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["domainid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DisableAccountParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DisableAccountParams) SetLock(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["lock"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new DisableAccountParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *AccountService) NewDisableAccountParams(lock bool) *DisableAccountParams {
0000000000000000000000000000000000000000;;		p := &DisableAccountParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["lock"] = lock
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Disables an account
0000000000000000000000000000000000000000;;	func (s *AccountService) DisableAccount(p *DisableAccountParams) (*DisableAccountResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("disableAccount", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r DisableAccountResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DisableAccountResponse struct {
0000000000000000000000000000000000000000;;		JobID                     string            `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Accountdetails            map[string]string `json:"accountdetails,omitempty"`
0000000000000000000000000000000000000000;;		Accounttype               int               `json:"accounttype,omitempty"`
0000000000000000000000000000000000000000;;		Cpuavailable              string            `json:"cpuavailable,omitempty"`
0000000000000000000000000000000000000000;;		Cpulimit                  string            `json:"cpulimit,omitempty"`
0000000000000000000000000000000000000000;;		Cputotal                  int64             `json:"cputotal,omitempty"`
0000000000000000000000000000000000000000;;		Defaultzoneid             string            `json:"defaultzoneid,omitempty"`
0000000000000000000000000000000000000000;;		Domain                    string            `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid                  string            `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Groups                    []string          `json:"groups,omitempty"`
0000000000000000000000000000000000000000;;		Id                        string            `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Ipavailable               string            `json:"ipavailable,omitempty"`
0000000000000000000000000000000000000000;;		Iplimit                   string            `json:"iplimit,omitempty"`
0000000000000000000000000000000000000000;;		Iptotal                   int64             `json:"iptotal,omitempty"`
0000000000000000000000000000000000000000;;		Iscleanuprequired         bool              `json:"iscleanuprequired,omitempty"`
0000000000000000000000000000000000000000;;		Isdefault                 bool              `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;		Memoryavailable           string            `json:"memoryavailable,omitempty"`
0000000000000000000000000000000000000000;;		Memorylimit               string            `json:"memorylimit,omitempty"`
0000000000000000000000000000000000000000;;		Memorytotal               int64             `json:"memorytotal,omitempty"`
0000000000000000000000000000000000000000;;		Name                      string            `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkavailable          string            `json:"networkavailable,omitempty"`
0000000000000000000000000000000000000000;;		Networkdomain             string            `json:"networkdomain,omitempty"`
0000000000000000000000000000000000000000;;		Networklimit              string            `json:"networklimit,omitempty"`
0000000000000000000000000000000000000000;;		Networktotal              int64             `json:"networktotal,omitempty"`
0000000000000000000000000000000000000000;;		Primarystorageavailable   string            `json:"primarystorageavailable,omitempty"`
0000000000000000000000000000000000000000;;		Primarystoragelimit       string            `json:"primarystoragelimit,omitempty"`
0000000000000000000000000000000000000000;;		Primarystoragetotal       int64             `json:"primarystoragetotal,omitempty"`
0000000000000000000000000000000000000000;;		Projectavailable          string            `json:"projectavailable,omitempty"`
0000000000000000000000000000000000000000;;		Projectlimit              string            `json:"projectlimit,omitempty"`
0000000000000000000000000000000000000000;;		Projecttotal              int64             `json:"projecttotal,omitempty"`
0000000000000000000000000000000000000000;;		Receivedbytes             int64             `json:"receivedbytes,omitempty"`
0000000000000000000000000000000000000000;;		Secondarystorageavailable string            `json:"secondarystorageavailable,omitempty"`
0000000000000000000000000000000000000000;;		Secondarystoragelimit     string            `json:"secondarystoragelimit,omitempty"`
0000000000000000000000000000000000000000;;		Secondarystoragetotal     int64             `json:"secondarystoragetotal,omitempty"`
0000000000000000000000000000000000000000;;		Sentbytes                 int64             `json:"sentbytes,omitempty"`
0000000000000000000000000000000000000000;;		Snapshotavailable         string            `json:"snapshotavailable,omitempty"`
0000000000000000000000000000000000000000;;		Snapshotlimit             string            `json:"snapshotlimit,omitempty"`
0000000000000000000000000000000000000000;;		Snapshottotal             int64             `json:"snapshottotal,omitempty"`
0000000000000000000000000000000000000000;;		State                     string            `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Templateavailable         string            `json:"templateavailable,omitempty"`
0000000000000000000000000000000000000000;;		Templatelimit             string            `json:"templatelimit,omitempty"`
0000000000000000000000000000000000000000;;		Templatetotal             int64             `json:"templatetotal,omitempty"`
0000000000000000000000000000000000000000;;		User                      []struct {
0000000000000000000000000000000000000000;;			Account             string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Accountid           string `json:"accountid,omitempty"`
0000000000000000000000000000000000000000;;			Accounttype         int    `json:"accounttype,omitempty"`
0000000000000000000000000000000000000000;;			Apikey              string `json:"apikey,omitempty"`
0000000000000000000000000000000000000000;;			Created             string `json:"created,omitempty"`
0000000000000000000000000000000000000000;;			Domain              string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid            string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Email               string `json:"email,omitempty"`
0000000000000000000000000000000000000000;;			Firstname           string `json:"firstname,omitempty"`
0000000000000000000000000000000000000000;;			Id                  string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Iscallerchilddomain bool   `json:"iscallerchilddomain,omitempty"`
0000000000000000000000000000000000000000;;			Isdefault           bool   `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;			Lastname            string `json:"lastname,omitempty"`
0000000000000000000000000000000000000000;;			Secretkey           string `json:"secretkey,omitempty"`
0000000000000000000000000000000000000000;;			State               string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;			Timezone            string `json:"timezone,omitempty"`
0000000000000000000000000000000000000000;;			Username            string `json:"username,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"user,omitempty"`
0000000000000000000000000000000000000000;;		Vmavailable     string `json:"vmavailable,omitempty"`
0000000000000000000000000000000000000000;;		Vmlimit         string `json:"vmlimit,omitempty"`
0000000000000000000000000000000000000000;;		Vmrunning       int    `json:"vmrunning,omitempty"`
0000000000000000000000000000000000000000;;		Vmstopped       int    `json:"vmstopped,omitempty"`
0000000000000000000000000000000000000000;;		Vmtotal         int64  `json:"vmtotal,omitempty"`
0000000000000000000000000000000000000000;;		Volumeavailable string `json:"volumeavailable,omitempty"`
0000000000000000000000000000000000000000;;		Volumelimit     string `json:"volumelimit,omitempty"`
0000000000000000000000000000000000000000;;		Volumetotal     int64  `json:"volumetotal,omitempty"`
0000000000000000000000000000000000000000;;		Vpcavailable    string `json:"vpcavailable,omitempty"`
0000000000000000000000000000000000000000;;		Vpclimit        string `json:"vpclimit,omitempty"`
0000000000000000000000000000000000000000;;		Vpctotal        int64  `json:"vpctotal,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EnableAccountParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *EnableAccountParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["account"]; found {
0000000000000000000000000000000000000000;;			u.Set("account", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["domainid"]; found {
0000000000000000000000000000000000000000;;			u.Set("domainid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *EnableAccountParams) SetAccount(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["account"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *EnableAccountParams) SetDomainid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["domainid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *EnableAccountParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new EnableAccountParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *AccountService) NewEnableAccountParams() *EnableAccountParams {
0000000000000000000000000000000000000000;;		p := &EnableAccountParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Enables an account
0000000000000000000000000000000000000000;;	func (s *AccountService) EnableAccount(p *EnableAccountParams) (*EnableAccountResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("enableAccount", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r EnableAccountResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EnableAccountResponse struct {
0000000000000000000000000000000000000000;;		Accountdetails            map[string]string `json:"accountdetails,omitempty"`
0000000000000000000000000000000000000000;;		Accounttype               int               `json:"accounttype,omitempty"`
0000000000000000000000000000000000000000;;		Cpuavailable              string            `json:"cpuavailable,omitempty"`
0000000000000000000000000000000000000000;;		Cpulimit                  string            `json:"cpulimit,omitempty"`
0000000000000000000000000000000000000000;;		Cputotal                  int64             `json:"cputotal,omitempty"`
0000000000000000000000000000000000000000;;		Defaultzoneid             string            `json:"defaultzoneid,omitempty"`
0000000000000000000000000000000000000000;;		Domain                    string            `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid                  string            `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Groups                    []string          `json:"groups,omitempty"`
0000000000000000000000000000000000000000;;		Id                        string            `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Ipavailable               string            `json:"ipavailable,omitempty"`
0000000000000000000000000000000000000000;;		Iplimit                   string            `json:"iplimit,omitempty"`
0000000000000000000000000000000000000000;;		Iptotal                   int64             `json:"iptotal,omitempty"`
0000000000000000000000000000000000000000;;		Iscleanuprequired         bool              `json:"iscleanuprequired,omitempty"`
0000000000000000000000000000000000000000;;		Isdefault                 bool              `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;		Memoryavailable           string            `json:"memoryavailable,omitempty"`
0000000000000000000000000000000000000000;;		Memorylimit               string            `json:"memorylimit,omitempty"`
0000000000000000000000000000000000000000;;		Memorytotal               int64             `json:"memorytotal,omitempty"`
0000000000000000000000000000000000000000;;		Name                      string            `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkavailable          string            `json:"networkavailable,omitempty"`
0000000000000000000000000000000000000000;;		Networkdomain             string            `json:"networkdomain,omitempty"`
0000000000000000000000000000000000000000;;		Networklimit              string            `json:"networklimit,omitempty"`
0000000000000000000000000000000000000000;;		Networktotal              int64             `json:"networktotal,omitempty"`
0000000000000000000000000000000000000000;;		Primarystorageavailable   string            `json:"primarystorageavailable,omitempty"`
0000000000000000000000000000000000000000;;		Primarystoragelimit       string            `json:"primarystoragelimit,omitempty"`
0000000000000000000000000000000000000000;;		Primarystoragetotal       int64             `json:"primarystoragetotal,omitempty"`
0000000000000000000000000000000000000000;;		Projectavailable          string            `json:"projectavailable,omitempty"`
0000000000000000000000000000000000000000;;		Projectlimit              string            `json:"projectlimit,omitempty"`
0000000000000000000000000000000000000000;;		Projecttotal              int64             `json:"projecttotal,omitempty"`
0000000000000000000000000000000000000000;;		Receivedbytes             int64             `json:"receivedbytes,omitempty"`
0000000000000000000000000000000000000000;;		Secondarystorageavailable string            `json:"secondarystorageavailable,omitempty"`
0000000000000000000000000000000000000000;;		Secondarystoragelimit     string            `json:"secondarystoragelimit,omitempty"`
0000000000000000000000000000000000000000;;		Secondarystoragetotal     int64             `json:"secondarystoragetotal,omitempty"`
0000000000000000000000000000000000000000;;		Sentbytes                 int64             `json:"sentbytes,omitempty"`
0000000000000000000000000000000000000000;;		Snapshotavailable         string            `json:"snapshotavailable,omitempty"`
0000000000000000000000000000000000000000;;		Snapshotlimit             string            `json:"snapshotlimit,omitempty"`
0000000000000000000000000000000000000000;;		Snapshottotal             int64             `json:"snapshottotal,omitempty"`
0000000000000000000000000000000000000000;;		State                     string            `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Templateavailable         string            `json:"templateavailable,omitempty"`
0000000000000000000000000000000000000000;;		Templatelimit             string            `json:"templatelimit,omitempty"`
0000000000000000000000000000000000000000;;		Templatetotal             int64             `json:"templatetotal,omitempty"`
0000000000000000000000000000000000000000;;		User                      []struct {
0000000000000000000000000000000000000000;;			Account             string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Accountid           string `json:"accountid,omitempty"`
0000000000000000000000000000000000000000;;			Accounttype         int    `json:"accounttype,omitempty"`
0000000000000000000000000000000000000000;;			Apikey              string `json:"apikey,omitempty"`
0000000000000000000000000000000000000000;;			Created             string `json:"created,omitempty"`
0000000000000000000000000000000000000000;;			Domain              string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid            string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Email               string `json:"email,omitempty"`
0000000000000000000000000000000000000000;;			Firstname           string `json:"firstname,omitempty"`
0000000000000000000000000000000000000000;;			Id                  string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Iscallerchilddomain bool   `json:"iscallerchilddomain,omitempty"`
0000000000000000000000000000000000000000;;			Isdefault           bool   `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;			Lastname            string `json:"lastname,omitempty"`
0000000000000000000000000000000000000000;;			Secretkey           string `json:"secretkey,omitempty"`
0000000000000000000000000000000000000000;;			State               string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;			Timezone            string `json:"timezone,omitempty"`
0000000000000000000000000000000000000000;;			Username            string `json:"username,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"user,omitempty"`
0000000000000000000000000000000000000000;;		Vmavailable     string `json:"vmavailable,omitempty"`
0000000000000000000000000000000000000000;;		Vmlimit         string `json:"vmlimit,omitempty"`
0000000000000000000000000000000000000000;;		Vmrunning       int    `json:"vmrunning,omitempty"`
0000000000000000000000000000000000000000;;		Vmstopped       int    `json:"vmstopped,omitempty"`
0000000000000000000000000000000000000000;;		Vmtotal         int64  `json:"vmtotal,omitempty"`
0000000000000000000000000000000000000000;;		Volumeavailable string `json:"volumeavailable,omitempty"`
0000000000000000000000000000000000000000;;		Volumelimit     string `json:"volumelimit,omitempty"`
0000000000000000000000000000000000000000;;		Volumetotal     int64  `json:"volumetotal,omitempty"`
0000000000000000000000000000000000000000;;		Vpcavailable    string `json:"vpcavailable,omitempty"`
0000000000000000000000000000000000000000;;		Vpclimit        string `json:"vpclimit,omitempty"`
0000000000000000000000000000000000000000;;		Vpctotal        int64  `json:"vpctotal,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LockAccountParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *LockAccountParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["account"]; found {
0000000000000000000000000000000000000000;;			u.Set("account", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["domainid"]; found {
0000000000000000000000000000000000000000;;			u.Set("domainid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *LockAccountParams) SetAccount(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["account"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *LockAccountParams) SetDomainid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["domainid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new LockAccountParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *AccountService) NewLockAccountParams(account string, domainid string) *LockAccountParams {
0000000000000000000000000000000000000000;;		p := &LockAccountParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["account"] = account
0000000000000000000000000000000000000000;;		p.p["domainid"] = domainid
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This deprecated function used to locks an account. Look for the API DisableAccount instead
0000000000000000000000000000000000000000;;	func (s *AccountService) LockAccount(p *LockAccountParams) (*LockAccountResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("lockAccount", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r LockAccountResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LockAccountResponse struct {
0000000000000000000000000000000000000000;;		Accountdetails            map[string]string `json:"accountdetails,omitempty"`
0000000000000000000000000000000000000000;;		Accounttype               int               `json:"accounttype,omitempty"`
0000000000000000000000000000000000000000;;		Cpuavailable              string            `json:"cpuavailable,omitempty"`
0000000000000000000000000000000000000000;;		Cpulimit                  string            `json:"cpulimit,omitempty"`
0000000000000000000000000000000000000000;;		Cputotal                  int64             `json:"cputotal,omitempty"`
0000000000000000000000000000000000000000;;		Defaultzoneid             string            `json:"defaultzoneid,omitempty"`
0000000000000000000000000000000000000000;;		Domain                    string            `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid                  string            `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Groups                    []string          `json:"groups,omitempty"`
0000000000000000000000000000000000000000;;		Id                        string            `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Ipavailable               string            `json:"ipavailable,omitempty"`
0000000000000000000000000000000000000000;;		Iplimit                   string            `json:"iplimit,omitempty"`
0000000000000000000000000000000000000000;;		Iptotal                   int64             `json:"iptotal,omitempty"`
0000000000000000000000000000000000000000;;		Iscleanuprequired         bool              `json:"iscleanuprequired,omitempty"`
0000000000000000000000000000000000000000;;		Isdefault                 bool              `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;		Memoryavailable           string            `json:"memoryavailable,omitempty"`
0000000000000000000000000000000000000000;;		Memorylimit               string            `json:"memorylimit,omitempty"`
0000000000000000000000000000000000000000;;		Memorytotal               int64             `json:"memorytotal,omitempty"`
0000000000000000000000000000000000000000;;		Name                      string            `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkavailable          string            `json:"networkavailable,omitempty"`
0000000000000000000000000000000000000000;;		Networkdomain             string            `json:"networkdomain,omitempty"`
0000000000000000000000000000000000000000;;		Networklimit              string            `json:"networklimit,omitempty"`
0000000000000000000000000000000000000000;;		Networktotal              int64             `json:"networktotal,omitempty"`
0000000000000000000000000000000000000000;;		Primarystorageavailable   string            `json:"primarystorageavailable,omitempty"`
0000000000000000000000000000000000000000;;		Primarystoragelimit       string            `json:"primarystoragelimit,omitempty"`
0000000000000000000000000000000000000000;;		Primarystoragetotal       int64             `json:"primarystoragetotal,omitempty"`
0000000000000000000000000000000000000000;;		Projectavailable          string            `json:"projectavailable,omitempty"`
0000000000000000000000000000000000000000;;		Projectlimit              string            `json:"projectlimit,omitempty"`
0000000000000000000000000000000000000000;;		Projecttotal              int64             `json:"projecttotal,omitempty"`
0000000000000000000000000000000000000000;;		Receivedbytes             int64             `json:"receivedbytes,omitempty"`
0000000000000000000000000000000000000000;;		Secondarystorageavailable string            `json:"secondarystorageavailable,omitempty"`
0000000000000000000000000000000000000000;;		Secondarystoragelimit     string            `json:"secondarystoragelimit,omitempty"`
0000000000000000000000000000000000000000;;		Secondarystoragetotal     int64             `json:"secondarystoragetotal,omitempty"`
0000000000000000000000000000000000000000;;		Sentbytes                 int64             `json:"sentbytes,omitempty"`
0000000000000000000000000000000000000000;;		Snapshotavailable         string            `json:"snapshotavailable,omitempty"`
0000000000000000000000000000000000000000;;		Snapshotlimit             string            `json:"snapshotlimit,omitempty"`
0000000000000000000000000000000000000000;;		Snapshottotal             int64             `json:"snapshottotal,omitempty"`
0000000000000000000000000000000000000000;;		State                     string            `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Templateavailable         string            `json:"templateavailable,omitempty"`
0000000000000000000000000000000000000000;;		Templatelimit             string            `json:"templatelimit,omitempty"`
0000000000000000000000000000000000000000;;		Templatetotal             int64             `json:"templatetotal,omitempty"`
0000000000000000000000000000000000000000;;		User                      []struct {
0000000000000000000000000000000000000000;;			Account             string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Accountid           string `json:"accountid,omitempty"`
0000000000000000000000000000000000000000;;			Accounttype         int    `json:"accounttype,omitempty"`
0000000000000000000000000000000000000000;;			Apikey              string `json:"apikey,omitempty"`
0000000000000000000000000000000000000000;;			Created             string `json:"created,omitempty"`
0000000000000000000000000000000000000000;;			Domain              string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid            string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Email               string `json:"email,omitempty"`
0000000000000000000000000000000000000000;;			Firstname           string `json:"firstname,omitempty"`
0000000000000000000000000000000000000000;;			Id                  string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Iscallerchilddomain bool   `json:"iscallerchilddomain,omitempty"`
0000000000000000000000000000000000000000;;			Isdefault           bool   `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;			Lastname            string `json:"lastname,omitempty"`
0000000000000000000000000000000000000000;;			Secretkey           string `json:"secretkey,omitempty"`
0000000000000000000000000000000000000000;;			State               string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;			Timezone            string `json:"timezone,omitempty"`
0000000000000000000000000000000000000000;;			Username            string `json:"username,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"user,omitempty"`
0000000000000000000000000000000000000000;;		Vmavailable     string `json:"vmavailable,omitempty"`
0000000000000000000000000000000000000000;;		Vmlimit         string `json:"vmlimit,omitempty"`
0000000000000000000000000000000000000000;;		Vmrunning       int    `json:"vmrunning,omitempty"`
0000000000000000000000000000000000000000;;		Vmstopped       int    `json:"vmstopped,omitempty"`
0000000000000000000000000000000000000000;;		Vmtotal         int64  `json:"vmtotal,omitempty"`
0000000000000000000000000000000000000000;;		Volumeavailable string `json:"volumeavailable,omitempty"`
0000000000000000000000000000000000000000;;		Volumelimit     string `json:"volumelimit,omitempty"`
0000000000000000000000000000000000000000;;		Volumetotal     int64  `json:"volumetotal,omitempty"`
0000000000000000000000000000000000000000;;		Vpcavailable    string `json:"vpcavailable,omitempty"`
0000000000000000000000000000000000000000;;		Vpclimit        string `json:"vpclimit,omitempty"`
0000000000000000000000000000000000000000;;		Vpctotal        int64  `json:"vpctotal,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListAccountsParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListAccountsParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["accounttype"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatInt(v.(int64), 10)
0000000000000000000000000000000000000000;;			u.Set("accounttype", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["domainid"]; found {
0000000000000000000000000000000000000000;;			u.Set("domainid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["iscleanuprequired"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("iscleanuprequired", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["isrecursive"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("isrecursive", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["keyword"]; found {
0000000000000000000000000000000000000000;;			u.Set("keyword", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["listall"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("listall", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["name"]; found {
0000000000000000000000000000000000000000;;			u.Set("name", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["page"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.Itoa(v.(int))
0000000000000000000000000000000000000000;;			u.Set("page", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["pagesize"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.Itoa(v.(int))
0000000000000000000000000000000000000000;;			u.Set("pagesize", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["state"]; found {
0000000000000000000000000000000000000000;;			u.Set("state", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListAccountsParams) SetAccounttype(v int64) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["accounttype"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListAccountsParams) SetDomainid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["domainid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListAccountsParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListAccountsParams) SetIscleanuprequired(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["iscleanuprequired"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListAccountsParams) SetIsrecursive(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["isrecursive"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListAccountsParams) SetKeyword(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["keyword"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListAccountsParams) SetListall(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["listall"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListAccountsParams) SetName(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["name"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListAccountsParams) SetPage(v int) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["page"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListAccountsParams) SetPagesize(v int) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["pagesize"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListAccountsParams) SetState(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["state"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new ListAccountsParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *AccountService) NewListAccountsParams() *ListAccountsParams {
0000000000000000000000000000000000000000;;		p := &ListAccountsParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is a courtesy helper function, which in some cases may not work as expected!
0000000000000000000000000000000000000000;;	func (s *AccountService) GetAccountID(name string, opts ...OptionFunc) (string, int, error) {
0000000000000000000000000000000000000000;;		p := &ListAccountsParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.p["name"] = name
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, fn := range opts {
0000000000000000000000000000000000000000;;			if err := fn(s.cs, p); err != nil {
0000000000000000000000000000000000000000;;				return "", -1, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		l, err := s.ListAccounts(p)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", -1, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 0 {
0000000000000000000000000000000000000000;;			return "", l.Count, fmt.Errorf("No match found for %s: %+v", name, l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 1 {
0000000000000000000000000000000000000000;;			return l.Accounts[0].Id, l.Count, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count > 1 {
0000000000000000000000000000000000000000;;			for _, v := range l.Accounts {
0000000000000000000000000000000000000000;;				if v.Name == name {
0000000000000000000000000000000000000000;;					return v.Id, l.Count, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "", l.Count, fmt.Errorf("Could not find an exact match for %s: %+v", name, l)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is a courtesy helper function, which in some cases may not work as expected!
0000000000000000000000000000000000000000;;	func (s *AccountService) GetAccountByName(name string, opts ...OptionFunc) (*Account, int, error) {
0000000000000000000000000000000000000000;;		id, count, err := s.GetAccountID(name, opts...)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, count, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r, count, err := s.GetAccountByID(id, opts...)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, count, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return r, count, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is a courtesy helper function, which in some cases may not work as expected!
0000000000000000000000000000000000000000;;	func (s *AccountService) GetAccountByID(id string, opts ...OptionFunc) (*Account, int, error) {
0000000000000000000000000000000000000000;;		p := &ListAccountsParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, fn := range opts {
0000000000000000000000000000000000000000;;			if err := fn(s.cs, p); err != nil {
0000000000000000000000000000000000000000;;				return nil, -1, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		l, err := s.ListAccounts(p)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if strings.Contains(err.Error(), fmt.Sprintf(
0000000000000000000000000000000000000000;;				"Invalid parameter id value=%s due to incorrect long value format, "+
0000000000000000000000000000000000000000;;					"or entity does not exist", id)) {
0000000000000000000000000000000000000000;;				return nil, 0, fmt.Errorf("No match found for %s: %+v", id, l)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, -1, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 0 {
0000000000000000000000000000000000000000;;			return nil, l.Count, fmt.Errorf("No match found for %s: %+v", id, l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 1 {
0000000000000000000000000000000000000000;;			return l.Accounts[0], l.Count, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, l.Count, fmt.Errorf("There is more then one result for Account UUID: %s!", id)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Lists accounts and provides detailed account information for listed accounts
0000000000000000000000000000000000000000;;	func (s *AccountService) ListAccounts(p *ListAccountsParams) (*ListAccountsResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("listAccounts", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r ListAccountsResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListAccountsResponse struct {
0000000000000000000000000000000000000000;;		Count    int        `json:"count"`
0000000000000000000000000000000000000000;;		Accounts []*Account `json:"account"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Account struct {
0000000000000000000000000000000000000000;;		Accountdetails            map[string]string `json:"accountdetails,omitempty"`
0000000000000000000000000000000000000000;;		Accounttype               int               `json:"accounttype,omitempty"`
0000000000000000000000000000000000000000;;		Cpuavailable              string            `json:"cpuavailable,omitempty"`
0000000000000000000000000000000000000000;;		Cpulimit                  string            `json:"cpulimit,omitempty"`
0000000000000000000000000000000000000000;;		Cputotal                  int64             `json:"cputotal,omitempty"`
0000000000000000000000000000000000000000;;		Defaultzoneid             string            `json:"defaultzoneid,omitempty"`
0000000000000000000000000000000000000000;;		Domain                    string            `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid                  string            `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Groups                    []string          `json:"groups,omitempty"`
0000000000000000000000000000000000000000;;		Id                        string            `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Ipavailable               string            `json:"ipavailable,omitempty"`
0000000000000000000000000000000000000000;;		Iplimit                   string            `json:"iplimit,omitempty"`
0000000000000000000000000000000000000000;;		Iptotal                   int64             `json:"iptotal,omitempty"`
0000000000000000000000000000000000000000;;		Iscleanuprequired         bool              `json:"iscleanuprequired,omitempty"`
0000000000000000000000000000000000000000;;		Isdefault                 bool              `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;		Memoryavailable           string            `json:"memoryavailable,omitempty"`
0000000000000000000000000000000000000000;;		Memorylimit               string            `json:"memorylimit,omitempty"`
0000000000000000000000000000000000000000;;		Memorytotal               int64             `json:"memorytotal,omitempty"`
0000000000000000000000000000000000000000;;		Name                      string            `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkavailable          string            `json:"networkavailable,omitempty"`
0000000000000000000000000000000000000000;;		Networkdomain             string            `json:"networkdomain,omitempty"`
0000000000000000000000000000000000000000;;		Networklimit              string            `json:"networklimit,omitempty"`
0000000000000000000000000000000000000000;;		Networktotal              int64             `json:"networktotal,omitempty"`
0000000000000000000000000000000000000000;;		Primarystorageavailable   string            `json:"primarystorageavailable,omitempty"`
0000000000000000000000000000000000000000;;		Primarystoragelimit       string            `json:"primarystoragelimit,omitempty"`
0000000000000000000000000000000000000000;;		Primarystoragetotal       int64             `json:"primarystoragetotal,omitempty"`
0000000000000000000000000000000000000000;;		Projectavailable          string            `json:"projectavailable,omitempty"`
0000000000000000000000000000000000000000;;		Projectlimit              string            `json:"projectlimit,omitempty"`
0000000000000000000000000000000000000000;;		Projecttotal              int64             `json:"projecttotal,omitempty"`
0000000000000000000000000000000000000000;;		Receivedbytes             int64             `json:"receivedbytes,omitempty"`
0000000000000000000000000000000000000000;;		Secondarystorageavailable string            `json:"secondarystorageavailable,omitempty"`
0000000000000000000000000000000000000000;;		Secondarystoragelimit     string            `json:"secondarystoragelimit,omitempty"`
0000000000000000000000000000000000000000;;		Secondarystoragetotal     int64             `json:"secondarystoragetotal,omitempty"`
0000000000000000000000000000000000000000;;		Sentbytes                 int64             `json:"sentbytes,omitempty"`
0000000000000000000000000000000000000000;;		Snapshotavailable         string            `json:"snapshotavailable,omitempty"`
0000000000000000000000000000000000000000;;		Snapshotlimit             string            `json:"snapshotlimit,omitempty"`
0000000000000000000000000000000000000000;;		Snapshottotal             int64             `json:"snapshottotal,omitempty"`
0000000000000000000000000000000000000000;;		State                     string            `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Templateavailable         string            `json:"templateavailable,omitempty"`
0000000000000000000000000000000000000000;;		Templatelimit             string            `json:"templatelimit,omitempty"`
0000000000000000000000000000000000000000;;		Templatetotal             int64             `json:"templatetotal,omitempty"`
0000000000000000000000000000000000000000;;		User                      []struct {
0000000000000000000000000000000000000000;;			Account             string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Accountid           string `json:"accountid,omitempty"`
0000000000000000000000000000000000000000;;			Accounttype         int    `json:"accounttype,omitempty"`
0000000000000000000000000000000000000000;;			Apikey              string `json:"apikey,omitempty"`
0000000000000000000000000000000000000000;;			Created             string `json:"created,omitempty"`
0000000000000000000000000000000000000000;;			Domain              string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid            string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Email               string `json:"email,omitempty"`
0000000000000000000000000000000000000000;;			Firstname           string `json:"firstname,omitempty"`
0000000000000000000000000000000000000000;;			Id                  string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Iscallerchilddomain bool   `json:"iscallerchilddomain,omitempty"`
0000000000000000000000000000000000000000;;			Isdefault           bool   `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;			Lastname            string `json:"lastname,omitempty"`
0000000000000000000000000000000000000000;;			Secretkey           string `json:"secretkey,omitempty"`
0000000000000000000000000000000000000000;;			State               string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;			Timezone            string `json:"timezone,omitempty"`
0000000000000000000000000000000000000000;;			Username            string `json:"username,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"user,omitempty"`
0000000000000000000000000000000000000000;;		Vmavailable     string `json:"vmavailable,omitempty"`
0000000000000000000000000000000000000000;;		Vmlimit         string `json:"vmlimit,omitempty"`
0000000000000000000000000000000000000000;;		Vmrunning       int    `json:"vmrunning,omitempty"`
0000000000000000000000000000000000000000;;		Vmstopped       int    `json:"vmstopped,omitempty"`
0000000000000000000000000000000000000000;;		Vmtotal         int64  `json:"vmtotal,omitempty"`
0000000000000000000000000000000000000000;;		Volumeavailable string `json:"volumeavailable,omitempty"`
0000000000000000000000000000000000000000;;		Volumelimit     string `json:"volumelimit,omitempty"`
0000000000000000000000000000000000000000;;		Volumetotal     int64  `json:"volumetotal,omitempty"`
0000000000000000000000000000000000000000;;		Vpcavailable    string `json:"vpcavailable,omitempty"`
0000000000000000000000000000000000000000;;		Vpclimit        string `json:"vpclimit,omitempty"`
0000000000000000000000000000000000000000;;		Vpctotal        int64  `json:"vpctotal,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MarkDefaultZoneForAccountParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *MarkDefaultZoneForAccountParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["account"]; found {
0000000000000000000000000000000000000000;;			u.Set("account", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["domainid"]; found {
0000000000000000000000000000000000000000;;			u.Set("domainid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["zoneid"]; found {
0000000000000000000000000000000000000000;;			u.Set("zoneid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *MarkDefaultZoneForAccountParams) SetAccount(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["account"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *MarkDefaultZoneForAccountParams) SetDomainid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["domainid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *MarkDefaultZoneForAccountParams) SetZoneid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["zoneid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new MarkDefaultZoneForAccountParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *AccountService) NewMarkDefaultZoneForAccountParams(account string, domainid string, zoneid string) *MarkDefaultZoneForAccountParams {
0000000000000000000000000000000000000000;;		p := &MarkDefaultZoneForAccountParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["account"] = account
0000000000000000000000000000000000000000;;		p.p["domainid"] = domainid
0000000000000000000000000000000000000000;;		p.p["zoneid"] = zoneid
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Marks a default zone for this account
0000000000000000000000000000000000000000;;	func (s *AccountService) MarkDefaultZoneForAccount(p *MarkDefaultZoneForAccountParams) (*MarkDefaultZoneForAccountResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("markDefaultZoneForAccount", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r MarkDefaultZoneForAccountResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MarkDefaultZoneForAccountResponse struct {
0000000000000000000000000000000000000000;;		JobID                     string            `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Accountdetails            map[string]string `json:"accountdetails,omitempty"`
0000000000000000000000000000000000000000;;		Accounttype               int               `json:"accounttype,omitempty"`
0000000000000000000000000000000000000000;;		Cpuavailable              string            `json:"cpuavailable,omitempty"`
0000000000000000000000000000000000000000;;		Cpulimit                  string            `json:"cpulimit,omitempty"`
0000000000000000000000000000000000000000;;		Cputotal                  int64             `json:"cputotal,omitempty"`
0000000000000000000000000000000000000000;;		Defaultzoneid             string            `json:"defaultzoneid,omitempty"`
0000000000000000000000000000000000000000;;		Domain                    string            `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid                  string            `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Groups                    []string          `json:"groups,omitempty"`
0000000000000000000000000000000000000000;;		Id                        string            `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Ipavailable               string            `json:"ipavailable,omitempty"`
0000000000000000000000000000000000000000;;		Iplimit                   string            `json:"iplimit,omitempty"`
0000000000000000000000000000000000000000;;		Iptotal                   int64             `json:"iptotal,omitempty"`
0000000000000000000000000000000000000000;;		Iscleanuprequired         bool              `json:"iscleanuprequired,omitempty"`
0000000000000000000000000000000000000000;;		Isdefault                 bool              `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;		Memoryavailable           string            `json:"memoryavailable,omitempty"`
0000000000000000000000000000000000000000;;		Memorylimit               string            `json:"memorylimit,omitempty"`
0000000000000000000000000000000000000000;;		Memorytotal               int64             `json:"memorytotal,omitempty"`
0000000000000000000000000000000000000000;;		Name                      string            `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkavailable          string            `json:"networkavailable,omitempty"`
0000000000000000000000000000000000000000;;		Networkdomain             string            `json:"networkdomain,omitempty"`
0000000000000000000000000000000000000000;;		Networklimit              string            `json:"networklimit,omitempty"`
0000000000000000000000000000000000000000;;		Networktotal              int64             `json:"networktotal,omitempty"`
0000000000000000000000000000000000000000;;		Primarystorageavailable   string            `json:"primarystorageavailable,omitempty"`
0000000000000000000000000000000000000000;;		Primarystoragelimit       string            `json:"primarystoragelimit,omitempty"`
0000000000000000000000000000000000000000;;		Primarystoragetotal       int64             `json:"primarystoragetotal,omitempty"`
0000000000000000000000000000000000000000;;		Projectavailable          string            `json:"projectavailable,omitempty"`
0000000000000000000000000000000000000000;;		Projectlimit              string            `json:"projectlimit,omitempty"`
0000000000000000000000000000000000000000;;		Projecttotal              int64             `json:"projecttotal,omitempty"`
0000000000000000000000000000000000000000;;		Receivedbytes             int64             `json:"receivedbytes,omitempty"`
0000000000000000000000000000000000000000;;		Secondarystorageavailable string            `json:"secondarystorageavailable,omitempty"`
0000000000000000000000000000000000000000;;		Secondarystoragelimit     string            `json:"secondarystoragelimit,omitempty"`
0000000000000000000000000000000000000000;;		Secondarystoragetotal     int64             `json:"secondarystoragetotal,omitempty"`
0000000000000000000000000000000000000000;;		Sentbytes                 int64             `json:"sentbytes,omitempty"`
0000000000000000000000000000000000000000;;		Snapshotavailable         string            `json:"snapshotavailable,omitempty"`
0000000000000000000000000000000000000000;;		Snapshotlimit             string            `json:"snapshotlimit,omitempty"`
0000000000000000000000000000000000000000;;		Snapshottotal             int64             `json:"snapshottotal,omitempty"`
0000000000000000000000000000000000000000;;		State                     string            `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Templateavailable         string            `json:"templateavailable,omitempty"`
0000000000000000000000000000000000000000;;		Templatelimit             string            `json:"templatelimit,omitempty"`
0000000000000000000000000000000000000000;;		Templatetotal             int64             `json:"templatetotal,omitempty"`
0000000000000000000000000000000000000000;;		User                      []struct {
0000000000000000000000000000000000000000;;			Account             string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Accountid           string `json:"accountid,omitempty"`
0000000000000000000000000000000000000000;;			Accounttype         int    `json:"accounttype,omitempty"`
0000000000000000000000000000000000000000;;			Apikey              string `json:"apikey,omitempty"`
0000000000000000000000000000000000000000;;			Created             string `json:"created,omitempty"`
0000000000000000000000000000000000000000;;			Domain              string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid            string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Email               string `json:"email,omitempty"`
0000000000000000000000000000000000000000;;			Firstname           string `json:"firstname,omitempty"`
0000000000000000000000000000000000000000;;			Id                  string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Iscallerchilddomain bool   `json:"iscallerchilddomain,omitempty"`
0000000000000000000000000000000000000000;;			Isdefault           bool   `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;			Lastname            string `json:"lastname,omitempty"`
0000000000000000000000000000000000000000;;			Secretkey           string `json:"secretkey,omitempty"`
0000000000000000000000000000000000000000;;			State               string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;			Timezone            string `json:"timezone,omitempty"`
0000000000000000000000000000000000000000;;			Username            string `json:"username,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"user,omitempty"`
0000000000000000000000000000000000000000;;		Vmavailable     string `json:"vmavailable,omitempty"`
0000000000000000000000000000000000000000;;		Vmlimit         string `json:"vmlimit,omitempty"`
0000000000000000000000000000000000000000;;		Vmrunning       int    `json:"vmrunning,omitempty"`
0000000000000000000000000000000000000000;;		Vmstopped       int    `json:"vmstopped,omitempty"`
0000000000000000000000000000000000000000;;		Vmtotal         int64  `json:"vmtotal,omitempty"`
0000000000000000000000000000000000000000;;		Volumeavailable string `json:"volumeavailable,omitempty"`
0000000000000000000000000000000000000000;;		Volumelimit     string `json:"volumelimit,omitempty"`
0000000000000000000000000000000000000000;;		Volumetotal     int64  `json:"volumetotal,omitempty"`
0000000000000000000000000000000000000000;;		Vpcavailable    string `json:"vpcavailable,omitempty"`
0000000000000000000000000000000000000000;;		Vpclimit        string `json:"vpclimit,omitempty"`
0000000000000000000000000000000000000000;;		Vpctotal        int64  `json:"vpctotal,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddAccountToProjectParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AddAccountToProjectParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["account"]; found {
0000000000000000000000000000000000000000;;			u.Set("account", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["email"]; found {
0000000000000000000000000000000000000000;;			u.Set("email", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["projectid"]; found {
0000000000000000000000000000000000000000;;			u.Set("projectid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AddAccountToProjectParams) SetAccount(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["account"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AddAccountToProjectParams) SetEmail(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["email"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *AddAccountToProjectParams) SetProjectid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["projectid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new AddAccountToProjectParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *AccountService) NewAddAccountToProjectParams(projectid string) *AddAccountToProjectParams {
0000000000000000000000000000000000000000;;		p := &AddAccountToProjectParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["projectid"] = projectid
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Adds account to a project
0000000000000000000000000000000000000000;;	func (s *AccountService) AddAccountToProject(p *AddAccountToProjectParams) (*AddAccountToProjectResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("addAccountToProject", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r AddAccountToProjectResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddAccountToProjectResponse struct {
0000000000000000000000000000000000000000;;		JobID       string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Displaytext string `json:"displaytext,omitempty"`
0000000000000000000000000000000000000000;;		Success     bool   `json:"success,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteAccountFromProjectParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeleteAccountFromProjectParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["account"]; found {
0000000000000000000000000000000000000000;;			u.Set("account", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["projectid"]; found {
0000000000000000000000000000000000000000;;			u.Set("projectid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeleteAccountFromProjectParams) SetAccount(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["account"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeleteAccountFromProjectParams) SetProjectid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["projectid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new DeleteAccountFromProjectParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *AccountService) NewDeleteAccountFromProjectParams(account string, projectid string) *DeleteAccountFromProjectParams {
0000000000000000000000000000000000000000;;		p := &DeleteAccountFromProjectParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["account"] = account
0000000000000000000000000000000000000000;;		p.p["projectid"] = projectid
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Deletes account from the project
0000000000000000000000000000000000000000;;	func (s *AccountService) DeleteAccountFromProject(p *DeleteAccountFromProjectParams) (*DeleteAccountFromProjectResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("deleteAccountFromProject", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r DeleteAccountFromProjectResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteAccountFromProjectResponse struct {
0000000000000000000000000000000000000000;;		JobID       string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Displaytext string `json:"displaytext,omitempty"`
0000000000000000000000000000000000000000;;		Success     bool   `json:"success,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListProjectAccountsParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListProjectAccountsParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["account"]; found {
0000000000000000000000000000000000000000;;			u.Set("account", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["keyword"]; found {
0000000000000000000000000000000000000000;;			u.Set("keyword", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["page"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.Itoa(v.(int))
0000000000000000000000000000000000000000;;			u.Set("page", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["pagesize"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.Itoa(v.(int))
0000000000000000000000000000000000000000;;			u.Set("pagesize", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["projectid"]; found {
0000000000000000000000000000000000000000;;			u.Set("projectid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["role"]; found {
0000000000000000000000000000000000000000;;			u.Set("role", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListProjectAccountsParams) SetAccount(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["account"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListProjectAccountsParams) SetKeyword(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["keyword"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListProjectAccountsParams) SetPage(v int) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["page"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListProjectAccountsParams) SetPagesize(v int) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["pagesize"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListProjectAccountsParams) SetProjectid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["projectid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListProjectAccountsParams) SetRole(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["role"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new ListProjectAccountsParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *AccountService) NewListProjectAccountsParams(projectid string) *ListProjectAccountsParams {
0000000000000000000000000000000000000000;;		p := &ListProjectAccountsParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["projectid"] = projectid
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is a courtesy helper function, which in some cases may not work as expected!
0000000000000000000000000000000000000000;;	func (s *AccountService) GetProjectAccountID(keyword string, projectid string, opts ...OptionFunc) (string, int, error) {
0000000000000000000000000000000000000000;;		p := &ListProjectAccountsParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.p["keyword"] = keyword
0000000000000000000000000000000000000000;;		p.p["projectid"] = projectid
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, fn := range opts {
0000000000000000000000000000000000000000;;			if err := fn(s.cs, p); err != nil {
0000000000000000000000000000000000000000;;				return "", -1, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		l, err := s.ListProjectAccounts(p)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", -1, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 0 {
0000000000000000000000000000000000000000;;			return "", l.Count, fmt.Errorf("No match found for %s: %+v", keyword, l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 1 {
0000000000000000000000000000000000000000;;			return l.ProjectAccounts[0].Id, l.Count, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count > 1 {
0000000000000000000000000000000000000000;;			for _, v := range l.ProjectAccounts {
0000000000000000000000000000000000000000;;				if v.Name == keyword {
0000000000000000000000000000000000000000;;					return v.Id, l.Count, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "", l.Count, fmt.Errorf("Could not find an exact match for %s: %+v", keyword, l)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Lists project's accounts
0000000000000000000000000000000000000000;;	func (s *AccountService) ListProjectAccounts(p *ListProjectAccountsParams) (*ListProjectAccountsResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("listProjectAccounts", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r ListProjectAccountsResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListProjectAccountsResponse struct {
0000000000000000000000000000000000000000;;		Count           int               `json:"count"`
0000000000000000000000000000000000000000;;		ProjectAccounts []*ProjectAccount `json:"projectaccount"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectAccount struct {
0000000000000000000000000000000000000000;;		Account                   string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Cpuavailable              string `json:"cpuavailable,omitempty"`
0000000000000000000000000000000000000000;;		Cpulimit                  string `json:"cpulimit,omitempty"`
0000000000000000000000000000000000000000;;		Cputotal                  int64  `json:"cputotal,omitempty"`
0000000000000000000000000000000000000000;;		Displaytext               string `json:"displaytext,omitempty"`
0000000000000000000000000000000000000000;;		Domain                    string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid                  string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Id                        string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Ipavailable               string `json:"ipavailable,omitempty"`
0000000000000000000000000000000000000000;;		Iplimit                   string `json:"iplimit,omitempty"`
0000000000000000000000000000000000000000;;		Iptotal                   int64  `json:"iptotal,omitempty"`
0000000000000000000000000000000000000000;;		Memoryavailable           string `json:"memoryavailable,omitempty"`
0000000000000000000000000000000000000000;;		Memorylimit               string `json:"memorylimit,omitempty"`
0000000000000000000000000000000000000000;;		Memorytotal               int64  `json:"memorytotal,omitempty"`
0000000000000000000000000000000000000000;;		Name                      string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Networkavailable          string `json:"networkavailable,omitempty"`
0000000000000000000000000000000000000000;;		Networklimit              string `json:"networklimit,omitempty"`
0000000000000000000000000000000000000000;;		Networktotal              int64  `json:"networktotal,omitempty"`
0000000000000000000000000000000000000000;;		Primarystorageavailable   string `json:"primarystorageavailable,omitempty"`
0000000000000000000000000000000000000000;;		Primarystoragelimit       string `json:"primarystoragelimit,omitempty"`
0000000000000000000000000000000000000000;;		Primarystoragetotal       int64  `json:"primarystoragetotal,omitempty"`
0000000000000000000000000000000000000000;;		Secondarystorageavailable string `json:"secondarystorageavailable,omitempty"`
0000000000000000000000000000000000000000;;		Secondarystoragelimit     string `json:"secondarystoragelimit,omitempty"`
0000000000000000000000000000000000000000;;		Secondarystoragetotal     int64  `json:"secondarystoragetotal,omitempty"`
0000000000000000000000000000000000000000;;		Snapshotavailable         string `json:"snapshotavailable,omitempty"`
0000000000000000000000000000000000000000;;		Snapshotlimit             string `json:"snapshotlimit,omitempty"`
0000000000000000000000000000000000000000;;		Snapshottotal             int64  `json:"snapshottotal,omitempty"`
0000000000000000000000000000000000000000;;		State                     string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Tags                      []struct {
0000000000000000000000000000000000000000;;			Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;			Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;			Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;			Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;			Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Templateavailable string `json:"templateavailable,omitempty"`
0000000000000000000000000000000000000000;;		Templatelimit     string `json:"templatelimit,omitempty"`
0000000000000000000000000000000000000000;;		Templatetotal     int64  `json:"templatetotal,omitempty"`
0000000000000000000000000000000000000000;;		Vmavailable       string `json:"vmavailable,omitempty"`
0000000000000000000000000000000000000000;;		Vmlimit           string `json:"vmlimit,omitempty"`
0000000000000000000000000000000000000000;;		Vmrunning         int    `json:"vmrunning,omitempty"`
0000000000000000000000000000000000000000;;		Vmstopped         int    `json:"vmstopped,omitempty"`
0000000000000000000000000000000000000000;;		Vmtotal           int64  `json:"vmtotal,omitempty"`
0000000000000000000000000000000000000000;;		Volumeavailable   string `json:"volumeavailable,omitempty"`
0000000000000000000000000000000000000000;;		Volumelimit       string `json:"volumelimit,omitempty"`
0000000000000000000000000000000000000000;;		Volumetotal       int64  `json:"volumetotal,omitempty"`
0000000000000000000000000000000000000000;;		Vpcavailable      string `json:"vpcavailable,omitempty"`
0000000000000000000000000000000000000000;;		Vpclimit          string `json:"vpclimit,omitempty"`
0000000000000000000000000000000000000000;;		Vpctotal          int64  `json:"vpctotal,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GetSolidFireAccountIdParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *GetSolidFireAccountIdParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["accountid"]; found {
0000000000000000000000000000000000000000;;			u.Set("accountid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["storageid"]; found {
0000000000000000000000000000000000000000;;			u.Set("storageid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *GetSolidFireAccountIdParams) SetAccountid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["accountid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *GetSolidFireAccountIdParams) SetStorageid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["storageid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new GetSolidFireAccountIdParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *AccountService) NewGetSolidFireAccountIdParams(accountid string, storageid string) *GetSolidFireAccountIdParams {
0000000000000000000000000000000000000000;;		p := &GetSolidFireAccountIdParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["accountid"] = accountid
0000000000000000000000000000000000000000;;		p.p["storageid"] = storageid
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get SolidFire Account ID
0000000000000000000000000000000000000000;;	func (s *AccountService) GetSolidFireAccountId(p *GetSolidFireAccountIdParams) (*GetSolidFireAccountIdResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("getSolidFireAccountId", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r GetSolidFireAccountIdResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GetSolidFireAccountIdResponse struct {
0000000000000000000000000000000000000000;;		SolidFireAccountId int64 `json:"solidFireAccountId,omitempty"`
0000000000000000000000000000000000000000;;	}
