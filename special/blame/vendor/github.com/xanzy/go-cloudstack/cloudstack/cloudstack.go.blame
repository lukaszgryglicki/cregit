0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Copyright 2016, Sander van Harmelen
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
0000000000000000000000000000000000000000;;	//
0a16da49b5158d8aef850f86fc8936f4afa6c64a;;	
0000000000000000000000000000000000000000;;	package cloudstack
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"crypto/hmac"
0000000000000000000000000000000000000000;;		"crypto/sha1"
0000000000000000000000000000000000000000;;		"crypto/tls"
0000000000000000000000000000000000000000;;		"encoding/base64"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"regexp"
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnlimitedResourceID is a special ID to define an unlimited resource
0000000000000000000000000000000000000000;;	const UnlimitedResourceID = "-1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var idRegex = regexp.MustCompile(`^([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|-1)$`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsID return true if the passed ID is either a UUID or a UnlimitedResourceID
0000000000000000000000000000000000000000;;	func IsID(id string) bool {
0000000000000000000000000000000000000000;;		return idRegex.MatchString(id)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OptionFunc can be passed to the courtesy helper functions to set additional parameters
0000000000000000000000000000000000000000;;	type OptionFunc func(*CloudStackClient, interface{}) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CSError struct {
0000000000000000000000000000000000000000;;		ErrorCode   int    `json:"errorcode"`
0000000000000000000000000000000000000000;;		CSErrorCode int    `json:"cserrorcode"`
0000000000000000000000000000000000000000;;		ErrorText   string `json:"errortext"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *CSError) Error() error {
0000000000000000000000000000000000000000;;		return fmt.Errorf("CloudStack API error %d (CSExceptionErrorCode: %d): %s", e.ErrorCode, e.CSErrorCode, e.ErrorText)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CloudStackClient struct {
0000000000000000000000000000000000000000;;		HTTPGETOnly bool // If `true` only use HTTP GET calls
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		client  *http.Client // The http client for communicating
0000000000000000000000000000000000000000;;		baseURL string       // The base URL of the API
0000000000000000000000000000000000000000;;		apiKey  string       // Api key
0000000000000000000000000000000000000000;;		secret  string       // Secret key
0000000000000000000000000000000000000000;;		async   bool         // Wait for async calls to finish
0000000000000000000000000000000000000000;;		timeout int64        // Max waiting timeout in seconds for async jobs to finish; defaults to 300 seconds
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		APIDiscovery     *APIDiscoveryService
0000000000000000000000000000000000000000;;		Account          *AccountService
0000000000000000000000000000000000000000;;		Address          *AddressService
0000000000000000000000000000000000000000;;		AffinityGroup    *AffinityGroupService
0000000000000000000000000000000000000000;;		Alert            *AlertService
0000000000000000000000000000000000000000;;		Asyncjob         *AsyncjobService
0000000000000000000000000000000000000000;;		Authentication   *AuthenticationService
0000000000000000000000000000000000000000;;		AutoScale        *AutoScaleService
0000000000000000000000000000000000000000;;		Baremetal        *BaremetalService
0000000000000000000000000000000000000000;;		Certificate      *CertificateService
0000000000000000000000000000000000000000;;		CloudIdentifier  *CloudIdentifierService
0000000000000000000000000000000000000000;;		Cluster          *ClusterService
0000000000000000000000000000000000000000;;		Configuration    *ConfigurationService
0000000000000000000000000000000000000000;;		DiskOffering     *DiskOfferingService
0000000000000000000000000000000000000000;;		Domain           *DomainService
0000000000000000000000000000000000000000;;		Event            *EventService
0000000000000000000000000000000000000000;;		Firewall         *FirewallService
0000000000000000000000000000000000000000;;		GuestOS          *GuestOSService
0000000000000000000000000000000000000000;;		Host             *HostService
0000000000000000000000000000000000000000;;		Hypervisor       *HypervisorService
0000000000000000000000000000000000000000;;		ISO              *ISOService
0000000000000000000000000000000000000000;;		ImageStore       *ImageStoreService
0000000000000000000000000000000000000000;;		InternalLB       *InternalLBService
0000000000000000000000000000000000000000;;		LDAP             *LDAPService
0000000000000000000000000000000000000000;;		Limit            *LimitService
0000000000000000000000000000000000000000;;		LoadBalancer     *LoadBalancerService
0000000000000000000000000000000000000000;;		NAT              *NATService
0000000000000000000000000000000000000000;;		NetworkACL       *NetworkACLService
0000000000000000000000000000000000000000;;		NetworkDevice    *NetworkDeviceService
0000000000000000000000000000000000000000;;		NetworkOffering  *NetworkOfferingService
0000000000000000000000000000000000000000;;		Network          *NetworkService
0000000000000000000000000000000000000000;;		Nic              *NicService
0000000000000000000000000000000000000000;;		NiciraNVP        *NiciraNVPService
0000000000000000000000000000000000000000;;		OvsElement       *OvsElementService
0000000000000000000000000000000000000000;;		Pod              *PodService
0000000000000000000000000000000000000000;;		Pool             *PoolService
0000000000000000000000000000000000000000;;		PortableIP       *PortableIPService
0000000000000000000000000000000000000000;;		Project          *ProjectService
0000000000000000000000000000000000000000;;		Quota            *QuotaService
0000000000000000000000000000000000000000;;		Region           *RegionService
0000000000000000000000000000000000000000;;		Resourcemetadata *ResourcemetadataService
0000000000000000000000000000000000000000;;		Resourcetags     *ResourcetagsService
0000000000000000000000000000000000000000;;		Router           *RouterService
0000000000000000000000000000000000000000;;		SSH              *SSHService
0000000000000000000000000000000000000000;;		SecurityGroup    *SecurityGroupService
0000000000000000000000000000000000000000;;		ServiceOffering  *ServiceOfferingService
0000000000000000000000000000000000000000;;		Snapshot         *SnapshotService
0000000000000000000000000000000000000000;;		StoragePool      *StoragePoolService
0000000000000000000000000000000000000000;;		StratosphereSSP  *StratosphereSSPService
0000000000000000000000000000000000000000;;		Swift            *SwiftService
0000000000000000000000000000000000000000;;		SystemCapacity   *SystemCapacityService
0000000000000000000000000000000000000000;;		SystemVM         *SystemVMService
0000000000000000000000000000000000000000;;		Template         *TemplateService
0000000000000000000000000000000000000000;;		UCS              *UCSService
0000000000000000000000000000000000000000;;		Usage            *UsageService
0000000000000000000000000000000000000000;;		User             *UserService
0000000000000000000000000000000000000000;;		VLAN             *VLANService
0000000000000000000000000000000000000000;;		VMGroup          *VMGroupService
0000000000000000000000000000000000000000;;		VPC              *VPCService
0000000000000000000000000000000000000000;;		VPN              *VPNService
0000000000000000000000000000000000000000;;		VirtualMachine   *VirtualMachineService
0000000000000000000000000000000000000000;;		Volume           *VolumeService
0000000000000000000000000000000000000000;;		Zone             *ZoneService
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Creates a new client for communicating with CloudStack
0000000000000000000000000000000000000000;;	func newClient(apiurl string, apikey string, secret string, async bool, verifyssl bool) *CloudStackClient {
0000000000000000000000000000000000000000;;		cs := &CloudStackClient{
0000000000000000000000000000000000000000;;			client: &http.Client{
0000000000000000000000000000000000000000;;				Transport: &http.Transport{
0000000000000000000000000000000000000000;;					Proxy:           http.ProxyFromEnvironment,
0000000000000000000000000000000000000000;;					TLSClientConfig: &tls.Config{InsecureSkipVerify: !verifyssl}, // If verifyssl is true, skipping the verify should be false and vice versa
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Timeout: time.Duration(60 * time.Second),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			baseURL: apiurl,
0000000000000000000000000000000000000000;;			apiKey:  apikey,
0000000000000000000000000000000000000000;;			secret:  secret,
0000000000000000000000000000000000000000;;			async:   async,
0000000000000000000000000000000000000000;;			timeout: 300,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cs.APIDiscovery = NewAPIDiscoveryService(cs)
0000000000000000000000000000000000000000;;		cs.Account = NewAccountService(cs)
0000000000000000000000000000000000000000;;		cs.Address = NewAddressService(cs)
0000000000000000000000000000000000000000;;		cs.AffinityGroup = NewAffinityGroupService(cs)
0000000000000000000000000000000000000000;;		cs.Alert = NewAlertService(cs)
0000000000000000000000000000000000000000;;		cs.Asyncjob = NewAsyncjobService(cs)
0000000000000000000000000000000000000000;;		cs.Authentication = NewAuthenticationService(cs)
0000000000000000000000000000000000000000;;		cs.AutoScale = NewAutoScaleService(cs)
0000000000000000000000000000000000000000;;		cs.Baremetal = NewBaremetalService(cs)
0000000000000000000000000000000000000000;;		cs.Certificate = NewCertificateService(cs)
0000000000000000000000000000000000000000;;		cs.CloudIdentifier = NewCloudIdentifierService(cs)
0000000000000000000000000000000000000000;;		cs.Cluster = NewClusterService(cs)
0000000000000000000000000000000000000000;;		cs.Configuration = NewConfigurationService(cs)
0000000000000000000000000000000000000000;;		cs.DiskOffering = NewDiskOfferingService(cs)
0000000000000000000000000000000000000000;;		cs.Domain = NewDomainService(cs)
0000000000000000000000000000000000000000;;		cs.Event = NewEventService(cs)
0000000000000000000000000000000000000000;;		cs.Firewall = NewFirewallService(cs)
0000000000000000000000000000000000000000;;		cs.GuestOS = NewGuestOSService(cs)
0000000000000000000000000000000000000000;;		cs.Host = NewHostService(cs)
0000000000000000000000000000000000000000;;		cs.Hypervisor = NewHypervisorService(cs)
0000000000000000000000000000000000000000;;		cs.ISO = NewISOService(cs)
0000000000000000000000000000000000000000;;		cs.ImageStore = NewImageStoreService(cs)
0000000000000000000000000000000000000000;;		cs.InternalLB = NewInternalLBService(cs)
0000000000000000000000000000000000000000;;		cs.LDAP = NewLDAPService(cs)
0000000000000000000000000000000000000000;;		cs.Limit = NewLimitService(cs)
0000000000000000000000000000000000000000;;		cs.LoadBalancer = NewLoadBalancerService(cs)
0000000000000000000000000000000000000000;;		cs.NAT = NewNATService(cs)
0000000000000000000000000000000000000000;;		cs.NetworkACL = NewNetworkACLService(cs)
0000000000000000000000000000000000000000;;		cs.NetworkDevice = NewNetworkDeviceService(cs)
0000000000000000000000000000000000000000;;		cs.NetworkOffering = NewNetworkOfferingService(cs)
0000000000000000000000000000000000000000;;		cs.Network = NewNetworkService(cs)
0000000000000000000000000000000000000000;;		cs.Nic = NewNicService(cs)
0000000000000000000000000000000000000000;;		cs.NiciraNVP = NewNiciraNVPService(cs)
0000000000000000000000000000000000000000;;		cs.OvsElement = NewOvsElementService(cs)
0000000000000000000000000000000000000000;;		cs.Pod = NewPodService(cs)
0000000000000000000000000000000000000000;;		cs.Pool = NewPoolService(cs)
0000000000000000000000000000000000000000;;		cs.PortableIP = NewPortableIPService(cs)
0000000000000000000000000000000000000000;;		cs.Project = NewProjectService(cs)
0000000000000000000000000000000000000000;;		cs.Quota = NewQuotaService(cs)
0000000000000000000000000000000000000000;;		cs.Region = NewRegionService(cs)
0000000000000000000000000000000000000000;;		cs.Resourcemetadata = NewResourcemetadataService(cs)
0000000000000000000000000000000000000000;;		cs.Resourcetags = NewResourcetagsService(cs)
0000000000000000000000000000000000000000;;		cs.Router = NewRouterService(cs)
0000000000000000000000000000000000000000;;		cs.SSH = NewSSHService(cs)
0000000000000000000000000000000000000000;;		cs.SecurityGroup = NewSecurityGroupService(cs)
0000000000000000000000000000000000000000;;		cs.ServiceOffering = NewServiceOfferingService(cs)
0000000000000000000000000000000000000000;;		cs.Snapshot = NewSnapshotService(cs)
0000000000000000000000000000000000000000;;		cs.StoragePool = NewStoragePoolService(cs)
0000000000000000000000000000000000000000;;		cs.StratosphereSSP = NewStratosphereSSPService(cs)
0000000000000000000000000000000000000000;;		cs.Swift = NewSwiftService(cs)
0000000000000000000000000000000000000000;;		cs.SystemCapacity = NewSystemCapacityService(cs)
0000000000000000000000000000000000000000;;		cs.SystemVM = NewSystemVMService(cs)
0000000000000000000000000000000000000000;;		cs.Template = NewTemplateService(cs)
0000000000000000000000000000000000000000;;		cs.UCS = NewUCSService(cs)
0000000000000000000000000000000000000000;;		cs.Usage = NewUsageService(cs)
0000000000000000000000000000000000000000;;		cs.User = NewUserService(cs)
0000000000000000000000000000000000000000;;		cs.VLAN = NewVLANService(cs)
0000000000000000000000000000000000000000;;		cs.VMGroup = NewVMGroupService(cs)
0000000000000000000000000000000000000000;;		cs.VPC = NewVPCService(cs)
0000000000000000000000000000000000000000;;		cs.VPN = NewVPNService(cs)
0000000000000000000000000000000000000000;;		cs.VirtualMachine = NewVirtualMachineService(cs)
0000000000000000000000000000000000000000;;		cs.Volume = NewVolumeService(cs)
0000000000000000000000000000000000000000;;		cs.Zone = NewZoneService(cs)
0000000000000000000000000000000000000000;;		return cs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Default non-async client. So for async calls you need to implement and check the async job result yourself. When using
0000000000000000000000000000000000000000;;	// HTTPS with a self-signed certificate to connect to your CloudStack API, you would probably want to set 'verifyssl' to
0000000000000000000000000000000000000000;;	// false so the call ignores the SSL errors/warnings.
0000000000000000000000000000000000000000;;	func NewClient(apiurl string, apikey string, secret string, verifyssl bool) *CloudStackClient {
0000000000000000000000000000000000000000;;		cs := newClient(apiurl, apikey, secret, false, verifyssl)
0000000000000000000000000000000000000000;;		return cs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// For sync API calls this client behaves exactly the same as a standard client call, but for async API calls
0000000000000000000000000000000000000000;;	// this client will wait until the async job is finished or until the configured AsyncTimeout is reached. When the async
0000000000000000000000000000000000000000;;	// job finishes successfully it will return actual object received from the API and nil, but when the timout is
0000000000000000000000000000000000000000;;	// reached it will return the initial object containing the async job ID for the running job and a warning.
0000000000000000000000000000000000000000;;	func NewAsyncClient(apiurl string, apikey string, secret string, verifyssl bool) *CloudStackClient {
0000000000000000000000000000000000000000;;		cs := newClient(apiurl, apikey, secret, true, verifyssl)
0000000000000000000000000000000000000000;;		return cs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// When using the async client an api call will wait for the async call to finish before returning. The default is to poll for 300 seconds
0000000000000000000000000000000000000000;;	// seconds, to check if the async job is finished.
0000000000000000000000000000000000000000;;	func (cs *CloudStackClient) AsyncTimeout(timeoutInSeconds int64) {
0000000000000000000000000000000000000000;;		cs.timeout = timeoutInSeconds
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var AsyncTimeoutErr = errors.New("Timeout while waiting for async job to finish")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A helper function that you can use to get the result of a running async job. If the job is not finished within the configured
0000000000000000000000000000000000000000;;	// timeout, the async job returns a AsyncTimeoutErr.
0000000000000000000000000000000000000000;;	func (cs *CloudStackClient) GetAsyncJobResult(jobid string, timeout int64) (json.RawMessage, error) {
0000000000000000000000000000000000000000;;		var timer time.Duration
0000000000000000000000000000000000000000;;		currentTime := time.Now().Unix()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			p := cs.Asyncjob.NewQueryAsyncJobResultParams(jobid)
0000000000000000000000000000000000000000;;			r, err := cs.Asyncjob.QueryAsyncJobResult(p)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Status 1 means the job is finished successfully
0000000000000000000000000000000000000000;;			if r.Jobstatus == 1 {
0000000000000000000000000000000000000000;;				return r.Jobresult, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// When the status is 2, the job has failed
0000000000000000000000000000000000000000;;			if r.Jobstatus == 2 {
0000000000000000000000000000000000000000;;				if r.Jobresulttype == "text" {
0000000000000000000000000000000000000000;;					return nil, fmt.Errorf(string(r.Jobresult))
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					return nil, fmt.Errorf("Undefined error: %s", string(r.Jobresult))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if time.Now().Unix()-currentTime > timeout {
0000000000000000000000000000000000000000;;				return nil, AsyncTimeoutErr
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Add an (extremely simple) exponential backoff like feature to prevent
0000000000000000000000000000000000000000;;			// flooding the CloudStack API
0000000000000000000000000000000000000000;;			if timer < 15 {
0000000000000000000000000000000000000000;;				timer++
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			time.Sleep(timer * time.Second)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Execute the request against a CS API. Will return the raw JSON data returned by the API and nil if
0000000000000000000000000000000000000000;;	// no error occured. If the API returns an error the result will be nil and the HTTP error code and CS
0000000000000000000000000000000000000000;;	// error details. If a processing (code) error occurs the result will be nil and the generated error
0000000000000000000000000000000000000000;;	func (cs *CloudStackClient) newRequest(api string, params url.Values) (json.RawMessage, error) {
0000000000000000000000000000000000000000;;		params.Set("apiKey", cs.apiKey)
0000000000000000000000000000000000000000;;		params.Set("command", api)
0000000000000000000000000000000000000000;;		params.Set("response", "json")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Generate signature for API call
0000000000000000000000000000000000000000;;		// * Serialize parameters, URL encoding only values and sort them by key, done by encodeValues
0000000000000000000000000000000000000000;;		// * Convert the entire argument string to lowercase
0000000000000000000000000000000000000000;;		// * Replace all instances of '+' to '%20'
0000000000000000000000000000000000000000;;		// * Calculate HMAC SHA1 of argument string with CloudStack secret
0000000000000000000000000000000000000000;;		// * URL encode the string and convert to base64
0000000000000000000000000000000000000000;;		s := encodeValues(params)
0000000000000000000000000000000000000000;;		s2 := strings.ToLower(s)
0000000000000000000000000000000000000000;;		s3 := strings.Replace(s2, "+", "%20", -1)
0000000000000000000000000000000000000000;;		mac := hmac.New(sha1.New, []byte(cs.secret))
0000000000000000000000000000000000000000;;		mac.Write([]byte(s3))
0000000000000000000000000000000000000000;;		signature := base64.StdEncoding.EncodeToString(mac.Sum(nil))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		var resp *http.Response
0000000000000000000000000000000000000000;;		if !cs.HTTPGETOnly && (api == "deployVirtualMachine" || api == "updateVirtualMachine") {
0000000000000000000000000000000000000000;;			// The deployVirtualMachine API should be called using a POST call
0000000000000000000000000000000000000000;;			// so we don't have to worry about the userdata size
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Add the unescaped signature to the POST params
0000000000000000000000000000000000000000;;			params.Set("signature", signature)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Make a POST call
0000000000000000000000000000000000000000;;			resp, err = cs.client.PostForm(cs.baseURL, params)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			// Create the final URL before we issue the request
0000000000000000000000000000000000000000;;			url := cs.baseURL + "?" + s + "&signature=" + url.QueryEscape(signature)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Make a GET call
0000000000000000000000000000000000000000;;			resp, err = cs.client.Get(url)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		b, err := ioutil.ReadAll(resp.Body)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Need to get the raw value to make the result play nice
0000000000000000000000000000000000000000;;		b, err = getRawValue(b)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if resp.StatusCode != 200 {
0000000000000000000000000000000000000000;;			var e CSError
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &e); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, e.Error()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return b, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Custom version of net/url Encode that only URL escapes values
0000000000000000000000000000000000000000;;	// Unmodified portions here remain under BSD license of The Go Authors: https://go.googlesource.com/go/+/master/LICENSE
0000000000000000000000000000000000000000;;	func encodeValues(v url.Values) string {
0000000000000000000000000000000000000000;;		if v == nil {
0000000000000000000000000000000000000000;;			return ""
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var buf bytes.Buffer
0000000000000000000000000000000000000000;;		keys := make([]string, 0, len(v))
0000000000000000000000000000000000000000;;		for k := range v {
0000000000000000000000000000000000000000;;			keys = append(keys, k)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sort.Strings(keys)
0000000000000000000000000000000000000000;;		for _, k := range keys {
0000000000000000000000000000000000000000;;			vs := v[k]
0000000000000000000000000000000000000000;;			prefix := k + "="
0000000000000000000000000000000000000000;;			for _, v := range vs {
0000000000000000000000000000000000000000;;				if buf.Len() > 0 {
0000000000000000000000000000000000000000;;					buf.WriteByte('&')
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				buf.WriteString(prefix)
0000000000000000000000000000000000000000;;				buf.WriteString(url.QueryEscape(v))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return buf.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Generic function to get the first raw value from a response as json.RawMessage
0000000000000000000000000000000000000000;;	func getRawValue(b json.RawMessage) (json.RawMessage, error) {
0000000000000000000000000000000000000000;;		var m map[string]json.RawMessage
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(b, &m); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, v := range m {
0000000000000000000000000000000000000000;;			return v, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("Unable to extract the raw value from:\n\n%s\n\n", string(b))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ProjectIDSetter is an interface that every type that can set a project ID must implement
0000000000000000000000000000000000000000;;	type ProjectIDSetter interface {
0000000000000000000000000000000000000000;;		SetProjectid(string)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithProject takes either a project name or ID and sets the `projectid` parameter
0000000000000000000000000000000000000000;;	func WithProject(project string) OptionFunc {
0000000000000000000000000000000000000000;;		return func(cs *CloudStackClient, p interface{}) error {
0000000000000000000000000000000000000000;;			ps, ok := p.(ProjectIDSetter)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !ok || project == "" {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !IsID(project) {
0000000000000000000000000000000000000000;;				id, _, err := cs.Project.GetProjectID(project)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				project = id
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			ps.SetProjectid(project)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VPCIDSetter is an interface that every type that can set a vpc ID must implement
0000000000000000000000000000000000000000;;	type VPCIDSetter interface {
0000000000000000000000000000000000000000;;		SetVpcid(string)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithVPCID takes a vpc ID and sets the `vpcid` parameter
0000000000000000000000000000000000000000;;	func WithVPCID(id string) OptionFunc {
0000000000000000000000000000000000000000;;		return func(cs *CloudStackClient, p interface{}) error {
0000000000000000000000000000000000000000;;			vs, ok := p.(VPCIDSetter)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !ok || id == "" {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			vs.SetVpcid(id)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type APIDiscoveryService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewAPIDiscoveryService(cs *CloudStackClient) *APIDiscoveryService {
0000000000000000000000000000000000000000;;		return &APIDiscoveryService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AccountService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewAccountService(cs *CloudStackClient) *AccountService {
0000000000000000000000000000000000000000;;		return &AccountService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddressService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewAddressService(cs *CloudStackClient) *AddressService {
0000000000000000000000000000000000000000;;		return &AddressService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AffinityGroupService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewAffinityGroupService(cs *CloudStackClient) *AffinityGroupService {
0000000000000000000000000000000000000000;;		return &AffinityGroupService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AlertService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewAlertService(cs *CloudStackClient) *AlertService {
0000000000000000000000000000000000000000;;		return &AlertService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AsyncjobService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewAsyncjobService(cs *CloudStackClient) *AsyncjobService {
0000000000000000000000000000000000000000;;		return &AsyncjobService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AuthenticationService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewAuthenticationService(cs *CloudStackClient) *AuthenticationService {
0000000000000000000000000000000000000000;;		return &AuthenticationService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AutoScaleService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewAutoScaleService(cs *CloudStackClient) *AutoScaleService {
0000000000000000000000000000000000000000;;		return &AutoScaleService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BaremetalService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewBaremetalService(cs *CloudStackClient) *BaremetalService {
0000000000000000000000000000000000000000;;		return &BaremetalService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CertificateService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewCertificateService(cs *CloudStackClient) *CertificateService {
0000000000000000000000000000000000000000;;		return &CertificateService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CloudIdentifierService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewCloudIdentifierService(cs *CloudStackClient) *CloudIdentifierService {
0000000000000000000000000000000000000000;;		return &CloudIdentifierService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewClusterService(cs *CloudStackClient) *ClusterService {
0000000000000000000000000000000000000000;;		return &ClusterService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConfigurationService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewConfigurationService(cs *CloudStackClient) *ConfigurationService {
0000000000000000000000000000000000000000;;		return &ConfigurationService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DiskOfferingService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewDiskOfferingService(cs *CloudStackClient) *DiskOfferingService {
0000000000000000000000000000000000000000;;		return &DiskOfferingService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DomainService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewDomainService(cs *CloudStackClient) *DomainService {
0000000000000000000000000000000000000000;;		return &DomainService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EventService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewEventService(cs *CloudStackClient) *EventService {
0000000000000000000000000000000000000000;;		return &EventService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FirewallService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewFirewallService(cs *CloudStackClient) *FirewallService {
0000000000000000000000000000000000000000;;		return &FirewallService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestOSService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewGuestOSService(cs *CloudStackClient) *GuestOSService {
0000000000000000000000000000000000000000;;		return &GuestOSService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewHostService(cs *CloudStackClient) *HostService {
0000000000000000000000000000000000000000;;		return &HostService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HypervisorService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewHypervisorService(cs *CloudStackClient) *HypervisorService {
0000000000000000000000000000000000000000;;		return &HypervisorService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ISOService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewISOService(cs *CloudStackClient) *ISOService {
0000000000000000000000000000000000000000;;		return &ISOService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ImageStoreService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewImageStoreService(cs *CloudStackClient) *ImageStoreService {
0000000000000000000000000000000000000000;;		return &ImageStoreService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InternalLBService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewInternalLBService(cs *CloudStackClient) *InternalLBService {
0000000000000000000000000000000000000000;;		return &InternalLBService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LDAPService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewLDAPService(cs *CloudStackClient) *LDAPService {
0000000000000000000000000000000000000000;;		return &LDAPService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LimitService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewLimitService(cs *CloudStackClient) *LimitService {
0000000000000000000000000000000000000000;;		return &LimitService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LoadBalancerService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewLoadBalancerService(cs *CloudStackClient) *LoadBalancerService {
0000000000000000000000000000000000000000;;		return &LoadBalancerService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NATService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewNATService(cs *CloudStackClient) *NATService {
0000000000000000000000000000000000000000;;		return &NATService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NetworkACLService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewNetworkACLService(cs *CloudStackClient) *NetworkACLService {
0000000000000000000000000000000000000000;;		return &NetworkACLService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NetworkDeviceService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewNetworkDeviceService(cs *CloudStackClient) *NetworkDeviceService {
0000000000000000000000000000000000000000;;		return &NetworkDeviceService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NetworkOfferingService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewNetworkOfferingService(cs *CloudStackClient) *NetworkOfferingService {
0000000000000000000000000000000000000000;;		return &NetworkOfferingService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NetworkService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewNetworkService(cs *CloudStackClient) *NetworkService {
0000000000000000000000000000000000000000;;		return &NetworkService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NicService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewNicService(cs *CloudStackClient) *NicService {
0000000000000000000000000000000000000000;;		return &NicService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NiciraNVPService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewNiciraNVPService(cs *CloudStackClient) *NiciraNVPService {
0000000000000000000000000000000000000000;;		return &NiciraNVPService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvsElementService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewOvsElementService(cs *CloudStackClient) *OvsElementService {
0000000000000000000000000000000000000000;;		return &OvsElementService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PodService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewPodService(cs *CloudStackClient) *PodService {
0000000000000000000000000000000000000000;;		return &PodService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PoolService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewPoolService(cs *CloudStackClient) *PoolService {
0000000000000000000000000000000000000000;;		return &PoolService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PortableIPService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewPortableIPService(cs *CloudStackClient) *PortableIPService {
0000000000000000000000000000000000000000;;		return &PortableIPService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewProjectService(cs *CloudStackClient) *ProjectService {
0000000000000000000000000000000000000000;;		return &ProjectService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QuotaService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewQuotaService(cs *CloudStackClient) *QuotaService {
0000000000000000000000000000000000000000;;		return &QuotaService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RegionService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewRegionService(cs *CloudStackClient) *RegionService {
0000000000000000000000000000000000000000;;		return &RegionService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResourcemetadataService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewResourcemetadataService(cs *CloudStackClient) *ResourcemetadataService {
0000000000000000000000000000000000000000;;		return &ResourcemetadataService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResourcetagsService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewResourcetagsService(cs *CloudStackClient) *ResourcetagsService {
0000000000000000000000000000000000000000;;		return &ResourcetagsService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RouterService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewRouterService(cs *CloudStackClient) *RouterService {
0000000000000000000000000000000000000000;;		return &RouterService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SSHService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewSSHService(cs *CloudStackClient) *SSHService {
0000000000000000000000000000000000000000;;		return &SSHService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SecurityGroupService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewSecurityGroupService(cs *CloudStackClient) *SecurityGroupService {
0000000000000000000000000000000000000000;;		return &SecurityGroupService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ServiceOfferingService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewServiceOfferingService(cs *CloudStackClient) *ServiceOfferingService {
0000000000000000000000000000000000000000;;		return &ServiceOfferingService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SnapshotService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewSnapshotService(cs *CloudStackClient) *SnapshotService {
0000000000000000000000000000000000000000;;		return &SnapshotService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StoragePoolService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewStoragePoolService(cs *CloudStackClient) *StoragePoolService {
0000000000000000000000000000000000000000;;		return &StoragePoolService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StratosphereSSPService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewStratosphereSSPService(cs *CloudStackClient) *StratosphereSSPService {
0000000000000000000000000000000000000000;;		return &StratosphereSSPService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SwiftService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewSwiftService(cs *CloudStackClient) *SwiftService {
0000000000000000000000000000000000000000;;		return &SwiftService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SystemCapacityService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewSystemCapacityService(cs *CloudStackClient) *SystemCapacityService {
0000000000000000000000000000000000000000;;		return &SystemCapacityService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SystemVMService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewSystemVMService(cs *CloudStackClient) *SystemVMService {
0000000000000000000000000000000000000000;;		return &SystemVMService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TemplateService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewTemplateService(cs *CloudStackClient) *TemplateService {
0000000000000000000000000000000000000000;;		return &TemplateService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UCSService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewUCSService(cs *CloudStackClient) *UCSService {
0000000000000000000000000000000000000000;;		return &UCSService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UsageService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewUsageService(cs *CloudStackClient) *UsageService {
0000000000000000000000000000000000000000;;		return &UsageService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UserService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewUserService(cs *CloudStackClient) *UserService {
0000000000000000000000000000000000000000;;		return &UserService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VLANService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewVLANService(cs *CloudStackClient) *VLANService {
0000000000000000000000000000000000000000;;		return &VLANService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VMGroupService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewVMGroupService(cs *CloudStackClient) *VMGroupService {
0000000000000000000000000000000000000000;;		return &VMGroupService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VPCService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewVPCService(cs *CloudStackClient) *VPCService {
0000000000000000000000000000000000000000;;		return &VPCService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VPNService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewVPNService(cs *CloudStackClient) *VPNService {
0000000000000000000000000000000000000000;;		return &VPNService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewVirtualMachineService(cs *CloudStackClient) *VirtualMachineService {
0000000000000000000000000000000000000000;;		return &VirtualMachineService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VolumeService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewVolumeService(cs *CloudStackClient) *VolumeService {
0000000000000000000000000000000000000000;;		return &VolumeService{cs: cs}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ZoneService struct {
0000000000000000000000000000000000000000;;		cs *CloudStackClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewZoneService(cs *CloudStackClient) *ZoneService {
0000000000000000000000000000000000000000;;		return &ZoneService{cs: cs}
0000000000000000000000000000000000000000;;	}
