0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Copyright 2016, Sander van Harmelen
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
0000000000000000000000000000000000000000;;	//
0a16da49b5158d8aef850f86fc8936f4afa6c64a;;	
0000000000000000000000000000000000000000;;	package cloudstack
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateVPCParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateVPCParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["account"]; found {
0000000000000000000000000000000000000000;;			u.Set("account", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["cidr"]; found {
0000000000000000000000000000000000000000;;			u.Set("cidr", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["displaytext"]; found {
0000000000000000000000000000000000000000;;			u.Set("displaytext", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["domainid"]; found {
0000000000000000000000000000000000000000;;			u.Set("domainid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["fordisplay"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("fordisplay", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["name"]; found {
0000000000000000000000000000000000000000;;			u.Set("name", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["networkdomain"]; found {
0000000000000000000000000000000000000000;;			u.Set("networkdomain", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["projectid"]; found {
0000000000000000000000000000000000000000;;			u.Set("projectid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["start"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("start", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["vpcofferingid"]; found {
0000000000000000000000000000000000000000;;			u.Set("vpcofferingid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["zoneid"]; found {
0000000000000000000000000000000000000000;;			u.Set("zoneid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateVPCParams) SetAccount(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["account"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateVPCParams) SetCidr(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["cidr"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateVPCParams) SetDisplaytext(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["displaytext"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateVPCParams) SetDomainid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["domainid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateVPCParams) SetFordisplay(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["fordisplay"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateVPCParams) SetName(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["name"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateVPCParams) SetNetworkdomain(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["networkdomain"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateVPCParams) SetProjectid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["projectid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateVPCParams) SetStart(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["start"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateVPCParams) SetVpcofferingid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["vpcofferingid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateVPCParams) SetZoneid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["zoneid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new CreateVPCParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VPCService) NewCreateVPCParams(cidr string, displaytext string, name string, vpcofferingid string, zoneid string) *CreateVPCParams {
0000000000000000000000000000000000000000;;		p := &CreateVPCParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["cidr"] = cidr
0000000000000000000000000000000000000000;;		p.p["displaytext"] = displaytext
0000000000000000000000000000000000000000;;		p.p["name"] = name
0000000000000000000000000000000000000000;;		p.p["vpcofferingid"] = vpcofferingid
0000000000000000000000000000000000000000;;		p.p["zoneid"] = zoneid
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Creates a VPC
0000000000000000000000000000000000000000;;	func (s *VPCService) CreateVPC(p *CreateVPCParams) (*CreateVPCResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("createVPC", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r CreateVPCResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateVPCResponse struct {
0000000000000000000000000000000000000000;;		JobID                string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Account              string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Cidr                 string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;		Created              string `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Displaytext          string `json:"displaytext,omitempty"`
0000000000000000000000000000000000000000;;		Distributedvpcrouter bool   `json:"distributedvpcrouter,omitempty"`
0000000000000000000000000000000000000000;;		Domain               string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid             string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Fordisplay           bool   `json:"fordisplay,omitempty"`
0000000000000000000000000000000000000000;;		Id                   string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Name                 string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Network              []struct {
0000000000000000000000000000000000000000;;			Account                     string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Aclid                       string `json:"aclid,omitempty"`
0000000000000000000000000000000000000000;;			Acltype                     string `json:"acltype,omitempty"`
0000000000000000000000000000000000000000;;			Broadcastdomaintype         string `json:"broadcastdomaintype,omitempty"`
0000000000000000000000000000000000000000;;			Broadcasturi                string `json:"broadcasturi,omitempty"`
0000000000000000000000000000000000000000;;			Canusefordeploy             bool   `json:"canusefordeploy,omitempty"`
0000000000000000000000000000000000000000;;			Cidr                        string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;			Displaynetwork              bool   `json:"displaynetwork,omitempty"`
0000000000000000000000000000000000000000;;			Displaytext                 string `json:"displaytext,omitempty"`
0000000000000000000000000000000000000000;;			Dns1                        string `json:"dns1,omitempty"`
0000000000000000000000000000000000000000;;			Dns2                        string `json:"dns2,omitempty"`
0000000000000000000000000000000000000000;;			Domain                      string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid                    string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Gateway                     string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;			Id                          string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ip6cidr                     string `json:"ip6cidr,omitempty"`
0000000000000000000000000000000000000000;;			Ip6gateway                  string `json:"ip6gateway,omitempty"`
0000000000000000000000000000000000000000;;			Isdefault                   bool   `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;			Ispersistent                bool   `json:"ispersistent,omitempty"`
0000000000000000000000000000000000000000;;			Issystem                    bool   `json:"issystem,omitempty"`
0000000000000000000000000000000000000000;;			Name                        string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Netmask                     string `json:"netmask,omitempty"`
0000000000000000000000000000000000000000;;			Networkcidr                 string `json:"networkcidr,omitempty"`
0000000000000000000000000000000000000000;;			Networkdomain               string `json:"networkdomain,omitempty"`
0000000000000000000000000000000000000000;;			Networkofferingavailability string `json:"networkofferingavailability,omitempty"`
0000000000000000000000000000000000000000;;			Networkofferingconservemode bool   `json:"networkofferingconservemode,omitempty"`
0000000000000000000000000000000000000000;;			Networkofferingdisplaytext  string `json:"networkofferingdisplaytext,omitempty"`
0000000000000000000000000000000000000000;;			Networkofferingid           string `json:"networkofferingid,omitempty"`
0000000000000000000000000000000000000000;;			Networkofferingname         string `json:"networkofferingname,omitempty"`
0000000000000000000000000000000000000000;;			Physicalnetworkid           string `json:"physicalnetworkid,omitempty"`
0000000000000000000000000000000000000000;;			Project                     string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid                   string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Related                     string `json:"related,omitempty"`
0000000000000000000000000000000000000000;;			Reservediprange             string `json:"reservediprange,omitempty"`
0000000000000000000000000000000000000000;;			Restartrequired             bool   `json:"restartrequired,omitempty"`
0000000000000000000000000000000000000000;;			Service                     []struct {
0000000000000000000000000000000000000000;;				Capability []struct {
0000000000000000000000000000000000000000;;					Canchooseservicecapability bool   `json:"canchooseservicecapability,omitempty"`
0000000000000000000000000000000000000000;;					Name                       string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;					Value                      string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"capability,omitempty"`
0000000000000000000000000000000000000000;;				Name     string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;				Provider []struct {
0000000000000000000000000000000000000000;;					Canenableindividualservice   bool     `json:"canenableindividualservice,omitempty"`
0000000000000000000000000000000000000000;;					Destinationphysicalnetworkid string   `json:"destinationphysicalnetworkid,omitempty"`
0000000000000000000000000000000000000000;;					Id                           string   `json:"id,omitempty"`
0000000000000000000000000000000000000000;;					Name                         string   `json:"name,omitempty"`
0000000000000000000000000000000000000000;;					Physicalnetworkid            string   `json:"physicalnetworkid,omitempty"`
0000000000000000000000000000000000000000;;					Servicelist                  []string `json:"servicelist,omitempty"`
0000000000000000000000000000000000000000;;					State                        string   `json:"state,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"provider,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"service,omitempty"`
0000000000000000000000000000000000000000;;			Specifyipranges  bool   `json:"specifyipranges,omitempty"`
0000000000000000000000000000000000000000;;			State            string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;			Strechedl2subnet bool   `json:"strechedl2subnet,omitempty"`
0000000000000000000000000000000000000000;;			Subdomainaccess  bool   `json:"subdomainaccess,omitempty"`
0000000000000000000000000000000000000000;;			Tags             []struct {
0000000000000000000000000000000000000000;;				Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;				Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;				Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;				Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;				Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;				Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;				Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;				Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;				Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			Traffictype       string   `json:"traffictype,omitempty"`
0000000000000000000000000000000000000000;;			Type              string   `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			Vlan              string   `json:"vlan,omitempty"`
0000000000000000000000000000000000000000;;			Vpcid             string   `json:"vpcid,omitempty"`
0000000000000000000000000000000000000000;;			Zoneid            string   `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;			Zonename          string   `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;			Zonesnetworkspans []string `json:"zonesnetworkspans,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"network,omitempty"`
0000000000000000000000000000000000000000;;		Networkdomain      string `json:"networkdomain,omitempty"`
0000000000000000000000000000000000000000;;		Project            string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid          string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;		Redundantvpcrouter bool   `json:"redundantvpcrouter,omitempty"`
0000000000000000000000000000000000000000;;		Regionlevelvpc     bool   `json:"regionlevelvpc,omitempty"`
0000000000000000000000000000000000000000;;		Restartrequired    bool   `json:"restartrequired,omitempty"`
0000000000000000000000000000000000000000;;		Service            []struct {
0000000000000000000000000000000000000000;;			Capability []struct {
0000000000000000000000000000000000000000;;				Canchooseservicecapability bool   `json:"canchooseservicecapability,omitempty"`
0000000000000000000000000000000000000000;;				Name                       string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;				Value                      string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"capability,omitempty"`
0000000000000000000000000000000000000000;;			Name     string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Provider []struct {
0000000000000000000000000000000000000000;;				Canenableindividualservice   bool     `json:"canenableindividualservice,omitempty"`
0000000000000000000000000000000000000000;;				Destinationphysicalnetworkid string   `json:"destinationphysicalnetworkid,omitempty"`
0000000000000000000000000000000000000000;;				Id                           string   `json:"id,omitempty"`
0000000000000000000000000000000000000000;;				Name                         string   `json:"name,omitempty"`
0000000000000000000000000000000000000000;;				Physicalnetworkid            string   `json:"physicalnetworkid,omitempty"`
0000000000000000000000000000000000000000;;				Servicelist                  []string `json:"servicelist,omitempty"`
0000000000000000000000000000000000000000;;				State                        string   `json:"state,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"provider,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"service,omitempty"`
0000000000000000000000000000000000000000;;		State string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Tags  []struct {
0000000000000000000000000000000000000000;;			Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;			Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;			Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;			Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;			Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Vpcofferingid string `json:"vpcofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid        string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename      string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListVPCsParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVPCsParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["account"]; found {
0000000000000000000000000000000000000000;;			u.Set("account", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["cidr"]; found {
0000000000000000000000000000000000000000;;			u.Set("cidr", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["displaytext"]; found {
0000000000000000000000000000000000000000;;			u.Set("displaytext", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["domainid"]; found {
0000000000000000000000000000000000000000;;			u.Set("domainid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["fordisplay"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("fordisplay", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["isrecursive"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("isrecursive", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["keyword"]; found {
0000000000000000000000000000000000000000;;			u.Set("keyword", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["listall"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("listall", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["name"]; found {
0000000000000000000000000000000000000000;;			u.Set("name", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["page"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.Itoa(v.(int))
0000000000000000000000000000000000000000;;			u.Set("page", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["pagesize"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.Itoa(v.(int))
0000000000000000000000000000000000000000;;			u.Set("pagesize", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["projectid"]; found {
0000000000000000000000000000000000000000;;			u.Set("projectid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["restartrequired"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("restartrequired", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["state"]; found {
0000000000000000000000000000000000000000;;			u.Set("state", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["supportedservices"]; found {
0000000000000000000000000000000000000000;;			vv := strings.Join(v.([]string), ",")
0000000000000000000000000000000000000000;;			u.Set("supportedservices", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["tags"]; found {
0000000000000000000000000000000000000000;;			i := 0
0000000000000000000000000000000000000000;;			for k, vv := range v.(map[string]string) {
0000000000000000000000000000000000000000;;				u.Set(fmt.Sprintf("tags[%d].key", i), k)
0000000000000000000000000000000000000000;;				u.Set(fmt.Sprintf("tags[%d].value", i), vv)
0000000000000000000000000000000000000000;;				i++
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["vpcofferingid"]; found {
0000000000000000000000000000000000000000;;			u.Set("vpcofferingid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["zoneid"]; found {
0000000000000000000000000000000000000000;;			u.Set("zoneid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVPCsParams) SetAccount(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["account"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVPCsParams) SetCidr(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["cidr"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVPCsParams) SetDisplaytext(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["displaytext"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVPCsParams) SetDomainid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["domainid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVPCsParams) SetFordisplay(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["fordisplay"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVPCsParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVPCsParams) SetIsrecursive(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["isrecursive"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVPCsParams) SetKeyword(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["keyword"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVPCsParams) SetListall(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["listall"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVPCsParams) SetName(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["name"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVPCsParams) SetPage(v int) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["page"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVPCsParams) SetPagesize(v int) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["pagesize"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVPCsParams) SetProjectid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["projectid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVPCsParams) SetRestartrequired(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["restartrequired"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVPCsParams) SetState(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["state"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVPCsParams) SetSupportedservices(v []string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["supportedservices"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVPCsParams) SetTags(v map[string]string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["tags"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVPCsParams) SetVpcofferingid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["vpcofferingid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVPCsParams) SetZoneid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["zoneid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new ListVPCsParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VPCService) NewListVPCsParams() *ListVPCsParams {
0000000000000000000000000000000000000000;;		p := &ListVPCsParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is a courtesy helper function, which in some cases may not work as expected!
0000000000000000000000000000000000000000;;	func (s *VPCService) GetVPCID(name string, opts ...OptionFunc) (string, int, error) {
0000000000000000000000000000000000000000;;		p := &ListVPCsParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.p["name"] = name
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, fn := range opts {
0000000000000000000000000000000000000000;;			if err := fn(s.cs, p); err != nil {
0000000000000000000000000000000000000000;;				return "", -1, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		l, err := s.ListVPCs(p)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", -1, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 0 {
0000000000000000000000000000000000000000;;			return "", l.Count, fmt.Errorf("No match found for %s: %+v", name, l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 1 {
0000000000000000000000000000000000000000;;			return l.VPCs[0].Id, l.Count, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count > 1 {
0000000000000000000000000000000000000000;;			for _, v := range l.VPCs {
0000000000000000000000000000000000000000;;				if v.Name == name {
0000000000000000000000000000000000000000;;					return v.Id, l.Count, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "", l.Count, fmt.Errorf("Could not find an exact match for %s: %+v", name, l)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is a courtesy helper function, which in some cases may not work as expected!
0000000000000000000000000000000000000000;;	func (s *VPCService) GetVPCByName(name string, opts ...OptionFunc) (*VPC, int, error) {
0000000000000000000000000000000000000000;;		id, count, err := s.GetVPCID(name, opts...)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, count, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r, count, err := s.GetVPCByID(id, opts...)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, count, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return r, count, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is a courtesy helper function, which in some cases may not work as expected!
0000000000000000000000000000000000000000;;	func (s *VPCService) GetVPCByID(id string, opts ...OptionFunc) (*VPC, int, error) {
0000000000000000000000000000000000000000;;		p := &ListVPCsParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, fn := range opts {
0000000000000000000000000000000000000000;;			if err := fn(s.cs, p); err != nil {
0000000000000000000000000000000000000000;;				return nil, -1, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		l, err := s.ListVPCs(p)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if strings.Contains(err.Error(), fmt.Sprintf(
0000000000000000000000000000000000000000;;				"Invalid parameter id value=%s due to incorrect long value format, "+
0000000000000000000000000000000000000000;;					"or entity does not exist", id)) {
0000000000000000000000000000000000000000;;				return nil, 0, fmt.Errorf("No match found for %s: %+v", id, l)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, -1, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 0 {
0000000000000000000000000000000000000000;;			return nil, l.Count, fmt.Errorf("No match found for %s: %+v", id, l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 1 {
0000000000000000000000000000000000000000;;			return l.VPCs[0], l.Count, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, l.Count, fmt.Errorf("There is more then one result for VPC UUID: %s!", id)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Lists VPCs
0000000000000000000000000000000000000000;;	func (s *VPCService) ListVPCs(p *ListVPCsParams) (*ListVPCsResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("listVPCs", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r ListVPCsResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListVPCsResponse struct {
0000000000000000000000000000000000000000;;		Count int    `json:"count"`
0000000000000000000000000000000000000000;;		VPCs  []*VPC `json:"vpc"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VPC struct {
0000000000000000000000000000000000000000;;		Account              string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Cidr                 string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;		Created              string `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Displaytext          string `json:"displaytext,omitempty"`
0000000000000000000000000000000000000000;;		Distributedvpcrouter bool   `json:"distributedvpcrouter,omitempty"`
0000000000000000000000000000000000000000;;		Domain               string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid             string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Fordisplay           bool   `json:"fordisplay,omitempty"`
0000000000000000000000000000000000000000;;		Id                   string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Name                 string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Network              []struct {
0000000000000000000000000000000000000000;;			Account                     string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Aclid                       string `json:"aclid,omitempty"`
0000000000000000000000000000000000000000;;			Acltype                     string `json:"acltype,omitempty"`
0000000000000000000000000000000000000000;;			Broadcastdomaintype         string `json:"broadcastdomaintype,omitempty"`
0000000000000000000000000000000000000000;;			Broadcasturi                string `json:"broadcasturi,omitempty"`
0000000000000000000000000000000000000000;;			Canusefordeploy             bool   `json:"canusefordeploy,omitempty"`
0000000000000000000000000000000000000000;;			Cidr                        string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;			Displaynetwork              bool   `json:"displaynetwork,omitempty"`
0000000000000000000000000000000000000000;;			Displaytext                 string `json:"displaytext,omitempty"`
0000000000000000000000000000000000000000;;			Dns1                        string `json:"dns1,omitempty"`
0000000000000000000000000000000000000000;;			Dns2                        string `json:"dns2,omitempty"`
0000000000000000000000000000000000000000;;			Domain                      string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid                    string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Gateway                     string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;			Id                          string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ip6cidr                     string `json:"ip6cidr,omitempty"`
0000000000000000000000000000000000000000;;			Ip6gateway                  string `json:"ip6gateway,omitempty"`
0000000000000000000000000000000000000000;;			Isdefault                   bool   `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;			Ispersistent                bool   `json:"ispersistent,omitempty"`
0000000000000000000000000000000000000000;;			Issystem                    bool   `json:"issystem,omitempty"`
0000000000000000000000000000000000000000;;			Name                        string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Netmask                     string `json:"netmask,omitempty"`
0000000000000000000000000000000000000000;;			Networkcidr                 string `json:"networkcidr,omitempty"`
0000000000000000000000000000000000000000;;			Networkdomain               string `json:"networkdomain,omitempty"`
0000000000000000000000000000000000000000;;			Networkofferingavailability string `json:"networkofferingavailability,omitempty"`
0000000000000000000000000000000000000000;;			Networkofferingconservemode bool   `json:"networkofferingconservemode,omitempty"`
0000000000000000000000000000000000000000;;			Networkofferingdisplaytext  string `json:"networkofferingdisplaytext,omitempty"`
0000000000000000000000000000000000000000;;			Networkofferingid           string `json:"networkofferingid,omitempty"`
0000000000000000000000000000000000000000;;			Networkofferingname         string `json:"networkofferingname,omitempty"`
0000000000000000000000000000000000000000;;			Physicalnetworkid           string `json:"physicalnetworkid,omitempty"`
0000000000000000000000000000000000000000;;			Project                     string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid                   string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Related                     string `json:"related,omitempty"`
0000000000000000000000000000000000000000;;			Reservediprange             string `json:"reservediprange,omitempty"`
0000000000000000000000000000000000000000;;			Restartrequired             bool   `json:"restartrequired,omitempty"`
0000000000000000000000000000000000000000;;			Service                     []struct {
0000000000000000000000000000000000000000;;				Capability []struct {
0000000000000000000000000000000000000000;;					Canchooseservicecapability bool   `json:"canchooseservicecapability,omitempty"`
0000000000000000000000000000000000000000;;					Name                       string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;					Value                      string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"capability,omitempty"`
0000000000000000000000000000000000000000;;				Name     string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;				Provider []struct {
0000000000000000000000000000000000000000;;					Canenableindividualservice   bool     `json:"canenableindividualservice,omitempty"`
0000000000000000000000000000000000000000;;					Destinationphysicalnetworkid string   `json:"destinationphysicalnetworkid,omitempty"`
0000000000000000000000000000000000000000;;					Id                           string   `json:"id,omitempty"`
0000000000000000000000000000000000000000;;					Name                         string   `json:"name,omitempty"`
0000000000000000000000000000000000000000;;					Physicalnetworkid            string   `json:"physicalnetworkid,omitempty"`
0000000000000000000000000000000000000000;;					Servicelist                  []string `json:"servicelist,omitempty"`
0000000000000000000000000000000000000000;;					State                        string   `json:"state,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"provider,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"service,omitempty"`
0000000000000000000000000000000000000000;;			Specifyipranges  bool   `json:"specifyipranges,omitempty"`
0000000000000000000000000000000000000000;;			State            string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;			Strechedl2subnet bool   `json:"strechedl2subnet,omitempty"`
0000000000000000000000000000000000000000;;			Subdomainaccess  bool   `json:"subdomainaccess,omitempty"`
0000000000000000000000000000000000000000;;			Tags             []struct {
0000000000000000000000000000000000000000;;				Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;				Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;				Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;				Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;				Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;				Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;				Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;				Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;				Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			Traffictype       string   `json:"traffictype,omitempty"`
0000000000000000000000000000000000000000;;			Type              string   `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			Vlan              string   `json:"vlan,omitempty"`
0000000000000000000000000000000000000000;;			Vpcid             string   `json:"vpcid,omitempty"`
0000000000000000000000000000000000000000;;			Zoneid            string   `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;			Zonename          string   `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;			Zonesnetworkspans []string `json:"zonesnetworkspans,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"network,omitempty"`
0000000000000000000000000000000000000000;;		Networkdomain      string `json:"networkdomain,omitempty"`
0000000000000000000000000000000000000000;;		Project            string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid          string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;		Redundantvpcrouter bool   `json:"redundantvpcrouter,omitempty"`
0000000000000000000000000000000000000000;;		Regionlevelvpc     bool   `json:"regionlevelvpc,omitempty"`
0000000000000000000000000000000000000000;;		Restartrequired    bool   `json:"restartrequired,omitempty"`
0000000000000000000000000000000000000000;;		Service            []struct {
0000000000000000000000000000000000000000;;			Capability []struct {
0000000000000000000000000000000000000000;;				Canchooseservicecapability bool   `json:"canchooseservicecapability,omitempty"`
0000000000000000000000000000000000000000;;				Name                       string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;				Value                      string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"capability,omitempty"`
0000000000000000000000000000000000000000;;			Name     string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Provider []struct {
0000000000000000000000000000000000000000;;				Canenableindividualservice   bool     `json:"canenableindividualservice,omitempty"`
0000000000000000000000000000000000000000;;				Destinationphysicalnetworkid string   `json:"destinationphysicalnetworkid,omitempty"`
0000000000000000000000000000000000000000;;				Id                           string   `json:"id,omitempty"`
0000000000000000000000000000000000000000;;				Name                         string   `json:"name,omitempty"`
0000000000000000000000000000000000000000;;				Physicalnetworkid            string   `json:"physicalnetworkid,omitempty"`
0000000000000000000000000000000000000000;;				Servicelist                  []string `json:"servicelist,omitempty"`
0000000000000000000000000000000000000000;;				State                        string   `json:"state,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"provider,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"service,omitempty"`
0000000000000000000000000000000000000000;;		State string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Tags  []struct {
0000000000000000000000000000000000000000;;			Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;			Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;			Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;			Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;			Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Vpcofferingid string `json:"vpcofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid        string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename      string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteVPCParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeleteVPCParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeleteVPCParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new DeleteVPCParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VPCService) NewDeleteVPCParams(id string) *DeleteVPCParams {
0000000000000000000000000000000000000000;;		p := &DeleteVPCParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Deletes a VPC
0000000000000000000000000000000000000000;;	func (s *VPCService) DeleteVPC(p *DeleteVPCParams) (*DeleteVPCResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("deleteVPC", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r DeleteVPCResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteVPCResponse struct {
0000000000000000000000000000000000000000;;		JobID       string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Displaytext string `json:"displaytext,omitempty"`
0000000000000000000000000000000000000000;;		Success     bool   `json:"success,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateVPCParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateVPCParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["customid"]; found {
0000000000000000000000000000000000000000;;			u.Set("customid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["displaytext"]; found {
0000000000000000000000000000000000000000;;			u.Set("displaytext", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["fordisplay"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("fordisplay", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["name"]; found {
0000000000000000000000000000000000000000;;			u.Set("name", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateVPCParams) SetCustomid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["customid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateVPCParams) SetDisplaytext(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["displaytext"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateVPCParams) SetFordisplay(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["fordisplay"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateVPCParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateVPCParams) SetName(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["name"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new UpdateVPCParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VPCService) NewUpdateVPCParams(id string) *UpdateVPCParams {
0000000000000000000000000000000000000000;;		p := &UpdateVPCParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Updates a VPC
0000000000000000000000000000000000000000;;	func (s *VPCService) UpdateVPC(p *UpdateVPCParams) (*UpdateVPCResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("updateVPC", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r UpdateVPCResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateVPCResponse struct {
0000000000000000000000000000000000000000;;		JobID                string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Account              string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Cidr                 string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;		Created              string `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Displaytext          string `json:"displaytext,omitempty"`
0000000000000000000000000000000000000000;;		Distributedvpcrouter bool   `json:"distributedvpcrouter,omitempty"`
0000000000000000000000000000000000000000;;		Domain               string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid             string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Fordisplay           bool   `json:"fordisplay,omitempty"`
0000000000000000000000000000000000000000;;		Id                   string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Name                 string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Network              []struct {
0000000000000000000000000000000000000000;;			Account                     string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Aclid                       string `json:"aclid,omitempty"`
0000000000000000000000000000000000000000;;			Acltype                     string `json:"acltype,omitempty"`
0000000000000000000000000000000000000000;;			Broadcastdomaintype         string `json:"broadcastdomaintype,omitempty"`
0000000000000000000000000000000000000000;;			Broadcasturi                string `json:"broadcasturi,omitempty"`
0000000000000000000000000000000000000000;;			Canusefordeploy             bool   `json:"canusefordeploy,omitempty"`
0000000000000000000000000000000000000000;;			Cidr                        string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;			Displaynetwork              bool   `json:"displaynetwork,omitempty"`
0000000000000000000000000000000000000000;;			Displaytext                 string `json:"displaytext,omitempty"`
0000000000000000000000000000000000000000;;			Dns1                        string `json:"dns1,omitempty"`
0000000000000000000000000000000000000000;;			Dns2                        string `json:"dns2,omitempty"`
0000000000000000000000000000000000000000;;			Domain                      string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid                    string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Gateway                     string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;			Id                          string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ip6cidr                     string `json:"ip6cidr,omitempty"`
0000000000000000000000000000000000000000;;			Ip6gateway                  string `json:"ip6gateway,omitempty"`
0000000000000000000000000000000000000000;;			Isdefault                   bool   `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;			Ispersistent                bool   `json:"ispersistent,omitempty"`
0000000000000000000000000000000000000000;;			Issystem                    bool   `json:"issystem,omitempty"`
0000000000000000000000000000000000000000;;			Name                        string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Netmask                     string `json:"netmask,omitempty"`
0000000000000000000000000000000000000000;;			Networkcidr                 string `json:"networkcidr,omitempty"`
0000000000000000000000000000000000000000;;			Networkdomain               string `json:"networkdomain,omitempty"`
0000000000000000000000000000000000000000;;			Networkofferingavailability string `json:"networkofferingavailability,omitempty"`
0000000000000000000000000000000000000000;;			Networkofferingconservemode bool   `json:"networkofferingconservemode,omitempty"`
0000000000000000000000000000000000000000;;			Networkofferingdisplaytext  string `json:"networkofferingdisplaytext,omitempty"`
0000000000000000000000000000000000000000;;			Networkofferingid           string `json:"networkofferingid,omitempty"`
0000000000000000000000000000000000000000;;			Networkofferingname         string `json:"networkofferingname,omitempty"`
0000000000000000000000000000000000000000;;			Physicalnetworkid           string `json:"physicalnetworkid,omitempty"`
0000000000000000000000000000000000000000;;			Project                     string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid                   string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Related                     string `json:"related,omitempty"`
0000000000000000000000000000000000000000;;			Reservediprange             string `json:"reservediprange,omitempty"`
0000000000000000000000000000000000000000;;			Restartrequired             bool   `json:"restartrequired,omitempty"`
0000000000000000000000000000000000000000;;			Service                     []struct {
0000000000000000000000000000000000000000;;				Capability []struct {
0000000000000000000000000000000000000000;;					Canchooseservicecapability bool   `json:"canchooseservicecapability,omitempty"`
0000000000000000000000000000000000000000;;					Name                       string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;					Value                      string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"capability,omitempty"`
0000000000000000000000000000000000000000;;				Name     string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;				Provider []struct {
0000000000000000000000000000000000000000;;					Canenableindividualservice   bool     `json:"canenableindividualservice,omitempty"`
0000000000000000000000000000000000000000;;					Destinationphysicalnetworkid string   `json:"destinationphysicalnetworkid,omitempty"`
0000000000000000000000000000000000000000;;					Id                           string   `json:"id,omitempty"`
0000000000000000000000000000000000000000;;					Name                         string   `json:"name,omitempty"`
0000000000000000000000000000000000000000;;					Physicalnetworkid            string   `json:"physicalnetworkid,omitempty"`
0000000000000000000000000000000000000000;;					Servicelist                  []string `json:"servicelist,omitempty"`
0000000000000000000000000000000000000000;;					State                        string   `json:"state,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"provider,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"service,omitempty"`
0000000000000000000000000000000000000000;;			Specifyipranges  bool   `json:"specifyipranges,omitempty"`
0000000000000000000000000000000000000000;;			State            string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;			Strechedl2subnet bool   `json:"strechedl2subnet,omitempty"`
0000000000000000000000000000000000000000;;			Subdomainaccess  bool   `json:"subdomainaccess,omitempty"`
0000000000000000000000000000000000000000;;			Tags             []struct {
0000000000000000000000000000000000000000;;				Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;				Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;				Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;				Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;				Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;				Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;				Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;				Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;				Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			Traffictype       string   `json:"traffictype,omitempty"`
0000000000000000000000000000000000000000;;			Type              string   `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			Vlan              string   `json:"vlan,omitempty"`
0000000000000000000000000000000000000000;;			Vpcid             string   `json:"vpcid,omitempty"`
0000000000000000000000000000000000000000;;			Zoneid            string   `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;			Zonename          string   `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;			Zonesnetworkspans []string `json:"zonesnetworkspans,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"network,omitempty"`
0000000000000000000000000000000000000000;;		Networkdomain      string `json:"networkdomain,omitempty"`
0000000000000000000000000000000000000000;;		Project            string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid          string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;		Redundantvpcrouter bool   `json:"redundantvpcrouter,omitempty"`
0000000000000000000000000000000000000000;;		Regionlevelvpc     bool   `json:"regionlevelvpc,omitempty"`
0000000000000000000000000000000000000000;;		Restartrequired    bool   `json:"restartrequired,omitempty"`
0000000000000000000000000000000000000000;;		Service            []struct {
0000000000000000000000000000000000000000;;			Capability []struct {
0000000000000000000000000000000000000000;;				Canchooseservicecapability bool   `json:"canchooseservicecapability,omitempty"`
0000000000000000000000000000000000000000;;				Name                       string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;				Value                      string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"capability,omitempty"`
0000000000000000000000000000000000000000;;			Name     string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Provider []struct {
0000000000000000000000000000000000000000;;				Canenableindividualservice   bool     `json:"canenableindividualservice,omitempty"`
0000000000000000000000000000000000000000;;				Destinationphysicalnetworkid string   `json:"destinationphysicalnetworkid,omitempty"`
0000000000000000000000000000000000000000;;				Id                           string   `json:"id,omitempty"`
0000000000000000000000000000000000000000;;				Name                         string   `json:"name,omitempty"`
0000000000000000000000000000000000000000;;				Physicalnetworkid            string   `json:"physicalnetworkid,omitempty"`
0000000000000000000000000000000000000000;;				Servicelist                  []string `json:"servicelist,omitempty"`
0000000000000000000000000000000000000000;;				State                        string   `json:"state,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"provider,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"service,omitempty"`
0000000000000000000000000000000000000000;;		State string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Tags  []struct {
0000000000000000000000000000000000000000;;			Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;			Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;			Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;			Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;			Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Vpcofferingid string `json:"vpcofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid        string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename      string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RestartVPCParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *RestartVPCParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["cleanup"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("cleanup", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["makeredundant"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("makeredundant", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *RestartVPCParams) SetCleanup(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["cleanup"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *RestartVPCParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *RestartVPCParams) SetMakeredundant(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["makeredundant"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new RestartVPCParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VPCService) NewRestartVPCParams(id string) *RestartVPCParams {
0000000000000000000000000000000000000000;;		p := &RestartVPCParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Restarts a VPC
0000000000000000000000000000000000000000;;	func (s *VPCService) RestartVPC(p *RestartVPCParams) (*RestartVPCResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("restartVPC", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r RestartVPCResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RestartVPCResponse struct {
0000000000000000000000000000000000000000;;		JobID                string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Account              string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Cidr                 string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;		Created              string `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Displaytext          string `json:"displaytext,omitempty"`
0000000000000000000000000000000000000000;;		Distributedvpcrouter bool   `json:"distributedvpcrouter,omitempty"`
0000000000000000000000000000000000000000;;		Domain               string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid             string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Fordisplay           bool   `json:"fordisplay,omitempty"`
0000000000000000000000000000000000000000;;		Id                   string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Name                 string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Network              []struct {
0000000000000000000000000000000000000000;;			Account                     string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Aclid                       string `json:"aclid,omitempty"`
0000000000000000000000000000000000000000;;			Acltype                     string `json:"acltype,omitempty"`
0000000000000000000000000000000000000000;;			Broadcastdomaintype         string `json:"broadcastdomaintype,omitempty"`
0000000000000000000000000000000000000000;;			Broadcasturi                string `json:"broadcasturi,omitempty"`
0000000000000000000000000000000000000000;;			Canusefordeploy             bool   `json:"canusefordeploy,omitempty"`
0000000000000000000000000000000000000000;;			Cidr                        string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;			Displaynetwork              bool   `json:"displaynetwork,omitempty"`
0000000000000000000000000000000000000000;;			Displaytext                 string `json:"displaytext,omitempty"`
0000000000000000000000000000000000000000;;			Dns1                        string `json:"dns1,omitempty"`
0000000000000000000000000000000000000000;;			Dns2                        string `json:"dns2,omitempty"`
0000000000000000000000000000000000000000;;			Domain                      string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid                    string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Gateway                     string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;			Id                          string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;			Ip6cidr                     string `json:"ip6cidr,omitempty"`
0000000000000000000000000000000000000000;;			Ip6gateway                  string `json:"ip6gateway,omitempty"`
0000000000000000000000000000000000000000;;			Isdefault                   bool   `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;			Ispersistent                bool   `json:"ispersistent,omitempty"`
0000000000000000000000000000000000000000;;			Issystem                    bool   `json:"issystem,omitempty"`
0000000000000000000000000000000000000000;;			Name                        string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Netmask                     string `json:"netmask,omitempty"`
0000000000000000000000000000000000000000;;			Networkcidr                 string `json:"networkcidr,omitempty"`
0000000000000000000000000000000000000000;;			Networkdomain               string `json:"networkdomain,omitempty"`
0000000000000000000000000000000000000000;;			Networkofferingavailability string `json:"networkofferingavailability,omitempty"`
0000000000000000000000000000000000000000;;			Networkofferingconservemode bool   `json:"networkofferingconservemode,omitempty"`
0000000000000000000000000000000000000000;;			Networkofferingdisplaytext  string `json:"networkofferingdisplaytext,omitempty"`
0000000000000000000000000000000000000000;;			Networkofferingid           string `json:"networkofferingid,omitempty"`
0000000000000000000000000000000000000000;;			Networkofferingname         string `json:"networkofferingname,omitempty"`
0000000000000000000000000000000000000000;;			Physicalnetworkid           string `json:"physicalnetworkid,omitempty"`
0000000000000000000000000000000000000000;;			Project                     string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid                   string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Related                     string `json:"related,omitempty"`
0000000000000000000000000000000000000000;;			Reservediprange             string `json:"reservediprange,omitempty"`
0000000000000000000000000000000000000000;;			Restartrequired             bool   `json:"restartrequired,omitempty"`
0000000000000000000000000000000000000000;;			Service                     []struct {
0000000000000000000000000000000000000000;;				Capability []struct {
0000000000000000000000000000000000000000;;					Canchooseservicecapability bool   `json:"canchooseservicecapability,omitempty"`
0000000000000000000000000000000000000000;;					Name                       string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;					Value                      string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"capability,omitempty"`
0000000000000000000000000000000000000000;;				Name     string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;				Provider []struct {
0000000000000000000000000000000000000000;;					Canenableindividualservice   bool     `json:"canenableindividualservice,omitempty"`
0000000000000000000000000000000000000000;;					Destinationphysicalnetworkid string   `json:"destinationphysicalnetworkid,omitempty"`
0000000000000000000000000000000000000000;;					Id                           string   `json:"id,omitempty"`
0000000000000000000000000000000000000000;;					Name                         string   `json:"name,omitempty"`
0000000000000000000000000000000000000000;;					Physicalnetworkid            string   `json:"physicalnetworkid,omitempty"`
0000000000000000000000000000000000000000;;					Servicelist                  []string `json:"servicelist,omitempty"`
0000000000000000000000000000000000000000;;					State                        string   `json:"state,omitempty"`
0000000000000000000000000000000000000000;;				} `json:"provider,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"service,omitempty"`
0000000000000000000000000000000000000000;;			Specifyipranges  bool   `json:"specifyipranges,omitempty"`
0000000000000000000000000000000000000000;;			State            string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;			Strechedl2subnet bool   `json:"strechedl2subnet,omitempty"`
0000000000000000000000000000000000000000;;			Subdomainaccess  bool   `json:"subdomainaccess,omitempty"`
0000000000000000000000000000000000000000;;			Tags             []struct {
0000000000000000000000000000000000000000;;				Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;				Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;				Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;				Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;				Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;				Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;				Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;				Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;				Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;				Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;			Traffictype       string   `json:"traffictype,omitempty"`
0000000000000000000000000000000000000000;;			Type              string   `json:"type,omitempty"`
0000000000000000000000000000000000000000;;			Vlan              string   `json:"vlan,omitempty"`
0000000000000000000000000000000000000000;;			Vpcid             string   `json:"vpcid,omitempty"`
0000000000000000000000000000000000000000;;			Zoneid            string   `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;			Zonename          string   `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;			Zonesnetworkspans []string `json:"zonesnetworkspans,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"network,omitempty"`
0000000000000000000000000000000000000000;;		Networkdomain      string `json:"networkdomain,omitempty"`
0000000000000000000000000000000000000000;;		Project            string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid          string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;		Redundantvpcrouter bool   `json:"redundantvpcrouter,omitempty"`
0000000000000000000000000000000000000000;;		Regionlevelvpc     bool   `json:"regionlevelvpc,omitempty"`
0000000000000000000000000000000000000000;;		Restartrequired    bool   `json:"restartrequired,omitempty"`
0000000000000000000000000000000000000000;;		Service            []struct {
0000000000000000000000000000000000000000;;			Capability []struct {
0000000000000000000000000000000000000000;;				Canchooseservicecapability bool   `json:"canchooseservicecapability,omitempty"`
0000000000000000000000000000000000000000;;				Name                       string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;				Value                      string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"capability,omitempty"`
0000000000000000000000000000000000000000;;			Name     string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Provider []struct {
0000000000000000000000000000000000000000;;				Canenableindividualservice   bool     `json:"canenableindividualservice,omitempty"`
0000000000000000000000000000000000000000;;				Destinationphysicalnetworkid string   `json:"destinationphysicalnetworkid,omitempty"`
0000000000000000000000000000000000000000;;				Id                           string   `json:"id,omitempty"`
0000000000000000000000000000000000000000;;				Name                         string   `json:"name,omitempty"`
0000000000000000000000000000000000000000;;				Physicalnetworkid            string   `json:"physicalnetworkid,omitempty"`
0000000000000000000000000000000000000000;;				Servicelist                  []string `json:"servicelist,omitempty"`
0000000000000000000000000000000000000000;;				State                        string   `json:"state,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"provider,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"service,omitempty"`
0000000000000000000000000000000000000000;;		State string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Tags  []struct {
0000000000000000000000000000000000000000;;			Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;			Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;			Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;			Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;			Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Vpcofferingid string `json:"vpcofferingid,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid        string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename      string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateVPCOfferingParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateVPCOfferingParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["displaytext"]; found {
0000000000000000000000000000000000000000;;			u.Set("displaytext", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["name"]; found {
0000000000000000000000000000000000000000;;			u.Set("name", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["servicecapabilitylist"]; found {
0000000000000000000000000000000000000000;;			i := 0
0000000000000000000000000000000000000000;;			for k, vv := range v.(map[string]string) {
0000000000000000000000000000000000000000;;				u.Set(fmt.Sprintf("servicecapabilitylist[%d].key", i), k)
0000000000000000000000000000000000000000;;				u.Set(fmt.Sprintf("servicecapabilitylist[%d].value", i), vv)
0000000000000000000000000000000000000000;;				i++
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["serviceofferingid"]; found {
0000000000000000000000000000000000000000;;			u.Set("serviceofferingid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["serviceproviderlist"]; found {
0000000000000000000000000000000000000000;;			i := 0
0000000000000000000000000000000000000000;;			for k, vv := range v.(map[string]string) {
0000000000000000000000000000000000000000;;				u.Set(fmt.Sprintf("serviceproviderlist[%d].service", i), k)
0000000000000000000000000000000000000000;;				u.Set(fmt.Sprintf("serviceproviderlist[%d].provider", i), vv)
0000000000000000000000000000000000000000;;				i++
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["supportedservices"]; found {
0000000000000000000000000000000000000000;;			vv := strings.Join(v.([]string), ",")
0000000000000000000000000000000000000000;;			u.Set("supportedservices", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateVPCOfferingParams) SetDisplaytext(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["displaytext"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateVPCOfferingParams) SetName(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["name"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateVPCOfferingParams) SetServicecapabilitylist(v map[string]string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["servicecapabilitylist"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateVPCOfferingParams) SetServiceofferingid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["serviceofferingid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateVPCOfferingParams) SetServiceproviderlist(v map[string]string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["serviceproviderlist"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateVPCOfferingParams) SetSupportedservices(v []string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["supportedservices"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new CreateVPCOfferingParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VPCService) NewCreateVPCOfferingParams(displaytext string, name string, supportedservices []string) *CreateVPCOfferingParams {
0000000000000000000000000000000000000000;;		p := &CreateVPCOfferingParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["displaytext"] = displaytext
0000000000000000000000000000000000000000;;		p.p["name"] = name
0000000000000000000000000000000000000000;;		p.p["supportedservices"] = supportedservices
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Creates VPC offering
0000000000000000000000000000000000000000;;	func (s *VPCService) CreateVPCOffering(p *CreateVPCOfferingParams) (*CreateVPCOfferingResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("createVPCOffering", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r CreateVPCOfferingResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateVPCOfferingResponse struct {
0000000000000000000000000000000000000000;;		JobID                string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Created              string `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Displaytext          string `json:"displaytext,omitempty"`
0000000000000000000000000000000000000000;;		Distributedvpcrouter bool   `json:"distributedvpcrouter,omitempty"`
0000000000000000000000000000000000000000;;		Id                   string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Isdefault            bool   `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;		Name                 string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Service              []struct {
0000000000000000000000000000000000000000;;			Capability []struct {
0000000000000000000000000000000000000000;;				Canchooseservicecapability bool   `json:"canchooseservicecapability,omitempty"`
0000000000000000000000000000000000000000;;				Name                       string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;				Value                      string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"capability,omitempty"`
0000000000000000000000000000000000000000;;			Name     string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Provider []struct {
0000000000000000000000000000000000000000;;				Canenableindividualservice   bool     `json:"canenableindividualservice,omitempty"`
0000000000000000000000000000000000000000;;				Destinationphysicalnetworkid string   `json:"destinationphysicalnetworkid,omitempty"`
0000000000000000000000000000000000000000;;				Id                           string   `json:"id,omitempty"`
0000000000000000000000000000000000000000;;				Name                         string   `json:"name,omitempty"`
0000000000000000000000000000000000000000;;				Physicalnetworkid            string   `json:"physicalnetworkid,omitempty"`
0000000000000000000000000000000000000000;;				Servicelist                  []string `json:"servicelist,omitempty"`
0000000000000000000000000000000000000000;;				State                        string   `json:"state,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"provider,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"service,omitempty"`
0000000000000000000000000000000000000000;;		State                  string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		SupportsregionLevelvpc bool   `json:"supportsregionLevelvpc,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateVPCOfferingParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateVPCOfferingParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["displaytext"]; found {
0000000000000000000000000000000000000000;;			u.Set("displaytext", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["name"]; found {
0000000000000000000000000000000000000000;;			u.Set("name", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["state"]; found {
0000000000000000000000000000000000000000;;			u.Set("state", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateVPCOfferingParams) SetDisplaytext(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["displaytext"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateVPCOfferingParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateVPCOfferingParams) SetName(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["name"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *UpdateVPCOfferingParams) SetState(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["state"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new UpdateVPCOfferingParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VPCService) NewUpdateVPCOfferingParams(id string) *UpdateVPCOfferingParams {
0000000000000000000000000000000000000000;;		p := &UpdateVPCOfferingParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Updates VPC offering
0000000000000000000000000000000000000000;;	func (s *VPCService) UpdateVPCOffering(p *UpdateVPCOfferingParams) (*UpdateVPCOfferingResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("updateVPCOffering", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r UpdateVPCOfferingResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateVPCOfferingResponse struct {
0000000000000000000000000000000000000000;;		JobID                string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Created              string `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Displaytext          string `json:"displaytext,omitempty"`
0000000000000000000000000000000000000000;;		Distributedvpcrouter bool   `json:"distributedvpcrouter,omitempty"`
0000000000000000000000000000000000000000;;		Id                   string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Isdefault            bool   `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;		Name                 string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Service              []struct {
0000000000000000000000000000000000000000;;			Capability []struct {
0000000000000000000000000000000000000000;;				Canchooseservicecapability bool   `json:"canchooseservicecapability,omitempty"`
0000000000000000000000000000000000000000;;				Name                       string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;				Value                      string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"capability,omitempty"`
0000000000000000000000000000000000000000;;			Name     string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Provider []struct {
0000000000000000000000000000000000000000;;				Canenableindividualservice   bool     `json:"canenableindividualservice,omitempty"`
0000000000000000000000000000000000000000;;				Destinationphysicalnetworkid string   `json:"destinationphysicalnetworkid,omitempty"`
0000000000000000000000000000000000000000;;				Id                           string   `json:"id,omitempty"`
0000000000000000000000000000000000000000;;				Name                         string   `json:"name,omitempty"`
0000000000000000000000000000000000000000;;				Physicalnetworkid            string   `json:"physicalnetworkid,omitempty"`
0000000000000000000000000000000000000000;;				Servicelist                  []string `json:"servicelist,omitempty"`
0000000000000000000000000000000000000000;;				State                        string   `json:"state,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"provider,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"service,omitempty"`
0000000000000000000000000000000000000000;;		State                  string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		SupportsregionLevelvpc bool   `json:"supportsregionLevelvpc,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteVPCOfferingParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeleteVPCOfferingParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeleteVPCOfferingParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new DeleteVPCOfferingParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VPCService) NewDeleteVPCOfferingParams(id string) *DeleteVPCOfferingParams {
0000000000000000000000000000000000000000;;		p := &DeleteVPCOfferingParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Deletes VPC offering
0000000000000000000000000000000000000000;;	func (s *VPCService) DeleteVPCOffering(p *DeleteVPCOfferingParams) (*DeleteVPCOfferingResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("deleteVPCOffering", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r DeleteVPCOfferingResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteVPCOfferingResponse struct {
0000000000000000000000000000000000000000;;		JobID       string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Displaytext string `json:"displaytext,omitempty"`
0000000000000000000000000000000000000000;;		Success     bool   `json:"success,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListVPCOfferingsParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVPCOfferingsParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["displaytext"]; found {
0000000000000000000000000000000000000000;;			u.Set("displaytext", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["isdefault"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("isdefault", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["keyword"]; found {
0000000000000000000000000000000000000000;;			u.Set("keyword", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["name"]; found {
0000000000000000000000000000000000000000;;			u.Set("name", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["page"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.Itoa(v.(int))
0000000000000000000000000000000000000000;;			u.Set("page", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["pagesize"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.Itoa(v.(int))
0000000000000000000000000000000000000000;;			u.Set("pagesize", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["state"]; found {
0000000000000000000000000000000000000000;;			u.Set("state", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["supportedservices"]; found {
0000000000000000000000000000000000000000;;			vv := strings.Join(v.([]string), ",")
0000000000000000000000000000000000000000;;			u.Set("supportedservices", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVPCOfferingsParams) SetDisplaytext(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["displaytext"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVPCOfferingsParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVPCOfferingsParams) SetIsdefault(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["isdefault"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVPCOfferingsParams) SetKeyword(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["keyword"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVPCOfferingsParams) SetName(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["name"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVPCOfferingsParams) SetPage(v int) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["page"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVPCOfferingsParams) SetPagesize(v int) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["pagesize"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVPCOfferingsParams) SetState(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["state"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListVPCOfferingsParams) SetSupportedservices(v []string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["supportedservices"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new ListVPCOfferingsParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VPCService) NewListVPCOfferingsParams() *ListVPCOfferingsParams {
0000000000000000000000000000000000000000;;		p := &ListVPCOfferingsParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is a courtesy helper function, which in some cases may not work as expected!
0000000000000000000000000000000000000000;;	func (s *VPCService) GetVPCOfferingID(name string, opts ...OptionFunc) (string, int, error) {
0000000000000000000000000000000000000000;;		p := &ListVPCOfferingsParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.p["name"] = name
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, fn := range opts {
0000000000000000000000000000000000000000;;			if err := fn(s.cs, p); err != nil {
0000000000000000000000000000000000000000;;				return "", -1, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		l, err := s.ListVPCOfferings(p)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", -1, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 0 {
0000000000000000000000000000000000000000;;			return "", l.Count, fmt.Errorf("No match found for %s: %+v", name, l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 1 {
0000000000000000000000000000000000000000;;			return l.VPCOfferings[0].Id, l.Count, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count > 1 {
0000000000000000000000000000000000000000;;			for _, v := range l.VPCOfferings {
0000000000000000000000000000000000000000;;				if v.Name == name {
0000000000000000000000000000000000000000;;					return v.Id, l.Count, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "", l.Count, fmt.Errorf("Could not find an exact match for %s: %+v", name, l)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is a courtesy helper function, which in some cases may not work as expected!
0000000000000000000000000000000000000000;;	func (s *VPCService) GetVPCOfferingByName(name string, opts ...OptionFunc) (*VPCOffering, int, error) {
0000000000000000000000000000000000000000;;		id, count, err := s.GetVPCOfferingID(name, opts...)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, count, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r, count, err := s.GetVPCOfferingByID(id, opts...)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, count, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return r, count, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is a courtesy helper function, which in some cases may not work as expected!
0000000000000000000000000000000000000000;;	func (s *VPCService) GetVPCOfferingByID(id string, opts ...OptionFunc) (*VPCOffering, int, error) {
0000000000000000000000000000000000000000;;		p := &ListVPCOfferingsParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, fn := range opts {
0000000000000000000000000000000000000000;;			if err := fn(s.cs, p); err != nil {
0000000000000000000000000000000000000000;;				return nil, -1, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		l, err := s.ListVPCOfferings(p)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if strings.Contains(err.Error(), fmt.Sprintf(
0000000000000000000000000000000000000000;;				"Invalid parameter id value=%s due to incorrect long value format, "+
0000000000000000000000000000000000000000;;					"or entity does not exist", id)) {
0000000000000000000000000000000000000000;;				return nil, 0, fmt.Errorf("No match found for %s: %+v", id, l)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, -1, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 0 {
0000000000000000000000000000000000000000;;			return nil, l.Count, fmt.Errorf("No match found for %s: %+v", id, l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 1 {
0000000000000000000000000000000000000000;;			return l.VPCOfferings[0], l.Count, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, l.Count, fmt.Errorf("There is more then one result for VPCOffering UUID: %s!", id)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Lists VPC offerings
0000000000000000000000000000000000000000;;	func (s *VPCService) ListVPCOfferings(p *ListVPCOfferingsParams) (*ListVPCOfferingsResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("listVPCOfferings", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r ListVPCOfferingsResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListVPCOfferingsResponse struct {
0000000000000000000000000000000000000000;;		Count        int            `json:"count"`
0000000000000000000000000000000000000000;;		VPCOfferings []*VPCOffering `json:"vpcoffering"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VPCOffering struct {
0000000000000000000000000000000000000000;;		Created              string `json:"created,omitempty"`
0000000000000000000000000000000000000000;;		Displaytext          string `json:"displaytext,omitempty"`
0000000000000000000000000000000000000000;;		Distributedvpcrouter bool   `json:"distributedvpcrouter,omitempty"`
0000000000000000000000000000000000000000;;		Id                   string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Isdefault            bool   `json:"isdefault,omitempty"`
0000000000000000000000000000000000000000;;		Name                 string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Service              []struct {
0000000000000000000000000000000000000000;;			Capability []struct {
0000000000000000000000000000000000000000;;				Canchooseservicecapability bool   `json:"canchooseservicecapability,omitempty"`
0000000000000000000000000000000000000000;;				Name                       string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;				Value                      string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"capability,omitempty"`
0000000000000000000000000000000000000000;;			Name     string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Provider []struct {
0000000000000000000000000000000000000000;;				Canenableindividualservice   bool     `json:"canenableindividualservice,omitempty"`
0000000000000000000000000000000000000000;;				Destinationphysicalnetworkid string   `json:"destinationphysicalnetworkid,omitempty"`
0000000000000000000000000000000000000000;;				Id                           string   `json:"id,omitempty"`
0000000000000000000000000000000000000000;;				Name                         string   `json:"name,omitempty"`
0000000000000000000000000000000000000000;;				Physicalnetworkid            string   `json:"physicalnetworkid,omitempty"`
0000000000000000000000000000000000000000;;				Servicelist                  []string `json:"servicelist,omitempty"`
0000000000000000000000000000000000000000;;				State                        string   `json:"state,omitempty"`
0000000000000000000000000000000000000000;;			} `json:"provider,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"service,omitempty"`
0000000000000000000000000000000000000000;;		State                  string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		SupportsregionLevelvpc bool   `json:"supportsregionLevelvpc,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreatePrivateGatewayParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreatePrivateGatewayParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["aclid"]; found {
0000000000000000000000000000000000000000;;			u.Set("aclid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["gateway"]; found {
0000000000000000000000000000000000000000;;			u.Set("gateway", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["ipaddress"]; found {
0000000000000000000000000000000000000000;;			u.Set("ipaddress", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["netmask"]; found {
0000000000000000000000000000000000000000;;			u.Set("netmask", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["networkofferingid"]; found {
0000000000000000000000000000000000000000;;			u.Set("networkofferingid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["physicalnetworkid"]; found {
0000000000000000000000000000000000000000;;			u.Set("physicalnetworkid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["sourcenatsupported"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("sourcenatsupported", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["vlan"]; found {
0000000000000000000000000000000000000000;;			u.Set("vlan", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["vpcid"]; found {
0000000000000000000000000000000000000000;;			u.Set("vpcid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreatePrivateGatewayParams) SetAclid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["aclid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreatePrivateGatewayParams) SetGateway(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["gateway"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreatePrivateGatewayParams) SetIpaddress(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["ipaddress"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreatePrivateGatewayParams) SetNetmask(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["netmask"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreatePrivateGatewayParams) SetNetworkofferingid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["networkofferingid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreatePrivateGatewayParams) SetPhysicalnetworkid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["physicalnetworkid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreatePrivateGatewayParams) SetSourcenatsupported(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["sourcenatsupported"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreatePrivateGatewayParams) SetVlan(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["vlan"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreatePrivateGatewayParams) SetVpcid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["vpcid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new CreatePrivateGatewayParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VPCService) NewCreatePrivateGatewayParams(gateway string, ipaddress string, netmask string, vlan string, vpcid string) *CreatePrivateGatewayParams {
0000000000000000000000000000000000000000;;		p := &CreatePrivateGatewayParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["gateway"] = gateway
0000000000000000000000000000000000000000;;		p.p["ipaddress"] = ipaddress
0000000000000000000000000000000000000000;;		p.p["netmask"] = netmask
0000000000000000000000000000000000000000;;		p.p["vlan"] = vlan
0000000000000000000000000000000000000000;;		p.p["vpcid"] = vpcid
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Creates a private gateway
0000000000000000000000000000000000000000;;	func (s *VPCService) CreatePrivateGateway(p *CreatePrivateGatewayParams) (*CreatePrivateGatewayResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("createPrivateGateway", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r CreatePrivateGatewayResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreatePrivateGatewayResponse struct {
0000000000000000000000000000000000000000;;		JobID              string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Account            string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Aclid              string `json:"aclid,omitempty"`
0000000000000000000000000000000000000000;;		Domain             string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid           string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Gateway            string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;		Id                 string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Ipaddress          string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;		Netmask            string `json:"netmask,omitempty"`
0000000000000000000000000000000000000000;;		Physicalnetworkid  string `json:"physicalnetworkid,omitempty"`
0000000000000000000000000000000000000000;;		Project            string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid          string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;		Sourcenatsupported bool   `json:"sourcenatsupported,omitempty"`
0000000000000000000000000000000000000000;;		State              string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Vlan               string `json:"vlan,omitempty"`
0000000000000000000000000000000000000000;;		Vpcid              string `json:"vpcid,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid             string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename           string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListPrivateGatewaysParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListPrivateGatewaysParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["account"]; found {
0000000000000000000000000000000000000000;;			u.Set("account", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["domainid"]; found {
0000000000000000000000000000000000000000;;			u.Set("domainid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["ipaddress"]; found {
0000000000000000000000000000000000000000;;			u.Set("ipaddress", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["isrecursive"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("isrecursive", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["keyword"]; found {
0000000000000000000000000000000000000000;;			u.Set("keyword", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["listall"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("listall", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["page"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.Itoa(v.(int))
0000000000000000000000000000000000000000;;			u.Set("page", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["pagesize"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.Itoa(v.(int))
0000000000000000000000000000000000000000;;			u.Set("pagesize", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["projectid"]; found {
0000000000000000000000000000000000000000;;			u.Set("projectid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["state"]; found {
0000000000000000000000000000000000000000;;			u.Set("state", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["vlan"]; found {
0000000000000000000000000000000000000000;;			u.Set("vlan", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["vpcid"]; found {
0000000000000000000000000000000000000000;;			u.Set("vpcid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListPrivateGatewaysParams) SetAccount(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["account"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListPrivateGatewaysParams) SetDomainid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["domainid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListPrivateGatewaysParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListPrivateGatewaysParams) SetIpaddress(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["ipaddress"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListPrivateGatewaysParams) SetIsrecursive(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["isrecursive"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListPrivateGatewaysParams) SetKeyword(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["keyword"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListPrivateGatewaysParams) SetListall(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["listall"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListPrivateGatewaysParams) SetPage(v int) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["page"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListPrivateGatewaysParams) SetPagesize(v int) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["pagesize"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListPrivateGatewaysParams) SetProjectid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["projectid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListPrivateGatewaysParams) SetState(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["state"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListPrivateGatewaysParams) SetVlan(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["vlan"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListPrivateGatewaysParams) SetVpcid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["vpcid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new ListPrivateGatewaysParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VPCService) NewListPrivateGatewaysParams() *ListPrivateGatewaysParams {
0000000000000000000000000000000000000000;;		p := &ListPrivateGatewaysParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is a courtesy helper function, which in some cases may not work as expected!
0000000000000000000000000000000000000000;;	func (s *VPCService) GetPrivateGatewayByID(id string, opts ...OptionFunc) (*PrivateGateway, int, error) {
0000000000000000000000000000000000000000;;		p := &ListPrivateGatewaysParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, fn := range opts {
0000000000000000000000000000000000000000;;			if err := fn(s.cs, p); err != nil {
0000000000000000000000000000000000000000;;				return nil, -1, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		l, err := s.ListPrivateGateways(p)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if strings.Contains(err.Error(), fmt.Sprintf(
0000000000000000000000000000000000000000;;				"Invalid parameter id value=%s due to incorrect long value format, "+
0000000000000000000000000000000000000000;;					"or entity does not exist", id)) {
0000000000000000000000000000000000000000;;				return nil, 0, fmt.Errorf("No match found for %s: %+v", id, l)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, -1, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 0 {
0000000000000000000000000000000000000000;;			return nil, l.Count, fmt.Errorf("No match found for %s: %+v", id, l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 1 {
0000000000000000000000000000000000000000;;			return l.PrivateGateways[0], l.Count, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, l.Count, fmt.Errorf("There is more then one result for PrivateGateway UUID: %s!", id)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List private gateways
0000000000000000000000000000000000000000;;	func (s *VPCService) ListPrivateGateways(p *ListPrivateGatewaysParams) (*ListPrivateGatewaysResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("listPrivateGateways", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r ListPrivateGatewaysResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListPrivateGatewaysResponse struct {
0000000000000000000000000000000000000000;;		Count           int               `json:"count"`
0000000000000000000000000000000000000000;;		PrivateGateways []*PrivateGateway `json:"privategateway"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PrivateGateway struct {
0000000000000000000000000000000000000000;;		Account            string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Aclid              string `json:"aclid,omitempty"`
0000000000000000000000000000000000000000;;		Domain             string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid           string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Gateway            string `json:"gateway,omitempty"`
0000000000000000000000000000000000000000;;		Id                 string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Ipaddress          string `json:"ipaddress,omitempty"`
0000000000000000000000000000000000000000;;		Netmask            string `json:"netmask,omitempty"`
0000000000000000000000000000000000000000;;		Physicalnetworkid  string `json:"physicalnetworkid,omitempty"`
0000000000000000000000000000000000000000;;		Project            string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid          string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;		Sourcenatsupported bool   `json:"sourcenatsupported,omitempty"`
0000000000000000000000000000000000000000;;		State              string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Vlan               string `json:"vlan,omitempty"`
0000000000000000000000000000000000000000;;		Vpcid              string `json:"vpcid,omitempty"`
0000000000000000000000000000000000000000;;		Zoneid             string `json:"zoneid,omitempty"`
0000000000000000000000000000000000000000;;		Zonename           string `json:"zonename,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeletePrivateGatewayParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeletePrivateGatewayParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeletePrivateGatewayParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new DeletePrivateGatewayParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VPCService) NewDeletePrivateGatewayParams(id string) *DeletePrivateGatewayParams {
0000000000000000000000000000000000000000;;		p := &DeletePrivateGatewayParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Deletes a Private gateway
0000000000000000000000000000000000000000;;	func (s *VPCService) DeletePrivateGateway(p *DeletePrivateGatewayParams) (*DeletePrivateGatewayResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("deletePrivateGateway", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r DeletePrivateGatewayResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeletePrivateGatewayResponse struct {
0000000000000000000000000000000000000000;;		JobID       string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Displaytext string `json:"displaytext,omitempty"`
0000000000000000000000000000000000000000;;		Success     bool   `json:"success,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateStaticRouteParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateStaticRouteParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["cidr"]; found {
0000000000000000000000000000000000000000;;			u.Set("cidr", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["gatewayid"]; found {
0000000000000000000000000000000000000000;;			u.Set("gatewayid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateStaticRouteParams) SetCidr(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["cidr"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *CreateStaticRouteParams) SetGatewayid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["gatewayid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new CreateStaticRouteParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VPCService) NewCreateStaticRouteParams(cidr string, gatewayid string) *CreateStaticRouteParams {
0000000000000000000000000000000000000000;;		p := &CreateStaticRouteParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["cidr"] = cidr
0000000000000000000000000000000000000000;;		p.p["gatewayid"] = gatewayid
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Creates a static route
0000000000000000000000000000000000000000;;	func (s *VPCService) CreateStaticRoute(p *CreateStaticRouteParams) (*CreateStaticRouteResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("createStaticRoute", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r CreateStaticRouteResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b, err = getRawValue(b)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateStaticRouteResponse struct {
0000000000000000000000000000000000000000;;		JobID     string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Account   string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Cidr      string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;		Domain    string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid  string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Gatewayid string `json:"gatewayid,omitempty"`
0000000000000000000000000000000000000000;;		Id        string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Project   string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;		State     string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Tags      []struct {
0000000000000000000000000000000000000000;;			Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;			Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;			Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;			Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;			Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Vpcid string `json:"vpcid,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteStaticRouteParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeleteStaticRouteParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeleteStaticRouteParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new DeleteStaticRouteParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VPCService) NewDeleteStaticRouteParams(id string) *DeleteStaticRouteParams {
0000000000000000000000000000000000000000;;		p := &DeleteStaticRouteParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Deletes a static route
0000000000000000000000000000000000000000;;	func (s *VPCService) DeleteStaticRoute(p *DeleteStaticRouteParams) (*DeleteStaticRouteResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("deleteStaticRoute", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r DeleteStaticRouteResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteStaticRouteResponse struct {
0000000000000000000000000000000000000000;;		JobID       string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Displaytext string `json:"displaytext,omitempty"`
0000000000000000000000000000000000000000;;		Success     bool   `json:"success,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListStaticRoutesParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListStaticRoutesParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["account"]; found {
0000000000000000000000000000000000000000;;			u.Set("account", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["domainid"]; found {
0000000000000000000000000000000000000000;;			u.Set("domainid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["gatewayid"]; found {
0000000000000000000000000000000000000000;;			u.Set("gatewayid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["isrecursive"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("isrecursive", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["keyword"]; found {
0000000000000000000000000000000000000000;;			u.Set("keyword", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["listall"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.FormatBool(v.(bool))
0000000000000000000000000000000000000000;;			u.Set("listall", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["page"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.Itoa(v.(int))
0000000000000000000000000000000000000000;;			u.Set("page", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["pagesize"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.Itoa(v.(int))
0000000000000000000000000000000000000000;;			u.Set("pagesize", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["projectid"]; found {
0000000000000000000000000000000000000000;;			u.Set("projectid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["tags"]; found {
0000000000000000000000000000000000000000;;			i := 0
0000000000000000000000000000000000000000;;			for k, vv := range v.(map[string]string) {
0000000000000000000000000000000000000000;;				u.Set(fmt.Sprintf("tags[%d].key", i), k)
0000000000000000000000000000000000000000;;				u.Set(fmt.Sprintf("tags[%d].value", i), vv)
0000000000000000000000000000000000000000;;				i++
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["vpcid"]; found {
0000000000000000000000000000000000000000;;			u.Set("vpcid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListStaticRoutesParams) SetAccount(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["account"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListStaticRoutesParams) SetDomainid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["domainid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListStaticRoutesParams) SetGatewayid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["gatewayid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListStaticRoutesParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListStaticRoutesParams) SetIsrecursive(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["isrecursive"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListStaticRoutesParams) SetKeyword(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["keyword"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListStaticRoutesParams) SetListall(v bool) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["listall"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListStaticRoutesParams) SetPage(v int) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["page"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListStaticRoutesParams) SetPagesize(v int) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["pagesize"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListStaticRoutesParams) SetProjectid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["projectid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListStaticRoutesParams) SetTags(v map[string]string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["tags"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListStaticRoutesParams) SetVpcid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["vpcid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new ListStaticRoutesParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *VPCService) NewListStaticRoutesParams() *ListStaticRoutesParams {
0000000000000000000000000000000000000000;;		p := &ListStaticRoutesParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is a courtesy helper function, which in some cases may not work as expected!
0000000000000000000000000000000000000000;;	func (s *VPCService) GetStaticRouteByID(id string, opts ...OptionFunc) (*StaticRoute, int, error) {
0000000000000000000000000000000000000000;;		p := &ListStaticRoutesParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, fn := range opts {
0000000000000000000000000000000000000000;;			if err := fn(s.cs, p); err != nil {
0000000000000000000000000000000000000000;;				return nil, -1, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		l, err := s.ListStaticRoutes(p)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if strings.Contains(err.Error(), fmt.Sprintf(
0000000000000000000000000000000000000000;;				"Invalid parameter id value=%s due to incorrect long value format, "+
0000000000000000000000000000000000000000;;					"or entity does not exist", id)) {
0000000000000000000000000000000000000000;;				return nil, 0, fmt.Errorf("No match found for %s: %+v", id, l)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, -1, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 0 {
0000000000000000000000000000000000000000;;			return nil, l.Count, fmt.Errorf("No match found for %s: %+v", id, l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 1 {
0000000000000000000000000000000000000000;;			return l.StaticRoutes[0], l.Count, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, l.Count, fmt.Errorf("There is more then one result for StaticRoute UUID: %s!", id)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Lists all static routes
0000000000000000000000000000000000000000;;	func (s *VPCService) ListStaticRoutes(p *ListStaticRoutesParams) (*ListStaticRoutesResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("listStaticRoutes", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r ListStaticRoutesResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListStaticRoutesResponse struct {
0000000000000000000000000000000000000000;;		Count        int            `json:"count"`
0000000000000000000000000000000000000000;;		StaticRoutes []*StaticRoute `json:"staticroute"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StaticRoute struct {
0000000000000000000000000000000000000000;;		Account   string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;		Cidr      string `json:"cidr,omitempty"`
0000000000000000000000000000000000000000;;		Domain    string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;		Domainid  string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;		Gatewayid string `json:"gatewayid,omitempty"`
0000000000000000000000000000000000000000;;		Id        string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Project   string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;		Projectid string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;		State     string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Tags      []struct {
0000000000000000000000000000000000000000;;			Account      string `json:"account,omitempty"`
0000000000000000000000000000000000000000;;			Customer     string `json:"customer,omitempty"`
0000000000000000000000000000000000000000;;			Domain       string `json:"domain,omitempty"`
0000000000000000000000000000000000000000;;			Domainid     string `json:"domainid,omitempty"`
0000000000000000000000000000000000000000;;			Key          string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;			Project      string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;			Projectid    string `json:"projectid,omitempty"`
0000000000000000000000000000000000000000;;			Resourceid   string `json:"resourceid,omitempty"`
0000000000000000000000000000000000000000;;			Resourcetype string `json:"resourcetype,omitempty"`
0000000000000000000000000000000000000000;;			Value        string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Vpcid string `json:"vpcid,omitempty"`
0000000000000000000000000000000000000000;;	}
