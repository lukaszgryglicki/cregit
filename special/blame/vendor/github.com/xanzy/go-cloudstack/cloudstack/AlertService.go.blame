0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Copyright 2016, Sander van Harmelen
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
0000000000000000000000000000000000000000;;	//
0a16da49b5158d8aef850f86fc8936f4afa6c64a;;	
0000000000000000000000000000000000000000;;	package cloudstack
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListAlertsParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListAlertsParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["id"]; found {
0000000000000000000000000000000000000000;;			u.Set("id", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["keyword"]; found {
0000000000000000000000000000000000000000;;			u.Set("keyword", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["name"]; found {
0000000000000000000000000000000000000000;;			u.Set("name", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["page"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.Itoa(v.(int))
0000000000000000000000000000000000000000;;			u.Set("page", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["pagesize"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.Itoa(v.(int))
0000000000000000000000000000000000000000;;			u.Set("pagesize", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["type"]; found {
0000000000000000000000000000000000000000;;			u.Set("type", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListAlertsParams) SetId(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["id"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListAlertsParams) SetKeyword(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["keyword"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListAlertsParams) SetName(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["name"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListAlertsParams) SetPage(v int) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["page"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListAlertsParams) SetPagesize(v int) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["pagesize"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListAlertsParams) SetType(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["alertType"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new ListAlertsParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *AlertService) NewListAlertsParams() *ListAlertsParams {
0000000000000000000000000000000000000000;;		p := &ListAlertsParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is a courtesy helper function, which in some cases may not work as expected!
0000000000000000000000000000000000000000;;	func (s *AlertService) GetAlertID(name string, opts ...OptionFunc) (string, int, error) {
0000000000000000000000000000000000000000;;		p := &ListAlertsParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.p["name"] = name
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, fn := range opts {
0000000000000000000000000000000000000000;;			if err := fn(s.cs, p); err != nil {
0000000000000000000000000000000000000000;;				return "", -1, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		l, err := s.ListAlerts(p)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", -1, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 0 {
0000000000000000000000000000000000000000;;			return "", l.Count, fmt.Errorf("No match found for %s: %+v", name, l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 1 {
0000000000000000000000000000000000000000;;			return l.Alerts[0].Id, l.Count, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count > 1 {
0000000000000000000000000000000000000000;;			for _, v := range l.Alerts {
0000000000000000000000000000000000000000;;				if v.Name == name {
0000000000000000000000000000000000000000;;					return v.Id, l.Count, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "", l.Count, fmt.Errorf("Could not find an exact match for %s: %+v", name, l)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is a courtesy helper function, which in some cases may not work as expected!
0000000000000000000000000000000000000000;;	func (s *AlertService) GetAlertByName(name string, opts ...OptionFunc) (*Alert, int, error) {
0000000000000000000000000000000000000000;;		id, count, err := s.GetAlertID(name, opts...)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, count, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r, count, err := s.GetAlertByID(id, opts...)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, count, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return r, count, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is a courtesy helper function, which in some cases may not work as expected!
0000000000000000000000000000000000000000;;	func (s *AlertService) GetAlertByID(id string, opts ...OptionFunc) (*Alert, int, error) {
0000000000000000000000000000000000000000;;		p := &ListAlertsParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.p["id"] = id
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, fn := range opts {
0000000000000000000000000000000000000000;;			if err := fn(s.cs, p); err != nil {
0000000000000000000000000000000000000000;;				return nil, -1, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		l, err := s.ListAlerts(p)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if strings.Contains(err.Error(), fmt.Sprintf(
0000000000000000000000000000000000000000;;				"Invalid parameter id value=%s due to incorrect long value format, "+
0000000000000000000000000000000000000000;;					"or entity does not exist", id)) {
0000000000000000000000000000000000000000;;				return nil, 0, fmt.Errorf("No match found for %s: %+v", id, l)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, -1, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 0 {
0000000000000000000000000000000000000000;;			return nil, l.Count, fmt.Errorf("No match found for %s: %+v", id, l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l.Count == 1 {
0000000000000000000000000000000000000000;;			return l.Alerts[0], l.Count, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, l.Count, fmt.Errorf("There is more then one result for Alert UUID: %s!", id)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Lists all alerts.
0000000000000000000000000000000000000000;;	func (s *AlertService) ListAlerts(p *ListAlertsParams) (*ListAlertsResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("listAlerts", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r ListAlertsResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListAlertsResponse struct {
0000000000000000000000000000000000000000;;		Count  int      `json:"count"`
0000000000000000000000000000000000000000;;		Alerts []*Alert `json:"alert"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Alert struct {
0000000000000000000000000000000000000000;;		Description string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;		Id          string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Name        string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Sent        string `json:"sent,omitempty"`
0000000000000000000000000000000000000000;;		Type        int    `json:"type,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArchiveAlertsParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ArchiveAlertsParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["enddate"]; found {
0000000000000000000000000000000000000000;;			u.Set("enddate", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["ids"]; found {
0000000000000000000000000000000000000000;;			vv := strings.Join(v.([]string), ",")
0000000000000000000000000000000000000000;;			u.Set("ids", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["startdate"]; found {
0000000000000000000000000000000000000000;;			u.Set("startdate", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["type"]; found {
0000000000000000000000000000000000000000;;			u.Set("type", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ArchiveAlertsParams) SetEnddate(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["enddate"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ArchiveAlertsParams) SetIds(v []string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["ids"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ArchiveAlertsParams) SetStartdate(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["startdate"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ArchiveAlertsParams) SetType(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["alertType"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new ArchiveAlertsParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *AlertService) NewArchiveAlertsParams() *ArchiveAlertsParams {
0000000000000000000000000000000000000000;;		p := &ArchiveAlertsParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Archive one or more alerts.
0000000000000000000000000000000000000000;;	func (s *AlertService) ArchiveAlerts(p *ArchiveAlertsParams) (*ArchiveAlertsResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("archiveAlerts", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r ArchiveAlertsResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ArchiveAlertsResponse struct {
0000000000000000000000000000000000000000;;		Displaytext string `json:"displaytext,omitempty"`
0000000000000000000000000000000000000000;;		Success     string `json:"success,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteAlertsParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeleteAlertsParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["enddate"]; found {
0000000000000000000000000000000000000000;;			u.Set("enddate", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["ids"]; found {
0000000000000000000000000000000000000000;;			vv := strings.Join(v.([]string), ",")
0000000000000000000000000000000000000000;;			u.Set("ids", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["startdate"]; found {
0000000000000000000000000000000000000000;;			u.Set("startdate", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["type"]; found {
0000000000000000000000000000000000000000;;			u.Set("type", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeleteAlertsParams) SetEnddate(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["enddate"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeleteAlertsParams) SetIds(v []string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["ids"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeleteAlertsParams) SetStartdate(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["startdate"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *DeleteAlertsParams) SetType(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["alertType"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new DeleteAlertsParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *AlertService) NewDeleteAlertsParams() *DeleteAlertsParams {
0000000000000000000000000000000000000000;;		p := &DeleteAlertsParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Delete one or more alerts.
0000000000000000000000000000000000000000;;	func (s *AlertService) DeleteAlerts(p *DeleteAlertsParams) (*DeleteAlertsResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("deleteAlerts", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r DeleteAlertsResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteAlertsResponse struct {
0000000000000000000000000000000000000000;;		Displaytext string `json:"displaytext,omitempty"`
0000000000000000000000000000000000000000;;		Success     string `json:"success,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GenerateAlertParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *GenerateAlertParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["description"]; found {
0000000000000000000000000000000000000000;;			u.Set("description", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["name"]; found {
0000000000000000000000000000000000000000;;			u.Set("name", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["podid"]; found {
0000000000000000000000000000000000000000;;			u.Set("podid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["type"]; found {
0000000000000000000000000000000000000000;;			vv := strconv.Itoa(v.(int))
0000000000000000000000000000000000000000;;			u.Set("type", vv)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["zoneid"]; found {
0000000000000000000000000000000000000000;;			u.Set("zoneid", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *GenerateAlertParams) SetDescription(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["description"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *GenerateAlertParams) SetName(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["name"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *GenerateAlertParams) SetPodid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["podid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *GenerateAlertParams) SetType(v int) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["alertType"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *GenerateAlertParams) SetZoneid(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["zoneid"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new GenerateAlertParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *AlertService) NewGenerateAlertParams(description string, name string, alertType int) *GenerateAlertParams {
0000000000000000000000000000000000000000;;		p := &GenerateAlertParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		p.p["description"] = description
0000000000000000000000000000000000000000;;		p.p["name"] = name
0000000000000000000000000000000000000000;;		p.p["alertType"] = alertType
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Generates an alert
0000000000000000000000000000000000000000;;	func (s *AlertService) GenerateAlert(p *GenerateAlertParams) (*GenerateAlertResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("generateAlert", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r GenerateAlertResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If we have a async client, we need to wait for the async result
0000000000000000000000000000000000000000;;		if s.cs.async {
0000000000000000000000000000000000000000;;			b, err := s.cs.GetAsyncJobResult(r.JobID, s.cs.timeout)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if err == AsyncTimeoutErr {
0000000000000000000000000000000000000000;;					return &r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(b, &r); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GenerateAlertResponse struct {
0000000000000000000000000000000000000000;;		JobID       string `json:"jobid,omitempty"`
0000000000000000000000000000000000000000;;		Displaytext string `json:"displaytext,omitempty"`
0000000000000000000000000000000000000000;;		Success     bool   `json:"success,omitempty"`
0000000000000000000000000000000000000000;;	}
