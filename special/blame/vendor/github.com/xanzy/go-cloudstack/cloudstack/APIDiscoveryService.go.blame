0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Copyright 2016, Sander van Harmelen
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
0000000000000000000000000000000000000000;;	//
0a16da49b5158d8aef850f86fc8936f4afa6c64a;;	
0000000000000000000000000000000000000000;;	package cloudstack
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListApisParams struct {
0000000000000000000000000000000000000000;;		p map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListApisParams) toURLValues() url.Values {
0000000000000000000000000000000000000000;;		u := url.Values{}
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			return u
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, found := p.p["name"]; found {
0000000000000000000000000000000000000000;;			u.Set("name", v.(string))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *ListApisParams) SetName(v string) {
0000000000000000000000000000000000000000;;		if p.p == nil {
0000000000000000000000000000000000000000;;			p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.p["name"] = v
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// You should always use this function to get a new ListApisParams instance,
0000000000000000000000000000000000000000;;	// as then you are sure you have configured all required params
0000000000000000000000000000000000000000;;	func (s *APIDiscoveryService) NewListApisParams() *ListApisParams {
0000000000000000000000000000000000000000;;		p := &ListApisParams{}
0000000000000000000000000000000000000000;;		p.p = make(map[string]interface{})
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// lists all available apis on the server, provided by the Api Discovery plugin
0000000000000000000000000000000000000000;;	func (s *APIDiscoveryService) ListApis(p *ListApisParams) (*ListApisResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := s.cs.newRequest("listApis", p.toURLValues())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r ListApisResponse
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(resp, &r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &r, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListApisResponse struct {
0000000000000000000000000000000000000000;;		Count int    `json:"count"`
0000000000000000000000000000000000000000;;		Apis  []*Api `json:"api"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Api struct {
0000000000000000000000000000000000000000;;		Description string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;		Isasync     bool   `json:"isasync,omitempty"`
0000000000000000000000000000000000000000;;		Name        string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Params      []struct {
0000000000000000000000000000000000000000;;			Description string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;			Length      int    `json:"length,omitempty"`
0000000000000000000000000000000000000000;;			Name        string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Related     string `json:"related,omitempty"`
0000000000000000000000000000000000000000;;			Required    bool   `json:"required,omitempty"`
0000000000000000000000000000000000000000;;			Since       string `json:"since,omitempty"`
0000000000000000000000000000000000000000;;			Type        string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"params,omitempty"`
0000000000000000000000000000000000000000;;		Related  string `json:"related,omitempty"`
0000000000000000000000000000000000000000;;		Response []struct {
0000000000000000000000000000000000000000;;			Description string   `json:"description,omitempty"`
0000000000000000000000000000000000000000;;			Name        string   `json:"name,omitempty"`
0000000000000000000000000000000000000000;;			Response    []string `json:"response,omitempty"`
0000000000000000000000000000000000000000;;			Type        string   `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		} `json:"response,omitempty"`
0000000000000000000000000000000000000000;;		Since string `json:"since,omitempty"`
0000000000000000000000000000000000000000;;		Type  string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;	}
