0000000000000000000000000000000000000000;;	// Copyright 2013 Matt T. Proud
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
877581fa542c3af74aa2ed7addf6c8f7c20680ee;Godeps/_workspace/src/github.com/matttproud/golang_protobuf_extensions/ext/encode.go[Godeps/_workspace/src/github.com/matttproud/golang_protobuf_extensions/ext/encode.go][vendor/github.com/matttproud/golang_protobuf_extensions/pbutil/encode.go];	
0000000000000000000000000000000000000000;;	package pbutil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/binary"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/protobuf/proto"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WriteDelimited encodes and dumps a message to the provided writer prefixed
0000000000000000000000000000000000000000;;	// with a 32-bit varint indicating the length of the encoded message, producing
0000000000000000000000000000000000000000;;	// a length-delimited record stream, which can be used to chain together
0000000000000000000000000000000000000000;;	// encoded messages of the same type together in a file.  It returns the total
0000000000000000000000000000000000000000;;	// number of bytes written and any applicable error.  This is roughly
0000000000000000000000000000000000000000;;	// equivalent to the companion Java API's MessageLite#writeDelimitedTo.
0000000000000000000000000000000000000000;;	func WriteDelimited(w io.Writer, m proto.Message) (n int, err error) {
0000000000000000000000000000000000000000;;		buffer, err := proto.Marshal(m)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		buf := make([]byte, binary.MaxVarintLen32)
0000000000000000000000000000000000000000;;		encodedLength := binary.PutUvarint(buf, uint64(len(buffer)))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		sync, err := w.Write(buf[:encodedLength])
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return sync, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		n, err = w.Write(buffer)
0000000000000000000000000000000000000000;;		return n + sync, err
0000000000000000000000000000000000000000;;	}
