0000000000000000000000000000000000000000;;	package models
98fa85693d398f10e97b3f66d66f93eefb348cf6;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ConsistencyLevel represent a required replication criteria before a write can
0000000000000000000000000000000000000000;;	// be returned as successful
0000000000000000000000000000000000000000;;	type ConsistencyLevel int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// ConsistencyLevelAny allows for hinted hand off, potentially no write happened yet
0000000000000000000000000000000000000000;;		ConsistencyLevelAny ConsistencyLevel = iota
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ConsistencyLevelOne requires at least one data node acknowledged a write
0000000000000000000000000000000000000000;;		ConsistencyLevelOne
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ConsistencyLevelQuorum requires a quorum of data nodes to acknowledge a write
0000000000000000000000000000000000000000;;		ConsistencyLevelQuorum
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ConsistencyLevelAll requires all data nodes to acknowledge a write
0000000000000000000000000000000000000000;;		ConsistencyLevelAll
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		// ErrInvalidConsistencyLevel is returned when parsing the string version
0000000000000000000000000000000000000000;;		// of a consistency level.
0000000000000000000000000000000000000000;;		ErrInvalidConsistencyLevel = errors.New("invalid consistency level")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ParseConsistencyLevel converts a consistency level string to the corresponding ConsistencyLevel const
0000000000000000000000000000000000000000;;	func ParseConsistencyLevel(level string) (ConsistencyLevel, error) {
0000000000000000000000000000000000000000;;		switch strings.ToLower(level) {
0000000000000000000000000000000000000000;;		case "any":
0000000000000000000000000000000000000000;;			return ConsistencyLevelAny, nil
0000000000000000000000000000000000000000;;		case "one":
0000000000000000000000000000000000000000;;			return ConsistencyLevelOne, nil
0000000000000000000000000000000000000000;;		case "quorum":
0000000000000000000000000000000000000000;;			return ConsistencyLevelQuorum, nil
0000000000000000000000000000000000000000;;		case "all":
0000000000000000000000000000000000000000;;			return ConsistencyLevelAll, nil
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return 0, ErrInvalidConsistencyLevel
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
