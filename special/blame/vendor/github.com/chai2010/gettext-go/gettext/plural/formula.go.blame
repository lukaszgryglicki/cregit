0000000000000000000000000000000000000000;;	// Copyright 2013 ChaiShushan <chaishushan{AT}gmail.com>. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
64247eb69ec8b8707eb5c766a35ff8a3cd455896;;	
0000000000000000000000000000000000000000;;	package plural
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Formula provides the language's standard plural formula.
0000000000000000000000000000000000000000;;	func Formula(lang string) func(n int) int {
0000000000000000000000000000000000000000;;		if idx := index(lang); idx != -1 {
0000000000000000000000000000000000000000;;			return formulaTable[fmtForms(FormsTable[idx].Value)]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if idx := index("??"); idx != -1 {
0000000000000000000000000000000000000000;;			return formulaTable[fmtForms(FormsTable[idx].Value)]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return func(n int) int {
0000000000000000000000000000000000000000;;			return n
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func index(lang string) int {
0000000000000000000000000000000000000000;;		for i := 0; i < len(FormsTable); i++ {
0000000000000000000000000000000000000000;;			if strings.HasPrefix(lang, FormsTable[i].Lang) {
0000000000000000000000000000000000000000;;				return i
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return -1
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func fmtForms(forms string) string {
0000000000000000000000000000000000000000;;		forms = strings.TrimSpace(forms)
0000000000000000000000000000000000000000;;		forms = strings.Replace(forms, " ", "", -1)
0000000000000000000000000000000000000000;;		return forms
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var formulaTable = map[string]func(n int) int{
0000000000000000000000000000000000000000;;		fmtForms("nplurals=n; plural=n-1;"): func(n int) int {
0000000000000000000000000000000000000000;;			if n > 0 {
0000000000000000000000000000000000000000;;				return n - 1
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return 0
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		fmtForms("nplurals=1; plural=0;"): func(n int) int {
0000000000000000000000000000000000000000;;			return 0
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		fmtForms("nplurals=2; plural=(n != 1);"): func(n int) int {
0000000000000000000000000000000000000000;;			if n <= 1 {
0000000000000000000000000000000000000000;;				return 0
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return 1
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		fmtForms("nplurals=2; plural=(n > 1);"): func(n int) int {
0000000000000000000000000000000000000000;;			if n <= 1 {
0000000000000000000000000000000000000000;;				return 0
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return 1
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		fmtForms("nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n != 0 ? 1 : 2);"): func(n int) int {
0000000000000000000000000000000000000000;;			if n%10 == 1 && n%100 != 11 {
0000000000000000000000000000000000000000;;				return 0
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if n != 0 {
0000000000000000000000000000000000000000;;				return 1
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return 2
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		fmtForms("nplurals=3; plural=n==1 ? 0 : n==2 ? 1 : 2;"): func(n int) int {
0000000000000000000000000000000000000000;;			if n == 1 {
0000000000000000000000000000000000000000;;				return 0
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if n == 2 {
0000000000000000000000000000000000000000;;				return 1
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return 2
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		fmtForms("nplurals=3; plural=n==1 ? 0 : (n==0 || (n%100 > 0 && n%100 < 20)) ? 1 : 2;"): func(n int) int {
0000000000000000000000000000000000000000;;			if n == 1 {
0000000000000000000000000000000000000000;;				return 0
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if n == 0 || (n%100 > 0 && n%100 < 20) {
0000000000000000000000000000000000000000;;				return 1
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return 2
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		fmtForms("nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && (n%100<10 || n%100>=20) ? 1 : 2);"): func(n int) int {
0000000000000000000000000000000000000000;;			if n%10 == 1 && n%100 != 11 {
0000000000000000000000000000000000000000;;				return 0
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if n%10 >= 2 && (n%100 < 10 || n%100 >= 20) {
0000000000000000000000000000000000000000;;				return 1
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return 2
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		fmtForms("nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);"): func(n int) int {
0000000000000000000000000000000000000000;;			if n%10 == 1 && n%100 != 11 {
0000000000000000000000000000000000000000;;				return 0
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if n%10 >= 2 && n%10 <= 4 && (n%100 < 10 || n%100 >= 20) {
0000000000000000000000000000000000000000;;				return 1
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return 2
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		fmtForms("nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);"): func(n int) int {
0000000000000000000000000000000000000000;;			if n%10 == 1 && n%100 != 11 {
0000000000000000000000000000000000000000;;				return 0
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if n%10 >= 2 && n%10 <= 4 && (n%100 < 10 || n%100 >= 20) {
0000000000000000000000000000000000000000;;				return 1
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return 2
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		fmtForms("nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);"): func(n int) int {
0000000000000000000000000000000000000000;;			if n%10 == 1 && n%100 != 11 {
0000000000000000000000000000000000000000;;				return 0
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if n%10 >= 2 && n%10 <= 4 && (n%100 < 10 || n%100 >= 20) {
0000000000000000000000000000000000000000;;				return 1
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return 2
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		fmtForms("nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);"): func(n int) int {
0000000000000000000000000000000000000000;;			if n%10 == 1 && n%100 != 11 {
0000000000000000000000000000000000000000;;				return 0
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if n%10 >= 2 && n%10 <= 4 && (n%100 < 10 || n%100 >= 20) {
0000000000000000000000000000000000000000;;				return 1
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return 2
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		fmtForms("nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);"): func(n int) int {
0000000000000000000000000000000000000000;;			if n%10 == 1 && n%100 != 11 {
0000000000000000000000000000000000000000;;				return 0
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if n%10 >= 2 && n%10 <= 4 && (n%100 < 10 || n%100 >= 20) {
0000000000000000000000000000000000000000;;				return 1
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return 2
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		fmtForms("nplurals=3; plural=(n==1) ? 0 : (n>=2 && n<=4) ? 1 : 2;"): func(n int) int {
0000000000000000000000000000000000000000;;			if n == 1 {
0000000000000000000000000000000000000000;;				return 0
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if n >= 2 && n <= 4 {
0000000000000000000000000000000000000000;;				return 1
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return 2
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		fmtForms("nplurals=3; plural=(n==1) ? 0 : (n>=2 && n<=4) ? 1 : 2;"): func(n int) int {
0000000000000000000000000000000000000000;;			if n == 1 {
0000000000000000000000000000000000000000;;				return 0
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if n >= 2 && n <= 4 {
0000000000000000000000000000000000000000;;				return 1
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return 2
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		fmtForms("nplurals=3; plural=(n==1 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);"): func(n int) int {
0000000000000000000000000000000000000000;;			if n == 1 {
0000000000000000000000000000000000000000;;				return 0
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if n%10 >= 2 && n%10 <= 4 && (n%100 < 10 || n%100 >= 20) {
0000000000000000000000000000000000000000;;				return 1
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return 2
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		fmtForms("nplurals=4; plural=(n%100==1 ? 0 : n%100==2 ? 1 : n%100==3 || n%100==4 ? 2 : 3);"): func(n int) int {
0000000000000000000000000000000000000000;;			if n%100 == 1 {
0000000000000000000000000000000000000000;;				return 0
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if n%100 == 2 {
0000000000000000000000000000000000000000;;				return 1
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if n%100 == 3 || n%100 == 4 {
0000000000000000000000000000000000000000;;				return 2
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return 3
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;	}
