0000000000000000000000000000000000000000;;	// Copyright 2013 ChaiShushan <chaishushan{AT}gmail.com>. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
64247eb69ec8b8707eb5c766a35ff8a3cd455896;;	
0000000000000000000000000000000000000000;;	package gettext
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type domainManager struct {
0000000000000000000000000000000000000000;;		mutex     sync.Mutex
0000000000000000000000000000000000000000;;		locale    string
0000000000000000000000000000000000000000;;		domain    string
0000000000000000000000000000000000000000;;		domainMap map[string]*fileSystem
0000000000000000000000000000000000000000;;		trTextMap map[string]*translator
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newDomainManager() *domainManager {
0000000000000000000000000000000000000000;;		return &domainManager{
0000000000000000000000000000000000000000;;			locale:    DefaultLocale,
0000000000000000000000000000000000000000;;			domainMap: make(map[string]*fileSystem),
0000000000000000000000000000000000000000;;			trTextMap: make(map[string]*translator),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *domainManager) makeTrMapKey(domain, locale string) string {
0000000000000000000000000000000000000000;;		return domain + "_$$$_" + locale
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *domainManager) Bind(domain, path string, data []byte) (domains, paths []string) {
0000000000000000000000000000000000000000;;		p.mutex.Lock()
0000000000000000000000000000000000000000;;		defer p.mutex.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case domain != "" && path != "": // bind new domain
0000000000000000000000000000000000000000;;			p.bindDomainTranslators(domain, path, data)
0000000000000000000000000000000000000000;;		case domain != "" && path == "": // delete domain
0000000000000000000000000000000000000000;;			p.deleteDomain(domain)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// return all bind domain
0000000000000000000000000000000000000000;;		for k, fs := range p.domainMap {
0000000000000000000000000000000000000000;;			domains = append(domains, k)
0000000000000000000000000000000000000000;;			paths = append(paths, fs.FsName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *domainManager) SetLocale(locale string) string {
0000000000000000000000000000000000000000;;		p.mutex.Lock()
0000000000000000000000000000000000000000;;		defer p.mutex.Unlock()
0000000000000000000000000000000000000000;;		if locale != "" {
0000000000000000000000000000000000000000;;			p.locale = locale
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return p.locale
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *domainManager) SetDomain(domain string) string {
0000000000000000000000000000000000000000;;		p.mutex.Lock()
0000000000000000000000000000000000000000;;		defer p.mutex.Unlock()
0000000000000000000000000000000000000000;;		if domain != "" {
0000000000000000000000000000000000000000;;			p.domain = domain
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return p.domain
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *domainManager) Getdata(name string) []byte {
0000000000000000000000000000000000000000;;		return p.getdata(p.domain, name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *domainManager) DGetdata(domain, name string) []byte {
0000000000000000000000000000000000000000;;		return p.getdata(domain, name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *domainManager) PNGettext(msgctxt, msgid, msgidPlural string, n int) string {
0000000000000000000000000000000000000000;;		p.mutex.Lock()
0000000000000000000000000000000000000000;;		defer p.mutex.Unlock()
0000000000000000000000000000000000000000;;		return p.gettext(p.domain, msgctxt, msgid, msgidPlural, n)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *domainManager) DPNGettext(domain, msgctxt, msgid, msgidPlural string, n int) string {
0000000000000000000000000000000000000000;;		p.mutex.Lock()
0000000000000000000000000000000000000000;;		defer p.mutex.Unlock()
0000000000000000000000000000000000000000;;		return p.gettext(domain, msgctxt, msgid, msgidPlural, n)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *domainManager) gettext(domain, msgctxt, msgid, msgidPlural string, n int) string {
0000000000000000000000000000000000000000;;		if p.locale == "" || p.domain == "" {
0000000000000000000000000000000000000000;;			return msgid
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, ok := p.domainMap[domain]; !ok {
0000000000000000000000000000000000000000;;			return msgid
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if f, ok := p.trTextMap[p.makeTrMapKey(domain, p.locale)]; ok {
0000000000000000000000000000000000000000;;			return f.PNGettext(msgctxt, msgid, msgidPlural, n)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return msgid
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *domainManager) getdata(domain, name string) []byte {
0000000000000000000000000000000000000000;;		if p.locale == "" || p.domain == "" {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, ok := p.domainMap[domain]; !ok {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if fs, ok := p.domainMap[domain]; ok {
0000000000000000000000000000000000000000;;			if data, err := fs.LoadResourceFile(domain, p.locale, name); err == nil {
0000000000000000000000000000000000000000;;				return data
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if p.locale != "default" {
0000000000000000000000000000000000000000;;				if data, err := fs.LoadResourceFile(domain, "default", name); err == nil {
0000000000000000000000000000000000000000;;					return data
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
