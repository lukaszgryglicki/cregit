0000000000000000000000000000000000000000;;	// Copyright 2013 ChaiShushan <chaishushan{AT}gmail.com>. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
64247eb69ec8b8707eb5c766a35ff8a3cd455896;;	
0000000000000000000000000000000000000000;;	package po
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A PO file is made up of many entries,
0000000000000000000000000000000000000000;;	// each entry holding the relation between an original untranslated string
0000000000000000000000000000000000000000;;	// and its corresponding translation.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See http://www.gnu.org/software/gettext/manual/html_node/PO-Files.html
0000000000000000000000000000000000000000;;	type Message struct {
0000000000000000000000000000000000000000;;		Comment               // Coments
0000000000000000000000000000000000000000;;		MsgContext   string   // msgctxt context
0000000000000000000000000000000000000000;;		MsgId        string   // msgid untranslated-string
0000000000000000000000000000000000000000;;		MsgIdPlural  string   // msgid_plural untranslated-string-plural
0000000000000000000000000000000000000000;;		MsgStr       string   // msgstr translated-string
0000000000000000000000000000000000000000;;		MsgStrPlural []string // msgstr[0] translated-string-case-0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type byMessages []Message
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d byMessages) Len() int {
0000000000000000000000000000000000000000;;		return len(d)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (d byMessages) Less(i, j int) bool {
0000000000000000000000000000000000000000;;		if d[i].Comment.less(&d[j].Comment) {
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if a, b := d[i].MsgContext, d[j].MsgContext; a != b {
0000000000000000000000000000000000000000;;			return a < b
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if a, b := d[i].MsgId, d[j].MsgId; a != b {
0000000000000000000000000000000000000000;;			return a < b
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if a, b := d[i].MsgIdPlural, d[j].MsgIdPlural; a != b {
0000000000000000000000000000000000000000;;			return a < b
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (d byMessages) Swap(i, j int) {
0000000000000000000000000000000000000000;;		d[i], d[j] = d[j], d[i]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *Message) readPoEntry(r *lineReader) (err error) {
0000000000000000000000000000000000000000;;		*p = Message{}
0000000000000000000000000000000000000000;;		if err = r.skipBlankLine(); err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer func(oldPos int) {
0000000000000000000000000000000000000000;;			newPos := r.currentPos()
0000000000000000000000000000000000000000;;			if newPos != oldPos && err == io.EOF {
0000000000000000000000000000000000000000;;				err = nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}(r.currentPos())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err = p.Comment.readPoComment(r); err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			var s string
0000000000000000000000000000000000000000;;			if s, _, err = r.currentLine(); err != nil {
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if p.isInvalidLine(s) {
0000000000000000000000000000000000000000;;				err = fmt.Errorf("gettext: line %d, %v", r.currentPos(), "invalid line")
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if reComment.MatchString(s) || reBlankLine.MatchString(s) {
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err = p.readMsgContext(r); err != nil {
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err = p.readMsgId(r); err != nil {
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err = p.readMsgIdPlural(r); err != nil {
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err = p.readMsgStrOrPlural(r); err != nil {
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *Message) readMsgContext(r *lineReader) (err error) {
0000000000000000000000000000000000000000;;		var s string
0000000000000000000000000000000000000000;;		if s, _, err = r.currentLine(); err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !reMsgContext.MatchString(s) {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.MsgContext, err = p.readString(r)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *Message) readMsgId(r *lineReader) (err error) {
0000000000000000000000000000000000000000;;		var s string
0000000000000000000000000000000000000000;;		if s, _, err = r.currentLine(); err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !reMsgId.MatchString(s) {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.MsgId, err = p.readString(r)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *Message) readMsgIdPlural(r *lineReader) (err error) {
0000000000000000000000000000000000000000;;		var s string
0000000000000000000000000000000000000000;;		if s, _, err = r.currentLine(); err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !reMsgIdPlural.MatchString(s) {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.MsgIdPlural, err = p.readString(r)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *Message) readMsgStrOrPlural(r *lineReader) (err error) {
0000000000000000000000000000000000000000;;		var s string
0000000000000000000000000000000000000000;;		if s, _, err = r.currentLine(); err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !reMsgStr.MatchString(s) && !reMsgStrPlural.MatchString(s) {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if reMsgStrPlural.MatchString(s) {
0000000000000000000000000000000000000000;;			left, right := strings.Index(s, `[`), strings.LastIndex(s, `]`)
0000000000000000000000000000000000000000;;			idx, _ := strconv.Atoi(s[left+1 : right])
0000000000000000000000000000000000000000;;			s, err = p.readString(r)
0000000000000000000000000000000000000000;;			if n := len(p.MsgStrPlural); (idx + 1) > n {
0000000000000000000000000000000000000000;;				p.MsgStrPlural = append(p.MsgStrPlural, make([]string, (idx+1)-n)...)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			p.MsgStrPlural[idx] = s
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			p.MsgStr, err = p.readString(r)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *Message) readString(r *lineReader) (msg string, err error) {
0000000000000000000000000000000000000000;;		var s string
0000000000000000000000000000000000000000;;		if s, _, err = r.readLine(); err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		msg += decodePoString(s)
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			if s, _, err = r.readLine(); err != nil {
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reStringLine.MatchString(s) {
0000000000000000000000000000000000000000;;				r.unreadLine()
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			msg += decodePoString(s)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the po format entry string.
0000000000000000000000000000000000000000;;	func (p Message) String() string {
0000000000000000000000000000000000000000;;		var buf bytes.Buffer
0000000000000000000000000000000000000000;;		fmt.Fprintf(&buf, "%s", p.Comment.String())
0000000000000000000000000000000000000000;;		fmt.Fprintf(&buf, "msgid %s", encodePoString(p.MsgId))
0000000000000000000000000000000000000000;;		if p.MsgIdPlural != "" {
0000000000000000000000000000000000000000;;			fmt.Fprintf(&buf, "msgid_plural %s", encodePoString(p.MsgIdPlural))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if p.MsgStr != "" {
0000000000000000000000000000000000000000;;			fmt.Fprintf(&buf, "msgstr %s", encodePoString(p.MsgStr))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := 0; i < len(p.MsgStrPlural); i++ {
0000000000000000000000000000000000000000;;			fmt.Fprintf(&buf, "msgstr[%d] %s", i, encodePoString(p.MsgStrPlural[i]))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return buf.String()
0000000000000000000000000000000000000000;;	}
