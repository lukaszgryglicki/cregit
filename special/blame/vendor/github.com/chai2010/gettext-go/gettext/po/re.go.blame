0000000000000000000000000000000000000000;;	// Copyright 2013 ChaiShushan <chaishushan{AT}gmail.com>. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
64247eb69ec8b8707eb5c766a35ff8a3cd455896;;	
0000000000000000000000000000000000000000;;	package po
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"regexp"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		reComment                = regexp.MustCompile(`^#`)              // #
0000000000000000000000000000000000000000;;		reExtractedComments      = regexp.MustCompile(`^#\.`)            // #.
0000000000000000000000000000000000000000;;		reReferenceComments      = regexp.MustCompile(`^#:`)             // #:
0000000000000000000000000000000000000000;;		reFlagsComments          = regexp.MustCompile(`^#,`)             // #, fuzzy,c-format
0000000000000000000000000000000000000000;;		rePrevMsgContextComments = regexp.MustCompile(`^#\|\s+msgctxt`)  // #| msgctxt
0000000000000000000000000000000000000000;;		rePrevMsgIdComments      = regexp.MustCompile(`^#\|\s+msgid`)    // #| msgid
0000000000000000000000000000000000000000;;		reStringLineComments     = regexp.MustCompile(`^#\|\s+".*"\s*$`) // #| "message"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		reMsgContext   = regexp.MustCompile(`^msgctxt\s+".*"\s*$`)            // msgctxt
0000000000000000000000000000000000000000;;		reMsgId        = regexp.MustCompile(`^msgid\s+".*"\s*$`)              // msgid
0000000000000000000000000000000000000000;;		reMsgIdPlural  = regexp.MustCompile(`^msgid_plural\s+".*"\s*$`)       // msgid_plural
0000000000000000000000000000000000000000;;		reMsgStr       = regexp.MustCompile(`^msgstr\s*".*"\s*$`)             // msgstr
0000000000000000000000000000000000000000;;		reMsgStrPlural = regexp.MustCompile(`^msgstr\s*(\[\d+\])\s*".*"\s*$`) // msgstr[0]
0000000000000000000000000000000000000000;;		reStringLine   = regexp.MustCompile(`^\s*".*"\s*$`)                   // "message"
0000000000000000000000000000000000000000;;		reBlankLine    = regexp.MustCompile(`^\s*$`)                          //
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *Message) isInvalidLine(s string) bool {
0000000000000000000000000000000000000000;;		if reComment.MatchString(s) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if reBlankLine.MatchString(s) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if reMsgContext.MatchString(s) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if reMsgId.MatchString(s) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if reMsgIdPlural.MatchString(s) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if reMsgStr.MatchString(s) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if reMsgStrPlural.MatchString(s) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if reStringLine.MatchString(s) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
