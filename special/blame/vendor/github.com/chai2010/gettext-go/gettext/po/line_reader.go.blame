0000000000000000000000000000000000000000;;	// Copyright 2013 ChaiShushan <chaishushan{AT}gmail.com>. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
64247eb69ec8b8707eb5c766a35ff8a3cd455896;;	
0000000000000000000000000000000000000000;;	package po
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type lineReader struct {
0000000000000000000000000000000000000000;;		lines []string
0000000000000000000000000000000000000000;;		pos   int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newLineReader(data string) *lineReader {
0000000000000000000000000000000000000000;;		data = strings.Replace(data, "\r", "", -1)
0000000000000000000000000000000000000000;;		lines := strings.Split(data, "\n")
0000000000000000000000000000000000000000;;		return &lineReader{lines: lines}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *lineReader) skipBlankLine() error {
0000000000000000000000000000000000000000;;		for ; r.pos < len(r.lines); r.pos++ {
0000000000000000000000000000000000000000;;			if strings.TrimSpace(r.lines[r.pos]) != "" {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if r.pos >= len(r.lines) {
0000000000000000000000000000000000000000;;			return io.EOF
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *lineReader) currentPos() int {
0000000000000000000000000000000000000000;;		return r.pos
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *lineReader) currentLine() (s string, pos int, err error) {
0000000000000000000000000000000000000000;;		if r.pos >= len(r.lines) {
0000000000000000000000000000000000000000;;			err = io.EOF
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s, pos = r.lines[r.pos], r.pos
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *lineReader) readLine() (s string, pos int, err error) {
0000000000000000000000000000000000000000;;		if r.pos >= len(r.lines) {
0000000000000000000000000000000000000000;;			err = io.EOF
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s, pos = r.lines[r.pos], r.pos
0000000000000000000000000000000000000000;;		r.pos++
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *lineReader) unreadLine() {
0000000000000000000000000000000000000000;;		if r.pos >= 0 {
0000000000000000000000000000000000000000;;			r.pos--
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
