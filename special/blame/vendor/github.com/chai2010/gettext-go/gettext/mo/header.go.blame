0000000000000000000000000000000000000000;;	// Copyright 2013 ChaiShushan <chaishushan{AT}gmail.com>. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
64247eb69ec8b8707eb5c766a35ff8a3cd455896;;	
0000000000000000000000000000000000000000;;	package mo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header is the initial comments "SOME DESCRIPTIVE TITLE", "YEAR"
0000000000000000000000000000000000000000;;	// and "FIRST AUTHOR <EMAIL@ADDRESS>, YEAR" ought to be replaced by sensible information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See http://www.gnu.org/software/gettext/manual/html_node/Header-Entry.html#Header-Entry
0000000000000000000000000000000000000000;;	type Header struct {
0000000000000000000000000000000000000000;;		ProjectIdVersion        string // Project-Id-Version: PACKAGE VERSION
0000000000000000000000000000000000000000;;		ReportMsgidBugsTo       string // Report-Msgid-Bugs-To: FIRST AUTHOR <EMAIL@ADDRESS>
0000000000000000000000000000000000000000;;		POTCreationDate         string // POT-Creation-Date: YEAR-MO-DA HO:MI+ZONE
0000000000000000000000000000000000000000;;		PORevisionDate          string // PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE
0000000000000000000000000000000000000000;;		LastTranslator          string // Last-Translator: FIRST AUTHOR <EMAIL@ADDRESS>
0000000000000000000000000000000000000000;;		LanguageTeam            string // Language-Team: golang-china
0000000000000000000000000000000000000000;;		Language                string // Language: zh_CN
0000000000000000000000000000000000000000;;		MimeVersion             string // MIME-Version: 1.0
0000000000000000000000000000000000000000;;		ContentType             string // Content-Type: text/plain; charset=UTF-8
0000000000000000000000000000000000000000;;		ContentTransferEncoding string // Content-Transfer-Encoding: 8bit
0000000000000000000000000000000000000000;;		PluralForms             string // Plural-Forms: nplurals=2; plural=n == 1 ? 0 : 1;
0000000000000000000000000000000000000000;;		XGenerator              string // X-Generator: Poedit 1.5.5
0000000000000000000000000000000000000000;;		UnknowFields            map[string]string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *Header) fromMessage(msg *Message) {
0000000000000000000000000000000000000000;;		if msg.MsgId != "" || msg.MsgStr == "" {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		lines := strings.Split(msg.MsgStr, "\n")
0000000000000000000000000000000000000000;;		for i := 0; i < len(lines); i++ {
0000000000000000000000000000000000000000;;			idx := strings.Index(lines[i], ":")
0000000000000000000000000000000000000000;;			if idx < 0 {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			key := strings.TrimSpace(lines[i][:idx])
0000000000000000000000000000000000000000;;			val := strings.TrimSpace(lines[i][idx+1:])
0000000000000000000000000000000000000000;;			switch strings.ToUpper(key) {
0000000000000000000000000000000000000000;;			case strings.ToUpper("Project-Id-Version"):
0000000000000000000000000000000000000000;;				p.ProjectIdVersion = val
0000000000000000000000000000000000000000;;			case strings.ToUpper("Report-Msgid-Bugs-To"):
0000000000000000000000000000000000000000;;				p.ReportMsgidBugsTo = val
0000000000000000000000000000000000000000;;			case strings.ToUpper("POT-Creation-Date"):
0000000000000000000000000000000000000000;;				p.POTCreationDate = val
0000000000000000000000000000000000000000;;			case strings.ToUpper("PO-Revision-Date"):
0000000000000000000000000000000000000000;;				p.PORevisionDate = val
0000000000000000000000000000000000000000;;			case strings.ToUpper("Last-Translator"):
0000000000000000000000000000000000000000;;				p.LastTranslator = val
0000000000000000000000000000000000000000;;			case strings.ToUpper("Language-Team"):
0000000000000000000000000000000000000000;;				p.LanguageTeam = val
0000000000000000000000000000000000000000;;			case strings.ToUpper("Language"):
0000000000000000000000000000000000000000;;				p.Language = val
0000000000000000000000000000000000000000;;			case strings.ToUpper("MIME-Version"):
0000000000000000000000000000000000000000;;				p.MimeVersion = val
0000000000000000000000000000000000000000;;			case strings.ToUpper("Content-Type"):
0000000000000000000000000000000000000000;;				p.ContentType = val
0000000000000000000000000000000000000000;;			case strings.ToUpper("Content-Transfer-Encoding"):
0000000000000000000000000000000000000000;;				p.ContentTransferEncoding = val
0000000000000000000000000000000000000000;;			case strings.ToUpper("Plural-Forms"):
0000000000000000000000000000000000000000;;				p.PluralForms = val
0000000000000000000000000000000000000000;;			case strings.ToUpper("X-Generator"):
0000000000000000000000000000000000000000;;				p.XGenerator = val
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				if p.UnknowFields == nil {
0000000000000000000000000000000000000000;;					p.UnknowFields = make(map[string]string)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				p.UnknowFields[key] = val
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *Header) toMessage() Message {
0000000000000000000000000000000000000000;;		return Message{
0000000000000000000000000000000000000000;;			MsgStr: p.String(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the po format header string.
0000000000000000000000000000000000000000;;	func (p Header) String() string {
0000000000000000000000000000000000000000;;		var buf bytes.Buffer
0000000000000000000000000000000000000000;;		fmt.Fprintf(&buf, `msgid ""`+"\n")
0000000000000000000000000000000000000000;;		fmt.Fprintf(&buf, `msgstr ""`+"\n")
0000000000000000000000000000000000000000;;		fmt.Fprintf(&buf, `"%s: %s\n"`+"\n", "Project-Id-Version", p.ProjectIdVersion)
0000000000000000000000000000000000000000;;		fmt.Fprintf(&buf, `"%s: %s\n"`+"\n", "Report-Msgid-Bugs-To", p.ReportMsgidBugsTo)
0000000000000000000000000000000000000000;;		fmt.Fprintf(&buf, `"%s: %s\n"`+"\n", "POT-Creation-Date", p.POTCreationDate)
0000000000000000000000000000000000000000;;		fmt.Fprintf(&buf, `"%s: %s\n"`+"\n", "PO-Revision-Date", p.PORevisionDate)
0000000000000000000000000000000000000000;;		fmt.Fprintf(&buf, `"%s: %s\n"`+"\n", "Last-Translator", p.LastTranslator)
0000000000000000000000000000000000000000;;		fmt.Fprintf(&buf, `"%s: %s\n"`+"\n", "Language-Team", p.LanguageTeam)
0000000000000000000000000000000000000000;;		fmt.Fprintf(&buf, `"%s: %s\n"`+"\n", "Language", p.Language)
0000000000000000000000000000000000000000;;		if p.MimeVersion != "" {
0000000000000000000000000000000000000000;;			fmt.Fprintf(&buf, `"%s: %s\n"`+"\n", "MIME-Version", p.MimeVersion)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fmt.Fprintf(&buf, `"%s: %s\n"`+"\n", "Content-Type", p.ContentType)
0000000000000000000000000000000000000000;;		fmt.Fprintf(&buf, `"%s: %s\n"`+"\n", "Content-Transfer-Encoding", p.ContentTransferEncoding)
0000000000000000000000000000000000000000;;		if p.XGenerator != "" {
0000000000000000000000000000000000000000;;			fmt.Fprintf(&buf, `"%s: %s\n"`+"\n", "X-Generator", p.XGenerator)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, v := range p.UnknowFields {
0000000000000000000000000000000000000000;;			fmt.Fprintf(&buf, `"%s: %s\n"`+"\n", k, v)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return buf.String()
0000000000000000000000000000000000000000;;	}
