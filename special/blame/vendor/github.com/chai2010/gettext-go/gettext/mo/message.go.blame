0000000000000000000000000000000000000000;;	// Copyright 2013 ChaiShushan <chaishushan{AT}gmail.com>. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
64247eb69ec8b8707eb5c766a35ff8a3cd455896;;	
0000000000000000000000000000000000000000;;	package mo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A MO file is made up of many entries,
0000000000000000000000000000000000000000;;	// each entry holding the relation between an original untranslated string
0000000000000000000000000000000000000000;;	// and its corresponding translation.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See http://www.gnu.org/software/gettext/manual/html_node/MO-Files.html
0000000000000000000000000000000000000000;;	type Message struct {
0000000000000000000000000000000000000000;;		MsgContext   string   // msgctxt context
0000000000000000000000000000000000000000;;		MsgId        string   // msgid untranslated-string
0000000000000000000000000000000000000000;;		MsgIdPlural  string   // msgid_plural untranslated-string-plural
0000000000000000000000000000000000000000;;		MsgStr       string   // msgstr translated-string
0000000000000000000000000000000000000000;;		MsgStrPlural []string // msgstr[0] translated-string-case-0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the po format entry string.
0000000000000000000000000000000000000000;;	func (p Message) String() string {
0000000000000000000000000000000000000000;;		var buf bytes.Buffer
0000000000000000000000000000000000000000;;		fmt.Fprintf(&buf, "msgid %s", encodePoString(p.MsgId))
0000000000000000000000000000000000000000;;		if p.MsgIdPlural != "" {
0000000000000000000000000000000000000000;;			fmt.Fprintf(&buf, "msgid_plural %s", encodePoString(p.MsgIdPlural))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if p.MsgStr != "" {
0000000000000000000000000000000000000000;;			fmt.Fprintf(&buf, "msgstr %s", encodePoString(p.MsgStr))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := 0; i < len(p.MsgStrPlural); i++ {
0000000000000000000000000000000000000000;;			fmt.Fprintf(&buf, "msgstr[%d] %s", i, encodePoString(p.MsgStrPlural[i]))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return buf.String()
0000000000000000000000000000000000000000;;	}
