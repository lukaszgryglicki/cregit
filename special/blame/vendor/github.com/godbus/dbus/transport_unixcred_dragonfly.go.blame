0000000000000000000000000000000000000000;;	// The UnixCredentials system call is currently only implemented on Linux
0000000000000000000000000000000000000000;;	// http://golang.org/src/pkg/syscall/sockcmsg_linux.go
0000000000000000000000000000000000000000;;	// https://golang.org/s/go1.4-syscall
0000000000000000000000000000000000000000;;	// http://code.google.com/p/go/source/browse/unix/sockcmsg_linux.go?repo=sys
d1c42c1e3fb3b408449f892c0d575bb4d9d885bd;Godeps/_workspace/src/github.com/godbus/dbus/transport_unixcred_dragonfly.go[Godeps/_workspace/src/github.com/godbus/dbus/transport_unixcred_dragonfly.go][vendor/github.com/godbus/dbus/transport_unixcred_dragonfly.go];	
0000000000000000000000000000000000000000;;	// Local implementation of the UnixCredentials system call for DragonFly BSD
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package dbus
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	#include <sys/ucred.h>
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	import "C"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;		"unsafe"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// http://golang.org/src/pkg/syscall/ztypes_linux_amd64.go
0000000000000000000000000000000000000000;;	// http://golang.org/src/pkg/syscall/ztypes_dragonfly_amd64.go
0000000000000000000000000000000000000000;;	type Ucred struct {
0000000000000000000000000000000000000000;;		Pid int32
0000000000000000000000000000000000000000;;		Uid uint32
0000000000000000000000000000000000000000;;		Gid uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// http://golang.org/src/pkg/syscall/types_linux.go
0000000000000000000000000000000000000000;;	// http://golang.org/src/pkg/syscall/types_dragonfly.go
0000000000000000000000000000000000000000;;	// https://github.com/DragonFlyBSD/DragonFlyBSD/blob/master/sys/sys/ucred.h
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		SizeofUcred = C.sizeof_struct_ucred
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// http://golang.org/src/pkg/syscall/sockcmsg_unix.go
0000000000000000000000000000000000000000;;	func cmsgAlignOf(salen int) int {
0000000000000000000000000000000000000000;;		// From http://golang.org/src/pkg/syscall/sockcmsg_unix.go
0000000000000000000000000000000000000000;;		//salign := sizeofPtr
0000000000000000000000000000000000000000;;		// NOTE: It seems like 64-bit Darwin and DragonFly BSD kernels
0000000000000000000000000000000000000000;;		// still require 32-bit aligned access to network subsystem.
0000000000000000000000000000000000000000;;		//if darwin64Bit || dragonfly64Bit {
0000000000000000000000000000000000000000;;		//	salign = 4
0000000000000000000000000000000000000000;;		//}
0000000000000000000000000000000000000000;;		salign := 4
0000000000000000000000000000000000000000;;		return (salen + salign - 1) & ^(salign - 1)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// http://golang.org/src/pkg/syscall/sockcmsg_unix.go
0000000000000000000000000000000000000000;;	func cmsgData(h *syscall.Cmsghdr) unsafe.Pointer {
0000000000000000000000000000000000000000;;		return unsafe.Pointer(uintptr(unsafe.Pointer(h)) + uintptr(cmsgAlignOf(syscall.SizeofCmsghdr)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// http://golang.org/src/pkg/syscall/sockcmsg_linux.go
0000000000000000000000000000000000000000;;	// UnixCredentials encodes credentials into a socket control message
0000000000000000000000000000000000000000;;	// for sending to another process. This can be used for
0000000000000000000000000000000000000000;;	// authentication.
0000000000000000000000000000000000000000;;	func UnixCredentials(ucred *Ucred) []byte {
0000000000000000000000000000000000000000;;		b := make([]byte, syscall.CmsgSpace(SizeofUcred))
0000000000000000000000000000000000000000;;		h := (*syscall.Cmsghdr)(unsafe.Pointer(&b[0]))
0000000000000000000000000000000000000000;;		h.Level = syscall.SOL_SOCKET
0000000000000000000000000000000000000000;;		h.Type = syscall.SCM_CREDS
0000000000000000000000000000000000000000;;		h.SetLen(syscall.CmsgLen(SizeofUcred))
0000000000000000000000000000000000000000;;		*((*Ucred)(cmsgData(h))) = *ucred
0000000000000000000000000000000000000000;;		return b
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// http://golang.org/src/pkg/syscall/sockcmsg_linux.go
0000000000000000000000000000000000000000;;	// ParseUnixCredentials decodes a socket control message that contains
0000000000000000000000000000000000000000;;	// credentials in a Ucred structure. To receive such a message, the
0000000000000000000000000000000000000000;;	// SO_PASSCRED option must be enabled on the socket.
0000000000000000000000000000000000000000;;	func ParseUnixCredentials(m *syscall.SocketControlMessage) (*Ucred, error) {
0000000000000000000000000000000000000000;;		if m.Header.Level != syscall.SOL_SOCKET {
0000000000000000000000000000000000000000;;			return nil, syscall.EINVAL
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if m.Header.Type != syscall.SCM_CREDS {
0000000000000000000000000000000000000000;;			return nil, syscall.EINVAL
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ucred := *(*Ucred)(unsafe.Pointer(&m.Data[0]))
0000000000000000000000000000000000000000;;		return &ucred, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *unixTransport) SendNullByte() error {
0000000000000000000000000000000000000000;;		ucred := &Ucred{Pid: int32(os.Getpid()), Uid: uint32(os.Getuid()), Gid: uint32(os.Getgid())}
0000000000000000000000000000000000000000;;		b := UnixCredentials(ucred)
0000000000000000000000000000000000000000;;		_, oobn, err := t.UnixConn.WriteMsgUnix([]byte{0}, b, nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if oobn != len(b) {
0000000000000000000000000000000000000000;;			return io.ErrShortWrite
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
