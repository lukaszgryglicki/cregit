0000000000000000000000000000000000000000;;	# How to Contribute
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Getting Started
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	- Fork the repository on GitHub
0000000000000000000000000000000000000000;;	- Read the [README](README.markdown) for build and test instructions
0000000000000000000000000000000000000000;;	- Play with the project, submit bugs, submit patches!
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Contribution Flow
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	This is a rough outline of what a contributor's workflow looks like:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	- Create a topic branch from where you want to base your work (usually master).
0000000000000000000000000000000000000000;;	- Make commits of logical units.
0000000000000000000000000000000000000000;;	- Make sure your commit messages are in the proper format (see below).
0000000000000000000000000000000000000000;;	- Push your changes to a topic branch in your fork of the repository.
0000000000000000000000000000000000000000;;	- Make sure the tests pass, and add any new tests as appropriate.
0000000000000000000000000000000000000000;;	- Submit a pull request to the original repository.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Thanks for your contributions!
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### Format of the Commit Message
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	We follow a rough convention for commit messages that is designed to answer two
0000000000000000000000000000000000000000;;	questions: what changed and why. The subject line should feature the what and
0000000000000000000000000000000000000000;;	the body of the commit should describe the why.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	scripts: add the test-cluster command
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	this uses tmux to setup a test cluster that you can easily kill and
0000000000000000000000000000000000000000;;	start for debugging.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Fixes #38
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The format can be described more formally as follows:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	<subsystem>: <what changed>
0000000000000000000000000000000000000000;;	<BLANK LINE>
0000000000000000000000000000000000000000;;	<why this change was made>
0000000000000000000000000000000000000000;;	<BLANK LINE>
0000000000000000000000000000000000000000;;	<footer>
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The first line is the subject and should be no longer than 70 characters, the
0000000000000000000000000000000000000000;;	second line is always blank, and other lines should be wrapped at 80 characters.
0000000000000000000000000000000000000000;;	This allows the message to be easier to read on GitHub as well as in various
0000000000000000000000000000000000000000;;	git tools.
