0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Package dbus implements bindings to the D-Bus message bus system.
d1c42c1e3fb3b408449f892c0d575bb4d9d885bd;Godeps/_workspace/src/github.com/godbus/dbus/doc.go[Godeps/_workspace/src/github.com/godbus/dbus/doc.go][vendor/github.com/godbus/dbus/doc.go];	
0000000000000000000000000000000000000000;;	To use the message bus API, you first need to connect to a bus (usually the
0000000000000000000000000000000000000000;;	session or system bus). The acquired connection then can be used to call methods
0000000000000000000000000000000000000000;;	on remote objects and emit or receive signals. Using the Export method, you can
0000000000000000000000000000000000000000;;	arrange D-Bus methods calls to be directly translated to method calls on a Go
0000000000000000000000000000000000000000;;	value.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Conversion Rules
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	For outgoing messages, Go types are automatically converted to the
0000000000000000000000000000000000000000;;	corresponding D-Bus types. The following types are directly encoded as their
0000000000000000000000000000000000000000;;	respective D-Bus equivalents:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	     Go type     | D-Bus type
0000000000000000000000000000000000000000;;	     ------------+-----------
0000000000000000000000000000000000000000;;	     byte        | BYTE
0000000000000000000000000000000000000000;;	     bool        | BOOLEAN
0000000000000000000000000000000000000000;;	     int16       | INT16
0000000000000000000000000000000000000000;;	     uint16      | UINT16
0000000000000000000000000000000000000000;;	     int32       | INT32
0000000000000000000000000000000000000000;;	     uint32      | UINT32
0000000000000000000000000000000000000000;;	     int64       | INT64
0000000000000000000000000000000000000000;;	     uint64      | UINT64
0000000000000000000000000000000000000000;;	     float64     | DOUBLE
0000000000000000000000000000000000000000;;	     string      | STRING
0000000000000000000000000000000000000000;;	     ObjectPath  | OBJECT_PATH
0000000000000000000000000000000000000000;;	     Signature   | SIGNATURE
0000000000000000000000000000000000000000;;	     Variant     | VARIANT
0000000000000000000000000000000000000000;;	     UnixFDIndex | UNIX_FD
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Slices and arrays encode as ARRAYs of their element type.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Maps encode as DICTs, provided that their key type can be used as a key for
0000000000000000000000000000000000000000;;	a DICT.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Structs other than Variant and Signature encode as a STRUCT containing their
0000000000000000000000000000000000000000;;	exported fields. Fields whose tags contain `dbus:"-"` and unexported fields will
0000000000000000000000000000000000000000;;	be skipped.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Pointers encode as the value they're pointed to.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Trying to encode any other type or a slice, map or struct containing an
0000000000000000000000000000000000000000;;	unsupported type will result in an InvalidTypeError.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	For incoming messages, the inverse of these rules are used, with the exception
0000000000000000000000000000000000000000;;	of STRUCTs. Incoming STRUCTS are represented as a slice of empty interfaces
0000000000000000000000000000000000000000;;	containing the struct fields in the correct order. The Store function can be
0000000000000000000000000000000000000000;;	used to convert such values to Go structs.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unix FD passing
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Handling Unix file descriptors deserves special mention. To use them, you should
0000000000000000000000000000000000000000;;	first check that they are supported on a connection by calling SupportsUnixFDs.
0000000000000000000000000000000000000000;;	If it returns true, all method of Connection will translate messages containing
0000000000000000000000000000000000000000;;	UnixFD's to messages that are accompanied by the given file descriptors with the
0000000000000000000000000000000000000000;;	UnixFD values being substituted by the correct indices. Similarily, the indices
0000000000000000000000000000000000000000;;	of incoming messages are automatically resolved. It shouldn't be necessary to use
0000000000000000000000000000000000000000;;	UnixFDIndex.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	package dbus
