0000000000000000000000000000000000000000;;	package semver
8d973c48ce204bda083f5a578278a9cd3743f879;Godeps/_workspace/src/github.com/coreos/go-semver/semver/semver.go[Godeps/_workspace/src/github.com/coreos/go-semver/semver/semver.go][vendor/github.com/coreos/go-semver/semver/semver.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Version struct {
0000000000000000000000000000000000000000;;		Major      int64
0000000000000000000000000000000000000000;;		Minor      int64
0000000000000000000000000000000000000000;;		Patch      int64
0000000000000000000000000000000000000000;;		PreRelease PreRelease
0000000000000000000000000000000000000000;;		Metadata   string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PreRelease string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func splitOff(input *string, delim string) (val string) {
0000000000000000000000000000000000000000;;		parts := strings.SplitN(*input, delim, 2)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(parts) == 2 {
0000000000000000000000000000000000000000;;			*input = parts[0]
0000000000000000000000000000000000000000;;			val = parts[1]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return val
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewVersion(version string) (*Version, error) {
0000000000000000000000000000000000000000;;		v := Version{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		dotParts := strings.SplitN(version, ".", 3)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(dotParts) != 3 {
0000000000000000000000000000000000000000;;			return nil, errors.New(fmt.Sprintf("%s is not in dotted-tri format", version))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		v.Metadata = splitOff(&dotParts[2], "+")
0000000000000000000000000000000000000000;;		v.PreRelease = PreRelease(splitOff(&dotParts[2], "-"))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		parsed := make([]int64, 3, 3)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, v := range dotParts[:3] {
0000000000000000000000000000000000000000;;			val, err := strconv.ParseInt(v, 10, 64)
0000000000000000000000000000000000000000;;			parsed[i] = val
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		v.Major = parsed[0]
0000000000000000000000000000000000000000;;		v.Minor = parsed[1]
0000000000000000000000000000000000000000;;		v.Patch = parsed[2]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &v, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Must(v *Version, err error) *Version {
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return v
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v *Version) String() string {
0000000000000000000000000000000000000000;;		var buffer bytes.Buffer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		base := fmt.Sprintf("%d.%d.%d", v.Major, v.Minor, v.Patch)
0000000000000000000000000000000000000000;;		buffer.WriteString(base)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if v.PreRelease != "" {
0000000000000000000000000000000000000000;;			buffer.WriteString(fmt.Sprintf("-%s", v.PreRelease))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if v.Metadata != "" {
0000000000000000000000000000000000000000;;			buffer.WriteString(fmt.Sprintf("+%s", v.Metadata))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return buffer.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v *Version) LessThan(versionB Version) bool {
0000000000000000000000000000000000000000;;		versionA := *v
0000000000000000000000000000000000000000;;		cmp := recursiveCompare(versionA.Slice(), versionB.Slice())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if cmp == 0 {
0000000000000000000000000000000000000000;;			cmp = preReleaseCompare(versionA, versionB)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if cmp == -1 {
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/* Slice converts the comparable parts of the semver into a slice of strings */
0000000000000000000000000000000000000000;;	func (v *Version) Slice() []int64 {
0000000000000000000000000000000000000000;;		return []int64{v.Major, v.Minor, v.Patch}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *PreRelease) Slice() []string {
0000000000000000000000000000000000000000;;		preRelease := string(*p)
0000000000000000000000000000000000000000;;		return strings.Split(preRelease, ".")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func preReleaseCompare(versionA Version, versionB Version) int {
0000000000000000000000000000000000000000;;		a := versionA.PreRelease
0000000000000000000000000000000000000000;;		b := versionB.PreRelease
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		/* Handle the case where if two versions are otherwise equal it is the
0000000000000000000000000000000000000000;;		 * one without a PreRelease that is greater */
0000000000000000000000000000000000000000;;		if len(a) == 0 && (len(b) > 0) {
0000000000000000000000000000000000000000;;			return 1
0000000000000000000000000000000000000000;;		} else if len(b) == 0 && (len(a) > 0) {
0000000000000000000000000000000000000000;;			return -1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If there is a prelease, check and compare each part.
0000000000000000000000000000000000000000;;		return recursivePreReleaseCompare(a.Slice(), b.Slice())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func recursiveCompare(versionA []int64, versionB []int64) int {
0000000000000000000000000000000000000000;;		if len(versionA) == 0 {
0000000000000000000000000000000000000000;;			return 0
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		a := versionA[0]
0000000000000000000000000000000000000000;;		b := versionB[0]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if a > b {
0000000000000000000000000000000000000000;;			return 1
0000000000000000000000000000000000000000;;		} else if a < b {
0000000000000000000000000000000000000000;;			return -1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return recursiveCompare(versionA[1:], versionB[1:])
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func recursivePreReleaseCompare(versionA []string, versionB []string) int {
0000000000000000000000000000000000000000;;		// Handle slice length disparity.
0000000000000000000000000000000000000000;;		if len(versionA) == 0 {
0000000000000000000000000000000000000000;;			// Nothing to compare too, so we return 0
0000000000000000000000000000000000000000;;			return 0
0000000000000000000000000000000000000000;;		} else if len(versionB) == 0 {
0000000000000000000000000000000000000000;;			// We're longer than versionB so return 1.
0000000000000000000000000000000000000000;;			return 1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		a := versionA[0]
0000000000000000000000000000000000000000;;		b := versionB[0]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		aInt := false; bInt := false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		aI, err := strconv.Atoi(versionA[0])
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			aInt = true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		bI, err := strconv.Atoi(versionB[0])
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			bInt = true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Handle Integer Comparison
0000000000000000000000000000000000000000;;		if aInt && bInt {
0000000000000000000000000000000000000000;;			if aI > bI {
0000000000000000000000000000000000000000;;				return 1
0000000000000000000000000000000000000000;;			} else if aI < bI {
0000000000000000000000000000000000000000;;				return -1
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Handle String Comparison
0000000000000000000000000000000000000000;;		if a > b {
0000000000000000000000000000000000000000;;			return 1
0000000000000000000000000000000000000000;;		} else if a < b {
0000000000000000000000000000000000000000;;			return -1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return recursivePreReleaseCompare(versionA[1:], versionB[1:])
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BumpMajor increments the Major field by 1 and resets all other fields to their default values
0000000000000000000000000000000000000000;;	func (v *Version) BumpMajor() {
0000000000000000000000000000000000000000;;		v.Major += 1
0000000000000000000000000000000000000000;;		v.Minor = 0
0000000000000000000000000000000000000000;;		v.Patch = 0
0000000000000000000000000000000000000000;;		v.PreRelease = PreRelease("")
0000000000000000000000000000000000000000;;		v.Metadata = ""
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BumpMinor increments the Minor field by 1 and resets all other fields to their default values
0000000000000000000000000000000000000000;;	func (v *Version) BumpMinor() {
0000000000000000000000000000000000000000;;		v.Minor += 1
0000000000000000000000000000000000000000;;		v.Patch = 0
0000000000000000000000000000000000000000;;		v.PreRelease = PreRelease("")
0000000000000000000000000000000000000000;;		v.Metadata = ""
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BumpPatch increments the Patch field by 1 and resets all other fields to their default values
0000000000000000000000000000000000000000;;	func (v *Version) BumpPatch() {
0000000000000000000000000000000000000000;;		v.Patch += 1
0000000000000000000000000000000000000000;;		v.PreRelease = PreRelease("")
0000000000000000000000000000000000000000;;		v.Metadata = ""
0000000000000000000000000000000000000000;;	}
