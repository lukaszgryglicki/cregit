0000000000000000000000000000000000000000;;	// Copyright 2016 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
9b11e90c65f84c704d29a1c6a5867d26fdba23c5;Godeps/_workspace/src/github.com/coreos/etcd/clientv3/compare.go[Godeps/_workspace/src/github.com/coreos/etcd/clientv3/compare.go][vendor/github.com/coreos/etcd/clientv3/compare.go];	
0000000000000000000000000000000000000000;;	package clientv3
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		pb "github.com/coreos/etcd/etcdserver/etcdserverpb"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CompareTarget int
0000000000000000000000000000000000000000;;	type CompareResult int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		CompareVersion CompareTarget = iota
0000000000000000000000000000000000000000;;		CompareCreated
0000000000000000000000000000000000000000;;		CompareModified
0000000000000000000000000000000000000000;;		CompareValue
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Cmp pb.Compare
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Compare(cmp Cmp, result string, v interface{}) Cmp {
0000000000000000000000000000000000000000;;		var r pb.Compare_CompareResult
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch result {
0000000000000000000000000000000000000000;;		case "=":
0000000000000000000000000000000000000000;;			r = pb.Compare_EQUAL
0000000000000000000000000000000000000000;;		case "!=":
0000000000000000000000000000000000000000;;			r = pb.Compare_NOT_EQUAL
0000000000000000000000000000000000000000;;		case ">":
0000000000000000000000000000000000000000;;			r = pb.Compare_GREATER
0000000000000000000000000000000000000000;;		case "<":
0000000000000000000000000000000000000000;;			r = pb.Compare_LESS
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			panic("Unknown result op")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmp.Result = r
0000000000000000000000000000000000000000;;		switch cmp.Target {
0000000000000000000000000000000000000000;;		case pb.Compare_VALUE:
0000000000000000000000000000000000000000;;			val, ok := v.(string)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				panic("bad compare value")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			cmp.TargetUnion = &pb.Compare_Value{Value: []byte(val)}
0000000000000000000000000000000000000000;;		case pb.Compare_VERSION:
0000000000000000000000000000000000000000;;			cmp.TargetUnion = &pb.Compare_Version{Version: mustInt64(v)}
0000000000000000000000000000000000000000;;		case pb.Compare_CREATE:
0000000000000000000000000000000000000000;;			cmp.TargetUnion = &pb.Compare_CreateRevision{CreateRevision: mustInt64(v)}
0000000000000000000000000000000000000000;;		case pb.Compare_MOD:
0000000000000000000000000000000000000000;;			cmp.TargetUnion = &pb.Compare_ModRevision{ModRevision: mustInt64(v)}
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			panic("Unknown compare type")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return cmp
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Value(key string) Cmp {
0000000000000000000000000000000000000000;;		return Cmp{Key: []byte(key), Target: pb.Compare_VALUE}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Version(key string) Cmp {
0000000000000000000000000000000000000000;;		return Cmp{Key: []byte(key), Target: pb.Compare_VERSION}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func CreateRevision(key string) Cmp {
0000000000000000000000000000000000000000;;		return Cmp{Key: []byte(key), Target: pb.Compare_CREATE}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ModRevision(key string) Cmp {
0000000000000000000000000000000000000000;;		return Cmp{Key: []byte(key), Target: pb.Compare_MOD}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func mustInt64(val interface{}) int64 {
0000000000000000000000000000000000000000;;		if v, ok := val.(int64); ok {
0000000000000000000000000000000000000000;;			return v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v, ok := val.(int); ok {
0000000000000000000000000000000000000000;;			return int64(v)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		panic("bad value")
0000000000000000000000000000000000000000;;	}
