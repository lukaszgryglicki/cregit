0000000000000000000000000000000000000000;;	// Copyright 2016 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
1861d099d10ddfa47b9f2b8b925fc11bd0827dac;Godeps/_workspace/src/github.com/coreos/etcd/clientv3/logger.go[Godeps/_workspace/src/github.com/coreos/etcd/clientv3/logger.go][vendor/github.com/coreos/etcd/clientv3/logger.go];	
0000000000000000000000000000000000000000;;	package clientv3
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"log"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"google.golang.org/grpc/grpclog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Logger is the logger used by client library.
0000000000000000000000000000000000000000;;	// It implements grpclog.Logger interface.
0000000000000000000000000000000000000000;;	type Logger grpclog.Logger
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		logger settableLogger
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type settableLogger struct {
0000000000000000000000000000000000000000;;		l  grpclog.Logger
0000000000000000000000000000000000000000;;		mu sync.RWMutex
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		// disable client side logs by default
0000000000000000000000000000000000000000;;		logger.mu.Lock()
0000000000000000000000000000000000000000;;		logger.l = log.New(ioutil.Discard, "", 0)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// logger has to override the grpclog at initialization so that
0000000000000000000000000000000000000000;;		// any changes to the grpclog go through logger with locking
0000000000000000000000000000000000000000;;		// instead of through SetLogger
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// now updates only happen through settableLogger.set
0000000000000000000000000000000000000000;;		grpclog.SetLogger(&logger)
0000000000000000000000000000000000000000;;		logger.mu.Unlock()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetLogger sets client-side Logger. By default, logs are disabled.
0000000000000000000000000000000000000000;;	func SetLogger(l Logger) {
0000000000000000000000000000000000000000;;		logger.set(l)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetLogger returns the current logger.
0000000000000000000000000000000000000000;;	func GetLogger() Logger {
0000000000000000000000000000000000000000;;		return logger.get()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *settableLogger) set(l Logger) {
0000000000000000000000000000000000000000;;		s.mu.Lock()
0000000000000000000000000000000000000000;;		logger.l = l
0000000000000000000000000000000000000000;;		s.mu.Unlock()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *settableLogger) get() Logger {
0000000000000000000000000000000000000000;;		s.mu.RLock()
0000000000000000000000000000000000000000;;		l := logger.l
0000000000000000000000000000000000000000;;		s.mu.RUnlock()
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// implement the grpclog.Logger interface
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *settableLogger) Fatal(args ...interface{})                 { s.get().Fatal(args...) }
0000000000000000000000000000000000000000;;	func (s *settableLogger) Fatalf(format string, args ...interface{}) { s.get().Fatalf(format, args...) }
0000000000000000000000000000000000000000;;	func (s *settableLogger) Fatalln(args ...interface{})               { s.get().Fatalln(args...) }
0000000000000000000000000000000000000000;;	func (s *settableLogger) Print(args ...interface{})                 { s.get().Print(args...) }
0000000000000000000000000000000000000000;;	func (s *settableLogger) Printf(format string, args ...interface{}) { s.get().Printf(format, args...) }
0000000000000000000000000000000000000000;;	func (s *settableLogger) Println(args ...interface{})               { s.get().Println(args...) }
