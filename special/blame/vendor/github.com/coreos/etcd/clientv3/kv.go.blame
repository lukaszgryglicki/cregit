0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
9b11e90c65f84c704d29a1c6a5867d26fdba23c5;Godeps/_workspace/src/github.com/coreos/etcd/clientv3/kv.go[Godeps/_workspace/src/github.com/coreos/etcd/clientv3/kv.go][vendor/github.com/coreos/etcd/clientv3/kv.go];	
0000000000000000000000000000000000000000;;	package clientv3
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		pb "github.com/coreos/etcd/etcdserver/etcdserverpb"
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;		"google.golang.org/grpc"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type (
0000000000000000000000000000000000000000;;		CompactResponse pb.CompactionResponse
0000000000000000000000000000000000000000;;		PutResponse     pb.PutResponse
0000000000000000000000000000000000000000;;		GetResponse     pb.RangeResponse
0000000000000000000000000000000000000000;;		DeleteResponse  pb.DeleteRangeResponse
0000000000000000000000000000000000000000;;		TxnResponse     pb.TxnResponse
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type KV interface {
0000000000000000000000000000000000000000;;		// Put puts a key-value pair into etcd.
0000000000000000000000000000000000000000;;		// Note that key,value can be plain bytes array and string is
0000000000000000000000000000000000000000;;		// an immutable representation of that bytes array.
0000000000000000000000000000000000000000;;		// To get a string of bytes, do string([]byte(0x10, 0x20)).
0000000000000000000000000000000000000000;;		Put(ctx context.Context, key, val string, opts ...OpOption) (*PutResponse, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Get retrieves keys.
0000000000000000000000000000000000000000;;		// By default, Get will return the value for "key", if any.
0000000000000000000000000000000000000000;;		// When passed WithRange(end), Get will return the keys in the range [key, end).
0000000000000000000000000000000000000000;;		// When passed WithFromKey(), Get returns keys greater than or equal to key.
0000000000000000000000000000000000000000;;		// When passed WithRev(rev) with rev > 0, Get retrieves keys at the given revision;
0000000000000000000000000000000000000000;;		// if the required revision is compacted, the request will fail with ErrCompacted .
0000000000000000000000000000000000000000;;		// When passed WithLimit(limit), the number of returned keys is bounded by limit.
0000000000000000000000000000000000000000;;		// When passed WithSort(), the keys will be sorted.
0000000000000000000000000000000000000000;;		Get(ctx context.Context, key string, opts ...OpOption) (*GetResponse, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Delete deletes a key, or optionally using WithRange(end), [key, end).
0000000000000000000000000000000000000000;;		Delete(ctx context.Context, key string, opts ...OpOption) (*DeleteResponse, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Compact compacts etcd KV history before the given rev.
0000000000000000000000000000000000000000;;		Compact(ctx context.Context, rev int64, opts ...CompactOption) (*CompactResponse, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Do applies a single Op on KV without a transaction.
0000000000000000000000000000000000000000;;		// Do is useful when declaring operations to be issued at a later time
0000000000000000000000000000000000000000;;		// whereas Get/Put/Delete are for better suited for when the operation
0000000000000000000000000000000000000000;;		// should be immediately issued at time of declaration.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Do applies a single Op on KV without a transaction.
0000000000000000000000000000000000000000;;		// Do is useful when creating arbitrary operations to be issued at a
0000000000000000000000000000000000000000;;		// later time; the user can range over the operations, calling Do to
0000000000000000000000000000000000000000;;		// execute them. Get/Put/Delete, on the other hand, are best suited
0000000000000000000000000000000000000000;;		// for when the operation should be issued at the time of declaration.
0000000000000000000000000000000000000000;;		Do(ctx context.Context, op Op) (OpResponse, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Txn creates a transaction.
0000000000000000000000000000000000000000;;		Txn(ctx context.Context) Txn
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OpResponse struct {
0000000000000000000000000000000000000000;;		put *PutResponse
0000000000000000000000000000000000000000;;		get *GetResponse
0000000000000000000000000000000000000000;;		del *DeleteResponse
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (op OpResponse) Put() *PutResponse    { return op.put }
0000000000000000000000000000000000000000;;	func (op OpResponse) Get() *GetResponse    { return op.get }
0000000000000000000000000000000000000000;;	func (op OpResponse) Del() *DeleteResponse { return op.del }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type kv struct {
0000000000000000000000000000000000000000;;		remote pb.KVClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewKV(c *Client) KV {
0000000000000000000000000000000000000000;;		return &kv{remote: RetryKVClient(c)}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewKVFromKVClient(remote pb.KVClient) KV {
0000000000000000000000000000000000000000;;		return &kv{remote: remote}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (kv *kv) Put(ctx context.Context, key, val string, opts ...OpOption) (*PutResponse, error) {
0000000000000000000000000000000000000000;;		r, err := kv.Do(ctx, OpPut(key, val, opts...))
0000000000000000000000000000000000000000;;		return r.put, toErr(ctx, err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (kv *kv) Get(ctx context.Context, key string, opts ...OpOption) (*GetResponse, error) {
0000000000000000000000000000000000000000;;		r, err := kv.Do(ctx, OpGet(key, opts...))
0000000000000000000000000000000000000000;;		return r.get, toErr(ctx, err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (kv *kv) Delete(ctx context.Context, key string, opts ...OpOption) (*DeleteResponse, error) {
0000000000000000000000000000000000000000;;		r, err := kv.Do(ctx, OpDelete(key, opts...))
0000000000000000000000000000000000000000;;		return r.del, toErr(ctx, err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (kv *kv) Compact(ctx context.Context, rev int64, opts ...CompactOption) (*CompactResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := kv.remote.Compact(ctx, OpCompact(rev, opts...).toRequest())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, toErr(ctx, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return (*CompactResponse)(resp), err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (kv *kv) Txn(ctx context.Context) Txn {
0000000000000000000000000000000000000000;;		return &txn{
0000000000000000000000000000000000000000;;			kv:  kv,
0000000000000000000000000000000000000000;;			ctx: ctx,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (kv *kv) Do(ctx context.Context, op Op) (OpResponse, error) {
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			resp, err := kv.do(ctx, op)
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				return resp, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if isHaltErr(ctx, err) {
0000000000000000000000000000000000000000;;				return resp, toErr(ctx, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// do not retry on modifications
0000000000000000000000000000000000000000;;			if op.isWrite() {
0000000000000000000000000000000000000000;;				return resp, toErr(ctx, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (kv *kv) do(ctx context.Context, op Op) (OpResponse, error) {
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		switch op.t {
0000000000000000000000000000000000000000;;		// TODO: handle other ops
0000000000000000000000000000000000000000;;		case tRange:
0000000000000000000000000000000000000000;;			var resp *pb.RangeResponse
0000000000000000000000000000000000000000;;			resp, err = kv.remote.Range(ctx, op.toRangeRequest(), grpc.FailFast(false))
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				return OpResponse{get: (*GetResponse)(resp)}, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case tPut:
0000000000000000000000000000000000000000;;			var resp *pb.PutResponse
0000000000000000000000000000000000000000;;			r := &pb.PutRequest{Key: op.key, Value: op.val, Lease: int64(op.leaseID), PrevKv: op.prevKV}
0000000000000000000000000000000000000000;;			resp, err = kv.remote.Put(ctx, r)
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				return OpResponse{put: (*PutResponse)(resp)}, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case tDeleteRange:
0000000000000000000000000000000000000000;;			var resp *pb.DeleteRangeResponse
0000000000000000000000000000000000000000;;			r := &pb.DeleteRangeRequest{Key: op.key, RangeEnd: op.end, PrevKv: op.prevKV}
0000000000000000000000000000000000000000;;			resp, err = kv.remote.DeleteRange(ctx, r)
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				return OpResponse{del: (*DeleteResponse)(resp)}, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			panic("Unknown op")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return OpResponse{}, err
0000000000000000000000000000000000000000;;	}
