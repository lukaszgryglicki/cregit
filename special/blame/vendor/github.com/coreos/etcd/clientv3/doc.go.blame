0000000000000000000000000000000000000000;;	// Copyright 2016 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
9b11e90c65f84c704d29a1c6a5867d26fdba23c5;Godeps/_workspace/src/github.com/coreos/etcd/clientv3/doc.go[Godeps/_workspace/src/github.com/coreos/etcd/clientv3/doc.go][vendor/github.com/coreos/etcd/clientv3/doc.go];	
0000000000000000000000000000000000000000;;	// Package clientv3 implements the official Go etcd client for v3.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Create client using `clientv3.New`:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//	cli, err := clientv3.New(clientv3.Config{
0000000000000000000000000000000000000000;;	//		Endpoints:   []string{"localhost:2379", "localhost:22379", "localhost:32379"},
0000000000000000000000000000000000000000;;	//		DialTimeout: 5 * time.Second,
0000000000000000000000000000000000000000;;	//	})
0000000000000000000000000000000000000000;;	//	if err != nil {
0000000000000000000000000000000000000000;;	//		// handle error!
0000000000000000000000000000000000000000;;	//	}
0000000000000000000000000000000000000000;;	//	defer cli.Close()
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Make sure to close the client after using it. If the client is not closed, the
0000000000000000000000000000000000000000;;	// connection will have leaky goroutines.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// To specify client request timeout, pass context.WithTimeout to APIs:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//	ctx, cancel := context.WithTimeout(context.Background(), timeout)
0000000000000000000000000000000000000000;;	//	resp, err := kvc.Put(ctx, "sample_key", "sample_value")
0000000000000000000000000000000000000000;;	//	cancel()
0000000000000000000000000000000000000000;;	//	if err != nil {
0000000000000000000000000000000000000000;;	//	    // handle error!
0000000000000000000000000000000000000000;;	//	}
0000000000000000000000000000000000000000;;	//	// use the response
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The Client has internal state (watchers and leases), so Clients should be reused instead of created as needed.
0000000000000000000000000000000000000000;;	// Clients are safe for concurrent use by multiple goroutines.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// etcd client returns 2 types of errors:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//	1. context error: canceled or deadline exceeded.
0000000000000000000000000000000000000000;;	//	2. gRPC error: see https://github.com/coreos/etcd/blob/master/etcdserver/api/v3rpc/rpctypes/error.go
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Here is the example code to handle client errors:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//	resp, err := kvc.Put(ctx, "", "")
0000000000000000000000000000000000000000;;	//	if err != nil {
0000000000000000000000000000000000000000;;	//		if err == context.Canceled {
0000000000000000000000000000000000000000;;	//			// ctx is canceled by another routine
0000000000000000000000000000000000000000;;	//		} else if err == context.DeadlineExceeded {
0000000000000000000000000000000000000000;;	//			// ctx is attached with a deadline and it exceeded
0000000000000000000000000000000000000000;;	//		} else if verr, ok := err.(*v3rpc.ErrEmptyKey); ok {
0000000000000000000000000000000000000000;;	//			// process (verr.Errors)
0000000000000000000000000000000000000000;;	//		} else {
0000000000000000000000000000000000000000;;	//			// bad cluster endpoints, which are not etcd servers
0000000000000000000000000000000000000000;;	//		}
0000000000000000000000000000000000000000;;	//	}
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	package clientv3
