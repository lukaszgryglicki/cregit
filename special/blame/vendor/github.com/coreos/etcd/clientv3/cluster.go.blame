0000000000000000000000000000000000000000;;	// Copyright 2016 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
9b11e90c65f84c704d29a1c6a5867d26fdba23c5;Godeps/_workspace/src/github.com/coreos/etcd/clientv3/cluster.go[Godeps/_workspace/src/github.com/coreos/etcd/clientv3/cluster.go][vendor/github.com/coreos/etcd/clientv3/cluster.go];	
0000000000000000000000000000000000000000;;	package clientv3
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		pb "github.com/coreos/etcd/etcdserver/etcdserverpb"
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;		"google.golang.org/grpc"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type (
0000000000000000000000000000000000000000;;		Member               pb.Member
0000000000000000000000000000000000000000;;		MemberListResponse   pb.MemberListResponse
0000000000000000000000000000000000000000;;		MemberAddResponse    pb.MemberAddResponse
0000000000000000000000000000000000000000;;		MemberRemoveResponse pb.MemberRemoveResponse
0000000000000000000000000000000000000000;;		MemberUpdateResponse pb.MemberUpdateResponse
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Cluster interface {
0000000000000000000000000000000000000000;;		// MemberList lists the current cluster membership.
0000000000000000000000000000000000000000;;		MemberList(ctx context.Context) (*MemberListResponse, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// MemberAdd adds a new member into the cluster.
0000000000000000000000000000000000000000;;		MemberAdd(ctx context.Context, peerAddrs []string) (*MemberAddResponse, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// MemberRemove removes an existing member from the cluster.
0000000000000000000000000000000000000000;;		MemberRemove(ctx context.Context, id uint64) (*MemberRemoveResponse, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// MemberUpdate updates the peer addresses of the member.
0000000000000000000000000000000000000000;;		MemberUpdate(ctx context.Context, id uint64, peerAddrs []string) (*MemberUpdateResponse, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type cluster struct {
0000000000000000000000000000000000000000;;		remote pb.ClusterClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewCluster(c *Client) Cluster {
0000000000000000000000000000000000000000;;		return &cluster{remote: RetryClusterClient(c)}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *cluster) MemberAdd(ctx context.Context, peerAddrs []string) (*MemberAddResponse, error) {
0000000000000000000000000000000000000000;;		r := &pb.MemberAddRequest{PeerURLs: peerAddrs}
0000000000000000000000000000000000000000;;		resp, err := c.remote.MemberAdd(ctx, r)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			return (*MemberAddResponse)(resp), nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if isHaltErr(ctx, err) {
0000000000000000000000000000000000000000;;			return nil, toErr(ctx, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, toErr(ctx, err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *cluster) MemberRemove(ctx context.Context, id uint64) (*MemberRemoveResponse, error) {
0000000000000000000000000000000000000000;;		r := &pb.MemberRemoveRequest{ID: id}
0000000000000000000000000000000000000000;;		resp, err := c.remote.MemberRemove(ctx, r)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			return (*MemberRemoveResponse)(resp), nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if isHaltErr(ctx, err) {
0000000000000000000000000000000000000000;;			return nil, toErr(ctx, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, toErr(ctx, err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *cluster) MemberUpdate(ctx context.Context, id uint64, peerAddrs []string) (*MemberUpdateResponse, error) {
0000000000000000000000000000000000000000;;		// it is safe to retry on update.
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			r := &pb.MemberUpdateRequest{ID: id, PeerURLs: peerAddrs}
0000000000000000000000000000000000000000;;			resp, err := c.remote.MemberUpdate(ctx, r, grpc.FailFast(false))
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				return (*MemberUpdateResponse)(resp), nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if isHaltErr(ctx, err) {
0000000000000000000000000000000000000000;;				return nil, toErr(ctx, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *cluster) MemberList(ctx context.Context) (*MemberListResponse, error) {
0000000000000000000000000000000000000000;;		// it is safe to retry on list.
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			resp, err := c.remote.MemberList(ctx, &pb.MemberListRequest{}, grpc.FailFast(false))
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				return (*MemberListResponse)(resp), nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if isHaltErr(ctx, err) {
0000000000000000000000000000000000000000;;				return nil, toErr(ctx, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
