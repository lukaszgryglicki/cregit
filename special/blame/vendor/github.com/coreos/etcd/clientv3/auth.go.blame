0000000000000000000000000000000000000000;;	// Copyright 2016 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
9b11e90c65f84c704d29a1c6a5867d26fdba23c5;Godeps/_workspace/src/github.com/coreos/etcd/clientv3/auth.go[Godeps/_workspace/src/github.com/coreos/etcd/clientv3/auth.go][vendor/github.com/coreos/etcd/clientv3/auth.go];	
0000000000000000000000000000000000000000;;	package clientv3
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/auth/authpb"
0000000000000000000000000000000000000000;;		pb "github.com/coreos/etcd/etcdserver/etcdserverpb"
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;		"google.golang.org/grpc"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type (
0000000000000000000000000000000000000000;;		AuthEnableResponse               pb.AuthEnableResponse
0000000000000000000000000000000000000000;;		AuthDisableResponse              pb.AuthDisableResponse
0000000000000000000000000000000000000000;;		AuthenticateResponse             pb.AuthenticateResponse
0000000000000000000000000000000000000000;;		AuthUserAddResponse              pb.AuthUserAddResponse
0000000000000000000000000000000000000000;;		AuthUserDeleteResponse           pb.AuthUserDeleteResponse
0000000000000000000000000000000000000000;;		AuthUserChangePasswordResponse   pb.AuthUserChangePasswordResponse
0000000000000000000000000000000000000000;;		AuthUserGrantRoleResponse        pb.AuthUserGrantRoleResponse
0000000000000000000000000000000000000000;;		AuthUserGetResponse              pb.AuthUserGetResponse
0000000000000000000000000000000000000000;;		AuthUserRevokeRoleResponse       pb.AuthUserRevokeRoleResponse
0000000000000000000000000000000000000000;;		AuthRoleAddResponse              pb.AuthRoleAddResponse
0000000000000000000000000000000000000000;;		AuthRoleGrantPermissionResponse  pb.AuthRoleGrantPermissionResponse
0000000000000000000000000000000000000000;;		AuthRoleGetResponse              pb.AuthRoleGetResponse
0000000000000000000000000000000000000000;;		AuthRoleRevokePermissionResponse pb.AuthRoleRevokePermissionResponse
0000000000000000000000000000000000000000;;		AuthRoleDeleteResponse           pb.AuthRoleDeleteResponse
0000000000000000000000000000000000000000;;		AuthUserListResponse             pb.AuthUserListResponse
0000000000000000000000000000000000000000;;		AuthRoleListResponse             pb.AuthRoleListResponse
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PermissionType authpb.Permission_Type
0000000000000000000000000000000000000000;;		Permission     authpb.Permission
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		PermRead      = authpb.READ
0000000000000000000000000000000000000000;;		PermWrite     = authpb.WRITE
0000000000000000000000000000000000000000;;		PermReadWrite = authpb.READWRITE
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Auth interface {
0000000000000000000000000000000000000000;;		// AuthEnable enables auth of an etcd cluster.
0000000000000000000000000000000000000000;;		AuthEnable(ctx context.Context) (*AuthEnableResponse, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// AuthDisable disables auth of an etcd cluster.
0000000000000000000000000000000000000000;;		AuthDisable(ctx context.Context) (*AuthDisableResponse, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// UserAdd adds a new user to an etcd cluster.
0000000000000000000000000000000000000000;;		UserAdd(ctx context.Context, name string, password string) (*AuthUserAddResponse, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// UserDelete deletes a user from an etcd cluster.
0000000000000000000000000000000000000000;;		UserDelete(ctx context.Context, name string) (*AuthUserDeleteResponse, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// UserChangePassword changes a password of a user.
0000000000000000000000000000000000000000;;		UserChangePassword(ctx context.Context, name string, password string) (*AuthUserChangePasswordResponse, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// UserGrantRole grants a role to a user.
0000000000000000000000000000000000000000;;		UserGrantRole(ctx context.Context, user string, role string) (*AuthUserGrantRoleResponse, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// UserGet gets a detailed information of a user.
0000000000000000000000000000000000000000;;		UserGet(ctx context.Context, name string) (*AuthUserGetResponse, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// UserList gets a list of all users.
0000000000000000000000000000000000000000;;		UserList(ctx context.Context) (*AuthUserListResponse, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// UserRevokeRole revokes a role of a user.
0000000000000000000000000000000000000000;;		UserRevokeRole(ctx context.Context, name string, role string) (*AuthUserRevokeRoleResponse, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RoleAdd adds a new role to an etcd cluster.
0000000000000000000000000000000000000000;;		RoleAdd(ctx context.Context, name string) (*AuthRoleAddResponse, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RoleGrantPermission grants a permission to a role.
0000000000000000000000000000000000000000;;		RoleGrantPermission(ctx context.Context, name string, key, rangeEnd string, permType PermissionType) (*AuthRoleGrantPermissionResponse, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RoleGet gets a detailed information of a role.
0000000000000000000000000000000000000000;;		RoleGet(ctx context.Context, role string) (*AuthRoleGetResponse, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RoleList gets a list of all roles.
0000000000000000000000000000000000000000;;		RoleList(ctx context.Context) (*AuthRoleListResponse, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RoleRevokePermission revokes a permission from a role.
0000000000000000000000000000000000000000;;		RoleRevokePermission(ctx context.Context, role string, key, rangeEnd string) (*AuthRoleRevokePermissionResponse, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RoleDelete deletes a role.
0000000000000000000000000000000000000000;;		RoleDelete(ctx context.Context, role string) (*AuthRoleDeleteResponse, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type auth struct {
0000000000000000000000000000000000000000;;		c *Client
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		conn   *grpc.ClientConn // conn in-use
0000000000000000000000000000000000000000;;		remote pb.AuthClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewAuth(c *Client) Auth {
0000000000000000000000000000000000000000;;		conn := c.ActiveConnection()
0000000000000000000000000000000000000000;;		return &auth{
0000000000000000000000000000000000000000;;			conn:   c.ActiveConnection(),
0000000000000000000000000000000000000000;;			remote: pb.NewAuthClient(conn),
0000000000000000000000000000000000000000;;			c:      c,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (auth *auth) AuthEnable(ctx context.Context) (*AuthEnableResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := auth.remote.AuthEnable(ctx, &pb.AuthEnableRequest{}, grpc.FailFast(false))
0000000000000000000000000000000000000000;;		return (*AuthEnableResponse)(resp), toErr(ctx, err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (auth *auth) AuthDisable(ctx context.Context) (*AuthDisableResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := auth.remote.AuthDisable(ctx, &pb.AuthDisableRequest{}, grpc.FailFast(false))
0000000000000000000000000000000000000000;;		return (*AuthDisableResponse)(resp), toErr(ctx, err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (auth *auth) UserAdd(ctx context.Context, name string, password string) (*AuthUserAddResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := auth.remote.UserAdd(ctx, &pb.AuthUserAddRequest{Name: name, Password: password})
0000000000000000000000000000000000000000;;		return (*AuthUserAddResponse)(resp), toErr(ctx, err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (auth *auth) UserDelete(ctx context.Context, name string) (*AuthUserDeleteResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := auth.remote.UserDelete(ctx, &pb.AuthUserDeleteRequest{Name: name})
0000000000000000000000000000000000000000;;		return (*AuthUserDeleteResponse)(resp), toErr(ctx, err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (auth *auth) UserChangePassword(ctx context.Context, name string, password string) (*AuthUserChangePasswordResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := auth.remote.UserChangePassword(ctx, &pb.AuthUserChangePasswordRequest{Name: name, Password: password})
0000000000000000000000000000000000000000;;		return (*AuthUserChangePasswordResponse)(resp), toErr(ctx, err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (auth *auth) UserGrantRole(ctx context.Context, user string, role string) (*AuthUserGrantRoleResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := auth.remote.UserGrantRole(ctx, &pb.AuthUserGrantRoleRequest{User: user, Role: role})
0000000000000000000000000000000000000000;;		return (*AuthUserGrantRoleResponse)(resp), toErr(ctx, err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (auth *auth) UserGet(ctx context.Context, name string) (*AuthUserGetResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := auth.remote.UserGet(ctx, &pb.AuthUserGetRequest{Name: name}, grpc.FailFast(false))
0000000000000000000000000000000000000000;;		return (*AuthUserGetResponse)(resp), toErr(ctx, err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (auth *auth) UserList(ctx context.Context) (*AuthUserListResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := auth.remote.UserList(ctx, &pb.AuthUserListRequest{}, grpc.FailFast(false))
0000000000000000000000000000000000000000;;		return (*AuthUserListResponse)(resp), toErr(ctx, err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (auth *auth) UserRevokeRole(ctx context.Context, name string, role string) (*AuthUserRevokeRoleResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := auth.remote.UserRevokeRole(ctx, &pb.AuthUserRevokeRoleRequest{Name: name, Role: role})
0000000000000000000000000000000000000000;;		return (*AuthUserRevokeRoleResponse)(resp), toErr(ctx, err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (auth *auth) RoleAdd(ctx context.Context, name string) (*AuthRoleAddResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := auth.remote.RoleAdd(ctx, &pb.AuthRoleAddRequest{Name: name})
0000000000000000000000000000000000000000;;		return (*AuthRoleAddResponse)(resp), toErr(ctx, err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (auth *auth) RoleGrantPermission(ctx context.Context, name string, key, rangeEnd string, permType PermissionType) (*AuthRoleGrantPermissionResponse, error) {
0000000000000000000000000000000000000000;;		perm := &authpb.Permission{
0000000000000000000000000000000000000000;;			Key:      []byte(key),
0000000000000000000000000000000000000000;;			RangeEnd: []byte(rangeEnd),
0000000000000000000000000000000000000000;;			PermType: authpb.Permission_Type(permType),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		resp, err := auth.remote.RoleGrantPermission(ctx, &pb.AuthRoleGrantPermissionRequest{Name: name, Perm: perm})
0000000000000000000000000000000000000000;;		return (*AuthRoleGrantPermissionResponse)(resp), toErr(ctx, err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (auth *auth) RoleGet(ctx context.Context, role string) (*AuthRoleGetResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := auth.remote.RoleGet(ctx, &pb.AuthRoleGetRequest{Role: role}, grpc.FailFast(false))
0000000000000000000000000000000000000000;;		return (*AuthRoleGetResponse)(resp), toErr(ctx, err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (auth *auth) RoleList(ctx context.Context) (*AuthRoleListResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := auth.remote.RoleList(ctx, &pb.AuthRoleListRequest{}, grpc.FailFast(false))
0000000000000000000000000000000000000000;;		return (*AuthRoleListResponse)(resp), toErr(ctx, err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (auth *auth) RoleRevokePermission(ctx context.Context, role string, key, rangeEnd string) (*AuthRoleRevokePermissionResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := auth.remote.RoleRevokePermission(ctx, &pb.AuthRoleRevokePermissionRequest{Role: role, Key: key, RangeEnd: rangeEnd})
0000000000000000000000000000000000000000;;		return (*AuthRoleRevokePermissionResponse)(resp), toErr(ctx, err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (auth *auth) RoleDelete(ctx context.Context, role string) (*AuthRoleDeleteResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := auth.remote.RoleDelete(ctx, &pb.AuthRoleDeleteRequest{Role: role})
0000000000000000000000000000000000000000;;		return (*AuthRoleDeleteResponse)(resp), toErr(ctx, err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func StrToPermissionType(s string) (PermissionType, error) {
0000000000000000000000000000000000000000;;		val, ok := authpb.Permission_Type_value[strings.ToUpper(s)]
0000000000000000000000000000000000000000;;		if ok {
0000000000000000000000000000000000000000;;			return PermissionType(val), nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return PermissionType(-1), fmt.Errorf("invalid permission type: %s", s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type authenticator struct {
0000000000000000000000000000000000000000;;		conn   *grpc.ClientConn // conn in-use
0000000000000000000000000000000000000000;;		remote pb.AuthClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (auth *authenticator) authenticate(ctx context.Context, name string, password string) (*AuthenticateResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := auth.remote.Authenticate(ctx, &pb.AuthenticateRequest{Name: name, Password: password}, grpc.FailFast(false))
0000000000000000000000000000000000000000;;		return (*AuthenticateResponse)(resp), toErr(ctx, err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (auth *authenticator) close() {
0000000000000000000000000000000000000000;;		auth.conn.Close()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newAuthenticator(endpoint string, opts []grpc.DialOption) (*authenticator, error) {
0000000000000000000000000000000000000000;;		conn, err := grpc.Dial(endpoint, opts...)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &authenticator{
0000000000000000000000000000000000000000;;			conn:   conn,
0000000000000000000000000000000000000000;;			remote: pb.NewAuthClient(conn),
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
