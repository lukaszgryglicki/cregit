0000000000000000000000000000000000000000;;	// Copyright 2016 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
9b11e90c65f84c704d29a1c6a5867d26fdba23c5;Godeps/_workspace/src/github.com/coreos/etcd/clientv3/op.go[Godeps/_workspace/src/github.com/coreos/etcd/clientv3/op.go][vendor/github.com/coreos/etcd/clientv3/op.go];	
0000000000000000000000000000000000000000;;	package clientv3
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import pb "github.com/coreos/etcd/etcdserver/etcdserverpb"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type opType int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// A default Op has opType 0, which is invalid.
0000000000000000000000000000000000000000;;		tRange opType = iota + 1
0000000000000000000000000000000000000000;;		tPut
0000000000000000000000000000000000000000;;		tDeleteRange
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		noPrefixEnd = []byte{0}
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Op represents an Operation that kv can execute.
0000000000000000000000000000000000000000;;	type Op struct {
0000000000000000000000000000000000000000;;		t   opType
0000000000000000000000000000000000000000;;		key []byte
0000000000000000000000000000000000000000;;		end []byte
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// for range
0000000000000000000000000000000000000000;;		limit        int64
0000000000000000000000000000000000000000;;		sort         *SortOption
0000000000000000000000000000000000000000;;		serializable bool
0000000000000000000000000000000000000000;;		keysOnly     bool
0000000000000000000000000000000000000000;;		countOnly    bool
0000000000000000000000000000000000000000;;		minModRev    int64
0000000000000000000000000000000000000000;;		maxModRev    int64
0000000000000000000000000000000000000000;;		minCreateRev int64
0000000000000000000000000000000000000000;;		maxCreateRev int64
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// for range, watch
0000000000000000000000000000000000000000;;		rev int64
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// for watch, put, delete
0000000000000000000000000000000000000000;;		prevKV bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// progressNotify is for progress updates.
0000000000000000000000000000000000000000;;		progressNotify bool
0000000000000000000000000000000000000000;;		// createdNotify is for created event
0000000000000000000000000000000000000000;;		createdNotify bool
0000000000000000000000000000000000000000;;		// filters for watchers
0000000000000000000000000000000000000000;;		filterPut    bool
0000000000000000000000000000000000000000;;		filterDelete bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// for put
0000000000000000000000000000000000000000;;		val     []byte
0000000000000000000000000000000000000000;;		leaseID LeaseID
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (op Op) toRangeRequest() *pb.RangeRequest {
0000000000000000000000000000000000000000;;		if op.t != tRange {
0000000000000000000000000000000000000000;;			panic("op.t != tRange")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r := &pb.RangeRequest{
0000000000000000000000000000000000000000;;			Key:               op.key,
0000000000000000000000000000000000000000;;			RangeEnd:          op.end,
0000000000000000000000000000000000000000;;			Limit:             op.limit,
0000000000000000000000000000000000000000;;			Revision:          op.rev,
0000000000000000000000000000000000000000;;			Serializable:      op.serializable,
0000000000000000000000000000000000000000;;			KeysOnly:          op.keysOnly,
0000000000000000000000000000000000000000;;			CountOnly:         op.countOnly,
0000000000000000000000000000000000000000;;			MinModRevision:    op.minModRev,
0000000000000000000000000000000000000000;;			MaxModRevision:    op.maxModRev,
0000000000000000000000000000000000000000;;			MinCreateRevision: op.minCreateRev,
0000000000000000000000000000000000000000;;			MaxCreateRevision: op.maxCreateRev,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if op.sort != nil {
0000000000000000000000000000000000000000;;			r.SortOrder = pb.RangeRequest_SortOrder(op.sort.Order)
0000000000000000000000000000000000000000;;			r.SortTarget = pb.RangeRequest_SortTarget(op.sort.Target)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return r
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (op Op) toRequestOp() *pb.RequestOp {
0000000000000000000000000000000000000000;;		switch op.t {
0000000000000000000000000000000000000000;;		case tRange:
0000000000000000000000000000000000000000;;			return &pb.RequestOp{Request: &pb.RequestOp_RequestRange{RequestRange: op.toRangeRequest()}}
0000000000000000000000000000000000000000;;		case tPut:
0000000000000000000000000000000000000000;;			r := &pb.PutRequest{Key: op.key, Value: op.val, Lease: int64(op.leaseID), PrevKv: op.prevKV}
0000000000000000000000000000000000000000;;			return &pb.RequestOp{Request: &pb.RequestOp_RequestPut{RequestPut: r}}
0000000000000000000000000000000000000000;;		case tDeleteRange:
0000000000000000000000000000000000000000;;			r := &pb.DeleteRangeRequest{Key: op.key, RangeEnd: op.end, PrevKv: op.prevKV}
0000000000000000000000000000000000000000;;			return &pb.RequestOp{Request: &pb.RequestOp_RequestDeleteRange{RequestDeleteRange: r}}
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			panic("Unknown Op")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (op Op) isWrite() bool {
0000000000000000000000000000000000000000;;		return op.t != tRange
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func OpGet(key string, opts ...OpOption) Op {
0000000000000000000000000000000000000000;;		ret := Op{t: tRange, key: []byte(key)}
0000000000000000000000000000000000000000;;		ret.applyOpts(opts)
0000000000000000000000000000000000000000;;		return ret
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func OpDelete(key string, opts ...OpOption) Op {
0000000000000000000000000000000000000000;;		ret := Op{t: tDeleteRange, key: []byte(key)}
0000000000000000000000000000000000000000;;		ret.applyOpts(opts)
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case ret.leaseID != 0:
0000000000000000000000000000000000000000;;			panic("unexpected lease in delete")
0000000000000000000000000000000000000000;;		case ret.limit != 0:
0000000000000000000000000000000000000000;;			panic("unexpected limit in delete")
0000000000000000000000000000000000000000;;		case ret.rev != 0:
0000000000000000000000000000000000000000;;			panic("unexpected revision in delete")
0000000000000000000000000000000000000000;;		case ret.sort != nil:
0000000000000000000000000000000000000000;;			panic("unexpected sort in delete")
0000000000000000000000000000000000000000;;		case ret.serializable:
0000000000000000000000000000000000000000;;			panic("unexpected serializable in delete")
0000000000000000000000000000000000000000;;		case ret.countOnly:
0000000000000000000000000000000000000000;;			panic("unexpected countOnly in delete")
0000000000000000000000000000000000000000;;		case ret.minModRev != 0, ret.maxModRev != 0:
0000000000000000000000000000000000000000;;			panic("unexpected mod revision filter in delete")
0000000000000000000000000000000000000000;;		case ret.minCreateRev != 0, ret.maxCreateRev != 0:
0000000000000000000000000000000000000000;;			panic("unexpected create revision filter in delete")
0000000000000000000000000000000000000000;;		case ret.filterDelete, ret.filterPut:
0000000000000000000000000000000000000000;;			panic("unexpected filter in delete")
0000000000000000000000000000000000000000;;		case ret.createdNotify:
0000000000000000000000000000000000000000;;			panic("unexpected createdNotify in delete")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func OpPut(key, val string, opts ...OpOption) Op {
0000000000000000000000000000000000000000;;		ret := Op{t: tPut, key: []byte(key), val: []byte(val)}
0000000000000000000000000000000000000000;;		ret.applyOpts(opts)
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case ret.end != nil:
0000000000000000000000000000000000000000;;			panic("unexpected range in put")
0000000000000000000000000000000000000000;;		case ret.limit != 0:
0000000000000000000000000000000000000000;;			panic("unexpected limit in put")
0000000000000000000000000000000000000000;;		case ret.rev != 0:
0000000000000000000000000000000000000000;;			panic("unexpected revision in put")
0000000000000000000000000000000000000000;;		case ret.sort != nil:
0000000000000000000000000000000000000000;;			panic("unexpected sort in put")
0000000000000000000000000000000000000000;;		case ret.serializable:
0000000000000000000000000000000000000000;;			panic("unexpected serializable in put")
0000000000000000000000000000000000000000;;		case ret.countOnly:
0000000000000000000000000000000000000000;;			panic("unexpected countOnly in put")
0000000000000000000000000000000000000000;;		case ret.minModRev != 0, ret.maxModRev != 0:
0000000000000000000000000000000000000000;;			panic("unexpected mod revision filter in put")
0000000000000000000000000000000000000000;;		case ret.minCreateRev != 0, ret.maxCreateRev != 0:
0000000000000000000000000000000000000000;;			panic("unexpected create revision filter in put")
0000000000000000000000000000000000000000;;		case ret.filterDelete, ret.filterPut:
0000000000000000000000000000000000000000;;			panic("unexpected filter in put")
0000000000000000000000000000000000000000;;		case ret.createdNotify:
0000000000000000000000000000000000000000;;			panic("unexpected createdNotify in put")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func opWatch(key string, opts ...OpOption) Op {
0000000000000000000000000000000000000000;;		ret := Op{t: tRange, key: []byte(key)}
0000000000000000000000000000000000000000;;		ret.applyOpts(opts)
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case ret.leaseID != 0:
0000000000000000000000000000000000000000;;			panic("unexpected lease in watch")
0000000000000000000000000000000000000000;;		case ret.limit != 0:
0000000000000000000000000000000000000000;;			panic("unexpected limit in watch")
0000000000000000000000000000000000000000;;		case ret.sort != nil:
0000000000000000000000000000000000000000;;			panic("unexpected sort in watch")
0000000000000000000000000000000000000000;;		case ret.serializable:
0000000000000000000000000000000000000000;;			panic("unexpected serializable in watch")
0000000000000000000000000000000000000000;;		case ret.countOnly:
0000000000000000000000000000000000000000;;			panic("unexpected countOnly in watch")
0000000000000000000000000000000000000000;;		case ret.minModRev != 0, ret.maxModRev != 0:
0000000000000000000000000000000000000000;;			panic("unexpected mod revision filter in watch")
0000000000000000000000000000000000000000;;		case ret.minCreateRev != 0, ret.maxCreateRev != 0:
0000000000000000000000000000000000000000;;			panic("unexpected create revision filter in watch")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (op *Op) applyOpts(opts []OpOption) {
0000000000000000000000000000000000000000;;		for _, opt := range opts {
0000000000000000000000000000000000000000;;			opt(op)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OpOption configures Operations like Get, Put, Delete.
0000000000000000000000000000000000000000;;	type OpOption func(*Op)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithLease attaches a lease ID to a key in 'Put' request.
0000000000000000000000000000000000000000;;	func WithLease(leaseID LeaseID) OpOption {
0000000000000000000000000000000000000000;;		return func(op *Op) { op.leaseID = leaseID }
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithLimit limits the number of results to return from 'Get' request.
0000000000000000000000000000000000000000;;	func WithLimit(n int64) OpOption { return func(op *Op) { op.limit = n } }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithRev specifies the store revision for 'Get' request.
0000000000000000000000000000000000000000;;	// Or the start revision of 'Watch' request.
0000000000000000000000000000000000000000;;	func WithRev(rev int64) OpOption { return func(op *Op) { op.rev = rev } }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithSort specifies the ordering in 'Get' request. It requires
0000000000000000000000000000000000000000;;	// 'WithRange' and/or 'WithPrefix' to be specified too.
0000000000000000000000000000000000000000;;	// 'target' specifies the target to sort by: key, version, revisions, value.
0000000000000000000000000000000000000000;;	// 'order' can be either 'SortNone', 'SortAscend', 'SortDescend'.
0000000000000000000000000000000000000000;;	func WithSort(target SortTarget, order SortOrder) OpOption {
0000000000000000000000000000000000000000;;		return func(op *Op) {
0000000000000000000000000000000000000000;;			if target == SortByKey && order == SortAscend {
0000000000000000000000000000000000000000;;				// If order != SortNone, server fetches the entire key-space,
0000000000000000000000000000000000000000;;				// and then applies the sort and limit, if provided.
0000000000000000000000000000000000000000;;				// Since current mvcc.Range implementation returns results
0000000000000000000000000000000000000000;;				// sorted by keys in lexicographically ascending order,
0000000000000000000000000000000000000000;;				// client should ignore SortOrder if the target is SortByKey.
0000000000000000000000000000000000000000;;				order = SortNone
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			op.sort = &SortOption{target, order}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetPrefixRangeEnd gets the range end of the prefix.
0000000000000000000000000000000000000000;;	// 'Get(foo, WithPrefix())' is equal to 'Get(foo, WithRange(GetPrefixRangeEnd(foo))'.
0000000000000000000000000000000000000000;;	func GetPrefixRangeEnd(prefix string) string {
0000000000000000000000000000000000000000;;		return string(getPrefix([]byte(prefix)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getPrefix(key []byte) []byte {
0000000000000000000000000000000000000000;;		end := make([]byte, len(key))
0000000000000000000000000000000000000000;;		copy(end, key)
0000000000000000000000000000000000000000;;		for i := len(end) - 1; i >= 0; i-- {
0000000000000000000000000000000000000000;;			if end[i] < 0xff {
0000000000000000000000000000000000000000;;				end[i] = end[i] + 1
0000000000000000000000000000000000000000;;				end = end[:i+1]
0000000000000000000000000000000000000000;;				return end
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// next prefix does not exist (e.g., 0xffff);
0000000000000000000000000000000000000000;;		// default to WithFromKey policy
0000000000000000000000000000000000000000;;		return noPrefixEnd
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithPrefix enables 'Get', 'Delete', or 'Watch' requests to operate
0000000000000000000000000000000000000000;;	// on the keys with matching prefix. For example, 'Get(foo, WithPrefix())'
0000000000000000000000000000000000000000;;	// can return 'foo1', 'foo2', and so on.
0000000000000000000000000000000000000000;;	func WithPrefix() OpOption {
0000000000000000000000000000000000000000;;		return func(op *Op) {
0000000000000000000000000000000000000000;;			op.end = getPrefix(op.key)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithRange specifies the range of 'Get', 'Delete', 'Watch' requests.
0000000000000000000000000000000000000000;;	// For example, 'Get' requests with 'WithRange(end)' returns
0000000000000000000000000000000000000000;;	// the keys in the range [key, end).
0000000000000000000000000000000000000000;;	// endKey must be lexicographically greater than start key.
0000000000000000000000000000000000000000;;	func WithRange(endKey string) OpOption {
0000000000000000000000000000000000000000;;		return func(op *Op) { op.end = []byte(endKey) }
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithFromKey specifies the range of 'Get', 'Delete', 'Watch' requests
0000000000000000000000000000000000000000;;	// to be equal or greater than the key in the argument.
0000000000000000000000000000000000000000;;	func WithFromKey() OpOption { return WithRange("\x00") }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithSerializable makes 'Get' request serializable. By default,
0000000000000000000000000000000000000000;;	// it's linearizable. Serializable requests are better for lower latency
0000000000000000000000000000000000000000;;	// requirement.
0000000000000000000000000000000000000000;;	func WithSerializable() OpOption {
0000000000000000000000000000000000000000;;		return func(op *Op) { op.serializable = true }
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithKeysOnly makes the 'Get' request return only the keys and the corresponding
0000000000000000000000000000000000000000;;	// values will be omitted.
0000000000000000000000000000000000000000;;	func WithKeysOnly() OpOption {
0000000000000000000000000000000000000000;;		return func(op *Op) { op.keysOnly = true }
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithCountOnly makes the 'Get' request return only the count of keys.
0000000000000000000000000000000000000000;;	func WithCountOnly() OpOption {
0000000000000000000000000000000000000000;;		return func(op *Op) { op.countOnly = true }
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithMinModRev filters out keys for Get with modification revisions less than the given revision.
0000000000000000000000000000000000000000;;	func WithMinModRev(rev int64) OpOption { return func(op *Op) { op.minModRev = rev } }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithMaxModRev filters out keys for Get with modification revisions greater than the given revision.
0000000000000000000000000000000000000000;;	func WithMaxModRev(rev int64) OpOption { return func(op *Op) { op.maxModRev = rev } }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithMinCreateRev filters out keys for Get with creation revisions less than the given revision.
0000000000000000000000000000000000000000;;	func WithMinCreateRev(rev int64) OpOption { return func(op *Op) { op.minCreateRev = rev } }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithMaxCreateRev filters out keys for Get with creation revisions greater than the given revision.
0000000000000000000000000000000000000000;;	func WithMaxCreateRev(rev int64) OpOption { return func(op *Op) { op.maxCreateRev = rev } }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithFirstCreate gets the key with the oldest creation revision in the request range.
0000000000000000000000000000000000000000;;	func WithFirstCreate() []OpOption { return withTop(SortByCreateRevision, SortAscend) }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithLastCreate gets the key with the latest creation revision in the request range.
0000000000000000000000000000000000000000;;	func WithLastCreate() []OpOption { return withTop(SortByCreateRevision, SortDescend) }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithFirstKey gets the lexically first key in the request range.
0000000000000000000000000000000000000000;;	func WithFirstKey() []OpOption { return withTop(SortByKey, SortAscend) }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithLastKey gets the lexically last key in the request range.
0000000000000000000000000000000000000000;;	func WithLastKey() []OpOption { return withTop(SortByKey, SortDescend) }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithFirstRev gets the key with the oldest modification revision in the request range.
0000000000000000000000000000000000000000;;	func WithFirstRev() []OpOption { return withTop(SortByModRevision, SortAscend) }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithLastRev gets the key with the latest modification revision in the request range.
0000000000000000000000000000000000000000;;	func WithLastRev() []OpOption { return withTop(SortByModRevision, SortDescend) }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// withTop gets the first key over the get's prefix given a sort order
0000000000000000000000000000000000000000;;	func withTop(target SortTarget, order SortOrder) []OpOption {
0000000000000000000000000000000000000000;;		return []OpOption{WithPrefix(), WithSort(target, order), WithLimit(1)}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithProgressNotify makes watch server send periodic progress updates
0000000000000000000000000000000000000000;;	// every 10 minutes when there is no incoming events.
0000000000000000000000000000000000000000;;	// Progress updates have zero events in WatchResponse.
0000000000000000000000000000000000000000;;	func WithProgressNotify() OpOption {
0000000000000000000000000000000000000000;;		return func(op *Op) {
0000000000000000000000000000000000000000;;			op.progressNotify = true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithCreatedNotify makes watch server sends the created event.
0000000000000000000000000000000000000000;;	func WithCreatedNotify() OpOption {
0000000000000000000000000000000000000000;;		return func(op *Op) {
0000000000000000000000000000000000000000;;			op.createdNotify = true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithFilterPut discards PUT events from the watcher.
0000000000000000000000000000000000000000;;	func WithFilterPut() OpOption {
0000000000000000000000000000000000000000;;		return func(op *Op) { op.filterPut = true }
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithFilterDelete discards DELETE events from the watcher.
0000000000000000000000000000000000000000;;	func WithFilterDelete() OpOption {
0000000000000000000000000000000000000000;;		return func(op *Op) { op.filterDelete = true }
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithPrevKV gets the previous key-value pair before the event happens. If the previous KV is already compacted,
0000000000000000000000000000000000000000;;	// nothing will be returned.
0000000000000000000000000000000000000000;;	func WithPrevKV() OpOption {
0000000000000000000000000000000000000000;;		return func(op *Op) {
0000000000000000000000000000000000000000;;			op.prevKV = true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LeaseOp represents an Operation that lease can execute.
0000000000000000000000000000000000000000;;	type LeaseOp struct {
0000000000000000000000000000000000000000;;		id LeaseID
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// for TimeToLive
0000000000000000000000000000000000000000;;		attachedKeys bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LeaseOption configures lease operations.
0000000000000000000000000000000000000000;;	type LeaseOption func(*LeaseOp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (op *LeaseOp) applyOpts(opts []LeaseOption) {
0000000000000000000000000000000000000000;;		for _, opt := range opts {
0000000000000000000000000000000000000000;;			opt(op)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithAttachedKeys requests lease timetolive API to return
0000000000000000000000000000000000000000;;	// attached keys of given lease ID.
0000000000000000000000000000000000000000;;	func WithAttachedKeys() LeaseOption {
0000000000000000000000000000000000000000;;		return func(op *LeaseOp) { op.attachedKeys = true }
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func toLeaseTimeToLiveRequest(id LeaseID, opts ...LeaseOption) *pb.LeaseTimeToLiveRequest {
0000000000000000000000000000000000000000;;		ret := &LeaseOp{id: id}
0000000000000000000000000000000000000000;;		ret.applyOpts(opts)
0000000000000000000000000000000000000000;;		return &pb.LeaseTimeToLiveRequest{ID: int64(id), Keys: ret.attachedKeys}
0000000000000000000000000000000000000000;;	}
