0000000000000000000000000000000000000000;;	// Copyright 2016 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
e8c92b7854d80fb31f19faea842fddedd9cefade;;	
0000000000000000000000000000000000000000;;	package clientv3
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/etcdserver/api/v3rpc/rpctypes"
0000000000000000000000000000000000000000;;		pb "github.com/coreos/etcd/etcdserver/etcdserverpb"
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;		"google.golang.org/grpc"
0000000000000000000000000000000000000000;;		"google.golang.org/grpc/codes"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type rpcFunc func(ctx context.Context) error
0000000000000000000000000000000000000000;;	type retryRpcFunc func(context.Context, rpcFunc) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *Client) newRetryWrapper() retryRpcFunc {
0000000000000000000000000000000000000000;;		return func(rpcCtx context.Context, f rpcFunc) error {
0000000000000000000000000000000000000000;;			for {
0000000000000000000000000000000000000000;;				err := f(rpcCtx)
0000000000000000000000000000000000000000;;				if err == nil {
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				eErr := rpctypes.Error(err)
0000000000000000000000000000000000000000;;				// always stop retry on etcd errors
0000000000000000000000000000000000000000;;				if _, ok := eErr.(rpctypes.EtcdError); ok {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				// only retry if unavailable
0000000000000000000000000000000000000000;;				if grpc.Code(err) != codes.Unavailable {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				select {
0000000000000000000000000000000000000000;;				case <-c.balancer.ConnectNotify():
0000000000000000000000000000000000000000;;				case <-rpcCtx.Done():
0000000000000000000000000000000000000000;;					return rpcCtx.Err()
0000000000000000000000000000000000000000;;				case <-c.ctx.Done():
0000000000000000000000000000000000000000;;					return c.ctx.Err()
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *Client) newAuthRetryWrapper() retryRpcFunc {
0000000000000000000000000000000000000000;;		return func(rpcCtx context.Context, f rpcFunc) error {
0000000000000000000000000000000000000000;;			for {
0000000000000000000000000000000000000000;;				err := f(rpcCtx)
0000000000000000000000000000000000000000;;				if err == nil {
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				// always stop retry on etcd errors other than invalid auth token
0000000000000000000000000000000000000000;;				if rpctypes.Error(err) == rpctypes.ErrInvalidAuthToken {
0000000000000000000000000000000000000000;;					gterr := c.getToken(rpcCtx)
0000000000000000000000000000000000000000;;					if gterr != nil {
0000000000000000000000000000000000000000;;						return err // return the original error for simplicity
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RetryKVClient implements a KVClient that uses the client's FailFast retry policy.
0000000000000000000000000000000000000000;;	func RetryKVClient(c *Client) pb.KVClient {
0000000000000000000000000000000000000000;;		retryWrite := &retryWriteKVClient{pb.NewKVClient(c.conn), c.retryWrapper}
0000000000000000000000000000000000000000;;		return &retryKVClient{&retryWriteKVClient{retryWrite, c.retryAuthWrapper}}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type retryKVClient struct {
0000000000000000000000000000000000000000;;		*retryWriteKVClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rkv *retryKVClient) Range(ctx context.Context, in *pb.RangeRequest, opts ...grpc.CallOption) (resp *pb.RangeResponse, err error) {
0000000000000000000000000000000000000000;;		err = rkv.retryf(ctx, func(rctx context.Context) error {
0000000000000000000000000000000000000000;;			resp, err = rkv.retryWriteKVClient.Range(rctx, in, opts...)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type retryWriteKVClient struct {
0000000000000000000000000000000000000000;;		pb.KVClient
0000000000000000000000000000000000000000;;		retryf retryRpcFunc
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rkv *retryWriteKVClient) Put(ctx context.Context, in *pb.PutRequest, opts ...grpc.CallOption) (resp *pb.PutResponse, err error) {
0000000000000000000000000000000000000000;;		err = rkv.retryf(ctx, func(rctx context.Context) error {
0000000000000000000000000000000000000000;;			resp, err = rkv.KVClient.Put(rctx, in, opts...)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rkv *retryWriteKVClient) DeleteRange(ctx context.Context, in *pb.DeleteRangeRequest, opts ...grpc.CallOption) (resp *pb.DeleteRangeResponse, err error) {
0000000000000000000000000000000000000000;;		err = rkv.retryf(ctx, func(rctx context.Context) error {
0000000000000000000000000000000000000000;;			resp, err = rkv.KVClient.DeleteRange(rctx, in, opts...)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rkv *retryWriteKVClient) Txn(ctx context.Context, in *pb.TxnRequest, opts ...grpc.CallOption) (resp *pb.TxnResponse, err error) {
0000000000000000000000000000000000000000;;		err = rkv.retryf(ctx, func(rctx context.Context) error {
0000000000000000000000000000000000000000;;			resp, err = rkv.KVClient.Txn(rctx, in, opts...)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rkv *retryWriteKVClient) Compact(ctx context.Context, in *pb.CompactionRequest, opts ...grpc.CallOption) (resp *pb.CompactionResponse, err error) {
0000000000000000000000000000000000000000;;		err = rkv.retryf(ctx, func(rctx context.Context) error {
0000000000000000000000000000000000000000;;			resp, err = rkv.KVClient.Compact(rctx, in, opts...)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type retryLeaseClient struct {
0000000000000000000000000000000000000000;;		pb.LeaseClient
0000000000000000000000000000000000000000;;		retryf retryRpcFunc
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RetryLeaseClient implements a LeaseClient that uses the client's FailFast retry policy.
0000000000000000000000000000000000000000;;	func RetryLeaseClient(c *Client) pb.LeaseClient {
0000000000000000000000000000000000000000;;		retry := &retryLeaseClient{pb.NewLeaseClient(c.conn), c.retryWrapper}
0000000000000000000000000000000000000000;;		return &retryLeaseClient{retry, c.retryAuthWrapper}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rlc *retryLeaseClient) LeaseGrant(ctx context.Context, in *pb.LeaseGrantRequest, opts ...grpc.CallOption) (resp *pb.LeaseGrantResponse, err error) {
0000000000000000000000000000000000000000;;		err = rlc.retryf(ctx, func(rctx context.Context) error {
0000000000000000000000000000000000000000;;			resp, err = rlc.LeaseClient.LeaseGrant(rctx, in, opts...)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rlc *retryLeaseClient) LeaseRevoke(ctx context.Context, in *pb.LeaseRevokeRequest, opts ...grpc.CallOption) (resp *pb.LeaseRevokeResponse, err error) {
0000000000000000000000000000000000000000;;		err = rlc.retryf(ctx, func(rctx context.Context) error {
0000000000000000000000000000000000000000;;			resp, err = rlc.LeaseClient.LeaseRevoke(rctx, in, opts...)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type retryClusterClient struct {
0000000000000000000000000000000000000000;;		pb.ClusterClient
0000000000000000000000000000000000000000;;		retryf retryRpcFunc
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RetryClusterClient implements a ClusterClient that uses the client's FailFast retry policy.
0000000000000000000000000000000000000000;;	func RetryClusterClient(c *Client) pb.ClusterClient {
0000000000000000000000000000000000000000;;		return &retryClusterClient{pb.NewClusterClient(c.conn), c.retryWrapper}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rcc *retryClusterClient) MemberAdd(ctx context.Context, in *pb.MemberAddRequest, opts ...grpc.CallOption) (resp *pb.MemberAddResponse, err error) {
0000000000000000000000000000000000000000;;		err = rcc.retryf(ctx, func(rctx context.Context) error {
0000000000000000000000000000000000000000;;			resp, err = rcc.ClusterClient.MemberAdd(rctx, in, opts...)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rcc *retryClusterClient) MemberRemove(ctx context.Context, in *pb.MemberRemoveRequest, opts ...grpc.CallOption) (resp *pb.MemberRemoveResponse, err error) {
0000000000000000000000000000000000000000;;		err = rcc.retryf(ctx, func(rctx context.Context) error {
0000000000000000000000000000000000000000;;			resp, err = rcc.ClusterClient.MemberRemove(rctx, in, opts...)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rcc *retryClusterClient) MemberUpdate(ctx context.Context, in *pb.MemberUpdateRequest, opts ...grpc.CallOption) (resp *pb.MemberUpdateResponse, err error) {
0000000000000000000000000000000000000000;;		err = rcc.retryf(ctx, func(rctx context.Context) error {
0000000000000000000000000000000000000000;;			resp, err = rcc.ClusterClient.MemberUpdate(rctx, in, opts...)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type retryAuthClient struct {
0000000000000000000000000000000000000000;;		pb.AuthClient
0000000000000000000000000000000000000000;;		retryf retryRpcFunc
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RetryAuthClient implements a AuthClient that uses the client's FailFast retry policy.
0000000000000000000000000000000000000000;;	func RetryAuthClient(c *Client) pb.AuthClient {
0000000000000000000000000000000000000000;;		return &retryAuthClient{pb.NewAuthClient(c.conn), c.retryWrapper}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rac *retryAuthClient) AuthEnable(ctx context.Context, in *pb.AuthEnableRequest, opts ...grpc.CallOption) (resp *pb.AuthEnableResponse, err error) {
0000000000000000000000000000000000000000;;		err = rac.retryf(ctx, func(rctx context.Context) error {
0000000000000000000000000000000000000000;;			resp, err = rac.AuthClient.AuthEnable(rctx, in, opts...)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rac *retryAuthClient) AuthDisable(ctx context.Context, in *pb.AuthDisableRequest, opts ...grpc.CallOption) (resp *pb.AuthDisableResponse, err error) {
0000000000000000000000000000000000000000;;		err = rac.retryf(ctx, func(rctx context.Context) error {
0000000000000000000000000000000000000000;;			resp, err = rac.AuthClient.AuthDisable(rctx, in, opts...)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rac *retryAuthClient) UserAdd(ctx context.Context, in *pb.AuthUserAddRequest, opts ...grpc.CallOption) (resp *pb.AuthUserAddResponse, err error) {
0000000000000000000000000000000000000000;;		err = rac.retryf(ctx, func(rctx context.Context) error {
0000000000000000000000000000000000000000;;			resp, err = rac.AuthClient.UserAdd(rctx, in, opts...)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rac *retryAuthClient) UserDelete(ctx context.Context, in *pb.AuthUserDeleteRequest, opts ...grpc.CallOption) (resp *pb.AuthUserDeleteResponse, err error) {
0000000000000000000000000000000000000000;;		err = rac.retryf(ctx, func(rctx context.Context) error {
0000000000000000000000000000000000000000;;			resp, err = rac.AuthClient.UserDelete(rctx, in, opts...)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rac *retryAuthClient) UserChangePassword(ctx context.Context, in *pb.AuthUserChangePasswordRequest, opts ...grpc.CallOption) (resp *pb.AuthUserChangePasswordResponse, err error) {
0000000000000000000000000000000000000000;;		err = rac.retryf(ctx, func(rctx context.Context) error {
0000000000000000000000000000000000000000;;			resp, err = rac.AuthClient.UserChangePassword(rctx, in, opts...)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rac *retryAuthClient) UserGrantRole(ctx context.Context, in *pb.AuthUserGrantRoleRequest, opts ...grpc.CallOption) (resp *pb.AuthUserGrantRoleResponse, err error) {
0000000000000000000000000000000000000000;;		err = rac.retryf(ctx, func(rctx context.Context) error {
0000000000000000000000000000000000000000;;			resp, err = rac.AuthClient.UserGrantRole(rctx, in, opts...)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rac *retryAuthClient) UserRevokeRole(ctx context.Context, in *pb.AuthUserRevokeRoleRequest, opts ...grpc.CallOption) (resp *pb.AuthUserRevokeRoleResponse, err error) {
0000000000000000000000000000000000000000;;		err = rac.retryf(ctx, func(rctx context.Context) error {
0000000000000000000000000000000000000000;;			resp, err = rac.AuthClient.UserRevokeRole(rctx, in, opts...)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rac *retryAuthClient) RoleAdd(ctx context.Context, in *pb.AuthRoleAddRequest, opts ...grpc.CallOption) (resp *pb.AuthRoleAddResponse, err error) {
0000000000000000000000000000000000000000;;		err = rac.retryf(ctx, func(rctx context.Context) error {
0000000000000000000000000000000000000000;;			resp, err = rac.AuthClient.RoleAdd(rctx, in, opts...)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rac *retryAuthClient) RoleDelete(ctx context.Context, in *pb.AuthRoleDeleteRequest, opts ...grpc.CallOption) (resp *pb.AuthRoleDeleteResponse, err error) {
0000000000000000000000000000000000000000;;		err = rac.retryf(ctx, func(rctx context.Context) error {
0000000000000000000000000000000000000000;;			resp, err = rac.AuthClient.RoleDelete(rctx, in, opts...)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rac *retryAuthClient) RoleGrantPermission(ctx context.Context, in *pb.AuthRoleGrantPermissionRequest, opts ...grpc.CallOption) (resp *pb.AuthRoleGrantPermissionResponse, err error) {
0000000000000000000000000000000000000000;;		err = rac.retryf(ctx, func(rctx context.Context) error {
0000000000000000000000000000000000000000;;			resp, err = rac.AuthClient.RoleGrantPermission(rctx, in, opts...)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rac *retryAuthClient) RoleRevokePermission(ctx context.Context, in *pb.AuthRoleRevokePermissionRequest, opts ...grpc.CallOption) (resp *pb.AuthRoleRevokePermissionResponse, err error) {
0000000000000000000000000000000000000000;;		err = rac.retryf(ctx, func(rctx context.Context) error {
0000000000000000000000000000000000000000;;			resp, err = rac.AuthClient.RoleRevokePermission(rctx, in, opts...)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
