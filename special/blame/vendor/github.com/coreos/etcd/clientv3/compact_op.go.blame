0000000000000000000000000000000000000000;;	// Copyright 2016 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
885071b7d07344044421ffe2fd90c1bcd1ee9812;;	
0000000000000000000000000000000000000000;;	package clientv3
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		pb "github.com/coreos/etcd/etcdserver/etcdserverpb"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CompactOp represents a compact operation.
0000000000000000000000000000000000000000;;	type CompactOp struct {
0000000000000000000000000000000000000000;;		revision int64
0000000000000000000000000000000000000000;;		physical bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CompactOption configures compact operation.
0000000000000000000000000000000000000000;;	type CompactOption func(*CompactOp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (op *CompactOp) applyCompactOpts(opts []CompactOption) {
0000000000000000000000000000000000000000;;		for _, opt := range opts {
0000000000000000000000000000000000000000;;			opt(op)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OpCompact wraps slice CompactOption to create a CompactOp.
0000000000000000000000000000000000000000;;	func OpCompact(rev int64, opts ...CompactOption) CompactOp {
0000000000000000000000000000000000000000;;		ret := CompactOp{revision: rev}
0000000000000000000000000000000000000000;;		ret.applyCompactOpts(opts)
0000000000000000000000000000000000000000;;		return ret
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (op CompactOp) toRequest() *pb.CompactionRequest {
0000000000000000000000000000000000000000;;		return &pb.CompactionRequest{Revision: op.revision, Physical: op.physical}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithCompactPhysical makes compact RPC call wait until
0000000000000000000000000000000000000000;;	// the compaction is physically applied to the local database
0000000000000000000000000000000000000000;;	// such that compacted entries are totally removed from the
0000000000000000000000000000000000000000;;	// backend database.
0000000000000000000000000000000000000000;;	func WithCompactPhysical() CompactOption {
0000000000000000000000000000000000000000;;		return func(op *CompactOp) { op.physical = true }
0000000000000000000000000000000000000000;;	}
