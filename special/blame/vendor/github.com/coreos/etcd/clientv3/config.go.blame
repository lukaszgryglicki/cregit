0000000000000000000000000000000000000000;;	// Copyright 2016 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
1861d099d10ddfa47b9f2b8b925fc11bd0827dac;Godeps/_workspace/src/github.com/coreos/etcd/clientv3/config.go[Godeps/_workspace/src/github.com/coreos/etcd/clientv3/config.go][vendor/github.com/coreos/etcd/clientv3/config.go];	
0000000000000000000000000000000000000000;;	package clientv3
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"crypto/tls"
0000000000000000000000000000000000000000;;		"crypto/x509"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/pkg/tlsutil"
0000000000000000000000000000000000000000;;		"github.com/ghodss/yaml"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Config struct {
0000000000000000000000000000000000000000;;		// Endpoints is a list of URLs
0000000000000000000000000000000000000000;;		Endpoints []string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// AutoSyncInterval is the interval to update endpoints with its latest members.
0000000000000000000000000000000000000000;;		// 0 disables auto-sync. By default auto-sync is disabled.
0000000000000000000000000000000000000000;;		AutoSyncInterval time.Duration
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DialTimeout is the timeout for failing to establish a connection.
0000000000000000000000000000000000000000;;		DialTimeout time.Duration
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TLS holds the client secure credentials, if any.
0000000000000000000000000000000000000000;;		TLS *tls.Config
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Username is a username for authentication
0000000000000000000000000000000000000000;;		Username string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Password is a password for authentication
0000000000000000000000000000000000000000;;		Password string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type yamlConfig struct {
0000000000000000000000000000000000000000;;		Endpoints             []string      `json:"endpoints"`
0000000000000000000000000000000000000000;;		AutoSyncInterval      time.Duration `json:"auto-sync-interval"`
0000000000000000000000000000000000000000;;		DialTimeout           time.Duration `json:"dial-timeout"`
0000000000000000000000000000000000000000;;		InsecureTransport     bool          `json:"insecure-transport"`
0000000000000000000000000000000000000000;;		InsecureSkipTLSVerify bool          `json:"insecure-skip-tls-verify"`
0000000000000000000000000000000000000000;;		Certfile              string        `json:"cert-file"`
0000000000000000000000000000000000000000;;		Keyfile               string        `json:"key-file"`
0000000000000000000000000000000000000000;;		CAfile                string        `json:"ca-file"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func configFromFile(fpath string) (*Config, error) {
0000000000000000000000000000000000000000;;		b, err := ioutil.ReadFile(fpath)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		yc := &yamlConfig{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = yaml.Unmarshal(b, yc)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cfg := &Config{
0000000000000000000000000000000000000000;;			Endpoints:        yc.Endpoints,
0000000000000000000000000000000000000000;;			AutoSyncInterval: yc.AutoSyncInterval,
0000000000000000000000000000000000000000;;			DialTimeout:      yc.DialTimeout,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if yc.InsecureTransport {
0000000000000000000000000000000000000000;;			cfg.TLS = nil
0000000000000000000000000000000000000000;;			return cfg, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			cert *tls.Certificate
0000000000000000000000000000000000000000;;			cp   *x509.CertPool
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if yc.Certfile != "" && yc.Keyfile != "" {
0000000000000000000000000000000000000000;;			cert, err = tlsutil.NewCert(yc.Certfile, yc.Keyfile, nil)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if yc.CAfile != "" {
0000000000000000000000000000000000000000;;			cp, err = tlsutil.NewCertPool([]string{yc.CAfile})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tlscfg := &tls.Config{
0000000000000000000000000000000000000000;;			MinVersion:         tls.VersionTLS10,
0000000000000000000000000000000000000000;;			InsecureSkipVerify: yc.InsecureSkipTLSVerify,
0000000000000000000000000000000000000000;;			RootCAs:            cp,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if cert != nil {
0000000000000000000000000000000000000000;;			tlscfg.Certificates = []tls.Certificate{*cert}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cfg.TLS = tlscfg
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return cfg, nil
0000000000000000000000000000000000000000;;	}
