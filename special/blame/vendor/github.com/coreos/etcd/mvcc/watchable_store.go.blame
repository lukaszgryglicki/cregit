0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
a405384ce9c7fbbffc6a5a8bb2203d32e3b85976;Godeps/_workspace/src/github.com/coreos/etcd/storage/watchable_store.go[Godeps/_workspace/src/github.com/coreos/etcd/storage/watchable_store.go][vendor/github.com/coreos/etcd/mvcc/watchable_store.go];	
0000000000000000000000000000000000000000;;	package mvcc
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/lease"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/mvcc/backend"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/mvcc/mvccpb"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// chanBufLen is the length of the buffered chan
0000000000000000000000000000000000000000;;		// for sending out watched events.
0000000000000000000000000000000000000000;;		// TODO: find a good buf value. 1024 is just a random one that
0000000000000000000000000000000000000000;;		// seems to be reasonable.
0000000000000000000000000000000000000000;;		chanBufLen = 1024
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// maxWatchersPerSync is the number of watchers to sync in a single batch
0000000000000000000000000000000000000000;;		maxWatchersPerSync = 512
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type watchable interface {
0000000000000000000000000000000000000000;;		watch(key, end []byte, startRev int64, id WatchID, ch chan<- WatchResponse, fcs ...FilterFunc) (*watcher, cancelFunc)
0000000000000000000000000000000000000000;;		progress(w *watcher)
0000000000000000000000000000000000000000;;		rev() int64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type watchableStore struct {
0000000000000000000000000000000000000000;;		mu sync.Mutex
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		*store
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// victims are watcher batches that were blocked on the watch channel
0000000000000000000000000000000000000000;;		victims []watcherBatch
0000000000000000000000000000000000000000;;		victimc chan struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// contains all unsynced watchers that needs to sync with events that have happened
0000000000000000000000000000000000000000;;		unsynced watcherGroup
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// contains all synced watchers that are in sync with the progress of the store.
0000000000000000000000000000000000000000;;		// The key of the map is the key that the watcher watches on.
0000000000000000000000000000000000000000;;		synced watcherGroup
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		stopc chan struct{}
0000000000000000000000000000000000000000;;		wg    sync.WaitGroup
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// cancelFunc updates unsynced and synced maps when running
0000000000000000000000000000000000000000;;	// cancel operations.
0000000000000000000000000000000000000000;;	type cancelFunc func()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func New(b backend.Backend, le lease.Lessor, ig ConsistentIndexGetter) ConsistentWatchableKV {
0000000000000000000000000000000000000000;;		return newWatchableStore(b, le, ig)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newWatchableStore(b backend.Backend, le lease.Lessor, ig ConsistentIndexGetter) *watchableStore {
0000000000000000000000000000000000000000;;		s := &watchableStore{
0000000000000000000000000000000000000000;;			store:    NewStore(b, le, ig),
0000000000000000000000000000000000000000;;			victimc:  make(chan struct{}, 1),
0000000000000000000000000000000000000000;;			unsynced: newWatcherGroup(),
0000000000000000000000000000000000000000;;			synced:   newWatcherGroup(),
0000000000000000000000000000000000000000;;			stopc:    make(chan struct{}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.le != nil {
0000000000000000000000000000000000000000;;			// use this store as the deleter so revokes trigger watch events
0000000000000000000000000000000000000000;;			s.le.SetRangeDeleter(s)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s.wg.Add(2)
0000000000000000000000000000000000000000;;		go s.syncWatchersLoop()
0000000000000000000000000000000000000000;;		go s.syncVictimsLoop()
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *watchableStore) Put(key, value []byte, lease lease.LeaseID) (rev int64) {
0000000000000000000000000000000000000000;;		s.mu.Lock()
0000000000000000000000000000000000000000;;		defer s.mu.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		rev = s.store.Put(key, value, lease)
0000000000000000000000000000000000000000;;		changes := s.store.getChanges()
0000000000000000000000000000000000000000;;		if len(changes) != 1 {
0000000000000000000000000000000000000000;;			plog.Panicf("unexpected len(changes) != 1 after put")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ev := mvccpb.Event{
0000000000000000000000000000000000000000;;			Type: mvccpb.PUT,
0000000000000000000000000000000000000000;;			Kv:   &changes[0],
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s.notify(rev, []mvccpb.Event{ev})
0000000000000000000000000000000000000000;;		return rev
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *watchableStore) DeleteRange(key, end []byte) (n, rev int64) {
0000000000000000000000000000000000000000;;		s.mu.Lock()
0000000000000000000000000000000000000000;;		defer s.mu.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		n, rev = s.store.DeleteRange(key, end)
0000000000000000000000000000000000000000;;		changes := s.store.getChanges()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(changes) != int(n) {
0000000000000000000000000000000000000000;;			plog.Panicf("unexpected len(changes) != n after deleteRange")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if n == 0 {
0000000000000000000000000000000000000000;;			return n, rev
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		evs := make([]mvccpb.Event, n)
0000000000000000000000000000000000000000;;		for i := range changes {
0000000000000000000000000000000000000000;;			evs[i] = mvccpb.Event{
0000000000000000000000000000000000000000;;				Type: mvccpb.DELETE,
0000000000000000000000000000000000000000;;				Kv:   &changes[i]}
0000000000000000000000000000000000000000;;			evs[i].Kv.ModRevision = rev
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s.notify(rev, evs)
0000000000000000000000000000000000000000;;		return n, rev
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *watchableStore) TxnBegin() int64 {
0000000000000000000000000000000000000000;;		s.mu.Lock()
0000000000000000000000000000000000000000;;		return s.store.TxnBegin()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *watchableStore) TxnEnd(txnID int64) error {
0000000000000000000000000000000000000000;;		err := s.store.TxnEnd(txnID)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		changes := s.getChanges()
0000000000000000000000000000000000000000;;		if len(changes) == 0 {
0000000000000000000000000000000000000000;;			s.mu.Unlock()
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		rev := s.store.Rev()
0000000000000000000000000000000000000000;;		evs := make([]mvccpb.Event, len(changes))
0000000000000000000000000000000000000000;;		for i, change := range changes {
0000000000000000000000000000000000000000;;			switch change.CreateRevision {
0000000000000000000000000000000000000000;;			case 0:
0000000000000000000000000000000000000000;;				evs[i] = mvccpb.Event{
0000000000000000000000000000000000000000;;					Type: mvccpb.DELETE,
0000000000000000000000000000000000000000;;					Kv:   &changes[i]}
0000000000000000000000000000000000000000;;				evs[i].Kv.ModRevision = rev
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				evs[i] = mvccpb.Event{
0000000000000000000000000000000000000000;;					Type: mvccpb.PUT,
0000000000000000000000000000000000000000;;					Kv:   &changes[i]}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s.notify(rev, evs)
0000000000000000000000000000000000000000;;		s.mu.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *watchableStore) Close() error {
0000000000000000000000000000000000000000;;		close(s.stopc)
0000000000000000000000000000000000000000;;		s.wg.Wait()
0000000000000000000000000000000000000000;;		return s.store.Close()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *watchableStore) NewWatchStream() WatchStream {
0000000000000000000000000000000000000000;;		watchStreamGauge.Inc()
0000000000000000000000000000000000000000;;		return &watchStream{
0000000000000000000000000000000000000000;;			watchable: s,
0000000000000000000000000000000000000000;;			ch:        make(chan WatchResponse, chanBufLen),
0000000000000000000000000000000000000000;;			cancels:   make(map[WatchID]cancelFunc),
0000000000000000000000000000000000000000;;			watchers:  make(map[WatchID]*watcher),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *watchableStore) watch(key, end []byte, startRev int64, id WatchID, ch chan<- WatchResponse, fcs ...FilterFunc) (*watcher, cancelFunc) {
0000000000000000000000000000000000000000;;		s.mu.Lock()
0000000000000000000000000000000000000000;;		defer s.mu.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		wa := &watcher{
0000000000000000000000000000000000000000;;			key:    key,
0000000000000000000000000000000000000000;;			end:    end,
0000000000000000000000000000000000000000;;			minRev: startRev,
0000000000000000000000000000000000000000;;			id:     id,
0000000000000000000000000000000000000000;;			ch:     ch,
0000000000000000000000000000000000000000;;			fcs:    fcs,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s.store.mu.Lock()
0000000000000000000000000000000000000000;;		synced := startRev > s.store.currentRev.main || startRev == 0
0000000000000000000000000000000000000000;;		if synced {
0000000000000000000000000000000000000000;;			wa.minRev = s.store.currentRev.main + 1
0000000000000000000000000000000000000000;;			if startRev > wa.minRev {
0000000000000000000000000000000000000000;;				wa.minRev = startRev
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s.store.mu.Unlock()
0000000000000000000000000000000000000000;;		if synced {
0000000000000000000000000000000000000000;;			s.synced.add(wa)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			slowWatcherGauge.Inc()
0000000000000000000000000000000000000000;;			s.unsynced.add(wa)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		watcherGauge.Inc()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return wa, func() { s.cancelWatcher(wa) }
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// cancelWatcher removes references of the watcher from the watchableStore
0000000000000000000000000000000000000000;;	func (s *watchableStore) cancelWatcher(wa *watcher) {
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			s.mu.Lock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if s.unsynced.delete(wa) {
0000000000000000000000000000000000000000;;				slowWatcherGauge.Dec()
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			} else if s.synced.delete(wa) {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			} else if wa.compacted {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !wa.victim {
0000000000000000000000000000000000000000;;				panic("watcher not victim but not in watch groups")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			var victimBatch watcherBatch
0000000000000000000000000000000000000000;;			for _, wb := range s.victims {
0000000000000000000000000000000000000000;;				if wb[wa] != nil {
0000000000000000000000000000000000000000;;					victimBatch = wb
0000000000000000000000000000000000000000;;					break
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if victimBatch != nil {
0000000000000000000000000000000000000000;;				slowWatcherGauge.Dec()
0000000000000000000000000000000000000000;;				delete(victimBatch, wa)
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// victim being processed so not accessible; retry
0000000000000000000000000000000000000000;;			s.mu.Unlock()
0000000000000000000000000000000000000000;;			time.Sleep(time.Millisecond)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		watcherGauge.Dec()
0000000000000000000000000000000000000000;;		s.mu.Unlock()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// syncWatchersLoop syncs the watcher in the unsynced map every 100ms.
0000000000000000000000000000000000000000;;	func (s *watchableStore) syncWatchersLoop() {
0000000000000000000000000000000000000000;;		defer s.wg.Done()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			s.mu.Lock()
0000000000000000000000000000000000000000;;			st := time.Now()
0000000000000000000000000000000000000000;;			lastUnsyncedWatchers := s.unsynced.size()
0000000000000000000000000000000000000000;;			s.syncWatchers()
0000000000000000000000000000000000000000;;			unsyncedWatchers := s.unsynced.size()
0000000000000000000000000000000000000000;;			s.mu.Unlock()
0000000000000000000000000000000000000000;;			syncDuration := time.Since(st)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			waitDuration := 100 * time.Millisecond
0000000000000000000000000000000000000000;;			// more work pending?
0000000000000000000000000000000000000000;;			if unsyncedWatchers != 0 && lastUnsyncedWatchers > unsyncedWatchers {
0000000000000000000000000000000000000000;;				// be fair to other store operations by yielding time taken
0000000000000000000000000000000000000000;;				waitDuration = syncDuration
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			select {
0000000000000000000000000000000000000000;;			case <-time.After(waitDuration):
0000000000000000000000000000000000000000;;			case <-s.stopc:
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// syncVictimsLoop tries to write precomputed watcher responses to
0000000000000000000000000000000000000000;;	// watchers that had a blocked watcher channel
0000000000000000000000000000000000000000;;	func (s *watchableStore) syncVictimsLoop() {
0000000000000000000000000000000000000000;;		defer s.wg.Done()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			for s.moveVictims() != 0 {
0000000000000000000000000000000000000000;;				// try to update all victim watchers
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			s.mu.Lock()
0000000000000000000000000000000000000000;;			isEmpty := len(s.victims) == 0
0000000000000000000000000000000000000000;;			s.mu.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			var tickc <-chan time.Time
0000000000000000000000000000000000000000;;			if !isEmpty {
0000000000000000000000000000000000000000;;				tickc = time.After(10 * time.Millisecond)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			select {
0000000000000000000000000000000000000000;;			case <-tickc:
0000000000000000000000000000000000000000;;			case <-s.victimc:
0000000000000000000000000000000000000000;;			case <-s.stopc:
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// moveVictims tries to update watches with already pending event data
0000000000000000000000000000000000000000;;	func (s *watchableStore) moveVictims() (moved int) {
0000000000000000000000000000000000000000;;		s.mu.Lock()
0000000000000000000000000000000000000000;;		victims := s.victims
0000000000000000000000000000000000000000;;		s.victims = nil
0000000000000000000000000000000000000000;;		s.mu.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var newVictim watcherBatch
0000000000000000000000000000000000000000;;		for _, wb := range victims {
0000000000000000000000000000000000000000;;			// try to send responses again
0000000000000000000000000000000000000000;;			for w, eb := range wb {
0000000000000000000000000000000000000000;;				// watcher has observed the store up to, but not including, w.minRev
0000000000000000000000000000000000000000;;				rev := w.minRev - 1
0000000000000000000000000000000000000000;;				if w.send(WatchResponse{WatchID: w.id, Events: eb.evs, Revision: rev}) {
0000000000000000000000000000000000000000;;					pendingEventsGauge.Add(float64(len(eb.evs)))
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					if newVictim == nil {
0000000000000000000000000000000000000000;;						newVictim = make(watcherBatch)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					newVictim[w] = eb
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				moved++
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// assign completed victim watchers to unsync/sync
0000000000000000000000000000000000000000;;			s.mu.Lock()
0000000000000000000000000000000000000000;;			s.store.mu.Lock()
0000000000000000000000000000000000000000;;			curRev := s.store.currentRev.main
0000000000000000000000000000000000000000;;			for w, eb := range wb {
0000000000000000000000000000000000000000;;				if newVictim != nil && newVictim[w] != nil {
0000000000000000000000000000000000000000;;					// couldn't send watch response; stays victim
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				w.victim = false
0000000000000000000000000000000000000000;;				if eb.moreRev != 0 {
0000000000000000000000000000000000000000;;					w.minRev = eb.moreRev
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if w.minRev <= curRev {
0000000000000000000000000000000000000000;;					s.unsynced.add(w)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					slowWatcherGauge.Dec()
0000000000000000000000000000000000000000;;					s.synced.add(w)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			s.store.mu.Unlock()
0000000000000000000000000000000000000000;;			s.mu.Unlock()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(newVictim) > 0 {
0000000000000000000000000000000000000000;;			s.mu.Lock()
0000000000000000000000000000000000000000;;			s.victims = append(s.victims, newVictim)
0000000000000000000000000000000000000000;;			s.mu.Unlock()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return moved
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// syncWatchers syncs unsynced watchers by:
0000000000000000000000000000000000000000;;	//	1. choose a set of watchers from the unsynced watcher group
0000000000000000000000000000000000000000;;	//	2. iterate over the set to get the minimum revision and remove compacted watchers
0000000000000000000000000000000000000000;;	//	3. use minimum revision to get all key-value pairs and send those events to watchers
0000000000000000000000000000000000000000;;	//	4. remove synced watchers in set from unsynced group and move to synced group
0000000000000000000000000000000000000000;;	func (s *watchableStore) syncWatchers() {
0000000000000000000000000000000000000000;;		if s.unsynced.size() == 0 {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s.store.mu.Lock()
0000000000000000000000000000000000000000;;		defer s.store.mu.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// in order to find key-value pairs from unsynced watchers, we need to
0000000000000000000000000000000000000000;;		// find min revision index, and these revisions can be used to
0000000000000000000000000000000000000000;;		// query the backend store of key-value pairs
0000000000000000000000000000000000000000;;		curRev := s.store.currentRev.main
0000000000000000000000000000000000000000;;		compactionRev := s.store.compactMainRev
0000000000000000000000000000000000000000;;		wg, minRev := s.unsynced.choose(maxWatchersPerSync, curRev, compactionRev)
0000000000000000000000000000000000000000;;		minBytes, maxBytes := newRevBytes(), newRevBytes()
0000000000000000000000000000000000000000;;		revToBytes(revision{main: minRev}, minBytes)
0000000000000000000000000000000000000000;;		revToBytes(revision{main: curRev + 1}, maxBytes)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// UnsafeRange returns keys and values. And in boltdb, keys are revisions.
0000000000000000000000000000000000000000;;		// values are actual key-value pairs in backend.
0000000000000000000000000000000000000000;;		tx := s.store.b.BatchTx()
0000000000000000000000000000000000000000;;		tx.Lock()
0000000000000000000000000000000000000000;;		revs, vs := tx.UnsafeRange(keyBucketName, minBytes, maxBytes, 0)
0000000000000000000000000000000000000000;;		evs := kvsToEvents(wg, revs, vs)
0000000000000000000000000000000000000000;;		tx.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var victims watcherBatch
0000000000000000000000000000000000000000;;		wb := newWatcherBatch(wg, evs)
0000000000000000000000000000000000000000;;		for w := range wg.watchers {
0000000000000000000000000000000000000000;;			w.minRev = curRev + 1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			eb, ok := wb[w]
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				// bring un-notified watcher to synced
0000000000000000000000000000000000000000;;				s.synced.add(w)
0000000000000000000000000000000000000000;;				s.unsynced.delete(w)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if eb.moreRev != 0 {
0000000000000000000000000000000000000000;;				w.minRev = eb.moreRev
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if w.send(WatchResponse{WatchID: w.id, Events: eb.evs, Revision: curRev}) {
0000000000000000000000000000000000000000;;				pendingEventsGauge.Add(float64(len(eb.evs)))
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if victims == nil {
0000000000000000000000000000000000000000;;					victims = make(watcherBatch)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				w.victim = true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if w.victim {
0000000000000000000000000000000000000000;;				victims[w] = eb
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if eb.moreRev != 0 {
0000000000000000000000000000000000000000;;					// stay unsynced; more to read
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				s.synced.add(w)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			s.unsynced.delete(w)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s.addVictim(victims)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		vsz := 0
0000000000000000000000000000000000000000;;		for _, v := range s.victims {
0000000000000000000000000000000000000000;;			vsz += len(v)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		slowWatcherGauge.Set(float64(s.unsynced.size() + vsz))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// kvsToEvents gets all events for the watchers from all key-value pairs
0000000000000000000000000000000000000000;;	func kvsToEvents(wg *watcherGroup, revs, vals [][]byte) (evs []mvccpb.Event) {
0000000000000000000000000000000000000000;;		for i, v := range vals {
0000000000000000000000000000000000000000;;			var kv mvccpb.KeyValue
0000000000000000000000000000000000000000;;			if err := kv.Unmarshal(v); err != nil {
0000000000000000000000000000000000000000;;				plog.Panicf("cannot unmarshal event: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !wg.contains(string(kv.Key)) {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			ty := mvccpb.PUT
0000000000000000000000000000000000000000;;			if isTombstone(revs[i]) {
0000000000000000000000000000000000000000;;				ty = mvccpb.DELETE
0000000000000000000000000000000000000000;;				// patch in mod revision so watchers won't skip
0000000000000000000000000000000000000000;;				kv.ModRevision = bytesToRev(revs[i]).main
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			evs = append(evs, mvccpb.Event{Kv: &kv, Type: ty})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return evs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// notify notifies the fact that given event at the given rev just happened to
0000000000000000000000000000000000000000;;	// watchers that watch on the key of the event.
0000000000000000000000000000000000000000;;	func (s *watchableStore) notify(rev int64, evs []mvccpb.Event) {
0000000000000000000000000000000000000000;;		var victim watcherBatch
0000000000000000000000000000000000000000;;		for w, eb := range newWatcherBatch(&s.synced, evs) {
0000000000000000000000000000000000000000;;			if eb.revs != 1 {
0000000000000000000000000000000000000000;;				plog.Panicf("unexpected multiple revisions in notification")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if w.send(WatchResponse{WatchID: w.id, Events: eb.evs, Revision: rev}) {
0000000000000000000000000000000000000000;;				pendingEventsGauge.Add(float64(len(eb.evs)))
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				// move slow watcher to victims
0000000000000000000000000000000000000000;;				w.minRev = rev + 1
0000000000000000000000000000000000000000;;				if victim == nil {
0000000000000000000000000000000000000000;;					victim = make(watcherBatch)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				w.victim = true
0000000000000000000000000000000000000000;;				victim[w] = eb
0000000000000000000000000000000000000000;;				s.synced.delete(w)
0000000000000000000000000000000000000000;;				slowWatcherGauge.Inc()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s.addVictim(victim)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *watchableStore) addVictim(victim watcherBatch) {
0000000000000000000000000000000000000000;;		if victim == nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s.victims = append(s.victims, victim)
0000000000000000000000000000000000000000;;		select {
0000000000000000000000000000000000000000;;		case s.victimc <- struct{}{}:
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *watchableStore) rev() int64 { return s.store.Rev() }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *watchableStore) progress(w *watcher) {
0000000000000000000000000000000000000000;;		s.mu.Lock()
0000000000000000000000000000000000000000;;		defer s.mu.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if _, ok := s.synced.watchers[w]; ok {
0000000000000000000000000000000000000000;;			w.send(WatchResponse{WatchID: w.id, Revision: s.rev()})
0000000000000000000000000000000000000000;;			// If the ch is full, this watcher is receiving events.
0000000000000000000000000000000000000000;;			// We do not need to send progress at all.
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type watcher struct {
0000000000000000000000000000000000000000;;		// the watcher key
0000000000000000000000000000000000000000;;		key []byte
0000000000000000000000000000000000000000;;		// end indicates the end of the range to watch.
0000000000000000000000000000000000000000;;		// If end is set, the watcher is on a range.
0000000000000000000000000000000000000000;;		end []byte
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// victim is set when ch is blocked and undergoing victim processing
0000000000000000000000000000000000000000;;		victim bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// compacted is set when the watcher is removed because of compaction
0000000000000000000000000000000000000000;;		compacted bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// minRev is the minimum revision update the watcher will accept
0000000000000000000000000000000000000000;;		minRev int64
0000000000000000000000000000000000000000;;		id     WatchID
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fcs []FilterFunc
0000000000000000000000000000000000000000;;		// a chan to send out the watch response.
0000000000000000000000000000000000000000;;		// The chan might be shared with other watchers.
0000000000000000000000000000000000000000;;		ch chan<- WatchResponse
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *watcher) send(wr WatchResponse) bool {
0000000000000000000000000000000000000000;;		progressEvent := len(wr.Events) == 0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(w.fcs) != 0 {
0000000000000000000000000000000000000000;;			ne := make([]mvccpb.Event, 0, len(wr.Events))
0000000000000000000000000000000000000000;;			for i := range wr.Events {
0000000000000000000000000000000000000000;;				filtered := false
0000000000000000000000000000000000000000;;				for _, filter := range w.fcs {
0000000000000000000000000000000000000000;;					if filter(wr.Events[i]) {
0000000000000000000000000000000000000000;;						filtered = true
0000000000000000000000000000000000000000;;						break
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if !filtered {
0000000000000000000000000000000000000000;;					ne = append(ne, wr.Events[i])
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			wr.Events = ne
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// if all events are filtered out, we should send nothing.
0000000000000000000000000000000000000000;;		if !progressEvent && len(wr.Events) == 0 {
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		select {
0000000000000000000000000000000000000000;;		case w.ch <- wr:
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
