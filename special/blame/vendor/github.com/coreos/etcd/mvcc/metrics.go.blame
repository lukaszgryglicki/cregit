0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/coreos/etcd/storage/metrics.go[Godeps/_workspace/src/github.com/coreos/etcd/storage/metrics.go][vendor/github.com/coreos/etcd/mvcc/metrics.go];	
0000000000000000000000000000000000000000;;	package mvcc
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/prometheus/client_golang/prometheus"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		rangeCounter = prometheus.NewCounter(
0000000000000000000000000000000000000000;;			prometheus.CounterOpts{
0000000000000000000000000000000000000000;;				Namespace: "etcd_debugging",
0000000000000000000000000000000000000000;;				Subsystem: "mvcc",
0000000000000000000000000000000000000000;;				Name:      "range_total",
0000000000000000000000000000000000000000;;				Help:      "Total number of ranges seen by this member.",
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		putCounter = prometheus.NewCounter(
0000000000000000000000000000000000000000;;			prometheus.CounterOpts{
0000000000000000000000000000000000000000;;				Namespace: "etcd_debugging",
0000000000000000000000000000000000000000;;				Subsystem: "mvcc",
0000000000000000000000000000000000000000;;				Name:      "put_total",
0000000000000000000000000000000000000000;;				Help:      "Total number of puts seen by this member.",
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		deleteCounter = prometheus.NewCounter(
0000000000000000000000000000000000000000;;			prometheus.CounterOpts{
0000000000000000000000000000000000000000;;				Namespace: "etcd_debugging",
0000000000000000000000000000000000000000;;				Subsystem: "mvcc",
0000000000000000000000000000000000000000;;				Name:      "delete_total",
0000000000000000000000000000000000000000;;				Help:      "Total number of deletes seen by this member.",
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		txnCounter = prometheus.NewCounter(
0000000000000000000000000000000000000000;;			prometheus.CounterOpts{
0000000000000000000000000000000000000000;;				Namespace: "etcd_debugging",
0000000000000000000000000000000000000000;;				Subsystem: "mvcc",
0000000000000000000000000000000000000000;;				Name:      "txn_total",
0000000000000000000000000000000000000000;;				Help:      "Total number of txns seen by this member.",
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		keysGauge = prometheus.NewGauge(
0000000000000000000000000000000000000000;;			prometheus.GaugeOpts{
0000000000000000000000000000000000000000;;				Namespace: "etcd_debugging",
0000000000000000000000000000000000000000;;				Subsystem: "mvcc",
0000000000000000000000000000000000000000;;				Name:      "keys_total",
0000000000000000000000000000000000000000;;				Help:      "Total number of keys.",
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		watchStreamGauge = prometheus.NewGauge(
0000000000000000000000000000000000000000;;			prometheus.GaugeOpts{
0000000000000000000000000000000000000000;;				Namespace: "etcd_debugging",
0000000000000000000000000000000000000000;;				Subsystem: "mvcc",
0000000000000000000000000000000000000000;;				Name:      "watch_stream_total",
0000000000000000000000000000000000000000;;				Help:      "Total number of watch streams.",
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		watcherGauge = prometheus.NewGauge(
0000000000000000000000000000000000000000;;			prometheus.GaugeOpts{
0000000000000000000000000000000000000000;;				Namespace: "etcd_debugging",
0000000000000000000000000000000000000000;;				Subsystem: "mvcc",
0000000000000000000000000000000000000000;;				Name:      "watcher_total",
0000000000000000000000000000000000000000;;				Help:      "Total number of watchers.",
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		slowWatcherGauge = prometheus.NewGauge(
0000000000000000000000000000000000000000;;			prometheus.GaugeOpts{
0000000000000000000000000000000000000000;;				Namespace: "etcd_debugging",
0000000000000000000000000000000000000000;;				Subsystem: "mvcc",
0000000000000000000000000000000000000000;;				Name:      "slow_watcher_total",
0000000000000000000000000000000000000000;;				Help:      "Total number of unsynced slow watchers.",
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		totalEventsCounter = prometheus.NewCounter(
0000000000000000000000000000000000000000;;			prometheus.CounterOpts{
0000000000000000000000000000000000000000;;				Namespace: "etcd_debugging",
0000000000000000000000000000000000000000;;				Subsystem: "mvcc",
0000000000000000000000000000000000000000;;				Name:      "events_total",
0000000000000000000000000000000000000000;;				Help:      "Total number of events sent by this member.",
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pendingEventsGauge = prometheus.NewGauge(
0000000000000000000000000000000000000000;;			prometheus.GaugeOpts{
0000000000000000000000000000000000000000;;				Namespace: "etcd_debugging",
0000000000000000000000000000000000000000;;				Subsystem: "mvcc",
0000000000000000000000000000000000000000;;				Name:      "pending_events_total",
0000000000000000000000000000000000000000;;				Help:      "Total number of pending events to be sent.",
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		indexCompactionPauseDurations = prometheus.NewHistogram(
0000000000000000000000000000000000000000;;			prometheus.HistogramOpts{
0000000000000000000000000000000000000000;;				Namespace: "etcd_debugging",
0000000000000000000000000000000000000000;;				Subsystem: "mvcc",
0000000000000000000000000000000000000000;;				Name:      "index_compaction_pause_duration_milliseconds",
0000000000000000000000000000000000000000;;				Help:      "Bucketed histogram of index compaction pause duration.",
0000000000000000000000000000000000000000;;				// 0.5ms -> 1second
0000000000000000000000000000000000000000;;				Buckets: prometheus.ExponentialBuckets(0.5, 2, 12),
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		dbCompactionPauseDurations = prometheus.NewHistogram(
0000000000000000000000000000000000000000;;			prometheus.HistogramOpts{
0000000000000000000000000000000000000000;;				Namespace: "etcd_debugging",
0000000000000000000000000000000000000000;;				Subsystem: "mvcc",
0000000000000000000000000000000000000000;;				Name:      "db_compaction_pause_duration_milliseconds",
0000000000000000000000000000000000000000;;				Help:      "Bucketed histogram of db compaction pause duration.",
0000000000000000000000000000000000000000;;				// 1ms -> 4second
0000000000000000000000000000000000000000;;				Buckets: prometheus.ExponentialBuckets(1, 2, 13),
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		dbCompactionTotalDurations = prometheus.NewHistogram(
0000000000000000000000000000000000000000;;			prometheus.HistogramOpts{
0000000000000000000000000000000000000000;;				Namespace: "etcd_debugging",
0000000000000000000000000000000000000000;;				Subsystem: "mvcc",
0000000000000000000000000000000000000000;;				Name:      "db_compaction_total_duration_milliseconds",
0000000000000000000000000000000000000000;;				Help:      "Bucketed histogram of db compaction total duration.",
0000000000000000000000000000000000000000;;				// 100ms -> 800second
0000000000000000000000000000000000000000;;				Buckets: prometheus.ExponentialBuckets(100, 2, 14),
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		dbTotalSize = prometheus.NewGauge(prometheus.GaugeOpts{
0000000000000000000000000000000000000000;;			Namespace: "etcd_debugging",
0000000000000000000000000000000000000000;;			Subsystem: "mvcc",
0000000000000000000000000000000000000000;;			Name:      "db_total_size_in_bytes",
0000000000000000000000000000000000000000;;			Help:      "Total size of the underlying database in bytes.",
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		prometheus.MustRegister(rangeCounter)
0000000000000000000000000000000000000000;;		prometheus.MustRegister(putCounter)
0000000000000000000000000000000000000000;;		prometheus.MustRegister(deleteCounter)
0000000000000000000000000000000000000000;;		prometheus.MustRegister(txnCounter)
0000000000000000000000000000000000000000;;		prometheus.MustRegister(keysGauge)
0000000000000000000000000000000000000000;;		prometheus.MustRegister(watchStreamGauge)
0000000000000000000000000000000000000000;;		prometheus.MustRegister(watcherGauge)
0000000000000000000000000000000000000000;;		prometheus.MustRegister(slowWatcherGauge)
0000000000000000000000000000000000000000;;		prometheus.MustRegister(totalEventsCounter)
0000000000000000000000000000000000000000;;		prometheus.MustRegister(pendingEventsGauge)
0000000000000000000000000000000000000000;;		prometheus.MustRegister(indexCompactionPauseDurations)
0000000000000000000000000000000000000000;;		prometheus.MustRegister(dbCompactionPauseDurations)
0000000000000000000000000000000000000000;;		prometheus.MustRegister(dbCompactionTotalDurations)
0000000000000000000000000000000000000000;;		prometheus.MustRegister(dbTotalSize)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ReportEventReceived reports that an event is received.
0000000000000000000000000000000000000000;;	// This function should be called when the external systems received an
0000000000000000000000000000000000000000;;	// event from mvcc.Watcher.
0000000000000000000000000000000000000000;;	func ReportEventReceived(n int) {
0000000000000000000000000000000000000000;;		pendingEventsGauge.Sub(float64(n))
0000000000000000000000000000000000000000;;		totalEventsCounter.Add(float64(n))
0000000000000000000000000000000000000000;;	}
