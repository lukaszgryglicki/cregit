0000000000000000000000000000000000000000;;	// Copyright 2016 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
885071b7d07344044421ffe2fd90c1bcd1ee9812;;	
0000000000000000000000000000000000000000;;	package mvcc
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/binary"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/mvcc/backend"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/mvcc/mvccpb"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func UpdateConsistentIndex(be backend.Backend, index uint64) {
0000000000000000000000000000000000000000;;		tx := be.BatchTx()
0000000000000000000000000000000000000000;;		tx.Lock()
0000000000000000000000000000000000000000;;		defer tx.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var oldi uint64
0000000000000000000000000000000000000000;;		_, vs := tx.UnsafeRange(metaBucketName, consistentIndexKeyName, nil, 0)
0000000000000000000000000000000000000000;;		if len(vs) != 0 {
0000000000000000000000000000000000000000;;			oldi = binary.BigEndian.Uint64(vs[0])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if index <= oldi {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		bs := make([]byte, 8)
0000000000000000000000000000000000000000;;		binary.BigEndian.PutUint64(bs, index)
0000000000000000000000000000000000000000;;		tx.UnsafePut(metaBucketName, consistentIndexKeyName, bs)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func WriteKV(be backend.Backend, kv mvccpb.KeyValue) {
0000000000000000000000000000000000000000;;		ibytes := newRevBytes()
0000000000000000000000000000000000000000;;		revToBytes(revision{main: kv.ModRevision}, ibytes)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		d, err := kv.Marshal()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			plog.Fatalf("cannot marshal event: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		be.BatchTx().Lock()
0000000000000000000000000000000000000000;;		be.BatchTx().UnsafePut(keyBucketName, ibytes, d)
0000000000000000000000000000000000000000;;		be.BatchTx().Unlock()
0000000000000000000000000000000000000000;;	}
