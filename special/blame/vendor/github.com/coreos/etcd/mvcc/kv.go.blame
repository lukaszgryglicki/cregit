0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/coreos/etcd/storage/kv.go[Godeps/_workspace/src/github.com/coreos/etcd/storage/kv.go][vendor/github.com/coreos/etcd/mvcc/kv.go];	
0000000000000000000000000000000000000000;;	package mvcc
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/lease"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/mvcc/backend"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/mvcc/mvccpb"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RangeOptions struct {
0000000000000000000000000000000000000000;;		Limit int64
0000000000000000000000000000000000000000;;		Rev   int64
0000000000000000000000000000000000000000;;		Count bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RangeResult struct {
0000000000000000000000000000000000000000;;		KVs   []mvccpb.KeyValue
0000000000000000000000000000000000000000;;		Rev   int64
0000000000000000000000000000000000000000;;		Count int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type KV interface {
0000000000000000000000000000000000000000;;		// Rev returns the current revision of the KV.
0000000000000000000000000000000000000000;;		Rev() int64
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// FirstRev returns the first revision of the KV.
0000000000000000000000000000000000000000;;		// After a compaction, the first revision increases to the compaction
0000000000000000000000000000000000000000;;		// revision.
0000000000000000000000000000000000000000;;		FirstRev() int64
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Range gets the keys in the range at rangeRev.
0000000000000000000000000000000000000000;;		// The returned rev is the current revision of the KV when the operation is executed.
0000000000000000000000000000000000000000;;		// If rangeRev <=0, range gets the keys at currentRev.
0000000000000000000000000000000000000000;;		// If `end` is nil, the request returns the key.
0000000000000000000000000000000000000000;;		// If `end` is not nil and not empty, it gets the keys in range [key, range_end).
0000000000000000000000000000000000000000;;		// If `end` is not nil and empty, it gets the keys greater than or equal to key.
0000000000000000000000000000000000000000;;		// Limit limits the number of keys returned.
0000000000000000000000000000000000000000;;		// If the required rev is compacted, ErrCompacted will be returned.
0000000000000000000000000000000000000000;;		Range(key, end []byte, ro RangeOptions) (r *RangeResult, err error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Put puts the given key, value into the store. Put also takes additional argument lease to
0000000000000000000000000000000000000000;;		// attach a lease to a key-value pair as meta-data. KV implementation does not validate the lease
0000000000000000000000000000000000000000;;		// id.
0000000000000000000000000000000000000000;;		// A put also increases the rev of the store, and generates one event in the event history.
0000000000000000000000000000000000000000;;		// The returned rev is the current revision of the KV when the operation is executed.
0000000000000000000000000000000000000000;;		Put(key, value []byte, lease lease.LeaseID) (rev int64)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DeleteRange deletes the given range from the store.
0000000000000000000000000000000000000000;;		// A deleteRange increases the rev of the store if any key in the range exists.
0000000000000000000000000000000000000000;;		// The number of key deleted will be returned.
0000000000000000000000000000000000000000;;		// The returned rev is the current revision of the KV when the operation is executed.
0000000000000000000000000000000000000000;;		// It also generates one event for each key delete in the event history.
0000000000000000000000000000000000000000;;		// if the `end` is nil, deleteRange deletes the key.
0000000000000000000000000000000000000000;;		// if the `end` is not nil, deleteRange deletes the keys in range [key, range_end).
0000000000000000000000000000000000000000;;		DeleteRange(key, end []byte) (n, rev int64)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TxnBegin begins a txn. Only Txn prefixed operation can be executed, others will be blocked
0000000000000000000000000000000000000000;;		// until txn ends. Only one on-going txn is allowed.
0000000000000000000000000000000000000000;;		// TxnBegin returns an int64 txn ID.
0000000000000000000000000000000000000000;;		// All txn prefixed operations with same txn ID will be done with the same rev.
0000000000000000000000000000000000000000;;		TxnBegin() int64
0000000000000000000000000000000000000000;;		// TxnEnd ends the on-going txn with txn ID. If the on-going txn ID is not matched, error is returned.
0000000000000000000000000000000000000000;;		TxnEnd(txnID int64) error
0000000000000000000000000000000000000000;;		// TxnRange returns the current revision of the KV when the operation is executed.
0000000000000000000000000000000000000000;;		TxnRange(txnID int64, key, end []byte, ro RangeOptions) (r *RangeResult, err error)
0000000000000000000000000000000000000000;;		TxnPut(txnID int64, key, value []byte, lease lease.LeaseID) (rev int64, err error)
0000000000000000000000000000000000000000;;		TxnDeleteRange(txnID int64, key, end []byte) (n, rev int64, err error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Compact frees all superseded keys with revisions less than rev.
0000000000000000000000000000000000000000;;		Compact(rev int64) (<-chan struct{}, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Hash retrieves the hash of KV state and revision.
0000000000000000000000000000000000000000;;		// This method is designed for consistency checking purpose.
0000000000000000000000000000000000000000;;		Hash() (hash uint32, revision int64, err error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Commit commits txns into the underlying backend.
0000000000000000000000000000000000000000;;		Commit()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Restore restores the KV store from a backend.
0000000000000000000000000000000000000000;;		Restore(b backend.Backend) error
0000000000000000000000000000000000000000;;		Close() error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WatchableKV is a KV that can be watched.
0000000000000000000000000000000000000000;;	type WatchableKV interface {
0000000000000000000000000000000000000000;;		KV
0000000000000000000000000000000000000000;;		Watchable
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Watchable is the interface that wraps the NewWatchStream function.
0000000000000000000000000000000000000000;;	type Watchable interface {
0000000000000000000000000000000000000000;;		// NewWatchStream returns a WatchStream that can be used to
0000000000000000000000000000000000000000;;		// watch events happened or happening on the KV.
0000000000000000000000000000000000000000;;		NewWatchStream() WatchStream
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ConsistentWatchableKV is a WatchableKV that understands the consistency
0000000000000000000000000000000000000000;;	// algorithm and consistent index.
0000000000000000000000000000000000000000;;	// If the consistent index of executing entry is not larger than the
0000000000000000000000000000000000000000;;	// consistent index of ConsistentWatchableKV, all operations in
0000000000000000000000000000000000000000;;	// this entry are skipped and return empty response.
0000000000000000000000000000000000000000;;	type ConsistentWatchableKV interface {
0000000000000000000000000000000000000000;;		WatchableKV
0000000000000000000000000000000000000000;;		// ConsistentIndex returns the current consistent index of the KV.
0000000000000000000000000000000000000000;;		ConsistentIndex() uint64
0000000000000000000000000000000000000000;;	}
