0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/coreos/etcd/storage/revision.go[Godeps/_workspace/src/github.com/coreos/etcd/storage/revision.go][vendor/github.com/coreos/etcd/mvcc/revision.go];	
0000000000000000000000000000000000000000;;	package mvcc
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "encoding/binary"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// revBytesLen is the byte length of a normal revision.
0000000000000000000000000000000000000000;;	// First 8 bytes is the revision.main in big-endian format. The 9th byte
0000000000000000000000000000000000000000;;	// is a '_'. The last 8 bytes is the revision.sub in big-endian format.
0000000000000000000000000000000000000000;;	const revBytesLen = 8 + 1 + 8
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A revision indicates modification of the key-value space.
0000000000000000000000000000000000000000;;	// The set of changes that share same main revision changes the key-value space atomically.
0000000000000000000000000000000000000000;;	type revision struct {
0000000000000000000000000000000000000000;;		// main is the main revision of a set of changes that happen atomically.
0000000000000000000000000000000000000000;;		main int64
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// sub is the the sub revision of a change in a set of changes that happen
0000000000000000000000000000000000000000;;		// atomically. Each change has different increasing sub revision in that
0000000000000000000000000000000000000000;;		// set.
0000000000000000000000000000000000000000;;		sub int64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a revision) GreaterThan(b revision) bool {
0000000000000000000000000000000000000000;;		if a.main > b.main {
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if a.main < b.main {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return a.sub > b.sub
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newRevBytes() []byte {
0000000000000000000000000000000000000000;;		return make([]byte, revBytesLen, markedRevBytesLen)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func revToBytes(rev revision, bytes []byte) {
0000000000000000000000000000000000000000;;		binary.BigEndian.PutUint64(bytes, uint64(rev.main))
0000000000000000000000000000000000000000;;		bytes[8] = '_'
0000000000000000000000000000000000000000;;		binary.BigEndian.PutUint64(bytes[9:], uint64(rev.sub))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func bytesToRev(bytes []byte) revision {
0000000000000000000000000000000000000000;;		return revision{
0000000000000000000000000000000000000000;;			main: int64(binary.BigEndian.Uint64(bytes[0:8])),
0000000000000000000000000000000000000000;;			sub:  int64(binary.BigEndian.Uint64(bytes[9:])),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type revisions []revision
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a revisions) Len() int           { return len(a) }
0000000000000000000000000000000000000000;;	func (a revisions) Less(i, j int) bool { return a[j].GreaterThan(a[i]) }
0000000000000000000000000000000000000000;;	func (a revisions) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }
