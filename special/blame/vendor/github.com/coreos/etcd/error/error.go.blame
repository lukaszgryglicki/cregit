0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/coreos/etcd/error/error.go[Godeps/_workspace/src/github.com/coreos/etcd/error/error.go][vendor/github.com/coreos/etcd/error/error.go];	
0000000000000000000000000000000000000000;;	// Package error describes errors in etcd project. When any change happens,
0000000000000000000000000000000000000000;;	// Documentation/v2/errorcode.md needs to be updated correspondingly.
0000000000000000000000000000000000000000;;	package error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var errors = map[int]string{
0000000000000000000000000000000000000000;;		// command related errors
0000000000000000000000000000000000000000;;		EcodeKeyNotFound:      "Key not found",
0000000000000000000000000000000000000000;;		EcodeTestFailed:       "Compare failed", //test and set
0000000000000000000000000000000000000000;;		EcodeNotFile:          "Not a file",
0000000000000000000000000000000000000000;;		ecodeNoMorePeer:       "Reached the max number of peers in the cluster",
0000000000000000000000000000000000000000;;		EcodeNotDir:           "Not a directory",
0000000000000000000000000000000000000000;;		EcodeNodeExist:        "Key already exists", // create
0000000000000000000000000000000000000000;;		ecodeKeyIsPreserved:   "The prefix of given key is a keyword in etcd",
0000000000000000000000000000000000000000;;		EcodeRootROnly:        "Root is read only",
0000000000000000000000000000000000000000;;		EcodeDirNotEmpty:      "Directory not empty",
0000000000000000000000000000000000000000;;		ecodeExistingPeerAddr: "Peer address has existed",
0000000000000000000000000000000000000000;;		EcodeUnauthorized:     "The request requires user authentication",
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Post form related errors
0000000000000000000000000000000000000000;;		ecodeValueRequired:        "Value is Required in POST form",
0000000000000000000000000000000000000000;;		EcodePrevValueRequired:    "PrevValue is Required in POST form",
0000000000000000000000000000000000000000;;		EcodeTTLNaN:               "The given TTL in POST form is not a number",
0000000000000000000000000000000000000000;;		EcodeIndexNaN:             "The given index in POST form is not a number",
0000000000000000000000000000000000000000;;		ecodeValueOrTTLRequired:   "Value or TTL is required in POST form",
0000000000000000000000000000000000000000;;		ecodeTimeoutNaN:           "The given timeout in POST form is not a number",
0000000000000000000000000000000000000000;;		ecodeNameRequired:         "Name is required in POST form",
0000000000000000000000000000000000000000;;		ecodeIndexOrValueRequired: "Index or value is required",
0000000000000000000000000000000000000000;;		ecodeIndexValueMutex:      "Index and value cannot both be specified",
0000000000000000000000000000000000000000;;		EcodeInvalidField:         "Invalid field",
0000000000000000000000000000000000000000;;		EcodeInvalidForm:          "Invalid POST form",
0000000000000000000000000000000000000000;;		EcodeRefreshValue:         "Value provided on refresh",
0000000000000000000000000000000000000000;;		EcodeRefreshTTLRequired:   "A TTL must be provided on refresh",
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// raft related errors
0000000000000000000000000000000000000000;;		EcodeRaftInternal: "Raft Internal Error",
0000000000000000000000000000000000000000;;		EcodeLeaderElect:  "During Leader Election",
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// etcd related errors
0000000000000000000000000000000000000000;;		EcodeWatcherCleared:     "watcher is cleared due to etcd recovery",
0000000000000000000000000000000000000000;;		EcodeEventIndexCleared:  "The event in requested index is outdated and cleared",
0000000000000000000000000000000000000000;;		ecodeStandbyInternal:    "Standby Internal Error",
0000000000000000000000000000000000000000;;		ecodeInvalidActiveSize:  "Invalid active size",
0000000000000000000000000000000000000000;;		ecodeInvalidRemoveDelay: "Standby remove delay",
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// client related errors
0000000000000000000000000000000000000000;;		ecodeClientInternal: "Client Internal Error",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var errorStatus = map[int]int{
0000000000000000000000000000000000000000;;		EcodeKeyNotFound:  http.StatusNotFound,
0000000000000000000000000000000000000000;;		EcodeNotFile:      http.StatusForbidden,
0000000000000000000000000000000000000000;;		EcodeDirNotEmpty:  http.StatusForbidden,
0000000000000000000000000000000000000000;;		EcodeUnauthorized: http.StatusUnauthorized,
0000000000000000000000000000000000000000;;		EcodeTestFailed:   http.StatusPreconditionFailed,
0000000000000000000000000000000000000000;;		EcodeNodeExist:    http.StatusPreconditionFailed,
0000000000000000000000000000000000000000;;		EcodeRaftInternal: http.StatusInternalServerError,
0000000000000000000000000000000000000000;;		EcodeLeaderElect:  http.StatusInternalServerError,
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		EcodeKeyNotFound      = 100
0000000000000000000000000000000000000000;;		EcodeTestFailed       = 101
0000000000000000000000000000000000000000;;		EcodeNotFile          = 102
0000000000000000000000000000000000000000;;		ecodeNoMorePeer       = 103
0000000000000000000000000000000000000000;;		EcodeNotDir           = 104
0000000000000000000000000000000000000000;;		EcodeNodeExist        = 105
0000000000000000000000000000000000000000;;		ecodeKeyIsPreserved   = 106
0000000000000000000000000000000000000000;;		EcodeRootROnly        = 107
0000000000000000000000000000000000000000;;		EcodeDirNotEmpty      = 108
0000000000000000000000000000000000000000;;		ecodeExistingPeerAddr = 109
0000000000000000000000000000000000000000;;		EcodeUnauthorized     = 110
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ecodeValueRequired        = 200
0000000000000000000000000000000000000000;;		EcodePrevValueRequired    = 201
0000000000000000000000000000000000000000;;		EcodeTTLNaN               = 202
0000000000000000000000000000000000000000;;		EcodeIndexNaN             = 203
0000000000000000000000000000000000000000;;		ecodeValueOrTTLRequired   = 204
0000000000000000000000000000000000000000;;		ecodeTimeoutNaN           = 205
0000000000000000000000000000000000000000;;		ecodeNameRequired         = 206
0000000000000000000000000000000000000000;;		ecodeIndexOrValueRequired = 207
0000000000000000000000000000000000000000;;		ecodeIndexValueMutex      = 208
0000000000000000000000000000000000000000;;		EcodeInvalidField         = 209
0000000000000000000000000000000000000000;;		EcodeInvalidForm          = 210
0000000000000000000000000000000000000000;;		EcodeRefreshValue         = 211
0000000000000000000000000000000000000000;;		EcodeRefreshTTLRequired   = 212
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		EcodeRaftInternal = 300
0000000000000000000000000000000000000000;;		EcodeLeaderElect  = 301
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		EcodeWatcherCleared     = 400
0000000000000000000000000000000000000000;;		EcodeEventIndexCleared  = 401
0000000000000000000000000000000000000000;;		ecodeStandbyInternal    = 402
0000000000000000000000000000000000000000;;		ecodeInvalidActiveSize  = 403
0000000000000000000000000000000000000000;;		ecodeInvalidRemoveDelay = 404
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ecodeClientInternal = 500
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Error struct {
0000000000000000000000000000000000000000;;		ErrorCode int    `json:"errorCode"`
0000000000000000000000000000000000000000;;		Message   string `json:"message"`
0000000000000000000000000000000000000000;;		Cause     string `json:"cause,omitempty"`
0000000000000000000000000000000000000000;;		Index     uint64 `json:"index"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewRequestError(errorCode int, cause string) *Error {
0000000000000000000000000000000000000000;;		return NewError(errorCode, cause, 0)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewError(errorCode int, cause string, index uint64) *Error {
0000000000000000000000000000000000000000;;		return &Error{
0000000000000000000000000000000000000000;;			ErrorCode: errorCode,
0000000000000000000000000000000000000000;;			Message:   errors[errorCode],
0000000000000000000000000000000000000000;;			Cause:     cause,
0000000000000000000000000000000000000000;;			Index:     index,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Error is for the error interface
0000000000000000000000000000000000000000;;	func (e Error) Error() string {
0000000000000000000000000000000000000000;;		return e.Message + " (" + e.Cause + ")"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e Error) toJsonString() string {
0000000000000000000000000000000000000000;;		b, _ := json.Marshal(e)
0000000000000000000000000000000000000000;;		return string(b)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e Error) StatusCode() int {
0000000000000000000000000000000000000000;;		status, ok := errorStatus[e.ErrorCode]
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			status = http.StatusBadRequest
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return status
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e Error) WriteTo(w http.ResponseWriter) {
0000000000000000000000000000000000000000;;		w.Header().Add("X-Etcd-Index", fmt.Sprint(e.Index))
0000000000000000000000000000000000000000;;		w.Header().Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		w.WriteHeader(e.StatusCode())
0000000000000000000000000000000000000000;;		fmt.Fprintln(w, e.toJsonString())
0000000000000000000000000000000000000000;;	}
