0000000000000000000000000000000000000000;;	// Copyright 2016 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
1861d099d10ddfa47b9f2b8b925fc11bd0827dac;Godeps/_workspace/src/github.com/coreos/etcd/alarm/alarms.go[Godeps/_workspace/src/github.com/coreos/etcd/alarm/alarms.go][vendor/github.com/coreos/etcd/alarm/alarms.go];	
0000000000000000000000000000000000000000;;	// Package alarm manages health status alarms in etcd.
0000000000000000000000000000000000000000;;	package alarm
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pb "github.com/coreos/etcd/etcdserver/etcdserverpb"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/mvcc/backend"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/pkg/types"
0000000000000000000000000000000000000000;;		"github.com/coreos/pkg/capnslog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		alarmBucketName = []byte("alarm")
0000000000000000000000000000000000000000;;		plog            = capnslog.NewPackageLogger("github.com/coreos/etcd", "alarm")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BackendGetter interface {
0000000000000000000000000000000000000000;;		Backend() backend.Backend
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type alarmSet map[types.ID]*pb.AlarmMember
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AlarmStore persists alarms to the backend.
0000000000000000000000000000000000000000;;	type AlarmStore struct {
0000000000000000000000000000000000000000;;		mu    sync.Mutex
0000000000000000000000000000000000000000;;		types map[pb.AlarmType]alarmSet
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		bg BackendGetter
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewAlarmStore(bg BackendGetter) (*AlarmStore, error) {
0000000000000000000000000000000000000000;;		ret := &AlarmStore{types: make(map[pb.AlarmType]alarmSet), bg: bg}
0000000000000000000000000000000000000000;;		err := ret.restore()
0000000000000000000000000000000000000000;;		return ret, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *AlarmStore) Activate(id types.ID, at pb.AlarmType) *pb.AlarmMember {
0000000000000000000000000000000000000000;;		a.mu.Lock()
0000000000000000000000000000000000000000;;		defer a.mu.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		newAlarm := &pb.AlarmMember{MemberID: uint64(id), Alarm: at}
0000000000000000000000000000000000000000;;		if m := a.addToMap(newAlarm); m != newAlarm {
0000000000000000000000000000000000000000;;			return m
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		v, err := newAlarm.Marshal()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			plog.Panicf("failed to marshal alarm member")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		b := a.bg.Backend()
0000000000000000000000000000000000000000;;		b.BatchTx().Lock()
0000000000000000000000000000000000000000;;		b.BatchTx().UnsafePut(alarmBucketName, v, nil)
0000000000000000000000000000000000000000;;		b.BatchTx().Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return newAlarm
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *AlarmStore) Deactivate(id types.ID, at pb.AlarmType) *pb.AlarmMember {
0000000000000000000000000000000000000000;;		a.mu.Lock()
0000000000000000000000000000000000000000;;		defer a.mu.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		t := a.types[at]
0000000000000000000000000000000000000000;;		if t == nil {
0000000000000000000000000000000000000000;;			t = make(alarmSet)
0000000000000000000000000000000000000000;;			a.types[at] = t
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		m := t[id]
0000000000000000000000000000000000000000;;		if m == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		delete(t, id)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		v, err := m.Marshal()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			plog.Panicf("failed to marshal alarm member")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		b := a.bg.Backend()
0000000000000000000000000000000000000000;;		b.BatchTx().Lock()
0000000000000000000000000000000000000000;;		b.BatchTx().UnsafeDelete(alarmBucketName, v)
0000000000000000000000000000000000000000;;		b.BatchTx().Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return m
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *AlarmStore) Get(at pb.AlarmType) (ret []*pb.AlarmMember) {
0000000000000000000000000000000000000000;;		a.mu.Lock()
0000000000000000000000000000000000000000;;		defer a.mu.Unlock()
0000000000000000000000000000000000000000;;		if at == pb.AlarmType_NONE {
0000000000000000000000000000000000000000;;			for _, t := range a.types {
0000000000000000000000000000000000000000;;				for _, m := range t {
0000000000000000000000000000000000000000;;					ret = append(ret, m)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return ret
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, m := range a.types[at] {
0000000000000000000000000000000000000000;;			ret = append(ret, m)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *AlarmStore) restore() error {
0000000000000000000000000000000000000000;;		b := a.bg.Backend()
0000000000000000000000000000000000000000;;		tx := b.BatchTx()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tx.Lock()
0000000000000000000000000000000000000000;;		tx.UnsafeCreateBucket(alarmBucketName)
0000000000000000000000000000000000000000;;		err := tx.UnsafeForEach(alarmBucketName, func(k, v []byte) error {
0000000000000000000000000000000000000000;;			var m pb.AlarmMember
0000000000000000000000000000000000000000;;			if err := m.Unmarshal(k); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			a.addToMap(&m)
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		tx.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		b.ForceCommit()
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *AlarmStore) addToMap(newAlarm *pb.AlarmMember) *pb.AlarmMember {
0000000000000000000000000000000000000000;;		t := a.types[newAlarm.Alarm]
0000000000000000000000000000000000000000;;		if t == nil {
0000000000000000000000000000000000000000;;			t = make(alarmSet)
0000000000000000000000000000000000000000;;			a.types[newAlarm.Alarm] = t
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		m := t[types.ID(newAlarm.MemberID)]
0000000000000000000000000000000000000000;;		if m != nil {
0000000000000000000000000000000000000000;;			return m
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		t[types.ID(newAlarm.MemberID)] = newAlarm
0000000000000000000000000000000000000000;;		return newAlarm
0000000000000000000000000000000000000000;;	}
