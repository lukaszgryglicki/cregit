0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/coreos/etcd/rafthttp/util.go[Godeps/_workspace/src/github.com/coreos/etcd/rafthttp/util.go][vendor/github.com/coreos/etcd/rafthttp/util.go];	
0000000000000000000000000000000000000000;;	package rafthttp
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"crypto/tls"
0000000000000000000000000000000000000000;;		"encoding/binary"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/pkg/transport"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/pkg/types"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/raft/raftpb"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/version"
0000000000000000000000000000000000000000;;		"github.com/coreos/go-semver/semver"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		errMemberRemoved  = fmt.Errorf("the member has been permanently removed from the cluster")
0000000000000000000000000000000000000000;;		errMemberNotFound = fmt.Errorf("member not found")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewListener returns a listener for raft message transfer between peers.
0000000000000000000000000000000000000000;;	// It uses timeout listener to identify broken streams promptly.
0000000000000000000000000000000000000000;;	func NewListener(u url.URL, tlscfg *tls.Config) (net.Listener, error) {
0000000000000000000000000000000000000000;;		return transport.NewTimeoutListener(u.Host, u.Scheme, tlscfg, ConnReadTimeout, ConnWriteTimeout)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewRoundTripper returns a roundTripper used to send requests
0000000000000000000000000000000000000000;;	// to rafthttp listener of remote peers.
0000000000000000000000000000000000000000;;	func NewRoundTripper(tlsInfo transport.TLSInfo, dialTimeout time.Duration) (http.RoundTripper, error) {
0000000000000000000000000000000000000000;;		// It uses timeout transport to pair with remote timeout listeners.
0000000000000000000000000000000000000000;;		// It sets no read/write timeout, because message in requests may
0000000000000000000000000000000000000000;;		// take long time to write out before reading out the response.
0000000000000000000000000000000000000000;;		return transport.NewTimeoutTransport(tlsInfo, dialTimeout, 0, 0)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// newStreamRoundTripper returns a roundTripper used to send stream requests
0000000000000000000000000000000000000000;;	// to rafthttp listener of remote peers.
0000000000000000000000000000000000000000;;	// Read/write timeout is set for stream roundTripper to promptly
0000000000000000000000000000000000000000;;	// find out broken status, which minimizes the number of messages
0000000000000000000000000000000000000000;;	// sent on broken connection.
0000000000000000000000000000000000000000;;	func newStreamRoundTripper(tlsInfo transport.TLSInfo, dialTimeout time.Duration) (http.RoundTripper, error) {
0000000000000000000000000000000000000000;;		return transport.NewTimeoutTransport(tlsInfo, dialTimeout, ConnReadTimeout, ConnWriteTimeout)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func writeEntryTo(w io.Writer, ent *raftpb.Entry) error {
0000000000000000000000000000000000000000;;		size := ent.Size()
0000000000000000000000000000000000000000;;		if err := binary.Write(w, binary.BigEndian, uint64(size)); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		b, err := ent.Marshal()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, err = w.Write(b)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func readEntryFrom(r io.Reader, ent *raftpb.Entry) error {
0000000000000000000000000000000000000000;;		var l uint64
0000000000000000000000000000000000000000;;		if err := binary.Read(r, binary.BigEndian, &l); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		buf := make([]byte, int(l))
0000000000000000000000000000000000000000;;		if _, err := io.ReadFull(r, buf); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ent.Unmarshal(buf)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// createPostRequest creates a HTTP POST request that sends raft message.
0000000000000000000000000000000000000000;;	func createPostRequest(u url.URL, path string, body io.Reader, ct string, urls types.URLs, from, cid types.ID) *http.Request {
0000000000000000000000000000000000000000;;		uu := u
0000000000000000000000000000000000000000;;		uu.Path = path
0000000000000000000000000000000000000000;;		req, err := http.NewRequest("POST", uu.String(), body)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			plog.Panicf("unexpected new request error (%v)", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		req.Header.Set("Content-Type", ct)
0000000000000000000000000000000000000000;;		req.Header.Set("X-Server-From", from.String())
0000000000000000000000000000000000000000;;		req.Header.Set("X-Server-Version", version.Version)
0000000000000000000000000000000000000000;;		req.Header.Set("X-Min-Cluster-Version", version.MinClusterVersion)
0000000000000000000000000000000000000000;;		req.Header.Set("X-Etcd-Cluster-ID", cid.String())
0000000000000000000000000000000000000000;;		setPeerURLsHeader(req, urls)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return req
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// checkPostResponse checks the response of the HTTP POST request that sends
0000000000000000000000000000000000000000;;	// raft message.
0000000000000000000000000000000000000000;;	func checkPostResponse(resp *http.Response, body []byte, req *http.Request, to types.ID) error {
0000000000000000000000000000000000000000;;		switch resp.StatusCode {
0000000000000000000000000000000000000000;;		case http.StatusPreconditionFailed:
0000000000000000000000000000000000000000;;			switch strings.TrimSuffix(string(body), "\n") {
0000000000000000000000000000000000000000;;			case errIncompatibleVersion.Error():
0000000000000000000000000000000000000000;;				plog.Errorf("request sent was ignored by peer %s (server version incompatible)", to)
0000000000000000000000000000000000000000;;				return errIncompatibleVersion
0000000000000000000000000000000000000000;;			case errClusterIDMismatch.Error():
0000000000000000000000000000000000000000;;				plog.Errorf("request sent was ignored (cluster ID mismatch: remote[%s]=%s, local=%s)",
0000000000000000000000000000000000000000;;					to, resp.Header.Get("X-Etcd-Cluster-ID"), req.Header.Get("X-Etcd-Cluster-ID"))
0000000000000000000000000000000000000000;;				return errClusterIDMismatch
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				return fmt.Errorf("unhandled error %q when precondition failed", string(body))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case http.StatusForbidden:
0000000000000000000000000000000000000000;;			return errMemberRemoved
0000000000000000000000000000000000000000;;		case http.StatusNoContent:
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return fmt.Errorf("unexpected http status %s while posting to %q", http.StatusText(resp.StatusCode), req.URL.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// reportCriticalError reports the given error through sending it into
0000000000000000000000000000000000000000;;	// the given error channel.
0000000000000000000000000000000000000000;;	// If the error channel is filled up when sending error, it drops the error
0000000000000000000000000000000000000000;;	// because the fact that error has happened is reported, which is
0000000000000000000000000000000000000000;;	// good enough.
0000000000000000000000000000000000000000;;	func reportCriticalError(err error, errc chan<- error) {
0000000000000000000000000000000000000000;;		select {
0000000000000000000000000000000000000000;;		case errc <- err:
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// compareMajorMinorVersion returns an integer comparing two versions based on
0000000000000000000000000000000000000000;;	// their major and minor version. The result will be 0 if a==b, -1 if a < b,
0000000000000000000000000000000000000000;;	// and 1 if a > b.
0000000000000000000000000000000000000000;;	func compareMajorMinorVersion(a, b *semver.Version) int {
0000000000000000000000000000000000000000;;		na := &semver.Version{Major: a.Major, Minor: a.Minor}
0000000000000000000000000000000000000000;;		nb := &semver.Version{Major: b.Major, Minor: b.Minor}
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case na.LessThan(*nb):
0000000000000000000000000000000000000000;;			return -1
0000000000000000000000000000000000000000;;		case nb.LessThan(*na):
0000000000000000000000000000000000000000;;			return 1
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return 0
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// serverVersion returns the server version from the given header.
0000000000000000000000000000000000000000;;	func serverVersion(h http.Header) *semver.Version {
0000000000000000000000000000000000000000;;		verStr := h.Get("X-Server-Version")
0000000000000000000000000000000000000000;;		// backward compatibility with etcd 2.0
0000000000000000000000000000000000000000;;		if verStr == "" {
0000000000000000000000000000000000000000;;			verStr = "2.0.0"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return semver.Must(semver.NewVersion(verStr))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// serverVersion returns the min cluster version from the given header.
0000000000000000000000000000000000000000;;	func minClusterVersion(h http.Header) *semver.Version {
0000000000000000000000000000000000000000;;		verStr := h.Get("X-Min-Cluster-Version")
0000000000000000000000000000000000000000;;		// backward compatibility with etcd 2.0
0000000000000000000000000000000000000000;;		if verStr == "" {
0000000000000000000000000000000000000000;;			verStr = "2.0.0"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return semver.Must(semver.NewVersion(verStr))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// checkVersionCompability checks whether the given version is compatible
0000000000000000000000000000000000000000;;	// with the local version.
0000000000000000000000000000000000000000;;	func checkVersionCompability(name string, server, minCluster *semver.Version) error {
0000000000000000000000000000000000000000;;		localServer := semver.Must(semver.NewVersion(version.Version))
0000000000000000000000000000000000000000;;		localMinCluster := semver.Must(semver.NewVersion(version.MinClusterVersion))
0000000000000000000000000000000000000000;;		if compareMajorMinorVersion(server, localMinCluster) == -1 {
0000000000000000000000000000000000000000;;			return fmt.Errorf("remote version is too low: remote[%s]=%s, local=%s", name, server, localServer)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if compareMajorMinorVersion(minCluster, localServer) == 1 {
0000000000000000000000000000000000000000;;			return fmt.Errorf("local version is too low: remote[%s]=%s, local=%s", name, server, localServer)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// setPeerURLsHeader reports local urls for peer discovery
0000000000000000000000000000000000000000;;	func setPeerURLsHeader(req *http.Request, urls types.URLs) {
0000000000000000000000000000000000000000;;		if urls == nil {
0000000000000000000000000000000000000000;;			// often not set in unit tests
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		peerURLs := make([]string, urls.Len())
0000000000000000000000000000000000000000;;		for i := range urls {
0000000000000000000000000000000000000000;;			peerURLs[i] = urls[i].String()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		req.Header.Set("X-PeerURLs", strings.Join(peerURLs, ","))
0000000000000000000000000000000000000000;;	}
