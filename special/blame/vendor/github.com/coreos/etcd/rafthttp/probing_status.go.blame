0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/coreos/etcd/rafthttp/probing_status.go[Godeps/_workspace/src/github.com/coreos/etcd/rafthttp/probing_status.go][vendor/github.com/coreos/etcd/rafthttp/probing_status.go];	
0000000000000000000000000000000000000000;;	package rafthttp
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/xiang90/probing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		// proberInterval must be shorter than read timeout.
0000000000000000000000000000000000000000;;		// Or the connection will time-out.
0000000000000000000000000000000000000000;;		proberInterval           = ConnReadTimeout - time.Second
0000000000000000000000000000000000000000;;		statusMonitoringInterval = 30 * time.Second
0000000000000000000000000000000000000000;;		statusErrorInterval      = 5 * time.Second
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func addPeerToProber(p probing.Prober, id string, us []string) {
0000000000000000000000000000000000000000;;		hus := make([]string, len(us))
0000000000000000000000000000000000000000;;		for i := range us {
0000000000000000000000000000000000000000;;			hus[i] = us[i] + ProbingPrefix
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.AddHTTP(id, proberInterval, hus)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s, err := p.Status(id)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			plog.Errorf("failed to add peer %s into prober", id)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			go monitorProbingStatus(s, id)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func monitorProbingStatus(s probing.Status, id string) {
0000000000000000000000000000000000000000;;		// set the first interval short to log error early.
0000000000000000000000000000000000000000;;		interval := statusErrorInterval
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			select {
0000000000000000000000000000000000000000;;			case <-time.After(interval):
0000000000000000000000000000000000000000;;				if !s.Health() {
0000000000000000000000000000000000000000;;					plog.Warningf("health check for peer %s could not connect: %v", id, s.Err())
0000000000000000000000000000000000000000;;					interval = statusErrorInterval
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					interval = statusMonitoringInterval
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if s.ClockDiff() > time.Second {
0000000000000000000000000000000000000000;;					plog.Warningf("the clock difference against peer %s is too high [%v > %v]", id, s.ClockDiff(), time.Second)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				rtts.WithLabelValues(id).Observe(s.SRTT().Seconds())
0000000000000000000000000000000000000000;;			case <-s.StopNotify():
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
