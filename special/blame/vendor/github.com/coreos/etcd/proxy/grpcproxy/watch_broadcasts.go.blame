0000000000000000000000000000000000000000;;	// Copyright 2016 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
550be6508d59ea184bfb64f8ae23c177b9e6d1c9;;	
0000000000000000000000000000000000000000;;	package grpcproxy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type watchBroadcasts struct {
0000000000000000000000000000000000000000;;		wp *watchProxy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// mu protects bcasts and watchers from the coalesce loop.
0000000000000000000000000000000000000000;;		mu       sync.Mutex
0000000000000000000000000000000000000000;;		bcasts   map[*watchBroadcast]struct{}
0000000000000000000000000000000000000000;;		watchers map[*watcher]*watchBroadcast
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		updatec chan *watchBroadcast
0000000000000000000000000000000000000000;;		donec   chan struct{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// maxCoalesceRecievers prevents a popular watchBroadcast from being coalseced.
0000000000000000000000000000000000000000;;	const maxCoalesceReceivers = 5
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newWatchBroadcasts(wp *watchProxy) *watchBroadcasts {
0000000000000000000000000000000000000000;;		wbs := &watchBroadcasts{
0000000000000000000000000000000000000000;;			wp:       wp,
0000000000000000000000000000000000000000;;			bcasts:   make(map[*watchBroadcast]struct{}),
0000000000000000000000000000000000000000;;			watchers: make(map[*watcher]*watchBroadcast),
0000000000000000000000000000000000000000;;			updatec:  make(chan *watchBroadcast, 1),
0000000000000000000000000000000000000000;;			donec:    make(chan struct{}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			defer close(wbs.donec)
0000000000000000000000000000000000000000;;			for wb := range wbs.updatec {
0000000000000000000000000000000000000000;;				wbs.coalesce(wb)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		return wbs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (wbs *watchBroadcasts) coalesce(wb *watchBroadcast) {
0000000000000000000000000000000000000000;;		if wb.size() >= maxCoalesceReceivers {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		wbs.mu.Lock()
0000000000000000000000000000000000000000;;		for wbswb := range wbs.bcasts {
0000000000000000000000000000000000000000;;			if wbswb == wb {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			wb.mu.Lock()
0000000000000000000000000000000000000000;;			wbswb.mu.Lock()
0000000000000000000000000000000000000000;;			// 1. check if wbswb is behind wb so it won't skip any events in wb
0000000000000000000000000000000000000000;;			// 2. ensure wbswb started; nextrev == 0 may mean wbswb is waiting
0000000000000000000000000000000000000000;;			// for a current watcher and expects a create event from the server.
0000000000000000000000000000000000000000;;			if wb.nextrev >= wbswb.nextrev && wbswb.responses > 0 {
0000000000000000000000000000000000000000;;				for w := range wb.receivers {
0000000000000000000000000000000000000000;;					wbswb.receivers[w] = struct{}{}
0000000000000000000000000000000000000000;;					wbs.watchers[w] = wbswb
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				wb.receivers = nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			wbswb.mu.Unlock()
0000000000000000000000000000000000000000;;			wb.mu.Unlock()
0000000000000000000000000000000000000000;;			if wb.empty() {
0000000000000000000000000000000000000000;;				delete(wbs.bcasts, wb)
0000000000000000000000000000000000000000;;				wb.stop()
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		wbs.mu.Unlock()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (wbs *watchBroadcasts) add(w *watcher) {
0000000000000000000000000000000000000000;;		wbs.mu.Lock()
0000000000000000000000000000000000000000;;		defer wbs.mu.Unlock()
0000000000000000000000000000000000000000;;		// find fitting bcast
0000000000000000000000000000000000000000;;		for wb := range wbs.bcasts {
0000000000000000000000000000000000000000;;			if wb.add(w) {
0000000000000000000000000000000000000000;;				wbs.watchers[w] = wb
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// no fit; create a bcast
0000000000000000000000000000000000000000;;		wb := newWatchBroadcast(wbs.wp, w, wbs.update)
0000000000000000000000000000000000000000;;		wbs.watchers[w] = wb
0000000000000000000000000000000000000000;;		wbs.bcasts[wb] = struct{}{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// delete removes a watcher and returns the number of remaining watchers.
0000000000000000000000000000000000000000;;	func (wbs *watchBroadcasts) delete(w *watcher) int {
0000000000000000000000000000000000000000;;		wbs.mu.Lock()
0000000000000000000000000000000000000000;;		defer wbs.mu.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		wb, ok := wbs.watchers[w]
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			panic("deleting missing watcher from broadcasts")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		delete(wbs.watchers, w)
0000000000000000000000000000000000000000;;		wb.delete(w)
0000000000000000000000000000000000000000;;		if wb.empty() {
0000000000000000000000000000000000000000;;			delete(wbs.bcasts, wb)
0000000000000000000000000000000000000000;;			wb.stop()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return len(wbs.bcasts)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (wbs *watchBroadcasts) stop() {
0000000000000000000000000000000000000000;;		wbs.mu.Lock()
0000000000000000000000000000000000000000;;		for wb := range wbs.bcasts {
0000000000000000000000000000000000000000;;			wb.stop()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		wbs.bcasts = nil
0000000000000000000000000000000000000000;;		close(wbs.updatec)
0000000000000000000000000000000000000000;;		wbs.mu.Unlock()
0000000000000000000000000000000000000000;;		<-wbs.donec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (wbs *watchBroadcasts) update(wb *watchBroadcast) {
0000000000000000000000000000000000000000;;		select {
0000000000000000000000000000000000000000;;		case wbs.updatec <- wb:
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
