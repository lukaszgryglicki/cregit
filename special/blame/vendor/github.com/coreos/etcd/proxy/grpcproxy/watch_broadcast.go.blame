0000000000000000000000000000000000000000;;	// Copyright 2016 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
550be6508d59ea184bfb64f8ae23c177b9e6d1c9;;	
0000000000000000000000000000000000000000;;	package grpcproxy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/clientv3"
0000000000000000000000000000000000000000;;		pb "github.com/coreos/etcd/etcdserver/etcdserverpb"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// watchBroadcast broadcasts a server watcher to many client watchers.
0000000000000000000000000000000000000000;;	type watchBroadcast struct {
0000000000000000000000000000000000000000;;		// cancel stops the underlying etcd server watcher and closes ch.
0000000000000000000000000000000000000000;;		cancel context.CancelFunc
0000000000000000000000000000000000000000;;		donec  chan struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// mu protects rev and receivers.
0000000000000000000000000000000000000000;;		mu sync.RWMutex
0000000000000000000000000000000000000000;;		// nextrev is the minimum expected next revision of the watcher on ch.
0000000000000000000000000000000000000000;;		nextrev int64
0000000000000000000000000000000000000000;;		// receivers contains all the client-side watchers to serve.
0000000000000000000000000000000000000000;;		receivers map[*watcher]struct{}
0000000000000000000000000000000000000000;;		// responses counts the number of responses
0000000000000000000000000000000000000000;;		responses int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newWatchBroadcast(wp *watchProxy, w *watcher, update func(*watchBroadcast)) *watchBroadcast {
0000000000000000000000000000000000000000;;		cctx, cancel := context.WithCancel(wp.ctx)
0000000000000000000000000000000000000000;;		wb := &watchBroadcast{
0000000000000000000000000000000000000000;;			cancel:    cancel,
0000000000000000000000000000000000000000;;			nextrev:   w.nextrev,
0000000000000000000000000000000000000000;;			receivers: make(map[*watcher]struct{}),
0000000000000000000000000000000000000000;;			donec:     make(chan struct{}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		wb.add(w)
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			defer close(wb.donec)
0000000000000000000000000000000000000000;;			// loop because leader loss will close channel
0000000000000000000000000000000000000000;;			for cctx.Err() == nil {
0000000000000000000000000000000000000000;;				opts := []clientv3.OpOption{
0000000000000000000000000000000000000000;;					clientv3.WithRange(w.wr.end),
0000000000000000000000000000000000000000;;					clientv3.WithProgressNotify(),
0000000000000000000000000000000000000000;;					clientv3.WithRev(wb.nextrev),
0000000000000000000000000000000000000000;;					clientv3.WithPrevKV(),
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				// The create notification should be the first response;
0000000000000000000000000000000000000000;;				// if the watch is recreated following leader loss, it
0000000000000000000000000000000000000000;;				// shouldn't post a second create response to the client.
0000000000000000000000000000000000000000;;				if wb.responses == 0 {
0000000000000000000000000000000000000000;;					opts = append(opts, clientv3.WithCreatedNotify())
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				wch := wp.cw.Watch(cctx, w.wr.key, opts...)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				for wr := range wch {
0000000000000000000000000000000000000000;;					wb.bcast(wr)
0000000000000000000000000000000000000000;;					update(wb)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				wp.retryLimiter.Wait(cctx)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		return wb
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (wb *watchBroadcast) bcast(wr clientv3.WatchResponse) {
0000000000000000000000000000000000000000;;		wb.mu.Lock()
0000000000000000000000000000000000000000;;		defer wb.mu.Unlock()
0000000000000000000000000000000000000000;;		// watchers start on the given revision, if any; ignore header rev on create
0000000000000000000000000000000000000000;;		if wb.responses > 0 || wb.nextrev == 0 {
0000000000000000000000000000000000000000;;			wb.nextrev = wr.Header.Revision + 1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		wb.responses++
0000000000000000000000000000000000000000;;		for r := range wb.receivers {
0000000000000000000000000000000000000000;;			r.send(wr)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(wb.receivers) > 0 {
0000000000000000000000000000000000000000;;			eventsCoalescing.Add(float64(len(wb.receivers) - 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// add puts a watcher into receiving a broadcast if its revision at least
0000000000000000000000000000000000000000;;	// meets the broadcast revision. Returns true if added.
0000000000000000000000000000000000000000;;	func (wb *watchBroadcast) add(w *watcher) bool {
0000000000000000000000000000000000000000;;		wb.mu.Lock()
0000000000000000000000000000000000000000;;		defer wb.mu.Unlock()
0000000000000000000000000000000000000000;;		if wb.nextrev > w.nextrev || (wb.nextrev == 0 && w.nextrev != 0) {
0000000000000000000000000000000000000000;;			// wb is too far ahead, w will miss events
0000000000000000000000000000000000000000;;			// or wb is being established with a current watcher
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if wb.responses == 0 {
0000000000000000000000000000000000000000;;			// Newly created; create event will be sent by etcd.
0000000000000000000000000000000000000000;;			wb.receivers[w] = struct{}{}
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// already sent by etcd; emulate create event
0000000000000000000000000000000000000000;;		ok := w.post(&pb.WatchResponse{
0000000000000000000000000000000000000000;;			Header: &pb.ResponseHeader{
0000000000000000000000000000000000000000;;				// todo: fill in ClusterId
0000000000000000000000000000000000000000;;				// todo: fill in MemberId:
0000000000000000000000000000000000000000;;				Revision: w.nextrev,
0000000000000000000000000000000000000000;;				// todo: fill in RaftTerm:
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			WatchId: w.id,
0000000000000000000000000000000000000000;;			Created: true,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		wb.receivers[w] = struct{}{}
0000000000000000000000000000000000000000;;		watchersCoalescing.Inc()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (wb *watchBroadcast) delete(w *watcher) {
0000000000000000000000000000000000000000;;		wb.mu.Lock()
0000000000000000000000000000000000000000;;		defer wb.mu.Unlock()
0000000000000000000000000000000000000000;;		if _, ok := wb.receivers[w]; !ok {
0000000000000000000000000000000000000000;;			panic("deleting missing watcher from broadcast")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		delete(wb.receivers, w)
0000000000000000000000000000000000000000;;		if len(wb.receivers) > 0 {
0000000000000000000000000000000000000000;;			// do not dec the only left watcher for coalescing.
0000000000000000000000000000000000000000;;			watchersCoalescing.Dec()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (wb *watchBroadcast) size() int {
0000000000000000000000000000000000000000;;		wb.mu.RLock()
0000000000000000000000000000000000000000;;		defer wb.mu.RUnlock()
0000000000000000000000000000000000000000;;		return len(wb.receivers)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (wb *watchBroadcast) empty() bool { return wb.size() == 0 }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (wb *watchBroadcast) stop() {
0000000000000000000000000000000000000000;;		if !wb.empty() {
0000000000000000000000000000000000000000;;			// do not dec the only left watcher for coalescing.
0000000000000000000000000000000000000000;;			watchersCoalescing.Sub(float64(wb.size() - 1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		wb.cancel()
0000000000000000000000000000000000000000;;		<-wb.donec
0000000000000000000000000000000000000000;;	}
