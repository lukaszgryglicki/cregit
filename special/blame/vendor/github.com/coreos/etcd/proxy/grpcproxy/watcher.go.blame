0000000000000000000000000000000000000000;;	// Copyright 2016 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
550be6508d59ea184bfb64f8ae23c177b9e6d1c9;;	
0000000000000000000000000000000000000000;;	package grpcproxy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/clientv3"
0000000000000000000000000000000000000000;;		pb "github.com/coreos/etcd/etcdserver/etcdserverpb"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/mvcc"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/mvcc/mvccpb"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type watchRange struct {
0000000000000000000000000000000000000000;;		key, end string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (wr *watchRange) valid() bool {
0000000000000000000000000000000000000000;;		return len(wr.end) == 0 || wr.end > wr.key || (wr.end[0] == 0 && len(wr.end) == 1)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type watcher struct {
0000000000000000000000000000000000000000;;		// user configuration
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		wr       watchRange
0000000000000000000000000000000000000000;;		filters  []mvcc.FilterFunc
0000000000000000000000000000000000000000;;		progress bool
0000000000000000000000000000000000000000;;		prevKV   bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// id is the id returned to the client on its watch stream.
0000000000000000000000000000000000000000;;		id int64
0000000000000000000000000000000000000000;;		// nextrev is the minimum expected next event revision.
0000000000000000000000000000000000000000;;		nextrev int64
0000000000000000000000000000000000000000;;		// lastHeader has the last header sent over the stream.
0000000000000000000000000000000000000000;;		lastHeader pb.ResponseHeader
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// wps is the parent.
0000000000000000000000000000000000000000;;		wps *watchProxyStream
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// send filters out repeated events by discarding revisions older
0000000000000000000000000000000000000000;;	// than the last one sent over the watch channel.
0000000000000000000000000000000000000000;;	func (w *watcher) send(wr clientv3.WatchResponse) {
0000000000000000000000000000000000000000;;		if wr.IsProgressNotify() && !w.progress {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if w.nextrev > wr.Header.Revision && len(wr.Events) > 0 {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if w.nextrev == 0 {
0000000000000000000000000000000000000000;;			// current watch; expect updates following this revision
0000000000000000000000000000000000000000;;			w.nextrev = wr.Header.Revision + 1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		events := make([]*mvccpb.Event, 0, len(wr.Events))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var lastRev int64
0000000000000000000000000000000000000000;;		for i := range wr.Events {
0000000000000000000000000000000000000000;;			ev := (*mvccpb.Event)(wr.Events[i])
0000000000000000000000000000000000000000;;			if ev.Kv.ModRevision < w.nextrev {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				// We cannot update w.rev here.
0000000000000000000000000000000000000000;;				// txn can have multiple events with the same rev.
0000000000000000000000000000000000000000;;				// If w.nextrev updates here, it would skip events in the same txn.
0000000000000000000000000000000000000000;;				lastRev = ev.Kv.ModRevision
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			filtered := false
0000000000000000000000000000000000000000;;			for _, filter := range w.filters {
0000000000000000000000000000000000000000;;				if filter(*ev) {
0000000000000000000000000000000000000000;;					filtered = true
0000000000000000000000000000000000000000;;					break
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if filtered {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !w.prevKV {
0000000000000000000000000000000000000000;;				evCopy := *ev
0000000000000000000000000000000000000000;;				evCopy.PrevKv = nil
0000000000000000000000000000000000000000;;				ev = &evCopy
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			events = append(events, ev)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if lastRev >= w.nextrev {
0000000000000000000000000000000000000000;;			w.nextrev = lastRev + 1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// all events are filtered out?
0000000000000000000000000000000000000000;;		if !wr.IsProgressNotify() && !wr.Created && len(events) == 0 {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		w.lastHeader = wr.Header
0000000000000000000000000000000000000000;;		w.post(&pb.WatchResponse{
0000000000000000000000000000000000000000;;			Header:  &wr.Header,
0000000000000000000000000000000000000000;;			Created: wr.Created,
0000000000000000000000000000000000000000;;			WatchId: w.id,
0000000000000000000000000000000000000000;;			Events:  events,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// post puts a watch response on the watcher's proxy stream channel
0000000000000000000000000000000000000000;;	func (w *watcher) post(wr *pb.WatchResponse) bool {
0000000000000000000000000000000000000000;;		select {
0000000000000000000000000000000000000000;;		case w.wps.watchCh <- wr:
0000000000000000000000000000000000000000;;		case <-time.After(50 * time.Millisecond):
0000000000000000000000000000000000000000;;			w.wps.cancel()
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
