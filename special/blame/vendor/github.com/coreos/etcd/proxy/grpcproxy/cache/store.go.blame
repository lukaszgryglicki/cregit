0000000000000000000000000000000000000000;;	// Copyright 2016 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
550be6508d59ea184bfb64f8ae23c177b9e6d1c9;;	
0000000000000000000000000000000000000000;;	package cache
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/karlseguin/ccache"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/etcdserver/api/v3rpc/rpctypes"
0000000000000000000000000000000000000000;;		pb "github.com/coreos/etcd/etcdserver/etcdserverpb"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/pkg/adt"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		DefaultMaxEntries = 2048
0000000000000000000000000000000000000000;;		ErrCompacted      = rpctypes.ErrGRPCCompacted
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const defaultHistoricTTL = time.Hour
0000000000000000000000000000000000000000;;	const defaultCurrentTTL = time.Minute
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Cache interface {
0000000000000000000000000000000000000000;;		Add(req *pb.RangeRequest, resp *pb.RangeResponse)
0000000000000000000000000000000000000000;;		Get(req *pb.RangeRequest) (*pb.RangeResponse, error)
0000000000000000000000000000000000000000;;		Compact(revision int64)
0000000000000000000000000000000000000000;;		Invalidate(key []byte, endkey []byte)
0000000000000000000000000000000000000000;;		Close()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// keyFunc returns the key of an request, which is used to look up in the cache for it's caching response.
0000000000000000000000000000000000000000;;	func keyFunc(req *pb.RangeRequest) string {
0000000000000000000000000000000000000000;;		// TODO: use marshalTo to reduce allocation
0000000000000000000000000000000000000000;;		b, err := req.Marshal()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return string(b)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewCache(maxCacheEntries int) Cache {
0000000000000000000000000000000000000000;;		return &cache{
0000000000000000000000000000000000000000;;			lru:          ccache.New(ccache.Configure().MaxSize(int64(maxCacheEntries))),
0000000000000000000000000000000000000000;;			compactedRev: -1,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *cache) Close() { c.lru.Stop() }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// cache implements Cache
0000000000000000000000000000000000000000;;	type cache struct {
0000000000000000000000000000000000000000;;		mu  sync.RWMutex
0000000000000000000000000000000000000000;;		lru *ccache.Cache
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// a reverse index for cache invalidation
0000000000000000000000000000000000000000;;		cachedRanges adt.IntervalTree
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		compactedRev int64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Add adds the response of a request to the cache if its revision is larger than the compacted revision of the cache.
0000000000000000000000000000000000000000;;	func (c *cache) Add(req *pb.RangeRequest, resp *pb.RangeResponse) {
0000000000000000000000000000000000000000;;		key := keyFunc(req)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		c.mu.Lock()
0000000000000000000000000000000000000000;;		defer c.mu.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if req.Revision > c.compactedRev {
0000000000000000000000000000000000000000;;			if req.Revision == 0 {
0000000000000000000000000000000000000000;;				c.lru.Set(key, resp, defaultCurrentTTL)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				c.lru.Set(key, resp, defaultHistoricTTL)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// we do not need to invalidate a request with a revision specified.
0000000000000000000000000000000000000000;;		// so we do not need to add it into the reverse index.
0000000000000000000000000000000000000000;;		if req.Revision != 0 {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			iv  *adt.IntervalValue
0000000000000000000000000000000000000000;;			ivl adt.Interval
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		if len(req.RangeEnd) != 0 {
0000000000000000000000000000000000000000;;			ivl = adt.NewStringAffineInterval(string(req.Key), string(req.RangeEnd))
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			ivl = adt.NewStringAffinePoint(string(req.Key))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		iv = c.cachedRanges.Find(ivl)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if iv == nil {
0000000000000000000000000000000000000000;;			c.cachedRanges.Insert(ivl, []string{key})
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			iv.Val = append(iv.Val.([]string), key)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get looks up the caching response for a given request.
0000000000000000000000000000000000000000;;	// Get is also responsible for lazy eviction when accessing compacted entries.
0000000000000000000000000000000000000000;;	func (c *cache) Get(req *pb.RangeRequest) (*pb.RangeResponse, error) {
0000000000000000000000000000000000000000;;		key := keyFunc(req)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		c.mu.RLock()
0000000000000000000000000000000000000000;;		defer c.mu.RUnlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if req.Revision < c.compactedRev {
0000000000000000000000000000000000000000;;			c.lru.Delete(key)
0000000000000000000000000000000000000000;;			return nil, ErrCompacted
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if item := c.lru.Get(key); item != nil {
0000000000000000000000000000000000000000;;			return item.Value().(*pb.RangeResponse), nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, errors.New("not exist")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Invalidate invalidates the cache entries that intersecting with the given range from key to endkey.
0000000000000000000000000000000000000000;;	func (c *cache) Invalidate(key, endkey []byte) {
0000000000000000000000000000000000000000;;		c.mu.Lock()
0000000000000000000000000000000000000000;;		defer c.mu.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			ivs []*adt.IntervalValue
0000000000000000000000000000000000000000;;			ivl adt.Interval
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		if len(endkey) == 0 {
0000000000000000000000000000000000000000;;			ivl = adt.NewStringAffinePoint(string(key))
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			ivl = adt.NewStringAffineInterval(string(key), string(endkey))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ivs = c.cachedRanges.Stab(ivl)
0000000000000000000000000000000000000000;;		for _, iv := range ivs {
0000000000000000000000000000000000000000;;			keys := iv.Val.([]string)
0000000000000000000000000000000000000000;;			for _, key := range keys {
0000000000000000000000000000000000000000;;				c.lru.Delete(key)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// delete after removing all keys since it is destructive to 'ivs'
0000000000000000000000000000000000000000;;		c.cachedRanges.Delete(ivl)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Compact invalidate all caching response before the given rev.
0000000000000000000000000000000000000000;;	// Replace with the invalidation is lazy. The actual removal happens when the entries is accessed.
0000000000000000000000000000000000000000;;	func (c *cache) Compact(revision int64) {
0000000000000000000000000000000000000000;;		c.mu.Lock()
0000000000000000000000000000000000000000;;		defer c.mu.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if revision > c.compactedRev {
0000000000000000000000000000000000000000;;			c.compactedRev = revision
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
