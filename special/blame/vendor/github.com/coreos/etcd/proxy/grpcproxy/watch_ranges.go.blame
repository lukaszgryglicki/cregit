0000000000000000000000000000000000000000;;	// Copyright 2016 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
550be6508d59ea184bfb64f8ae23c177b9e6d1c9;;	
0000000000000000000000000000000000000000;;	package grpcproxy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// watchRanges tracks all open watches for the proxy.
0000000000000000000000000000000000000000;;	type watchRanges struct {
0000000000000000000000000000000000000000;;		wp *watchProxy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		mu     sync.Mutex
0000000000000000000000000000000000000000;;		bcasts map[watchRange]*watchBroadcasts
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newWatchRanges(wp *watchProxy) *watchRanges {
0000000000000000000000000000000000000000;;		return &watchRanges{
0000000000000000000000000000000000000000;;			wp:     wp,
0000000000000000000000000000000000000000;;			bcasts: make(map[watchRange]*watchBroadcasts),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (wrs *watchRanges) add(w *watcher) {
0000000000000000000000000000000000000000;;		wrs.mu.Lock()
0000000000000000000000000000000000000000;;		defer wrs.mu.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if wbs := wrs.bcasts[w.wr]; wbs != nil {
0000000000000000000000000000000000000000;;			wbs.add(w)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		wbs := newWatchBroadcasts(wrs.wp)
0000000000000000000000000000000000000000;;		wrs.bcasts[w.wr] = wbs
0000000000000000000000000000000000000000;;		wbs.add(w)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (wrs *watchRanges) delete(w *watcher) {
0000000000000000000000000000000000000000;;		wrs.mu.Lock()
0000000000000000000000000000000000000000;;		defer wrs.mu.Unlock()
0000000000000000000000000000000000000000;;		wbs, ok := wrs.bcasts[w.wr]
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			panic("deleting missing range")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if wbs.delete(w) == 0 {
0000000000000000000000000000000000000000;;			wbs.stop()
0000000000000000000000000000000000000000;;			delete(wrs.bcasts, w.wr)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (wrs *watchRanges) stop() {
0000000000000000000000000000000000000000;;		wrs.mu.Lock()
0000000000000000000000000000000000000000;;		defer wrs.mu.Unlock()
0000000000000000000000000000000000000000;;		for _, wb := range wrs.bcasts {
0000000000000000000000000000000000000000;;			wb.stop()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		wrs.bcasts = nil
0000000000000000000000000000000000000000;;	}
