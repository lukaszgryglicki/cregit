0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/coreos/etcd/raft/util.go[Godeps/_workspace/src/github.com/coreos/etcd/raft/util.go][vendor/github.com/coreos/etcd/raft/util.go];	
0000000000000000000000000000000000000000;;	package raft
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pb "github.com/coreos/etcd/raft/raftpb"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (st StateType) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		return []byte(fmt.Sprintf("%q", st.String())), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// uint64Slice implements sort interface
0000000000000000000000000000000000000000;;	type uint64Slice []uint64
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p uint64Slice) Len() int           { return len(p) }
0000000000000000000000000000000000000000;;	func (p uint64Slice) Less(i, j int) bool { return p[i] < p[j] }
0000000000000000000000000000000000000000;;	func (p uint64Slice) Swap(i, j int)      { p[i], p[j] = p[j], p[i] }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func min(a, b uint64) uint64 {
0000000000000000000000000000000000000000;;		if a > b {
0000000000000000000000000000000000000000;;			return b
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return a
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func max(a, b uint64) uint64 {
0000000000000000000000000000000000000000;;		if a > b {
0000000000000000000000000000000000000000;;			return a
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return b
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func IsLocalMsg(msgt pb.MessageType) bool {
0000000000000000000000000000000000000000;;		return msgt == pb.MsgHup || msgt == pb.MsgBeat || msgt == pb.MsgUnreachable ||
0000000000000000000000000000000000000000;;			msgt == pb.MsgSnapStatus || msgt == pb.MsgCheckQuorum
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func IsResponseMsg(msgt pb.MessageType) bool {
0000000000000000000000000000000000000000;;		return msgt == pb.MsgAppResp || msgt == pb.MsgVoteResp || msgt == pb.MsgHeartbeatResp || msgt == pb.MsgUnreachable || msgt == pb.MsgPreVoteResp
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// voteResponseType maps vote and prevote message types to their corresponding responses.
0000000000000000000000000000000000000000;;	func voteRespMsgType(msgt pb.MessageType) pb.MessageType {
0000000000000000000000000000000000000000;;		switch msgt {
0000000000000000000000000000000000000000;;		case pb.MsgVote:
0000000000000000000000000000000000000000;;			return pb.MsgVoteResp
0000000000000000000000000000000000000000;;		case pb.MsgPreVote:
0000000000000000000000000000000000000000;;			return pb.MsgPreVoteResp
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			panic(fmt.Sprintf("not a vote message: %s", msgt))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EntryFormatter can be implemented by the application to provide human-readable formatting
0000000000000000000000000000000000000000;;	// of entry data. Nil is a valid EntryFormatter and will use a default format.
0000000000000000000000000000000000000000;;	type EntryFormatter func([]byte) string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeMessage returns a concise human-readable description of a
0000000000000000000000000000000000000000;;	// Message for debugging.
0000000000000000000000000000000000000000;;	func DescribeMessage(m pb.Message, f EntryFormatter) string {
0000000000000000000000000000000000000000;;		var buf bytes.Buffer
0000000000000000000000000000000000000000;;		fmt.Fprintf(&buf, "%x->%x %v Term:%d Log:%d/%d", m.From, m.To, m.Type, m.Term, m.LogTerm, m.Index)
0000000000000000000000000000000000000000;;		if m.Reject {
0000000000000000000000000000000000000000;;			fmt.Fprintf(&buf, " Rejected")
0000000000000000000000000000000000000000;;			if m.RejectHint != 0 {
0000000000000000000000000000000000000000;;				fmt.Fprintf(&buf, "(Hint:%d)", m.RejectHint)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if m.Commit != 0 {
0000000000000000000000000000000000000000;;			fmt.Fprintf(&buf, " Commit:%d", m.Commit)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(m.Entries) > 0 {
0000000000000000000000000000000000000000;;			fmt.Fprintf(&buf, " Entries:[")
0000000000000000000000000000000000000000;;			for i, e := range m.Entries {
0000000000000000000000000000000000000000;;				if i != 0 {
0000000000000000000000000000000000000000;;					buf.WriteString(", ")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				buf.WriteString(DescribeEntry(e, f))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			fmt.Fprintf(&buf, "]")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !IsEmptySnap(m.Snapshot) {
0000000000000000000000000000000000000000;;			fmt.Fprintf(&buf, " Snapshot:%v", m.Snapshot)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return buf.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescribeEntry returns a concise human-readable description of an
0000000000000000000000000000000000000000;;	// Entry for debugging.
0000000000000000000000000000000000000000;;	func DescribeEntry(e pb.Entry, f EntryFormatter) string {
0000000000000000000000000000000000000000;;		var formatted string
0000000000000000000000000000000000000000;;		if e.Type == pb.EntryNormal && f != nil {
0000000000000000000000000000000000000000;;			formatted = f(e.Data)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			formatted = fmt.Sprintf("%q", e.Data)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%d/%d %s %s", e.Term, e.Index, e.Type, formatted)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func limitSize(ents []pb.Entry, maxSize uint64) []pb.Entry {
0000000000000000000000000000000000000000;;		if len(ents) == 0 {
0000000000000000000000000000000000000000;;			return ents
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		size := ents[0].Size()
0000000000000000000000000000000000000000;;		var limit int
0000000000000000000000000000000000000000;;		for limit = 1; limit < len(ents); limit++ {
0000000000000000000000000000000000000000;;			size += ents[limit].Size()
0000000000000000000000000000000000000000;;			if uint64(size) > maxSize {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ents[:limit]
0000000000000000000000000000000000000000;;	}
