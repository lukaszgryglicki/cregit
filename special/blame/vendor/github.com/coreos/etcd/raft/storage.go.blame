0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/coreos/etcd/raft/storage.go[Godeps/_workspace/src/github.com/coreos/etcd/raft/storage.go][vendor/github.com/coreos/etcd/raft/storage.go];	
0000000000000000000000000000000000000000;;	package raft
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pb "github.com/coreos/etcd/raft/raftpb"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrCompacted is returned by Storage.Entries/Compact when a requested
0000000000000000000000000000000000000000;;	// index is unavailable because it predates the last snapshot.
0000000000000000000000000000000000000000;;	var ErrCompacted = errors.New("requested index is unavailable due to compaction")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrSnapOutOfDate is returned by Storage.CreateSnapshot when a requested
0000000000000000000000000000000000000000;;	// index is older than the existing snapshot.
0000000000000000000000000000000000000000;;	var ErrSnapOutOfDate = errors.New("requested index is older than the existing snapshot")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrUnavailable is returned by Storage interface when the requested log entries
0000000000000000000000000000000000000000;;	// are unavailable.
0000000000000000000000000000000000000000;;	var ErrUnavailable = errors.New("requested entry at index is unavailable")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrSnapshotTemporarilyUnavailable is returned by the Storage interface when the required
0000000000000000000000000000000000000000;;	// snapshot is temporarily unavailable.
0000000000000000000000000000000000000000;;	var ErrSnapshotTemporarilyUnavailable = errors.New("snapshot is temporarily unavailable")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Storage is an interface that may be implemented by the application
0000000000000000000000000000000000000000;;	// to retrieve log entries from storage.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If any Storage method returns an error, the raft instance will
0000000000000000000000000000000000000000;;	// become inoperable and refuse to participate in elections; the
0000000000000000000000000000000000000000;;	// application is responsible for cleanup and recovery in this case.
0000000000000000000000000000000000000000;;	type Storage interface {
0000000000000000000000000000000000000000;;		// InitialState returns the saved HardState and ConfState information.
0000000000000000000000000000000000000000;;		InitialState() (pb.HardState, pb.ConfState, error)
0000000000000000000000000000000000000000;;		// Entries returns a slice of log entries in the range [lo,hi).
0000000000000000000000000000000000000000;;		// MaxSize limits the total size of the log entries returned, but
0000000000000000000000000000000000000000;;		// Entries returns at least one entry if any.
0000000000000000000000000000000000000000;;		Entries(lo, hi, maxSize uint64) ([]pb.Entry, error)
0000000000000000000000000000000000000000;;		// Term returns the term of entry i, which must be in the range
0000000000000000000000000000000000000000;;		// [FirstIndex()-1, LastIndex()]. The term of the entry before
0000000000000000000000000000000000000000;;		// FirstIndex is retained for matching purposes even though the
0000000000000000000000000000000000000000;;		// rest of that entry may not be available.
0000000000000000000000000000000000000000;;		Term(i uint64) (uint64, error)
0000000000000000000000000000000000000000;;		// LastIndex returns the index of the last entry in the log.
0000000000000000000000000000000000000000;;		LastIndex() (uint64, error)
0000000000000000000000000000000000000000;;		// FirstIndex returns the index of the first log entry that is
0000000000000000000000000000000000000000;;		// possibly available via Entries (older entries have been incorporated
0000000000000000000000000000000000000000;;		// into the latest Snapshot; if storage only contains the dummy entry the
0000000000000000000000000000000000000000;;		// first log entry is not available).
0000000000000000000000000000000000000000;;		FirstIndex() (uint64, error)
0000000000000000000000000000000000000000;;		// Snapshot returns the most recent snapshot.
0000000000000000000000000000000000000000;;		// If snapshot is temporarily unavailable, it should return ErrSnapshotTemporarilyUnavailable,
0000000000000000000000000000000000000000;;		// so raft state machine could know that Storage needs some time to prepare
0000000000000000000000000000000000000000;;		// snapshot and call Snapshot later.
0000000000000000000000000000000000000000;;		Snapshot() (pb.Snapshot, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MemoryStorage implements the Storage interface backed by an
0000000000000000000000000000000000000000;;	// in-memory array.
0000000000000000000000000000000000000000;;	type MemoryStorage struct {
0000000000000000000000000000000000000000;;		// Protects access to all fields. Most methods of MemoryStorage are
0000000000000000000000000000000000000000;;		// run on the raft goroutine, but Append() is run on an application
0000000000000000000000000000000000000000;;		// goroutine.
0000000000000000000000000000000000000000;;		sync.Mutex
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		hardState pb.HardState
0000000000000000000000000000000000000000;;		snapshot  pb.Snapshot
0000000000000000000000000000000000000000;;		// ents[i] has raft log position i+snapshot.Metadata.Index
0000000000000000000000000000000000000000;;		ents []pb.Entry
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewMemoryStorage creates an empty MemoryStorage.
0000000000000000000000000000000000000000;;	func NewMemoryStorage() *MemoryStorage {
0000000000000000000000000000000000000000;;		return &MemoryStorage{
0000000000000000000000000000000000000000;;			// When starting from scratch populate the list with a dummy entry at term zero.
0000000000000000000000000000000000000000;;			ents: make([]pb.Entry, 1),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InitialState implements the Storage interface.
0000000000000000000000000000000000000000;;	func (ms *MemoryStorage) InitialState() (pb.HardState, pb.ConfState, error) {
0000000000000000000000000000000000000000;;		return ms.hardState, ms.snapshot.Metadata.ConfState, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHardState saves the current HardState.
0000000000000000000000000000000000000000;;	func (ms *MemoryStorage) SetHardState(st pb.HardState) error {
0000000000000000000000000000000000000000;;		ms.Lock()
0000000000000000000000000000000000000000;;		defer ms.Unlock()
0000000000000000000000000000000000000000;;		ms.hardState = st
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Entries implements the Storage interface.
0000000000000000000000000000000000000000;;	func (ms *MemoryStorage) Entries(lo, hi, maxSize uint64) ([]pb.Entry, error) {
0000000000000000000000000000000000000000;;		ms.Lock()
0000000000000000000000000000000000000000;;		defer ms.Unlock()
0000000000000000000000000000000000000000;;		offset := ms.ents[0].Index
0000000000000000000000000000000000000000;;		if lo <= offset {
0000000000000000000000000000000000000000;;			return nil, ErrCompacted
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if hi > ms.lastIndex()+1 {
0000000000000000000000000000000000000000;;			raftLogger.Panicf("entries' hi(%d) is out of bound lastindex(%d)", hi, ms.lastIndex())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// only contains dummy entries.
0000000000000000000000000000000000000000;;		if len(ms.ents) == 1 {
0000000000000000000000000000000000000000;;			return nil, ErrUnavailable
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ents := ms.ents[lo-offset : hi-offset]
0000000000000000000000000000000000000000;;		return limitSize(ents, maxSize), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Term implements the Storage interface.
0000000000000000000000000000000000000000;;	func (ms *MemoryStorage) Term(i uint64) (uint64, error) {
0000000000000000000000000000000000000000;;		ms.Lock()
0000000000000000000000000000000000000000;;		defer ms.Unlock()
0000000000000000000000000000000000000000;;		offset := ms.ents[0].Index
0000000000000000000000000000000000000000;;		if i < offset {
0000000000000000000000000000000000000000;;			return 0, ErrCompacted
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if int(i-offset) >= len(ms.ents) {
0000000000000000000000000000000000000000;;			return 0, ErrUnavailable
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ms.ents[i-offset].Term, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LastIndex implements the Storage interface.
0000000000000000000000000000000000000000;;	func (ms *MemoryStorage) LastIndex() (uint64, error) {
0000000000000000000000000000000000000000;;		ms.Lock()
0000000000000000000000000000000000000000;;		defer ms.Unlock()
0000000000000000000000000000000000000000;;		return ms.lastIndex(), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ms *MemoryStorage) lastIndex() uint64 {
0000000000000000000000000000000000000000;;		return ms.ents[0].Index + uint64(len(ms.ents)) - 1
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FirstIndex implements the Storage interface.
0000000000000000000000000000000000000000;;	func (ms *MemoryStorage) FirstIndex() (uint64, error) {
0000000000000000000000000000000000000000;;		ms.Lock()
0000000000000000000000000000000000000000;;		defer ms.Unlock()
0000000000000000000000000000000000000000;;		return ms.firstIndex(), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ms *MemoryStorage) firstIndex() uint64 {
0000000000000000000000000000000000000000;;		return ms.ents[0].Index + 1
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Snapshot implements the Storage interface.
0000000000000000000000000000000000000000;;	func (ms *MemoryStorage) Snapshot() (pb.Snapshot, error) {
0000000000000000000000000000000000000000;;		ms.Lock()
0000000000000000000000000000000000000000;;		defer ms.Unlock()
0000000000000000000000000000000000000000;;		return ms.snapshot, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplySnapshot overwrites the contents of this Storage object with
0000000000000000000000000000000000000000;;	// those of the given snapshot.
0000000000000000000000000000000000000000;;	func (ms *MemoryStorage) ApplySnapshot(snap pb.Snapshot) error {
0000000000000000000000000000000000000000;;		ms.Lock()
0000000000000000000000000000000000000000;;		defer ms.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		//handle check for old snapshot being applied
0000000000000000000000000000000000000000;;		msIndex := ms.snapshot.Metadata.Index
0000000000000000000000000000000000000000;;		snapIndex := snap.Metadata.Index
0000000000000000000000000000000000000000;;		if msIndex >= snapIndex {
0000000000000000000000000000000000000000;;			return ErrSnapOutOfDate
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ms.snapshot = snap
0000000000000000000000000000000000000000;;		ms.ents = []pb.Entry{{Term: snap.Metadata.Term, Index: snap.Metadata.Index}}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateSnapshot makes a snapshot which can be retrieved with Snapshot() and
0000000000000000000000000000000000000000;;	// can be used to reconstruct the state at that point.
0000000000000000000000000000000000000000;;	// If any configuration changes have been made since the last compaction,
0000000000000000000000000000000000000000;;	// the result of the last ApplyConfChange must be passed in.
0000000000000000000000000000000000000000;;	func (ms *MemoryStorage) CreateSnapshot(i uint64, cs *pb.ConfState, data []byte) (pb.Snapshot, error) {
0000000000000000000000000000000000000000;;		ms.Lock()
0000000000000000000000000000000000000000;;		defer ms.Unlock()
0000000000000000000000000000000000000000;;		if i <= ms.snapshot.Metadata.Index {
0000000000000000000000000000000000000000;;			return pb.Snapshot{}, ErrSnapOutOfDate
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		offset := ms.ents[0].Index
0000000000000000000000000000000000000000;;		if i > ms.lastIndex() {
0000000000000000000000000000000000000000;;			raftLogger.Panicf("snapshot %d is out of bound lastindex(%d)", i, ms.lastIndex())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ms.snapshot.Metadata.Index = i
0000000000000000000000000000000000000000;;		ms.snapshot.Metadata.Term = ms.ents[i-offset].Term
0000000000000000000000000000000000000000;;		if cs != nil {
0000000000000000000000000000000000000000;;			ms.snapshot.Metadata.ConfState = *cs
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ms.snapshot.Data = data
0000000000000000000000000000000000000000;;		return ms.snapshot, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Compact discards all log entries prior to compactIndex.
0000000000000000000000000000000000000000;;	// It is the application's responsibility to not attempt to compact an index
0000000000000000000000000000000000000000;;	// greater than raftLog.applied.
0000000000000000000000000000000000000000;;	func (ms *MemoryStorage) Compact(compactIndex uint64) error {
0000000000000000000000000000000000000000;;		ms.Lock()
0000000000000000000000000000000000000000;;		defer ms.Unlock()
0000000000000000000000000000000000000000;;		offset := ms.ents[0].Index
0000000000000000000000000000000000000000;;		if compactIndex <= offset {
0000000000000000000000000000000000000000;;			return ErrCompacted
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if compactIndex > ms.lastIndex() {
0000000000000000000000000000000000000000;;			raftLogger.Panicf("compact %d is out of bound lastindex(%d)", compactIndex, ms.lastIndex())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		i := compactIndex - offset
0000000000000000000000000000000000000000;;		ents := make([]pb.Entry, 1, 1+uint64(len(ms.ents))-i)
0000000000000000000000000000000000000000;;		ents[0].Index = ms.ents[i].Index
0000000000000000000000000000000000000000;;		ents[0].Term = ms.ents[i].Term
0000000000000000000000000000000000000000;;		ents = append(ents, ms.ents[i+1:]...)
0000000000000000000000000000000000000000;;		ms.ents = ents
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Append the new entries to storage.
0000000000000000000000000000000000000000;;	// TODO (xiangli): ensure the entries are continuous and
0000000000000000000000000000000000000000;;	// entries[0].Index > ms.entries[0].Index
0000000000000000000000000000000000000000;;	func (ms *MemoryStorage) Append(entries []pb.Entry) error {
0000000000000000000000000000000000000000;;		if len(entries) == 0 {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ms.Lock()
0000000000000000000000000000000000000000;;		defer ms.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		first := ms.firstIndex()
0000000000000000000000000000000000000000;;		last := entries[0].Index + uint64(len(entries)) - 1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// shortcut if there is no new entry.
0000000000000000000000000000000000000000;;		if last < first {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// truncate compacted entries
0000000000000000000000000000000000000000;;		if first > entries[0].Index {
0000000000000000000000000000000000000000;;			entries = entries[first-entries[0].Index:]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		offset := entries[0].Index - ms.ents[0].Index
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case uint64(len(ms.ents)) > offset:
0000000000000000000000000000000000000000;;			ms.ents = append([]pb.Entry{}, ms.ents[:offset]...)
0000000000000000000000000000000000000000;;			ms.ents = append(ms.ents, entries...)
0000000000000000000000000000000000000000;;		case uint64(len(ms.ents)) == offset:
0000000000000000000000000000000000000000;;			ms.ents = append(ms.ents, entries...)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			raftLogger.Panicf("missing log entry [last: %d, append at: %d]",
0000000000000000000000000000000000000000;;				ms.lastIndex(), entries[0].Index)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
