0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/coreos/etcd/raft/logger.go[Godeps/_workspace/src/github.com/coreos/etcd/raft/logger.go][vendor/github.com/coreos/etcd/raft/logger.go];	
0000000000000000000000000000000000000000;;	package raft
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"log"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Logger interface {
0000000000000000000000000000000000000000;;		Debug(v ...interface{})
0000000000000000000000000000000000000000;;		Debugf(format string, v ...interface{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Error(v ...interface{})
0000000000000000000000000000000000000000;;		Errorf(format string, v ...interface{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Info(v ...interface{})
0000000000000000000000000000000000000000;;		Infof(format string, v ...interface{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Warning(v ...interface{})
0000000000000000000000000000000000000000;;		Warningf(format string, v ...interface{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Fatal(v ...interface{})
0000000000000000000000000000000000000000;;		Fatalf(format string, v ...interface{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Panic(v ...interface{})
0000000000000000000000000000000000000000;;		Panicf(format string, v ...interface{})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func SetLogger(l Logger) { raftLogger = l }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		defaultLogger = &DefaultLogger{Logger: log.New(os.Stderr, "raft", log.LstdFlags)}
0000000000000000000000000000000000000000;;		discardLogger = &DefaultLogger{Logger: log.New(ioutil.Discard, "", 0)}
0000000000000000000000000000000000000000;;		raftLogger    = Logger(defaultLogger)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		calldepth = 2
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DefaultLogger is a default implementation of the Logger interface.
0000000000000000000000000000000000000000;;	type DefaultLogger struct {
0000000000000000000000000000000000000000;;		*log.Logger
0000000000000000000000000000000000000000;;		debug bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l *DefaultLogger) EnableTimestamps() {
0000000000000000000000000000000000000000;;		l.SetFlags(l.Flags() | log.Ldate | log.Ltime)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l *DefaultLogger) EnableDebug() {
0000000000000000000000000000000000000000;;		l.debug = true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l *DefaultLogger) Debug(v ...interface{}) {
0000000000000000000000000000000000000000;;		if l.debug {
0000000000000000000000000000000000000000;;			l.Output(calldepth, header("DEBUG", fmt.Sprint(v...)))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l *DefaultLogger) Debugf(format string, v ...interface{}) {
0000000000000000000000000000000000000000;;		if l.debug {
0000000000000000000000000000000000000000;;			l.Output(calldepth, header("DEBUG", fmt.Sprintf(format, v...)))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l *DefaultLogger) Info(v ...interface{}) {
0000000000000000000000000000000000000000;;		l.Output(calldepth, header("INFO", fmt.Sprint(v...)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l *DefaultLogger) Infof(format string, v ...interface{}) {
0000000000000000000000000000000000000000;;		l.Output(calldepth, header("INFO", fmt.Sprintf(format, v...)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l *DefaultLogger) Error(v ...interface{}) {
0000000000000000000000000000000000000000;;		l.Output(calldepth, header("ERROR", fmt.Sprint(v...)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l *DefaultLogger) Errorf(format string, v ...interface{}) {
0000000000000000000000000000000000000000;;		l.Output(calldepth, header("ERROR", fmt.Sprintf(format, v...)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l *DefaultLogger) Warning(v ...interface{}) {
0000000000000000000000000000000000000000;;		l.Output(calldepth, header("WARN", fmt.Sprint(v...)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l *DefaultLogger) Warningf(format string, v ...interface{}) {
0000000000000000000000000000000000000000;;		l.Output(calldepth, header("WARN", fmt.Sprintf(format, v...)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l *DefaultLogger) Fatal(v ...interface{}) {
0000000000000000000000000000000000000000;;		l.Output(calldepth, header("FATAL", fmt.Sprint(v...)))
0000000000000000000000000000000000000000;;		os.Exit(1)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l *DefaultLogger) Fatalf(format string, v ...interface{}) {
0000000000000000000000000000000000000000;;		l.Output(calldepth, header("FATAL", fmt.Sprintf(format, v...)))
0000000000000000000000000000000000000000;;		os.Exit(1)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l *DefaultLogger) Panic(v ...interface{}) {
0000000000000000000000000000000000000000;;		l.Logger.Panic(v)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l *DefaultLogger) Panicf(format string, v ...interface{}) {
0000000000000000000000000000000000000000;;		l.Logger.Panicf(format, v...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func header(lvl, msg string) string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%s: %s", lvl, msg)
0000000000000000000000000000000000000000;;	}
