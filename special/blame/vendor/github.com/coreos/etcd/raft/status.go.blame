0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/coreos/etcd/raft/status.go[Godeps/_workspace/src/github.com/coreos/etcd/raft/status.go][vendor/github.com/coreos/etcd/raft/status.go];	
0000000000000000000000000000000000000000;;	package raft
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pb "github.com/coreos/etcd/raft/raftpb"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Status struct {
0000000000000000000000000000000000000000;;		ID uint64
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pb.HardState
0000000000000000000000000000000000000000;;		SoftState
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Applied  uint64
0000000000000000000000000000000000000000;;		Progress map[uint64]Progress
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// getStatus gets a copy of the current raft status.
0000000000000000000000000000000000000000;;	func getStatus(r *raft) Status {
0000000000000000000000000000000000000000;;		s := Status{ID: r.id}
0000000000000000000000000000000000000000;;		s.HardState = r.hardState()
0000000000000000000000000000000000000000;;		s.SoftState = *r.softState()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s.Applied = r.raftLog.applied
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if s.RaftState == StateLeader {
0000000000000000000000000000000000000000;;			s.Progress = make(map[uint64]Progress)
0000000000000000000000000000000000000000;;			for id, p := range r.prs {
0000000000000000000000000000000000000000;;				s.Progress[id] = *p
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalJSON translates the raft status into JSON.
0000000000000000000000000000000000000000;;	// TODO: try to simplify this by introducing ID type into raft
0000000000000000000000000000000000000000;;	func (s Status) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		j := fmt.Sprintf(`{"id":"%x","term":%d,"vote":"%x","commit":%d,"lead":"%x","raftState":%q,"progress":{`,
0000000000000000000000000000000000000000;;			s.ID, s.Term, s.Vote, s.Commit, s.Lead, s.RaftState)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(s.Progress) == 0 {
0000000000000000000000000000000000000000;;			j += "}}"
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			for k, v := range s.Progress {
0000000000000000000000000000000000000000;;				subj := fmt.Sprintf(`"%x":{"match":%d,"next":%d,"state":%q},`, k, v.Match, v.Next, v.State)
0000000000000000000000000000000000000000;;				j += subj
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// remove the trailing ","
0000000000000000000000000000000000000000;;			j = j[:len(j)-1] + "}}"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return []byte(j), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s Status) String() string {
0000000000000000000000000000000000000000;;		b, err := s.MarshalJSON()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			raftLogger.Panicf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return string(b)
0000000000000000000000000000000000000000;;	}
