0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/coreos/etcd/store/event.go[Godeps/_workspace/src/github.com/coreos/etcd/store/event.go][vendor/github.com/coreos/etcd/store/event.go];	
0000000000000000000000000000000000000000;;	package store
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		Get              = "get"
0000000000000000000000000000000000000000;;		Create           = "create"
0000000000000000000000000000000000000000;;		Set              = "set"
0000000000000000000000000000000000000000;;		Update           = "update"
0000000000000000000000000000000000000000;;		Delete           = "delete"
0000000000000000000000000000000000000000;;		CompareAndSwap   = "compareAndSwap"
0000000000000000000000000000000000000000;;		CompareAndDelete = "compareAndDelete"
0000000000000000000000000000000000000000;;		Expire           = "expire"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Event struct {
0000000000000000000000000000000000000000;;		Action    string      `json:"action"`
0000000000000000000000000000000000000000;;		Node      *NodeExtern `json:"node,omitempty"`
0000000000000000000000000000000000000000;;		PrevNode  *NodeExtern `json:"prevNode,omitempty"`
0000000000000000000000000000000000000000;;		EtcdIndex uint64      `json:"-"`
0000000000000000000000000000000000000000;;		Refresh   bool        `json:"refresh,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newEvent(action string, key string, modifiedIndex, createdIndex uint64) *Event {
0000000000000000000000000000000000000000;;		n := &NodeExtern{
0000000000000000000000000000000000000000;;			Key:           key,
0000000000000000000000000000000000000000;;			ModifiedIndex: modifiedIndex,
0000000000000000000000000000000000000000;;			CreatedIndex:  createdIndex,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &Event{
0000000000000000000000000000000000000000;;			Action: action,
0000000000000000000000000000000000000000;;			Node:   n,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *Event) IsCreated() bool {
0000000000000000000000000000000000000000;;		if e.Action == Create {
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return e.Action == Set && e.PrevNode == nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *Event) Index() uint64 {
0000000000000000000000000000000000000000;;		return e.Node.ModifiedIndex
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *Event) Clone() *Event {
0000000000000000000000000000000000000000;;		return &Event{
0000000000000000000000000000000000000000;;			Action:    e.Action,
0000000000000000000000000000000000000000;;			EtcdIndex: e.EtcdIndex,
0000000000000000000000000000000000000000;;			Node:      e.Node.Clone(),
0000000000000000000000000000000000000000;;			PrevNode:  e.PrevNode.Clone(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *Event) SetRefresh() {
0000000000000000000000000000000000000000;;		e.Refresh = true
0000000000000000000000000000000000000000;;	}
