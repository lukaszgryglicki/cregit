0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/coreos/etcd/store/node_extern.go[Godeps/_workspace/src/github.com/coreos/etcd/store/node_extern.go][vendor/github.com/coreos/etcd/store/node_extern.go];	
0000000000000000000000000000000000000000;;	package store
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/jonboulle/clockwork"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NodeExtern is the external representation of the
0000000000000000000000000000000000000000;;	// internal node with additional fields
0000000000000000000000000000000000000000;;	// PrevValue is the previous value of the node
0000000000000000000000000000000000000000;;	// TTL is time to live in second
0000000000000000000000000000000000000000;;	type NodeExtern struct {
0000000000000000000000000000000000000000;;		Key           string      `json:"key,omitempty"`
0000000000000000000000000000000000000000;;		Value         *string     `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		Dir           bool        `json:"dir,omitempty"`
0000000000000000000000000000000000000000;;		Expiration    *time.Time  `json:"expiration,omitempty"`
0000000000000000000000000000000000000000;;		TTL           int64       `json:"ttl,omitempty"`
0000000000000000000000000000000000000000;;		Nodes         NodeExterns `json:"nodes,omitempty"`
0000000000000000000000000000000000000000;;		ModifiedIndex uint64      `json:"modifiedIndex,omitempty"`
0000000000000000000000000000000000000000;;		CreatedIndex  uint64      `json:"createdIndex,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (eNode *NodeExtern) loadInternalNode(n *node, recursive, sorted bool, clock clockwork.Clock) {
0000000000000000000000000000000000000000;;		if n.IsDir() { // node is a directory
0000000000000000000000000000000000000000;;			eNode.Dir = true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			children, _ := n.List()
0000000000000000000000000000000000000000;;			eNode.Nodes = make(NodeExterns, len(children))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// we do not use the index in the children slice directly
0000000000000000000000000000000000000000;;			// we need to skip the hidden one
0000000000000000000000000000000000000000;;			i := 0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for _, child := range children {
0000000000000000000000000000000000000000;;				if child.IsHidden() { // get will not return hidden nodes
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				eNode.Nodes[i] = child.Repr(recursive, sorted, clock)
0000000000000000000000000000000000000000;;				i++
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// eliminate hidden nodes
0000000000000000000000000000000000000000;;			eNode.Nodes = eNode.Nodes[:i]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if sorted {
0000000000000000000000000000000000000000;;				sort.Sort(eNode.Nodes)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		} else { // node is a file
0000000000000000000000000000000000000000;;			value, _ := n.Read()
0000000000000000000000000000000000000000;;			eNode.Value = &value
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		eNode.Expiration, eNode.TTL = n.expirationAndTTL(clock)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (eNode *NodeExtern) Clone() *NodeExtern {
0000000000000000000000000000000000000000;;		if eNode == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		nn := &NodeExtern{
0000000000000000000000000000000000000000;;			Key:           eNode.Key,
0000000000000000000000000000000000000000;;			Dir:           eNode.Dir,
0000000000000000000000000000000000000000;;			TTL:           eNode.TTL,
0000000000000000000000000000000000000000;;			ModifiedIndex: eNode.ModifiedIndex,
0000000000000000000000000000000000000000;;			CreatedIndex:  eNode.CreatedIndex,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if eNode.Value != nil {
0000000000000000000000000000000000000000;;			s := *eNode.Value
0000000000000000000000000000000000000000;;			nn.Value = &s
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if eNode.Expiration != nil {
0000000000000000000000000000000000000000;;			t := *eNode.Expiration
0000000000000000000000000000000000000000;;			nn.Expiration = &t
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if eNode.Nodes != nil {
0000000000000000000000000000000000000000;;			nn.Nodes = make(NodeExterns, len(eNode.Nodes))
0000000000000000000000000000000000000000;;			for i, n := range eNode.Nodes {
0000000000000000000000000000000000000000;;				nn.Nodes[i] = n.Clone()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nn
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NodeExterns []*NodeExtern
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// interfaces for sorting
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ns NodeExterns) Len() int {
0000000000000000000000000000000000000000;;		return len(ns)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ns NodeExterns) Less(i, j int) bool {
0000000000000000000000000000000000000000;;		return ns[i].Key < ns[j].Key
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ns NodeExterns) Swap(i, j int) {
0000000000000000000000000000000000000000;;		ns[i], ns[j] = ns[j], ns[i]
0000000000000000000000000000000000000000;;	}
