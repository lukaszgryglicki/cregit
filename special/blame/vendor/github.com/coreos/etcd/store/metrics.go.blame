0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/coreos/etcd/store/metrics.go[Godeps/_workspace/src/github.com/coreos/etcd/store/metrics.go][vendor/github.com/coreos/etcd/store/metrics.go];	
0000000000000000000000000000000000000000;;	package store
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/prometheus/client_golang/prometheus"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Set of raw Prometheus metrics.
0000000000000000000000000000000000000000;;	// Labels
0000000000000000000000000000000000000000;;	// * action = declared in event.go
0000000000000000000000000000000000000000;;	// * outcome = Outcome
0000000000000000000000000000000000000000;;	// Do not increment directly, use Report* methods.
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		readCounter = prometheus.NewCounterVec(
0000000000000000000000000000000000000000;;			prometheus.CounterOpts{
0000000000000000000000000000000000000000;;				Namespace: "etcd_debugging",
0000000000000000000000000000000000000000;;				Subsystem: "store",
0000000000000000000000000000000000000000;;				Name:      "reads_total",
0000000000000000000000000000000000000000;;				Help:      "Total number of reads action by (get/getRecursive), local to this member.",
0000000000000000000000000000000000000000;;			}, []string{"action"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		writeCounter = prometheus.NewCounterVec(
0000000000000000000000000000000000000000;;			prometheus.CounterOpts{
0000000000000000000000000000000000000000;;				Namespace: "etcd_debugging",
0000000000000000000000000000000000000000;;				Subsystem: "store",
0000000000000000000000000000000000000000;;				Name:      "writes_total",
0000000000000000000000000000000000000000;;				Help:      "Total number of writes (e.g. set/compareAndDelete) seen by this member.",
0000000000000000000000000000000000000000;;			}, []string{"action"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		readFailedCounter = prometheus.NewCounterVec(
0000000000000000000000000000000000000000;;			prometheus.CounterOpts{
0000000000000000000000000000000000000000;;				Namespace: "etcd_debugging",
0000000000000000000000000000000000000000;;				Subsystem: "store",
0000000000000000000000000000000000000000;;				Name:      "reads_failed_total",
0000000000000000000000000000000000000000;;				Help:      "Failed read actions by (get/getRecursive), local to this member.",
0000000000000000000000000000000000000000;;			}, []string{"action"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		writeFailedCounter = prometheus.NewCounterVec(
0000000000000000000000000000000000000000;;			prometheus.CounterOpts{
0000000000000000000000000000000000000000;;				Namespace: "etcd_debugging",
0000000000000000000000000000000000000000;;				Subsystem: "store",
0000000000000000000000000000000000000000;;				Name:      "writes_failed_total",
0000000000000000000000000000000000000000;;				Help:      "Failed write actions (e.g. set/compareAndDelete), seen by this member.",
0000000000000000000000000000000000000000;;			}, []string{"action"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expireCounter = prometheus.NewCounter(
0000000000000000000000000000000000000000;;			prometheus.CounterOpts{
0000000000000000000000000000000000000000;;				Namespace: "etcd_debugging",
0000000000000000000000000000000000000000;;				Subsystem: "store",
0000000000000000000000000000000000000000;;				Name:      "expires_total",
0000000000000000000000000000000000000000;;				Help:      "Total number of expired keys.",
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		watchRequests = prometheus.NewCounter(
0000000000000000000000000000000000000000;;			prometheus.CounterOpts{
0000000000000000000000000000000000000000;;				Namespace: "etcd_debugging",
0000000000000000000000000000000000000000;;				Subsystem: "store",
0000000000000000000000000000000000000000;;				Name:      "watch_requests_total",
0000000000000000000000000000000000000000;;				Help:      "Total number of incoming watch requests (new or reestablished).",
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		watcherCount = prometheus.NewGauge(
0000000000000000000000000000000000000000;;			prometheus.GaugeOpts{
0000000000000000000000000000000000000000;;				Namespace: "etcd_debugging",
0000000000000000000000000000000000000000;;				Subsystem: "store",
0000000000000000000000000000000000000000;;				Name:      "watchers",
0000000000000000000000000000000000000000;;				Help:      "Count of currently active watchers.",
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		GetRecursive = "getRecursive"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		prometheus.MustRegister(readCounter)
0000000000000000000000000000000000000000;;		prometheus.MustRegister(writeCounter)
0000000000000000000000000000000000000000;;		prometheus.MustRegister(expireCounter)
0000000000000000000000000000000000000000;;		prometheus.MustRegister(watchRequests)
0000000000000000000000000000000000000000;;		prometheus.MustRegister(watcherCount)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func reportReadSuccess(read_action string) {
0000000000000000000000000000000000000000;;		readCounter.WithLabelValues(read_action).Inc()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func reportReadFailure(read_action string) {
0000000000000000000000000000000000000000;;		readCounter.WithLabelValues(read_action).Inc()
0000000000000000000000000000000000000000;;		readFailedCounter.WithLabelValues(read_action).Inc()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func reportWriteSuccess(write_action string) {
0000000000000000000000000000000000000000;;		writeCounter.WithLabelValues(write_action).Inc()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func reportWriteFailure(write_action string) {
0000000000000000000000000000000000000000;;		writeCounter.WithLabelValues(write_action).Inc()
0000000000000000000000000000000000000000;;		writeFailedCounter.WithLabelValues(write_action).Inc()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func reportExpiredKey() {
0000000000000000000000000000000000000000;;		expireCounter.Inc()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func reportWatchRequest() {
0000000000000000000000000000000000000000;;		watchRequests.Inc()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func reportWatcherAdded() {
0000000000000000000000000000000000000000;;		watcherCount.Inc()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func reportWatcherRemoved() {
0000000000000000000000000000000000000000;;		watcherCount.Dec()
0000000000000000000000000000000000000000;;	}
