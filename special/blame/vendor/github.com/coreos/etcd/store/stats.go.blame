0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/coreos/etcd/store/stats.go[Godeps/_workspace/src/github.com/coreos/etcd/store/stats.go][vendor/github.com/coreos/etcd/store/stats.go];	
0000000000000000000000000000000000000000;;	package store
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"sync/atomic"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		SetSuccess = iota
0000000000000000000000000000000000000000;;		SetFail
0000000000000000000000000000000000000000;;		DeleteSuccess
0000000000000000000000000000000000000000;;		DeleteFail
0000000000000000000000000000000000000000;;		CreateSuccess
0000000000000000000000000000000000000000;;		CreateFail
0000000000000000000000000000000000000000;;		UpdateSuccess
0000000000000000000000000000000000000000;;		UpdateFail
0000000000000000000000000000000000000000;;		CompareAndSwapSuccess
0000000000000000000000000000000000000000;;		CompareAndSwapFail
0000000000000000000000000000000000000000;;		GetSuccess
0000000000000000000000000000000000000000;;		GetFail
0000000000000000000000000000000000000000;;		ExpireCount
0000000000000000000000000000000000000000;;		CompareAndDeleteSuccess
0000000000000000000000000000000000000000;;		CompareAndDeleteFail
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Stats struct {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Number of get requests
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		GetSuccess uint64 `json:"getsSuccess"`
0000000000000000000000000000000000000000;;		GetFail    uint64 `json:"getsFail"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Number of sets requests
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SetSuccess uint64 `json:"setsSuccess"`
0000000000000000000000000000000000000000;;		SetFail    uint64 `json:"setsFail"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Number of delete requests
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DeleteSuccess uint64 `json:"deleteSuccess"`
0000000000000000000000000000000000000000;;		DeleteFail    uint64 `json:"deleteFail"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Number of update requests
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		UpdateSuccess uint64 `json:"updateSuccess"`
0000000000000000000000000000000000000000;;		UpdateFail    uint64 `json:"updateFail"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Number of create requests
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CreateSuccess uint64 `json:"createSuccess"`
0000000000000000000000000000000000000000;;		CreateFail    uint64 `json:"createFail"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Number of testAndSet requests
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CompareAndSwapSuccess uint64 `json:"compareAndSwapSuccess"`
0000000000000000000000000000000000000000;;		CompareAndSwapFail    uint64 `json:"compareAndSwapFail"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Number of compareAndDelete requests
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CompareAndDeleteSuccess uint64 `json:"compareAndDeleteSuccess"`
0000000000000000000000000000000000000000;;		CompareAndDeleteFail    uint64 `json:"compareAndDeleteFail"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ExpireCount uint64 `json:"expireCount"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Watchers uint64 `json:"watchers"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newStats() *Stats {
0000000000000000000000000000000000000000;;		s := new(Stats)
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *Stats) clone() *Stats {
0000000000000000000000000000000000000000;;		return &Stats{
0000000000000000000000000000000000000000;;			GetSuccess:              s.GetSuccess,
0000000000000000000000000000000000000000;;			GetFail:                 s.GetFail,
0000000000000000000000000000000000000000;;			SetSuccess:              s.SetSuccess,
0000000000000000000000000000000000000000;;			SetFail:                 s.SetFail,
0000000000000000000000000000000000000000;;			DeleteSuccess:           s.DeleteSuccess,
0000000000000000000000000000000000000000;;			DeleteFail:              s.DeleteFail,
0000000000000000000000000000000000000000;;			UpdateSuccess:           s.UpdateSuccess,
0000000000000000000000000000000000000000;;			UpdateFail:              s.UpdateFail,
0000000000000000000000000000000000000000;;			CreateSuccess:           s.CreateSuccess,
0000000000000000000000000000000000000000;;			CreateFail:              s.CreateFail,
0000000000000000000000000000000000000000;;			CompareAndSwapSuccess:   s.CompareAndSwapSuccess,
0000000000000000000000000000000000000000;;			CompareAndSwapFail:      s.CompareAndSwapFail,
0000000000000000000000000000000000000000;;			CompareAndDeleteSuccess: s.CompareAndDeleteSuccess,
0000000000000000000000000000000000000000;;			CompareAndDeleteFail:    s.CompareAndDeleteFail,
0000000000000000000000000000000000000000;;			ExpireCount:             s.ExpireCount,
0000000000000000000000000000000000000000;;			Watchers:                s.Watchers,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *Stats) toJson() []byte {
0000000000000000000000000000000000000000;;		b, _ := json.Marshal(s)
0000000000000000000000000000000000000000;;		return b
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *Stats) Inc(field int) {
0000000000000000000000000000000000000000;;		switch field {
0000000000000000000000000000000000000000;;		case SetSuccess:
0000000000000000000000000000000000000000;;			atomic.AddUint64(&s.SetSuccess, 1)
0000000000000000000000000000000000000000;;		case SetFail:
0000000000000000000000000000000000000000;;			atomic.AddUint64(&s.SetFail, 1)
0000000000000000000000000000000000000000;;		case CreateSuccess:
0000000000000000000000000000000000000000;;			atomic.AddUint64(&s.CreateSuccess, 1)
0000000000000000000000000000000000000000;;		case CreateFail:
0000000000000000000000000000000000000000;;			atomic.AddUint64(&s.CreateFail, 1)
0000000000000000000000000000000000000000;;		case DeleteSuccess:
0000000000000000000000000000000000000000;;			atomic.AddUint64(&s.DeleteSuccess, 1)
0000000000000000000000000000000000000000;;		case DeleteFail:
0000000000000000000000000000000000000000;;			atomic.AddUint64(&s.DeleteFail, 1)
0000000000000000000000000000000000000000;;		case GetSuccess:
0000000000000000000000000000000000000000;;			atomic.AddUint64(&s.GetSuccess, 1)
0000000000000000000000000000000000000000;;		case GetFail:
0000000000000000000000000000000000000000;;			atomic.AddUint64(&s.GetFail, 1)
0000000000000000000000000000000000000000;;		case UpdateSuccess:
0000000000000000000000000000000000000000;;			atomic.AddUint64(&s.UpdateSuccess, 1)
0000000000000000000000000000000000000000;;		case UpdateFail:
0000000000000000000000000000000000000000;;			atomic.AddUint64(&s.UpdateFail, 1)
0000000000000000000000000000000000000000;;		case CompareAndSwapSuccess:
0000000000000000000000000000000000000000;;			atomic.AddUint64(&s.CompareAndSwapSuccess, 1)
0000000000000000000000000000000000000000;;		case CompareAndSwapFail:
0000000000000000000000000000000000000000;;			atomic.AddUint64(&s.CompareAndSwapFail, 1)
0000000000000000000000000000000000000000;;		case CompareAndDeleteSuccess:
0000000000000000000000000000000000000000;;			atomic.AddUint64(&s.CompareAndDeleteSuccess, 1)
0000000000000000000000000000000000000000;;		case CompareAndDeleteFail:
0000000000000000000000000000000000000000;;			atomic.AddUint64(&s.CompareAndDeleteFail, 1)
0000000000000000000000000000000000000000;;		case ExpireCount:
0000000000000000000000000000000000000000;;			atomic.AddUint64(&s.ExpireCount, 1)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
