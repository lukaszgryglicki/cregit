0000000000000000000000000000000000000000;;	// Copyright 2016 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
a0c6d1f6525fb38e26fc8c9217073cf57b989161;;	
0000000000000000000000000000000000000000;;	// +build !windows
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package wal
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/pkg/fileutil"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *WAL) renameWal(tmpdirpath string) (*WAL, error) {
0000000000000000000000000000000000000000;;		// On non-Windows platforms, hold the lock while renaming. Releasing
0000000000000000000000000000000000000000;;		// the lock and trying to reacquire it quickly can be flaky because
0000000000000000000000000000000000000000;;		// it's possible the process will fork to spawn a process while this is
0000000000000000000000000000000000000000;;		// happening. The fds are set up as close-on-exec by the Go runtime,
0000000000000000000000000000000000000000;;		// but there is a window between the fork and the exec where another
0000000000000000000000000000000000000000;;		// process holds the lock.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := os.RemoveAll(w.dir); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := os.Rename(tmpdirpath, w.dir); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		w.fp = newFilePipeline(w.dir, SegmentSizeBytes)
0000000000000000000000000000000000000000;;		df, err := fileutil.OpenDir(w.dir)
0000000000000000000000000000000000000000;;		w.dirFile = df
0000000000000000000000000000000000000000;;		return w, err
0000000000000000000000000000000000000000;;	}
