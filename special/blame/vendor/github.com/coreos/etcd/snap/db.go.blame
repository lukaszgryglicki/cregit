0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
a405384ce9c7fbbffc6a5a8bb2203d32e3b85976;Godeps/_workspace/src/github.com/coreos/etcd/snap/db.go[Godeps/_workspace/src/github.com/coreos/etcd/snap/db.go][vendor/github.com/coreos/etcd/snap/db.go];	
0000000000000000000000000000000000000000;;	package snap
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/pkg/fileutil"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SaveDBFrom saves snapshot of the database from the given reader. It
0000000000000000000000000000000000000000;;	// guarantees the save operation is atomic.
0000000000000000000000000000000000000000;;	func (s *Snapshotter) SaveDBFrom(r io.Reader, id uint64) (int64, error) {
0000000000000000000000000000000000000000;;		f, err := ioutil.TempFile(s.dir, "tmp")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var n int64
0000000000000000000000000000000000000000;;		n, err = io.Copy(f, r)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			err = fileutil.Fsync(f)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		f.Close()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			os.Remove(f.Name())
0000000000000000000000000000000000000000;;			return n, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fn := filepath.Join(s.dir, fmt.Sprintf("%016x.snap.db", id))
0000000000000000000000000000000000000000;;		if fileutil.Exist(fn) {
0000000000000000000000000000000000000000;;			os.Remove(f.Name())
0000000000000000000000000000000000000000;;			return n, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err = os.Rename(f.Name(), fn)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			os.Remove(f.Name())
0000000000000000000000000000000000000000;;			return n, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		plog.Infof("saved database snapshot to disk [total bytes: %d]", n)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return n, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DBFilePath returns the file path for the snapshot of the database with
0000000000000000000000000000000000000000;;	// given id. If the snapshot does not exist, it returns error.
0000000000000000000000000000000000000000;;	func (s *Snapshotter) DBFilePath(id uint64) (string, error) {
0000000000000000000000000000000000000000;;		fns, err := fileutil.ReadDir(s.dir)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		wfn := fmt.Sprintf("%016x.snap.db", id)
0000000000000000000000000000000000000000;;		for _, fn := range fns {
0000000000000000000000000000000000000000;;			if fn == wfn {
0000000000000000000000000000000000000000;;				return filepath.Join(s.dir, fn), nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "", fmt.Errorf("snap: snapshot file doesn't exist")
0000000000000000000000000000000000000000;;	}
