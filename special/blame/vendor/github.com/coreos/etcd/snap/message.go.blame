0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
a405384ce9c7fbbffc6a5a8bb2203d32e3b85976;Godeps/_workspace/src/github.com/coreos/etcd/snap/message.go[Godeps/_workspace/src/github.com/coreos/etcd/snap/message.go][vendor/github.com/coreos/etcd/snap/message.go];	
0000000000000000000000000000000000000000;;	package snap
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/pkg/ioutil"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/raft/raftpb"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Message is a struct that contains a raft Message and a ReadCloser. The type
0000000000000000000000000000000000000000;;	// of raft message MUST be MsgSnap, which contains the raft meta-data and an
0000000000000000000000000000000000000000;;	// additional data []byte field that contains the snapshot of the actual state
0000000000000000000000000000000000000000;;	// machine.
0000000000000000000000000000000000000000;;	// Message contains the ReadCloser field for handling large snapshot. This avoid
0000000000000000000000000000000000000000;;	// copying the entire snapshot into a byte array, which consumes a lot of memory.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// User of Message should close the Message after sending it.
0000000000000000000000000000000000000000;;	type Message struct {
0000000000000000000000000000000000000000;;		raftpb.Message
0000000000000000000000000000000000000000;;		ReadCloser io.ReadCloser
0000000000000000000000000000000000000000;;		TotalSize  int64
0000000000000000000000000000000000000000;;		closeC     chan bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewMessage(rs raftpb.Message, rc io.ReadCloser, rcSize int64) *Message {
0000000000000000000000000000000000000000;;		return &Message{
0000000000000000000000000000000000000000;;			Message:    rs,
0000000000000000000000000000000000000000;;			ReadCloser: ioutil.NewExactReadCloser(rc, rcSize),
0000000000000000000000000000000000000000;;			TotalSize:  int64(rs.Size()) + rcSize,
0000000000000000000000000000000000000000;;			closeC:     make(chan bool, 1),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CloseNotify returns a channel that receives a single value
0000000000000000000000000000000000000000;;	// when the message sent is finished. true indicates the sent
0000000000000000000000000000000000000000;;	// is successful.
0000000000000000000000000000000000000000;;	func (m Message) CloseNotify() <-chan bool {
0000000000000000000000000000000000000000;;		return m.closeC
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m Message) CloseWithError(err error) {
0000000000000000000000000000000000000000;;		if cerr := m.ReadCloser.Close(); cerr != nil {
0000000000000000000000000000000000000000;;			err = cerr
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			m.closeC <- true
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			m.closeC <- false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
