0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/coreos/etcd/pkg/transport/timeout_listener.go[Godeps/_workspace/src/github.com/coreos/etcd/pkg/transport/timeout_listener.go][vendor/github.com/coreos/etcd/pkg/transport/timeout_listener.go];	
0000000000000000000000000000000000000000;;	package transport
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"crypto/tls"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewTimeoutListener returns a listener that listens on the given address.
0000000000000000000000000000000000000000;;	// If read/write on the accepted connection blocks longer than its time limit,
0000000000000000000000000000000000000000;;	// it will return timeout error.
0000000000000000000000000000000000000000;;	func NewTimeoutListener(addr string, scheme string, tlscfg *tls.Config, rdtimeoutd, wtimeoutd time.Duration) (net.Listener, error) {
0000000000000000000000000000000000000000;;		ln, err := newListener(addr, scheme)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ln = &rwTimeoutListener{
0000000000000000000000000000000000000000;;			Listener:   ln,
0000000000000000000000000000000000000000;;			rdtimeoutd: rdtimeoutd,
0000000000000000000000000000000000000000;;			wtimeoutd:  wtimeoutd,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if ln, err = wrapTLS(addr, scheme, tlscfg, ln); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ln, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type rwTimeoutListener struct {
0000000000000000000000000000000000000000;;		net.Listener
0000000000000000000000000000000000000000;;		wtimeoutd  time.Duration
0000000000000000000000000000000000000000;;		rdtimeoutd time.Duration
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rwln *rwTimeoutListener) Accept() (net.Conn, error) {
0000000000000000000000000000000000000000;;		c, err := rwln.Listener.Accept()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return timeoutConn{
0000000000000000000000000000000000000000;;			Conn:       c,
0000000000000000000000000000000000000000;;			wtimeoutd:  rwln.wtimeoutd,
0000000000000000000000000000000000000000;;			rdtimeoutd: rwln.rdtimeoutd,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
