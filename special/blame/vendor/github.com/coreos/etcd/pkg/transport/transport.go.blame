0000000000000000000000000000000000000000;;	// Copyright 2016 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
885071b7d07344044421ffe2fd90c1bcd1ee9812;;	
0000000000000000000000000000000000000000;;	package transport
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type unixTransport struct{ *http.Transport }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewTransport(info TLSInfo, dialtimeoutd time.Duration) (*http.Transport, error) {
0000000000000000000000000000000000000000;;		cfg, err := info.ClientConfig()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		t := &http.Transport{
0000000000000000000000000000000000000000;;			Proxy: http.ProxyFromEnvironment,
0000000000000000000000000000000000000000;;			Dial: (&net.Dialer{
0000000000000000000000000000000000000000;;				Timeout: dialtimeoutd,
0000000000000000000000000000000000000000;;				// value taken from http.DefaultTransport
0000000000000000000000000000000000000000;;				KeepAlive: 30 * time.Second,
0000000000000000000000000000000000000000;;			}).Dial,
0000000000000000000000000000000000000000;;			// value taken from http.DefaultTransport
0000000000000000000000000000000000000000;;			TLSHandshakeTimeout: 10 * time.Second,
0000000000000000000000000000000000000000;;			TLSClientConfig:     cfg,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		dialer := (&net.Dialer{
0000000000000000000000000000000000000000;;			Timeout:   dialtimeoutd,
0000000000000000000000000000000000000000;;			KeepAlive: 30 * time.Second,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		dial := func(net, addr string) (net.Conn, error) {
0000000000000000000000000000000000000000;;			return dialer.Dial("unix", addr)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tu := &http.Transport{
0000000000000000000000000000000000000000;;			Proxy:               http.ProxyFromEnvironment,
0000000000000000000000000000000000000000;;			Dial:                dial,
0000000000000000000000000000000000000000;;			TLSHandshakeTimeout: 10 * time.Second,
0000000000000000000000000000000000000000;;			TLSClientConfig:     cfg,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ut := &unixTransport{tu}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		t.RegisterProtocol("unix", ut)
0000000000000000000000000000000000000000;;		t.RegisterProtocol("unixs", ut)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return t, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (urt *unixTransport) RoundTrip(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;		url := *req.URL
0000000000000000000000000000000000000000;;		req.URL = &url
0000000000000000000000000000000000000000;;		req.URL.Scheme = strings.Replace(req.URL.Scheme, "unix", "http", 1)
0000000000000000000000000000000000000000;;		return urt.Transport.RoundTrip(req)
0000000000000000000000000000000000000000;;	}
