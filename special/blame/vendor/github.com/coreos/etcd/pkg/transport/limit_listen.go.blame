0000000000000000000000000000000000000000;;	// Copyright 2013 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
7eb30b2bb743d2bc629cd24f17f63ef76f345a83;Godeps/_workspace/src/github.com/coreos/etcd/pkg/transport/limit_listen.go[Godeps/_workspace/src/github.com/coreos/etcd/pkg/transport/limit_listen.go][vendor/github.com/coreos/etcd/pkg/transport/limit_listen.go];	
0000000000000000000000000000000000000000;;	// Package transport provides network utility functions, complementing the more
0000000000000000000000000000000000000000;;	// common ones in the net package.
0000000000000000000000000000000000000000;;	package transport
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		ErrNotTCP = errors.New("only tcp connections have keepalive")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LimitListener returns a Listener that accepts at most n simultaneous
0000000000000000000000000000000000000000;;	// connections from the provided Listener.
0000000000000000000000000000000000000000;;	func LimitListener(l net.Listener, n int) net.Listener {
0000000000000000000000000000000000000000;;		return &limitListener{l, make(chan struct{}, n)}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type limitListener struct {
0000000000000000000000000000000000000000;;		net.Listener
0000000000000000000000000000000000000000;;		sem chan struct{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l *limitListener) acquire() { l.sem <- struct{}{} }
0000000000000000000000000000000000000000;;	func (l *limitListener) release() { <-l.sem }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l *limitListener) Accept() (net.Conn, error) {
0000000000000000000000000000000000000000;;		l.acquire()
0000000000000000000000000000000000000000;;		c, err := l.Listener.Accept()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			l.release()
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &limitListenerConn{Conn: c, release: l.release}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type limitListenerConn struct {
0000000000000000000000000000000000000000;;		net.Conn
0000000000000000000000000000000000000000;;		releaseOnce sync.Once
0000000000000000000000000000000000000000;;		release     func()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l *limitListenerConn) Close() error {
0000000000000000000000000000000000000000;;		err := l.Conn.Close()
0000000000000000000000000000000000000000;;		l.releaseOnce.Do(l.release)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l *limitListenerConn) SetKeepAlive(doKeepAlive bool) error {
0000000000000000000000000000000000000000;;		tcpc, ok := l.Conn.(*net.TCPConn)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return ErrNotTCP
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return tcpc.SetKeepAlive(doKeepAlive)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l *limitListenerConn) SetKeepAlivePeriod(d time.Duration) error {
0000000000000000000000000000000000000000;;		tcpc, ok := l.Conn.(*net.TCPConn)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return ErrNotTCP
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return tcpc.SetKeepAlivePeriod(d)
0000000000000000000000000000000000000000;;	}
