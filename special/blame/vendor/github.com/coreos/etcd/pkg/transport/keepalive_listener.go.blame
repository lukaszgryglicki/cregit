0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/coreos/etcd/pkg/transport/keepalive_listener.go[Godeps/_workspace/src/github.com/coreos/etcd/pkg/transport/keepalive_listener.go][vendor/github.com/coreos/etcd/pkg/transport/keepalive_listener.go];	
0000000000000000000000000000000000000000;;	package transport
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"crypto/tls"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type keepAliveConn interface {
0000000000000000000000000000000000000000;;		SetKeepAlive(bool) error
0000000000000000000000000000000000000000;;		SetKeepAlivePeriod(d time.Duration) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewKeepAliveListener returns a listener that listens on the given address.
0000000000000000000000000000000000000000;;	// Be careful when wrap around KeepAliveListener with another Listener if TLSInfo is not nil.
0000000000000000000000000000000000000000;;	// Some pkgs (like go/http) might expect Listener to return TLSConn type to start TLS handshake.
0000000000000000000000000000000000000000;;	// http://tldp.org/HOWTO/TCP-Keepalive-HOWTO/overview.html
0000000000000000000000000000000000000000;;	func NewKeepAliveListener(l net.Listener, scheme string, tlscfg *tls.Config) (net.Listener, error) {
0000000000000000000000000000000000000000;;		if scheme == "https" {
0000000000000000000000000000000000000000;;			if tlscfg == nil {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("cannot listen on TLS for given listener: KeyFile and CertFile are not presented")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return newTLSKeepaliveListener(l, tlscfg), nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &keepaliveListener{
0000000000000000000000000000000000000000;;			Listener: l,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type keepaliveListener struct{ net.Listener }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (kln *keepaliveListener) Accept() (net.Conn, error) {
0000000000000000000000000000000000000000;;		c, err := kln.Listener.Accept()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		kac := c.(keepAliveConn)
0000000000000000000000000000000000000000;;		// detection time: tcp_keepalive_time + tcp_keepalive_probes + tcp_keepalive_intvl
0000000000000000000000000000000000000000;;		// default on linux:  30 + 8 * 30
0000000000000000000000000000000000000000;;		// default on osx:    30 + 8 * 75
0000000000000000000000000000000000000000;;		kac.SetKeepAlive(true)
0000000000000000000000000000000000000000;;		kac.SetKeepAlivePeriod(30 * time.Second)
0000000000000000000000000000000000000000;;		return c, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A tlsKeepaliveListener implements a network listener (net.Listener) for TLS connections.
0000000000000000000000000000000000000000;;	type tlsKeepaliveListener struct {
0000000000000000000000000000000000000000;;		net.Listener
0000000000000000000000000000000000000000;;		config *tls.Config
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Accept waits for and returns the next incoming TLS connection.
0000000000000000000000000000000000000000;;	// The returned connection c is a *tls.Conn.
0000000000000000000000000000000000000000;;	func (l *tlsKeepaliveListener) Accept() (c net.Conn, err error) {
0000000000000000000000000000000000000000;;		c, err = l.Listener.Accept()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		kac := c.(keepAliveConn)
0000000000000000000000000000000000000000;;		// detection time: tcp_keepalive_time + tcp_keepalive_probes + tcp_keepalive_intvl
0000000000000000000000000000000000000000;;		// default on linux:  30 + 8 * 30
0000000000000000000000000000000000000000;;		// default on osx:    30 + 8 * 75
0000000000000000000000000000000000000000;;		kac.SetKeepAlive(true)
0000000000000000000000000000000000000000;;		kac.SetKeepAlivePeriod(30 * time.Second)
0000000000000000000000000000000000000000;;		c = tls.Server(c, l.config)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewListener creates a Listener which accepts connections from an inner
0000000000000000000000000000000000000000;;	// Listener and wraps each connection with Server.
0000000000000000000000000000000000000000;;	// The configuration config must be non-nil and must have
0000000000000000000000000000000000000000;;	// at least one certificate.
0000000000000000000000000000000000000000;;	func newTLSKeepaliveListener(inner net.Listener, config *tls.Config) net.Listener {
0000000000000000000000000000000000000000;;		l := &tlsKeepaliveListener{}
0000000000000000000000000000000000000000;;		l.Listener = inner
0000000000000000000000000000000000000000;;		l.config = config
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
