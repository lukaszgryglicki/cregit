0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/coreos/etcd/pkg/transport/timeout_transport.go[Godeps/_workspace/src/github.com/coreos/etcd/pkg/transport/timeout_transport.go][vendor/github.com/coreos/etcd/pkg/transport/timeout_transport.go];	
0000000000000000000000000000000000000000;;	package transport
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewTimeoutTransport returns a transport created using the given TLS info.
0000000000000000000000000000000000000000;;	// If read/write on the created connection blocks longer than its time limit,
0000000000000000000000000000000000000000;;	// it will return timeout error.
0000000000000000000000000000000000000000;;	// If read/write timeout is set, transport will not be able to reuse connection.
0000000000000000000000000000000000000000;;	func NewTimeoutTransport(info TLSInfo, dialtimeoutd, rdtimeoutd, wtimeoutd time.Duration) (*http.Transport, error) {
0000000000000000000000000000000000000000;;		tr, err := NewTransport(info, dialtimeoutd)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if rdtimeoutd != 0 || wtimeoutd != 0 {
0000000000000000000000000000000000000000;;			// the timed out connection will timeout soon after it is idle.
0000000000000000000000000000000000000000;;			// it should not be put back to http transport as an idle connection for future usage.
0000000000000000000000000000000000000000;;			tr.MaxIdleConnsPerHost = -1
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			// allow more idle connections between peers to avoid unnecessary port allocation.
0000000000000000000000000000000000000000;;			tr.MaxIdleConnsPerHost = 1024
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tr.Dial = (&rwTimeoutDialer{
0000000000000000000000000000000000000000;;			Dialer: net.Dialer{
0000000000000000000000000000000000000000;;				Timeout:   dialtimeoutd,
0000000000000000000000000000000000000000;;				KeepAlive: 30 * time.Second,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			rdtimeoutd: rdtimeoutd,
0000000000000000000000000000000000000000;;			wtimeoutd:  wtimeoutd,
0000000000000000000000000000000000000000;;		}).Dial
0000000000000000000000000000000000000000;;		return tr, nil
0000000000000000000000000000000000000000;;	}
