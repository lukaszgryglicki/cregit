0000000000000000000000000000000000000000;;	// Copyright 2016 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
e8c92b7854d80fb31f19faea842fddedd9cefade;;	
0000000000000000000000000000000000000000;;	package transport
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ValidateSecureEndpoints scans the given endpoints against tls info, returning only those
0000000000000000000000000000000000000000;;	// endpoints that could be validated as secure.
0000000000000000000000000000000000000000;;	func ValidateSecureEndpoints(tlsInfo TLSInfo, eps []string) ([]string, error) {
0000000000000000000000000000000000000000;;		t, err := NewTransport(tlsInfo, 5*time.Second)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var errs []string
0000000000000000000000000000000000000000;;		var endpoints []string
0000000000000000000000000000000000000000;;		for _, ep := range eps {
0000000000000000000000000000000000000000;;			if !strings.HasPrefix(ep, "https://") {
0000000000000000000000000000000000000000;;				errs = append(errs, fmt.Sprintf("%q is insecure", ep))
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			conn, cerr := t.Dial("tcp", ep[len("https://"):])
0000000000000000000000000000000000000000;;			if cerr != nil {
0000000000000000000000000000000000000000;;				errs = append(errs, fmt.Sprintf("%q failed to dial (%v)", ep, cerr))
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			conn.Close()
0000000000000000000000000000000000000000;;			endpoints = append(endpoints, ep)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(errs) != 0 {
0000000000000000000000000000000000000000;;			err = fmt.Errorf("%s", strings.Join(errs, ","))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return endpoints, err
0000000000000000000000000000000000000000;;	}
