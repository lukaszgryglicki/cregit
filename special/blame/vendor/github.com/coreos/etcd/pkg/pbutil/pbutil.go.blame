0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/coreos/etcd/pkg/pbutil/pbutil.go[Godeps/_workspace/src/github.com/coreos/etcd/pkg/pbutil/pbutil.go][vendor/github.com/coreos/etcd/pkg/pbutil/pbutil.go];	
0000000000000000000000000000000000000000;;	// Package pbutil defines interfaces for handling Protocol Buffer objects.
0000000000000000000000000000000000000000;;	package pbutil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "github.com/coreos/pkg/capnslog"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		plog = capnslog.NewPackageLogger("github.com/coreos/etcd", "pkg/pbutil")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Marshaler interface {
0000000000000000000000000000000000000000;;		Marshal() (data []byte, err error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Unmarshaler interface {
0000000000000000000000000000000000000000;;		Unmarshal(data []byte) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func MustMarshal(m Marshaler) []byte {
0000000000000000000000000000000000000000;;		d, err := m.Marshal()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			plog.Panicf("marshal should never fail (%v)", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return d
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func MustUnmarshal(um Unmarshaler, data []byte) {
0000000000000000000000000000000000000000;;		if err := um.Unmarshal(data); err != nil {
0000000000000000000000000000000000000000;;			plog.Panicf("unmarshal should never fail (%v)", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func MaybeUnmarshal(um Unmarshaler, data []byte) bool {
0000000000000000000000000000000000000000;;		if err := um.Unmarshal(data); err != nil {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetBool(v *bool) (vv bool, set bool) {
0000000000000000000000000000000000000000;;		if v == nil {
0000000000000000000000000000000000000000;;			return false, false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return *v, true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Boolp(b bool) *bool { return &b }
