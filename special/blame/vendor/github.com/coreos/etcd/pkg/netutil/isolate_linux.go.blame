0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/coreos/etcd/pkg/netutil/isolate_linux.go[Godeps/_workspace/src/github.com/coreos/etcd/pkg/netutil/isolate_linux.go][vendor/github.com/coreos/etcd/pkg/netutil/isolate_linux.go];	
0000000000000000000000000000000000000000;;	package netutil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os/exec"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DropPort drops all tcp packets that are received from the given port and sent to the given port.
0000000000000000000000000000000000000000;;	func DropPort(port int) error {
0000000000000000000000000000000000000000;;		cmdStr := fmt.Sprintf("sudo iptables -A OUTPUT -p tcp --destination-port %d -j DROP", port)
0000000000000000000000000000000000000000;;		if _, err := exec.Command("/bin/sh", "-c", cmdStr).Output(); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cmdStr = fmt.Sprintf("sudo iptables -A INPUT -p tcp --destination-port %d -j DROP", port)
0000000000000000000000000000000000000000;;		_, err := exec.Command("/bin/sh", "-c", cmdStr).Output()
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RecoverPort stops dropping tcp packets at given port.
0000000000000000000000000000000000000000;;	func RecoverPort(port int) error {
0000000000000000000000000000000000000000;;		cmdStr := fmt.Sprintf("sudo iptables -D OUTPUT -p tcp --destination-port %d -j DROP", port)
0000000000000000000000000000000000000000;;		if _, err := exec.Command("/bin/sh", "-c", cmdStr).Output(); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cmdStr = fmt.Sprintf("sudo iptables -D INPUT -p tcp --destination-port %d -j DROP", port)
0000000000000000000000000000000000000000;;		_, err := exec.Command("/bin/sh", "-c", cmdStr).Output()
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetLatency adds latency in millisecond scale with random variations.
0000000000000000000000000000000000000000;;	func SetLatency(ms, rv int) error {
0000000000000000000000000000000000000000;;		ifces, err := GetDefaultInterfaces()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if rv > ms {
0000000000000000000000000000000000000000;;			rv = 1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for ifce := range ifces {
0000000000000000000000000000000000000000;;			cmdStr := fmt.Sprintf("sudo tc qdisc add dev %s root netem delay %dms %dms distribution normal", ifce, ms, rv)
0000000000000000000000000000000000000000;;			_, err = exec.Command("/bin/sh", "-c", cmdStr).Output()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				// the rule has already been added. Overwrite it.
0000000000000000000000000000000000000000;;				cmdStr = fmt.Sprintf("sudo tc qdisc change dev %s root netem delay %dms %dms distribution normal", ifce, ms, rv)
0000000000000000000000000000000000000000;;				_, err = exec.Command("/bin/sh", "-c", cmdStr).Output()
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RemoveLatency resets latency configurations.
0000000000000000000000000000000000000000;;	func RemoveLatency() error {
0000000000000000000000000000000000000000;;		ifces, err := GetDefaultInterfaces()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for ifce := range ifces {
0000000000000000000000000000000000000000;;			_, err = exec.Command("/bin/sh", "-c", fmt.Sprintf("sudo tc qdisc del dev %s root netem", ifce)).Output()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
