0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
a405384ce9c7fbbffc6a5a8bb2203d32e3b85976;Godeps/_workspace/src/github.com/coreos/etcd/pkg/testutil/pauseable_handler.go[Godeps/_workspace/src/github.com/coreos/etcd/pkg/testutil/pauseable_handler.go][vendor/github.com/coreos/etcd/pkg/testutil/pauseable_handler.go];	
0000000000000000000000000000000000000000;;	package testutil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PauseableHandler struct {
0000000000000000000000000000000000000000;;		Next   http.Handler
0000000000000000000000000000000000000000;;		mu     sync.Mutex
0000000000000000000000000000000000000000;;		paused bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ph *PauseableHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;		ph.mu.Lock()
0000000000000000000000000000000000000000;;		paused := ph.paused
0000000000000000000000000000000000000000;;		ph.mu.Unlock()
0000000000000000000000000000000000000000;;		if !paused {
0000000000000000000000000000000000000000;;			ph.Next.ServeHTTP(w, r)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			hj, ok := w.(http.Hijacker)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				panic("webserver doesn't support hijacking")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			conn, _, err := hj.Hijack()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				panic(err.Error())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			conn.Close()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ph *PauseableHandler) Pause() {
0000000000000000000000000000000000000000;;		ph.mu.Lock()
0000000000000000000000000000000000000000;;		defer ph.mu.Unlock()
0000000000000000000000000000000000000000;;		ph.paused = true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ph *PauseableHandler) Resume() {
0000000000000000000000000000000000000000;;		ph.mu.Lock()
0000000000000000000000000000000000000000;;		defer ph.mu.Unlock()
0000000000000000000000000000000000000000;;		ph.paused = false
0000000000000000000000000000000000000000;;	}
