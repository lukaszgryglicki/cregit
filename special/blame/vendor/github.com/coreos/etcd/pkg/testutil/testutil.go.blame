0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
a405384ce9c7fbbffc6a5a8bb2203d32e3b85976;Godeps/_workspace/src/github.com/coreos/etcd/pkg/testutil/testutil.go[Godeps/_workspace/src/github.com/coreos/etcd/pkg/testutil/testutil.go][vendor/github.com/coreos/etcd/pkg/testutil/testutil.go];	
0000000000000000000000000000000000000000;;	// Package testutil provides test utility functions.
0000000000000000000000000000000000000000;;	package testutil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"runtime"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WaitSchedule briefly sleeps in order to invoke the go scheduler.
0000000000000000000000000000000000000000;;	// TODO: improve this when we are able to know the schedule or status of target go-routine.
0000000000000000000000000000000000000000;;	func WaitSchedule() {
0000000000000000000000000000000000000000;;		time.Sleep(10 * time.Millisecond)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func MustNewURLs(t *testing.T, urls []string) []url.URL {
0000000000000000000000000000000000000000;;		if urls == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var us []url.URL
0000000000000000000000000000000000000000;;		for _, url := range urls {
0000000000000000000000000000000000000000;;			u := MustNewURL(t, url)
0000000000000000000000000000000000000000;;			us = append(us, *u)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return us
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func MustNewURL(t *testing.T, s string) *url.URL {
0000000000000000000000000000000000000000;;		u, err := url.Parse(s)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("parse %v error: %v", s, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FatalStack helps to fatal the test and print out the stacks of all running goroutines.
0000000000000000000000000000000000000000;;	func FatalStack(t *testing.T, s string) {
0000000000000000000000000000000000000000;;		stackTrace := make([]byte, 1024*1024)
0000000000000000000000000000000000000000;;		n := runtime.Stack(stackTrace, true)
0000000000000000000000000000000000000000;;		t.Error(string(stackTrace[:n]))
0000000000000000000000000000000000000000;;		t.Fatalf(s)
0000000000000000000000000000000000000000;;	}
