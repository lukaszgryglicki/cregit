0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/coreos/etcd/discovery/doc.go[Godeps/_workspace/src/github.com/coreos/etcd/discovery/doc.go][vendor/github.com/coreos/etcd/pkg/ioutil/readcloser.go];	
0000000000000000000000000000000000000000;;	package ioutil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ReaderAndCloser implements io.ReadCloser interface by combining
0000000000000000000000000000000000000000;;	// reader and closer together.
0000000000000000000000000000000000000000;;	type ReaderAndCloser struct {
0000000000000000000000000000000000000000;;		io.Reader
0000000000000000000000000000000000000000;;		io.Closer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		ErrShortRead = fmt.Errorf("ioutil: short read")
0000000000000000000000000000000000000000;;		ErrExpectEOF = fmt.Errorf("ioutil: expect EOF")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewExactReadCloser returns a ReadCloser that returns errors if the underlying
0000000000000000000000000000000000000000;;	// reader does not read back exactly the requested number of bytes.
0000000000000000000000000000000000000000;;	func NewExactReadCloser(rc io.ReadCloser, totalBytes int64) io.ReadCloser {
0000000000000000000000000000000000000000;;		return &exactReadCloser{rc: rc, totalBytes: totalBytes}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type exactReadCloser struct {
0000000000000000000000000000000000000000;;		rc         io.ReadCloser
0000000000000000000000000000000000000000;;		br         int64
0000000000000000000000000000000000000000;;		totalBytes int64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *exactReadCloser) Read(p []byte) (int, error) {
0000000000000000000000000000000000000000;;		n, err := e.rc.Read(p)
0000000000000000000000000000000000000000;;		e.br += int64(n)
0000000000000000000000000000000000000000;;		if e.br > e.totalBytes {
0000000000000000000000000000000000000000;;			return 0, ErrExpectEOF
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e.br < e.totalBytes && n == 0 {
0000000000000000000000000000000000000000;;			return 0, ErrShortRead
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return n, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *exactReadCloser) Close() error {
0000000000000000000000000000000000000000;;		if err := e.rc.Close(); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e.br < e.totalBytes {
0000000000000000000000000000000000000000;;			return ErrShortRead
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
