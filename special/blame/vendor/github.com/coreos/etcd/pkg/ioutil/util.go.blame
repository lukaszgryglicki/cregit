0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
7eb30b2bb743d2bc629cd24f17f63ef76f345a83;Godeps/_workspace/src/github.com/coreos/etcd/pkg/ioutil/util.go[Godeps/_workspace/src/github.com/coreos/etcd/pkg/ioutil/util.go][vendor/github.com/coreos/etcd/pkg/ioutil/util.go];	
0000000000000000000000000000000000000000;;	package ioutil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/pkg/fileutil"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WriteAndSyncFile behaves just like ioutil.WriteFile in the standard library,
0000000000000000000000000000000000000000;;	// but calls Sync before closing the file. WriteAndSyncFile guarantees the data
0000000000000000000000000000000000000000;;	// is synced if there is no error returned.
0000000000000000000000000000000000000000;;	func WriteAndSyncFile(filename string, data []byte, perm os.FileMode) error {
0000000000000000000000000000000000000000;;		f, err := os.OpenFile(filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, perm)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		n, err := f.Write(data)
0000000000000000000000000000000000000000;;		if err == nil && n < len(data) {
0000000000000000000000000000000000000000;;			err = io.ErrShortWrite
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			err = fileutil.Fsync(f)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err1 := f.Close(); err == nil {
0000000000000000000000000000000000000000;;			err = err1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
