0000000000000000000000000000000000000000;;	// Copyright 2009 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/coreos/etcd/pkg/pathutil/path.go[Godeps/_workspace/src/github.com/coreos/etcd/pkg/pathutil/path.go][vendor/github.com/coreos/etcd/pkg/pathutil/path.go];	
0000000000000000000000000000000000000000;;	// Package pathutil implements utility functions for handling slash-separated
0000000000000000000000000000000000000000;;	// paths.
0000000000000000000000000000000000000000;;	package pathutil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "path"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CanonicalURLPath returns the canonical url path for p, which follows the rules:
0000000000000000000000000000000000000000;;	// 1. the path always starts with "/"
0000000000000000000000000000000000000000;;	// 2. replace multiple slashes with a single slash
0000000000000000000000000000000000000000;;	// 3. replace each '.' '..' path name element with equivalent one
0000000000000000000000000000000000000000;;	// 4. keep the trailing slash
0000000000000000000000000000000000000000;;	// The function is borrowed from stdlib http.cleanPath in server.go.
0000000000000000000000000000000000000000;;	func CanonicalURLPath(p string) string {
0000000000000000000000000000000000000000;;		if p == "" {
0000000000000000000000000000000000000000;;			return "/"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if p[0] != '/' {
0000000000000000000000000000000000000000;;			p = "/" + p
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		np := path.Clean(p)
0000000000000000000000000000000000000000;;		// path.Clean removes trailing slash except for root,
0000000000000000000000000000000000000000;;		// put the trailing slash back if necessary.
0000000000000000000000000000000000000000;;		if p[len(p)-1] == '/' && np != "/" {
0000000000000000000000000000000000000000;;			np += "/"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return np
0000000000000000000000000000000000000000;;	}
