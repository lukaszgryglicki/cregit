0000000000000000000000000000000000000000;;	// Copyright 2009 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/coreos/etcd/pkg/crc/crc.go[Godeps/_workspace/src/github.com/coreos/etcd/pkg/crc/crc.go][vendor/github.com/coreos/etcd/pkg/crc/crc.go];	
0000000000000000000000000000000000000000;;	// Package crc provides utility function for cyclic redundancy check
0000000000000000000000000000000000000000;;	// algorithms.
0000000000000000000000000000000000000000;;	package crc
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"hash"
0000000000000000000000000000000000000000;;		"hash/crc32"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The size of a CRC-32 checksum in bytes.
0000000000000000000000000000000000000000;;	const Size = 4
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type digest struct {
0000000000000000000000000000000000000000;;		crc uint32
0000000000000000000000000000000000000000;;		tab *crc32.Table
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// New creates a new hash.Hash32 computing the CRC-32 checksum
0000000000000000000000000000000000000000;;	// using the polynomial represented by the Table.
0000000000000000000000000000000000000000;;	// Modified by xiangli to take a prevcrc.
0000000000000000000000000000000000000000;;	func New(prev uint32, tab *crc32.Table) hash.Hash32 { return &digest{prev, tab} }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *digest) Size() int { return Size }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *digest) BlockSize() int { return 1 }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *digest) Reset() { d.crc = 0 }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *digest) Write(p []byte) (n int, err error) {
0000000000000000000000000000000000000000;;		d.crc = crc32.Update(d.crc, d.tab, p)
0000000000000000000000000000000000000000;;		return len(p), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *digest) Sum32() uint32 { return d.crc }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *digest) Sum(in []byte) []byte {
0000000000000000000000000000000000000000;;		s := d.Sum32()
0000000000000000000000000000000000000000;;		return append(in, byte(s>>24), byte(s>>16), byte(s>>8), byte(s))
0000000000000000000000000000000000000000;;	}
