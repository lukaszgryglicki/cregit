0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/coreos/etcd/pkg/fileutil/lock_solaris.go[Godeps/_workspace/src/github.com/coreos/etcd/pkg/fileutil/lock_solaris.go][vendor/github.com/coreos/etcd/pkg/fileutil/lock_solaris.go];	
0000000000000000000000000000000000000000;;	// +build solaris
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package fileutil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TryLockFile(path string, flag int, perm os.FileMode) (*LockedFile, error) {
0000000000000000000000000000000000000000;;		var lock syscall.Flock_t
0000000000000000000000000000000000000000;;		lock.Start = 0
0000000000000000000000000000000000000000;;		lock.Len = 0
0000000000000000000000000000000000000000;;		lock.Pid = 0
0000000000000000000000000000000000000000;;		lock.Type = syscall.F_WRLCK
0000000000000000000000000000000000000000;;		lock.Whence = 0
0000000000000000000000000000000000000000;;		lock.Pid = 0
0000000000000000000000000000000000000000;;		f, err := os.OpenFile(path, flag, perm)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := syscall.FcntlFlock(f.Fd(), syscall.F_SETLK, &lock); err != nil {
0000000000000000000000000000000000000000;;			f.Close()
0000000000000000000000000000000000000000;;			if err == syscall.EAGAIN {
0000000000000000000000000000000000000000;;				err = ErrLocked
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &LockedFile{f}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func LockFile(path string, flag int, perm os.FileMode) (*LockedFile, error) {
0000000000000000000000000000000000000000;;		var lock syscall.Flock_t
0000000000000000000000000000000000000000;;		lock.Start = 0
0000000000000000000000000000000000000000;;		lock.Len = 0
0000000000000000000000000000000000000000;;		lock.Pid = 0
0000000000000000000000000000000000000000;;		lock.Type = syscall.F_WRLCK
0000000000000000000000000000000000000000;;		lock.Whence = 0
0000000000000000000000000000000000000000;;		f, err := os.OpenFile(path, flag, perm)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err = syscall.FcntlFlock(f.Fd(), syscall.F_SETLKW, &lock); err != nil {
0000000000000000000000000000000000000000;;			f.Close()
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &LockedFile{f}, nil
0000000000000000000000000000000000000000;;	}
