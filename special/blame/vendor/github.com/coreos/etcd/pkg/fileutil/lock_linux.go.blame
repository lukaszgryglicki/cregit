0000000000000000000000000000000000000000;;	// Copyright 2016 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
885071b7d07344044421ffe2fd90c1bcd1ee9812;;	
0000000000000000000000000000000000000000;;	// +build linux
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package fileutil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This used to call syscall.Flock() but that call fails with EBADF on NFS.
0000000000000000000000000000000000000000;;	// An alternative is lockf() which works on NFS but that call lets a process lock
0000000000000000000000000000000000000000;;	// the same file twice. Instead, use Linux's non-standard open file descriptor
0000000000000000000000000000000000000000;;	// locks which will block if the process already holds the file lock.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// constants from /usr/include/bits/fcntl-linux.h
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		F_OFD_GETLK  = 37
0000000000000000000000000000000000000000;;		F_OFD_SETLK  = 37
0000000000000000000000000000000000000000;;		F_OFD_SETLKW = 38
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		wrlck = syscall.Flock_t{
0000000000000000000000000000000000000000;;			Type:   syscall.F_WRLCK,
0000000000000000000000000000000000000000;;			Whence: int16(os.SEEK_SET),
0000000000000000000000000000000000000000;;			Start:  0,
0000000000000000000000000000000000000000;;			Len:    0,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		linuxTryLockFile = flockTryLockFile
0000000000000000000000000000000000000000;;		linuxLockFile    = flockLockFile
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		// use open file descriptor locks if the system supports it
0000000000000000000000000000000000000000;;		getlk := syscall.Flock_t{Type: syscall.F_RDLCK}
0000000000000000000000000000000000000000;;		if err := syscall.FcntlFlock(0, F_OFD_GETLK, &getlk); err == nil {
0000000000000000000000000000000000000000;;			linuxTryLockFile = ofdTryLockFile
0000000000000000000000000000000000000000;;			linuxLockFile = ofdLockFile
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TryLockFile(path string, flag int, perm os.FileMode) (*LockedFile, error) {
0000000000000000000000000000000000000000;;		return linuxTryLockFile(path, flag, perm)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ofdTryLockFile(path string, flag int, perm os.FileMode) (*LockedFile, error) {
0000000000000000000000000000000000000000;;		f, err := os.OpenFile(path, flag, perm)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		flock := wrlck
0000000000000000000000000000000000000000;;		if err = syscall.FcntlFlock(f.Fd(), F_OFD_SETLK, &flock); err != nil {
0000000000000000000000000000000000000000;;			f.Close()
0000000000000000000000000000000000000000;;			if err == syscall.EWOULDBLOCK {
0000000000000000000000000000000000000000;;				err = ErrLocked
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &LockedFile{f}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func LockFile(path string, flag int, perm os.FileMode) (*LockedFile, error) {
0000000000000000000000000000000000000000;;		return linuxLockFile(path, flag, perm)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ofdLockFile(path string, flag int, perm os.FileMode) (*LockedFile, error) {
0000000000000000000000000000000000000000;;		f, err := os.OpenFile(path, flag, perm)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		flock := wrlck
0000000000000000000000000000000000000000;;		err = syscall.FcntlFlock(f.Fd(), F_OFD_SETLKW, &flock)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			f.Close()
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &LockedFile{f}, err
0000000000000000000000000000000000000000;;	}
