0000000000000000000000000000000000000000;;	// Copyright 2016 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/coreos/etcd/etcdserver/etcdhttp/httptypes/errors.go[Godeps/_workspace/src/github.com/coreos/etcd/etcdserver/etcdhttp/httptypes/errors.go][vendor/github.com/coreos/etcd/pkg/fileutil/preallocate_unix.go];	
0000000000000000000000000000000000000000;;	// +build linux
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package fileutil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func preallocExtend(f *os.File, sizeInBytes int64) error {
0000000000000000000000000000000000000000;;		// use mode = 0 to change size
0000000000000000000000000000000000000000;;		err := syscall.Fallocate(int(f.Fd()), 0, 0, sizeInBytes)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			errno, ok := err.(syscall.Errno)
0000000000000000000000000000000000000000;;			// not supported; fallback
0000000000000000000000000000000000000000;;			// fallocate EINTRs frequently in some environments; fallback
0000000000000000000000000000000000000000;;			if ok && (errno == syscall.ENOTSUP || errno == syscall.EINTR) {
0000000000000000000000000000000000000000;;				return preallocExtendTrunc(f, sizeInBytes)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func preallocFixed(f *os.File, sizeInBytes int64) error {
0000000000000000000000000000000000000000;;		// use mode = 1 to keep size; see FALLOC_FL_KEEP_SIZE
0000000000000000000000000000000000000000;;		err := syscall.Fallocate(int(f.Fd()), 1, 0, sizeInBytes)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			errno, ok := err.(syscall.Errno)
0000000000000000000000000000000000000000;;			// treat not supported as nil error
0000000000000000000000000000000000000000;;			if ok && errno == syscall.ENOTSUP {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
