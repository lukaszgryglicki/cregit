0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/coreos/etcd/pkg/fileutil/preallocate.go[Godeps/_workspace/src/github.com/coreos/etcd/pkg/fileutil/preallocate.go][vendor/github.com/coreos/etcd/pkg/fileutil/preallocate.go];	
0000000000000000000000000000000000000000;;	package fileutil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "os"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Preallocate tries to allocate the space for given
0000000000000000000000000000000000000000;;	// file. This operation is only supported on linux by a
0000000000000000000000000000000000000000;;	// few filesystems (btrfs, ext4, etc.).
0000000000000000000000000000000000000000;;	// If the operation is unsupported, no error will be returned.
0000000000000000000000000000000000000000;;	// Otherwise, the error encountered will be returned.
0000000000000000000000000000000000000000;;	func Preallocate(f *os.File, sizeInBytes int64, extendFile bool) error {
0000000000000000000000000000000000000000;;		if extendFile {
0000000000000000000000000000000000000000;;			return preallocExtend(f, sizeInBytes)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return preallocFixed(f, sizeInBytes)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func preallocExtendTrunc(f *os.File, sizeInBytes int64) error {
0000000000000000000000000000000000000000;;		curOff, err := f.Seek(0, os.SEEK_CUR)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		size, err := f.Seek(sizeInBytes, os.SEEK_END)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, err = f.Seek(curOff, os.SEEK_SET); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if sizeInBytes > size {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return f.Truncate(sizeInBytes)
0000000000000000000000000000000000000000;;	}
