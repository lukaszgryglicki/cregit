0000000000000000000000000000000000000000;;	// Copyright 2016 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
a0c6d1f6525fb38e26fc8c9217073cf57b989161;;	
0000000000000000000000000000000000000000;;	// +build windows
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package fileutil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OpenDir opens a directory in windows with write access for syncing.
0000000000000000000000000000000000000000;;	func OpenDir(path string) (*os.File, error) {
0000000000000000000000000000000000000000;;		fd, err := openDir(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return os.NewFile(uintptr(fd), path), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func openDir(path string) (fd syscall.Handle, err error) {
0000000000000000000000000000000000000000;;		if len(path) == 0 {
0000000000000000000000000000000000000000;;			return syscall.InvalidHandle, syscall.ERROR_FILE_NOT_FOUND
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pathp, err := syscall.UTF16PtrFromString(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return syscall.InvalidHandle, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		access := uint32(syscall.GENERIC_READ | syscall.GENERIC_WRITE)
0000000000000000000000000000000000000000;;		sharemode := uint32(syscall.FILE_SHARE_READ | syscall.FILE_SHARE_WRITE)
0000000000000000000000000000000000000000;;		createmode := uint32(syscall.OPEN_EXISTING)
0000000000000000000000000000000000000000;;		fl := uint32(syscall.FILE_FLAG_BACKUP_SEMANTICS)
0000000000000000000000000000000000000000;;		return syscall.CreateFile(pathp, access, sharemode, nil, createmode, fl, 0)
0000000000000000000000000000000000000000;;	}
