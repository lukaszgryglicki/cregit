0000000000000000000000000000000000000000;;	// Copyright 2016 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
a405384ce9c7fbbffc6a5a8bb2203d32e3b85976;Godeps/_workspace/src/github.com/coreos/etcd/pkg/contention/contention.go[Godeps/_workspace/src/github.com/coreos/etcd/pkg/contention/contention.go][vendor/github.com/coreos/etcd/pkg/contention/contention.go];	
0000000000000000000000000000000000000000;;	package contention
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TimeoutDetector detects routine starvations by
0000000000000000000000000000000000000000;;	// observing the actual time duration to finish an action
0000000000000000000000000000000000000000;;	// or between two events that should happen in a fixed
0000000000000000000000000000000000000000;;	// interval. If the observed duration is longer than
0000000000000000000000000000000000000000;;	// the expectation, the detector will report the result.
0000000000000000000000000000000000000000;;	type TimeoutDetector struct {
0000000000000000000000000000000000000000;;		mu          sync.Mutex // protects all
0000000000000000000000000000000000000000;;		maxDuration time.Duration
0000000000000000000000000000000000000000;;		// map from event to time
0000000000000000000000000000000000000000;;		// time is the last seen time of the event.
0000000000000000000000000000000000000000;;		records map[uint64]time.Time
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewTimeoutDetector creates the TimeoutDetector.
0000000000000000000000000000000000000000;;	func NewTimeoutDetector(maxDuration time.Duration) *TimeoutDetector {
0000000000000000000000000000000000000000;;		return &TimeoutDetector{
0000000000000000000000000000000000000000;;			maxDuration: maxDuration,
0000000000000000000000000000000000000000;;			records:     make(map[uint64]time.Time),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Reset resets the NewTimeoutDetector.
0000000000000000000000000000000000000000;;	func (td *TimeoutDetector) Reset() {
0000000000000000000000000000000000000000;;		td.mu.Lock()
0000000000000000000000000000000000000000;;		defer td.mu.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		td.records = make(map[uint64]time.Time)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Observe observes an event for given id. It returns false and exceeded duration
0000000000000000000000000000000000000000;;	// if the interval is longer than the expectation.
0000000000000000000000000000000000000000;;	func (td *TimeoutDetector) Observe(which uint64) (bool, time.Duration) {
0000000000000000000000000000000000000000;;		td.mu.Lock()
0000000000000000000000000000000000000000;;		defer td.mu.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ok := true
0000000000000000000000000000000000000000;;		now := time.Now()
0000000000000000000000000000000000000000;;		exceed := time.Duration(0)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if pt, found := td.records[which]; found {
0000000000000000000000000000000000000000;;			exceed = now.Sub(pt) - td.maxDuration
0000000000000000000000000000000000000000;;			if exceed > 0 {
0000000000000000000000000000000000000000;;				ok = false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		td.records[which] = now
0000000000000000000000000000000000000000;;		return ok, exceed
0000000000000000000000000000000000000000;;	}
