0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/coreos/etcd/pkg/types/id.go[Godeps/_workspace/src/github.com/coreos/etcd/pkg/types/id.go][vendor/github.com/coreos/etcd/pkg/types/id.go];	
0000000000000000000000000000000000000000;;	package types
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ID represents a generic identifier which is canonically
0000000000000000000000000000000000000000;;	// stored as a uint64 but is typically represented as a
0000000000000000000000000000000000000000;;	// base-16 string for input/output
0000000000000000000000000000000000000000;;	type ID uint64
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i ID) String() string {
0000000000000000000000000000000000000000;;		return strconv.FormatUint(uint64(i), 16)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IDFromString attempts to create an ID from a base-16 string.
0000000000000000000000000000000000000000;;	func IDFromString(s string) (ID, error) {
0000000000000000000000000000000000000000;;		i, err := strconv.ParseUint(s, 16, 64)
0000000000000000000000000000000000000000;;		return ID(i), err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IDSlice implements the sort interface
0000000000000000000000000000000000000000;;	type IDSlice []ID
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p IDSlice) Len() int           { return len(p) }
0000000000000000000000000000000000000000;;	func (p IDSlice) Less(i, j int) bool { return uint64(p[i]) < uint64(p[j]) }
0000000000000000000000000000000000000000;;	func (p IDSlice) Swap(i, j int)      { p[i], p[j] = p[j], p[i] }
