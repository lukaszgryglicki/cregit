0000000000000000000000000000000000000000;;	// Copyright 2017 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
550be6508d59ea184bfb64f8ae23c177b9e6d1c9;;	
0000000000000000000000000000000000000000;;	package cpuutil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/binary"
0000000000000000000000000000000000000000;;		"unsafe"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const intWidth int = int(unsafe.Sizeof(0))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var byteOrder binary.ByteOrder
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ByteOrder returns the byte order for the CPU's native endianness.
0000000000000000000000000000000000000000;;	func ByteOrder() binary.ByteOrder { return byteOrder }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		var i int = 0x1
0000000000000000000000000000000000000000;;		if v := (*[intWidth]byte)(unsafe.Pointer(&i)); v[0] == 0 {
0000000000000000000000000000000000000000;;			byteOrder = binary.BigEndian
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			byteOrder = binary.LittleEndian
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
