0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/coreos/etcd/pkg/wait/wait_time.go[Godeps/_workspace/src/github.com/coreos/etcd/pkg/wait/wait_time.go][vendor/github.com/coreos/etcd/pkg/wait/wait_time.go];	
0000000000000000000000000000000000000000;;	package wait
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "sync"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type WaitTime interface {
0000000000000000000000000000000000000000;;		// Wait returns a chan that waits on the given logical deadline.
0000000000000000000000000000000000000000;;		// The chan will be triggered when Trigger is called with a
0000000000000000000000000000000000000000;;		// deadline that is later than the one it is waiting for.
0000000000000000000000000000000000000000;;		Wait(deadline uint64) <-chan struct{}
0000000000000000000000000000000000000000;;		// Trigger triggers all the waiting chans with an earlier logical deadline.
0000000000000000000000000000000000000000;;		Trigger(deadline uint64)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var closec chan struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() { closec = make(chan struct{}); close(closec) }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type timeList struct {
0000000000000000000000000000000000000000;;		l                   sync.Mutex
0000000000000000000000000000000000000000;;		lastTriggerDeadline uint64
0000000000000000000000000000000000000000;;		m                   map[uint64]chan struct{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewTimeList() *timeList {
0000000000000000000000000000000000000000;;		return &timeList{m: make(map[uint64]chan struct{})}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (tl *timeList) Wait(deadline uint64) <-chan struct{} {
0000000000000000000000000000000000000000;;		tl.l.Lock()
0000000000000000000000000000000000000000;;		defer tl.l.Unlock()
0000000000000000000000000000000000000000;;		if tl.lastTriggerDeadline >= deadline {
0000000000000000000000000000000000000000;;			return closec
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ch := tl.m[deadline]
0000000000000000000000000000000000000000;;		if ch == nil {
0000000000000000000000000000000000000000;;			ch = make(chan struct{})
0000000000000000000000000000000000000000;;			tl.m[deadline] = ch
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ch
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (tl *timeList) Trigger(deadline uint64) {
0000000000000000000000000000000000000000;;		tl.l.Lock()
0000000000000000000000000000000000000000;;		defer tl.l.Unlock()
0000000000000000000000000000000000000000;;		tl.lastTriggerDeadline = deadline
0000000000000000000000000000000000000000;;		for t, ch := range tl.m {
0000000000000000000000000000000000000000;;			if t <= deadline {
0000000000000000000000000000000000000000;;				delete(tl.m, t)
0000000000000000000000000000000000000000;;				close(ch)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
