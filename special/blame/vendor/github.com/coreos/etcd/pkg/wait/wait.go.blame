0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/coreos/etcd/pkg/wait/wait.go[Godeps/_workspace/src/github.com/coreos/etcd/pkg/wait/wait.go][vendor/github.com/coreos/etcd/pkg/wait/wait.go];	
0000000000000000000000000000000000000000;;	// Package wait provides utility functions for polling, listening using Go
0000000000000000000000000000000000000000;;	// channel.
0000000000000000000000000000000000000000;;	package wait
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"log"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Wait interface {
0000000000000000000000000000000000000000;;		Register(id uint64) <-chan interface{}
0000000000000000000000000000000000000000;;		Trigger(id uint64, x interface{})
0000000000000000000000000000000000000000;;		IsRegistered(id uint64) bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type List struct {
0000000000000000000000000000000000000000;;		l sync.Mutex
0000000000000000000000000000000000000000;;		m map[uint64]chan interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func New() *List {
0000000000000000000000000000000000000000;;		return &List{m: make(map[uint64]chan interface{})}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *List) Register(id uint64) <-chan interface{} {
0000000000000000000000000000000000000000;;		w.l.Lock()
0000000000000000000000000000000000000000;;		defer w.l.Unlock()
0000000000000000000000000000000000000000;;		ch := w.m[id]
0000000000000000000000000000000000000000;;		if ch == nil {
0000000000000000000000000000000000000000;;			ch = make(chan interface{}, 1)
0000000000000000000000000000000000000000;;			w.m[id] = ch
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			log.Panicf("dup id %x", id)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ch
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *List) Trigger(id uint64, x interface{}) {
0000000000000000000000000000000000000000;;		w.l.Lock()
0000000000000000000000000000000000000000;;		ch := w.m[id]
0000000000000000000000000000000000000000;;		delete(w.m, id)
0000000000000000000000000000000000000000;;		w.l.Unlock()
0000000000000000000000000000000000000000;;		if ch != nil {
0000000000000000000000000000000000000000;;			ch <- x
0000000000000000000000000000000000000000;;			close(ch)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *List) IsRegistered(id uint64) bool {
0000000000000000000000000000000000000000;;		w.l.Lock()
0000000000000000000000000000000000000000;;		defer w.l.Unlock()
0000000000000000000000000000000000000000;;		_, ok := w.m[id]
0000000000000000000000000000000000000000;;		return ok
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type waitWithResponse struct {
0000000000000000000000000000000000000000;;		ch <-chan interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewWithResponse(ch <-chan interface{}) Wait {
0000000000000000000000000000000000000000;;		return &waitWithResponse{ch: ch}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *waitWithResponse) Register(id uint64) <-chan interface{} {
0000000000000000000000000000000000000000;;		return w.ch
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (w *waitWithResponse) Trigger(id uint64, x interface{}) {}
0000000000000000000000000000000000000000;;	func (w *waitWithResponse) IsRegistered(id uint64) bool {
0000000000000000000000000000000000000000;;		panic("waitWithResponse.IsRegistered() shouldn't be called")
0000000000000000000000000000000000000000;;	}
