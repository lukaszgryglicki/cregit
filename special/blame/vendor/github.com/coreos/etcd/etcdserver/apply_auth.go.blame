0000000000000000000000000000000000000000;;	// Copyright 2016 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
885071b7d07344044421ffe2fd90c1bcd1ee9812;;	
0000000000000000000000000000000000000000;;	package etcdserver
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/auth"
0000000000000000000000000000000000000000;;		pb "github.com/coreos/etcd/etcdserver/etcdserverpb"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type authApplierV3 struct {
0000000000000000000000000000000000000000;;		applierV3
0000000000000000000000000000000000000000;;		as auth.AuthStore
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// mu serializes Apply so that user isn't corrupted and so that
0000000000000000000000000000000000000000;;		// serialized requests don't leak data from TOCTOU errors
0000000000000000000000000000000000000000;;		mu sync.Mutex
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		authInfo auth.AuthInfo
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newAuthApplierV3(as auth.AuthStore, base applierV3) *authApplierV3 {
0000000000000000000000000000000000000000;;		return &authApplierV3{applierV3: base, as: as}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (aa *authApplierV3) Apply(r *pb.InternalRaftRequest) *applyResult {
0000000000000000000000000000000000000000;;		aa.mu.Lock()
0000000000000000000000000000000000000000;;		defer aa.mu.Unlock()
0000000000000000000000000000000000000000;;		if r.Header != nil {
0000000000000000000000000000000000000000;;			// backward-compatible with pre-3.0 releases when internalRaftRequest
0000000000000000000000000000000000000000;;			// does not have header field
0000000000000000000000000000000000000000;;			aa.authInfo.Username = r.Header.Username
0000000000000000000000000000000000000000;;			aa.authInfo.Revision = r.Header.AuthRevision
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if needAdminPermission(r) {
0000000000000000000000000000000000000000;;			if err := aa.as.IsAdminPermitted(&aa.authInfo); err != nil {
0000000000000000000000000000000000000000;;				aa.authInfo.Username = ""
0000000000000000000000000000000000000000;;				aa.authInfo.Revision = 0
0000000000000000000000000000000000000000;;				return &applyResult{err: err}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := aa.applierV3.Apply(r)
0000000000000000000000000000000000000000;;		aa.authInfo.Username = ""
0000000000000000000000000000000000000000;;		aa.authInfo.Revision = 0
0000000000000000000000000000000000000000;;		return ret
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (aa *authApplierV3) Put(txnID int64, r *pb.PutRequest) (*pb.PutResponse, error) {
0000000000000000000000000000000000000000;;		if err := aa.as.IsPutPermitted(&aa.authInfo, r.Key); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if r.PrevKv {
0000000000000000000000000000000000000000;;			err := aa.as.IsRangePermitted(&aa.authInfo, r.Key, nil)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return aa.applierV3.Put(txnID, r)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (aa *authApplierV3) Range(txnID int64, r *pb.RangeRequest) (*pb.RangeResponse, error) {
0000000000000000000000000000000000000000;;		if err := aa.as.IsRangePermitted(&aa.authInfo, r.Key, r.RangeEnd); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return aa.applierV3.Range(txnID, r)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (aa *authApplierV3) DeleteRange(txnID int64, r *pb.DeleteRangeRequest) (*pb.DeleteRangeResponse, error) {
0000000000000000000000000000000000000000;;		if err := aa.as.IsDeleteRangePermitted(&aa.authInfo, r.Key, r.RangeEnd); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if r.PrevKv {
0000000000000000000000000000000000000000;;			err := aa.as.IsRangePermitted(&aa.authInfo, r.Key, r.RangeEnd)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return aa.applierV3.DeleteRange(txnID, r)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func checkTxnReqsPermission(as auth.AuthStore, ai *auth.AuthInfo, reqs []*pb.RequestOp) error {
0000000000000000000000000000000000000000;;		for _, requ := range reqs {
0000000000000000000000000000000000000000;;			switch tv := requ.Request.(type) {
0000000000000000000000000000000000000000;;			case *pb.RequestOp_RequestRange:
0000000000000000000000000000000000000000;;				if tv.RequestRange == nil {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if err := as.IsRangePermitted(ai, tv.RequestRange.Key, tv.RequestRange.RangeEnd); err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			case *pb.RequestOp_RequestPut:
0000000000000000000000000000000000000000;;				if tv.RequestPut == nil {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if err := as.IsPutPermitted(ai, tv.RequestPut.Key); err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			case *pb.RequestOp_RequestDeleteRange:
0000000000000000000000000000000000000000;;				if tv.RequestDeleteRange == nil {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if tv.RequestDeleteRange.PrevKv {
0000000000000000000000000000000000000000;;					err := as.IsRangePermitted(ai, tv.RequestDeleteRange.Key, tv.RequestDeleteRange.RangeEnd)
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						return err
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				err := as.IsDeleteRangePermitted(ai, tv.RequestDeleteRange.Key, tv.RequestDeleteRange.RangeEnd)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func checkTxnAuth(as auth.AuthStore, ai *auth.AuthInfo, rt *pb.TxnRequest) error {
0000000000000000000000000000000000000000;;		for _, c := range rt.Compare {
0000000000000000000000000000000000000000;;			if err := as.IsRangePermitted(ai, c.Key, nil); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := checkTxnReqsPermission(as, ai, rt.Success); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := checkTxnReqsPermission(as, ai, rt.Failure); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (aa *authApplierV3) Txn(rt *pb.TxnRequest) (*pb.TxnResponse, error) {
0000000000000000000000000000000000000000;;		if err := checkTxnAuth(aa.as, &aa.authInfo, rt); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return aa.applierV3.Txn(rt)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func needAdminPermission(r *pb.InternalRaftRequest) bool {
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case r.AuthEnable != nil:
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		case r.AuthDisable != nil:
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		case r.AuthUserAdd != nil:
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		case r.AuthUserDelete != nil:
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		case r.AuthUserChangePassword != nil:
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		case r.AuthUserGrantRole != nil:
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		case r.AuthUserGet != nil:
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		case r.AuthUserRevokeRole != nil:
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		case r.AuthRoleAdd != nil:
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		case r.AuthRoleGrantPermission != nil:
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		case r.AuthRoleGet != nil:
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		case r.AuthRoleRevokePermission != nil:
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		case r.AuthRoleDelete != nil:
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		case r.AuthUserList != nil:
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		case r.AuthRoleList != nil:
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
