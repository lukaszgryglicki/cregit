0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
a405384ce9c7fbbffc6a5a8bb2203d32e3b85976;Godeps/_workspace/src/github.com/coreos/etcd/etcdserver/snapshot_merge.go[Godeps/_workspace/src/github.com/coreos/etcd/etcdserver/snapshot_merge.go][vendor/github.com/coreos/etcd/etcdserver/snapshot_merge.go];	
0000000000000000000000000000000000000000;;	package etcdserver
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/mvcc/backend"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/raft/raftpb"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/snap"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// createMergedSnapshotMessage creates a snapshot message that contains: raft status (term, conf),
0000000000000000000000000000000000000000;;	// a snapshot of v2 store inside raft.Snapshot as []byte, a snapshot of v3 KV in the top level message
0000000000000000000000000000000000000000;;	// as ReadCloser.
0000000000000000000000000000000000000000;;	func (s *EtcdServer) createMergedSnapshotMessage(m raftpb.Message, snapt, snapi uint64, confState raftpb.ConfState) snap.Message {
0000000000000000000000000000000000000000;;		// get a snapshot of v2 store as []byte
0000000000000000000000000000000000000000;;		clone := s.store.Clone()
0000000000000000000000000000000000000000;;		d, err := clone.SaveNoCopy()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			plog.Panicf("store save should never fail: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// commit kv to write metadata(for example: consistent index).
0000000000000000000000000000000000000000;;		s.KV().Commit()
0000000000000000000000000000000000000000;;		dbsnap := s.be.Snapshot()
0000000000000000000000000000000000000000;;		// get a snapshot of v3 KV as readCloser
0000000000000000000000000000000000000000;;		rc := newSnapshotReaderCloser(dbsnap)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// put the []byte snapshot of store into raft snapshot and return the merged snapshot with
0000000000000000000000000000000000000000;;		// KV readCloser snapshot.
0000000000000000000000000000000000000000;;		snapshot := raftpb.Snapshot{
0000000000000000000000000000000000000000;;			Metadata: raftpb.SnapshotMetadata{
0000000000000000000000000000000000000000;;				Index:     snapi,
0000000000000000000000000000000000000000;;				Term:      snapt,
0000000000000000000000000000000000000000;;				ConfState: confState,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Data: d,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		m.Snapshot = snapshot
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return *snap.NewMessage(m, rc, dbsnap.Size())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newSnapshotReaderCloser(snapshot backend.Snapshot) io.ReadCloser {
0000000000000000000000000000000000000000;;		pr, pw := io.Pipe()
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			n, err := snapshot.WriteTo(pw)
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				plog.Infof("wrote database snapshot out [total bytes: %d]", n)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			pw.CloseWithError(err)
0000000000000000000000000000000000000000;;			snapshot.Close()
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		return pr
0000000000000000000000000000000000000000;;	}
