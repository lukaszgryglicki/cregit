0000000000000000000000000000000000000000;;	// Copyright 2016 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
1861d099d10ddfa47b9f2b8b925fc11bd0827dac;Godeps/_workspace/src/github.com/coreos/etcd/etcdserver/apply.go[Godeps/_workspace/src/github.com/coreos/etcd/etcdserver/apply.go][vendor/github.com/coreos/etcd/etcdserver/apply.go];	
0000000000000000000000000000000000000000;;	package etcdserver
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pb "github.com/coreos/etcd/etcdserver/etcdserverpb"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/lease"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/mvcc"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/mvcc/mvccpb"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/pkg/types"
0000000000000000000000000000000000000000;;		"github.com/gogo/protobuf/proto"
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// noTxn is an invalid txn ID.
0000000000000000000000000000000000000000;;		// To apply with independent Range, Put, Delete, you can pass noTxn
0000000000000000000000000000000000000000;;		// to apply functions instead of a valid txn ID.
0000000000000000000000000000000000000000;;		noTxn = -1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		warnApplyDuration = 100 * time.Millisecond
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type applyResult struct {
0000000000000000000000000000000000000000;;		resp proto.Message
0000000000000000000000000000000000000000;;		err  error
0000000000000000000000000000000000000000;;		// physc signals the physical effect of the request has completed in addition
0000000000000000000000000000000000000000;;		// to being logically reflected by the node. Currently only used for
0000000000000000000000000000000000000000;;		// Compaction requests.
0000000000000000000000000000000000000000;;		physc <-chan struct{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// applierV3 is the interface for processing V3 raft messages
0000000000000000000000000000000000000000;;	type applierV3 interface {
0000000000000000000000000000000000000000;;		Apply(r *pb.InternalRaftRequest) *applyResult
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Put(txnID int64, p *pb.PutRequest) (*pb.PutResponse, error)
0000000000000000000000000000000000000000;;		Range(txnID int64, r *pb.RangeRequest) (*pb.RangeResponse, error)
0000000000000000000000000000000000000000;;		DeleteRange(txnID int64, dr *pb.DeleteRangeRequest) (*pb.DeleteRangeResponse, error)
0000000000000000000000000000000000000000;;		Txn(rt *pb.TxnRequest) (*pb.TxnResponse, error)
0000000000000000000000000000000000000000;;		Compaction(compaction *pb.CompactionRequest) (*pb.CompactionResponse, <-chan struct{}, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		LeaseGrant(lc *pb.LeaseGrantRequest) (*pb.LeaseGrantResponse, error)
0000000000000000000000000000000000000000;;		LeaseRevoke(lc *pb.LeaseRevokeRequest) (*pb.LeaseRevokeResponse, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Alarm(*pb.AlarmRequest) (*pb.AlarmResponse, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Authenticate(r *pb.InternalAuthenticateRequest) (*pb.AuthenticateResponse, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AuthEnable() (*pb.AuthEnableResponse, error)
0000000000000000000000000000000000000000;;		AuthDisable() (*pb.AuthDisableResponse, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		UserAdd(ua *pb.AuthUserAddRequest) (*pb.AuthUserAddResponse, error)
0000000000000000000000000000000000000000;;		UserDelete(ua *pb.AuthUserDeleteRequest) (*pb.AuthUserDeleteResponse, error)
0000000000000000000000000000000000000000;;		UserChangePassword(ua *pb.AuthUserChangePasswordRequest) (*pb.AuthUserChangePasswordResponse, error)
0000000000000000000000000000000000000000;;		UserGrantRole(ua *pb.AuthUserGrantRoleRequest) (*pb.AuthUserGrantRoleResponse, error)
0000000000000000000000000000000000000000;;		UserGet(ua *pb.AuthUserGetRequest) (*pb.AuthUserGetResponse, error)
0000000000000000000000000000000000000000;;		UserRevokeRole(ua *pb.AuthUserRevokeRoleRequest) (*pb.AuthUserRevokeRoleResponse, error)
0000000000000000000000000000000000000000;;		RoleAdd(ua *pb.AuthRoleAddRequest) (*pb.AuthRoleAddResponse, error)
0000000000000000000000000000000000000000;;		RoleGrantPermission(ua *pb.AuthRoleGrantPermissionRequest) (*pb.AuthRoleGrantPermissionResponse, error)
0000000000000000000000000000000000000000;;		RoleGet(ua *pb.AuthRoleGetRequest) (*pb.AuthRoleGetResponse, error)
0000000000000000000000000000000000000000;;		RoleRevokePermission(ua *pb.AuthRoleRevokePermissionRequest) (*pb.AuthRoleRevokePermissionResponse, error)
0000000000000000000000000000000000000000;;		RoleDelete(ua *pb.AuthRoleDeleteRequest) (*pb.AuthRoleDeleteResponse, error)
0000000000000000000000000000000000000000;;		UserList(ua *pb.AuthUserListRequest) (*pb.AuthUserListResponse, error)
0000000000000000000000000000000000000000;;		RoleList(ua *pb.AuthRoleListRequest) (*pb.AuthRoleListResponse, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type applierV3backend struct {
0000000000000000000000000000000000000000;;		s *EtcdServer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *EtcdServer) newApplierV3() applierV3 {
0000000000000000000000000000000000000000;;		return newAuthApplierV3(
0000000000000000000000000000000000000000;;			s.AuthStore(),
0000000000000000000000000000000000000000;;			newQuotaApplierV3(s, &applierV3backend{s}),
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *applierV3backend) Apply(r *pb.InternalRaftRequest) *applyResult {
0000000000000000000000000000000000000000;;		ar := &applyResult{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// call into a.s.applyV3.F instead of a.F so upper appliers can check individual calls
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case r.Range != nil:
0000000000000000000000000000000000000000;;			ar.resp, ar.err = a.s.applyV3.Range(noTxn, r.Range)
0000000000000000000000000000000000000000;;		case r.Put != nil:
0000000000000000000000000000000000000000;;			ar.resp, ar.err = a.s.applyV3.Put(noTxn, r.Put)
0000000000000000000000000000000000000000;;		case r.DeleteRange != nil:
0000000000000000000000000000000000000000;;			ar.resp, ar.err = a.s.applyV3.DeleteRange(noTxn, r.DeleteRange)
0000000000000000000000000000000000000000;;		case r.Txn != nil:
0000000000000000000000000000000000000000;;			ar.resp, ar.err = a.s.applyV3.Txn(r.Txn)
0000000000000000000000000000000000000000;;		case r.Compaction != nil:
0000000000000000000000000000000000000000;;			ar.resp, ar.physc, ar.err = a.s.applyV3.Compaction(r.Compaction)
0000000000000000000000000000000000000000;;		case r.LeaseGrant != nil:
0000000000000000000000000000000000000000;;			ar.resp, ar.err = a.s.applyV3.LeaseGrant(r.LeaseGrant)
0000000000000000000000000000000000000000;;		case r.LeaseRevoke != nil:
0000000000000000000000000000000000000000;;			ar.resp, ar.err = a.s.applyV3.LeaseRevoke(r.LeaseRevoke)
0000000000000000000000000000000000000000;;		case r.Alarm != nil:
0000000000000000000000000000000000000000;;			ar.resp, ar.err = a.s.applyV3.Alarm(r.Alarm)
0000000000000000000000000000000000000000;;		case r.Authenticate != nil:
0000000000000000000000000000000000000000;;			ar.resp, ar.err = a.s.applyV3.Authenticate(r.Authenticate)
0000000000000000000000000000000000000000;;		case r.AuthEnable != nil:
0000000000000000000000000000000000000000;;			ar.resp, ar.err = a.s.applyV3.AuthEnable()
0000000000000000000000000000000000000000;;		case r.AuthDisable != nil:
0000000000000000000000000000000000000000;;			ar.resp, ar.err = a.s.applyV3.AuthDisable()
0000000000000000000000000000000000000000;;		case r.AuthUserAdd != nil:
0000000000000000000000000000000000000000;;			ar.resp, ar.err = a.s.applyV3.UserAdd(r.AuthUserAdd)
0000000000000000000000000000000000000000;;		case r.AuthUserDelete != nil:
0000000000000000000000000000000000000000;;			ar.resp, ar.err = a.s.applyV3.UserDelete(r.AuthUserDelete)
0000000000000000000000000000000000000000;;		case r.AuthUserChangePassword != nil:
0000000000000000000000000000000000000000;;			ar.resp, ar.err = a.s.applyV3.UserChangePassword(r.AuthUserChangePassword)
0000000000000000000000000000000000000000;;		case r.AuthUserGrantRole != nil:
0000000000000000000000000000000000000000;;			ar.resp, ar.err = a.s.applyV3.UserGrantRole(r.AuthUserGrantRole)
0000000000000000000000000000000000000000;;		case r.AuthUserGet != nil:
0000000000000000000000000000000000000000;;			ar.resp, ar.err = a.s.applyV3.UserGet(r.AuthUserGet)
0000000000000000000000000000000000000000;;		case r.AuthUserRevokeRole != nil:
0000000000000000000000000000000000000000;;			ar.resp, ar.err = a.s.applyV3.UserRevokeRole(r.AuthUserRevokeRole)
0000000000000000000000000000000000000000;;		case r.AuthRoleAdd != nil:
0000000000000000000000000000000000000000;;			ar.resp, ar.err = a.s.applyV3.RoleAdd(r.AuthRoleAdd)
0000000000000000000000000000000000000000;;		case r.AuthRoleGrantPermission != nil:
0000000000000000000000000000000000000000;;			ar.resp, ar.err = a.s.applyV3.RoleGrantPermission(r.AuthRoleGrantPermission)
0000000000000000000000000000000000000000;;		case r.AuthRoleGet != nil:
0000000000000000000000000000000000000000;;			ar.resp, ar.err = a.s.applyV3.RoleGet(r.AuthRoleGet)
0000000000000000000000000000000000000000;;		case r.AuthRoleRevokePermission != nil:
0000000000000000000000000000000000000000;;			ar.resp, ar.err = a.s.applyV3.RoleRevokePermission(r.AuthRoleRevokePermission)
0000000000000000000000000000000000000000;;		case r.AuthRoleDelete != nil:
0000000000000000000000000000000000000000;;			ar.resp, ar.err = a.s.applyV3.RoleDelete(r.AuthRoleDelete)
0000000000000000000000000000000000000000;;		case r.AuthUserList != nil:
0000000000000000000000000000000000000000;;			ar.resp, ar.err = a.s.applyV3.UserList(r.AuthUserList)
0000000000000000000000000000000000000000;;		case r.AuthRoleList != nil:
0000000000000000000000000000000000000000;;			ar.resp, ar.err = a.s.applyV3.RoleList(r.AuthRoleList)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			panic("not implemented")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ar
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *applierV3backend) Put(txnID int64, p *pb.PutRequest) (*pb.PutResponse, error) {
0000000000000000000000000000000000000000;;		resp := &pb.PutResponse{}
0000000000000000000000000000000000000000;;		resp.Header = &pb.ResponseHeader{}
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			rev int64
0000000000000000000000000000000000000000;;			err error
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var rr *mvcc.RangeResult
0000000000000000000000000000000000000000;;		if p.PrevKv {
0000000000000000000000000000000000000000;;			if txnID != noTxn {
0000000000000000000000000000000000000000;;				rr, err = a.s.KV().TxnRange(txnID, p.Key, nil, mvcc.RangeOptions{})
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return nil, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				rr, err = a.s.KV().Range(p.Key, nil, mvcc.RangeOptions{})
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return nil, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if txnID != noTxn {
0000000000000000000000000000000000000000;;			rev, err = a.s.KV().TxnPut(txnID, p.Key, p.Value, lease.LeaseID(p.Lease))
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			leaseID := lease.LeaseID(p.Lease)
0000000000000000000000000000000000000000;;			if leaseID != lease.NoLease {
0000000000000000000000000000000000000000;;				if l := a.s.lessor.Lookup(leaseID); l == nil {
0000000000000000000000000000000000000000;;					return nil, lease.ErrLeaseNotFound
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			rev = a.s.KV().Put(p.Key, p.Value, leaseID)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		resp.Header.Revision = rev
0000000000000000000000000000000000000000;;		if rr != nil && len(rr.KVs) != 0 {
0000000000000000000000000000000000000000;;			resp.PrevKv = &rr.KVs[0]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *applierV3backend) DeleteRange(txnID int64, dr *pb.DeleteRangeRequest) (*pb.DeleteRangeResponse, error) {
0000000000000000000000000000000000000000;;		resp := &pb.DeleteRangeResponse{}
0000000000000000000000000000000000000000;;		resp.Header = &pb.ResponseHeader{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			n   int64
0000000000000000000000000000000000000000;;			rev int64
0000000000000000000000000000000000000000;;			err error
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if isGteRange(dr.RangeEnd) {
0000000000000000000000000000000000000000;;			dr.RangeEnd = []byte{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var rr *mvcc.RangeResult
0000000000000000000000000000000000000000;;		if dr.PrevKv {
0000000000000000000000000000000000000000;;			if txnID != noTxn {
0000000000000000000000000000000000000000;;				rr, err = a.s.KV().TxnRange(txnID, dr.Key, dr.RangeEnd, mvcc.RangeOptions{})
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return nil, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				rr, err = a.s.KV().Range(dr.Key, dr.RangeEnd, mvcc.RangeOptions{})
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return nil, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if txnID != noTxn {
0000000000000000000000000000000000000000;;			n, rev, err = a.s.KV().TxnDeleteRange(txnID, dr.Key, dr.RangeEnd)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			n, rev = a.s.KV().DeleteRange(dr.Key, dr.RangeEnd)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp.Deleted = n
0000000000000000000000000000000000000000;;		if rr != nil {
0000000000000000000000000000000000000000;;			for i := range rr.KVs {
0000000000000000000000000000000000000000;;				resp.PrevKvs = append(resp.PrevKvs, &rr.KVs[i])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		resp.Header.Revision = rev
0000000000000000000000000000000000000000;;		return resp, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *applierV3backend) Range(txnID int64, r *pb.RangeRequest) (*pb.RangeResponse, error) {
0000000000000000000000000000000000000000;;		resp := &pb.RangeResponse{}
0000000000000000000000000000000000000000;;		resp.Header = &pb.ResponseHeader{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			rr  *mvcc.RangeResult
0000000000000000000000000000000000000000;;			err error
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if isGteRange(r.RangeEnd) {
0000000000000000000000000000000000000000;;			r.RangeEnd = []byte{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		limit := r.Limit
0000000000000000000000000000000000000000;;		if r.SortOrder != pb.RangeRequest_NONE ||
0000000000000000000000000000000000000000;;			r.MinModRevision != 0 || r.MaxModRevision != 0 ||
0000000000000000000000000000000000000000;;			r.MinCreateRevision != 0 || r.MaxCreateRevision != 0 {
0000000000000000000000000000000000000000;;			// fetch everything; sort and truncate afterwards
0000000000000000000000000000000000000000;;			limit = 0
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if limit > 0 {
0000000000000000000000000000000000000000;;			// fetch one extra for 'more' flag
0000000000000000000000000000000000000000;;			limit = limit + 1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ro := mvcc.RangeOptions{
0000000000000000000000000000000000000000;;			Limit: limit,
0000000000000000000000000000000000000000;;			Rev:   r.Revision,
0000000000000000000000000000000000000000;;			Count: r.CountOnly,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if txnID != noTxn {
0000000000000000000000000000000000000000;;			rr, err = a.s.KV().TxnRange(txnID, r.Key, r.RangeEnd, ro)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			rr, err = a.s.KV().Range(r.Key, r.RangeEnd, ro)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if r.MaxModRevision != 0 {
0000000000000000000000000000000000000000;;			f := func(kv *mvccpb.KeyValue) bool { return kv.ModRevision > r.MaxModRevision }
0000000000000000000000000000000000000000;;			pruneKVs(rr, f)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if r.MinModRevision != 0 {
0000000000000000000000000000000000000000;;			f := func(kv *mvccpb.KeyValue) bool { return kv.ModRevision < r.MinModRevision }
0000000000000000000000000000000000000000;;			pruneKVs(rr, f)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if r.MaxCreateRevision != 0 {
0000000000000000000000000000000000000000;;			f := func(kv *mvccpb.KeyValue) bool { return kv.CreateRevision > r.MaxCreateRevision }
0000000000000000000000000000000000000000;;			pruneKVs(rr, f)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if r.MinCreateRevision != 0 {
0000000000000000000000000000000000000000;;			f := func(kv *mvccpb.KeyValue) bool { return kv.CreateRevision < r.MinCreateRevision }
0000000000000000000000000000000000000000;;			pruneKVs(rr, f)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		sortOrder := r.SortOrder
0000000000000000000000000000000000000000;;		if r.SortTarget != pb.RangeRequest_KEY && sortOrder == pb.RangeRequest_NONE {
0000000000000000000000000000000000000000;;			// Since current mvcc.Range implementation returns results
0000000000000000000000000000000000000000;;			// sorted by keys in lexiographically ascending order,
0000000000000000000000000000000000000000;;			// sort ASCEND by default only when target is not 'KEY'
0000000000000000000000000000000000000000;;			sortOrder = pb.RangeRequest_ASCEND
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if sortOrder != pb.RangeRequest_NONE {
0000000000000000000000000000000000000000;;			var sorter sort.Interface
0000000000000000000000000000000000000000;;			switch {
0000000000000000000000000000000000000000;;			case r.SortTarget == pb.RangeRequest_KEY:
0000000000000000000000000000000000000000;;				sorter = &kvSortByKey{&kvSort{rr.KVs}}
0000000000000000000000000000000000000000;;			case r.SortTarget == pb.RangeRequest_VERSION:
0000000000000000000000000000000000000000;;				sorter = &kvSortByVersion{&kvSort{rr.KVs}}
0000000000000000000000000000000000000000;;			case r.SortTarget == pb.RangeRequest_CREATE:
0000000000000000000000000000000000000000;;				sorter = &kvSortByCreate{&kvSort{rr.KVs}}
0000000000000000000000000000000000000000;;			case r.SortTarget == pb.RangeRequest_MOD:
0000000000000000000000000000000000000000;;				sorter = &kvSortByMod{&kvSort{rr.KVs}}
0000000000000000000000000000000000000000;;			case r.SortTarget == pb.RangeRequest_VALUE:
0000000000000000000000000000000000000000;;				sorter = &kvSortByValue{&kvSort{rr.KVs}}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			switch {
0000000000000000000000000000000000000000;;			case sortOrder == pb.RangeRequest_ASCEND:
0000000000000000000000000000000000000000;;				sort.Sort(sorter)
0000000000000000000000000000000000000000;;			case sortOrder == pb.RangeRequest_DESCEND:
0000000000000000000000000000000000000000;;				sort.Sort(sort.Reverse(sorter))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if r.Limit > 0 && len(rr.KVs) > int(r.Limit) {
0000000000000000000000000000000000000000;;			rr.KVs = rr.KVs[:r.Limit]
0000000000000000000000000000000000000000;;			resp.More = true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp.Header.Revision = rr.Rev
0000000000000000000000000000000000000000;;		resp.Count = int64(rr.Count)
0000000000000000000000000000000000000000;;		for i := range rr.KVs {
0000000000000000000000000000000000000000;;			if r.KeysOnly {
0000000000000000000000000000000000000000;;				rr.KVs[i].Value = nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			resp.Kvs = append(resp.Kvs, &rr.KVs[i])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *applierV3backend) Txn(rt *pb.TxnRequest) (*pb.TxnResponse, error) {
0000000000000000000000000000000000000000;;		ok := true
0000000000000000000000000000000000000000;;		for _, c := range rt.Compare {
0000000000000000000000000000000000000000;;			if _, ok = a.applyCompare(c); !ok {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var reqs []*pb.RequestOp
0000000000000000000000000000000000000000;;		if ok {
0000000000000000000000000000000000000000;;			reqs = rt.Success
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			reqs = rt.Failure
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := a.checkRequestLeases(reqs); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := a.checkRequestRange(reqs); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// When executing the operations of txn, we need to hold the txn lock.
0000000000000000000000000000000000000000;;		// So the reader will not see any intermediate results.
0000000000000000000000000000000000000000;;		txnID := a.s.KV().TxnBegin()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resps := make([]*pb.ResponseOp, len(reqs))
0000000000000000000000000000000000000000;;		for i := range reqs {
0000000000000000000000000000000000000000;;			resps[i] = a.applyUnion(txnID, reqs[i])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := a.s.KV().TxnEnd(txnID)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(fmt.Sprint("unexpected error when closing txn", txnID))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		txnResp := &pb.TxnResponse{}
0000000000000000000000000000000000000000;;		txnResp.Header = &pb.ResponseHeader{}
0000000000000000000000000000000000000000;;		txnResp.Header.Revision = a.s.KV().Rev()
0000000000000000000000000000000000000000;;		txnResp.Responses = resps
0000000000000000000000000000000000000000;;		txnResp.Succeeded = ok
0000000000000000000000000000000000000000;;		return txnResp, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// applyCompare applies the compare request.
0000000000000000000000000000000000000000;;	// It returns the revision at which the comparison happens. If the comparison
0000000000000000000000000000000000000000;;	// succeeds, the it returns true. Otherwise it returns false.
0000000000000000000000000000000000000000;;	func (a *applierV3backend) applyCompare(c *pb.Compare) (int64, bool) {
0000000000000000000000000000000000000000;;		rr, err := a.s.KV().Range(c.Key, nil, mvcc.RangeOptions{})
0000000000000000000000000000000000000000;;		rev := rr.Rev
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if err == mvcc.ErrTxnIDMismatch {
0000000000000000000000000000000000000000;;				panic("unexpected txn ID mismatch error")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return rev, false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var ckv mvccpb.KeyValue
0000000000000000000000000000000000000000;;		if len(rr.KVs) != 0 {
0000000000000000000000000000000000000000;;			ckv = rr.KVs[0]
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			// Use the zero value of ckv normally. However...
0000000000000000000000000000000000000000;;			if c.Target == pb.Compare_VALUE {
0000000000000000000000000000000000000000;;				// Always fail if we're comparing a value on a key that doesn't exist.
0000000000000000000000000000000000000000;;				// We can treat non-existence as the empty set explicitly, such that
0000000000000000000000000000000000000000;;				// even a key with a value of length 0 bytes is still a real key
0000000000000000000000000000000000000000;;				// that was written that way
0000000000000000000000000000000000000000;;				return rev, false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// -1 is less, 0 is equal, 1 is greater
0000000000000000000000000000000000000000;;		var result int
0000000000000000000000000000000000000000;;		switch c.Target {
0000000000000000000000000000000000000000;;		case pb.Compare_VALUE:
0000000000000000000000000000000000000000;;			tv, _ := c.TargetUnion.(*pb.Compare_Value)
0000000000000000000000000000000000000000;;			if tv != nil {
0000000000000000000000000000000000000000;;				result = bytes.Compare(ckv.Value, tv.Value)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case pb.Compare_CREATE:
0000000000000000000000000000000000000000;;			tv, _ := c.TargetUnion.(*pb.Compare_CreateRevision)
0000000000000000000000000000000000000000;;			if tv != nil {
0000000000000000000000000000000000000000;;				result = compareInt64(ckv.CreateRevision, tv.CreateRevision)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case pb.Compare_MOD:
0000000000000000000000000000000000000000;;			tv, _ := c.TargetUnion.(*pb.Compare_ModRevision)
0000000000000000000000000000000000000000;;			if tv != nil {
0000000000000000000000000000000000000000;;				result = compareInt64(ckv.ModRevision, tv.ModRevision)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case pb.Compare_VERSION:
0000000000000000000000000000000000000000;;			tv, _ := c.TargetUnion.(*pb.Compare_Version)
0000000000000000000000000000000000000000;;			if tv != nil {
0000000000000000000000000000000000000000;;				result = compareInt64(ckv.Version, tv.Version)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch c.Result {
0000000000000000000000000000000000000000;;		case pb.Compare_EQUAL:
0000000000000000000000000000000000000000;;			if result != 0 {
0000000000000000000000000000000000000000;;				return rev, false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case pb.Compare_NOT_EQUAL:
0000000000000000000000000000000000000000;;			if result == 0 {
0000000000000000000000000000000000000000;;				return rev, false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case pb.Compare_GREATER:
0000000000000000000000000000000000000000;;			if result != 1 {
0000000000000000000000000000000000000000;;				return rev, false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case pb.Compare_LESS:
0000000000000000000000000000000000000000;;			if result != -1 {
0000000000000000000000000000000000000000;;				return rev, false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return rev, true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *applierV3backend) applyUnion(txnID int64, union *pb.RequestOp) *pb.ResponseOp {
0000000000000000000000000000000000000000;;		switch tv := union.Request.(type) {
0000000000000000000000000000000000000000;;		case *pb.RequestOp_RequestRange:
0000000000000000000000000000000000000000;;			if tv.RequestRange != nil {
0000000000000000000000000000000000000000;;				resp, err := a.Range(txnID, tv.RequestRange)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					plog.Panicf("unexpected error during txn: %v", err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return &pb.ResponseOp{Response: &pb.ResponseOp_ResponseRange{ResponseRange: resp}}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case *pb.RequestOp_RequestPut:
0000000000000000000000000000000000000000;;			if tv.RequestPut != nil {
0000000000000000000000000000000000000000;;				resp, err := a.Put(txnID, tv.RequestPut)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					plog.Panicf("unexpected error during txn: %v", err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return &pb.ResponseOp{Response: &pb.ResponseOp_ResponsePut{ResponsePut: resp}}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case *pb.RequestOp_RequestDeleteRange:
0000000000000000000000000000000000000000;;			if tv.RequestDeleteRange != nil {
0000000000000000000000000000000000000000;;				resp, err := a.DeleteRange(txnID, tv.RequestDeleteRange)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					plog.Panicf("unexpected error during txn: %v", err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return &pb.ResponseOp{Response: &pb.ResponseOp_ResponseDeleteRange{ResponseDeleteRange: resp}}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			// empty union
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *applierV3backend) Compaction(compaction *pb.CompactionRequest) (*pb.CompactionResponse, <-chan struct{}, error) {
0000000000000000000000000000000000000000;;		resp := &pb.CompactionResponse{}
0000000000000000000000000000000000000000;;		resp.Header = &pb.ResponseHeader{}
0000000000000000000000000000000000000000;;		ch, err := a.s.KV().Compact(compaction.Revision)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, ch, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// get the current revision. which key to get is not important.
0000000000000000000000000000000000000000;;		rr, _ := a.s.KV().Range([]byte("compaction"), nil, mvcc.RangeOptions{})
0000000000000000000000000000000000000000;;		resp.Header.Revision = rr.Rev
0000000000000000000000000000000000000000;;		return resp, ch, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *applierV3backend) LeaseGrant(lc *pb.LeaseGrantRequest) (*pb.LeaseGrantResponse, error) {
0000000000000000000000000000000000000000;;		l, err := a.s.lessor.Grant(lease.LeaseID(lc.ID), lc.TTL)
0000000000000000000000000000000000000000;;		resp := &pb.LeaseGrantResponse{}
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			resp.ID = int64(l.ID)
0000000000000000000000000000000000000000;;			resp.TTL = l.TTL()
0000000000000000000000000000000000000000;;			resp.Header = &pb.ResponseHeader{Revision: a.s.KV().Rev()}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *applierV3backend) LeaseRevoke(lc *pb.LeaseRevokeRequest) (*pb.LeaseRevokeResponse, error) {
0000000000000000000000000000000000000000;;		err := a.s.lessor.Revoke(lease.LeaseID(lc.ID))
0000000000000000000000000000000000000000;;		return &pb.LeaseRevokeResponse{Header: &pb.ResponseHeader{Revision: a.s.KV().Rev()}}, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *applierV3backend) Alarm(ar *pb.AlarmRequest) (*pb.AlarmResponse, error) {
0000000000000000000000000000000000000000;;		resp := &pb.AlarmResponse{}
0000000000000000000000000000000000000000;;		oldCount := len(a.s.alarmStore.Get(ar.Alarm))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch ar.Action {
0000000000000000000000000000000000000000;;		case pb.AlarmRequest_GET:
0000000000000000000000000000000000000000;;			resp.Alarms = a.s.alarmStore.Get(ar.Alarm)
0000000000000000000000000000000000000000;;		case pb.AlarmRequest_ACTIVATE:
0000000000000000000000000000000000000000;;			m := a.s.alarmStore.Activate(types.ID(ar.MemberID), ar.Alarm)
0000000000000000000000000000000000000000;;			if m == nil {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			resp.Alarms = append(resp.Alarms, m)
0000000000000000000000000000000000000000;;			activated := oldCount == 0 && len(a.s.alarmStore.Get(m.Alarm)) == 1
0000000000000000000000000000000000000000;;			if !activated {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			switch m.Alarm {
0000000000000000000000000000000000000000;;			case pb.AlarmType_NOSPACE:
0000000000000000000000000000000000000000;;				plog.Warningf("alarm raised %+v", m)
0000000000000000000000000000000000000000;;				a.s.applyV3 = newApplierV3Capped(a)
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				plog.Errorf("unimplemented alarm activation (%+v)", m)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case pb.AlarmRequest_DEACTIVATE:
0000000000000000000000000000000000000000;;			m := a.s.alarmStore.Deactivate(types.ID(ar.MemberID), ar.Alarm)
0000000000000000000000000000000000000000;;			if m == nil {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			resp.Alarms = append(resp.Alarms, m)
0000000000000000000000000000000000000000;;			deactivated := oldCount > 0 && len(a.s.alarmStore.Get(ar.Alarm)) == 0
0000000000000000000000000000000000000000;;			if !deactivated {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			switch m.Alarm {
0000000000000000000000000000000000000000;;			case pb.AlarmType_NOSPACE:
0000000000000000000000000000000000000000;;				plog.Infof("alarm disarmed %+v", ar)
0000000000000000000000000000000000000000;;				a.s.applyV3 = a.s.newApplierV3()
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				plog.Errorf("unimplemented alarm deactivation (%+v)", m)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type applierV3Capped struct {
0000000000000000000000000000000000000000;;		applierV3
0000000000000000000000000000000000000000;;		q backendQuota
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// newApplierV3Capped creates an applyV3 that will reject Puts and transactions
0000000000000000000000000000000000000000;;	// with Puts so that the number of keys in the store is capped.
0000000000000000000000000000000000000000;;	func newApplierV3Capped(base applierV3) applierV3 { return &applierV3Capped{applierV3: base} }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *applierV3Capped) Put(txnID int64, p *pb.PutRequest) (*pb.PutResponse, error) {
0000000000000000000000000000000000000000;;		return nil, ErrNoSpace
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *applierV3Capped) Txn(r *pb.TxnRequest) (*pb.TxnResponse, error) {
0000000000000000000000000000000000000000;;		if a.q.Cost(r) > 0 {
0000000000000000000000000000000000000000;;			return nil, ErrNoSpace
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return a.applierV3.Txn(r)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *applierV3Capped) LeaseGrant(lc *pb.LeaseGrantRequest) (*pb.LeaseGrantResponse, error) {
0000000000000000000000000000000000000000;;		return nil, ErrNoSpace
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *applierV3backend) AuthEnable() (*pb.AuthEnableResponse, error) {
0000000000000000000000000000000000000000;;		err := a.s.AuthStore().AuthEnable()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &pb.AuthEnableResponse{}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *applierV3backend) AuthDisable() (*pb.AuthDisableResponse, error) {
0000000000000000000000000000000000000000;;		a.s.AuthStore().AuthDisable()
0000000000000000000000000000000000000000;;		return &pb.AuthDisableResponse{}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *applierV3backend) Authenticate(r *pb.InternalAuthenticateRequest) (*pb.AuthenticateResponse, error) {
0000000000000000000000000000000000000000;;		ctx := context.WithValue(context.WithValue(context.TODO(), "index", a.s.consistIndex.ConsistentIndex()), "simpleToken", r.SimpleToken)
0000000000000000000000000000000000000000;;		return a.s.AuthStore().Authenticate(ctx, r.Name, r.Password)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *applierV3backend) UserAdd(r *pb.AuthUserAddRequest) (*pb.AuthUserAddResponse, error) {
0000000000000000000000000000000000000000;;		return a.s.AuthStore().UserAdd(r)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *applierV3backend) UserDelete(r *pb.AuthUserDeleteRequest) (*pb.AuthUserDeleteResponse, error) {
0000000000000000000000000000000000000000;;		return a.s.AuthStore().UserDelete(r)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *applierV3backend) UserChangePassword(r *pb.AuthUserChangePasswordRequest) (*pb.AuthUserChangePasswordResponse, error) {
0000000000000000000000000000000000000000;;		return a.s.AuthStore().UserChangePassword(r)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *applierV3backend) UserGrantRole(r *pb.AuthUserGrantRoleRequest) (*pb.AuthUserGrantRoleResponse, error) {
0000000000000000000000000000000000000000;;		return a.s.AuthStore().UserGrantRole(r)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *applierV3backend) UserGet(r *pb.AuthUserGetRequest) (*pb.AuthUserGetResponse, error) {
0000000000000000000000000000000000000000;;		return a.s.AuthStore().UserGet(r)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *applierV3backend) UserRevokeRole(r *pb.AuthUserRevokeRoleRequest) (*pb.AuthUserRevokeRoleResponse, error) {
0000000000000000000000000000000000000000;;		return a.s.AuthStore().UserRevokeRole(r)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *applierV3backend) RoleAdd(r *pb.AuthRoleAddRequest) (*pb.AuthRoleAddResponse, error) {
0000000000000000000000000000000000000000;;		return a.s.AuthStore().RoleAdd(r)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *applierV3backend) RoleGrantPermission(r *pb.AuthRoleGrantPermissionRequest) (*pb.AuthRoleGrantPermissionResponse, error) {
0000000000000000000000000000000000000000;;		return a.s.AuthStore().RoleGrantPermission(r)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *applierV3backend) RoleGet(r *pb.AuthRoleGetRequest) (*pb.AuthRoleGetResponse, error) {
0000000000000000000000000000000000000000;;		return a.s.AuthStore().RoleGet(r)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *applierV3backend) RoleRevokePermission(r *pb.AuthRoleRevokePermissionRequest) (*pb.AuthRoleRevokePermissionResponse, error) {
0000000000000000000000000000000000000000;;		return a.s.AuthStore().RoleRevokePermission(r)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *applierV3backend) RoleDelete(r *pb.AuthRoleDeleteRequest) (*pb.AuthRoleDeleteResponse, error) {
0000000000000000000000000000000000000000;;		return a.s.AuthStore().RoleDelete(r)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *applierV3backend) UserList(r *pb.AuthUserListRequest) (*pb.AuthUserListResponse, error) {
0000000000000000000000000000000000000000;;		return a.s.AuthStore().UserList(r)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *applierV3backend) RoleList(r *pb.AuthRoleListRequest) (*pb.AuthRoleListResponse, error) {
0000000000000000000000000000000000000000;;		return a.s.AuthStore().RoleList(r)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type quotaApplierV3 struct {
0000000000000000000000000000000000000000;;		applierV3
0000000000000000000000000000000000000000;;		q Quota
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newQuotaApplierV3(s *EtcdServer, app applierV3) applierV3 {
0000000000000000000000000000000000000000;;		return &quotaApplierV3{app, NewBackendQuota(s)}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *quotaApplierV3) Put(txnID int64, p *pb.PutRequest) (*pb.PutResponse, error) {
0000000000000000000000000000000000000000;;		ok := a.q.Available(p)
0000000000000000000000000000000000000000;;		resp, err := a.applierV3.Put(txnID, p)
0000000000000000000000000000000000000000;;		if err == nil && !ok {
0000000000000000000000000000000000000000;;			err = ErrNoSpace
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *quotaApplierV3) Txn(rt *pb.TxnRequest) (*pb.TxnResponse, error) {
0000000000000000000000000000000000000000;;		ok := a.q.Available(rt)
0000000000000000000000000000000000000000;;		resp, err := a.applierV3.Txn(rt)
0000000000000000000000000000000000000000;;		if err == nil && !ok {
0000000000000000000000000000000000000000;;			err = ErrNoSpace
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *quotaApplierV3) LeaseGrant(lc *pb.LeaseGrantRequest) (*pb.LeaseGrantResponse, error) {
0000000000000000000000000000000000000000;;		ok := a.q.Available(lc)
0000000000000000000000000000000000000000;;		resp, err := a.applierV3.LeaseGrant(lc)
0000000000000000000000000000000000000000;;		if err == nil && !ok {
0000000000000000000000000000000000000000;;			err = ErrNoSpace
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type kvSort struct{ kvs []mvccpb.KeyValue }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *kvSort) Swap(i, j int) {
0000000000000000000000000000000000000000;;		t := s.kvs[i]
0000000000000000000000000000000000000000;;		s.kvs[i] = s.kvs[j]
0000000000000000000000000000000000000000;;		s.kvs[j] = t
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (s *kvSort) Len() int { return len(s.kvs) }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type kvSortByKey struct{ *kvSort }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *kvSortByKey) Less(i, j int) bool {
0000000000000000000000000000000000000000;;		return bytes.Compare(s.kvs[i].Key, s.kvs[j].Key) < 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type kvSortByVersion struct{ *kvSort }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *kvSortByVersion) Less(i, j int) bool {
0000000000000000000000000000000000000000;;		return (s.kvs[i].Version - s.kvs[j].Version) < 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type kvSortByCreate struct{ *kvSort }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *kvSortByCreate) Less(i, j int) bool {
0000000000000000000000000000000000000000;;		return (s.kvs[i].CreateRevision - s.kvs[j].CreateRevision) < 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type kvSortByMod struct{ *kvSort }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *kvSortByMod) Less(i, j int) bool {
0000000000000000000000000000000000000000;;		return (s.kvs[i].ModRevision - s.kvs[j].ModRevision) < 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type kvSortByValue struct{ *kvSort }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *kvSortByValue) Less(i, j int) bool {
0000000000000000000000000000000000000000;;		return bytes.Compare(s.kvs[i].Value, s.kvs[j].Value) < 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *applierV3backend) checkRequestLeases(reqs []*pb.RequestOp) error {
0000000000000000000000000000000000000000;;		for _, requ := range reqs {
0000000000000000000000000000000000000000;;			tv, ok := requ.Request.(*pb.RequestOp_RequestPut)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			preq := tv.RequestPut
0000000000000000000000000000000000000000;;			if preq == nil || lease.LeaseID(preq.Lease) == lease.NoLease {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if l := a.s.lessor.Lookup(lease.LeaseID(preq.Lease)); l == nil {
0000000000000000000000000000000000000000;;				return lease.ErrLeaseNotFound
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *applierV3backend) checkRequestRange(reqs []*pb.RequestOp) error {
0000000000000000000000000000000000000000;;		for _, requ := range reqs {
0000000000000000000000000000000000000000;;			tv, ok := requ.Request.(*pb.RequestOp_RequestRange)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			greq := tv.RequestRange
0000000000000000000000000000000000000000;;			if greq == nil || greq.Revision == 0 {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if greq.Revision > a.s.KV().Rev() {
0000000000000000000000000000000000000000;;				return mvcc.ErrFutureRev
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if greq.Revision < a.s.KV().FirstRev() {
0000000000000000000000000000000000000000;;				return mvcc.ErrCompacted
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func compareInt64(a, b int64) int {
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case a < b:
0000000000000000000000000000000000000000;;			return -1
0000000000000000000000000000000000000000;;		case a > b:
0000000000000000000000000000000000000000;;			return 1
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return 0
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// isGteRange determines if the range end is a >= range. This works around grpc
0000000000000000000000000000000000000000;;	// sending empty byte strings as nil; >= is encoded in the range end as '\0'.
0000000000000000000000000000000000000000;;	func isGteRange(rangeEnd []byte) bool {
0000000000000000000000000000000000000000;;		return len(rangeEnd) == 1 && rangeEnd[0] == 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func noSideEffect(r *pb.InternalRaftRequest) bool {
0000000000000000000000000000000000000000;;		return r.Range != nil || r.AuthUserGet != nil || r.AuthRoleGet != nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func removeNeedlessRangeReqs(txn *pb.TxnRequest) {
0000000000000000000000000000000000000000;;		f := func(ops []*pb.RequestOp) []*pb.RequestOp {
0000000000000000000000000000000000000000;;			j := 0
0000000000000000000000000000000000000000;;			for i := 0; i < len(ops); i++ {
0000000000000000000000000000000000000000;;				if _, ok := ops[i].Request.(*pb.RequestOp_RequestRange); ok {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				ops[j] = ops[i]
0000000000000000000000000000000000000000;;				j++
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			return ops[:j]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		txn.Success = f(txn.Success)
0000000000000000000000000000000000000000;;		txn.Failure = f(txn.Failure)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func pruneKVs(rr *mvcc.RangeResult, isPrunable func(*mvccpb.KeyValue) bool) {
0000000000000000000000000000000000000000;;		j := 0
0000000000000000000000000000000000000000;;		for i := range rr.KVs {
0000000000000000000000000000000000000000;;			rr.KVs[j] = rr.KVs[i]
0000000000000000000000000000000000000000;;			if !isPrunable(&rr.KVs[i]) {
0000000000000000000000000000000000000000;;				j++
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		rr.KVs = rr.KVs[:j]
0000000000000000000000000000000000000000;;	}
