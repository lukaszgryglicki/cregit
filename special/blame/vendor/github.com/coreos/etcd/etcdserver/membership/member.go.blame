0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/coreos/etcd/etcdserver/member.go[Godeps/_workspace/src/github.com/coreos/etcd/etcdserver/member.go][vendor/github.com/coreos/etcd/etcdserver/membership/member.go];	
0000000000000000000000000000000000000000;;	package membership
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"crypto/sha1"
0000000000000000000000000000000000000000;;		"encoding/binary"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"math/rand"
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/pkg/types"
0000000000000000000000000000000000000000;;		"github.com/coreos/pkg/capnslog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		plog = capnslog.NewPackageLogger("github.com/coreos/etcd", "etcdserver/membership")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RaftAttributes represents the raft related attributes of an etcd member.
0000000000000000000000000000000000000000;;	type RaftAttributes struct {
0000000000000000000000000000000000000000;;		// PeerURLs is the list of peers in the raft cluster.
0000000000000000000000000000000000000000;;		// TODO(philips): ensure these are URLs
0000000000000000000000000000000000000000;;		PeerURLs []string `json:"peerURLs"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Attributes represents all the non-raft related attributes of an etcd member.
0000000000000000000000000000000000000000;;	type Attributes struct {
0000000000000000000000000000000000000000;;		Name       string   `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		ClientURLs []string `json:"clientURLs,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Member struct {
0000000000000000000000000000000000000000;;		ID types.ID `json:"id"`
0000000000000000000000000000000000000000;;		RaftAttributes
0000000000000000000000000000000000000000;;		Attributes
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewMember creates a Member without an ID and generates one based on the
0000000000000000000000000000000000000000;;	// cluster name, peer URLs, and time. This is used for bootstrapping/adding new member.
0000000000000000000000000000000000000000;;	func NewMember(name string, peerURLs types.URLs, clusterName string, now *time.Time) *Member {
0000000000000000000000000000000000000000;;		m := &Member{
0000000000000000000000000000000000000000;;			RaftAttributes: RaftAttributes{PeerURLs: peerURLs.StringSlice()},
0000000000000000000000000000000000000000;;			Attributes:     Attributes{Name: name},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var b []byte
0000000000000000000000000000000000000000;;		sort.Strings(m.PeerURLs)
0000000000000000000000000000000000000000;;		for _, p := range m.PeerURLs {
0000000000000000000000000000000000000000;;			b = append(b, []byte(p)...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		b = append(b, []byte(clusterName)...)
0000000000000000000000000000000000000000;;		if now != nil {
0000000000000000000000000000000000000000;;			b = append(b, []byte(fmt.Sprintf("%d", now.Unix()))...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		hash := sha1.Sum(b)
0000000000000000000000000000000000000000;;		m.ID = types.ID(binary.BigEndian.Uint64(hash[:8]))
0000000000000000000000000000000000000000;;		return m
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PickPeerURL chooses a random address from a given Member's PeerURLs.
0000000000000000000000000000000000000000;;	// It will panic if there is no PeerURLs available in Member.
0000000000000000000000000000000000000000;;	func (m *Member) PickPeerURL() string {
0000000000000000000000000000000000000000;;		if len(m.PeerURLs) == 0 {
0000000000000000000000000000000000000000;;			plog.Panicf("member should always have some peer url")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return m.PeerURLs[rand.Intn(len(m.PeerURLs))]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *Member) Clone() *Member {
0000000000000000000000000000000000000000;;		if m == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		mm := &Member{
0000000000000000000000000000000000000000;;			ID: m.ID,
0000000000000000000000000000000000000000;;			Attributes: Attributes{
0000000000000000000000000000000000000000;;				Name: m.Name,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if m.PeerURLs != nil {
0000000000000000000000000000000000000000;;			mm.PeerURLs = make([]string, len(m.PeerURLs))
0000000000000000000000000000000000000000;;			copy(mm.PeerURLs, m.PeerURLs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if m.ClientURLs != nil {
0000000000000000000000000000000000000000;;			mm.ClientURLs = make([]string, len(m.ClientURLs))
0000000000000000000000000000000000000000;;			copy(mm.ClientURLs, m.ClientURLs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return mm
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *Member) IsStarted() bool {
0000000000000000000000000000000000000000;;		return len(m.Name) != 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MembersByID implements sort by ID interface
0000000000000000000000000000000000000000;;	type MembersByID []*Member
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ms MembersByID) Len() int           { return len(ms) }
0000000000000000000000000000000000000000;;	func (ms MembersByID) Less(i, j int) bool { return ms[i].ID < ms[j].ID }
0000000000000000000000000000000000000000;;	func (ms MembersByID) Swap(i, j int)      { ms[i], ms[j] = ms[j], ms[i] }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MembersByPeerURLs implements sort by peer urls interface
0000000000000000000000000000000000000000;;	type MembersByPeerURLs []*Member
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ms MembersByPeerURLs) Len() int { return len(ms) }
0000000000000000000000000000000000000000;;	func (ms MembersByPeerURLs) Less(i, j int) bool {
0000000000000000000000000000000000000000;;		return ms[i].PeerURLs[0] < ms[j].PeerURLs[0]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (ms MembersByPeerURLs) Swap(i, j int) { ms[i], ms[j] = ms[j], ms[i] }
