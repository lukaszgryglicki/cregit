0000000000000000000000000000000000000000;;	// Copyright 2016 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
1861d099d10ddfa47b9f2b8b925fc11bd0827dac;Godeps/_workspace/src/github.com/coreos/etcd/etcdserver/api/v3rpc/util.go[Godeps/_workspace/src/github.com/coreos/etcd/etcdserver/api/v3rpc/util.go][vendor/github.com/coreos/etcd/etcdserver/api/v3rpc/util.go];	
0000000000000000000000000000000000000000;;	package v3rpc
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/auth"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/etcdserver"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/etcdserver/api/v3rpc/rpctypes"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/etcdserver/membership"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/lease"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/mvcc"
0000000000000000000000000000000000000000;;		"google.golang.org/grpc"
0000000000000000000000000000000000000000;;		"google.golang.org/grpc/codes"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func togRPCError(err error) error {
0000000000000000000000000000000000000000;;		switch err {
0000000000000000000000000000000000000000;;		case membership.ErrIDRemoved:
0000000000000000000000000000000000000000;;			return rpctypes.ErrGRPCMemberNotFound
0000000000000000000000000000000000000000;;		case membership.ErrIDNotFound:
0000000000000000000000000000000000000000;;			return rpctypes.ErrGRPCMemberNotFound
0000000000000000000000000000000000000000;;		case membership.ErrIDExists:
0000000000000000000000000000000000000000;;			return rpctypes.ErrGRPCMemberExist
0000000000000000000000000000000000000000;;		case membership.ErrPeerURLexists:
0000000000000000000000000000000000000000;;			return rpctypes.ErrGRPCPeerURLExist
0000000000000000000000000000000000000000;;		case etcdserver.ErrNotEnoughStartedMembers:
0000000000000000000000000000000000000000;;			return rpctypes.ErrMemberNotEnoughStarted
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case mvcc.ErrCompacted:
0000000000000000000000000000000000000000;;			return rpctypes.ErrGRPCCompacted
0000000000000000000000000000000000000000;;		case mvcc.ErrFutureRev:
0000000000000000000000000000000000000000;;			return rpctypes.ErrGRPCFutureRev
0000000000000000000000000000000000000000;;		case lease.ErrLeaseNotFound:
0000000000000000000000000000000000000000;;			return rpctypes.ErrGRPCLeaseNotFound
0000000000000000000000000000000000000000;;		case etcdserver.ErrRequestTooLarge:
0000000000000000000000000000000000000000;;			return rpctypes.ErrGRPCRequestTooLarge
0000000000000000000000000000000000000000;;		case etcdserver.ErrNoSpace:
0000000000000000000000000000000000000000;;			return rpctypes.ErrGRPCNoSpace
0000000000000000000000000000000000000000;;		case etcdserver.ErrTooManyRequests:
0000000000000000000000000000000000000000;;			return rpctypes.ErrTooManyRequests
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case etcdserver.ErrNoLeader:
0000000000000000000000000000000000000000;;			return rpctypes.ErrGRPCNoLeader
0000000000000000000000000000000000000000;;		case etcdserver.ErrStopped:
0000000000000000000000000000000000000000;;			return rpctypes.ErrGRPCStopped
0000000000000000000000000000000000000000;;		case etcdserver.ErrTimeout:
0000000000000000000000000000000000000000;;			return rpctypes.ErrGRPCTimeout
0000000000000000000000000000000000000000;;		case etcdserver.ErrTimeoutDueToLeaderFail:
0000000000000000000000000000000000000000;;			return rpctypes.ErrGRPCTimeoutDueToLeaderFail
0000000000000000000000000000000000000000;;		case etcdserver.ErrTimeoutDueToConnectionLost:
0000000000000000000000000000000000000000;;			return rpctypes.ErrGRPCTimeoutDueToConnectionLost
0000000000000000000000000000000000000000;;		case etcdserver.ErrUnhealthy:
0000000000000000000000000000000000000000;;			return rpctypes.ErrGRPCUnhealthy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case lease.ErrLeaseNotFound:
0000000000000000000000000000000000000000;;			return rpctypes.ErrGRPCLeaseNotFound
0000000000000000000000000000000000000000;;		case lease.ErrLeaseExists:
0000000000000000000000000000000000000000;;			return rpctypes.ErrGRPCLeaseExist
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case auth.ErrRootUserNotExist:
0000000000000000000000000000000000000000;;			return rpctypes.ErrGRPCRootUserNotExist
0000000000000000000000000000000000000000;;		case auth.ErrRootRoleNotExist:
0000000000000000000000000000000000000000;;			return rpctypes.ErrGRPCRootRoleNotExist
0000000000000000000000000000000000000000;;		case auth.ErrUserAlreadyExist:
0000000000000000000000000000000000000000;;			return rpctypes.ErrGRPCUserAlreadyExist
0000000000000000000000000000000000000000;;		case auth.ErrUserEmpty:
0000000000000000000000000000000000000000;;			return rpctypes.ErrGRPCUserEmpty
0000000000000000000000000000000000000000;;		case auth.ErrUserNotFound:
0000000000000000000000000000000000000000;;			return rpctypes.ErrGRPCUserNotFound
0000000000000000000000000000000000000000;;		case auth.ErrRoleAlreadyExist:
0000000000000000000000000000000000000000;;			return rpctypes.ErrGRPCRoleAlreadyExist
0000000000000000000000000000000000000000;;		case auth.ErrRoleNotFound:
0000000000000000000000000000000000000000;;			return rpctypes.ErrGRPCRoleNotFound
0000000000000000000000000000000000000000;;		case auth.ErrAuthFailed:
0000000000000000000000000000000000000000;;			return rpctypes.ErrGRPCAuthFailed
0000000000000000000000000000000000000000;;		case auth.ErrPermissionDenied:
0000000000000000000000000000000000000000;;			return rpctypes.ErrGRPCPermissionDenied
0000000000000000000000000000000000000000;;		case auth.ErrRoleNotGranted:
0000000000000000000000000000000000000000;;			return rpctypes.ErrGRPCRoleNotGranted
0000000000000000000000000000000000000000;;		case auth.ErrPermissionNotGranted:
0000000000000000000000000000000000000000;;			return rpctypes.ErrGRPCPermissionNotGranted
0000000000000000000000000000000000000000;;		case auth.ErrAuthNotEnabled:
0000000000000000000000000000000000000000;;			return rpctypes.ErrGRPCAuthNotEnabled
0000000000000000000000000000000000000000;;		case auth.ErrInvalidAuthToken:
0000000000000000000000000000000000000000;;			return rpctypes.ErrGRPCInvalidAuthToken
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return grpc.Errorf(codes.Unknown, err.Error())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
