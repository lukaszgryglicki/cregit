0000000000000000000000000000000000000000;;	// Copyright 2016 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
a405384ce9c7fbbffc6a5a8bb2203d32e3b85976;Godeps/_workspace/src/github.com/coreos/etcd/etcdserver/api/v3rpc/grpc.go[Godeps/_workspace/src/github.com/coreos/etcd/etcdserver/api/v3rpc/grpc.go][vendor/github.com/coreos/etcd/etcdserver/api/v3rpc/grpc.go];	
0000000000000000000000000000000000000000;;	package v3rpc
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"crypto/tls"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/etcdserver"
0000000000000000000000000000000000000000;;		pb "github.com/coreos/etcd/etcdserver/etcdserverpb"
0000000000000000000000000000000000000000;;		"google.golang.org/grpc"
0000000000000000000000000000000000000000;;		"google.golang.org/grpc/credentials"
0000000000000000000000000000000000000000;;		"google.golang.org/grpc/grpclog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		grpclog.SetLogger(plog)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Server(s *etcdserver.EtcdServer, tls *tls.Config) *grpc.Server {
0000000000000000000000000000000000000000;;		var opts []grpc.ServerOption
0000000000000000000000000000000000000000;;		opts = append(opts, grpc.CustomCodec(&codec{}))
0000000000000000000000000000000000000000;;		if tls != nil {
0000000000000000000000000000000000000000;;			opts = append(opts, grpc.Creds(credentials.NewTLS(tls)))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		opts = append(opts, grpc.UnaryInterceptor(newUnaryInterceptor(s)))
0000000000000000000000000000000000000000;;		opts = append(opts, grpc.StreamInterceptor(newStreamInterceptor(s)))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		grpcServer := grpc.NewServer(opts...)
0000000000000000000000000000000000000000;;		pb.RegisterKVServer(grpcServer, NewQuotaKVServer(s))
0000000000000000000000000000000000000000;;		pb.RegisterWatchServer(grpcServer, NewWatchServer(s))
0000000000000000000000000000000000000000;;		pb.RegisterLeaseServer(grpcServer, NewQuotaLeaseServer(s))
0000000000000000000000000000000000000000;;		pb.RegisterClusterServer(grpcServer, NewClusterServer(s))
0000000000000000000000000000000000000000;;		pb.RegisterAuthServer(grpcServer, NewAuthServer(s))
0000000000000000000000000000000000000000;;		pb.RegisterMaintenanceServer(grpcServer, NewMaintenanceServer(s))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return grpcServer
0000000000000000000000000000000000000000;;	}
