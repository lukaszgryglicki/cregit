0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/coreos/etcd/etcdserver/etcdhttp/peer.go[Godeps/_workspace/src/github.com/coreos/etcd/etcdserver/etcdhttp/peer.go][vendor/github.com/coreos/etcd/etcdserver/api/v2http/peer.go];	
0000000000000000000000000000000000000000;;	package v2http
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/etcdserver"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/etcdserver/api"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/lease/leasehttp"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/rafthttp"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		peerMembersPrefix = "/members"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewPeerHandler generates an http.Handler to handle etcd peer requests.
0000000000000000000000000000000000000000;;	func NewPeerHandler(s *etcdserver.EtcdServer) http.Handler {
0000000000000000000000000000000000000000;;		var lh http.Handler
0000000000000000000000000000000000000000;;		l := s.Lessor()
0000000000000000000000000000000000000000;;		if l != nil {
0000000000000000000000000000000000000000;;			lh = leasehttp.NewHandler(l, func() <-chan struct{} { return s.ApplyWait() })
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return newPeerHandler(s.Cluster(), s.RaftHandler(), lh)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newPeerHandler(cluster api.Cluster, raftHandler http.Handler, leaseHandler http.Handler) http.Handler {
0000000000000000000000000000000000000000;;		mh := &peerMembersHandler{
0000000000000000000000000000000000000000;;			cluster: cluster,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		mux := http.NewServeMux()
0000000000000000000000000000000000000000;;		mux.HandleFunc("/", http.NotFound)
0000000000000000000000000000000000000000;;		mux.Handle(rafthttp.RaftPrefix, raftHandler)
0000000000000000000000000000000000000000;;		mux.Handle(rafthttp.RaftPrefix+"/", raftHandler)
0000000000000000000000000000000000000000;;		mux.Handle(peerMembersPrefix, mh)
0000000000000000000000000000000000000000;;		if leaseHandler != nil {
0000000000000000000000000000000000000000;;			mux.Handle(leasehttp.LeasePrefix, leaseHandler)
0000000000000000000000000000000000000000;;			mux.Handle(leasehttp.LeaseInternalPrefix, leaseHandler)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		mux.HandleFunc(versionPath, versionHandler(cluster, serveVersion))
0000000000000000000000000000000000000000;;		return mux
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type peerMembersHandler struct {
0000000000000000000000000000000000000000;;		cluster api.Cluster
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h *peerMembersHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;		if !allowMethod(w, r.Method, "GET") {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		w.Header().Set("X-Etcd-Cluster-ID", h.cluster.ID().String())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if r.URL.Path != peerMembersPrefix {
0000000000000000000000000000000000000000;;			http.Error(w, "bad path", http.StatusBadRequest)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ms := h.cluster.Members()
0000000000000000000000000000000000000000;;		w.Header().Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		if err := json.NewEncoder(w).Encode(ms); err != nil {
0000000000000000000000000000000000000000;;			plog.Warningf("failed to encode members response (%v)", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
