0000000000000000000000000000000000000000;;	// Copyright 2016 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
a405384ce9c7fbbffc6a5a8bb2203d32e3b85976;Godeps/_workspace/src/github.com/coreos/etcd/etcdserver/api/v3rpc/lease.go[Godeps/_workspace/src/github.com/coreos/etcd/etcdserver/api/v3rpc/lease.go][vendor/github.com/coreos/etcd/etcdserver/api/v3rpc/lease.go];	
0000000000000000000000000000000000000000;;	package v3rpc
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/etcdserver"
0000000000000000000000000000000000000000;;		pb "github.com/coreos/etcd/etcdserver/etcdserverpb"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/lease"
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LeaseServer struct {
0000000000000000000000000000000000000000;;		hdr header
0000000000000000000000000000000000000000;;		le  etcdserver.Lessor
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewLeaseServer(s *etcdserver.EtcdServer) pb.LeaseServer {
0000000000000000000000000000000000000000;;		return &LeaseServer{le: s, hdr: newHeader(s)}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ls *LeaseServer) LeaseGrant(ctx context.Context, cr *pb.LeaseGrantRequest) (*pb.LeaseGrantResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := ls.le.LeaseGrant(ctx, cr)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, togRPCError(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ls.hdr.fill(resp.Header)
0000000000000000000000000000000000000000;;		return resp, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ls *LeaseServer) LeaseRevoke(ctx context.Context, rr *pb.LeaseRevokeRequest) (*pb.LeaseRevokeResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := ls.le.LeaseRevoke(ctx, rr)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, togRPCError(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ls.hdr.fill(resp.Header)
0000000000000000000000000000000000000000;;		return resp, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ls *LeaseServer) LeaseTimeToLive(ctx context.Context, rr *pb.LeaseTimeToLiveRequest) (*pb.LeaseTimeToLiveResponse, error) {
0000000000000000000000000000000000000000;;		resp, err := ls.le.LeaseTimeToLive(ctx, rr)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, togRPCError(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ls.hdr.fill(resp.Header)
0000000000000000000000000000000000000000;;		return resp, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ls *LeaseServer) LeaseKeepAlive(stream pb.Lease_LeaseKeepAliveServer) error {
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			req, err := stream.Recv()
0000000000000000000000000000000000000000;;			if err == io.EOF {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Create header before we sent out the renew request.
0000000000000000000000000000000000000000;;			// This can make sure that the revision is strictly smaller or equal to
0000000000000000000000000000000000000000;;			// when the keepalive happened at the local server (when the local server is the leader)
0000000000000000000000000000000000000000;;			// or remote leader.
0000000000000000000000000000000000000000;;			// Without this, a lease might be revoked at rev 3 but client can see the keepalive succeeded
0000000000000000000000000000000000000000;;			// at rev 4.
0000000000000000000000000000000000000000;;			resp := &pb.LeaseKeepAliveResponse{ID: req.ID, Header: &pb.ResponseHeader{}}
0000000000000000000000000000000000000000;;			ls.hdr.fill(resp.Header)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			ttl, err := ls.le.LeaseRenew(stream.Context(), lease.LeaseID(req.ID))
0000000000000000000000000000000000000000;;			if err == lease.ErrLeaseNotFound {
0000000000000000000000000000000000000000;;				err = nil
0000000000000000000000000000000000000000;;				ttl = 0
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return togRPCError(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			resp.TTL = ttl
0000000000000000000000000000000000000000;;			err = stream.Send(resp)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
