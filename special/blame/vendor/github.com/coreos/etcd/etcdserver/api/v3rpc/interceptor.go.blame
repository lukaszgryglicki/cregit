0000000000000000000000000000000000000000;;	// Copyright 2016 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
885071b7d07344044421ffe2fd90c1bcd1ee9812;;	
0000000000000000000000000000000000000000;;	package v3rpc
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/etcdserver"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/etcdserver/api"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/etcdserver/api/v3rpc/rpctypes"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/pkg/types"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/raft"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		prometheus "github.com/grpc-ecosystem/go-grpc-prometheus"
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;		"google.golang.org/grpc"
0000000000000000000000000000000000000000;;		"google.golang.org/grpc/metadata"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		maxNoLeaderCnt = 3
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type streamsMap struct {
0000000000000000000000000000000000000000;;		mu      sync.Mutex
0000000000000000000000000000000000000000;;		streams map[grpc.ServerStream]struct{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newUnaryInterceptor(s *etcdserver.EtcdServer) grpc.UnaryServerInterceptor {
0000000000000000000000000000000000000000;;		return func(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (resp interface{}, err error) {
0000000000000000000000000000000000000000;;			if !api.IsCapabilityEnabled(api.V3rpcCapability) {
0000000000000000000000000000000000000000;;				return nil, rpctypes.ErrGRPCNotCapable
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			md, ok := metadata.FromContext(ctx)
0000000000000000000000000000000000000000;;			if ok {
0000000000000000000000000000000000000000;;				if ks := md[rpctypes.MetadataRequireLeaderKey]; len(ks) > 0 && ks[0] == rpctypes.MetadataHasLeader {
0000000000000000000000000000000000000000;;					if s.Leader() == types.ID(raft.None) {
0000000000000000000000000000000000000000;;						return nil, rpctypes.ErrGRPCNoLeader
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			return prometheus.UnaryServerInterceptor(ctx, req, info, handler)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newStreamInterceptor(s *etcdserver.EtcdServer) grpc.StreamServerInterceptor {
0000000000000000000000000000000000000000;;		smap := monitorLeader(s)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return func(srv interface{}, ss grpc.ServerStream, info *grpc.StreamServerInfo, handler grpc.StreamHandler) error {
0000000000000000000000000000000000000000;;			if !api.IsCapabilityEnabled(api.V3rpcCapability) {
0000000000000000000000000000000000000000;;				return rpctypes.ErrGRPCNotCapable
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			md, ok := metadata.FromContext(ss.Context())
0000000000000000000000000000000000000000;;			if ok {
0000000000000000000000000000000000000000;;				if ks := md[rpctypes.MetadataRequireLeaderKey]; len(ks) > 0 && ks[0] == rpctypes.MetadataHasLeader {
0000000000000000000000000000000000000000;;					if s.Leader() == types.ID(raft.None) {
0000000000000000000000000000000000000000;;						return rpctypes.ErrGRPCNoLeader
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					cctx, cancel := context.WithCancel(ss.Context())
0000000000000000000000000000000000000000;;					ss = serverStreamWithCtx{ctx: cctx, cancel: &cancel, ServerStream: ss}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					smap.mu.Lock()
0000000000000000000000000000000000000000;;					smap.streams[ss] = struct{}{}
0000000000000000000000000000000000000000;;					smap.mu.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					defer func() {
0000000000000000000000000000000000000000;;						smap.mu.Lock()
0000000000000000000000000000000000000000;;						delete(smap.streams, ss)
0000000000000000000000000000000000000000;;						smap.mu.Unlock()
0000000000000000000000000000000000000000;;						cancel()
0000000000000000000000000000000000000000;;					}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			return prometheus.StreamServerInterceptor(srv, ss, info, handler)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type serverStreamWithCtx struct {
0000000000000000000000000000000000000000;;		grpc.ServerStream
0000000000000000000000000000000000000000;;		ctx    context.Context
0000000000000000000000000000000000000000;;		cancel *context.CancelFunc
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ssc serverStreamWithCtx) Context() context.Context { return ssc.ctx }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func monitorLeader(s *etcdserver.EtcdServer) *streamsMap {
0000000000000000000000000000000000000000;;		smap := &streamsMap{
0000000000000000000000000000000000000000;;			streams: make(map[grpc.ServerStream]struct{}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			election := time.Duration(s.Cfg.TickMs) * time.Duration(s.Cfg.ElectionTicks) * time.Millisecond
0000000000000000000000000000000000000000;;			noLeaderCnt := 0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for {
0000000000000000000000000000000000000000;;				select {
0000000000000000000000000000000000000000;;				case <-s.StopNotify():
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				case <-time.After(election):
0000000000000000000000000000000000000000;;					if s.Leader() == types.ID(raft.None) {
0000000000000000000000000000000000000000;;						noLeaderCnt++
0000000000000000000000000000000000000000;;					} else {
0000000000000000000000000000000000000000;;						noLeaderCnt = 0
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					// We are more conservative on canceling existing streams. Reconnecting streams
0000000000000000000000000000000000000000;;					// cost much more than just rejecting new requests. So we wait until the member
0000000000000000000000000000000000000000;;					// cannot find a leader for maxNoLeaderCnt election timeouts to cancel existing streams.
0000000000000000000000000000000000000000;;					if noLeaderCnt >= maxNoLeaderCnt {
0000000000000000000000000000000000000000;;						smap.mu.Lock()
0000000000000000000000000000000000000000;;						for ss := range smap.streams {
0000000000000000000000000000000000000000;;							if ssWithCtx, ok := ss.(serverStreamWithCtx); ok {
0000000000000000000000000000000000000000;;								(*ssWithCtx.cancel)()
0000000000000000000000000000000000000000;;								<-ss.Context().Done()
0000000000000000000000000000000000000000;;							}
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						smap.streams = make(map[grpc.ServerStream]struct{})
0000000000000000000000000000000000000000;;						smap.mu.Unlock()
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return smap
0000000000000000000000000000000000000000;;	}
