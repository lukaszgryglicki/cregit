0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
a405384ce9c7fbbffc6a5a8bb2203d32e3b85976;Godeps/_workspace/src/github.com/coreos/etcd/etcdserver/etcdhttp/metrics.go[Godeps/_workspace/src/github.com/coreos/etcd/etcdserver/etcdhttp/metrics.go][vendor/github.com/coreos/etcd/etcdserver/api/v2http/metrics.go];	
0000000000000000000000000000000000000000;;	package v2http
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		etcdErr "github.com/coreos/etcd/error"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/etcdserver"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/etcdserver/api/v2http/httptypes"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/etcdserver/etcdserverpb"
0000000000000000000000000000000000000000;;		"github.com/prometheus/client_golang/prometheus"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		incomingEvents = prometheus.NewCounterVec(
0000000000000000000000000000000000000000;;			prometheus.CounterOpts{
0000000000000000000000000000000000000000;;				Namespace: "etcd",
0000000000000000000000000000000000000000;;				Subsystem: "http",
0000000000000000000000000000000000000000;;				Name:      "received_total",
0000000000000000000000000000000000000000;;				Help:      "Counter of requests received into the system (successfully parsed and authd).",
0000000000000000000000000000000000000000;;			}, []string{"method"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		failedEvents = prometheus.NewCounterVec(
0000000000000000000000000000000000000000;;			prometheus.CounterOpts{
0000000000000000000000000000000000000000;;				Namespace: "etcd",
0000000000000000000000000000000000000000;;				Subsystem: "http",
0000000000000000000000000000000000000000;;				Name:      "failed_total",
0000000000000000000000000000000000000000;;				Help:      "Counter of handle failures of requests (non-watches), by method (GET/PUT etc.) and code (400, 500 etc.).",
0000000000000000000000000000000000000000;;			}, []string{"method", "code"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		successfulEventsHandlingTime = prometheus.NewHistogramVec(
0000000000000000000000000000000000000000;;			prometheus.HistogramOpts{
0000000000000000000000000000000000000000;;				Namespace: "etcd",
0000000000000000000000000000000000000000;;				Subsystem: "http",
0000000000000000000000000000000000000000;;				Name:      "successful_duration_seconds",
0000000000000000000000000000000000000000;;				Help:      "Bucketed histogram of processing time (s) of successfully handled requests (non-watches), by method (GET/PUT etc.).",
0000000000000000000000000000000000000000;;				Buckets:   prometheus.ExponentialBuckets(0.0005, 2, 13),
0000000000000000000000000000000000000000;;			}, []string{"method"})
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		prometheus.MustRegister(incomingEvents)
0000000000000000000000000000000000000000;;		prometheus.MustRegister(failedEvents)
0000000000000000000000000000000000000000;;		prometheus.MustRegister(successfulEventsHandlingTime)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func reportRequestReceived(request etcdserverpb.Request) {
0000000000000000000000000000000000000000;;		incomingEvents.WithLabelValues(methodFromRequest(request)).Inc()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func reportRequestCompleted(request etcdserverpb.Request, response etcdserver.Response, startTime time.Time) {
0000000000000000000000000000000000000000;;		method := methodFromRequest(request)
0000000000000000000000000000000000000000;;		successfulEventsHandlingTime.WithLabelValues(method).Observe(time.Since(startTime).Seconds())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func reportRequestFailed(request etcdserverpb.Request, err error) {
0000000000000000000000000000000000000000;;		method := methodFromRequest(request)
0000000000000000000000000000000000000000;;		failedEvents.WithLabelValues(method, strconv.Itoa(codeFromError(err))).Inc()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func methodFromRequest(request etcdserverpb.Request) string {
0000000000000000000000000000000000000000;;		if request.Method == "GET" && request.Quorum {
0000000000000000000000000000000000000000;;			return "QGET"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return request.Method
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func codeFromError(err error) int {
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			return http.StatusInternalServerError
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		switch e := err.(type) {
0000000000000000000000000000000000000000;;		case *etcdErr.Error:
0000000000000000000000000000000000000000;;			return (*etcdErr.Error)(e).StatusCode()
0000000000000000000000000000000000000000;;		case *httptypes.HTTPError:
0000000000000000000000000000000000000000;;			return (*httptypes.HTTPError)(e).Code
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return http.StatusInternalServerError
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
