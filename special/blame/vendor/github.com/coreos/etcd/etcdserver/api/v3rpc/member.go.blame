0000000000000000000000000000000000000000;;	// Copyright 2016 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
a405384ce9c7fbbffc6a5a8bb2203d32e3b85976;Godeps/_workspace/src/github.com/coreos/etcd/etcdserver/api/v3rpc/member.go[Godeps/_workspace/src/github.com/coreos/etcd/etcdserver/api/v3rpc/member.go][vendor/github.com/coreos/etcd/etcdserver/api/v3rpc/member.go];	
0000000000000000000000000000000000000000;;	package v3rpc
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/etcdserver"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/etcdserver/api"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/etcdserver/api/v3rpc/rpctypes"
0000000000000000000000000000000000000000;;		pb "github.com/coreos/etcd/etcdserver/etcdserverpb"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/etcdserver/membership"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/pkg/types"
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterServer struct {
0000000000000000000000000000000000000000;;		cluster   api.Cluster
0000000000000000000000000000000000000000;;		server    etcdserver.Server
0000000000000000000000000000000000000000;;		raftTimer etcdserver.RaftTimer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewClusterServer(s *etcdserver.EtcdServer) *ClusterServer {
0000000000000000000000000000000000000000;;		return &ClusterServer{
0000000000000000000000000000000000000000;;			cluster:   s.Cluster(),
0000000000000000000000000000000000000000;;			server:    s,
0000000000000000000000000000000000000000;;			raftTimer: s,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (cs *ClusterServer) MemberAdd(ctx context.Context, r *pb.MemberAddRequest) (*pb.MemberAddResponse, error) {
0000000000000000000000000000000000000000;;		urls, err := types.NewURLs(r.PeerURLs)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, rpctypes.ErrGRPCMemberBadURLs
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		now := time.Now()
0000000000000000000000000000000000000000;;		m := membership.NewMember("", urls, "", &now)
0000000000000000000000000000000000000000;;		if err = cs.server.AddMember(ctx, *m); err != nil {
0000000000000000000000000000000000000000;;			return nil, togRPCError(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &pb.MemberAddResponse{
0000000000000000000000000000000000000000;;			Header: cs.header(),
0000000000000000000000000000000000000000;;			Member: &pb.Member{ID: uint64(m.ID), PeerURLs: m.PeerURLs},
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (cs *ClusterServer) MemberRemove(ctx context.Context, r *pb.MemberRemoveRequest) (*pb.MemberRemoveResponse, error) {
0000000000000000000000000000000000000000;;		if err := cs.server.RemoveMember(ctx, r.ID); err != nil {
0000000000000000000000000000000000000000;;			return nil, togRPCError(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &pb.MemberRemoveResponse{Header: cs.header()}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (cs *ClusterServer) MemberUpdate(ctx context.Context, r *pb.MemberUpdateRequest) (*pb.MemberUpdateResponse, error) {
0000000000000000000000000000000000000000;;		m := membership.Member{
0000000000000000000000000000000000000000;;			ID:             types.ID(r.ID),
0000000000000000000000000000000000000000;;			RaftAttributes: membership.RaftAttributes{PeerURLs: r.PeerURLs},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := cs.server.UpdateMember(ctx, m); err != nil {
0000000000000000000000000000000000000000;;			return nil, togRPCError(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &pb.MemberUpdateResponse{Header: cs.header()}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (cs *ClusterServer) MemberList(ctx context.Context, r *pb.MemberListRequest) (*pb.MemberListResponse, error) {
0000000000000000000000000000000000000000;;		membs := cs.cluster.Members()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		protoMembs := make([]*pb.Member, len(membs))
0000000000000000000000000000000000000000;;		for i := range membs {
0000000000000000000000000000000000000000;;			protoMembs[i] = &pb.Member{
0000000000000000000000000000000000000000;;				Name:       membs[i].Name,
0000000000000000000000000000000000000000;;				ID:         uint64(membs[i].ID),
0000000000000000000000000000000000000000;;				PeerURLs:   membs[i].PeerURLs,
0000000000000000000000000000000000000000;;				ClientURLs: membs[i].ClientURLs,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &pb.MemberListResponse{Header: cs.header(), Members: protoMembs}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (cs *ClusterServer) header() *pb.ResponseHeader {
0000000000000000000000000000000000000000;;		return &pb.ResponseHeader{ClusterId: uint64(cs.cluster.ID()), MemberId: uint64(cs.server.ID()), RaftTerm: cs.raftTimer.Term()}
0000000000000000000000000000000000000000;;	}
