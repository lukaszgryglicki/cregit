0000000000000000000000000000000000000000;;	// Copyright 2016 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
1861d099d10ddfa47b9f2b8b925fc11bd0827dac;Godeps/_workspace/src/github.com/coreos/etcd/etcdserver/api/v3rpc/quota.go[Godeps/_workspace/src/github.com/coreos/etcd/etcdserver/api/v3rpc/quota.go][vendor/github.com/coreos/etcd/etcdserver/api/v3rpc/quota.go];	
0000000000000000000000000000000000000000;;	package v3rpc
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/etcdserver"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/etcdserver/api/v3rpc/rpctypes"
0000000000000000000000000000000000000000;;		pb "github.com/coreos/etcd/etcdserver/etcdserverpb"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/pkg/types"
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type quotaKVServer struct {
0000000000000000000000000000000000000000;;		pb.KVServer
0000000000000000000000000000000000000000;;		qa quotaAlarmer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type quotaAlarmer struct {
0000000000000000000000000000000000000000;;		q  etcdserver.Quota
0000000000000000000000000000000000000000;;		a  Alarmer
0000000000000000000000000000000000000000;;		id types.ID
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// check whether request satisfies the quota. If there is not enough space,
0000000000000000000000000000000000000000;;	// ignore request and raise the free space alarm.
0000000000000000000000000000000000000000;;	func (qa *quotaAlarmer) check(ctx context.Context, r interface{}) error {
0000000000000000000000000000000000000000;;		if qa.q.Available(r) {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		req := &pb.AlarmRequest{
0000000000000000000000000000000000000000;;			MemberID: uint64(qa.id),
0000000000000000000000000000000000000000;;			Action:   pb.AlarmRequest_ACTIVATE,
0000000000000000000000000000000000000000;;			Alarm:    pb.AlarmType_NOSPACE,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		qa.a.Alarm(ctx, req)
0000000000000000000000000000000000000000;;		return rpctypes.ErrGRPCNoSpace
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewQuotaKVServer(s *etcdserver.EtcdServer) pb.KVServer {
0000000000000000000000000000000000000000;;		return &quotaKVServer{
0000000000000000000000000000000000000000;;			NewKVServer(s),
0000000000000000000000000000000000000000;;			quotaAlarmer{etcdserver.NewBackendQuota(s), s, s.ID()},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *quotaKVServer) Put(ctx context.Context, r *pb.PutRequest) (*pb.PutResponse, error) {
0000000000000000000000000000000000000000;;		if err := s.qa.check(ctx, r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return s.KVServer.Put(ctx, r)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *quotaKVServer) Txn(ctx context.Context, r *pb.TxnRequest) (*pb.TxnResponse, error) {
0000000000000000000000000000000000000000;;		if err := s.qa.check(ctx, r); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return s.KVServer.Txn(ctx, r)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type quotaLeaseServer struct {
0000000000000000000000000000000000000000;;		pb.LeaseServer
0000000000000000000000000000000000000000;;		qa quotaAlarmer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *quotaLeaseServer) LeaseGrant(ctx context.Context, cr *pb.LeaseGrantRequest) (*pb.LeaseGrantResponse, error) {
0000000000000000000000000000000000000000;;		if err := s.qa.check(ctx, cr); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return s.LeaseServer.LeaseGrant(ctx, cr)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewQuotaLeaseServer(s *etcdserver.EtcdServer) pb.LeaseServer {
0000000000000000000000000000000000000000;;		return &quotaLeaseServer{
0000000000000000000000000000000000000000;;			NewLeaseServer(s),
0000000000000000000000000000000000000000;;			quotaAlarmer{etcdserver.NewBackendQuota(s), s, s.ID()},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
