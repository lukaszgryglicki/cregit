0000000000000000000000000000000000000000;;	// Copyright 2016 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
a405384ce9c7fbbffc6a5a8bb2203d32e3b85976;Godeps/_workspace/src/github.com/coreos/etcd/etcdserver/api/v3rpc/maintenance.go[Godeps/_workspace/src/github.com/coreos/etcd/etcdserver/api/v3rpc/maintenance.go][vendor/github.com/coreos/etcd/etcdserver/api/v3rpc/maintenance.go];	
0000000000000000000000000000000000000000;;	package v3rpc
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"crypto/sha256"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/auth"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/etcdserver"
0000000000000000000000000000000000000000;;		pb "github.com/coreos/etcd/etcdserver/etcdserverpb"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/mvcc"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/mvcc/backend"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/pkg/types"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/version"
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type KVGetter interface {
0000000000000000000000000000000000000000;;		KV() mvcc.ConsistentWatchableKV
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BackendGetter interface {
0000000000000000000000000000000000000000;;		Backend() backend.Backend
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Alarmer interface {
0000000000000000000000000000000000000000;;		Alarm(ctx context.Context, ar *pb.AlarmRequest) (*pb.AlarmResponse, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RaftStatusGetter interface {
0000000000000000000000000000000000000000;;		Index() uint64
0000000000000000000000000000000000000000;;		Term() uint64
0000000000000000000000000000000000000000;;		Leader() types.ID
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AuthGetter interface {
0000000000000000000000000000000000000000;;		AuthStore() auth.AuthStore
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type maintenanceServer struct {
0000000000000000000000000000000000000000;;		rg  RaftStatusGetter
0000000000000000000000000000000000000000;;		kg  KVGetter
0000000000000000000000000000000000000000;;		bg  BackendGetter
0000000000000000000000000000000000000000;;		a   Alarmer
0000000000000000000000000000000000000000;;		hdr header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewMaintenanceServer(s *etcdserver.EtcdServer) pb.MaintenanceServer {
0000000000000000000000000000000000000000;;		srv := &maintenanceServer{rg: s, kg: s, bg: s, a: s, hdr: newHeader(s)}
0000000000000000000000000000000000000000;;		return &authMaintenanceServer{srv, s}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ms *maintenanceServer) Defragment(ctx context.Context, sr *pb.DefragmentRequest) (*pb.DefragmentResponse, error) {
0000000000000000000000000000000000000000;;		plog.Noticef("starting to defragment the storage backend...")
0000000000000000000000000000000000000000;;		err := ms.bg.Backend().Defrag()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			plog.Errorf("failed to defragment the storage backend (%v)", err)
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		plog.Noticef("finished defragmenting the storage backend")
0000000000000000000000000000000000000000;;		return &pb.DefragmentResponse{}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ms *maintenanceServer) Snapshot(sr *pb.SnapshotRequest, srv pb.Maintenance_SnapshotServer) error {
0000000000000000000000000000000000000000;;		snap := ms.bg.Backend().Snapshot()
0000000000000000000000000000000000000000;;		pr, pw := io.Pipe()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		defer pr.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			snap.WriteTo(pw)
0000000000000000000000000000000000000000;;			if err := snap.Close(); err != nil {
0000000000000000000000000000000000000000;;				plog.Errorf("error closing snapshot (%v)", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			pw.Close()
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// send file data
0000000000000000000000000000000000000000;;		h := sha256.New()
0000000000000000000000000000000000000000;;		br := int64(0)
0000000000000000000000000000000000000000;;		buf := make([]byte, 32*1024)
0000000000000000000000000000000000000000;;		sz := snap.Size()
0000000000000000000000000000000000000000;;		for br < sz {
0000000000000000000000000000000000000000;;			n, err := io.ReadFull(pr, buf)
0000000000000000000000000000000000000000;;			if err != nil && err != io.EOF && err != io.ErrUnexpectedEOF {
0000000000000000000000000000000000000000;;				return togRPCError(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			br += int64(n)
0000000000000000000000000000000000000000;;			resp := &pb.SnapshotResponse{
0000000000000000000000000000000000000000;;				RemainingBytes: uint64(sz - br),
0000000000000000000000000000000000000000;;				Blob:           buf[:n],
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err = srv.Send(resp); err != nil {
0000000000000000000000000000000000000000;;				return togRPCError(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			h.Write(buf[:n])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// send sha
0000000000000000000000000000000000000000;;		sha := h.Sum(nil)
0000000000000000000000000000000000000000;;		hresp := &pb.SnapshotResponse{RemainingBytes: 0, Blob: sha}
0000000000000000000000000000000000000000;;		if err := srv.Send(hresp); err != nil {
0000000000000000000000000000000000000000;;			return togRPCError(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ms *maintenanceServer) Hash(ctx context.Context, r *pb.HashRequest) (*pb.HashResponse, error) {
0000000000000000000000000000000000000000;;		h, rev, err := ms.kg.KV().Hash()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, togRPCError(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		resp := &pb.HashResponse{Header: &pb.ResponseHeader{Revision: rev}, Hash: h}
0000000000000000000000000000000000000000;;		ms.hdr.fill(resp.Header)
0000000000000000000000000000000000000000;;		return resp, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ms *maintenanceServer) Alarm(ctx context.Context, ar *pb.AlarmRequest) (*pb.AlarmResponse, error) {
0000000000000000000000000000000000000000;;		return ms.a.Alarm(ctx, ar)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ms *maintenanceServer) Status(ctx context.Context, ar *pb.StatusRequest) (*pb.StatusResponse, error) {
0000000000000000000000000000000000000000;;		resp := &pb.StatusResponse{
0000000000000000000000000000000000000000;;			Header:    &pb.ResponseHeader{Revision: ms.hdr.rev()},
0000000000000000000000000000000000000000;;			Version:   version.Version,
0000000000000000000000000000000000000000;;			DbSize:    ms.bg.Backend().Size(),
0000000000000000000000000000000000000000;;			Leader:    uint64(ms.rg.Leader()),
0000000000000000000000000000000000000000;;			RaftIndex: ms.rg.Index(),
0000000000000000000000000000000000000000;;			RaftTerm:  ms.rg.Term(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ms.hdr.fill(resp.Header)
0000000000000000000000000000000000000000;;		return resp, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type authMaintenanceServer struct {
0000000000000000000000000000000000000000;;		*maintenanceServer
0000000000000000000000000000000000000000;;		ag AuthGetter
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ams *authMaintenanceServer) isAuthenticated(ctx context.Context) error {
0000000000000000000000000000000000000000;;		authInfo, err := ams.ag.AuthStore().AuthInfoFromCtx(ctx)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return ams.ag.AuthStore().IsAdminPermitted(authInfo)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ams *authMaintenanceServer) Defragment(ctx context.Context, sr *pb.DefragmentRequest) (*pb.DefragmentResponse, error) {
0000000000000000000000000000000000000000;;		if err := ams.isAuthenticated(ctx); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return ams.maintenanceServer.Defragment(ctx, sr)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ams *authMaintenanceServer) Snapshot(sr *pb.SnapshotRequest, srv pb.Maintenance_SnapshotServer) error {
0000000000000000000000000000000000000000;;		if err := ams.isAuthenticated(srv.Context()); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return ams.maintenanceServer.Snapshot(sr, srv)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ams *authMaintenanceServer) Hash(ctx context.Context, r *pb.HashRequest) (*pb.HashResponse, error) {
0000000000000000000000000000000000000000;;		if err := ams.isAuthenticated(ctx); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return ams.maintenanceServer.Hash(ctx, r)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ams *authMaintenanceServer) Status(ctx context.Context, ar *pb.StatusRequest) (*pb.StatusResponse, error) {
0000000000000000000000000000000000000000;;		if err := ams.isAuthenticated(ctx); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return ams.maintenanceServer.Status(ctx, ar)
0000000000000000000000000000000000000000;;	}
