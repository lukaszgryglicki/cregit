0000000000000000000000000000000000000000;;	// Copyright 2016 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
1861d099d10ddfa47b9f2b8b925fc11bd0827dac;Godeps/_workspace/src/github.com/coreos/etcd/etcdserver/api/cluster.go[Godeps/_workspace/src/github.com/coreos/etcd/etcdserver/api/cluster.go][vendor/github.com/coreos/etcd/etcdserver/api/cluster.go];	
0000000000000000000000000000000000000000;;	package api
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/etcdserver/membership"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/pkg/types"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/coreos/go-semver/semver"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Cluster is an interface representing a collection of members in one etcd cluster.
0000000000000000000000000000000000000000;;	type Cluster interface {
0000000000000000000000000000000000000000;;		// ID returns the cluster ID
0000000000000000000000000000000000000000;;		ID() types.ID
0000000000000000000000000000000000000000;;		// ClientURLs returns an aggregate set of all URLs on which this
0000000000000000000000000000000000000000;;		// cluster is listening for client requests
0000000000000000000000000000000000000000;;		ClientURLs() []string
0000000000000000000000000000000000000000;;		// Members returns a slice of members sorted by their ID
0000000000000000000000000000000000000000;;		Members() []*membership.Member
0000000000000000000000000000000000000000;;		// Member retrieves a particular member based on ID, or nil if the
0000000000000000000000000000000000000000;;		// member does not exist in the cluster
0000000000000000000000000000000000000000;;		Member(id types.ID) *membership.Member
0000000000000000000000000000000000000000;;		// IsIDRemoved checks whether the given ID has been removed from this
0000000000000000000000000000000000000000;;		// cluster at some point in the past
0000000000000000000000000000000000000000;;		IsIDRemoved(id types.ID) bool
0000000000000000000000000000000000000000;;		// Version is the cluster-wide minimum major.minor version.
0000000000000000000000000000000000000000;;		Version() *semver.Version
0000000000000000000000000000000000000000;;	}
