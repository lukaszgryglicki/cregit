0000000000000000000000000000000000000000;;	// Copyright 2016 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
1861d099d10ddfa47b9f2b8b925fc11bd0827dac;Godeps/_workspace/src/github.com/coreos/etcd/etcdserver/api/v3rpc/header.go[Godeps/_workspace/src/github.com/coreos/etcd/etcdserver/api/v3rpc/header.go][vendor/github.com/coreos/etcd/etcdserver/api/v3rpc/header.go];	
0000000000000000000000000000000000000000;;	package v3rpc
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/etcdserver"
0000000000000000000000000000000000000000;;		pb "github.com/coreos/etcd/etcdserver/etcdserverpb"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type header struct {
0000000000000000000000000000000000000000;;		clusterID int64
0000000000000000000000000000000000000000;;		memberID  int64
0000000000000000000000000000000000000000;;		raftTimer etcdserver.RaftTimer
0000000000000000000000000000000000000000;;		rev       func() int64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newHeader(s *etcdserver.EtcdServer) header {
0000000000000000000000000000000000000000;;		return header{
0000000000000000000000000000000000000000;;			clusterID: int64(s.Cluster().ID()),
0000000000000000000000000000000000000000;;			memberID:  int64(s.ID()),
0000000000000000000000000000000000000000;;			raftTimer: s,
0000000000000000000000000000000000000000;;			rev:       func() int64 { return s.KV().Rev() },
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// fill populates pb.ResponseHeader using etcdserver information
0000000000000000000000000000000000000000;;	func (h *header) fill(rh *pb.ResponseHeader) {
0000000000000000000000000000000000000000;;		rh.ClusterId = uint64(h.clusterID)
0000000000000000000000000000000000000000;;		rh.MemberId = uint64(h.memberID)
0000000000000000000000000000000000000000;;		rh.RaftTerm = h.raftTimer.Term()
0000000000000000000000000000000000000000;;		if rh.Revision == 0 {
0000000000000000000000000000000000000000;;			rh.Revision = h.rev()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
