0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/coreos/etcd/etcdserver/config.go[Godeps/_workspace/src/github.com/coreos/etcd/etcdserver/config.go][vendor/github.com/coreos/etcd/etcdserver/config.go];	
0000000000000000000000000000000000000000;;	package etcdserver
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/pkg/netutil"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/pkg/transport"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/pkg/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ServerConfig holds the configuration of etcd as taken from the command line or discovery.
0000000000000000000000000000000000000000;;	type ServerConfig struct {
0000000000000000000000000000000000000000;;		Name           string
0000000000000000000000000000000000000000;;		DiscoveryURL   string
0000000000000000000000000000000000000000;;		DiscoveryProxy string
0000000000000000000000000000000000000000;;		ClientURLs     types.URLs
0000000000000000000000000000000000000000;;		PeerURLs       types.URLs
0000000000000000000000000000000000000000;;		DataDir        string
0000000000000000000000000000000000000000;;		// DedicatedWALDir config will make the etcd to write the WAL to the WALDir
0000000000000000000000000000000000000000;;		// rather than the dataDir/member/wal.
0000000000000000000000000000000000000000;;		DedicatedWALDir     string
0000000000000000000000000000000000000000;;		SnapCount           uint64
0000000000000000000000000000000000000000;;		MaxSnapFiles        uint
0000000000000000000000000000000000000000;;		MaxWALFiles         uint
0000000000000000000000000000000000000000;;		InitialPeerURLsMap  types.URLsMap
0000000000000000000000000000000000000000;;		InitialClusterToken string
0000000000000000000000000000000000000000;;		NewCluster          bool
0000000000000000000000000000000000000000;;		ForceNewCluster     bool
0000000000000000000000000000000000000000;;		PeerTLSInfo         transport.TLSInfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TickMs           uint
0000000000000000000000000000000000000000;;		ElectionTicks    int
0000000000000000000000000000000000000000;;		BootstrapTimeout time.Duration
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AutoCompactionRetention int
0000000000000000000000000000000000000000;;		QuotaBackendBytes       int64
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		StrictReconfigCheck bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ClientCertAuthEnabled is true when cert has been signed by the client CA.
0000000000000000000000000000000000000000;;		ClientCertAuthEnabled bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VerifyBootstrap sanity-checks the initial config for bootstrap case
0000000000000000000000000000000000000000;;	// and returns an error for things that should never happen.
0000000000000000000000000000000000000000;;	func (c *ServerConfig) VerifyBootstrap() error {
0000000000000000000000000000000000000000;;		if err := c.hasLocalMember(); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := c.advertiseMatchesCluster(); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if checkDuplicateURL(c.InitialPeerURLsMap) {
0000000000000000000000000000000000000000;;			return fmt.Errorf("initial cluster %s has duplicate url", c.InitialPeerURLsMap)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if c.InitialPeerURLsMap.String() == "" && c.DiscoveryURL == "" {
0000000000000000000000000000000000000000;;			return fmt.Errorf("initial cluster unset and no discovery URL found")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VerifyJoinExisting sanity-checks the initial config for join existing cluster
0000000000000000000000000000000000000000;;	// case and returns an error for things that should never happen.
0000000000000000000000000000000000000000;;	func (c *ServerConfig) VerifyJoinExisting() error {
0000000000000000000000000000000000000000;;		// The member has announced its peer urls to the cluster before starting; no need to
0000000000000000000000000000000000000000;;		// set the configuration again.
0000000000000000000000000000000000000000;;		if err := c.hasLocalMember(); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if checkDuplicateURL(c.InitialPeerURLsMap) {
0000000000000000000000000000000000000000;;			return fmt.Errorf("initial cluster %s has duplicate url", c.InitialPeerURLsMap)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if c.DiscoveryURL != "" {
0000000000000000000000000000000000000000;;			return fmt.Errorf("discovery URL should not be set when joining existing initial cluster")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// hasLocalMember checks that the cluster at least contains the local server.
0000000000000000000000000000000000000000;;	func (c *ServerConfig) hasLocalMember() error {
0000000000000000000000000000000000000000;;		if urls := c.InitialPeerURLsMap[c.Name]; urls == nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("couldn't find local name %q in the initial cluster configuration", c.Name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// advertiseMatchesCluster confirms peer URLs match those in the cluster peer list.
0000000000000000000000000000000000000000;;	func (c *ServerConfig) advertiseMatchesCluster() error {
0000000000000000000000000000000000000000;;		urls, apurls := c.InitialPeerURLsMap[c.Name], c.PeerURLs.StringSlice()
0000000000000000000000000000000000000000;;		urls.Sort()
0000000000000000000000000000000000000000;;		sort.Strings(apurls)
0000000000000000000000000000000000000000;;		ctx, cancel := context.WithTimeout(context.TODO(), 30*time.Second)
0000000000000000000000000000000000000000;;		defer cancel()
0000000000000000000000000000000000000000;;		if !netutil.URLStringsEqual(ctx, apurls, urls.StringSlice()) {
0000000000000000000000000000000000000000;;			umap := map[string]types.URLs{c.Name: c.PeerURLs}
0000000000000000000000000000000000000000;;			return fmt.Errorf("--initial-cluster must include %s given --initial-advertise-peer-urls=%s", types.URLsMap(umap).String(), strings.Join(apurls, ","))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ServerConfig) MemberDir() string { return filepath.Join(c.DataDir, "member") }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ServerConfig) WALDir() string {
0000000000000000000000000000000000000000;;		if c.DedicatedWALDir != "" {
0000000000000000000000000000000000000000;;			return c.DedicatedWALDir
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return filepath.Join(c.MemberDir(), "wal")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ServerConfig) SnapDir() string { return filepath.Join(c.MemberDir(), "snap") }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ServerConfig) ShouldDiscover() bool { return c.DiscoveryURL != "" }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ReqTimeout returns timeout for request to finish.
0000000000000000000000000000000000000000;;	func (c *ServerConfig) ReqTimeout() time.Duration {
0000000000000000000000000000000000000000;;		// 5s for queue waiting, computation and disk IO delay
0000000000000000000000000000000000000000;;		// + 2 * election timeout for possible leader election
0000000000000000000000000000000000000000;;		return 5*time.Second + 2*time.Duration(c.ElectionTicks)*time.Duration(c.TickMs)*time.Millisecond
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ServerConfig) electionTimeout() time.Duration {
0000000000000000000000000000000000000000;;		return time.Duration(c.ElectionTicks) * time.Duration(c.TickMs) * time.Millisecond
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ServerConfig) peerDialTimeout() time.Duration {
0000000000000000000000000000000000000000;;		// 1s for queue wait and system delay
0000000000000000000000000000000000000000;;		// + one RTT, which is smaller than 1/5 election timeout
0000000000000000000000000000000000000000;;		return time.Second + time.Duration(c.ElectionTicks)*time.Duration(c.TickMs)*time.Millisecond/5
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ServerConfig) PrintWithInitial() { c.print(true) }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ServerConfig) Print() { c.print(false) }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ServerConfig) print(initial bool) {
0000000000000000000000000000000000000000;;		plog.Infof("name = %s", c.Name)
0000000000000000000000000000000000000000;;		if c.ForceNewCluster {
0000000000000000000000000000000000000000;;			plog.Infof("force new cluster")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		plog.Infof("data dir = %s", c.DataDir)
0000000000000000000000000000000000000000;;		plog.Infof("member dir = %s", c.MemberDir())
0000000000000000000000000000000000000000;;		if c.DedicatedWALDir != "" {
0000000000000000000000000000000000000000;;			plog.Infof("dedicated WAL dir = %s", c.DedicatedWALDir)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		plog.Infof("heartbeat = %dms", c.TickMs)
0000000000000000000000000000000000000000;;		plog.Infof("election = %dms", c.ElectionTicks*int(c.TickMs))
0000000000000000000000000000000000000000;;		plog.Infof("snapshot count = %d", c.SnapCount)
0000000000000000000000000000000000000000;;		if len(c.DiscoveryURL) != 0 {
0000000000000000000000000000000000000000;;			plog.Infof("discovery URL= %s", c.DiscoveryURL)
0000000000000000000000000000000000000000;;			if len(c.DiscoveryProxy) != 0 {
0000000000000000000000000000000000000000;;				plog.Infof("discovery proxy = %s", c.DiscoveryProxy)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		plog.Infof("advertise client URLs = %s", c.ClientURLs)
0000000000000000000000000000000000000000;;		if initial {
0000000000000000000000000000000000000000;;			plog.Infof("initial advertise peer URLs = %s", c.PeerURLs)
0000000000000000000000000000000000000000;;			plog.Infof("initial cluster = %s", c.InitialPeerURLsMap)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func checkDuplicateURL(urlsmap types.URLsMap) bool {
0000000000000000000000000000000000000000;;		um := make(map[string]bool)
0000000000000000000000000000000000000000;;		for _, urls := range urlsmap {
0000000000000000000000000000000000000000;;			for _, url := range urls {
0000000000000000000000000000000000000000;;				u := url.String()
0000000000000000000000000000000000000000;;				if um[u] {
0000000000000000000000000000000000000000;;					return true
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				um[u] = true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ServerConfig) bootstrapTimeout() time.Duration {
0000000000000000000000000000000000000000;;		if c.BootstrapTimeout != 0 {
0000000000000000000000000000000000000000;;			return c.BootstrapTimeout
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return time.Second
0000000000000000000000000000000000000000;;	}
