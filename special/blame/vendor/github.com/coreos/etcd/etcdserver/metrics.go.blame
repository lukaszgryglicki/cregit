0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/coreos/etcd/etcdserver/metrics.go[Godeps/_workspace/src/github.com/coreos/etcd/etcdserver/metrics.go][vendor/github.com/coreos/etcd/etcdserver/metrics.go];	
0000000000000000000000000000000000000000;;	package etcdserver
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/pkg/runtime"
0000000000000000000000000000000000000000;;		"github.com/prometheus/client_golang/prometheus"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		hasLeader = prometheus.NewGauge(prometheus.GaugeOpts{
0000000000000000000000000000000000000000;;			Namespace: "etcd",
0000000000000000000000000000000000000000;;			Subsystem: "server",
0000000000000000000000000000000000000000;;			Name:      "has_leader",
0000000000000000000000000000000000000000;;			Help:      "Whether or not a leader exists. 1 is existence, 0 is not.",
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		leaderChanges = prometheus.NewCounter(prometheus.CounterOpts{
0000000000000000000000000000000000000000;;			Namespace: "etcd",
0000000000000000000000000000000000000000;;			Subsystem: "server",
0000000000000000000000000000000000000000;;			Name:      "leader_changes_seen_total",
0000000000000000000000000000000000000000;;			Help:      "The number of leader changes seen.",
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		proposalsCommitted = prometheus.NewGauge(prometheus.GaugeOpts{
0000000000000000000000000000000000000000;;			Namespace: "etcd",
0000000000000000000000000000000000000000;;			Subsystem: "server",
0000000000000000000000000000000000000000;;			Name:      "proposals_committed_total",
0000000000000000000000000000000000000000;;			Help:      "The total number of consensus proposals committed.",
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		proposalsApplied = prometheus.NewGauge(prometheus.GaugeOpts{
0000000000000000000000000000000000000000;;			Namespace: "etcd",
0000000000000000000000000000000000000000;;			Subsystem: "server",
0000000000000000000000000000000000000000;;			Name:      "proposals_applied_total",
0000000000000000000000000000000000000000;;			Help:      "The total number of consensus proposals applied.",
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		proposalsPending = prometheus.NewGauge(prometheus.GaugeOpts{
0000000000000000000000000000000000000000;;			Namespace: "etcd",
0000000000000000000000000000000000000000;;			Subsystem: "server",
0000000000000000000000000000000000000000;;			Name:      "proposals_pending",
0000000000000000000000000000000000000000;;			Help:      "The current number of pending proposals to commit.",
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		proposalsFailed = prometheus.NewCounter(prometheus.CounterOpts{
0000000000000000000000000000000000000000;;			Namespace: "etcd",
0000000000000000000000000000000000000000;;			Subsystem: "server",
0000000000000000000000000000000000000000;;			Name:      "proposals_failed_total",
0000000000000000000000000000000000000000;;			Help:      "The total number of failed proposals seen.",
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		prometheus.MustRegister(hasLeader)
0000000000000000000000000000000000000000;;		prometheus.MustRegister(leaderChanges)
0000000000000000000000000000000000000000;;		prometheus.MustRegister(proposalsCommitted)
0000000000000000000000000000000000000000;;		prometheus.MustRegister(proposalsApplied)
0000000000000000000000000000000000000000;;		prometheus.MustRegister(proposalsPending)
0000000000000000000000000000000000000000;;		prometheus.MustRegister(proposalsFailed)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func monitorFileDescriptor(done <-chan struct{}) {
0000000000000000000000000000000000000000;;		ticker := time.NewTicker(5 * time.Second)
0000000000000000000000000000000000000000;;		defer ticker.Stop()
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			used, err := runtime.FDUsage()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				plog.Errorf("cannot monitor file descriptor usage (%v)", err)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			limit, err := runtime.FDLimit()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				plog.Errorf("cannot monitor file descriptor usage (%v)", err)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if used >= limit/5*4 {
0000000000000000000000000000000000000000;;				plog.Warningf("80%% of the file descriptor limit is used [used = %d, limit = %d]", used, limit)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			select {
0000000000000000000000000000000000000000;;			case <-ticker.C:
0000000000000000000000000000000000000000;;			case <-done:
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
