0000000000000000000000000000000000000000;;	// Copyright 2016 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
885071b7d07344044421ffe2fd90c1bcd1ee9812;;	
0000000000000000000000000000000000000000;;	package etcdserver
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pb "github.com/coreos/etcd/etcdserver/etcdserverpb"
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type v2API interface {
0000000000000000000000000000000000000000;;		Post(ctx context.Context, r *pb.Request) (Response, error)
0000000000000000000000000000000000000000;;		Put(ctx context.Context, r *pb.Request) (Response, error)
0000000000000000000000000000000000000000;;		Delete(ctx context.Context, r *pb.Request) (Response, error)
0000000000000000000000000000000000000000;;		QGet(ctx context.Context, r *pb.Request) (Response, error)
0000000000000000000000000000000000000000;;		Get(ctx context.Context, r *pb.Request) (Response, error)
0000000000000000000000000000000000000000;;		Head(ctx context.Context, r *pb.Request) (Response, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type v2apiStore struct{ s *EtcdServer }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *v2apiStore) Post(ctx context.Context, r *pb.Request) (Response, error) {
0000000000000000000000000000000000000000;;		return a.processRaftRequest(ctx, r)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *v2apiStore) Put(ctx context.Context, r *pb.Request) (Response, error) {
0000000000000000000000000000000000000000;;		return a.processRaftRequest(ctx, r)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *v2apiStore) Delete(ctx context.Context, r *pb.Request) (Response, error) {
0000000000000000000000000000000000000000;;		return a.processRaftRequest(ctx, r)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *v2apiStore) QGet(ctx context.Context, r *pb.Request) (Response, error) {
0000000000000000000000000000000000000000;;		return a.processRaftRequest(ctx, r)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *v2apiStore) processRaftRequest(ctx context.Context, r *pb.Request) (Response, error) {
0000000000000000000000000000000000000000;;		data, err := r.Marshal()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return Response{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ch := a.s.w.Register(r.ID)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		start := time.Now()
0000000000000000000000000000000000000000;;		a.s.r.Propose(ctx, data)
0000000000000000000000000000000000000000;;		proposalsPending.Inc()
0000000000000000000000000000000000000000;;		defer proposalsPending.Dec()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		select {
0000000000000000000000000000000000000000;;		case x := <-ch:
0000000000000000000000000000000000000000;;			resp := x.(Response)
0000000000000000000000000000000000000000;;			return resp, resp.err
0000000000000000000000000000000000000000;;		case <-ctx.Done():
0000000000000000000000000000000000000000;;			proposalsFailed.Inc()
0000000000000000000000000000000000000000;;			a.s.w.Trigger(r.ID, nil) // GC wait
0000000000000000000000000000000000000000;;			return Response{}, a.s.parseProposeCtxErr(ctx.Err(), start)
0000000000000000000000000000000000000000;;		case <-a.s.stopping:
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return Response{}, ErrStopped
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *v2apiStore) Get(ctx context.Context, r *pb.Request) (Response, error) {
0000000000000000000000000000000000000000;;		if r.Wait {
0000000000000000000000000000000000000000;;			wc, err := a.s.store.Watch(r.Path, r.Recursive, r.Stream, r.Since)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return Response{}, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return Response{Watcher: wc}, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ev, err := a.s.store.Get(r.Path, r.Recursive, r.Sorted)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return Response{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return Response{Event: ev}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *v2apiStore) Head(ctx context.Context, r *pb.Request) (Response, error) {
0000000000000000000000000000000000000000;;		ev, err := a.s.store.Get(r.Path, r.Recursive, r.Sorted)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return Response{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return Response{Event: ev}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do interprets r and performs an operation on s.store according to r.Method
0000000000000000000000000000000000000000;;	// and other fields. If r.Method is "POST", "PUT", "DELETE", or a "GET" with
0000000000000000000000000000000000000000;;	// Quorum == true, r will be sent through consensus before performing its
0000000000000000000000000000000000000000;;	// respective operation. Do will block until an action is performed or there is
0000000000000000000000000000000000000000;;	// an error.
0000000000000000000000000000000000000000;;	func (s *EtcdServer) Do(ctx context.Context, r pb.Request) (Response, error) {
0000000000000000000000000000000000000000;;		r.ID = s.reqIDGen.Next()
0000000000000000000000000000000000000000;;		if r.Method == "GET" && r.Quorum {
0000000000000000000000000000000000000000;;			r.Method = "QGET"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		v2api := (v2API)(&v2apiStore{s})
0000000000000000000000000000000000000000;;		switch r.Method {
0000000000000000000000000000000000000000;;		case "POST":
0000000000000000000000000000000000000000;;			return v2api.Post(ctx, &r)
0000000000000000000000000000000000000000;;		case "PUT":
0000000000000000000000000000000000000000;;			return v2api.Put(ctx, &r)
0000000000000000000000000000000000000000;;		case "DELETE":
0000000000000000000000000000000000000000;;			return v2api.Delete(ctx, &r)
0000000000000000000000000000000000000000;;		case "QGET":
0000000000000000000000000000000000000000;;			return v2api.QGet(ctx, &r)
0000000000000000000000000000000000000000;;		case "GET":
0000000000000000000000000000000000000000;;			return v2api.Get(ctx, &r)
0000000000000000000000000000000000000000;;		case "HEAD":
0000000000000000000000000000000000000000;;			return v2api.Head(ctx, &r)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return Response{}, ErrUnknownMethod
0000000000000000000000000000000000000000;;	}
