0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/coreos/etcd/etcdserver/auth/auth_requests.go[Godeps/_workspace/src/github.com/coreos/etcd/etcdserver/auth/auth_requests.go][vendor/github.com/coreos/etcd/etcdserver/auth/auth_requests.go];	
0000000000000000000000000000000000000000;;	package auth
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		etcderr "github.com/coreos/etcd/error"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/etcdserver"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/etcdserver/etcdserverpb"
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *store) ensureAuthDirectories() error {
0000000000000000000000000000000000000000;;		if s.ensuredOnce {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, res := range []string{StorePermsPrefix, StorePermsPrefix + "/users/", StorePermsPrefix + "/roles/"} {
0000000000000000000000000000000000000000;;			ctx, cancel := context.WithTimeout(context.Background(), s.timeout)
0000000000000000000000000000000000000000;;			defer cancel()
0000000000000000000000000000000000000000;;			pe := false
0000000000000000000000000000000000000000;;			rr := etcdserverpb.Request{
0000000000000000000000000000000000000000;;				Method:    "PUT",
0000000000000000000000000000000000000000;;				Path:      res,
0000000000000000000000000000000000000000;;				Dir:       true,
0000000000000000000000000000000000000000;;				PrevExist: &pe,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			_, err := s.server.Do(ctx, rr)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if e, ok := err.(*etcderr.Error); ok {
0000000000000000000000000000000000000000;;					if e.ErrorCode == etcderr.EcodeNodeExist {
0000000000000000000000000000000000000000;;						continue
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				plog.Errorf("failed to create auth directories in the store (%v)", err)
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ctx, cancel := context.WithTimeout(context.Background(), s.timeout)
0000000000000000000000000000000000000000;;		defer cancel()
0000000000000000000000000000000000000000;;		pe := false
0000000000000000000000000000000000000000;;		rr := etcdserverpb.Request{
0000000000000000000000000000000000000000;;			Method:    "PUT",
0000000000000000000000000000000000000000;;			Path:      StorePermsPrefix + "/enabled",
0000000000000000000000000000000000000000;;			Val:       "false",
0000000000000000000000000000000000000000;;			PrevExist: &pe,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, err := s.server.Do(ctx, rr)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if e, ok := err.(*etcderr.Error); ok {
0000000000000000000000000000000000000000;;				if e.ErrorCode == etcderr.EcodeNodeExist {
0000000000000000000000000000000000000000;;					s.ensuredOnce = true
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s.ensuredOnce = true
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *store) enableAuth() error {
0000000000000000000000000000000000000000;;		_, err := s.updateResource("/enabled", true)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (s *store) disableAuth() error {
0000000000000000000000000000000000000000;;		_, err := s.updateResource("/enabled", false)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *store) detectAuth() bool {
0000000000000000000000000000000000000000;;		if s.server == nil {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		value, err := s.requestResource("/enabled", false, false)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if e, ok := err.(*etcderr.Error); ok {
0000000000000000000000000000000000000000;;				if e.ErrorCode == etcderr.EcodeKeyNotFound {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			plog.Errorf("failed to detect auth settings (%s)", err)
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var u bool
0000000000000000000000000000000000000000;;		err = json.Unmarshal([]byte(*value.Event.Node.Value), &u)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			plog.Errorf("internal bookkeeping value for enabled isn't valid JSON (%v)", err)
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *store) requestResource(res string, dir, quorum bool) (etcdserver.Response, error) {
0000000000000000000000000000000000000000;;		ctx, cancel := context.WithTimeout(context.Background(), s.timeout)
0000000000000000000000000000000000000000;;		defer cancel()
0000000000000000000000000000000000000000;;		p := path.Join(StorePermsPrefix, res)
0000000000000000000000000000000000000000;;		method := "GET"
0000000000000000000000000000000000000000;;		if quorum {
0000000000000000000000000000000000000000;;			method = "QGET"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		rr := etcdserverpb.Request{
0000000000000000000000000000000000000000;;			Method: method,
0000000000000000000000000000000000000000;;			Path:   p,
0000000000000000000000000000000000000000;;			Dir:    dir,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return s.server.Do(ctx, rr)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *store) updateResource(res string, value interface{}) (etcdserver.Response, error) {
0000000000000000000000000000000000000000;;		return s.setResource(res, value, true)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (s *store) createResource(res string, value interface{}) (etcdserver.Response, error) {
0000000000000000000000000000000000000000;;		return s.setResource(res, value, false)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (s *store) setResource(res string, value interface{}, prevexist bool) (etcdserver.Response, error) {
0000000000000000000000000000000000000000;;		err := s.ensureAuthDirectories()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return etcdserver.Response{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ctx, cancel := context.WithTimeout(context.Background(), s.timeout)
0000000000000000000000000000000000000000;;		defer cancel()
0000000000000000000000000000000000000000;;		data, err := json.Marshal(value)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return etcdserver.Response{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p := path.Join(StorePermsPrefix, res)
0000000000000000000000000000000000000000;;		rr := etcdserverpb.Request{
0000000000000000000000000000000000000000;;			Method:    "PUT",
0000000000000000000000000000000000000000;;			Path:      p,
0000000000000000000000000000000000000000;;			Val:       string(data),
0000000000000000000000000000000000000000;;			PrevExist: &prevexist,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return s.server.Do(ctx, rr)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *store) deleteResource(res string) (etcdserver.Response, error) {
0000000000000000000000000000000000000000;;		err := s.ensureAuthDirectories()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return etcdserver.Response{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ctx, cancel := context.WithTimeout(context.Background(), s.timeout)
0000000000000000000000000000000000000000;;		defer cancel()
0000000000000000000000000000000000000000;;		pex := true
0000000000000000000000000000000000000000;;		p := path.Join(StorePermsPrefix, res)
0000000000000000000000000000000000000000;;		rr := etcdserverpb.Request{
0000000000000000000000000000000000000000;;			Method:    "DELETE",
0000000000000000000000000000000000000000;;			Path:      p,
0000000000000000000000000000000000000000;;			PrevExist: &pex,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return s.server.Do(ctx, rr)
0000000000000000000000000000000000000000;;	}
