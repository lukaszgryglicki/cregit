0000000000000000000000000000000000000000;;	// Copyright 2016 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
885071b7d07344044421ffe2fd90c1bcd1ee9812;;	
0000000000000000000000000000000000000000;;	package etcdserver
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/etcdserver/api"
0000000000000000000000000000000000000000;;		pb "github.com/coreos/etcd/etcdserver/etcdserverpb"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/etcdserver/membership"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/pkg/pbutil"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/store"
0000000000000000000000000000000000000000;;		"github.com/coreos/go-semver/semver"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplierV2 is the interface for processing V2 raft messages
0000000000000000000000000000000000000000;;	type ApplierV2 interface {
0000000000000000000000000000000000000000;;		Delete(r *pb.Request) Response
0000000000000000000000000000000000000000;;		Post(r *pb.Request) Response
0000000000000000000000000000000000000000;;		Put(r *pb.Request) Response
0000000000000000000000000000000000000000;;		QGet(r *pb.Request) Response
0000000000000000000000000000000000000000;;		Sync(r *pb.Request) Response
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewApplierV2(s store.Store, c *membership.RaftCluster) ApplierV2 {
0000000000000000000000000000000000000000;;		return &applierV2store{store: s, cluster: c}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type applierV2store struct {
0000000000000000000000000000000000000000;;		store   store.Store
0000000000000000000000000000000000000000;;		cluster *membership.RaftCluster
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *applierV2store) Delete(r *pb.Request) Response {
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case r.PrevIndex > 0 || r.PrevValue != "":
0000000000000000000000000000000000000000;;			return toResponse(a.store.CompareAndDelete(r.Path, r.PrevValue, r.PrevIndex))
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return toResponse(a.store.Delete(r.Path, r.Dir, r.Recursive))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *applierV2store) Post(r *pb.Request) Response {
0000000000000000000000000000000000000000;;		return toResponse(a.store.Create(r.Path, r.Dir, r.Val, true, toTTLOptions(r)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *applierV2store) Put(r *pb.Request) Response {
0000000000000000000000000000000000000000;;		ttlOptions := toTTLOptions(r)
0000000000000000000000000000000000000000;;		exists, existsSet := pbutil.GetBool(r.PrevExist)
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case existsSet:
0000000000000000000000000000000000000000;;			if exists {
0000000000000000000000000000000000000000;;				if r.PrevIndex == 0 && r.PrevValue == "" {
0000000000000000000000000000000000000000;;					return toResponse(a.store.Update(r.Path, r.Val, ttlOptions))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return toResponse(a.store.CompareAndSwap(r.Path, r.PrevValue, r.PrevIndex, r.Val, ttlOptions))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return toResponse(a.store.Create(r.Path, r.Dir, r.Val, false, ttlOptions))
0000000000000000000000000000000000000000;;		case r.PrevIndex > 0 || r.PrevValue != "":
0000000000000000000000000000000000000000;;			return toResponse(a.store.CompareAndSwap(r.Path, r.PrevValue, r.PrevIndex, r.Val, ttlOptions))
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			if storeMemberAttributeRegexp.MatchString(r.Path) {
0000000000000000000000000000000000000000;;				id := membership.MustParseMemberIDFromKey(path.Dir(r.Path))
0000000000000000000000000000000000000000;;				var attr membership.Attributes
0000000000000000000000000000000000000000;;				if err := json.Unmarshal([]byte(r.Val), &attr); err != nil {
0000000000000000000000000000000000000000;;					plog.Panicf("unmarshal %s should never fail: %v", r.Val, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if a.cluster != nil {
0000000000000000000000000000000000000000;;					a.cluster.UpdateAttributes(id, attr)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				// return an empty response since there is no consumer.
0000000000000000000000000000000000000000;;				return Response{}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if r.Path == membership.StoreClusterVersionKey() {
0000000000000000000000000000000000000000;;				if a.cluster != nil {
0000000000000000000000000000000000000000;;					a.cluster.SetVersion(semver.Must(semver.NewVersion(r.Val)), api.UpdateCapability)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				// return an empty response since there is no consumer.
0000000000000000000000000000000000000000;;				return Response{}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return toResponse(a.store.Set(r.Path, r.Dir, r.Val, ttlOptions))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *applierV2store) QGet(r *pb.Request) Response {
0000000000000000000000000000000000000000;;		return toResponse(a.store.Get(r.Path, r.Recursive, r.Sorted))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *applierV2store) Sync(r *pb.Request) Response {
0000000000000000000000000000000000000000;;		a.store.DeleteExpiredKeys(time.Unix(0, r.Time))
0000000000000000000000000000000000000000;;		return Response{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// applyV2Request interprets r as a call to store.X and returns a Response interpreted
0000000000000000000000000000000000000000;;	// from store.Event
0000000000000000000000000000000000000000;;	func (s *EtcdServer) applyV2Request(r *pb.Request) Response {
0000000000000000000000000000000000000000;;		toTTLOptions(r)
0000000000000000000000000000000000000000;;		switch r.Method {
0000000000000000000000000000000000000000;;		case "POST":
0000000000000000000000000000000000000000;;			return s.applyV2.Post(r)
0000000000000000000000000000000000000000;;		case "PUT":
0000000000000000000000000000000000000000;;			return s.applyV2.Put(r)
0000000000000000000000000000000000000000;;		case "DELETE":
0000000000000000000000000000000000000000;;			return s.applyV2.Delete(r)
0000000000000000000000000000000000000000;;		case "QGET":
0000000000000000000000000000000000000000;;			return s.applyV2.QGet(r)
0000000000000000000000000000000000000000;;		case "SYNC":
0000000000000000000000000000000000000000;;			return s.applyV2.Sync(r)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			// This should never be reached, but just in case:
0000000000000000000000000000000000000000;;			return Response{err: ErrUnknownMethod}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func toTTLOptions(r *pb.Request) store.TTLOptionSet {
0000000000000000000000000000000000000000;;		refresh, _ := pbutil.GetBool(r.Refresh)
0000000000000000000000000000000000000000;;		ttlOptions := store.TTLOptionSet{Refresh: refresh}
0000000000000000000000000000000000000000;;		if r.Expiration != 0 {
0000000000000000000000000000000000000000;;			ttlOptions.ExpireTime = time.Unix(0, r.Expiration)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ttlOptions
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func toResponse(ev *store.Event, err error) Response {
0000000000000000000000000000000000000000;;		return Response{Event: ev, err: err}
0000000000000000000000000000000000000000;;	}
