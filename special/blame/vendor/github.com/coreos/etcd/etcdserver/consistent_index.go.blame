0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/coreos/etcd/pkg/timeutil/timeutil.go[Godeps/_workspace/src/github.com/coreos/etcd/pkg/timeutil/timeutil.go][vendor/github.com/coreos/etcd/etcdserver/consistent_index.go];	
0000000000000000000000000000000000000000;;	package etcdserver
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sync/atomic"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// consistentIndex represents the offset of an entry in a consistent replica log.
0000000000000000000000000000000000000000;;	// It implements the mvcc.ConsistentIndexGetter interface.
0000000000000000000000000000000000000000;;	// It is always set to the offset of current entry before executing the entry,
0000000000000000000000000000000000000000;;	// so ConsistentWatchableKV could get the consistent index from it.
0000000000000000000000000000000000000000;;	type consistentIndex uint64
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *consistentIndex) setConsistentIndex(v uint64) {
0000000000000000000000000000000000000000;;		atomic.StoreUint64((*uint64)(i), v)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *consistentIndex) ConsistentIndex() uint64 {
0000000000000000000000000000000000000000;;		return atomic.LoadUint64((*uint64)(i))
0000000000000000000000000000000000000000;;	}
