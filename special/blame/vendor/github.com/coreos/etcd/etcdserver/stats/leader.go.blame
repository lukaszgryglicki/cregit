0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/coreos/etcd/etcdserver/stats/leader.go[Godeps/_workspace/src/github.com/coreos/etcd/etcdserver/stats/leader.go][vendor/github.com/coreos/etcd/etcdserver/stats/leader.go];	
0000000000000000000000000000000000000000;;	package stats
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"math"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LeaderStats is used by the leader in an etcd cluster, and encapsulates
0000000000000000000000000000000000000000;;	// statistics about communication with its followers
0000000000000000000000000000000000000000;;	type LeaderStats struct {
0000000000000000000000000000000000000000;;		// Leader is the ID of the leader in the etcd cluster.
0000000000000000000000000000000000000000;;		// TODO(jonboulle): clarify that these are IDs, not names
0000000000000000000000000000000000000000;;		Leader    string                    `json:"leader"`
0000000000000000000000000000000000000000;;		Followers map[string]*FollowerStats `json:"followers"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		sync.Mutex
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewLeaderStats generates a new LeaderStats with the given id as leader
0000000000000000000000000000000000000000;;	func NewLeaderStats(id string) *LeaderStats {
0000000000000000000000000000000000000000;;		return &LeaderStats{
0000000000000000000000000000000000000000;;			Leader:    id,
0000000000000000000000000000000000000000;;			Followers: make(map[string]*FollowerStats),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ls *LeaderStats) JSON() []byte {
0000000000000000000000000000000000000000;;		ls.Lock()
0000000000000000000000000000000000000000;;		stats := *ls
0000000000000000000000000000000000000000;;		ls.Unlock()
0000000000000000000000000000000000000000;;		b, err := json.Marshal(stats)
0000000000000000000000000000000000000000;;		// TODO(jonboulle): appropriate error handling?
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			plog.Errorf("error marshalling leader stats (%v)", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return b
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ls *LeaderStats) Follower(name string) *FollowerStats {
0000000000000000000000000000000000000000;;		ls.Lock()
0000000000000000000000000000000000000000;;		defer ls.Unlock()
0000000000000000000000000000000000000000;;		fs, ok := ls.Followers[name]
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			fs = &FollowerStats{}
0000000000000000000000000000000000000000;;			fs.Latency.Minimum = 1 << 63
0000000000000000000000000000000000000000;;			ls.Followers[name] = fs
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FollowerStats encapsulates various statistics about a follower in an etcd cluster
0000000000000000000000000000000000000000;;	type FollowerStats struct {
0000000000000000000000000000000000000000;;		Latency LatencyStats `json:"latency"`
0000000000000000000000000000000000000000;;		Counts  CountsStats  `json:"counts"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		sync.Mutex
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LatencyStats encapsulates latency statistics.
0000000000000000000000000000000000000000;;	type LatencyStats struct {
0000000000000000000000000000000000000000;;		Current           float64 `json:"current"`
0000000000000000000000000000000000000000;;		Average           float64 `json:"average"`
0000000000000000000000000000000000000000;;		averageSquare     float64
0000000000000000000000000000000000000000;;		StandardDeviation float64 `json:"standardDeviation"`
0000000000000000000000000000000000000000;;		Minimum           float64 `json:"minimum"`
0000000000000000000000000000000000000000;;		Maximum           float64 `json:"maximum"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CountsStats encapsulates raft statistics.
0000000000000000000000000000000000000000;;	type CountsStats struct {
0000000000000000000000000000000000000000;;		Fail    uint64 `json:"fail"`
0000000000000000000000000000000000000000;;		Success uint64 `json:"success"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Succ updates the FollowerStats with a successful send
0000000000000000000000000000000000000000;;	func (fs *FollowerStats) Succ(d time.Duration) {
0000000000000000000000000000000000000000;;		fs.Lock()
0000000000000000000000000000000000000000;;		defer fs.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		total := float64(fs.Counts.Success) * fs.Latency.Average
0000000000000000000000000000000000000000;;		totalSquare := float64(fs.Counts.Success) * fs.Latency.averageSquare
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fs.Counts.Success++
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fs.Latency.Current = float64(d) / (1000000.0)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if fs.Latency.Current > fs.Latency.Maximum {
0000000000000000000000000000000000000000;;			fs.Latency.Maximum = fs.Latency.Current
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if fs.Latency.Current < fs.Latency.Minimum {
0000000000000000000000000000000000000000;;			fs.Latency.Minimum = fs.Latency.Current
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fs.Latency.Average = (total + fs.Latency.Current) / float64(fs.Counts.Success)
0000000000000000000000000000000000000000;;		fs.Latency.averageSquare = (totalSquare + fs.Latency.Current*fs.Latency.Current) / float64(fs.Counts.Success)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// sdv = sqrt(avg(x^2) - avg(x)^2)
0000000000000000000000000000000000000000;;		fs.Latency.StandardDeviation = math.Sqrt(fs.Latency.averageSquare - fs.Latency.Average*fs.Latency.Average)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fail updates the FollowerStats with an unsuccessful send
0000000000000000000000000000000000000000;;	func (fs *FollowerStats) Fail() {
0000000000000000000000000000000000000000;;		fs.Lock()
0000000000000000000000000000000000000000;;		defer fs.Unlock()
0000000000000000000000000000000000000000;;		fs.Counts.Fail++
0000000000000000000000000000000000000000;;	}
