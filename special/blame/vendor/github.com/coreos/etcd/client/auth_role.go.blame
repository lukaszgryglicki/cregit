0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/coreos/etcd/client/auth_role.go[Godeps/_workspace/src/github.com/coreos/etcd/client/auth_role.go][vendor/github.com/coreos/etcd/client/auth_role.go];	
0000000000000000000000000000000000000000;;	package client
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Role struct {
0000000000000000000000000000000000000000;;		Role        string       `json:"role"`
0000000000000000000000000000000000000000;;		Permissions Permissions  `json:"permissions"`
0000000000000000000000000000000000000000;;		Grant       *Permissions `json:"grant,omitempty"`
0000000000000000000000000000000000000000;;		Revoke      *Permissions `json:"revoke,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Permissions struct {
0000000000000000000000000000000000000000;;		KV rwPermission `json:"kv"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type rwPermission struct {
0000000000000000000000000000000000000000;;		Read  []string `json:"read"`
0000000000000000000000000000000000000000;;		Write []string `json:"write"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PermissionType int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		ReadPermission PermissionType = iota
0000000000000000000000000000000000000000;;		WritePermission
0000000000000000000000000000000000000000;;		ReadWritePermission
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewAuthRoleAPI constructs a new AuthRoleAPI that uses HTTP to
0000000000000000000000000000000000000000;;	// interact with etcd's role creation and modification features.
0000000000000000000000000000000000000000;;	func NewAuthRoleAPI(c Client) AuthRoleAPI {
0000000000000000000000000000000000000000;;		return &httpAuthRoleAPI{
0000000000000000000000000000000000000000;;			client: c,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AuthRoleAPI interface {
0000000000000000000000000000000000000000;;		// AddRole adds a role.
0000000000000000000000000000000000000000;;		AddRole(ctx context.Context, role string) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RemoveRole removes a role.
0000000000000000000000000000000000000000;;		RemoveRole(ctx context.Context, role string) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// GetRole retrieves role details.
0000000000000000000000000000000000000000;;		GetRole(ctx context.Context, role string) (*Role, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// GrantRoleKV grants a role some permission prefixes for the KV store.
0000000000000000000000000000000000000000;;		GrantRoleKV(ctx context.Context, role string, prefixes []string, permType PermissionType) (*Role, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RevokeRoleKV revokes some permission prefixes for a role on the KV store.
0000000000000000000000000000000000000000;;		RevokeRoleKV(ctx context.Context, role string, prefixes []string, permType PermissionType) (*Role, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ListRoles lists roles.
0000000000000000000000000000000000000000;;		ListRoles(ctx context.Context) ([]string, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type httpAuthRoleAPI struct {
0000000000000000000000000000000000000000;;		client httpClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type authRoleAPIAction struct {
0000000000000000000000000000000000000000;;		verb string
0000000000000000000000000000000000000000;;		name string
0000000000000000000000000000000000000000;;		role *Role
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type authRoleAPIList struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (list *authRoleAPIList) HTTPRequest(ep url.URL) *http.Request {
0000000000000000000000000000000000000000;;		u := v2AuthURL(ep, "roles", "")
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", u.String(), nil)
0000000000000000000000000000000000000000;;		req.Header.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		return req
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l *authRoleAPIAction) HTTPRequest(ep url.URL) *http.Request {
0000000000000000000000000000000000000000;;		u := v2AuthURL(ep, "roles", l.name)
0000000000000000000000000000000000000000;;		if l.role == nil {
0000000000000000000000000000000000000000;;			req, _ := http.NewRequest(l.verb, u.String(), nil)
0000000000000000000000000000000000000000;;			return req
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		b, err := json.Marshal(l.role)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		body := bytes.NewReader(b)
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest(l.verb, u.String(), body)
0000000000000000000000000000000000000000;;		req.Header.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		return req
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *httpAuthRoleAPI) ListRoles(ctx context.Context) ([]string, error) {
0000000000000000000000000000000000000000;;		resp, body, err := r.client.Do(ctx, &authRoleAPIList{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err = assertStatusCode(resp.StatusCode, http.StatusOK); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var roleList struct {
0000000000000000000000000000000000000000;;			Roles []Role `json:"roles"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err = json.Unmarshal(body, &roleList); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := make([]string, 0, len(roleList.Roles))
0000000000000000000000000000000000000000;;		for _, r := range roleList.Roles {
0000000000000000000000000000000000000000;;			ret = append(ret, r.Role)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *httpAuthRoleAPI) AddRole(ctx context.Context, rolename string) error {
0000000000000000000000000000000000000000;;		role := &Role{
0000000000000000000000000000000000000000;;			Role: rolename,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return r.addRemoveRole(ctx, &authRoleAPIAction{
0000000000000000000000000000000000000000;;			verb: "PUT",
0000000000000000000000000000000000000000;;			name: rolename,
0000000000000000000000000000000000000000;;			role: role,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *httpAuthRoleAPI) RemoveRole(ctx context.Context, rolename string) error {
0000000000000000000000000000000000000000;;		return r.addRemoveRole(ctx, &authRoleAPIAction{
0000000000000000000000000000000000000000;;			verb: "DELETE",
0000000000000000000000000000000000000000;;			name: rolename,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *httpAuthRoleAPI) addRemoveRole(ctx context.Context, req *authRoleAPIAction) error {
0000000000000000000000000000000000000000;;		resp, body, err := r.client.Do(ctx, req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := assertStatusCode(resp.StatusCode, http.StatusOK, http.StatusCreated); err != nil {
0000000000000000000000000000000000000000;;			var sec authError
0000000000000000000000000000000000000000;;			err := json.Unmarshal(body, &sec)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return sec
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *httpAuthRoleAPI) GetRole(ctx context.Context, rolename string) (*Role, error) {
0000000000000000000000000000000000000000;;		return r.modRole(ctx, &authRoleAPIAction{
0000000000000000000000000000000000000000;;			verb: "GET",
0000000000000000000000000000000000000000;;			name: rolename,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func buildRWPermission(prefixes []string, permType PermissionType) rwPermission {
0000000000000000000000000000000000000000;;		var out rwPermission
0000000000000000000000000000000000000000;;		switch permType {
0000000000000000000000000000000000000000;;		case ReadPermission:
0000000000000000000000000000000000000000;;			out.Read = prefixes
0000000000000000000000000000000000000000;;		case WritePermission:
0000000000000000000000000000000000000000;;			out.Write = prefixes
0000000000000000000000000000000000000000;;		case ReadWritePermission:
0000000000000000000000000000000000000000;;			out.Read = prefixes
0000000000000000000000000000000000000000;;			out.Write = prefixes
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return out
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *httpAuthRoleAPI) GrantRoleKV(ctx context.Context, rolename string, prefixes []string, permType PermissionType) (*Role, error) {
0000000000000000000000000000000000000000;;		rwp := buildRWPermission(prefixes, permType)
0000000000000000000000000000000000000000;;		role := &Role{
0000000000000000000000000000000000000000;;			Role: rolename,
0000000000000000000000000000000000000000;;			Grant: &Permissions{
0000000000000000000000000000000000000000;;				KV: rwp,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return r.modRole(ctx, &authRoleAPIAction{
0000000000000000000000000000000000000000;;			verb: "PUT",
0000000000000000000000000000000000000000;;			name: rolename,
0000000000000000000000000000000000000000;;			role: role,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *httpAuthRoleAPI) RevokeRoleKV(ctx context.Context, rolename string, prefixes []string, permType PermissionType) (*Role, error) {
0000000000000000000000000000000000000000;;		rwp := buildRWPermission(prefixes, permType)
0000000000000000000000000000000000000000;;		role := &Role{
0000000000000000000000000000000000000000;;			Role: rolename,
0000000000000000000000000000000000000000;;			Revoke: &Permissions{
0000000000000000000000000000000000000000;;				KV: rwp,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return r.modRole(ctx, &authRoleAPIAction{
0000000000000000000000000000000000000000;;			verb: "PUT",
0000000000000000000000000000000000000000;;			name: rolename,
0000000000000000000000000000000000000000;;			role: role,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *httpAuthRoleAPI) modRole(ctx context.Context, req *authRoleAPIAction) (*Role, error) {
0000000000000000000000000000000000000000;;		resp, body, err := r.client.Do(ctx, req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err = assertStatusCode(resp.StatusCode, http.StatusOK); err != nil {
0000000000000000000000000000000000000000;;			var sec authError
0000000000000000000000000000000000000000;;			err = json.Unmarshal(body, &sec)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, sec
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var role Role
0000000000000000000000000000000000000000;;		if err = json.Unmarshal(body, &role); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &role, nil
0000000000000000000000000000000000000000;;	}
