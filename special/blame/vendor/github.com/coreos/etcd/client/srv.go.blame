0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/coreos/etcd/client/srv.go[Godeps/_workspace/src/github.com/coreos/etcd/client/srv.go][vendor/github.com/coreos/etcd/client/srv.go];	
0000000000000000000000000000000000000000;;	package client
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		// indirection for testing
0000000000000000000000000000000000000000;;		lookupSRV = net.LookupSRV
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type srvDiscover struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewSRVDiscover constructs a new Discoverer that uses the stdlib to lookup SRV records.
0000000000000000000000000000000000000000;;	func NewSRVDiscover() Discoverer {
0000000000000000000000000000000000000000;;		return &srvDiscover{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Discover looks up the etcd servers for the domain.
0000000000000000000000000000000000000000;;	func (d *srvDiscover) Discover(domain string) ([]string, error) {
0000000000000000000000000000000000000000;;		var urls []*url.URL
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		updateURLs := func(service, scheme string) error {
0000000000000000000000000000000000000000;;			_, addrs, err := lookupSRV(service, "tcp", domain)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for _, srv := range addrs {
0000000000000000000000000000000000000000;;				urls = append(urls, &url.URL{
0000000000000000000000000000000000000000;;					Scheme: scheme,
0000000000000000000000000000000000000000;;					Host:   net.JoinHostPort(srv.Target, fmt.Sprintf("%d", srv.Port)),
0000000000000000000000000000000000000000;;				})
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errHTTPS := updateURLs("etcd-client-ssl", "https")
0000000000000000000000000000000000000000;;		errHTTP := updateURLs("etcd-client", "http")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if errHTTPS != nil && errHTTP != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("dns lookup errors: %s and %s", errHTTPS, errHTTP)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		endpoints := make([]string, len(urls))
0000000000000000000000000000000000000000;;		for i := range urls {
0000000000000000000000000000000000000000;;			endpoints[i] = urls[i].String()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return endpoints, nil
0000000000000000000000000000000000000000;;	}
