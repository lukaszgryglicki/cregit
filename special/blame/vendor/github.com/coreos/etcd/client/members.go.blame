0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/coreos/etcd/client/members.go[Godeps/_workspace/src/github.com/coreos/etcd/client/members.go][vendor/github.com/coreos/etcd/client/members.go];	
0000000000000000000000000000000000000000;;	package client
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/pkg/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		defaultV2MembersPrefix = "/v2/members"
0000000000000000000000000000000000000000;;		defaultLeaderSuffix    = "/leader"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Member struct {
0000000000000000000000000000000000000000;;		// ID is the unique identifier of this Member.
0000000000000000000000000000000000000000;;		ID string `json:"id"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Name is a human-readable, non-unique identifier of this Member.
0000000000000000000000000000000000000000;;		Name string `json:"name"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// PeerURLs represents the HTTP(S) endpoints this Member uses to
0000000000000000000000000000000000000000;;		// participate in etcd's consensus protocol.
0000000000000000000000000000000000000000;;		PeerURLs []string `json:"peerURLs"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ClientURLs represents the HTTP(S) endpoints on which this Member
0000000000000000000000000000000000000000;;		// serves it's client-facing APIs.
0000000000000000000000000000000000000000;;		ClientURLs []string `json:"clientURLs"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type memberCollection []Member
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *memberCollection) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		d := struct {
0000000000000000000000000000000000000000;;			Members []Member
0000000000000000000000000000000000000000;;		}{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &d); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if d.Members == nil {
0000000000000000000000000000000000000000;;			*c = make([]Member, 0)
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		*c = d.Members
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type memberCreateOrUpdateRequest struct {
0000000000000000000000000000000000000000;;		PeerURLs types.URLs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *memberCreateOrUpdateRequest) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		s := struct {
0000000000000000000000000000000000000000;;			PeerURLs []string `json:"peerURLs"`
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			PeerURLs: make([]string, len(m.PeerURLs)),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, u := range m.PeerURLs {
0000000000000000000000000000000000000000;;			s.PeerURLs[i] = u.String()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return json.Marshal(&s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewMembersAPI constructs a new MembersAPI that uses HTTP to
0000000000000000000000000000000000000000;;	// interact with etcd's membership API.
0000000000000000000000000000000000000000;;	func NewMembersAPI(c Client) MembersAPI {
0000000000000000000000000000000000000000;;		return &httpMembersAPI{
0000000000000000000000000000000000000000;;			client: c,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MembersAPI interface {
0000000000000000000000000000000000000000;;		// List enumerates the current cluster membership.
0000000000000000000000000000000000000000;;		List(ctx context.Context) ([]Member, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Add instructs etcd to accept a new Member into the cluster.
0000000000000000000000000000000000000000;;		Add(ctx context.Context, peerURL string) (*Member, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Remove demotes an existing Member out of the cluster.
0000000000000000000000000000000000000000;;		Remove(ctx context.Context, mID string) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Update instructs etcd to update an existing Member in the cluster.
0000000000000000000000000000000000000000;;		Update(ctx context.Context, mID string, peerURLs []string) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Leader gets current leader of the cluster
0000000000000000000000000000000000000000;;		Leader(ctx context.Context) (*Member, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type httpMembersAPI struct {
0000000000000000000000000000000000000000;;		client httpClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *httpMembersAPI) List(ctx context.Context) ([]Member, error) {
0000000000000000000000000000000000000000;;		req := &membersAPIActionList{}
0000000000000000000000000000000000000000;;		resp, body, err := m.client.Do(ctx, req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := assertStatusCode(resp.StatusCode, http.StatusOK); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var mCollection memberCollection
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(body, &mCollection); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return []Member(mCollection), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *httpMembersAPI) Add(ctx context.Context, peerURL string) (*Member, error) {
0000000000000000000000000000000000000000;;		urls, err := types.NewURLs([]string{peerURL})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req := &membersAPIActionAdd{peerURLs: urls}
0000000000000000000000000000000000000000;;		resp, body, err := m.client.Do(ctx, req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := assertStatusCode(resp.StatusCode, http.StatusCreated, http.StatusConflict); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if resp.StatusCode != http.StatusCreated {
0000000000000000000000000000000000000000;;			var merr membersError
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(body, &merr); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, merr
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var memb Member
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(body, &memb); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &memb, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *httpMembersAPI) Update(ctx context.Context, memberID string, peerURLs []string) error {
0000000000000000000000000000000000000000;;		urls, err := types.NewURLs(peerURLs)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req := &membersAPIActionUpdate{peerURLs: urls, memberID: memberID}
0000000000000000000000000000000000000000;;		resp, body, err := m.client.Do(ctx, req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := assertStatusCode(resp.StatusCode, http.StatusNoContent, http.StatusNotFound, http.StatusConflict); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if resp.StatusCode != http.StatusNoContent {
0000000000000000000000000000000000000000;;			var merr membersError
0000000000000000000000000000000000000000;;			if err := json.Unmarshal(body, &merr); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return merr
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *httpMembersAPI) Remove(ctx context.Context, memberID string) error {
0000000000000000000000000000000000000000;;		req := &membersAPIActionRemove{memberID: memberID}
0000000000000000000000000000000000000000;;		resp, _, err := m.client.Do(ctx, req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return assertStatusCode(resp.StatusCode, http.StatusNoContent, http.StatusGone)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *httpMembersAPI) Leader(ctx context.Context) (*Member, error) {
0000000000000000000000000000000000000000;;		req := &membersAPIActionLeader{}
0000000000000000000000000000000000000000;;		resp, body, err := m.client.Do(ctx, req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := assertStatusCode(resp.StatusCode, http.StatusOK); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var leader Member
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(body, &leader); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &leader, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type membersAPIActionList struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l *membersAPIActionList) HTTPRequest(ep url.URL) *http.Request {
0000000000000000000000000000000000000000;;		u := v2MembersURL(ep)
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", u.String(), nil)
0000000000000000000000000000000000000000;;		return req
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type membersAPIActionRemove struct {
0000000000000000000000000000000000000000;;		memberID string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *membersAPIActionRemove) HTTPRequest(ep url.URL) *http.Request {
0000000000000000000000000000000000000000;;		u := v2MembersURL(ep)
0000000000000000000000000000000000000000;;		u.Path = path.Join(u.Path, d.memberID)
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("DELETE", u.String(), nil)
0000000000000000000000000000000000000000;;		return req
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type membersAPIActionAdd struct {
0000000000000000000000000000000000000000;;		peerURLs types.URLs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *membersAPIActionAdd) HTTPRequest(ep url.URL) *http.Request {
0000000000000000000000000000000000000000;;		u := v2MembersURL(ep)
0000000000000000000000000000000000000000;;		m := memberCreateOrUpdateRequest{PeerURLs: a.peerURLs}
0000000000000000000000000000000000000000;;		b, _ := json.Marshal(&m)
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("POST", u.String(), bytes.NewReader(b))
0000000000000000000000000000000000000000;;		req.Header.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		return req
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type membersAPIActionUpdate struct {
0000000000000000000000000000000000000000;;		memberID string
0000000000000000000000000000000000000000;;		peerURLs types.URLs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *membersAPIActionUpdate) HTTPRequest(ep url.URL) *http.Request {
0000000000000000000000000000000000000000;;		u := v2MembersURL(ep)
0000000000000000000000000000000000000000;;		m := memberCreateOrUpdateRequest{PeerURLs: a.peerURLs}
0000000000000000000000000000000000000000;;		u.Path = path.Join(u.Path, a.memberID)
0000000000000000000000000000000000000000;;		b, _ := json.Marshal(&m)
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("PUT", u.String(), bytes.NewReader(b))
0000000000000000000000000000000000000000;;		req.Header.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		return req
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func assertStatusCode(got int, want ...int) (err error) {
0000000000000000000000000000000000000000;;		for _, w := range want {
0000000000000000000000000000000000000000;;			if w == got {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fmt.Errorf("unexpected status code %d", got)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type membersAPIActionLeader struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l *membersAPIActionLeader) HTTPRequest(ep url.URL) *http.Request {
0000000000000000000000000000000000000000;;		u := v2MembersURL(ep)
0000000000000000000000000000000000000000;;		u.Path = path.Join(u.Path, defaultLeaderSuffix)
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", u.String(), nil)
0000000000000000000000000000000000000000;;		return req
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// v2MembersURL add the necessary path to the provided endpoint
0000000000000000000000000000000000000000;;	// to route requests to the default v2 members API.
0000000000000000000000000000000000000000;;	func v2MembersURL(ep url.URL) *url.URL {
0000000000000000000000000000000000000000;;		ep.Path = path.Join(ep.Path, defaultV2MembersPrefix)
0000000000000000000000000000000000000000;;		return &ep
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type membersError struct {
0000000000000000000000000000000000000000;;		Message string `json:"message"`
0000000000000000000000000000000000000000;;		Code    int    `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e membersError) Error() string {
0000000000000000000000000000000000000000;;		return e.Message
0000000000000000000000000000000000000000;;	}
