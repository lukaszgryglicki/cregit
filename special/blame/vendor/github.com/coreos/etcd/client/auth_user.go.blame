0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/coreos/etcd/client/auth_user.go[Godeps/_workspace/src/github.com/coreos/etcd/client/auth_user.go][vendor/github.com/coreos/etcd/client/auth_user.go];	
0000000000000000000000000000000000000000;;	package client
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		defaultV2AuthPrefix = "/v2/auth"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type User struct {
0000000000000000000000000000000000000000;;		User     string   `json:"user"`
0000000000000000000000000000000000000000;;		Password string   `json:"password,omitempty"`
0000000000000000000000000000000000000000;;		Roles    []string `json:"roles"`
0000000000000000000000000000000000000000;;		Grant    []string `json:"grant,omitempty"`
0000000000000000000000000000000000000000;;		Revoke   []string `json:"revoke,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// userListEntry is the user representation given by the server for ListUsers
0000000000000000000000000000000000000000;;	type userListEntry struct {
0000000000000000000000000000000000000000;;		User  string `json:"user"`
0000000000000000000000000000000000000000;;		Roles []Role `json:"roles"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UserRoles struct {
0000000000000000000000000000000000000000;;		User  string `json:"user"`
0000000000000000000000000000000000000000;;		Roles []Role `json:"roles"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func v2AuthURL(ep url.URL, action string, name string) *url.URL {
0000000000000000000000000000000000000000;;		if name != "" {
0000000000000000000000000000000000000000;;			ep.Path = path.Join(ep.Path, defaultV2AuthPrefix, action, name)
0000000000000000000000000000000000000000;;			return &ep
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ep.Path = path.Join(ep.Path, defaultV2AuthPrefix, action)
0000000000000000000000000000000000000000;;		return &ep
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewAuthAPI constructs a new AuthAPI that uses HTTP to
0000000000000000000000000000000000000000;;	// interact with etcd's general auth features.
0000000000000000000000000000000000000000;;	func NewAuthAPI(c Client) AuthAPI {
0000000000000000000000000000000000000000;;		return &httpAuthAPI{
0000000000000000000000000000000000000000;;			client: c,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AuthAPI interface {
0000000000000000000000000000000000000000;;		// Enable auth.
0000000000000000000000000000000000000000;;		Enable(ctx context.Context) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Disable auth.
0000000000000000000000000000000000000000;;		Disable(ctx context.Context) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type httpAuthAPI struct {
0000000000000000000000000000000000000000;;		client httpClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *httpAuthAPI) Enable(ctx context.Context) error {
0000000000000000000000000000000000000000;;		return s.enableDisable(ctx, &authAPIAction{"PUT"})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *httpAuthAPI) Disable(ctx context.Context) error {
0000000000000000000000000000000000000000;;		return s.enableDisable(ctx, &authAPIAction{"DELETE"})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *httpAuthAPI) enableDisable(ctx context.Context, req httpAction) error {
0000000000000000000000000000000000000000;;		resp, body, err := s.client.Do(ctx, req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err = assertStatusCode(resp.StatusCode, http.StatusOK, http.StatusCreated); err != nil {
0000000000000000000000000000000000000000;;			var sec authError
0000000000000000000000000000000000000000;;			err = json.Unmarshal(body, &sec)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return sec
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type authAPIAction struct {
0000000000000000000000000000000000000000;;		verb string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l *authAPIAction) HTTPRequest(ep url.URL) *http.Request {
0000000000000000000000000000000000000000;;		u := v2AuthURL(ep, "enable", "")
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest(l.verb, u.String(), nil)
0000000000000000000000000000000000000000;;		return req
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type authError struct {
0000000000000000000000000000000000000000;;		Message string `json:"message"`
0000000000000000000000000000000000000000;;		Code    int    `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e authError) Error() string {
0000000000000000000000000000000000000000;;		return e.Message
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewAuthUserAPI constructs a new AuthUserAPI that uses HTTP to
0000000000000000000000000000000000000000;;	// interact with etcd's user creation and modification features.
0000000000000000000000000000000000000000;;	func NewAuthUserAPI(c Client) AuthUserAPI {
0000000000000000000000000000000000000000;;		return &httpAuthUserAPI{
0000000000000000000000000000000000000000;;			client: c,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AuthUserAPI interface {
0000000000000000000000000000000000000000;;		// AddUser adds a user.
0000000000000000000000000000000000000000;;		AddUser(ctx context.Context, username string, password string) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RemoveUser removes a user.
0000000000000000000000000000000000000000;;		RemoveUser(ctx context.Context, username string) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// GetUser retrieves user details.
0000000000000000000000000000000000000000;;		GetUser(ctx context.Context, username string) (*User, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// GrantUser grants a user some permission roles.
0000000000000000000000000000000000000000;;		GrantUser(ctx context.Context, username string, roles []string) (*User, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RevokeUser revokes some permission roles from a user.
0000000000000000000000000000000000000000;;		RevokeUser(ctx context.Context, username string, roles []string) (*User, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ChangePassword changes the user's password.
0000000000000000000000000000000000000000;;		ChangePassword(ctx context.Context, username string, password string) (*User, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ListUsers lists the users.
0000000000000000000000000000000000000000;;		ListUsers(ctx context.Context) ([]string, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type httpAuthUserAPI struct {
0000000000000000000000000000000000000000;;		client httpClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type authUserAPIAction struct {
0000000000000000000000000000000000000000;;		verb     string
0000000000000000000000000000000000000000;;		username string
0000000000000000000000000000000000000000;;		user     *User
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type authUserAPIList struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (list *authUserAPIList) HTTPRequest(ep url.URL) *http.Request {
0000000000000000000000000000000000000000;;		u := v2AuthURL(ep, "users", "")
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", u.String(), nil)
0000000000000000000000000000000000000000;;		req.Header.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		return req
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l *authUserAPIAction) HTTPRequest(ep url.URL) *http.Request {
0000000000000000000000000000000000000000;;		u := v2AuthURL(ep, "users", l.username)
0000000000000000000000000000000000000000;;		if l.user == nil {
0000000000000000000000000000000000000000;;			req, _ := http.NewRequest(l.verb, u.String(), nil)
0000000000000000000000000000000000000000;;			return req
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		b, err := json.Marshal(l.user)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		body := bytes.NewReader(b)
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest(l.verb, u.String(), body)
0000000000000000000000000000000000000000;;		req.Header.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		return req
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u *httpAuthUserAPI) ListUsers(ctx context.Context) ([]string, error) {
0000000000000000000000000000000000000000;;		resp, body, err := u.client.Do(ctx, &authUserAPIList{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err = assertStatusCode(resp.StatusCode, http.StatusOK); err != nil {
0000000000000000000000000000000000000000;;			var sec authError
0000000000000000000000000000000000000000;;			err = json.Unmarshal(body, &sec)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, sec
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var userList struct {
0000000000000000000000000000000000000000;;			Users []userListEntry `json:"users"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err = json.Unmarshal(body, &userList); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ret := make([]string, 0, len(userList.Users))
0000000000000000000000000000000000000000;;		for _, u := range userList.Users {
0000000000000000000000000000000000000000;;			ret = append(ret, u.User)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u *httpAuthUserAPI) AddUser(ctx context.Context, username string, password string) error {
0000000000000000000000000000000000000000;;		user := &User{
0000000000000000000000000000000000000000;;			User:     username,
0000000000000000000000000000000000000000;;			Password: password,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u.addRemoveUser(ctx, &authUserAPIAction{
0000000000000000000000000000000000000000;;			verb:     "PUT",
0000000000000000000000000000000000000000;;			username: username,
0000000000000000000000000000000000000000;;			user:     user,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u *httpAuthUserAPI) RemoveUser(ctx context.Context, username string) error {
0000000000000000000000000000000000000000;;		return u.addRemoveUser(ctx, &authUserAPIAction{
0000000000000000000000000000000000000000;;			verb:     "DELETE",
0000000000000000000000000000000000000000;;			username: username,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u *httpAuthUserAPI) addRemoveUser(ctx context.Context, req *authUserAPIAction) error {
0000000000000000000000000000000000000000;;		resp, body, err := u.client.Do(ctx, req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err = assertStatusCode(resp.StatusCode, http.StatusOK, http.StatusCreated); err != nil {
0000000000000000000000000000000000000000;;			var sec authError
0000000000000000000000000000000000000000;;			err = json.Unmarshal(body, &sec)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return sec
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u *httpAuthUserAPI) GetUser(ctx context.Context, username string) (*User, error) {
0000000000000000000000000000000000000000;;		return u.modUser(ctx, &authUserAPIAction{
0000000000000000000000000000000000000000;;			verb:     "GET",
0000000000000000000000000000000000000000;;			username: username,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u *httpAuthUserAPI) GrantUser(ctx context.Context, username string, roles []string) (*User, error) {
0000000000000000000000000000000000000000;;		user := &User{
0000000000000000000000000000000000000000;;			User:  username,
0000000000000000000000000000000000000000;;			Grant: roles,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u.modUser(ctx, &authUserAPIAction{
0000000000000000000000000000000000000000;;			verb:     "PUT",
0000000000000000000000000000000000000000;;			username: username,
0000000000000000000000000000000000000000;;			user:     user,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u *httpAuthUserAPI) RevokeUser(ctx context.Context, username string, roles []string) (*User, error) {
0000000000000000000000000000000000000000;;		user := &User{
0000000000000000000000000000000000000000;;			User:   username,
0000000000000000000000000000000000000000;;			Revoke: roles,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u.modUser(ctx, &authUserAPIAction{
0000000000000000000000000000000000000000;;			verb:     "PUT",
0000000000000000000000000000000000000000;;			username: username,
0000000000000000000000000000000000000000;;			user:     user,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u *httpAuthUserAPI) ChangePassword(ctx context.Context, username string, password string) (*User, error) {
0000000000000000000000000000000000000000;;		user := &User{
0000000000000000000000000000000000000000;;			User:     username,
0000000000000000000000000000000000000000;;			Password: password,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return u.modUser(ctx, &authUserAPIAction{
0000000000000000000000000000000000000000;;			verb:     "PUT",
0000000000000000000000000000000000000000;;			username: username,
0000000000000000000000000000000000000000;;			user:     user,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u *httpAuthUserAPI) modUser(ctx context.Context, req *authUserAPIAction) (*User, error) {
0000000000000000000000000000000000000000;;		resp, body, err := u.client.Do(ctx, req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err = assertStatusCode(resp.StatusCode, http.StatusOK); err != nil {
0000000000000000000000000000000000000000;;			var sec authError
0000000000000000000000000000000000000000;;			err = json.Unmarshal(body, &sec)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, sec
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var user User
0000000000000000000000000000000000000000;;		if err = json.Unmarshal(body, &user); err != nil {
0000000000000000000000000000000000000000;;			var userR UserRoles
0000000000000000000000000000000000000000;;			if urerr := json.Unmarshal(body, &userR); urerr != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			user.User = userR.User
0000000000000000000000000000000000000000;;			for _, r := range userR.Roles {
0000000000000000000000000000000000000000;;				user.Roles = append(user.Roles, r.Role)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &user, nil
0000000000000000000000000000000000000000;;	}
