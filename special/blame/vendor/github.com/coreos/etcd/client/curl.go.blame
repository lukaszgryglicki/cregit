0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/coreos/etcd/client/curl.go[Godeps/_workspace/src/github.com/coreos/etcd/client/curl.go][vendor/github.com/coreos/etcd/client/curl.go];	
0000000000000000000000000000000000000000;;	package client
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		cURLDebug = false
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func EnablecURLDebug() {
0000000000000000000000000000000000000000;;		cURLDebug = true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func DisablecURLDebug() {
0000000000000000000000000000000000000000;;		cURLDebug = false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// printcURL prints the cURL equivalent request to stderr.
0000000000000000000000000000000000000000;;	// It returns an error if the body of the request cannot
0000000000000000000000000000000000000000;;	// be read.
0000000000000000000000000000000000000000;;	// The caller MUST cancel the request if there is an error.
0000000000000000000000000000000000000000;;	func printcURL(req *http.Request) error {
0000000000000000000000000000000000000000;;		if !cURLDebug {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			command string
0000000000000000000000000000000000000000;;			b       []byte
0000000000000000000000000000000000000000;;			err     error
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if req.URL != nil {
0000000000000000000000000000000000000000;;			command = fmt.Sprintf("curl -X %s %s", req.Method, req.URL.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if req.Body != nil {
0000000000000000000000000000000000000000;;			b, err = ioutil.ReadAll(req.Body)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			command += fmt.Sprintf(" -d %q", string(b))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fmt.Fprintf(os.Stderr, "cURL Command: %s\n", command)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// reset body
0000000000000000000000000000000000000000;;		body := bytes.NewBuffer(b)
0000000000000000000000000000000000000000;;		req.Body = ioutil.NopCloser(body)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
