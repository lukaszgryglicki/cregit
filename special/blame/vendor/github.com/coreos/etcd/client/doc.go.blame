0000000000000000000000000000000000000000;;	// Copyright 2015 The etcd Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/coreos/etcd/client/doc.go[Godeps/_workspace/src/github.com/coreos/etcd/client/doc.go][vendor/github.com/coreos/etcd/client/doc.go];	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Package client provides bindings for the etcd APIs.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Create a Config and exchange it for a Client:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		import (
0000000000000000000000000000000000000000;;			"net/http"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"github.com/coreos/etcd/client"
0000000000000000000000000000000000000000;;			"golang.org/x/net/context"
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cfg := client.Config{
0000000000000000000000000000000000000000;;			Endpoints: []string{"http://127.0.0.1:2379"},
0000000000000000000000000000000000000000;;			Transport: DefaultTransport,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		c, err := client.New(cfg)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			// handle error
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Clients are safe for concurrent use by multiple goroutines.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Create a KeysAPI using the Client, then use it to interact with etcd:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		kAPI := client.NewKeysAPI(c)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// create a new key /foo with the value "bar"
0000000000000000000000000000000000000000;;		_, err = kAPI.Create(context.Background(), "/foo", "bar")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			// handle error
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// delete the newly created key only if the value is still "bar"
0000000000000000000000000000000000000000;;		_, err = kAPI.Delete(context.Background(), "/foo", &DeleteOptions{PrevValue: "bar"})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			// handle error
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Use a custom context to set timeouts on your operations:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		import "time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
0000000000000000000000000000000000000000;;		defer cancel()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// set a new key, ignoring it's previous state
0000000000000000000000000000000000000000;;		_, err := kAPI.Set(ctx, "/ping", "pong", nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if err == context.DeadlineExceeded {
0000000000000000000000000000000000000000;;				// request took longer than 5s
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				// handle error
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	package client
