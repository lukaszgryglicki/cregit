0000000000000000000000000000000000000000;;	package http
d9a6899387940336fd1a655128b4b3486f75c7ee;Godeps/_workspace/src/github.com/coreos/go-oidc/http/url.go[Godeps/_workspace/src/github.com/coreos/go-oidc/http/url.go][vendor/github.com/coreos/go-oidc/http/url.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ParseNonEmptyURL checks that a string is a parsable URL which is also not empty
0000000000000000000000000000000000000000;;	// since `url.Parse("")` does not return an error. Must contian a scheme and a host.
0000000000000000000000000000000000000000;;	func ParseNonEmptyURL(u string) (*url.URL, error) {
0000000000000000000000000000000000000000;;		if u == "" {
0000000000000000000000000000000000000000;;			return nil, errors.New("url is empty")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ur, err := url.Parse(u)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if ur.Scheme == "" {
0000000000000000000000000000000000000000;;			return nil, errors.New("url scheme is empty")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if ur.Host == "" {
0000000000000000000000000000000000000000;;			return nil, errors.New("url host is empty")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return ur, nil
0000000000000000000000000000000000000000;;	}
