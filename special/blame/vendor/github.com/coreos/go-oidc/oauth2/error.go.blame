0000000000000000000000000000000000000000;;	package oauth2
d9a6899387940336fd1a655128b4b3486f75c7ee;Godeps/_workspace/src/github.com/coreos/go-oidc/oauth2/error.go[Godeps/_workspace/src/github.com/coreos/go-oidc/oauth2/error.go][vendor/github.com/coreos/go-oidc/oauth2/error.go];	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		ErrorAccessDenied            = "access_denied"
0000000000000000000000000000000000000000;;		ErrorInvalidClient           = "invalid_client"
0000000000000000000000000000000000000000;;		ErrorInvalidGrant            = "invalid_grant"
0000000000000000000000000000000000000000;;		ErrorInvalidRequest          = "invalid_request"
0000000000000000000000000000000000000000;;		ErrorServerError             = "server_error"
0000000000000000000000000000000000000000;;		ErrorUnauthorizedClient      = "unauthorized_client"
0000000000000000000000000000000000000000;;		ErrorUnsupportedGrantType    = "unsupported_grant_type"
0000000000000000000000000000000000000000;;		ErrorUnsupportedResponseType = "unsupported_response_type"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Error struct {
0000000000000000000000000000000000000000;;		Type        string `json:"error"`
0000000000000000000000000000000000000000;;		Description string `json:"error_description,omitempty"`
0000000000000000000000000000000000000000;;		State       string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *Error) Error() string {
0000000000000000000000000000000000000000;;		if e.Description != "" {
0000000000000000000000000000000000000000;;			return e.Type + ": " + e.Description
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return e.Type
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewError(typ string) *Error {
0000000000000000000000000000000000000000;;		return &Error{Type: typ}
0000000000000000000000000000000000000000;;	}
