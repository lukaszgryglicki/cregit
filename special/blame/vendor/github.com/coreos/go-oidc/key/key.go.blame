0000000000000000000000000000000000000000;;	package key
d9a6899387940336fd1a655128b4b3486f75c7ee;Godeps/_workspace/src/github.com/coreos/go-oidc/key/key.go[Godeps/_workspace/src/github.com/coreos/go-oidc/key/key.go][vendor/github.com/coreos/go-oidc/key/key.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"crypto/rand"
0000000000000000000000000000000000000000;;		"crypto/rsa"
0000000000000000000000000000000000000000;;		"encoding/hex"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/coreos/go-oidc/jose"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewPublicKey(jwk jose.JWK) *PublicKey {
0000000000000000000000000000000000000000;;		return &PublicKey{jwk: jwk}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PublicKey struct {
0000000000000000000000000000000000000000;;		jwk jose.JWK
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (k *PublicKey) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		return json.Marshal(&k.jwk)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (k *PublicKey) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		var jwk jose.JWK
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &jwk); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		k.jwk = jwk
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (k *PublicKey) ID() string {
0000000000000000000000000000000000000000;;		return k.jwk.ID
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (k *PublicKey) Verifier() (jose.Verifier, error) {
0000000000000000000000000000000000000000;;		return jose.NewVerifierRSA(k.jwk)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PrivateKey struct {
0000000000000000000000000000000000000000;;		KeyID      string
0000000000000000000000000000000000000000;;		PrivateKey *rsa.PrivateKey
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (k *PrivateKey) ID() string {
0000000000000000000000000000000000000000;;		return k.KeyID
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (k *PrivateKey) Signer() jose.Signer {
0000000000000000000000000000000000000000;;		return jose.NewSignerRSA(k.ID(), *k.PrivateKey)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (k *PrivateKey) JWK() jose.JWK {
0000000000000000000000000000000000000000;;		return jose.JWK{
0000000000000000000000000000000000000000;;			ID:       k.KeyID,
0000000000000000000000000000000000000000;;			Type:     "RSA",
0000000000000000000000000000000000000000;;			Alg:      "RS256",
0000000000000000000000000000000000000000;;			Use:      "sig",
0000000000000000000000000000000000000000;;			Exponent: k.PrivateKey.PublicKey.E,
0000000000000000000000000000000000000000;;			Modulus:  k.PrivateKey.PublicKey.N,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type KeySet interface {
0000000000000000000000000000000000000000;;		ExpiresAt() time.Time
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PublicKeySet struct {
0000000000000000000000000000000000000000;;		keys      []PublicKey
0000000000000000000000000000000000000000;;		index     map[string]*PublicKey
0000000000000000000000000000000000000000;;		expiresAt time.Time
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewPublicKeySet(jwks []jose.JWK, exp time.Time) *PublicKeySet {
0000000000000000000000000000000000000000;;		keys := make([]PublicKey, len(jwks))
0000000000000000000000000000000000000000;;		index := make(map[string]*PublicKey)
0000000000000000000000000000000000000000;;		for i, jwk := range jwks {
0000000000000000000000000000000000000000;;			keys[i] = *NewPublicKey(jwk)
0000000000000000000000000000000000000000;;			index[keys[i].ID()] = &keys[i]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &PublicKeySet{
0000000000000000000000000000000000000000;;			keys:      keys,
0000000000000000000000000000000000000000;;			index:     index,
0000000000000000000000000000000000000000;;			expiresAt: exp,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *PublicKeySet) ExpiresAt() time.Time {
0000000000000000000000000000000000000000;;		return s.expiresAt
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *PublicKeySet) Keys() []PublicKey {
0000000000000000000000000000000000000000;;		return s.keys
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *PublicKeySet) Key(id string) *PublicKey {
0000000000000000000000000000000000000000;;		return s.index[id]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PrivateKeySet struct {
0000000000000000000000000000000000000000;;		keys        []*PrivateKey
0000000000000000000000000000000000000000;;		ActiveKeyID string
0000000000000000000000000000000000000000;;		expiresAt   time.Time
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewPrivateKeySet(keys []*PrivateKey, exp time.Time) *PrivateKeySet {
0000000000000000000000000000000000000000;;		return &PrivateKeySet{
0000000000000000000000000000000000000000;;			keys:        keys,
0000000000000000000000000000000000000000;;			ActiveKeyID: keys[0].ID(),
0000000000000000000000000000000000000000;;			expiresAt:   exp.UTC(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *PrivateKeySet) Keys() []*PrivateKey {
0000000000000000000000000000000000000000;;		return s.keys
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *PrivateKeySet) ExpiresAt() time.Time {
0000000000000000000000000000000000000000;;		return s.expiresAt
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *PrivateKeySet) Active() *PrivateKey {
0000000000000000000000000000000000000000;;		for i, k := range s.keys {
0000000000000000000000000000000000000000;;			if k.ID() == s.ActiveKeyID {
0000000000000000000000000000000000000000;;				return s.keys[i]
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GeneratePrivateKeyFunc func() (*PrivateKey, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GeneratePrivateKey() (*PrivateKey, error) {
0000000000000000000000000000000000000000;;		pk, err := rsa.GenerateKey(rand.Reader, 2048)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		keyID := make([]byte, 20)
0000000000000000000000000000000000000000;;		if _, err := io.ReadFull(rand.Reader, keyID); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		k := PrivateKey{
0000000000000000000000000000000000000000;;			KeyID:      hex.EncodeToString(keyID),
0000000000000000000000000000000000000000;;			PrivateKey: pk,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &k, nil
0000000000000000000000000000000000000000;;	}
