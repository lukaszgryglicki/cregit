0000000000000000000000000000000000000000;;	package key
d9a6899387940336fd1a655128b4b3486f75c7ee;Godeps/_workspace/src/github.com/coreos/go-oidc/key/manager.go[Godeps/_workspace/src/github.com/coreos/go-oidc/key/manager.go][vendor/github.com/coreos/go-oidc/key/manager.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/jonboulle/clockwork"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/coreos/go-oidc/jose"
0000000000000000000000000000000000000000;;		"github.com/coreos/pkg/health"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PrivateKeyManager interface {
0000000000000000000000000000000000000000;;		ExpiresAt() time.Time
0000000000000000000000000000000000000000;;		Signer() (jose.Signer, error)
0000000000000000000000000000000000000000;;		JWKs() ([]jose.JWK, error)
0000000000000000000000000000000000000000;;		PublicKeys() ([]PublicKey, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		WritableKeySetRepo
0000000000000000000000000000000000000000;;		health.Checkable
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewPrivateKeyManager() PrivateKeyManager {
0000000000000000000000000000000000000000;;		return &privateKeyManager{
0000000000000000000000000000000000000000;;			clock: clockwork.NewRealClock(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type privateKeyManager struct {
0000000000000000000000000000000000000000;;		keySet *PrivateKeySet
0000000000000000000000000000000000000000;;		clock  clockwork.Clock
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *privateKeyManager) ExpiresAt() time.Time {
0000000000000000000000000000000000000000;;		if m.keySet == nil {
0000000000000000000000000000000000000000;;			return m.clock.Now().UTC()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return m.keySet.ExpiresAt()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *privateKeyManager) Signer() (jose.Signer, error) {
0000000000000000000000000000000000000000;;		if err := m.Healthy(); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return m.keySet.Active().Signer(), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *privateKeyManager) JWKs() ([]jose.JWK, error) {
0000000000000000000000000000000000000000;;		if err := m.Healthy(); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		keys := m.keySet.Keys()
0000000000000000000000000000000000000000;;		jwks := make([]jose.JWK, len(keys))
0000000000000000000000000000000000000000;;		for i, k := range keys {
0000000000000000000000000000000000000000;;			jwks[i] = k.JWK()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return jwks, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *privateKeyManager) PublicKeys() ([]PublicKey, error) {
0000000000000000000000000000000000000000;;		jwks, err := m.JWKs()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		keys := make([]PublicKey, len(jwks))
0000000000000000000000000000000000000000;;		for i, jwk := range jwks {
0000000000000000000000000000000000000000;;			keys[i] = *NewPublicKey(jwk)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return keys, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *privateKeyManager) Healthy() error {
0000000000000000000000000000000000000000;;		if m.keySet == nil {
0000000000000000000000000000000000000000;;			return errors.New("private key manager uninitialized")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(m.keySet.Keys()) == 0 {
0000000000000000000000000000000000000000;;			return errors.New("private key manager zero keys")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if m.keySet.ExpiresAt().Before(m.clock.Now().UTC()) {
0000000000000000000000000000000000000000;;			return errors.New("private key manager keys expired")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *privateKeyManager) Set(keySet KeySet) error {
0000000000000000000000000000000000000000;;		privKeySet, ok := keySet.(*PrivateKeySet)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return errors.New("unable to cast to PrivateKeySet")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		m.keySet = privKeySet
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
