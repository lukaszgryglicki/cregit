0000000000000000000000000000000000000000;;	package key
d9a6899387940336fd1a655128b4b3486f75c7ee;Godeps/_workspace/src/github.com/coreos/go-oidc/key/repo.go[Godeps/_workspace/src/github.com/coreos/go-oidc/key/repo.go][vendor/github.com/coreos/go-oidc/key/repo.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var ErrorNoKeys = errors.New("no keys found")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type WritableKeySetRepo interface {
0000000000000000000000000000000000000000;;		Set(KeySet) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReadableKeySetRepo interface {
0000000000000000000000000000000000000000;;		Get() (KeySet, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PrivateKeySetRepo interface {
0000000000000000000000000000000000000000;;		WritableKeySetRepo
0000000000000000000000000000000000000000;;		ReadableKeySetRepo
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewPrivateKeySetRepo() PrivateKeySetRepo {
0000000000000000000000000000000000000000;;		return &memPrivateKeySetRepo{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type memPrivateKeySetRepo struct {
0000000000000000000000000000000000000000;;		mu  sync.RWMutex
0000000000000000000000000000000000000000;;		pks PrivateKeySet
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *memPrivateKeySetRepo) Set(ks KeySet) error {
0000000000000000000000000000000000000000;;		pks, ok := ks.(*PrivateKeySet)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return errors.New("unable to cast to PrivateKeySet")
0000000000000000000000000000000000000000;;		} else if pks == nil {
0000000000000000000000000000000000000000;;			return errors.New("nil KeySet")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r.mu.Lock()
0000000000000000000000000000000000000000;;		defer r.mu.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r.pks = *pks
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *memPrivateKeySetRepo) Get() (KeySet, error) {
0000000000000000000000000000000000000000;;		r.mu.RLock()
0000000000000000000000000000000000000000;;		defer r.mu.RUnlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if r.pks.keys == nil {
0000000000000000000000000000000000000000;;			return nil, ErrorNoKeys
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return KeySet(&r.pks), nil
0000000000000000000000000000000000000000;;	}
