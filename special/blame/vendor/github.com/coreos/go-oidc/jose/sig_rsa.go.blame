0000000000000000000000000000000000000000;;	package jose
d9a6899387940336fd1a655128b4b3486f75c7ee;Godeps/_workspace/src/github.com/coreos/go-oidc/jose/sig_rsa.go[Godeps/_workspace/src/github.com/coreos/go-oidc/jose/sig_rsa.go][vendor/github.com/coreos/go-oidc/jose/sig_rsa.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"crypto"
0000000000000000000000000000000000000000;;		"crypto/rand"
0000000000000000000000000000000000000000;;		"crypto/rsa"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VerifierRSA struct {
0000000000000000000000000000000000000000;;		KeyID     string
0000000000000000000000000000000000000000;;		Hash      crypto.Hash
0000000000000000000000000000000000000000;;		PublicKey rsa.PublicKey
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SignerRSA struct {
0000000000000000000000000000000000000000;;		PrivateKey rsa.PrivateKey
0000000000000000000000000000000000000000;;		VerifierRSA
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewVerifierRSA(jwk JWK) (*VerifierRSA, error) {
0000000000000000000000000000000000000000;;		if jwk.Alg != "" && jwk.Alg != "RS256" {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("unsupported key algorithm %q", jwk.Alg)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		v := VerifierRSA{
0000000000000000000000000000000000000000;;			KeyID: jwk.ID,
0000000000000000000000000000000000000000;;			PublicKey: rsa.PublicKey{
0000000000000000000000000000000000000000;;				N: jwk.Modulus,
0000000000000000000000000000000000000000;;				E: jwk.Exponent,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Hash: crypto.SHA256,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &v, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewSignerRSA(kid string, key rsa.PrivateKey) *SignerRSA {
0000000000000000000000000000000000000000;;		return &SignerRSA{
0000000000000000000000000000000000000000;;			PrivateKey: key,
0000000000000000000000000000000000000000;;			VerifierRSA: VerifierRSA{
0000000000000000000000000000000000000000;;				KeyID:     kid,
0000000000000000000000000000000000000000;;				PublicKey: key.PublicKey,
0000000000000000000000000000000000000000;;				Hash:      crypto.SHA256,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v *VerifierRSA) ID() string {
0000000000000000000000000000000000000000;;		return v.KeyID
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v *VerifierRSA) Alg() string {
0000000000000000000000000000000000000000;;		return "RS256"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v *VerifierRSA) Verify(sig []byte, data []byte) error {
0000000000000000000000000000000000000000;;		h := v.Hash.New()
0000000000000000000000000000000000000000;;		h.Write(data)
0000000000000000000000000000000000000000;;		return rsa.VerifyPKCS1v15(&v.PublicKey, v.Hash, h.Sum(nil), sig)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *SignerRSA) Sign(data []byte) ([]byte, error) {
0000000000000000000000000000000000000000;;		h := s.Hash.New()
0000000000000000000000000000000000000000;;		h.Write(data)
0000000000000000000000000000000000000000;;		return rsa.SignPKCS1v15(rand.Reader, &s.PrivateKey, s.Hash, h.Sum(nil))
0000000000000000000000000000000000000000;;	}
