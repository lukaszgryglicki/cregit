0000000000000000000000000000000000000000;;	package jose
d9a6899387940336fd1a655128b4b3486f75c7ee;Godeps/_workspace/src/github.com/coreos/go-oidc/jose/claims.go[Godeps/_workspace/src/github.com/coreos/go-oidc/jose/claims.go][vendor/github.com/coreos/go-oidc/jose/claims.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"math"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Claims map[string]interface{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c Claims) Add(name string, value interface{}) {
0000000000000000000000000000000000000000;;		c[name] = value
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c Claims) StringClaim(name string) (string, bool, error) {
0000000000000000000000000000000000000000;;		cl, ok := c[name]
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return "", false, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		v, ok := cl.(string)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return "", false, fmt.Errorf("unable to parse claim as string: %v", name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return v, true, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c Claims) StringsClaim(name string) ([]string, bool, error) {
0000000000000000000000000000000000000000;;		cl, ok := c[name]
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return nil, false, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if v, ok := cl.([]string); ok {
0000000000000000000000000000000000000000;;			return v, true, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// When unmarshaled, []string will become []interface{}.
0000000000000000000000000000000000000000;;		if v, ok := cl.([]interface{}); ok {
0000000000000000000000000000000000000000;;			var ret []string
0000000000000000000000000000000000000000;;			for _, vv := range v {
0000000000000000000000000000000000000000;;				str, ok := vv.(string)
0000000000000000000000000000000000000000;;				if !ok {
0000000000000000000000000000000000000000;;					return nil, false, fmt.Errorf("unable to parse claim as string array: %v", name)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				ret = append(ret, str)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return ret, true, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil, false, fmt.Errorf("unable to parse claim as string array: %v", name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c Claims) Int64Claim(name string) (int64, bool, error) {
0000000000000000000000000000000000000000;;		cl, ok := c[name]
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return 0, false, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		v, ok := cl.(int64)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			vf, ok := cl.(float64)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				return 0, false, fmt.Errorf("unable to parse claim as int64: %v", name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			v = int64(vf)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return v, true, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c Claims) Float64Claim(name string) (float64, bool, error) {
0000000000000000000000000000000000000000;;		cl, ok := c[name]
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return 0, false, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		v, ok := cl.(float64)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			vi, ok := cl.(int64)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				return 0, false, fmt.Errorf("unable to parse claim as float64: %v", name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			v = float64(vi)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return v, true, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c Claims) TimeClaim(name string) (time.Time, bool, error) {
0000000000000000000000000000000000000000;;		v, ok, err := c.Float64Claim(name)
0000000000000000000000000000000000000000;;		if !ok || err != nil {
0000000000000000000000000000000000000000;;			return time.Time{}, ok, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s := math.Trunc(v)
0000000000000000000000000000000000000000;;		ns := (v - s) * math.Pow(10, 9)
0000000000000000000000000000000000000000;;		return time.Unix(int64(s), int64(ns)).UTC(), true, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func decodeClaims(payload []byte) (Claims, error) {
0000000000000000000000000000000000000000;;		var c Claims
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(payload, &c); err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("malformed JWT claims, unable to decode: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func marshalClaims(c Claims) ([]byte, error) {
0000000000000000000000000000000000000000;;		b, err := json.Marshal(c)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return b, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func encodeClaims(c Claims) (string, error) {
0000000000000000000000000000000000000000;;		b, err := marshalClaims(c)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return encodeSegment(b), nil
0000000000000000000000000000000000000000;;	}
