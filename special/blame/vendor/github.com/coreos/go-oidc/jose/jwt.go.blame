0000000000000000000000000000000000000000;;	package jose
d9a6899387940336fd1a655128b4b3486f75c7ee;Godeps/_workspace/src/github.com/coreos/go-oidc/jose/jwt.go[Godeps/_workspace/src/github.com/coreos/go-oidc/jose/jwt.go][vendor/github.com/coreos/go-oidc/jose/jwt.go];	
0000000000000000000000000000000000000000;;	import "strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type JWT JWS
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ParseJWT(token string) (jwt JWT, err error) {
0000000000000000000000000000000000000000;;		jws, err := ParseJWS(token)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return JWT(jws), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewJWT(header JOSEHeader, claims Claims) (jwt JWT, err error) {
0000000000000000000000000000000000000000;;		jwt = JWT{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		jwt.Header = header
0000000000000000000000000000000000000000;;		jwt.Header[HeaderMediaType] = "JWT"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		claimBytes, err := marshalClaims(claims)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		jwt.Payload = claimBytes
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		eh, err := encodeHeader(header)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		jwt.RawHeader = eh
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ec, err := encodeClaims(claims)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		jwt.RawPayload = ec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (j *JWT) KeyID() (string, bool) {
0000000000000000000000000000000000000000;;		kID, ok := j.Header[HeaderKeyID]
0000000000000000000000000000000000000000;;		return kID, ok
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (j *JWT) Claims() (Claims, error) {
0000000000000000000000000000000000000000;;		return decodeClaims(j.Payload)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Encoded data part of the token which may be signed.
0000000000000000000000000000000000000000;;	func (j *JWT) Data() string {
0000000000000000000000000000000000000000;;		return strings.Join([]string{j.RawHeader, j.RawPayload}, ".")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Full encoded JWT token string in format: header.claims.signature
0000000000000000000000000000000000000000;;	func (j *JWT) Encode() string {
0000000000000000000000000000000000000000;;		d := j.Data()
0000000000000000000000000000000000000000;;		s := encodeSegment(j.Signature)
0000000000000000000000000000000000000000;;		return strings.Join([]string{d, s}, ".")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewSignedJWT(claims Claims, s Signer) (*JWT, error) {
0000000000000000000000000000000000000000;;		header := JOSEHeader{
0000000000000000000000000000000000000000;;			HeaderKeyAlgorithm: s.Alg(),
0000000000000000000000000000000000000000;;			HeaderKeyID:        s.ID(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		jwt, err := NewJWT(header, claims)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		sig, err := s.Sign([]byte(jwt.Data()))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		jwt.Signature = sig
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &jwt, nil
0000000000000000000000000000000000000000;;	}
