0000000000000000000000000000000000000000;;	package jose
d9a6899387940336fd1a655128b4b3486f75c7ee;Godeps/_workspace/src/github.com/coreos/go-oidc/jose/jose.go[Godeps/_workspace/src/github.com/coreos/go-oidc/jose/jose.go][vendor/github.com/coreos/go-oidc/jose/jose.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/base64"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		HeaderMediaType    = "typ"
0000000000000000000000000000000000000000;;		HeaderKeyAlgorithm = "alg"
0000000000000000000000000000000000000000;;		HeaderKeyID        = "kid"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Encryption Algorithm Header Parameter Values for JWS
0000000000000000000000000000000000000000;;		// See: https://tools.ietf.org/html/draft-ietf-jose-json-web-algorithms-40#page-6
0000000000000000000000000000000000000000;;		AlgHS256 = "HS256"
0000000000000000000000000000000000000000;;		AlgHS384 = "HS384"
0000000000000000000000000000000000000000;;		AlgHS512 = "HS512"
0000000000000000000000000000000000000000;;		AlgRS256 = "RS256"
0000000000000000000000000000000000000000;;		AlgRS384 = "RS384"
0000000000000000000000000000000000000000;;		AlgRS512 = "RS512"
0000000000000000000000000000000000000000;;		AlgES256 = "ES256"
0000000000000000000000000000000000000000;;		AlgES384 = "ES384"
0000000000000000000000000000000000000000;;		AlgES512 = "ES512"
0000000000000000000000000000000000000000;;		AlgPS256 = "PS256"
0000000000000000000000000000000000000000;;		AlgPS384 = "PS384"
0000000000000000000000000000000000000000;;		AlgPS512 = "PS512"
0000000000000000000000000000000000000000;;		AlgNone  = "none"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Algorithm Header Parameter Values for JWE
0000000000000000000000000000000000000000;;		// See: https://tools.ietf.org/html/draft-ietf-jose-json-web-algorithms-40#section-4.1
0000000000000000000000000000000000000000;;		AlgRSA15            = "RSA1_5"
0000000000000000000000000000000000000000;;		AlgRSAOAEP          = "RSA-OAEP"
0000000000000000000000000000000000000000;;		AlgRSAOAEP256       = "RSA-OAEP-256"
0000000000000000000000000000000000000000;;		AlgA128KW           = "A128KW"
0000000000000000000000000000000000000000;;		AlgA192KW           = "A192KW"
0000000000000000000000000000000000000000;;		AlgA256KW           = "A256KW"
0000000000000000000000000000000000000000;;		AlgDir              = "dir"
0000000000000000000000000000000000000000;;		AlgECDHES           = "ECDH-ES"
0000000000000000000000000000000000000000;;		AlgECDHESA128KW     = "ECDH-ES+A128KW"
0000000000000000000000000000000000000000;;		AlgECDHESA192KW     = "ECDH-ES+A192KW"
0000000000000000000000000000000000000000;;		AlgECDHESA256KW     = "ECDH-ES+A256KW"
0000000000000000000000000000000000000000;;		AlgA128GCMKW        = "A128GCMKW"
0000000000000000000000000000000000000000;;		AlgA192GCMKW        = "A192GCMKW"
0000000000000000000000000000000000000000;;		AlgA256GCMKW        = "A256GCMKW"
0000000000000000000000000000000000000000;;		AlgPBES2HS256A128KW = "PBES2-HS256+A128KW"
0000000000000000000000000000000000000000;;		AlgPBES2HS384A192KW = "PBES2-HS384+A192KW"
0000000000000000000000000000000000000000;;		AlgPBES2HS512A256KW = "PBES2-HS512+A256KW"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Encryption Algorithm Header Parameter Values for JWE
0000000000000000000000000000000000000000;;		// See: https://tools.ietf.org/html/draft-ietf-jose-json-web-algorithms-40#page-22
0000000000000000000000000000000000000000;;		EncA128CBCHS256 = "A128CBC-HS256"
0000000000000000000000000000000000000000;;		EncA128CBCHS384 = "A128CBC-HS384"
0000000000000000000000000000000000000000;;		EncA256CBCHS512 = "A256CBC-HS512"
0000000000000000000000000000000000000000;;		EncA128GCM      = "A128GCM"
0000000000000000000000000000000000000000;;		EncA192GCM      = "A192GCM"
0000000000000000000000000000000000000000;;		EncA256GCM      = "A256GCM"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type JOSEHeader map[string]string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (j JOSEHeader) Validate() error {
0000000000000000000000000000000000000000;;		if _, exists := j[HeaderKeyAlgorithm]; !exists {
0000000000000000000000000000000000000000;;			return fmt.Errorf("header missing %q parameter", HeaderKeyAlgorithm)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func decodeHeader(seg string) (JOSEHeader, error) {
0000000000000000000000000000000000000000;;		b, err := decodeSegment(seg)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var h JOSEHeader
0000000000000000000000000000000000000000;;		err = json.Unmarshal(b, &h)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return h, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func encodeHeader(h JOSEHeader) (string, error) {
0000000000000000000000000000000000000000;;		b, err := json.Marshal(h)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return encodeSegment(b), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Decode JWT specific base64url encoding with padding stripped
0000000000000000000000000000000000000000;;	func decodeSegment(seg string) ([]byte, error) {
0000000000000000000000000000000000000000;;		if l := len(seg) % 4; l != 0 {
0000000000000000000000000000000000000000;;			seg += strings.Repeat("=", 4-l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return base64.URLEncoding.DecodeString(seg)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Encode JWT specific base64url encoding with padding stripped
0000000000000000000000000000000000000000;;	func encodeSegment(seg []byte) string {
0000000000000000000000000000000000000000;;		return strings.TrimRight(base64.URLEncoding.EncodeToString(seg), "=")
0000000000000000000000000000000000000000;;	}
