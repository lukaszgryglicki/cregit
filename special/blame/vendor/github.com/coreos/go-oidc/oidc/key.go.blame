0000000000000000000000000000000000000000;;	package oidc
d9a6899387940336fd1a655128b4b3486f75c7ee;Godeps/_workspace/src/github.com/coreos/go-oidc/oidc/key.go[Godeps/_workspace/src/github.com/coreos/go-oidc/oidc/key.go][vendor/github.com/coreos/go-oidc/oidc/key.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		phttp "github.com/coreos/go-oidc/http"
0000000000000000000000000000000000000000;;		"github.com/coreos/go-oidc/jose"
0000000000000000000000000000000000000000;;		"github.com/coreos/go-oidc/key"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DefaultPublicKeySetTTL is the default TTL set on the PublicKeySet if no
0000000000000000000000000000000000000000;;	// Cache-Control header is provided by the JWK Set document endpoint.
0000000000000000000000000000000000000000;;	const DefaultPublicKeySetTTL = 24 * time.Hour
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewRemotePublicKeyRepo is responsible for fetching the JWK Set document.
0000000000000000000000000000000000000000;;	func NewRemotePublicKeyRepo(hc phttp.Client, ep string) *remotePublicKeyRepo {
0000000000000000000000000000000000000000;;		return &remotePublicKeyRepo{hc: hc, ep: ep}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type remotePublicKeyRepo struct {
0000000000000000000000000000000000000000;;		hc phttp.Client
0000000000000000000000000000000000000000;;		ep string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get returns a PublicKeySet fetched from the JWK Set document endpoint. A TTL
0000000000000000000000000000000000000000;;	// is set on the Key Set to avoid it having to be re-retrieved for every
0000000000000000000000000000000000000000;;	// encryption event. This TTL is typically controlled by the endpoint returning
0000000000000000000000000000000000000000;;	// a Cache-Control header, but defaults to 24 hours if no Cache-Control header
0000000000000000000000000000000000000000;;	// is found.
0000000000000000000000000000000000000000;;	func (r *remotePublicKeyRepo) Get() (key.KeySet, error) {
0000000000000000000000000000000000000000;;		req, err := http.NewRequest("GET", r.ep, nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := r.hc.Do(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var d struct {
0000000000000000000000000000000000000000;;			Keys []jose.JWK `json:"keys"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(resp.Body).Decode(&d); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(d.Keys) == 0 {
0000000000000000000000000000000000000000;;			return nil, errors.New("zero keys in response")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ttl, ok, err := phttp.Cacheable(resp.Header)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			ttl = DefaultPublicKeySetTTL
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		exp := time.Now().UTC().Add(ttl)
0000000000000000000000000000000000000000;;		ks := key.NewPublicKeySet(d.Keys, exp)
0000000000000000000000000000000000000000;;		return ks, nil
0000000000000000000000000000000000000000;;	}
