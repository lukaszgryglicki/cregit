0000000000000000000000000000000000000000;;	package oidc
d9a6899387940336fd1a655128b4b3486f75c7ee;Godeps/_workspace/src/github.com/coreos/go-oidc/oidc/transport.go[Godeps/_workspace/src/github.com/coreos/go-oidc/oidc/transport.go][vendor/github.com/coreos/go-oidc/oidc/transport.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		phttp "github.com/coreos/go-oidc/http"
0000000000000000000000000000000000000000;;		"github.com/coreos/go-oidc/jose"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TokenRefresher interface {
0000000000000000000000000000000000000000;;		// Verify checks if the provided token is currently valid or not.
0000000000000000000000000000000000000000;;		Verify(jose.JWT) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Refresh attempts to authenticate and retrieve a new token.
0000000000000000000000000000000000000000;;		Refresh() (jose.JWT, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClientCredsTokenRefresher struct {
0000000000000000000000000000000000000000;;		Issuer     string
0000000000000000000000000000000000000000;;		OIDCClient *Client
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ClientCredsTokenRefresher) Verify(jwt jose.JWT) (err error) {
0000000000000000000000000000000000000000;;		_, err = VerifyClientClaims(jwt, c.Issuer)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ClientCredsTokenRefresher) Refresh() (jwt jose.JWT, err error) {
0000000000000000000000000000000000000000;;		if err = c.OIDCClient.Healthy(); err != nil {
0000000000000000000000000000000000000000;;			err = fmt.Errorf("unable to authenticate, unhealthy OIDC client: %v", err)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		jwt, err = c.OIDCClient.ClientCredsToken([]string{"openid"})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			err = fmt.Errorf("unable to verify auth code with issuer: %v", err)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AuthenticatedTransport struct {
0000000000000000000000000000000000000000;;		TokenRefresher
0000000000000000000000000000000000000000;;		http.RoundTripper
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		mu  sync.Mutex
0000000000000000000000000000000000000000;;		jwt jose.JWT
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *AuthenticatedTransport) verifiedJWT() (jose.JWT, error) {
0000000000000000000000000000000000000000;;		t.mu.Lock()
0000000000000000000000000000000000000000;;		defer t.mu.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if t.TokenRefresher.Verify(t.jwt) == nil {
0000000000000000000000000000000000000000;;			return t.jwt, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		jwt, err := t.TokenRefresher.Refresh()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return jose.JWT{}, fmt.Errorf("unable to acquire valid JWT: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		t.jwt = jwt
0000000000000000000000000000000000000000;;		return t.jwt, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetJWT sets the JWT held by the Transport.
0000000000000000000000000000000000000000;;	// This is useful for cases in which you want to set an initial JWT.
0000000000000000000000000000000000000000;;	func (t *AuthenticatedTransport) SetJWT(jwt jose.JWT) {
0000000000000000000000000000000000000000;;		t.mu.Lock()
0000000000000000000000000000000000000000;;		defer t.mu.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		t.jwt = jwt
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *AuthenticatedTransport) RoundTrip(r *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;		jwt, err := t.verifiedJWT()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req := phttp.CopyRequest(r)
0000000000000000000000000000000000000000;;		req.Header.Set("Authorization", fmt.Sprintf("Bearer %s", jwt.Encode()))
0000000000000000000000000000000000000000;;		return t.RoundTripper.RoundTrip(req)
0000000000000000000000000000000000000000;;	}
