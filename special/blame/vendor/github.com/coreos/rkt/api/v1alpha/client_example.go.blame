0000000000000000000000000000000000000000;;	// Copyright 2015 The rkt Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
dc7c0b6b3acdd8722902fab45e555c19bb23653f;Godeps/_workspace/src/github.com/coreos/rkt/api/v1alpha/client_example.go[Godeps/_workspace/src/github.com/coreos/rkt/api/v1alpha/client_example.go][vendor/github.com/coreos/rkt/api/v1alpha/client_example.go];	
0000000000000000000000000000000000000000;;	// +build ignore
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"flag"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/coreos/rkt/api/v1alpha"
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;		"google.golang.org/grpc"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getLogsWithoutFollow(c v1alpha.PublicAPIClient, p *v1alpha.Pod) {
0000000000000000000000000000000000000000;;		if len(p.Apps) == 0 {
0000000000000000000000000000000000000000;;			fmt.Printf("Pod %q has no apps\n", p.Id)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		logsResp, err := c.GetLogs(context.Background(), &v1alpha.GetLogsRequest{
0000000000000000000000000000000000000000;;			PodId:     p.Id,
0000000000000000000000000000000000000000;;			Follow:    false,
0000000000000000000000000000000000000000;;			AppName:   p.Apps[0].Name,
0000000000000000000000000000000000000000;;			SinceTime: time.Now().Add(-time.Second * 5).Unix(),
0000000000000000000000000000000000000000;;			Lines:     10,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			fmt.Println(err)
0000000000000000000000000000000000000000;;			os.Exit(254)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		logsRecvResp, err := logsResp.Recv()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err == io.EOF {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			fmt.Println(err)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, l := range logsRecvResp.Lines {
0000000000000000000000000000000000000000;;			fmt.Println(l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getLogsWithFollow(c v1alpha.PublicAPIClient, p *v1alpha.Pod) {
0000000000000000000000000000000000000000;;		if len(p.Apps) == 0 {
0000000000000000000000000000000000000000;;			fmt.Printf("Pod %q has no apps\n", p.Id)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		logsResp, err := c.GetLogs(context.Background(), &v1alpha.GetLogsRequest{
0000000000000000000000000000000000000000;;			PodId:   p.Id,
0000000000000000000000000000000000000000;;			Follow:  true,
0000000000000000000000000000000000000000;;			AppName: p.Apps[0].Name,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			fmt.Println(err)
0000000000000000000000000000000000000000;;			os.Exit(254)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			logsRecvResp, err := logsResp.Recv()
0000000000000000000000000000000000000000;;			if err == io.EOF {
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				fmt.Println(err)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for _, l := range logsRecvResp.Lines {
0000000000000000000000000000000000000000;;				fmt.Println(l)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func main() {
0000000000000000000000000000000000000000;;		followFlag := flag.Bool("follow", false, "enable 'follow' option on GetLogs")
0000000000000000000000000000000000000000;;		flag.Parse()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		conn, err := grpc.Dial("localhost:15441", grpc.WithInsecure())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			fmt.Println(err)
0000000000000000000000000000000000000000;;			os.Exit(254)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		c := v1alpha.NewPublicAPIClient(conn)
0000000000000000000000000000000000000000;;		defer conn.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// List pods.
0000000000000000000000000000000000000000;;		podResp, err := c.ListPods(context.Background(), &v1alpha.ListPodsRequest{
0000000000000000000000000000000000000000;;			// Specify the request: Fetch and print only running pods and their details.
0000000000000000000000000000000000000000;;			Detail: true,
0000000000000000000000000000000000000000;;			Filters: []*v1alpha.PodFilter{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					States: []v1alpha.PodState{v1alpha.PodState_POD_STATE_RUNNING},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			fmt.Println(err)
0000000000000000000000000000000000000000;;			os.Exit(254)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, p := range podResp.Pods {
0000000000000000000000000000000000000000;;			if *followFlag {
0000000000000000000000000000000000000000;;				fmt.Printf("Pod %q is running. Following logs:\n", p.Id)
0000000000000000000000000000000000000000;;				getLogsWithFollow(c, p)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				fmt.Printf("Pod %q is running.\n", p.Id)
0000000000000000000000000000000000000000;;				getLogsWithoutFollow(c, p)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// List images.
0000000000000000000000000000000000000000;;		imgResp, err := c.ListImages(context.Background(), &v1alpha.ListImagesRequest{
0000000000000000000000000000000000000000;;			// In this request, we fetch the details of images whose names are prefixed with "coreos.com".
0000000000000000000000000000000000000000;;			Detail: true,
0000000000000000000000000000000000000000;;			Filters: []*v1alpha.ImageFilter{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Prefixes: []string{"coreos.com"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			fmt.Println(err)
0000000000000000000000000000000000000000;;			os.Exit(254)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, im := range imgResp.Images {
0000000000000000000000000000000000000000;;			fmt.Printf("Found image %q\n", im.Name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
