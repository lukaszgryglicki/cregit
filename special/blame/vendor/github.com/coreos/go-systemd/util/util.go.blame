0000000000000000000000000000000000000000;;	// Copyright 2015 CoreOS, Inc.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
d1c42c1e3fb3b408449f892c0d575bb4d9d885bd;Godeps/_workspace/src/github.com/google/cadvisor/utils/fs/mockfs/fakefile.go[Godeps/_workspace/src/github.com/google/cadvisor/utils/fs/mockfs/fakefile.go][vendor/github.com/coreos/go-systemd/util/util.go];	
0000000000000000000000000000000000000000;;	// Package util contains utility functions related to systemd that applications
0000000000000000000000000000000000000000;;	// can use to check things like whether systemd is running.  Note that some of
0000000000000000000000000000000000000000;;	// these functions attempt to manually load systemd libraries at runtime rather
0000000000000000000000000000000000000000;;	// than linking against them.
0000000000000000000000000000000000000000;;	package util
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		ErrNoCGO = fmt.Errorf("go-systemd built with CGO disabled")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetRunningSlice attempts to retrieve the name of the systemd slice in which
0000000000000000000000000000000000000000;;	// the current process is running.
0000000000000000000000000000000000000000;;	// This function is a wrapper around the libsystemd C library; if it cannot be
0000000000000000000000000000000000000000;;	// opened, an error is returned.
0000000000000000000000000000000000000000;;	func GetRunningSlice() (string, error) {
0000000000000000000000000000000000000000;;		return getRunningSlice()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RunningFromSystemService tries to detect whether the current process has
0000000000000000000000000000000000000000;;	// been invoked from a system service. The condition for this is whether the
0000000000000000000000000000000000000000;;	// process is _not_ a user process. User processes are those running in session
0000000000000000000000000000000000000000;;	// scopes or under per-user `systemd --user` instances.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// To avoid false positives on systems without `pam_systemd` (which is
0000000000000000000000000000000000000000;;	// responsible for creating user sessions), this function also uses a heuristic
0000000000000000000000000000000000000000;;	// to detect whether it's being invoked from a session leader process. This is
0000000000000000000000000000000000000000;;	// the case if the current process is executed directly from a service file
0000000000000000000000000000000000000000;;	// (e.g. with `ExecStart=/this/cmd`). Note that this heuristic will fail if the
0000000000000000000000000000000000000000;;	// command is instead launched in a subshell or similar so that it is not
0000000000000000000000000000000000000000;;	// session leader (e.g. `ExecStart=/bin/bash -c "/this/cmd"`)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This function is a wrapper around the libsystemd C library; if this is
0000000000000000000000000000000000000000;;	// unable to successfully open a handle to the library for any reason (e.g. it
0000000000000000000000000000000000000000;;	// cannot be found), an error will be returned.
0000000000000000000000000000000000000000;;	func RunningFromSystemService() (bool, error) {
0000000000000000000000000000000000000000;;		return runningFromSystemService()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CurrentUnitName attempts to retrieve the name of the systemd system unit
0000000000000000000000000000000000000000;;	// from which the calling process has been invoked. It wraps the systemd
0000000000000000000000000000000000000000;;	// `sd_pid_get_unit` call, with the same caveat: for processes not part of a
0000000000000000000000000000000000000000;;	// systemd system unit, this function will return an error.
0000000000000000000000000000000000000000;;	func CurrentUnitName() (string, error) {
0000000000000000000000000000000000000000;;		return currentUnitName()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsRunningSystemd checks whether the host was booted with systemd as its init
0000000000000000000000000000000000000000;;	// system. This functions similarly to systemd's `sd_booted(3)`: internally, it
0000000000000000000000000000000000000000;;	// checks whether /run/systemd/system/ exists and is a directory.
0000000000000000000000000000000000000000;;	// http://www.freedesktop.org/software/systemd/man/sd_booted.html
0000000000000000000000000000000000000000;;	func IsRunningSystemd() bool {
0000000000000000000000000000000000000000;;		fi, err := os.Lstat("/run/systemd/system")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fi.IsDir()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetMachineID returns a host's 128-bit machine ID as a string. This functions
0000000000000000000000000000000000000000;;	// similarly to systemd's `sd_id128_get_machine`: internally, it simply reads
0000000000000000000000000000000000000000;;	// the contents of /etc/machine-id
0000000000000000000000000000000000000000;;	// http://www.freedesktop.org/software/systemd/man/sd_id128_get_machine.html
0000000000000000000000000000000000000000;;	func GetMachineID() (string, error) {
0000000000000000000000000000000000000000;;		machineID, err := ioutil.ReadFile("/etc/machine-id")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("failed to read /etc/machine-id: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return strings.TrimSpace(string(machineID)), nil
0000000000000000000000000000000000000000;;	}
