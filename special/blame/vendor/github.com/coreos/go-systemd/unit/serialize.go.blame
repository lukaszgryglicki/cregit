0000000000000000000000000000000000000000;;	// Copyright 2015 CoreOS, Inc.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
8d973c48ce204bda083f5a578278a9cd3743f879;Godeps/_workspace/src/github.com/coreos/go-systemd/unit/serialize.go[Godeps/_workspace/src/github.com/coreos/go-systemd/unit/serialize.go][vendor/github.com/coreos/go-systemd/unit/serialize.go];	
0000000000000000000000000000000000000000;;	package unit
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Serialize encodes all of the given UnitOption objects into a
0000000000000000000000000000000000000000;;	// unit file. When serialized the options are sorted in their
0000000000000000000000000000000000000000;;	// supplied order but grouped by section.
0000000000000000000000000000000000000000;;	func Serialize(opts []*UnitOption) io.Reader {
0000000000000000000000000000000000000000;;		var buf bytes.Buffer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(opts) == 0 {
0000000000000000000000000000000000000000;;			return &buf
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Index of sections -> ordered options
0000000000000000000000000000000000000000;;		idx := map[string][]*UnitOption{}
0000000000000000000000000000000000000000;;		// Separately preserve order in which sections were seen
0000000000000000000000000000000000000000;;		sections := []string{}
0000000000000000000000000000000000000000;;		for _, opt := range opts {
0000000000000000000000000000000000000000;;			sec := opt.Section
0000000000000000000000000000000000000000;;			if _, ok := idx[sec]; !ok {
0000000000000000000000000000000000000000;;				sections = append(sections, sec)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			idx[sec] = append(idx[sec], opt)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, sect := range sections {
0000000000000000000000000000000000000000;;			writeSectionHeader(&buf, sect)
0000000000000000000000000000000000000000;;			writeNewline(&buf)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			opts := idx[sect]
0000000000000000000000000000000000000000;;			for _, opt := range opts {
0000000000000000000000000000000000000000;;				writeOption(&buf, opt)
0000000000000000000000000000000000000000;;				writeNewline(&buf)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if i < len(sections)-1 {
0000000000000000000000000000000000000000;;				writeNewline(&buf)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &buf
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func writeNewline(buf *bytes.Buffer) {
0000000000000000000000000000000000000000;;		buf.WriteRune('\n')
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func writeSectionHeader(buf *bytes.Buffer, section string) {
0000000000000000000000000000000000000000;;		buf.WriteRune('[')
0000000000000000000000000000000000000000;;		buf.WriteString(section)
0000000000000000000000000000000000000000;;		buf.WriteRune(']')
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func writeOption(buf *bytes.Buffer, opt *UnitOption) {
0000000000000000000000000000000000000000;;		buf.WriteString(opt.Name)
0000000000000000000000000000000000000000;;		buf.WriteRune('=')
0000000000000000000000000000000000000000;;		buf.WriteString(opt.Value)
0000000000000000000000000000000000000000;;	}
