0000000000000000000000000000000000000000;;	// Copyright 2015 CoreOS, Inc.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
8d973c48ce204bda083f5a578278a9cd3743f879;Godeps/_workspace/src/github.com/coreos/go-systemd/unit/option.go[Godeps/_workspace/src/github.com/coreos/go-systemd/unit/option.go][vendor/github.com/coreos/go-systemd/unit/option.go];	
0000000000000000000000000000000000000000;;	package unit
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnitOption struct {
0000000000000000000000000000000000000000;;		Section string
0000000000000000000000000000000000000000;;		Name    string
0000000000000000000000000000000000000000;;		Value   string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewUnitOption(section, name, value string) *UnitOption {
0000000000000000000000000000000000000000;;		return &UnitOption{Section: section, Name: name, Value: value}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (uo *UnitOption) String() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("{Section: %q, Name: %q, Value: %q}", uo.Section, uo.Name, uo.Value)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (uo *UnitOption) Match(other *UnitOption) bool {
0000000000000000000000000000000000000000;;		return uo.Section == other.Section &&
0000000000000000000000000000000000000000;;			uo.Name == other.Name &&
0000000000000000000000000000000000000000;;			uo.Value == other.Value
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func AllMatch(u1 []*UnitOption, u2 []*UnitOption) bool {
0000000000000000000000000000000000000000;;		length := len(u1)
0000000000000000000000000000000000000000;;		if length != len(u2) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i := 0; i < length; i++ {
0000000000000000000000000000000000000000;;			if !u1[i].Match(u2[i]) {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
