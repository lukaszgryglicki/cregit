0000000000000000000000000000000000000000;;	// Copyright 2015 CoreOS, Inc.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
a15085f256eebbe1e0d714ff4882a7611c12d312;Godeps/_workspace/src/github.com/coreos/go-systemd/unit/escape.go[Godeps/_workspace/src/github.com/coreos/go-systemd/unit/escape.go][vendor/github.com/coreos/go-systemd/unit/escape.go];	
0000000000000000000000000000000000000000;;	// Implements systemd-escape [--unescape] [--path]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package unit
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		allowed = `:_.abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789`
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// If isPath is true:
0000000000000000000000000000000000000000;;	//   We remove redundant '/'s, the leading '/', and trailing '/'.
0000000000000000000000000000000000000000;;	//   If the result is empty, a '/' is inserted.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// We always:
0000000000000000000000000000000000000000;;	//  Replace the following characters with `\x%x`:
0000000000000000000000000000000000000000;;	//   Leading `.`
0000000000000000000000000000000000000000;;	//   `-`, `\`, and anything not in this set: `:-_.\[0-9a-zA-Z]`
0000000000000000000000000000000000000000;;	//  Replace '/' with '-'.
0000000000000000000000000000000000000000;;	func escape(unescaped string, isPath bool) string {
0000000000000000000000000000000000000000;;		e := []byte{}
0000000000000000000000000000000000000000;;		inSlashes := false
0000000000000000000000000000000000000000;;		start := true
0000000000000000000000000000000000000000;;		for i := 0; i < len(unescaped); i++ {
0000000000000000000000000000000000000000;;			c := unescaped[i]
0000000000000000000000000000000000000000;;			if isPath {
0000000000000000000000000000000000000000;;				if c == '/' {
0000000000000000000000000000000000000000;;					inSlashes = true
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				} else if inSlashes {
0000000000000000000000000000000000000000;;					inSlashes = false
0000000000000000000000000000000000000000;;					if !start {
0000000000000000000000000000000000000000;;						e = append(e, '-')
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if c == '/' {
0000000000000000000000000000000000000000;;				e = append(e, '-')
0000000000000000000000000000000000000000;;			} else if start && c == '.' || strings.IndexByte(allowed, c) == -1 {
0000000000000000000000000000000000000000;;				e = append(e, []byte(fmt.Sprintf(`\x%x`, c))...)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				e = append(e, c)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			start = false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if isPath && len(e) == 0 {
0000000000000000000000000000000000000000;;			e = append(e, '-')
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return string(e)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// If isPath is true:
0000000000000000000000000000000000000000;;	//   We always return a string beginning with '/'.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// We always:
0000000000000000000000000000000000000000;;	//  Replace '-' with '/'.
0000000000000000000000000000000000000000;;	//  Replace `\x%x` with the value represented in hex.
0000000000000000000000000000000000000000;;	func unescape(escaped string, isPath bool) string {
0000000000000000000000000000000000000000;;		u := []byte{}
0000000000000000000000000000000000000000;;		for i := 0; i < len(escaped); i++ {
0000000000000000000000000000000000000000;;			c := escaped[i]
0000000000000000000000000000000000000000;;			if c == '-' {
0000000000000000000000000000000000000000;;				c = '/'
0000000000000000000000000000000000000000;;			} else if c == '\\' && len(escaped)-i >= 4 && escaped[i+1] == 'x' {
0000000000000000000000000000000000000000;;				n, err := strconv.ParseInt(escaped[i+2:i+4], 16, 8)
0000000000000000000000000000000000000000;;				if err == nil {
0000000000000000000000000000000000000000;;					c = byte(n)
0000000000000000000000000000000000000000;;					i += 3
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			u = append(u, c)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if isPath && (len(u) == 0 || u[0] != '/') {
0000000000000000000000000000000000000000;;			u = append([]byte("/"), u...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return string(u)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnitNameEscape escapes a string as `systemd-escape` would
0000000000000000000000000000000000000000;;	func UnitNameEscape(unescaped string) string {
0000000000000000000000000000000000000000;;		return escape(unescaped, false)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnitNameUnescape unescapes a string as `systemd-escape --unescape` would
0000000000000000000000000000000000000000;;	func UnitNameUnescape(escaped string) string {
0000000000000000000000000000000000000000;;		return unescape(escaped, false)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnitNamePathEscape escapes a string as `systemd-escape --path` would
0000000000000000000000000000000000000000;;	func UnitNamePathEscape(unescaped string) string {
0000000000000000000000000000000000000000;;		return escape(unescaped, true)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnitNamePathUnescape unescapes a string as `systemd-escape --path --unescape` would
0000000000000000000000000000000000000000;;	func UnitNamePathUnescape(escaped string) string {
0000000000000000000000000000000000000000;;		return unescape(escaped, true)
0000000000000000000000000000000000000000;;	}
