0000000000000000000000000000000000000000;;	// Copyright 2016 CoreOS, Inc.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
00d3d819457a61a2df72ee4571d003d5397ccd1f;;	
0000000000000000000000000000000000000000;;	package daemon
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SdWatchdogEnabled return watchdog information for a service.
0000000000000000000000000000000000000000;;	// Process should send daemon.SdNotify("WATCHDOG=1") every time / 2.
0000000000000000000000000000000000000000;;	// If `unsetEnvironment` is true, the environment variables `WATCHDOG_USEC`
0000000000000000000000000000000000000000;;	// and `WATCHDOG_PID` will be unconditionally unset.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// It returns one of the following:
0000000000000000000000000000000000000000;;	// (0, nil) - watchdog isn't enabled or we aren't the watched PID.
0000000000000000000000000000000000000000;;	// (0, err) - an error happened (e.g. error converting time).
0000000000000000000000000000000000000000;;	// (time, nil) - watchdog is enabled and we can send ping.
0000000000000000000000000000000000000000;;	//   time is delay before inactive service will be killed.
0000000000000000000000000000000000000000;;	func SdWatchdogEnabled(unsetEnvironment bool) (time.Duration, error) {
0000000000000000000000000000000000000000;;		wusec := os.Getenv("WATCHDOG_USEC")
0000000000000000000000000000000000000000;;		wpid := os.Getenv("WATCHDOG_PID")
0000000000000000000000000000000000000000;;		if unsetEnvironment {
0000000000000000000000000000000000000000;;			wusecErr := os.Unsetenv("WATCHDOG_USEC")
0000000000000000000000000000000000000000;;			wpidErr := os.Unsetenv("WATCHDOG_PID")
0000000000000000000000000000000000000000;;			if wusecErr != nil {
0000000000000000000000000000000000000000;;				return 0, wusecErr
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if wpidErr != nil {
0000000000000000000000000000000000000000;;				return 0, wpidErr
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if wusec == "" {
0000000000000000000000000000000000000000;;			return 0, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s, err := strconv.Atoi(wusec)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, fmt.Errorf("error converting WATCHDOG_USEC: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s <= 0 {
0000000000000000000000000000000000000000;;			return 0, fmt.Errorf("error WATCHDOG_USEC must be a positive number")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		interval := time.Duration(s) * time.Microsecond
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if wpid == "" {
0000000000000000000000000000000000000000;;			return interval, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p, err := strconv.Atoi(wpid)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, fmt.Errorf("error converting WATCHDOG_PID: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if os.Getpid() != p {
0000000000000000000000000000000000000000;;			return 0, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return interval, nil
0000000000000000000000000000000000000000;;	}
