0000000000000000000000000000000000000000;;	// Copyright 2015 CoreOS, Inc.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
d1c42c1e3fb3b408449f892c0d575bb4d9d885bd;Godeps/_workspace/src/github.com/coreos/go-systemd/dbus/properties.go[Godeps/_workspace/src/github.com/coreos/go-systemd/dbus/properties.go][vendor/github.com/coreos/go-systemd/dbus/properties.go];	
0000000000000000000000000000000000000000;;	package dbus
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/godbus/dbus"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// From the systemd docs:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The properties array of StartTransientUnit() may take many of the settings
0000000000000000000000000000000000000000;;	// that may also be configured in unit files. Not all parameters are currently
0000000000000000000000000000000000000000;;	// accepted though, but we plan to cover more properties with future release.
0000000000000000000000000000000000000000;;	// Currently you may set the Description, Slice and all dependency types of
0000000000000000000000000000000000000000;;	// units, as well as RemainAfterExit, ExecStart for service units,
0000000000000000000000000000000000000000;;	// TimeoutStopUSec and PIDs for scope units, and CPUAccounting, CPUShares,
0000000000000000000000000000000000000000;;	// BlockIOAccounting, BlockIOWeight, BlockIOReadBandwidth,
0000000000000000000000000000000000000000;;	// BlockIOWriteBandwidth, BlockIODeviceWeight, MemoryAccounting, MemoryLimit,
0000000000000000000000000000000000000000;;	// DevicePolicy, DeviceAllow for services/scopes/slices. These fields map
0000000000000000000000000000000000000000;;	// directly to their counterparts in unit files and as normal D-Bus object
0000000000000000000000000000000000000000;;	// properties. The exception here is the PIDs field of scope units which is
0000000000000000000000000000000000000000;;	// used for construction of the scope only and specifies the initial PIDs to
0000000000000000000000000000000000000000;;	// add to the scope object.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Property struct {
0000000000000000000000000000000000000000;;		Name  string
0000000000000000000000000000000000000000;;		Value dbus.Variant
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PropertyCollection struct {
0000000000000000000000000000000000000000;;		Name       string
0000000000000000000000000000000000000000;;		Properties []Property
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type execStart struct {
0000000000000000000000000000000000000000;;		Path             string   // the binary path to execute
0000000000000000000000000000000000000000;;		Args             []string // an array with all arguments to pass to the executed command, starting with argument 0
0000000000000000000000000000000000000000;;		UncleanIsFailure bool     // a boolean whether it should be considered a failure if the process exits uncleanly
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PropExecStart sets the ExecStart service property.  The first argument is a
0000000000000000000000000000000000000000;;	// slice with the binary path to execute followed by the arguments to pass to
0000000000000000000000000000000000000000;;	// the executed command. See
0000000000000000000000000000000000000000;;	// http://www.freedesktop.org/software/systemd/man/systemd.service.html#ExecStart=
0000000000000000000000000000000000000000;;	func PropExecStart(command []string, uncleanIsFailure bool) Property {
0000000000000000000000000000000000000000;;		execStarts := []execStart{
0000000000000000000000000000000000000000;;			execStart{
0000000000000000000000000000000000000000;;				Path:             command[0],
0000000000000000000000000000000000000000;;				Args:             command,
0000000000000000000000000000000000000000;;				UncleanIsFailure: uncleanIsFailure,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return Property{
0000000000000000000000000000000000000000;;			Name:  "ExecStart",
0000000000000000000000000000000000000000;;			Value: dbus.MakeVariant(execStarts),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PropRemainAfterExit sets the RemainAfterExit service property. See
0000000000000000000000000000000000000000;;	// http://www.freedesktop.org/software/systemd/man/systemd.service.html#RemainAfterExit=
0000000000000000000000000000000000000000;;	func PropRemainAfterExit(b bool) Property {
0000000000000000000000000000000000000000;;		return Property{
0000000000000000000000000000000000000000;;			Name:  "RemainAfterExit",
0000000000000000000000000000000000000000;;			Value: dbus.MakeVariant(b),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PropType sets the Type service property. See
0000000000000000000000000000000000000000;;	// http://www.freedesktop.org/software/systemd/man/systemd.service.html#Type=
0000000000000000000000000000000000000000;;	func PropType(t string) Property {
0000000000000000000000000000000000000000;;		return Property{
0000000000000000000000000000000000000000;;			Name:  "Type",
0000000000000000000000000000000000000000;;			Value: dbus.MakeVariant(t),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PropDescription sets the Description unit property. See
0000000000000000000000000000000000000000;;	// http://www.freedesktop.org/software/systemd/man/systemd.unit#Description=
0000000000000000000000000000000000000000;;	func PropDescription(desc string) Property {
0000000000000000000000000000000000000000;;		return Property{
0000000000000000000000000000000000000000;;			Name:  "Description",
0000000000000000000000000000000000000000;;			Value: dbus.MakeVariant(desc),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func propDependency(name string, units []string) Property {
0000000000000000000000000000000000000000;;		return Property{
0000000000000000000000000000000000000000;;			Name:  name,
0000000000000000000000000000000000000000;;			Value: dbus.MakeVariant(units),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PropRequires sets the Requires unit property.  See
0000000000000000000000000000000000000000;;	// http://www.freedesktop.org/software/systemd/man/systemd.unit.html#Requires=
0000000000000000000000000000000000000000;;	func PropRequires(units ...string) Property {
0000000000000000000000000000000000000000;;		return propDependency("Requires", units)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PropRequiresOverridable sets the RequiresOverridable unit property.  See
0000000000000000000000000000000000000000;;	// http://www.freedesktop.org/software/systemd/man/systemd.unit.html#RequiresOverridable=
0000000000000000000000000000000000000000;;	func PropRequiresOverridable(units ...string) Property {
0000000000000000000000000000000000000000;;		return propDependency("RequiresOverridable", units)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PropRequisite sets the Requisite unit property.  See
0000000000000000000000000000000000000000;;	// http://www.freedesktop.org/software/systemd/man/systemd.unit.html#Requisite=
0000000000000000000000000000000000000000;;	func PropRequisite(units ...string) Property {
0000000000000000000000000000000000000000;;		return propDependency("Requisite", units)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PropRequisiteOverridable sets the RequisiteOverridable unit property.  See
0000000000000000000000000000000000000000;;	// http://www.freedesktop.org/software/systemd/man/systemd.unit.html#RequisiteOverridable=
0000000000000000000000000000000000000000;;	func PropRequisiteOverridable(units ...string) Property {
0000000000000000000000000000000000000000;;		return propDependency("RequisiteOverridable", units)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PropWants sets the Wants unit property.  See
0000000000000000000000000000000000000000;;	// http://www.freedesktop.org/software/systemd/man/systemd.unit.html#Wants=
0000000000000000000000000000000000000000;;	func PropWants(units ...string) Property {
0000000000000000000000000000000000000000;;		return propDependency("Wants", units)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PropBindsTo sets the BindsTo unit property.  See
0000000000000000000000000000000000000000;;	// http://www.freedesktop.org/software/systemd/man/systemd.unit.html#BindsTo=
0000000000000000000000000000000000000000;;	func PropBindsTo(units ...string) Property {
0000000000000000000000000000000000000000;;		return propDependency("BindsTo", units)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PropRequiredBy sets the RequiredBy unit property.  See
0000000000000000000000000000000000000000;;	// http://www.freedesktop.org/software/systemd/man/systemd.unit.html#RequiredBy=
0000000000000000000000000000000000000000;;	func PropRequiredBy(units ...string) Property {
0000000000000000000000000000000000000000;;		return propDependency("RequiredBy", units)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PropRequiredByOverridable sets the RequiredByOverridable unit property.  See
0000000000000000000000000000000000000000;;	// http://www.freedesktop.org/software/systemd/man/systemd.unit.html#RequiredByOverridable=
0000000000000000000000000000000000000000;;	func PropRequiredByOverridable(units ...string) Property {
0000000000000000000000000000000000000000;;		return propDependency("RequiredByOverridable", units)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PropWantedBy sets the WantedBy unit property.  See
0000000000000000000000000000000000000000;;	// http://www.freedesktop.org/software/systemd/man/systemd.unit.html#WantedBy=
0000000000000000000000000000000000000000;;	func PropWantedBy(units ...string) Property {
0000000000000000000000000000000000000000;;		return propDependency("WantedBy", units)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PropBoundBy sets the BoundBy unit property.  See
0000000000000000000000000000000000000000;;	// http://www.freedesktop.org/software/systemd/main/systemd.unit.html#BoundBy=
0000000000000000000000000000000000000000;;	func PropBoundBy(units ...string) Property {
0000000000000000000000000000000000000000;;		return propDependency("BoundBy", units)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PropConflicts sets the Conflicts unit property.  See
0000000000000000000000000000000000000000;;	// http://www.freedesktop.org/software/systemd/man/systemd.unit.html#Conflicts=
0000000000000000000000000000000000000000;;	func PropConflicts(units ...string) Property {
0000000000000000000000000000000000000000;;		return propDependency("Conflicts", units)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PropConflictedBy sets the ConflictedBy unit property.  See
0000000000000000000000000000000000000000;;	// http://www.freedesktop.org/software/systemd/man/systemd.unit.html#ConflictedBy=
0000000000000000000000000000000000000000;;	func PropConflictedBy(units ...string) Property {
0000000000000000000000000000000000000000;;		return propDependency("ConflictedBy", units)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PropBefore sets the Before unit property.  See
0000000000000000000000000000000000000000;;	// http://www.freedesktop.org/software/systemd/man/systemd.unit.html#Before=
0000000000000000000000000000000000000000;;	func PropBefore(units ...string) Property {
0000000000000000000000000000000000000000;;		return propDependency("Before", units)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PropAfter sets the After unit property.  See
0000000000000000000000000000000000000000;;	// http://www.freedesktop.org/software/systemd/man/systemd.unit.html#After=
0000000000000000000000000000000000000000;;	func PropAfter(units ...string) Property {
0000000000000000000000000000000000000000;;		return propDependency("After", units)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PropOnFailure sets the OnFailure unit property.  See
0000000000000000000000000000000000000000;;	// http://www.freedesktop.org/software/systemd/man/systemd.unit.html#OnFailure=
0000000000000000000000000000000000000000;;	func PropOnFailure(units ...string) Property {
0000000000000000000000000000000000000000;;		return propDependency("OnFailure", units)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PropTriggers sets the Triggers unit property.  See
0000000000000000000000000000000000000000;;	// http://www.freedesktop.org/software/systemd/man/systemd.unit.html#Triggers=
0000000000000000000000000000000000000000;;	func PropTriggers(units ...string) Property {
0000000000000000000000000000000000000000;;		return propDependency("Triggers", units)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PropTriggeredBy sets the TriggeredBy unit property.  See
0000000000000000000000000000000000000000;;	// http://www.freedesktop.org/software/systemd/man/systemd.unit.html#TriggeredBy=
0000000000000000000000000000000000000000;;	func PropTriggeredBy(units ...string) Property {
0000000000000000000000000000000000000000;;		return propDependency("TriggeredBy", units)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PropPropagatesReloadTo sets the PropagatesReloadTo unit property.  See
0000000000000000000000000000000000000000;;	// http://www.freedesktop.org/software/systemd/man/systemd.unit.html#PropagatesReloadTo=
0000000000000000000000000000000000000000;;	func PropPropagatesReloadTo(units ...string) Property {
0000000000000000000000000000000000000000;;		return propDependency("PropagatesReloadTo", units)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PropRequiresMountsFor sets the RequiresMountsFor unit property.  See
0000000000000000000000000000000000000000;;	// http://www.freedesktop.org/software/systemd/man/systemd.unit.html#RequiresMountsFor=
0000000000000000000000000000000000000000;;	func PropRequiresMountsFor(units ...string) Property {
0000000000000000000000000000000000000000;;		return propDependency("RequiresMountsFor", units)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PropSlice sets the Slice unit property.  See
0000000000000000000000000000000000000000;;	// http://www.freedesktop.org/software/systemd/man/systemd.resource-control.html#Slice=
0000000000000000000000000000000000000000;;	func PropSlice(slice string) Property {
0000000000000000000000000000000000000000;;		return Property{
0000000000000000000000000000000000000000;;			Name:  "Slice",
0000000000000000000000000000000000000000;;			Value: dbus.MakeVariant(slice),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PropPids sets the PIDs field of scope units used in the initial construction
0000000000000000000000000000000000000000;;	// of the scope only and specifies the initial PIDs to add to the scope object.
0000000000000000000000000000000000000000;;	// See https://www.freedesktop.org/wiki/Software/systemd/ControlGroupInterface/#properties
0000000000000000000000000000000000000000;;	func PropPids(pids ...uint32) Property {
0000000000000000000000000000000000000000;;		return Property{
0000000000000000000000000000000000000000;;			Name:  "PIDs",
0000000000000000000000000000000000000000;;			Value: dbus.MakeVariant(pids),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
