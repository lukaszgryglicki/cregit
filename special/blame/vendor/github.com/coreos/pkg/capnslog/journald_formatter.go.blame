0000000000000000000000000000000000000000;;	// Copyright 2015 CoreOS, Inc.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// +build !windows
2e6b23087c07e0ca25a1986b378417fd0915b4d7;;	
0000000000000000000000000000000000000000;;	package capnslog
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/coreos/go-systemd/journal"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewJournaldFormatter() (Formatter, error) {
0000000000000000000000000000000000000000;;		if !journal.Enabled() {
0000000000000000000000000000000000000000;;			return nil, errors.New("No systemd detected")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &journaldFormatter{}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type journaldFormatter struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (j *journaldFormatter) Format(pkg string, l LogLevel, _ int, entries ...interface{}) {
0000000000000000000000000000000000000000;;		var pri journal.Priority
0000000000000000000000000000000000000000;;		switch l {
0000000000000000000000000000000000000000;;		case CRITICAL:
0000000000000000000000000000000000000000;;			pri = journal.PriCrit
0000000000000000000000000000000000000000;;		case ERROR:
0000000000000000000000000000000000000000;;			pri = journal.PriErr
0000000000000000000000000000000000000000;;		case WARNING:
0000000000000000000000000000000000000000;;			pri = journal.PriWarning
0000000000000000000000000000000000000000;;		case NOTICE:
0000000000000000000000000000000000000000;;			pri = journal.PriNotice
0000000000000000000000000000000000000000;;		case INFO:
0000000000000000000000000000000000000000;;			pri = journal.PriInfo
0000000000000000000000000000000000000000;;		case DEBUG:
0000000000000000000000000000000000000000;;			pri = journal.PriDebug
0000000000000000000000000000000000000000;;		case TRACE:
0000000000000000000000000000000000000000;;			pri = journal.PriDebug
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			panic("Unhandled loglevel")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		msg := fmt.Sprint(entries...)
0000000000000000000000000000000000000000;;		tags := map[string]string{
0000000000000000000000000000000000000000;;			"PACKAGE":           pkg,
0000000000000000000000000000000000000000;;			"SYSLOG_IDENTIFIER": filepath.Base(os.Args[0]),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := journal.Send(msg, pri, tags)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			fmt.Fprintln(os.Stderr, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (j *journaldFormatter) Flush() {}
