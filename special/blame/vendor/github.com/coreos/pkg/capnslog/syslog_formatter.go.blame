0000000000000000000000000000000000000000;;	// Copyright 2015 CoreOS, Inc.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// +build !windows
d9a6899387940336fd1a655128b4b3486f75c7ee;Godeps/_workspace/src/github.com/coreos/pkg/capnslog/syslog_formatter.go[Godeps/_workspace/src/github.com/coreos/pkg/capnslog/syslog_formatter.go][vendor/github.com/coreos/pkg/capnslog/syslog_formatter.go];	
0000000000000000000000000000000000000000;;	package capnslog
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"log/syslog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewSyslogFormatter(w *syslog.Writer) Formatter {
0000000000000000000000000000000000000000;;		return &syslogFormatter{w}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewDefaultSyslogFormatter(tag string) (Formatter, error) {
0000000000000000000000000000000000000000;;		w, err := syslog.New(syslog.LOG_DEBUG, tag)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return NewSyslogFormatter(w), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type syslogFormatter struct {
0000000000000000000000000000000000000000;;		w *syslog.Writer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *syslogFormatter) Format(pkg string, l LogLevel, _ int, entries ...interface{}) {
0000000000000000000000000000000000000000;;		for _, entry := range entries {
0000000000000000000000000000000000000000;;			str := fmt.Sprint(entry)
0000000000000000000000000000000000000000;;			switch l {
0000000000000000000000000000000000000000;;			case CRITICAL:
0000000000000000000000000000000000000000;;				s.w.Crit(str)
0000000000000000000000000000000000000000;;			case ERROR:
0000000000000000000000000000000000000000;;				s.w.Err(str)
0000000000000000000000000000000000000000;;			case WARNING:
0000000000000000000000000000000000000000;;				s.w.Warning(str)
0000000000000000000000000000000000000000;;			case NOTICE:
0000000000000000000000000000000000000000;;				s.w.Notice(str)
0000000000000000000000000000000000000000;;			case INFO:
0000000000000000000000000000000000000000;;				s.w.Info(str)
0000000000000000000000000000000000000000;;			case DEBUG:
0000000000000000000000000000000000000000;;				s.w.Debug(str)
0000000000000000000000000000000000000000;;			case TRACE:
0000000000000000000000000000000000000000;;				s.w.Debug(str)
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				panic("Unhandled loglevel")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *syslogFormatter) Flush() {
0000000000000000000000000000000000000000;;	}
