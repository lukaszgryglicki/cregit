0000000000000000000000000000000000000000;;	// Copyright 2015 CoreOS, Inc.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
d9a6899387940336fd1a655128b4b3486f75c7ee;Godeps/_workspace/src/github.com/coreos/pkg/capnslog/glog_formatter.go[Godeps/_workspace/src/github.com/coreos/pkg/capnslog/glog_formatter.go][vendor/github.com/coreos/pkg/capnslog/glog_formatter.go];	
0000000000000000000000000000000000000000;;	package capnslog
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bufio"
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"runtime"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var pid = os.Getpid()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GlogFormatter struct {
0000000000000000000000000000000000000000;;		StringFormatter
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewGlogFormatter(w io.Writer) *GlogFormatter {
0000000000000000000000000000000000000000;;		g := &GlogFormatter{}
0000000000000000000000000000000000000000;;		g.w = bufio.NewWriter(w)
0000000000000000000000000000000000000000;;		return g
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (g GlogFormatter) Format(pkg string, level LogLevel, depth int, entries ...interface{}) {
0000000000000000000000000000000000000000;;		g.w.Write(GlogHeader(level, depth+1))
0000000000000000000000000000000000000000;;		g.StringFormatter.Format(pkg, level, depth+1, entries...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GlogHeader(level LogLevel, depth int) []byte {
0000000000000000000000000000000000000000;;		// Lmmdd hh:mm:ss.uuuuuu threadid file:line]
0000000000000000000000000000000000000000;;		now := time.Now().UTC()
0000000000000000000000000000000000000000;;		_, file, line, ok := runtime.Caller(depth) // It's always the same number of frames to the user's call.
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			file = "???"
0000000000000000000000000000000000000000;;			line = 1
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			slash := strings.LastIndex(file, "/")
0000000000000000000000000000000000000000;;			if slash >= 0 {
0000000000000000000000000000000000000000;;				file = file[slash+1:]
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if line < 0 {
0000000000000000000000000000000000000000;;			line = 0 // not a real line number
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		buf := &bytes.Buffer{}
0000000000000000000000000000000000000000;;		buf.Grow(30)
0000000000000000000000000000000000000000;;		_, month, day := now.Date()
0000000000000000000000000000000000000000;;		hour, minute, second := now.Clock()
0000000000000000000000000000000000000000;;		buf.WriteString(level.Char())
0000000000000000000000000000000000000000;;		twoDigits(buf, int(month))
0000000000000000000000000000000000000000;;		twoDigits(buf, day)
0000000000000000000000000000000000000000;;		buf.WriteByte(' ')
0000000000000000000000000000000000000000;;		twoDigits(buf, hour)
0000000000000000000000000000000000000000;;		buf.WriteByte(':')
0000000000000000000000000000000000000000;;		twoDigits(buf, minute)
0000000000000000000000000000000000000000;;		buf.WriteByte(':')
0000000000000000000000000000000000000000;;		twoDigits(buf, second)
0000000000000000000000000000000000000000;;		buf.WriteByte('.')
0000000000000000000000000000000000000000;;		buf.WriteString(strconv.Itoa(now.Nanosecond() / 1000))
0000000000000000000000000000000000000000;;		buf.WriteByte('Z')
0000000000000000000000000000000000000000;;		buf.WriteByte(' ')
0000000000000000000000000000000000000000;;		buf.WriteString(strconv.Itoa(pid))
0000000000000000000000000000000000000000;;		buf.WriteByte(' ')
0000000000000000000000000000000000000000;;		buf.WriteString(file)
0000000000000000000000000000000000000000;;		buf.WriteByte(':')
0000000000000000000000000000000000000000;;		buf.WriteString(strconv.Itoa(line))
0000000000000000000000000000000000000000;;		buf.WriteByte(']')
0000000000000000000000000000000000000000;;		buf.WriteByte(' ')
0000000000000000000000000000000000000000;;		return buf.Bytes()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const digits = "0123456789"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func twoDigits(b *bytes.Buffer, d int) {
0000000000000000000000000000000000000000;;		c2 := digits[d%10]
0000000000000000000000000000000000000000;;		d /= 10
0000000000000000000000000000000000000000;;		c1 := digits[d%10]
0000000000000000000000000000000000000000;;		b.WriteByte(c1)
0000000000000000000000000000000000000000;;		b.WriteByte(c2)
0000000000000000000000000000000000000000;;	}
