0000000000000000000000000000000000000000;;	// Copyright 2015 CoreOS, Inc.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// +build !windows
2e6b23087c07e0ca25a1986b378417fd0915b4d7;;	
0000000000000000000000000000000000000000;;	package capnslog
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Here's where the opinionation comes in. We need some sensible defaults,
0000000000000000000000000000000000000000;;	// especially after taking over the log package. Your project (whatever it may
0000000000000000000000000000000000000000;;	// be) may see things differently. That's okay; there should be no defaults in
0000000000000000000000000000000000000000;;	// the main package that cannot be controlled or overridden programatically,
0000000000000000000000000000000000000000;;	// otherwise it's a bug. Doing so is creating your own init_log.go file much
0000000000000000000000000000000000000000;;	// like this one.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		initHijack()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Go `log` pacakge uses os.Stderr.
0000000000000000000000000000000000000000;;		SetFormatter(NewDefaultFormatter(os.Stderr))
0000000000000000000000000000000000000000;;		SetGlobalLogLevel(INFO)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewDefaultFormatter(out io.Writer) Formatter {
0000000000000000000000000000000000000000;;		if syscall.Getppid() == 1 {
0000000000000000000000000000000000000000;;			// We're running under init, which may be systemd.
0000000000000000000000000000000000000000;;			f, err := NewJournaldFormatter()
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				return f
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return NewPrettyFormatter(out, false)
0000000000000000000000000000000000000000;;	}
