0000000000000000000000000000000000000000;;	// Copyright 2015 CoreOS, Inc.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
d9a6899387940336fd1a655128b4b3486f75c7ee;Godeps/_workspace/src/github.com/coreos/pkg/capnslog/formatters.go[Godeps/_workspace/src/github.com/coreos/pkg/capnslog/formatters.go][vendor/github.com/coreos/pkg/capnslog/formatters.go];	
0000000000000000000000000000000000000000;;	package capnslog
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bufio"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"log"
0000000000000000000000000000000000000000;;		"runtime"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Formatter interface {
0000000000000000000000000000000000000000;;		Format(pkg string, level LogLevel, depth int, entries ...interface{})
0000000000000000000000000000000000000000;;		Flush()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewStringFormatter(w io.Writer) Formatter {
0000000000000000000000000000000000000000;;		return &StringFormatter{
0000000000000000000000000000000000000000;;			w: bufio.NewWriter(w),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StringFormatter struct {
0000000000000000000000000000000000000000;;		w *bufio.Writer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *StringFormatter) Format(pkg string, l LogLevel, i int, entries ...interface{}) {
0000000000000000000000000000000000000000;;		now := time.Now().UTC()
0000000000000000000000000000000000000000;;		s.w.WriteString(now.Format(time.RFC3339))
0000000000000000000000000000000000000000;;		s.w.WriteByte(' ')
0000000000000000000000000000000000000000;;		writeEntries(s.w, pkg, l, i, entries...)
0000000000000000000000000000000000000000;;		s.Flush()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func writeEntries(w *bufio.Writer, pkg string, _ LogLevel, _ int, entries ...interface{}) {
0000000000000000000000000000000000000000;;		if pkg != "" {
0000000000000000000000000000000000000000;;			w.WriteString(pkg + ": ")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		str := fmt.Sprint(entries...)
0000000000000000000000000000000000000000;;		endsInNL := strings.HasSuffix(str, "\n")
0000000000000000000000000000000000000000;;		w.WriteString(str)
0000000000000000000000000000000000000000;;		if !endsInNL {
0000000000000000000000000000000000000000;;			w.WriteString("\n")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *StringFormatter) Flush() {
0000000000000000000000000000000000000000;;		s.w.Flush()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewPrettyFormatter(w io.Writer, debug bool) Formatter {
0000000000000000000000000000000000000000;;		return &PrettyFormatter{
0000000000000000000000000000000000000000;;			w:     bufio.NewWriter(w),
0000000000000000000000000000000000000000;;			debug: debug,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PrettyFormatter struct {
0000000000000000000000000000000000000000;;		w     *bufio.Writer
0000000000000000000000000000000000000000;;		debug bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *PrettyFormatter) Format(pkg string, l LogLevel, depth int, entries ...interface{}) {
0000000000000000000000000000000000000000;;		now := time.Now()
0000000000000000000000000000000000000000;;		ts := now.Format("2006-01-02 15:04:05")
0000000000000000000000000000000000000000;;		c.w.WriteString(ts)
0000000000000000000000000000000000000000;;		ms := now.Nanosecond() / 1000
0000000000000000000000000000000000000000;;		c.w.WriteString(fmt.Sprintf(".%06d", ms))
0000000000000000000000000000000000000000;;		if c.debug {
0000000000000000000000000000000000000000;;			_, file, line, ok := runtime.Caller(depth) // It's always the same number of frames to the user's call.
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				file = "???"
0000000000000000000000000000000000000000;;				line = 1
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				slash := strings.LastIndex(file, "/")
0000000000000000000000000000000000000000;;				if slash >= 0 {
0000000000000000000000000000000000000000;;					file = file[slash+1:]
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if line < 0 {
0000000000000000000000000000000000000000;;				line = 0 // not a real line number
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			c.w.WriteString(fmt.Sprintf(" [%s:%d]", file, line))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		c.w.WriteString(fmt.Sprint(" ", l.Char(), " | "))
0000000000000000000000000000000000000000;;		writeEntries(c.w, pkg, l, depth, entries...)
0000000000000000000000000000000000000000;;		c.Flush()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *PrettyFormatter) Flush() {
0000000000000000000000000000000000000000;;		c.w.Flush()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LogFormatter emulates the form of the traditional built-in logger.
0000000000000000000000000000000000000000;;	type LogFormatter struct {
0000000000000000000000000000000000000000;;		logger *log.Logger
0000000000000000000000000000000000000000;;		prefix string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewLogFormatter is a helper to produce a new LogFormatter struct. It uses the
0000000000000000000000000000000000000000;;	// golang log package to actually do the logging work so that logs look similar.
0000000000000000000000000000000000000000;;	func NewLogFormatter(w io.Writer, prefix string, flag int) Formatter {
0000000000000000000000000000000000000000;;		return &LogFormatter{
0000000000000000000000000000000000000000;;			logger: log.New(w, "", flag), // don't use prefix here
0000000000000000000000000000000000000000;;			prefix: prefix,               // save it instead
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Format builds a log message for the LogFormatter. The LogLevel is ignored.
0000000000000000000000000000000000000000;;	func (lf *LogFormatter) Format(pkg string, _ LogLevel, _ int, entries ...interface{}) {
0000000000000000000000000000000000000000;;		str := fmt.Sprint(entries...)
0000000000000000000000000000000000000000;;		prefix := lf.prefix
0000000000000000000000000000000000000000;;		if pkg != "" {
0000000000000000000000000000000000000000;;			prefix = fmt.Sprintf("%s%s: ", prefix, pkg)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		lf.logger.Output(5, fmt.Sprintf("%s%v", prefix, str)) // call depth is 5
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Flush is included so that the interface is complete, but is a no-op.
0000000000000000000000000000000000000000;;	func (lf *LogFormatter) Flush() {
0000000000000000000000000000000000000000;;		// noop
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NilFormatter is a no-op log formatter that does nothing.
0000000000000000000000000000000000000000;;	type NilFormatter struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewNilFormatter is a helper to produce a new LogFormatter struct. It logs no
0000000000000000000000000000000000000000;;	// messages so that you can cause part of your logging to be silent.
0000000000000000000000000000000000000000;;	func NewNilFormatter() Formatter {
0000000000000000000000000000000000000000;;		return &NilFormatter{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Format does nothing.
0000000000000000000000000000000000000000;;	func (_ *NilFormatter) Format(_ string, _ LogLevel, _ int, _ ...interface{}) {
0000000000000000000000000000000000000000;;		// noop
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Flush is included so that the interface is complete, but is a no-op.
0000000000000000000000000000000000000000;;	func (_ *NilFormatter) Flush() {
0000000000000000000000000000000000000000;;		// noop
0000000000000000000000000000000000000000;;	}
