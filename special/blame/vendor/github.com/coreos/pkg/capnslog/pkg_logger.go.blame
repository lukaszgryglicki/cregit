0000000000000000000000000000000000000000;;	// Copyright 2015 CoreOS, Inc.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
d9a6899387940336fd1a655128b4b3486f75c7ee;Godeps/_workspace/src/github.com/coreos/pkg/capnslog/pkg_logger.go[Godeps/_workspace/src/github.com/coreos/pkg/capnslog/pkg_logger.go][vendor/github.com/coreos/pkg/capnslog/pkg_logger.go];	
0000000000000000000000000000000000000000;;	package capnslog
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PackageLogger struct {
0000000000000000000000000000000000000000;;		pkg   string
0000000000000000000000000000000000000000;;		level LogLevel
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const calldepth = 2
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *PackageLogger) internalLog(depth int, inLevel LogLevel, entries ...interface{}) {
0000000000000000000000000000000000000000;;		logger.Lock()
0000000000000000000000000000000000000000;;		defer logger.Unlock()
0000000000000000000000000000000000000000;;		if inLevel != CRITICAL && p.level < inLevel {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if logger.formatter != nil {
0000000000000000000000000000000000000000;;			logger.formatter.Format(p.pkg, inLevel, depth+1, entries...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *PackageLogger) LevelAt(l LogLevel) bool {
0000000000000000000000000000000000000000;;		logger.Lock()
0000000000000000000000000000000000000000;;		defer logger.Unlock()
0000000000000000000000000000000000000000;;		return p.level >= l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Log a formatted string at any level between ERROR and TRACE
0000000000000000000000000000000000000000;;	func (p *PackageLogger) Logf(l LogLevel, format string, args ...interface{}) {
0000000000000000000000000000000000000000;;		p.internalLog(calldepth, l, fmt.Sprintf(format, args...))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Log a message at any level between ERROR and TRACE
0000000000000000000000000000000000000000;;	func (p *PackageLogger) Log(l LogLevel, args ...interface{}) {
0000000000000000000000000000000000000000;;		p.internalLog(calldepth, l, fmt.Sprint(args...))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// log stdlib compatibility
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *PackageLogger) Println(args ...interface{}) {
0000000000000000000000000000000000000000;;		p.internalLog(calldepth, INFO, fmt.Sprintln(args...))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *PackageLogger) Printf(format string, args ...interface{}) {
0000000000000000000000000000000000000000;;		p.Logf(INFO, format, args...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *PackageLogger) Print(args ...interface{}) {
0000000000000000000000000000000000000000;;		p.internalLog(calldepth, INFO, fmt.Sprint(args...))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Panic and fatal
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *PackageLogger) Panicf(format string, args ...interface{}) {
0000000000000000000000000000000000000000;;		s := fmt.Sprintf(format, args...)
0000000000000000000000000000000000000000;;		p.internalLog(calldepth, CRITICAL, s)
0000000000000000000000000000000000000000;;		panic(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *PackageLogger) Panic(args ...interface{}) {
0000000000000000000000000000000000000000;;		s := fmt.Sprint(args...)
0000000000000000000000000000000000000000;;		p.internalLog(calldepth, CRITICAL, s)
0000000000000000000000000000000000000000;;		panic(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *PackageLogger) Fatalf(format string, args ...interface{}) {
0000000000000000000000000000000000000000;;		p.Logf(CRITICAL, format, args...)
0000000000000000000000000000000000000000;;		os.Exit(1)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *PackageLogger) Fatal(args ...interface{}) {
0000000000000000000000000000000000000000;;		s := fmt.Sprint(args...)
0000000000000000000000000000000000000000;;		p.internalLog(calldepth, CRITICAL, s)
0000000000000000000000000000000000000000;;		os.Exit(1)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *PackageLogger) Fatalln(args ...interface{}) {
0000000000000000000000000000000000000000;;		s := fmt.Sprintln(args...)
0000000000000000000000000000000000000000;;		p.internalLog(calldepth, CRITICAL, s)
0000000000000000000000000000000000000000;;		os.Exit(1)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Error Functions
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *PackageLogger) Errorf(format string, args ...interface{}) {
0000000000000000000000000000000000000000;;		p.Logf(ERROR, format, args...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *PackageLogger) Error(entries ...interface{}) {
0000000000000000000000000000000000000000;;		p.internalLog(calldepth, ERROR, entries...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Warning Functions
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *PackageLogger) Warningf(format string, args ...interface{}) {
0000000000000000000000000000000000000000;;		p.Logf(WARNING, format, args...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *PackageLogger) Warning(entries ...interface{}) {
0000000000000000000000000000000000000000;;		p.internalLog(calldepth, WARNING, entries...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Notice Functions
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *PackageLogger) Noticef(format string, args ...interface{}) {
0000000000000000000000000000000000000000;;		p.Logf(NOTICE, format, args...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *PackageLogger) Notice(entries ...interface{}) {
0000000000000000000000000000000000000000;;		p.internalLog(calldepth, NOTICE, entries...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Info Functions
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *PackageLogger) Infof(format string, args ...interface{}) {
0000000000000000000000000000000000000000;;		p.Logf(INFO, format, args...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *PackageLogger) Info(entries ...interface{}) {
0000000000000000000000000000000000000000;;		p.internalLog(calldepth, INFO, entries...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Debug Functions
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *PackageLogger) Debugf(format string, args ...interface{}) {
0000000000000000000000000000000000000000;;		if p.level < DEBUG {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.Logf(DEBUG, format, args...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *PackageLogger) Debug(entries ...interface{}) {
0000000000000000000000000000000000000000;;		if p.level < DEBUG {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.internalLog(calldepth, DEBUG, entries...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Trace Functions
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *PackageLogger) Tracef(format string, args ...interface{}) {
0000000000000000000000000000000000000000;;		if p.level < TRACE {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.Logf(TRACE, format, args...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *PackageLogger) Trace(entries ...interface{}) {
0000000000000000000000000000000000000000;;		if p.level < TRACE {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.internalLog(calldepth, TRACE, entries...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *PackageLogger) Flush() {
0000000000000000000000000000000000000000;;		logger.Lock()
0000000000000000000000000000000000000000;;		defer logger.Unlock()
0000000000000000000000000000000000000000;;		logger.formatter.Flush()
0000000000000000000000000000000000000000;;	}
