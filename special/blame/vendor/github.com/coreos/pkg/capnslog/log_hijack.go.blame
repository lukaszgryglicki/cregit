0000000000000000000000000000000000000000;;	// Copyright 2015 CoreOS, Inc.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
d9a6899387940336fd1a655128b4b3486f75c7ee;Godeps/_workspace/src/github.com/coreos/pkg/capnslog/log_hijack.go[Godeps/_workspace/src/github.com/coreos/pkg/capnslog/log_hijack.go][vendor/github.com/coreos/pkg/capnslog/log_hijack.go];	
0000000000000000000000000000000000000000;;	package capnslog
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"log"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func initHijack() {
0000000000000000000000000000000000000000;;		pkg := NewPackageLogger("log", "")
0000000000000000000000000000000000000000;;		w := packageWriter{pkg}
0000000000000000000000000000000000000000;;		log.SetFlags(0)
0000000000000000000000000000000000000000;;		log.SetPrefix("")
0000000000000000000000000000000000000000;;		log.SetOutput(w)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type packageWriter struct {
0000000000000000000000000000000000000000;;		pl *PackageLogger
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p packageWriter) Write(b []byte) (int, error) {
0000000000000000000000000000000000000000;;		if p.pl.level < INFO {
0000000000000000000000000000000000000000;;			return 0, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.pl.internalLog(calldepth+2, INFO, string(b))
0000000000000000000000000000000000000000;;		return len(b), nil
0000000000000000000000000000000000000000;;	}
