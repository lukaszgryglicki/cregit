0000000000000000000000000000000000000000;;	// Copyright 2016 Michal Witkowski. All Rights Reserved.
0000000000000000000000000000000000000000;;	// See LICENSE for licensing terms.
550be6508d59ea184bfb64f8ae23c177b9e6d1c9;;	
0000000000000000000000000000000000000000;;	package grpc_prometheus
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"google.golang.org/grpc/codes"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		prom "github.com/prometheus/client_golang/prometheus"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		clientStartedCounter = prom.NewCounterVec(
0000000000000000000000000000000000000000;;			prom.CounterOpts{
0000000000000000000000000000000000000000;;				Namespace: "grpc",
0000000000000000000000000000000000000000;;				Subsystem: "client",
0000000000000000000000000000000000000000;;				Name:      "started_total",
0000000000000000000000000000000000000000;;				Help:      "Total number of RPCs started on the client.",
0000000000000000000000000000000000000000;;			}, []string{"grpc_type", "grpc_service", "grpc_method"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clientHandledCounter = prom.NewCounterVec(
0000000000000000000000000000000000000000;;			prom.CounterOpts{
0000000000000000000000000000000000000000;;				Namespace: "grpc",
0000000000000000000000000000000000000000;;				Subsystem: "client",
0000000000000000000000000000000000000000;;				Name:      "handled_total",
0000000000000000000000000000000000000000;;				Help:      "Total number of RPCs completed by the client, regardless of success or failure.",
0000000000000000000000000000000000000000;;			}, []string{"grpc_type", "grpc_service", "grpc_method", "grpc_code"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clientStreamMsgReceived = prom.NewCounterVec(
0000000000000000000000000000000000000000;;			prom.CounterOpts{
0000000000000000000000000000000000000000;;				Namespace: "grpc",
0000000000000000000000000000000000000000;;				Subsystem: "client",
0000000000000000000000000000000000000000;;				Name:      "msg_received_total",
0000000000000000000000000000000000000000;;				Help:      "Total number of RPC stream messages received by the client.",
0000000000000000000000000000000000000000;;			}, []string{"grpc_type", "grpc_service", "grpc_method"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clientStreamMsgSent = prom.NewCounterVec(
0000000000000000000000000000000000000000;;			prom.CounterOpts{
0000000000000000000000000000000000000000;;				Namespace: "grpc",
0000000000000000000000000000000000000000;;				Subsystem: "client",
0000000000000000000000000000000000000000;;				Name:      "msg_sent_total",
0000000000000000000000000000000000000000;;				Help:      "Total number of gRPC stream messages sent by the client.",
0000000000000000000000000000000000000000;;			}, []string{"grpc_type", "grpc_service", "grpc_method"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clientHandledHistogramEnabled = false
0000000000000000000000000000000000000000;;		clientHandledHistogramOpts    = prom.HistogramOpts{
0000000000000000000000000000000000000000;;			Namespace: "grpc",
0000000000000000000000000000000000000000;;			Subsystem: "client",
0000000000000000000000000000000000000000;;			Name:      "handling_seconds",
0000000000000000000000000000000000000000;;			Help:      "Histogram of response latency (seconds) of the gRPC until it is finished by the application.",
0000000000000000000000000000000000000000;;			Buckets:   prom.DefBuckets,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		clientHandledHistogram *prom.HistogramVec
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		prom.MustRegister(clientStartedCounter)
0000000000000000000000000000000000000000;;		prom.MustRegister(clientHandledCounter)
0000000000000000000000000000000000000000;;		prom.MustRegister(clientStreamMsgReceived)
0000000000000000000000000000000000000000;;		prom.MustRegister(clientStreamMsgSent)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EnableClientHandlingTimeHistogram turns on recording of handling time of RPCs.
0000000000000000000000000000000000000000;;	// Histogram metrics can be very expensive for Prometheus to retain and query.
0000000000000000000000000000000000000000;;	func EnableClientHandlingTimeHistogram(opts ...HistogramOption) {
0000000000000000000000000000000000000000;;		for _, o := range opts {
0000000000000000000000000000000000000000;;			o(&clientHandledHistogramOpts)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !clientHandledHistogramEnabled {
0000000000000000000000000000000000000000;;			clientHandledHistogram = prom.NewHistogramVec(
0000000000000000000000000000000000000000;;				clientHandledHistogramOpts,
0000000000000000000000000000000000000000;;				[]string{"grpc_type", "grpc_service", "grpc_method"},
0000000000000000000000000000000000000000;;			)
0000000000000000000000000000000000000000;;			prom.Register(clientHandledHistogram)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		clientHandledHistogramEnabled = true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type clientReporter struct {
0000000000000000000000000000000000000000;;		rpcType     grpcType
0000000000000000000000000000000000000000;;		serviceName string
0000000000000000000000000000000000000000;;		methodName  string
0000000000000000000000000000000000000000;;		startTime   time.Time
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newClientReporter(rpcType grpcType, fullMethod string) *clientReporter {
0000000000000000000000000000000000000000;;		r := &clientReporter{rpcType: rpcType}
0000000000000000000000000000000000000000;;		if clientHandledHistogramEnabled {
0000000000000000000000000000000000000000;;			r.startTime = time.Now()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r.serviceName, r.methodName = splitMethodName(fullMethod)
0000000000000000000000000000000000000000;;		clientStartedCounter.WithLabelValues(string(r.rpcType), r.serviceName, r.methodName).Inc()
0000000000000000000000000000000000000000;;		return r
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *clientReporter) ReceivedMessage() {
0000000000000000000000000000000000000000;;		clientStreamMsgReceived.WithLabelValues(string(r.rpcType), r.serviceName, r.methodName).Inc()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *clientReporter) SentMessage() {
0000000000000000000000000000000000000000;;		clientStreamMsgSent.WithLabelValues(string(r.rpcType), r.serviceName, r.methodName).Inc()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *clientReporter) Handled(code codes.Code) {
0000000000000000000000000000000000000000;;		clientHandledCounter.WithLabelValues(string(r.rpcType), r.serviceName, r.methodName, code.String()).Inc()
0000000000000000000000000000000000000000;;		if clientHandledHistogramEnabled {
0000000000000000000000000000000000000000;;			clientHandledHistogram.WithLabelValues(string(r.rpcType), r.serviceName, r.methodName).Observe(time.Since(r.startTime).Seconds())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
