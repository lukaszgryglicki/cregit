0000000000000000000000000000000000000000;;	// Copyright 2016 Michal Witkowski. All Rights Reserved.
0000000000000000000000000000000000000000;;	// See LICENSE for licensing terms.
550be6508d59ea184bfb64f8ae23c177b9e6d1c9;;	
0000000000000000000000000000000000000000;;	// gRPC Prometheus monitoring interceptors for server-side gRPC.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package grpc_prometheus
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;		"google.golang.org/grpc"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PreregisterServices takes a gRPC server and pre-initializes all counters to 0.
0000000000000000000000000000000000000000;;	// This allows for easier monitoring in Prometheus (no missing metrics), and should be called *after* all services have
0000000000000000000000000000000000000000;;	// been registered with the server.
0000000000000000000000000000000000000000;;	func Register(server *grpc.Server) {
0000000000000000000000000000000000000000;;		serviceInfo := server.GetServiceInfo()
0000000000000000000000000000000000000000;;		for serviceName, info := range serviceInfo {
0000000000000000000000000000000000000000;;			for _, mInfo := range info.Methods {
0000000000000000000000000000000000000000;;				preRegisterMethod(serviceName, &mInfo)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnaryServerInterceptor is a gRPC server-side interceptor that provides Prometheus monitoring for Unary RPCs.
0000000000000000000000000000000000000000;;	func UnaryServerInterceptor(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {
0000000000000000000000000000000000000000;;		monitor := newServerReporter(Unary, info.FullMethod)
0000000000000000000000000000000000000000;;		monitor.ReceivedMessage()
0000000000000000000000000000000000000000;;		resp, err := handler(ctx, req)
0000000000000000000000000000000000000000;;		monitor.Handled(grpc.Code(err))
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			monitor.SentMessage()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StreamServerInterceptor is a gRPC server-side interceptor that provides Prometheus monitoring for Streaming RPCs.
0000000000000000000000000000000000000000;;	func StreamServerInterceptor(srv interface{}, ss grpc.ServerStream, info *grpc.StreamServerInfo, handler grpc.StreamHandler) error {
0000000000000000000000000000000000000000;;		monitor := newServerReporter(streamRpcType(info), info.FullMethod)
0000000000000000000000000000000000000000;;		err := handler(srv, &monitoredServerStream{ss, monitor})
0000000000000000000000000000000000000000;;		monitor.Handled(grpc.Code(err))
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func streamRpcType(info *grpc.StreamServerInfo) grpcType {
0000000000000000000000000000000000000000;;		if info.IsClientStream && !info.IsServerStream {
0000000000000000000000000000000000000000;;			return ClientStream
0000000000000000000000000000000000000000;;		} else if !info.IsClientStream && info.IsServerStream {
0000000000000000000000000000000000000000;;			return ServerStream
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return BidiStream
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// monitoredStream wraps grpc.ServerStream allowing each Sent/Recv of message to increment counters.
0000000000000000000000000000000000000000;;	type monitoredServerStream struct {
0000000000000000000000000000000000000000;;		grpc.ServerStream
0000000000000000000000000000000000000000;;		monitor *serverReporter
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *monitoredServerStream) SendMsg(m interface{}) error {
0000000000000000000000000000000000000000;;		err := s.ServerStream.SendMsg(m)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			s.monitor.SentMessage()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *monitoredServerStream) RecvMsg(m interface{}) error {
0000000000000000000000000000000000000000;;		err := s.ServerStream.RecvMsg(m)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			s.monitor.ReceivedMessage()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
