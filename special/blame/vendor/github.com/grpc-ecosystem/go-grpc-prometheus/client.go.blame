0000000000000000000000000000000000000000;;	// Copyright 2016 Michal Witkowski. All Rights Reserved.
0000000000000000000000000000000000000000;;	// See LICENSE for licensing terms.
550be6508d59ea184bfb64f8ae23c177b9e6d1c9;;	
0000000000000000000000000000000000000000;;	// gRPC Prometheus monitoring interceptors for client-side gRPC.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package grpc_prometheus
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;		"google.golang.org/grpc"
0000000000000000000000000000000000000000;;		"google.golang.org/grpc/codes"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnaryClientInterceptor is a gRPC client-side interceptor that provides Prometheus monitoring for Unary RPCs.
0000000000000000000000000000000000000000;;	func UnaryClientInterceptor(ctx context.Context, method string, req, reply interface{}, cc *grpc.ClientConn, invoker grpc.UnaryInvoker, opts ...grpc.CallOption) error {
0000000000000000000000000000000000000000;;		monitor := newClientReporter(Unary, method)
0000000000000000000000000000000000000000;;		monitor.SentMessage()
0000000000000000000000000000000000000000;;		err := invoker(ctx, method, req, reply, cc, opts...)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			monitor.ReceivedMessage()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		monitor.Handled(grpc.Code(err))
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StreamServerInterceptor is a gRPC client-side interceptor that provides Prometheus monitoring for Streaming RPCs.
0000000000000000000000000000000000000000;;	func StreamClientInterceptor(ctx context.Context, desc *grpc.StreamDesc, cc *grpc.ClientConn, method string, streamer grpc.Streamer, opts ...grpc.CallOption) (grpc.ClientStream, error) {
0000000000000000000000000000000000000000;;		monitor := newClientReporter(clientStreamType(desc), method)
0000000000000000000000000000000000000000;;		clientStream, err := streamer(ctx, desc, cc, method, opts...)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			monitor.Handled(grpc.Code(err))
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &monitoredClientStream{clientStream, monitor}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func clientStreamType(desc *grpc.StreamDesc) grpcType {
0000000000000000000000000000000000000000;;		if desc.ClientStreams && !desc.ServerStreams {
0000000000000000000000000000000000000000;;			return ClientStream
0000000000000000000000000000000000000000;;		} else if !desc.ClientStreams && desc.ServerStreams {
0000000000000000000000000000000000000000;;			return ServerStream
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return BidiStream
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// monitoredClientStream wraps grpc.ClientStream allowing each Sent/Recv of message to increment counters.
0000000000000000000000000000000000000000;;	type monitoredClientStream struct {
0000000000000000000000000000000000000000;;		grpc.ClientStream
0000000000000000000000000000000000000000;;		monitor *clientReporter
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *monitoredClientStream) SendMsg(m interface{}) error {
0000000000000000000000000000000000000000;;		err := s.ClientStream.SendMsg(m)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			s.monitor.SentMessage()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *monitoredClientStream) RecvMsg(m interface{}) error {
0000000000000000000000000000000000000000;;		err := s.ClientStream.RecvMsg(m)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			s.monitor.ReceivedMessage()
0000000000000000000000000000000000000000;;		} else if err == io.EOF {
0000000000000000000000000000000000000000;;			s.monitor.Handled(codes.OK)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			s.monitor.Handled(grpc.Code(err))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
