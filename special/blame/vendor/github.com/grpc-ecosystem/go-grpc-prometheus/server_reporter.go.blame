0000000000000000000000000000000000000000;;	// Copyright 2016 Michal Witkowski. All Rights Reserved.
0000000000000000000000000000000000000000;;	// See LICENSE for licensing terms.
550be6508d59ea184bfb64f8ae23c177b9e6d1c9;;	
0000000000000000000000000000000000000000;;	package grpc_prometheus
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"google.golang.org/grpc/codes"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		prom "github.com/prometheus/client_golang/prometheus"
0000000000000000000000000000000000000000;;		"google.golang.org/grpc"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type grpcType string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		Unary        grpcType = "unary"
0000000000000000000000000000000000000000;;		ClientStream grpcType = "client_stream"
0000000000000000000000000000000000000000;;		ServerStream grpcType = "server_stream"
0000000000000000000000000000000000000000;;		BidiStream   grpcType = "bidi_stream"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		serverStartedCounter = prom.NewCounterVec(
0000000000000000000000000000000000000000;;			prom.CounterOpts{
0000000000000000000000000000000000000000;;				Namespace: "grpc",
0000000000000000000000000000000000000000;;				Subsystem: "server",
0000000000000000000000000000000000000000;;				Name:      "started_total",
0000000000000000000000000000000000000000;;				Help:      "Total number of RPCs started on the server.",
0000000000000000000000000000000000000000;;			}, []string{"grpc_type", "grpc_service", "grpc_method"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		serverHandledCounter = prom.NewCounterVec(
0000000000000000000000000000000000000000;;			prom.CounterOpts{
0000000000000000000000000000000000000000;;				Namespace: "grpc",
0000000000000000000000000000000000000000;;				Subsystem: "server",
0000000000000000000000000000000000000000;;				Name:      "handled_total",
0000000000000000000000000000000000000000;;				Help:      "Total number of RPCs completed on the server, regardless of success or failure.",
0000000000000000000000000000000000000000;;			}, []string{"grpc_type", "grpc_service", "grpc_method", "grpc_code"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		serverStreamMsgReceived = prom.NewCounterVec(
0000000000000000000000000000000000000000;;			prom.CounterOpts{
0000000000000000000000000000000000000000;;				Namespace: "grpc",
0000000000000000000000000000000000000000;;				Subsystem: "server",
0000000000000000000000000000000000000000;;				Name:      "msg_received_total",
0000000000000000000000000000000000000000;;				Help:      "Total number of RPC stream messages received on the server.",
0000000000000000000000000000000000000000;;			}, []string{"grpc_type", "grpc_service", "grpc_method"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		serverStreamMsgSent = prom.NewCounterVec(
0000000000000000000000000000000000000000;;			prom.CounterOpts{
0000000000000000000000000000000000000000;;				Namespace: "grpc",
0000000000000000000000000000000000000000;;				Subsystem: "server",
0000000000000000000000000000000000000000;;				Name:      "msg_sent_total",
0000000000000000000000000000000000000000;;				Help:      "Total number of gRPC stream messages sent by the server.",
0000000000000000000000000000000000000000;;			}, []string{"grpc_type", "grpc_service", "grpc_method"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		serverHandledHistogramEnabled = false
0000000000000000000000000000000000000000;;		serverHandledHistogramOpts    = prom.HistogramOpts{
0000000000000000000000000000000000000000;;			Namespace: "grpc",
0000000000000000000000000000000000000000;;			Subsystem: "server",
0000000000000000000000000000000000000000;;			Name:      "handling_seconds",
0000000000000000000000000000000000000000;;			Help:      "Histogram of response latency (seconds) of gRPC that had been application-level handled by the server.",
0000000000000000000000000000000000000000;;			Buckets:   prom.DefBuckets,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		serverHandledHistogram *prom.HistogramVec
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		prom.MustRegister(serverStartedCounter)
0000000000000000000000000000000000000000;;		prom.MustRegister(serverHandledCounter)
0000000000000000000000000000000000000000;;		prom.MustRegister(serverStreamMsgReceived)
0000000000000000000000000000000000000000;;		prom.MustRegister(serverStreamMsgSent)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HistogramOption func(*prom.HistogramOpts)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithHistogramBuckets allows you to specify custom bucket ranges for histograms if EnableHandlingTimeHistogram is on.
0000000000000000000000000000000000000000;;	func WithHistogramBuckets(buckets []float64) HistogramOption {
0000000000000000000000000000000000000000;;		return func(o *prom.HistogramOpts) { o.Buckets = buckets }
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EnableHandlingTimeHistogram turns on recording of handling time of RPCs for server-side interceptors.
0000000000000000000000000000000000000000;;	// Histogram metrics can be very expensive for Prometheus to retain and query.
0000000000000000000000000000000000000000;;	func EnableHandlingTimeHistogram(opts ...HistogramOption) {
0000000000000000000000000000000000000000;;		for _, o := range opts {
0000000000000000000000000000000000000000;;			o(&serverHandledHistogramOpts)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !serverHandledHistogramEnabled {
0000000000000000000000000000000000000000;;			serverHandledHistogram = prom.NewHistogramVec(
0000000000000000000000000000000000000000;;				serverHandledHistogramOpts,
0000000000000000000000000000000000000000;;				[]string{"grpc_type", "grpc_service", "grpc_method"},
0000000000000000000000000000000000000000;;			)
0000000000000000000000000000000000000000;;			prom.Register(serverHandledHistogram)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		serverHandledHistogramEnabled = true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type serverReporter struct {
0000000000000000000000000000000000000000;;		rpcType     grpcType
0000000000000000000000000000000000000000;;		serviceName string
0000000000000000000000000000000000000000;;		methodName  string
0000000000000000000000000000000000000000;;		startTime   time.Time
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newServerReporter(rpcType grpcType, fullMethod string) *serverReporter {
0000000000000000000000000000000000000000;;		r := &serverReporter{rpcType: rpcType}
0000000000000000000000000000000000000000;;		if serverHandledHistogramEnabled {
0000000000000000000000000000000000000000;;			r.startTime = time.Now()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r.serviceName, r.methodName = splitMethodName(fullMethod)
0000000000000000000000000000000000000000;;		serverStartedCounter.WithLabelValues(string(r.rpcType), r.serviceName, r.methodName).Inc()
0000000000000000000000000000000000000000;;		return r
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *serverReporter) ReceivedMessage() {
0000000000000000000000000000000000000000;;		serverStreamMsgReceived.WithLabelValues(string(r.rpcType), r.serviceName, r.methodName).Inc()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *serverReporter) SentMessage() {
0000000000000000000000000000000000000000;;		serverStreamMsgSent.WithLabelValues(string(r.rpcType), r.serviceName, r.methodName).Inc()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *serverReporter) Handled(code codes.Code) {
0000000000000000000000000000000000000000;;		serverHandledCounter.WithLabelValues(string(r.rpcType), r.serviceName, r.methodName, code.String()).Inc()
0000000000000000000000000000000000000000;;		if serverHandledHistogramEnabled {
0000000000000000000000000000000000000000;;			serverHandledHistogram.WithLabelValues(string(r.rpcType), r.serviceName, r.methodName).Observe(time.Since(r.startTime).Seconds())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// preRegisterMethod is invoked on Register of a Server, allowing all gRPC services labels to be pre-populated.
0000000000000000000000000000000000000000;;	func preRegisterMethod(serviceName string, mInfo *grpc.MethodInfo) {
0000000000000000000000000000000000000000;;		methodName := mInfo.Name
0000000000000000000000000000000000000000;;		methodType := string(typeFromMethodInfo(mInfo))
0000000000000000000000000000000000000000;;		// These are just references (no increments), as just referencing will create the labels but not set values.
0000000000000000000000000000000000000000;;		serverStartedCounter.GetMetricWithLabelValues(methodType, serviceName, methodName)
0000000000000000000000000000000000000000;;		serverStreamMsgReceived.GetMetricWithLabelValues(methodType, serviceName, methodName)
0000000000000000000000000000000000000000;;		serverStreamMsgSent.GetMetricWithLabelValues(methodType, serviceName, methodName)
0000000000000000000000000000000000000000;;		if serverHandledHistogramEnabled {
0000000000000000000000000000000000000000;;			serverHandledHistogram.GetMetricWithLabelValues(methodType, serviceName, methodName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, code := range allCodes {
0000000000000000000000000000000000000000;;			serverHandledCounter.GetMetricWithLabelValues(methodType, serviceName, methodName, code.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func typeFromMethodInfo(mInfo *grpc.MethodInfo) grpcType {
0000000000000000000000000000000000000000;;		if mInfo.IsClientStream == false && mInfo.IsServerStream == false {
0000000000000000000000000000000000000000;;			return Unary
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if mInfo.IsClientStream == true && mInfo.IsServerStream == false {
0000000000000000000000000000000000000000;;			return ClientStream
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if mInfo.IsClientStream == false && mInfo.IsServerStream == true {
0000000000000000000000000000000000000000;;			return ServerStream
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return BidiStream
0000000000000000000000000000000000000000;;	}
