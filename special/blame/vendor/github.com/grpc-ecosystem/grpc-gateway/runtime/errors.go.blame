0000000000000000000000000000000000000000;;	package runtime
885071b7d07344044421ffe2fd90c1bcd1ee9812;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/protobuf/proto"
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;		"google.golang.org/grpc"
0000000000000000000000000000000000000000;;		"google.golang.org/grpc/codes"
0000000000000000000000000000000000000000;;		"google.golang.org/grpc/grpclog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HTTPStatusFromCode converts a gRPC error code into the corresponding HTTP response status.
0000000000000000000000000000000000000000;;	func HTTPStatusFromCode(code codes.Code) int {
0000000000000000000000000000000000000000;;		switch code {
0000000000000000000000000000000000000000;;		case codes.OK:
0000000000000000000000000000000000000000;;			return http.StatusOK
0000000000000000000000000000000000000000;;		case codes.Canceled:
0000000000000000000000000000000000000000;;			return http.StatusRequestTimeout
0000000000000000000000000000000000000000;;		case codes.Unknown:
0000000000000000000000000000000000000000;;			return http.StatusInternalServerError
0000000000000000000000000000000000000000;;		case codes.InvalidArgument:
0000000000000000000000000000000000000000;;			return http.StatusBadRequest
0000000000000000000000000000000000000000;;		case codes.DeadlineExceeded:
0000000000000000000000000000000000000000;;			return http.StatusRequestTimeout
0000000000000000000000000000000000000000;;		case codes.NotFound:
0000000000000000000000000000000000000000;;			return http.StatusNotFound
0000000000000000000000000000000000000000;;		case codes.AlreadyExists:
0000000000000000000000000000000000000000;;			return http.StatusConflict
0000000000000000000000000000000000000000;;		case codes.PermissionDenied:
0000000000000000000000000000000000000000;;			return http.StatusForbidden
0000000000000000000000000000000000000000;;		case codes.Unauthenticated:
0000000000000000000000000000000000000000;;			return http.StatusUnauthorized
0000000000000000000000000000000000000000;;		case codes.ResourceExhausted:
0000000000000000000000000000000000000000;;			return http.StatusForbidden
0000000000000000000000000000000000000000;;		case codes.FailedPrecondition:
0000000000000000000000000000000000000000;;			return http.StatusPreconditionFailed
0000000000000000000000000000000000000000;;		case codes.Aborted:
0000000000000000000000000000000000000000;;			return http.StatusConflict
0000000000000000000000000000000000000000;;		case codes.OutOfRange:
0000000000000000000000000000000000000000;;			return http.StatusBadRequest
0000000000000000000000000000000000000000;;		case codes.Unimplemented:
0000000000000000000000000000000000000000;;			return http.StatusNotImplemented
0000000000000000000000000000000000000000;;		case codes.Internal:
0000000000000000000000000000000000000000;;			return http.StatusInternalServerError
0000000000000000000000000000000000000000;;		case codes.Unavailable:
0000000000000000000000000000000000000000;;			return http.StatusServiceUnavailable
0000000000000000000000000000000000000000;;		case codes.DataLoss:
0000000000000000000000000000000000000000;;			return http.StatusInternalServerError
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		grpclog.Printf("Unknown gRPC error code: %v", code)
0000000000000000000000000000000000000000;;		return http.StatusInternalServerError
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		// HTTPError replies to the request with the error.
0000000000000000000000000000000000000000;;		// You can set a custom function to this variable to customize error format.
0000000000000000000000000000000000000000;;		HTTPError = DefaultHTTPError
0000000000000000000000000000000000000000;;		// OtherErrorHandler handles the following error used by the gateway: StatusMethodNotAllowed StatusNotFound and StatusBadRequest
0000000000000000000000000000000000000000;;		OtherErrorHandler = DefaultOtherErrorHandler
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type errorBody struct {
0000000000000000000000000000000000000000;;		Error string `protobuf:"bytes,1,name=error" json:"error"`
0000000000000000000000000000000000000000;;		Code  int    `protobuf:"bytes,2,name=code" json:"code"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//Make this also conform to proto.Message for builtin JSONPb Marshaler
0000000000000000000000000000000000000000;;	func (e *errorBody) Reset()         { *e = errorBody{} }
0000000000000000000000000000000000000000;;	func (e *errorBody) String() string { return proto.CompactTextString(e) }
0000000000000000000000000000000000000000;;	func (*errorBody) ProtoMessage()    {}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DefaultHTTPError is the default implementation of HTTPError.
0000000000000000000000000000000000000000;;	// If "err" is an error from gRPC system, the function replies with the status code mapped by HTTPStatusFromCode.
0000000000000000000000000000000000000000;;	// If otherwise, it replies with http.StatusInternalServerError.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The response body returned by this function is a JSON object,
0000000000000000000000000000000000000000;;	// which contains a member whose key is "error" and whose value is err.Error().
0000000000000000000000000000000000000000;;	func DefaultHTTPError(ctx context.Context, marshaler Marshaler, w http.ResponseWriter, _ *http.Request, err error) {
0000000000000000000000000000000000000000;;		const fallback = `{"error": "failed to marshal error message"}`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		w.Header().Del("Trailer")
0000000000000000000000000000000000000000;;		w.Header().Set("Content-Type", marshaler.ContentType())
0000000000000000000000000000000000000000;;		body := &errorBody{
0000000000000000000000000000000000000000;;			Error: grpc.ErrorDesc(err),
0000000000000000000000000000000000000000;;			Code:  int(grpc.Code(err)),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		buf, merr := marshaler.Marshal(body)
0000000000000000000000000000000000000000;;		if merr != nil {
0000000000000000000000000000000000000000;;			grpclog.Printf("Failed to marshal error message %q: %v", body, merr)
0000000000000000000000000000000000000000;;			w.WriteHeader(http.StatusInternalServerError)
0000000000000000000000000000000000000000;;			if _, err := io.WriteString(w, fallback); err != nil {
0000000000000000000000000000000000000000;;				grpclog.Printf("Failed to write response: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		md, ok := ServerMetadataFromContext(ctx)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			grpclog.Printf("Failed to extract ServerMetadata from context")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		handleForwardResponseServerMetadata(w, md)
0000000000000000000000000000000000000000;;		handleForwardResponseTrailerHeader(w, md)
0000000000000000000000000000000000000000;;		st := HTTPStatusFromCode(grpc.Code(err))
0000000000000000000000000000000000000000;;		w.WriteHeader(st)
0000000000000000000000000000000000000000;;		if _, err := w.Write(buf); err != nil {
0000000000000000000000000000000000000000;;			grpclog.Printf("Failed to write response: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		handleForwardResponseTrailer(w, md)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DefaultOtherErrorHandler is the default implementation of OtherErrorHandler.
0000000000000000000000000000000000000000;;	// It simply writes a string representation of the given error into "w".
0000000000000000000000000000000000000000;;	func DefaultOtherErrorHandler(w http.ResponseWriter, _ *http.Request, msg string, code int) {
0000000000000000000000000000000000000000;;		http.Error(w, msg, code)
0000000000000000000000000000000000000000;;	}
