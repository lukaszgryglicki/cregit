0000000000000000000000000000000000000000;;	package runtime
885071b7d07344044421ffe2fd90c1bcd1ee9812;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/protobuf/jsonpb"
0000000000000000000000000000000000000000;;		"github.com/golang/protobuf/proto"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// JSONPb is a Marshaler which marshals/unmarshals into/from JSON
0000000000000000000000000000000000000000;;	// with the "github.com/golang/protobuf/jsonpb".
0000000000000000000000000000000000000000;;	// It supports fully functionality of protobuf unlike JSONBuiltin.
0000000000000000000000000000000000000000;;	type JSONPb jsonpb.Marshaler
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ContentType always returns "application/json".
0000000000000000000000000000000000000000;;	func (*JSONPb) ContentType() string {
0000000000000000000000000000000000000000;;		return "application/json"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Marshal marshals "v" into JSON
0000000000000000000000000000000000000000;;	// Currently it can marshal only proto.Message.
0000000000000000000000000000000000000000;;	// TODO(yugui) Support fields of primitive types in a message.
0000000000000000000000000000000000000000;;	func (j *JSONPb) Marshal(v interface{}) ([]byte, error) {
0000000000000000000000000000000000000000;;		if _, ok := v.(proto.Message); !ok {
0000000000000000000000000000000000000000;;			return j.marshalNonProtoField(v)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var buf bytes.Buffer
0000000000000000000000000000000000000000;;		if err := j.marshalTo(&buf, v); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return buf.Bytes(), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (j *JSONPb) marshalTo(w io.Writer, v interface{}) error {
0000000000000000000000000000000000000000;;		p, ok := v.(proto.Message)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			buf, err := j.marshalNonProtoField(v)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			_, err = w.Write(buf)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return (*jsonpb.Marshaler)(j).Marshal(w, p)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// marshalNonProto marshals a non-message field of a protobuf message.
0000000000000000000000000000000000000000;;	// This function does not correctly marshals arbitary data structure into JSON,
0000000000000000000000000000000000000000;;	// but it is only capable of marshaling non-message field values of protobuf,
0000000000000000000000000000000000000000;;	// i.e. primitive types, enums; pointers to primitives or enums; maps from
0000000000000000000000000000000000000000;;	// integer/string types to primitives/enums/pointers to messages.
0000000000000000000000000000000000000000;;	func (j *JSONPb) marshalNonProtoField(v interface{}) ([]byte, error) {
0000000000000000000000000000000000000000;;		rv := reflect.ValueOf(v)
0000000000000000000000000000000000000000;;		for rv.Kind() == reflect.Ptr {
0000000000000000000000000000000000000000;;			if rv.IsNil() {
0000000000000000000000000000000000000000;;				return []byte("null"), nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			rv = rv.Elem()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if rv.Kind() == reflect.Map {
0000000000000000000000000000000000000000;;			m := make(map[string]*json.RawMessage)
0000000000000000000000000000000000000000;;			for _, k := range rv.MapKeys() {
0000000000000000000000000000000000000000;;				buf, err := j.Marshal(rv.MapIndex(k).Interface())
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return nil, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				m[fmt.Sprintf("%v", k.Interface())] = (*json.RawMessage)(&buf)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if j.Indent != "" {
0000000000000000000000000000000000000000;;				return json.MarshalIndent(m, "", j.Indent)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return json.Marshal(m)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if enum, ok := rv.Interface().(protoEnum); ok && !j.EnumsAsInts {
0000000000000000000000000000000000000000;;			return json.Marshal(enum.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return json.Marshal(rv.Interface())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Unmarshal unmarshals JSON "data" into "v"
0000000000000000000000000000000000000000;;	// Currently it can marshal only proto.Message.
0000000000000000000000000000000000000000;;	// TODO(yugui) Support fields of primitive types in a message.
0000000000000000000000000000000000000000;;	func (j *JSONPb) Unmarshal(data []byte, v interface{}) error {
0000000000000000000000000000000000000000;;		return unmarshalJSONPb(data, v)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewDecoder returns a Decoder which reads JSON stream from "r".
0000000000000000000000000000000000000000;;	func (j *JSONPb) NewDecoder(r io.Reader) Decoder {
0000000000000000000000000000000000000000;;		d := json.NewDecoder(r)
0000000000000000000000000000000000000000;;		return DecoderFunc(func(v interface{}) error { return decodeJSONPb(d, v) })
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewEncoder returns an Encoder which writes JSON stream into "w".
0000000000000000000000000000000000000000;;	func (j *JSONPb) NewEncoder(w io.Writer) Encoder {
0000000000000000000000000000000000000000;;		return EncoderFunc(func(v interface{}) error { return j.marshalTo(w, v) })
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func unmarshalJSONPb(data []byte, v interface{}) error {
0000000000000000000000000000000000000000;;		d := json.NewDecoder(bytes.NewReader(data))
0000000000000000000000000000000000000000;;		return decodeJSONPb(d, v)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func decodeJSONPb(d *json.Decoder, v interface{}) error {
0000000000000000000000000000000000000000;;		p, ok := v.(proto.Message)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return decodeNonProtoField(d, v)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		unmarshaler := &jsonpb.Unmarshaler{AllowUnknownFields: true}
0000000000000000000000000000000000000000;;		return unmarshaler.UnmarshalNext(d, p)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func decodeNonProtoField(d *json.Decoder, v interface{}) error {
0000000000000000000000000000000000000000;;		rv := reflect.ValueOf(v)
0000000000000000000000000000000000000000;;		if rv.Kind() != reflect.Ptr {
0000000000000000000000000000000000000000;;			return fmt.Errorf("%T is not a pointer", v)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for rv.Kind() == reflect.Ptr {
0000000000000000000000000000000000000000;;			if rv.IsNil() {
0000000000000000000000000000000000000000;;				rv.Set(reflect.New(rv.Type().Elem()))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if rv.Type().ConvertibleTo(typeProtoMessage) {
0000000000000000000000000000000000000000;;				unmarshaler := &jsonpb.Unmarshaler{AllowUnknownFields: true}
0000000000000000000000000000000000000000;;				return unmarshaler.UnmarshalNext(d, rv.Interface().(proto.Message))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			rv = rv.Elem()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if rv.Kind() == reflect.Map {
0000000000000000000000000000000000000000;;			if rv.IsNil() {
0000000000000000000000000000000000000000;;				rv.Set(reflect.MakeMap(rv.Type()))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			conv, ok := convFromType[rv.Type().Key().Kind()]
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				return fmt.Errorf("unsupported type of map field key: %v", rv.Type().Key())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			m := make(map[string]*json.RawMessage)
0000000000000000000000000000000000000000;;			if err := d.Decode(&m); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for k, v := range m {
0000000000000000000000000000000000000000;;				result := conv.Call([]reflect.Value{reflect.ValueOf(k)})
0000000000000000000000000000000000000000;;				if err := result[1].Interface(); err != nil {
0000000000000000000000000000000000000000;;					return err.(error)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				bk := result[0]
0000000000000000000000000000000000000000;;				bv := reflect.New(rv.Type().Elem())
0000000000000000000000000000000000000000;;				if err := unmarshalJSONPb([]byte(*v), bv.Interface()); err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				rv.SetMapIndex(bk, bv.Elem())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, ok := rv.Interface().(protoEnum); ok {
0000000000000000000000000000000000000000;;			var repr interface{}
0000000000000000000000000000000000000000;;			if err := d.Decode(&repr); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			switch repr.(type) {
0000000000000000000000000000000000000000;;			case string:
0000000000000000000000000000000000000000;;				// TODO(yugui) Should use proto.StructProperties?
0000000000000000000000000000000000000000;;				return fmt.Errorf("unmarshaling of symbolic enum %q not supported: %T", repr, rv.Interface())
0000000000000000000000000000000000000000;;			case float64:
0000000000000000000000000000000000000000;;				rv.Set(reflect.ValueOf(int32(repr.(float64))).Convert(rv.Type()))
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				return fmt.Errorf("cannot assign %#v into Go type %T", repr, rv.Interface())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return d.Decode(v)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type protoEnum interface {
0000000000000000000000000000000000000000;;		fmt.Stringer
0000000000000000000000000000000000000000;;		EnumDescriptor() ([]byte, []int)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var typeProtoMessage = reflect.TypeOf((*proto.Message)(nil)).Elem()
