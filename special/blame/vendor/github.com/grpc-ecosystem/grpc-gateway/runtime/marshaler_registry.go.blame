0000000000000000000000000000000000000000;;	package runtime
885071b7d07344044421ffe2fd90c1bcd1ee9812;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MIMEWildcard is the fallback MIME type used for requests which do not match
0000000000000000000000000000000000000000;;	// a registered MIME type.
0000000000000000000000000000000000000000;;	const MIMEWildcard = "*"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		acceptHeader      = http.CanonicalHeaderKey("Accept")
0000000000000000000000000000000000000000;;		contentTypeHeader = http.CanonicalHeaderKey("Content-Type")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		defaultMarshaler = &JSONPb{OrigName: true}
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalerForRequest returns the inbound/outbound marshalers for this request.
0000000000000000000000000000000000000000;;	// It checks the registry on the ServeMux for the MIME type set by the Content-Type header.
0000000000000000000000000000000000000000;;	// If it isn't set (or the request Content-Type is empty), checks for "*".
0000000000000000000000000000000000000000;;	// If there are multiple Content-Type headers set, choose the first one that it can
0000000000000000000000000000000000000000;;	// exactly match in the registry.
0000000000000000000000000000000000000000;;	// Otherwise, it follows the above logic for "*"/InboundMarshaler/OutboundMarshaler.
0000000000000000000000000000000000000000;;	func MarshalerForRequest(mux *ServeMux, r *http.Request) (inbound Marshaler, outbound Marshaler) {
0000000000000000000000000000000000000000;;		for _, acceptVal := range r.Header[acceptHeader] {
0000000000000000000000000000000000000000;;			if m, ok := mux.marshalers.mimeMap[acceptVal]; ok {
0000000000000000000000000000000000000000;;				outbound = m
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, contentTypeVal := range r.Header[contentTypeHeader] {
0000000000000000000000000000000000000000;;			if m, ok := mux.marshalers.mimeMap[contentTypeVal]; ok {
0000000000000000000000000000000000000000;;				inbound = m
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if inbound == nil {
0000000000000000000000000000000000000000;;			inbound = mux.marshalers.mimeMap[MIMEWildcard]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if outbound == nil {
0000000000000000000000000000000000000000;;			outbound = inbound
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return inbound, outbound
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// marshalerRegistry is a mapping from MIME types to Marshalers.
0000000000000000000000000000000000000000;;	type marshalerRegistry struct {
0000000000000000000000000000000000000000;;		mimeMap map[string]Marshaler
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// add adds a marshaler for a case-sensitive MIME type string ("*" to match any
0000000000000000000000000000000000000000;;	// MIME type).
0000000000000000000000000000000000000000;;	func (m marshalerRegistry) add(mime string, marshaler Marshaler) error {
0000000000000000000000000000000000000000;;		if len(mime) == 0 {
0000000000000000000000000000000000000000;;			return errors.New("empty MIME type")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		m.mimeMap[mime] = marshaler
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// makeMarshalerMIMERegistry returns a new registry of marshalers.
0000000000000000000000000000000000000000;;	// It allows for a mapping of case-sensitive Content-Type MIME type string to runtime.Marshaler interfaces.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For example, you could allow the client to specify the use of the runtime.JSONPb marshaler
0000000000000000000000000000000000000000;;	// with a "applicaton/jsonpb" Content-Type and the use of the runtime.JSONBuiltin marshaler
0000000000000000000000000000000000000000;;	// with a "application/json" Content-Type.
0000000000000000000000000000000000000000;;	// "*" can be used to match any Content-Type.
0000000000000000000000000000000000000000;;	// This can be attached to a ServerMux with the marshaler option.
0000000000000000000000000000000000000000;;	func makeMarshalerMIMERegistry() marshalerRegistry {
0000000000000000000000000000000000000000;;		return marshalerRegistry{
0000000000000000000000000000000000000000;;			mimeMap: map[string]Marshaler{
0000000000000000000000000000000000000000;;				MIMEWildcard: defaultMarshaler,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithMarshalerOption returns a ServeMuxOption which associates inbound and outbound
0000000000000000000000000000000000000000;;	// Marshalers to a MIME type in mux.
0000000000000000000000000000000000000000;;	func WithMarshalerOption(mime string, marshaler Marshaler) ServeMuxOption {
0000000000000000000000000000000000000000;;		return func(mux *ServeMux) {
0000000000000000000000000000000000000000;;			if err := mux.marshalers.add(mime, marshaler); err != nil {
0000000000000000000000000000000000000000;;				panic(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
