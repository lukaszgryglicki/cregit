0000000000000000000000000000000000000000;;	package runtime
885071b7d07344044421ffe2fd90c1bcd1ee9812;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// JSONBuiltin is a Marshaler which marshals/unmarshals into/from JSON
0000000000000000000000000000000000000000;;	// with the standard "encoding/json" package of Golang.
0000000000000000000000000000000000000000;;	// Although it is generally faster for simple proto messages than JSONPb,
0000000000000000000000000000000000000000;;	// it does not support advanced features of protobuf, e.g. map, oneof, ....
0000000000000000000000000000000000000000;;	type JSONBuiltin struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ContentType always Returns "application/json".
0000000000000000000000000000000000000000;;	func (*JSONBuiltin) ContentType() string {
0000000000000000000000000000000000000000;;		return "application/json"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Marshal marshals "v" into JSON
0000000000000000000000000000000000000000;;	func (j *JSONBuiltin) Marshal(v interface{}) ([]byte, error) {
0000000000000000000000000000000000000000;;		return json.Marshal(v)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Unmarshal unmarshals JSON data into "v".
0000000000000000000000000000000000000000;;	func (j *JSONBuiltin) Unmarshal(data []byte, v interface{}) error {
0000000000000000000000000000000000000000;;		return json.Unmarshal(data, v)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewDecoder returns a Decoder which reads JSON stream from "r".
0000000000000000000000000000000000000000;;	func (j *JSONBuiltin) NewDecoder(r io.Reader) Decoder {
0000000000000000000000000000000000000000;;		return json.NewDecoder(r)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewEncoder returns an Encoder which writes JSON stream into "w".
0000000000000000000000000000000000000000;;	func (j *JSONBuiltin) NewEncoder(w io.Writer) Encoder {
0000000000000000000000000000000000000000;;		return json.NewEncoder(w)
0000000000000000000000000000000000000000;;	}
