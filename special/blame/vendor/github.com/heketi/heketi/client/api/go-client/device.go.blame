0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Copyright (c) 2015 The heketi Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This file is licensed to you under your choice of the GNU Lesser
0000000000000000000000000000000000000000;;	// General Public License, version 3 or any later version (LGPLv3 or
0000000000000000000000000000000000000000;;	// later), as published by the Free Software Foundation,
0000000000000000000000000000000000000000;;	// or under the Apache License, Version 2.0 <LICENSE-APACHE2 or
0000000000000000000000000000000000000000;;	// http://www.apache.org/licenses/LICENSE-2.0>.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// You may not use this file except in compliance with those terms.
0000000000000000000000000000000000000000;;	//
4f4f87343f0629f7e0147e976fa9be85e68cda09;;	
0000000000000000000000000000000000000000;;	package client
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/heketi/heketi/pkg/glusterfs/api"
0000000000000000000000000000000000000000;;		"github.com/heketi/heketi/pkg/utils"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *Client) DeviceAdd(request *api.DeviceAddRequest) error {
0000000000000000000000000000000000000000;;		// Marshal request to JSON
0000000000000000000000000000000000000000;;		buffer, err := json.Marshal(request)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Create a request
0000000000000000000000000000000000000000;;		req, err := http.NewRequest("POST", c.host+"/devices", bytes.NewBuffer(buffer))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		req.Header.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Set token
0000000000000000000000000000000000000000;;		err = c.setToken(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Send request
0000000000000000000000000000000000000000;;		r, err := c.do(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if r.StatusCode != http.StatusAccepted {
0000000000000000000000000000000000000000;;			return utils.GetErrorFromResponse(r)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Wait for response
0000000000000000000000000000000000000000;;		r, err = c.waitForResponseWithTimer(r, time.Second)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if r.StatusCode != http.StatusNoContent {
0000000000000000000000000000000000000000;;			return utils.GetErrorFromResponse(r)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *Client) DeviceInfo(id string) (*api.DeviceInfoResponse, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Create request
0000000000000000000000000000000000000000;;		req, err := http.NewRequest("GET", c.host+"/devices/"+id, nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Set token
0000000000000000000000000000000000000000;;		err = c.setToken(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Get info
0000000000000000000000000000000000000000;;		r, err := c.do(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if r.StatusCode != http.StatusOK {
0000000000000000000000000000000000000000;;			return nil, utils.GetErrorFromResponse(r)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Read JSON response
0000000000000000000000000000000000000000;;		var device api.DeviceInfoResponse
0000000000000000000000000000000000000000;;		err = utils.GetJsonFromResponse(r, &device)
0000000000000000000000000000000000000000;;		r.Body.Close()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &device, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *Client) DeviceDelete(id string) error {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Create a request
0000000000000000000000000000000000000000;;		req, err := http.NewRequest("DELETE", c.host+"/devices/"+id, nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Set token
0000000000000000000000000000000000000000;;		err = c.setToken(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Send request
0000000000000000000000000000000000000000;;		r, err := c.do(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if r.StatusCode != http.StatusAccepted {
0000000000000000000000000000000000000000;;			return utils.GetErrorFromResponse(r)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Wait for response
0000000000000000000000000000000000000000;;		r, err = c.waitForResponseWithTimer(r, time.Second)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if r.StatusCode != http.StatusNoContent {
0000000000000000000000000000000000000000;;			return utils.GetErrorFromResponse(r)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *Client) DeviceState(id string,
0000000000000000000000000000000000000000;;		request *api.StateRequest) error {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Marshal request to JSON
0000000000000000000000000000000000000000;;		buffer, err := json.Marshal(request)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Create a request
0000000000000000000000000000000000000000;;		req, err := http.NewRequest("POST",
0000000000000000000000000000000000000000;;			c.host+"/devices/"+id+"/state",
0000000000000000000000000000000000000000;;			bytes.NewBuffer(buffer))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		req.Header.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Set token
0000000000000000000000000000000000000000;;		err = c.setToken(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Get info
0000000000000000000000000000000000000000;;		r, err := c.do(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if r.StatusCode != http.StatusAccepted {
0000000000000000000000000000000000000000;;			return utils.GetErrorFromResponse(r)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Wait for response
0000000000000000000000000000000000000000;;		r, err = c.waitForResponseWithTimer(r, time.Second)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if r.StatusCode != http.StatusNoContent {
0000000000000000000000000000000000000000;;			return utils.GetErrorFromResponse(r)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
