0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Copyright (c) 2015 The heketi Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This file is licensed to you under your choice of the GNU Lesser
0000000000000000000000000000000000000000;;	// General Public License, version 3 or any later version (LGPLv3 or
0000000000000000000000000000000000000000;;	// later), as published by the Free Software Foundation,
0000000000000000000000000000000000000000;;	// or under the Apache License, Version 2.0 <LICENSE-APACHE2 or
0000000000000000000000000000000000000000;;	// http://www.apache.org/licenses/LICENSE-2.0>.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// You may not use this file except in compliance with those terms.
0000000000000000000000000000000000000000;;	//
4f4f87343f0629f7e0147e976fa9be85e68cda09;;	
0000000000000000000000000000000000000000;;	package client
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/heketi/heketi/pkg/glusterfs/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *Client) TopologyInfo() (*api.TopologyInfoResponse, error) {
0000000000000000000000000000000000000000;;		topo := &api.TopologyInfoResponse{
0000000000000000000000000000000000000000;;			ClusterList: make([]api.Cluster, 0),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		clusterlist, err := c.ClusterList()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, cluster := range clusterlist.Clusters {
0000000000000000000000000000000000000000;;			clusteri, err := c.ClusterInfo(cluster)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			cluster := api.Cluster{
0000000000000000000000000000000000000000;;				Id:      clusteri.Id,
0000000000000000000000000000000000000000;;				Volumes: make([]api.VolumeInfoResponse, 0),
0000000000000000000000000000000000000000;;				Nodes:   make([]api.NodeInfoResponse, 0),
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			cluster.Id = clusteri.Id
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Iterate over the volume list in the cluster
0000000000000000000000000000000000000000;;			for _, volumes := range clusteri.Volumes {
0000000000000000000000000000000000000000;;				volumesi, err := c.VolumeInfo(volumes)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return nil, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if volumesi.Cluster == cluster.Id {
0000000000000000000000000000000000000000;;					cluster.Volumes = append(cluster.Volumes, *volumesi)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Iterate over the nodes in the cluster
0000000000000000000000000000000000000000;;			for _, node := range clusteri.Nodes {
0000000000000000000000000000000000000000;;				nodei, err := c.NodeInfo(string(node))
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return nil, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				cluster.Nodes = append(cluster.Nodes, *nodei)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			topo.ClusterList = append(topo.ClusterList, cluster)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return topo, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
