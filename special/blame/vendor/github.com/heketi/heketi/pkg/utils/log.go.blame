0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Copyright (c) 2015 The heketi Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This file is licensed to you under your choice of the GNU Lesser
0000000000000000000000000000000000000000;;	// General Public License, version 3 or any later version (LGPLv3 or
0000000000000000000000000000000000000000;;	// later), or the GNU General Public License, version 2 (GPLv2), in all
0000000000000000000000000000000000000000;;	// cases as published by the Free Software Foundation.
0000000000000000000000000000000000000000;;	//
4f4f87343f0629f7e0147e976fa9be85e68cda09;;	
0000000000000000000000000000000000000000;;	package utils
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"log"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"runtime"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/lpabon/godbc"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LogLevel int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Log levels
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		LEVEL_NOLOG LogLevel = iota
0000000000000000000000000000000000000000;;		LEVEL_CRITICAL
0000000000000000000000000000000000000000;;		LEVEL_ERROR
0000000000000000000000000000000000000000;;		LEVEL_WARNING
0000000000000000000000000000000000000000;;		LEVEL_INFO
0000000000000000000000000000000000000000;;		LEVEL_DEBUG
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		stderr io.Writer = os.Stderr
0000000000000000000000000000000000000000;;		stdout io.Writer = os.Stdout
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Logger struct {
0000000000000000000000000000000000000000;;		critlog, errorlog, infolog *log.Logger
0000000000000000000000000000000000000000;;		debuglog, warninglog       *log.Logger
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		level LogLevel
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func logWithLongFile(l *log.Logger, format string, v ...interface{}) {
0000000000000000000000000000000000000000;;		_, file, line, _ := runtime.Caller(2)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Shorten the path.
0000000000000000000000000000000000000000;;		// From
0000000000000000000000000000000000000000;;		// /builddir/build/BUILD/heketi-3f4a5b1b6edff87232e8b24533c53b4151ebd9c7/src/github.com/heketi/heketi/apps/glusterfs/volume_entry.go
0000000000000000000000000000000000000000;;		// to
0000000000000000000000000000000000000000;;		// src/github.com/heketi/heketi/apps/glusterfs/volume_entry.go
0000000000000000000000000000000000000000;;		i := strings.Index(file, "/src/")
0000000000000000000000000000000000000000;;		if i == -1 {
0000000000000000000000000000000000000000;;			i = 0
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		l.Print(fmt.Sprintf("%v:%v: ", file[i:], line) +
0000000000000000000000000000000000000000;;			fmt.Sprintf(format, v...))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create a new logger
0000000000000000000000000000000000000000;;	func NewLogger(prefix string, level LogLevel) *Logger {
0000000000000000000000000000000000000000;;		godbc.Require(level >= 0, level)
0000000000000000000000000000000000000000;;		godbc.Require(level <= LEVEL_DEBUG, level)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		l := &Logger{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if level == LEVEL_NOLOG {
0000000000000000000000000000000000000000;;			l.level = LEVEL_DEBUG
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			l.level = level
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		l.critlog = log.New(stderr, prefix+" CRITICAL ", log.LstdFlags)
0000000000000000000000000000000000000000;;		l.errorlog = log.New(stderr, prefix+" ERROR ", log.LstdFlags)
0000000000000000000000000000000000000000;;		l.warninglog = log.New(stdout, prefix+" WARNING ", log.LstdFlags)
0000000000000000000000000000000000000000;;		l.infolog = log.New(stdout, prefix+" INFO ", log.LstdFlags)
0000000000000000000000000000000000000000;;		l.debuglog = log.New(stdout, prefix+" DEBUG ", log.LstdFlags)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		godbc.Ensure(l.critlog != nil)
0000000000000000000000000000000000000000;;		godbc.Ensure(l.errorlog != nil)
0000000000000000000000000000000000000000;;		godbc.Ensure(l.warninglog != nil)
0000000000000000000000000000000000000000;;		godbc.Ensure(l.infolog != nil)
0000000000000000000000000000000000000000;;		godbc.Ensure(l.debuglog != nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Return current level
0000000000000000000000000000000000000000;;	func (l *Logger) Level() LogLevel {
0000000000000000000000000000000000000000;;		return l.level
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Set level
0000000000000000000000000000000000000000;;	func (l *Logger) SetLevel(level LogLevel) {
0000000000000000000000000000000000000000;;		l.level = level
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Log critical information
0000000000000000000000000000000000000000;;	func (l *Logger) Critical(format string, v ...interface{}) {
0000000000000000000000000000000000000000;;		if l.level >= LEVEL_CRITICAL {
0000000000000000000000000000000000000000;;			logWithLongFile(l.critlog, format, v...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Log error string
0000000000000000000000000000000000000000;;	func (l *Logger) LogError(format string, v ...interface{}) error {
0000000000000000000000000000000000000000;;		if l.level >= LEVEL_ERROR {
0000000000000000000000000000000000000000;;			logWithLongFile(l.errorlog, format, v...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return fmt.Errorf(format, v...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Log error variable
0000000000000000000000000000000000000000;;	func (l *Logger) Err(err error) error {
0000000000000000000000000000000000000000;;		if l.level >= LEVEL_ERROR {
0000000000000000000000000000000000000000;;			logWithLongFile(l.errorlog, "%v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Log warning information
0000000000000000000000000000000000000000;;	func (l *Logger) Warning(format string, v ...interface{}) {
0000000000000000000000000000000000000000;;		if l.level >= LEVEL_WARNING {
0000000000000000000000000000000000000000;;			l.warninglog.Printf(format, v...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Log error variable as a warning
0000000000000000000000000000000000000000;;	func (l *Logger) WarnErr(err error) error {
0000000000000000000000000000000000000000;;		if l.level >= LEVEL_WARNING {
0000000000000000000000000000000000000000;;			logWithLongFile(l.warninglog, "%v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Log string
0000000000000000000000000000000000000000;;	func (l *Logger) Info(format string, v ...interface{}) {
0000000000000000000000000000000000000000;;		if l.level >= LEVEL_INFO {
0000000000000000000000000000000000000000;;			l.infolog.Printf(format, v...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Log string as debug
0000000000000000000000000000000000000000;;	func (l *Logger) Debug(format string, v ...interface{}) {
0000000000000000000000000000000000000000;;		if l.level >= LEVEL_DEBUG {
0000000000000000000000000000000000000000;;			logWithLongFile(l.debuglog, format, v...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
