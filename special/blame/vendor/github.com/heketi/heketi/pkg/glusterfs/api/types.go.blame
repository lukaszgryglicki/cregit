0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Copyright (c) 2016 The heketi Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This file is licensed to you under your choice of the GNU Lesser
0000000000000000000000000000000000000000;;	// General Public License, version 3 or any later version (LGPLv3 or
0000000000000000000000000000000000000000;;	// later), as published by the Free Software Foundation,
0000000000000000000000000000000000000000;;	// or under the Apache License, Version 2.0 <LICENSE-APACHE2 or
0000000000000000000000000000000000000000;;	// http://www.apache.org/licenses/LICENSE-2.0>.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// You may not use this file except in compliance with those terms.
0000000000000000000000000000000000000000;;	//
4f4f87343f0629f7e0147e976fa9be85e68cda09;;	
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Please see https://github.com/heketi/heketi/wiki/API
0000000000000000000000000000000000000000;;	// for documentation
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	package api
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// State
0000000000000000000000000000000000000000;;	type EntryState string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		EntryStateUnknown EntryState = ""
0000000000000000000000000000000000000000;;		EntryStateOnline  EntryState = "online"
0000000000000000000000000000000000000000;;		EntryStateOffline EntryState = "offline"
0000000000000000000000000000000000000000;;		EntryStateFailed  EntryState = "failed"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DurabilityType string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		DurabilityReplicate      DurabilityType = "replicate"
0000000000000000000000000000000000000000;;		DurabilityDistributeOnly DurabilityType = "none"
0000000000000000000000000000000000000000;;		DurabilityEC             DurabilityType = "disperse"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Common
0000000000000000000000000000000000000000;;	type StateRequest struct {
0000000000000000000000000000000000000000;;		State EntryState `json:"state"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Storage values in KB
0000000000000000000000000000000000000000;;	type StorageSize struct {
0000000000000000000000000000000000000000;;		Total uint64 `json:"total"`
0000000000000000000000000000000000000000;;		Free  uint64 `json:"free"`
0000000000000000000000000000000000000000;;		Used  uint64 `json:"used"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostAddresses struct {
0000000000000000000000000000000000000000;;		Manage  sort.StringSlice `json:"manage"`
0000000000000000000000000000000000000000;;		Storage sort.StringSlice `json:"storage"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Brick
0000000000000000000000000000000000000000;;	type BrickInfo struct {
0000000000000000000000000000000000000000;;		Id       string `json:"id"`
0000000000000000000000000000000000000000;;		Path     string `json:"path"`
0000000000000000000000000000000000000000;;		DeviceId string `json:"device"`
0000000000000000000000000000000000000000;;		NodeId   string `json:"node"`
0000000000000000000000000000000000000000;;		VolumeId string `json:"volume"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Size in KB
0000000000000000000000000000000000000000;;		Size uint64 `json:"size"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Device
0000000000000000000000000000000000000000;;	type Device struct {
0000000000000000000000000000000000000000;;		Name string `json:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeviceAddRequest struct {
0000000000000000000000000000000000000000;;		Device
0000000000000000000000000000000000000000;;		NodeId string `json:"node"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeviceInfo struct {
0000000000000000000000000000000000000000;;		Device
0000000000000000000000000000000000000000;;		Storage StorageSize `json:"storage"`
0000000000000000000000000000000000000000;;		Id      string      `json:"id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeviceInfoResponse struct {
0000000000000000000000000000000000000000;;		DeviceInfo
0000000000000000000000000000000000000000;;		State  EntryState  `json:"state"`
0000000000000000000000000000000000000000;;		Bricks []BrickInfo `json:"bricks"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Node
0000000000000000000000000000000000000000;;	type NodeAddRequest struct {
0000000000000000000000000000000000000000;;		Zone      int           `json:"zone"`
0000000000000000000000000000000000000000;;		Hostnames HostAddresses `json:"hostnames"`
0000000000000000000000000000000000000000;;		ClusterId string        `json:"cluster"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NodeInfo struct {
0000000000000000000000000000000000000000;;		NodeAddRequest
0000000000000000000000000000000000000000;;		Id string `json:"id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NodeInfoResponse struct {
0000000000000000000000000000000000000000;;		NodeInfo
0000000000000000000000000000000000000000;;		State       EntryState           `json:"state"`
0000000000000000000000000000000000000000;;		DevicesInfo []DeviceInfoResponse `json:"devices"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Cluster
0000000000000000000000000000000000000000;;	type Cluster struct {
0000000000000000000000000000000000000000;;		Volumes []VolumeInfoResponse `json:"volumes"`
0000000000000000000000000000000000000000;;		Nodes   []NodeInfoResponse   `json:"nodes"`
0000000000000000000000000000000000000000;;		Id      string               `json:"id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TopologyInfoResponse struct {
0000000000000000000000000000000000000000;;		ClusterList []Cluster `json:"clusters"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterInfoResponse struct {
0000000000000000000000000000000000000000;;		Id      string           `json:"id"`
0000000000000000000000000000000000000000;;		Nodes   sort.StringSlice `json:"nodes"`
0000000000000000000000000000000000000000;;		Volumes sort.StringSlice `json:"volumes"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterListResponse struct {
0000000000000000000000000000000000000000;;		Clusters []string `json:"clusters"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Durabilities
0000000000000000000000000000000000000000;;	type ReplicaDurability struct {
0000000000000000000000000000000000000000;;		Replica int `json:"replica,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DisperseDurability struct {
0000000000000000000000000000000000000000;;		Data       int `json:"data,omitempty"`
0000000000000000000000000000000000000000;;		Redundancy int `json:"redundancy,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Volume
0000000000000000000000000000000000000000;;	type VolumeDurabilityInfo struct {
0000000000000000000000000000000000000000;;		Type      DurabilityType     `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Replicate ReplicaDurability  `json:"replicate,omitempty"`
0000000000000000000000000000000000000000;;		Disperse  DisperseDurability `json:"disperse,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VolumeCreateRequest struct {
0000000000000000000000000000000000000000;;		// Size in GB
0000000000000000000000000000000000000000;;		Size                 int                  `json:"size"`
0000000000000000000000000000000000000000;;		Clusters             []string             `json:"clusters,omitempty"`
0000000000000000000000000000000000000000;;		Name                 string               `json:"name"`
0000000000000000000000000000000000000000;;		Durability           VolumeDurabilityInfo `json:"durability,omitempty"`
0000000000000000000000000000000000000000;;		Gid                  int64                `json:"gid,omitempty"`
0000000000000000000000000000000000000000;;		GlusterVolumeOptions []string             `json:"glustervolumeoptions,omitempty"`
0000000000000000000000000000000000000000;;		Snapshot             struct {
0000000000000000000000000000000000000000;;			Enable bool    `json:"enable"`
0000000000000000000000000000000000000000;;			Factor float32 `json:"factor"`
0000000000000000000000000000000000000000;;		} `json:"snapshot"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VolumeInfo struct {
0000000000000000000000000000000000000000;;		VolumeCreateRequest
0000000000000000000000000000000000000000;;		Id      string `json:"id"`
0000000000000000000000000000000000000000;;		Cluster string `json:"cluster"`
0000000000000000000000000000000000000000;;		Mount   struct {
0000000000000000000000000000000000000000;;			GlusterFS struct {
0000000000000000000000000000000000000000;;				Hosts      []string          `json:"hosts"`
0000000000000000000000000000000000000000;;				MountPoint string            `json:"device"`
0000000000000000000000000000000000000000;;				Options    map[string]string `json:"options"`
0000000000000000000000000000000000000000;;			} `json:"glusterfs"`
0000000000000000000000000000000000000000;;		} `json:"mount"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VolumeInfoResponse struct {
0000000000000000000000000000000000000000;;		VolumeInfo
0000000000000000000000000000000000000000;;		Bricks []BrickInfo `json:"bricks"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VolumeListResponse struct {
0000000000000000000000000000000000000000;;		Volumes []string `json:"volumes"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VolumeExpandRequest struct {
0000000000000000000000000000000000000000;;		Size int `json:"expand_size"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Constructors
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewVolumeInfoResponse() *VolumeInfoResponse {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		info := &VolumeInfoResponse{}
0000000000000000000000000000000000000000;;		info.Mount.GlusterFS.Options = make(map[string]string)
0000000000000000000000000000000000000000;;		info.Bricks = make([]BrickInfo, 0)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return info
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String functions
0000000000000000000000000000000000000000;;	func (v *VolumeInfoResponse) String() string {
0000000000000000000000000000000000000000;;		s := fmt.Sprintf("Name: %v\n"+
0000000000000000000000000000000000000000;;			"Size: %v\n"+
0000000000000000000000000000000000000000;;			"Volume Id: %v\n"+
0000000000000000000000000000000000000000;;			"Cluster Id: %v\n"+
0000000000000000000000000000000000000000;;			"Mount: %v\n"+
0000000000000000000000000000000000000000;;			"Mount Options: backup-volfile-servers=%v\n"+
0000000000000000000000000000000000000000;;			"Durability Type: %v\n",
0000000000000000000000000000000000000000;;			v.Name,
0000000000000000000000000000000000000000;;			v.Size,
0000000000000000000000000000000000000000;;			v.Id,
0000000000000000000000000000000000000000;;			v.Cluster,
0000000000000000000000000000000000000000;;			v.Mount.GlusterFS.MountPoint,
0000000000000000000000000000000000000000;;			v.Mount.GlusterFS.Options["backup-volfile-servers"],
0000000000000000000000000000000000000000;;			v.Durability.Type)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch v.Durability.Type {
0000000000000000000000000000000000000000;;		case DurabilityEC:
0000000000000000000000000000000000000000;;			s += fmt.Sprintf("Disperse Data: %v\n"+
0000000000000000000000000000000000000000;;				"Disperse Redundancy: %v\n",
0000000000000000000000000000000000000000;;				v.Durability.Disperse.Data,
0000000000000000000000000000000000000000;;				v.Durability.Disperse.Redundancy)
0000000000000000000000000000000000000000;;		case DurabilityReplicate:
0000000000000000000000000000000000000000;;			s += fmt.Sprintf("Distributed+Replica: %v\n",
0000000000000000000000000000000000000000;;				v.Durability.Replicate.Replica)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if v.Snapshot.Enable {
0000000000000000000000000000000000000000;;			s += fmt.Sprintf("Snapshot Factor: %.2f\n",
0000000000000000000000000000000000000000;;				v.Snapshot.Factor)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		/*
0000000000000000000000000000000000000000;;			s += "\nBricks:\n"
0000000000000000000000000000000000000000;;			for _, b := range v.Bricks {
0000000000000000000000000000000000000000;;				s += fmt.Sprintf("Id: %v\n"+
0000000000000000000000000000000000000000;;					"Path: %v\n"+
0000000000000000000000000000000000000000;;					"Size (GiB): %v\n"+
0000000000000000000000000000000000000000;;					"Node: %v\n"+
0000000000000000000000000000000000000000;;					"Device: %v\n\n",
0000000000000000000000000000000000000000;;					b.Id,
0000000000000000000000000000000000000000;;					b.Path,
0000000000000000000000000000000000000000;;					b.Size/(1024*1024),
0000000000000000000000000000000000000000;;					b.NodeId,
0000000000000000000000000000000000000000;;					b.DeviceId)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
