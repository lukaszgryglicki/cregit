0000000000000000000000000000000000000000;;	## go-httpclient
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	**requires Go 1.1+** as of `v0.4.0` the API has been completely re-written for Go 1.1 (for a Go
0000000000000000000000000000000000000000;;	1.0.x compatible release see [1adef50](https://github.com/mreiferson/go-httpclient/tree/1adef50))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	[![Build
0000000000000000000000000000000000000000;;	Status](https://secure.travis-ci.org/mreiferson/go-httpclient.png?branch=master)](http://travis-ci.org/mreiferson/go-httpclient)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Provides an HTTP Transport that implements the `RoundTripper` interface and
0000000000000000000000000000000000000000;;	can be used as a built in replacement for the standard library's, providing:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	 * connection timeouts
0000000000000000000000000000000000000000;;	 * request timeouts
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	This is a thin wrapper around `http.Transport` that sets dial timeouts and uses
0000000000000000000000000000000000000000;;	Go's internal timer scheduler to call the Go 1.1+ `CancelRequest()` API.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### Example
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	transport := &httpclient.Transport{
0000000000000000000000000000000000000000;;	    ConnectTimeout:        1*time.Second,
0000000000000000000000000000000000000000;;	    RequestTimeout:        10*time.Second,
0000000000000000000000000000000000000000;;	    ResponseHeaderTimeout: 5*time.Second,
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	defer transport.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	client := &http.Client{Transport: transport}
0000000000000000000000000000000000000000;;	req, _ := http.NewRequest("GET", "http://127.0.0.1/test", nil)
0000000000000000000000000000000000000000;;	resp, err := client.Do(req)
0000000000000000000000000000000000000000;;	if err != nil {
0000000000000000000000000000000000000000;;	    return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	defer resp.Body.Close()
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*Note:* you will want to re-use a single client object rather than creating one for each request, otherwise you will end up [leaking connections](https://code.google.com/p/go/issues/detail?id=4049#c3).
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### Reference Docs
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	For API docs see [godoc](http://godoc.org/github.com/mreiferson/go-httpclient).
