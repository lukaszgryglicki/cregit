0000000000000000000000000000000000000000;;	package zfs
89bc075ca22301fc4fe03dcaa8c8fcf6f0b87b87;Godeps/_workspace/src/github.com/mistifyio/go-zfs/zpool.go[Godeps/_workspace/src/github.com/mistifyio/go-zfs/zpool.go][vendor/github.com/mistifyio/go-zfs/zpool.go];	
0000000000000000000000000000000000000000;;	// ZFS zpool states, which can indicate if a pool is online, offline,
0000000000000000000000000000000000000000;;	// degraded, etc.  More information regarding zpool states can be found here:
0000000000000000000000000000000000000000;;	// https://docs.oracle.com/cd/E19253-01/819-5461/gamno/index.html.
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		ZpoolOnline   = "ONLINE"
0000000000000000000000000000000000000000;;		ZpoolDegraded = "DEGRADED"
0000000000000000000000000000000000000000;;		ZpoolFaulted  = "FAULTED"
0000000000000000000000000000000000000000;;		ZpoolOffline  = "OFFLINE"
0000000000000000000000000000000000000000;;		ZpoolUnavail  = "UNAVAIL"
0000000000000000000000000000000000000000;;		ZpoolRemoved  = "REMOVED"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Zpool is a ZFS zpool.  A pool is a top-level structure in ZFS, and can
0000000000000000000000000000000000000000;;	// contain many descendent datasets.
0000000000000000000000000000000000000000;;	type Zpool struct {
0000000000000000000000000000000000000000;;		Name      string
0000000000000000000000000000000000000000;;		Health    string
0000000000000000000000000000000000000000;;		Allocated uint64
0000000000000000000000000000000000000000;;		Size      uint64
0000000000000000000000000000000000000000;;		Free      uint64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// zpool is a helper function to wrap typical calls to zpool.
0000000000000000000000000000000000000000;;	func zpool(arg ...string) ([][]string, error) {
0000000000000000000000000000000000000000;;		c := command{Command: "zpool"}
0000000000000000000000000000000000000000;;		return c.Run(arg...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetZpool retrieves a single ZFS zpool by name.
0000000000000000000000000000000000000000;;	func GetZpool(name string) (*Zpool, error) {
0000000000000000000000000000000000000000;;		out, err := zpool("get", "all", "-p", name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// there is no -H
0000000000000000000000000000000000000000;;		out = out[1:]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		z := &Zpool{Name: name}
0000000000000000000000000000000000000000;;		for _, line := range out {
0000000000000000000000000000000000000000;;			if err := z.parseLine(line); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return z, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Datasets returns a slice of all ZFS datasets in a zpool.
0000000000000000000000000000000000000000;;	func (z *Zpool) Datasets() ([]*Dataset, error) {
0000000000000000000000000000000000000000;;		return Datasets(z.Name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Snapshots returns a slice of all ZFS snapshots in a zpool.
0000000000000000000000000000000000000000;;	func (z *Zpool) Snapshots() ([]*Dataset, error) {
0000000000000000000000000000000000000000;;		return Snapshots(z.Name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateZpool creates a new ZFS zpool with the specified name, properties,
0000000000000000000000000000000000000000;;	// and optional arguments.
0000000000000000000000000000000000000000;;	// A full list of available ZFS properties and command-line arguments may be
0000000000000000000000000000000000000000;;	// found here: https://www.freebsd.org/cgi/man.cgi?zfs(8).
0000000000000000000000000000000000000000;;	func CreateZpool(name string, properties map[string]string, args ...string) (*Zpool, error) {
0000000000000000000000000000000000000000;;		cli := make([]string, 1, 4)
0000000000000000000000000000000000000000;;		cli[0] = "create"
0000000000000000000000000000000000000000;;		if properties != nil {
0000000000000000000000000000000000000000;;			cli = append(cli, propsSlice(properties)...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cli = append(cli, name)
0000000000000000000000000000000000000000;;		cli = append(cli, args...)
0000000000000000000000000000000000000000;;		_, err := zpool(cli...)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &Zpool{Name: name}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Destroy destroys a ZFS zpool by name.
0000000000000000000000000000000000000000;;	func (z *Zpool) Destroy() error {
0000000000000000000000000000000000000000;;		_, err := zpool("destroy", z.Name)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListZpools list all ZFS zpools accessible on the current system.
0000000000000000000000000000000000000000;;	func ListZpools() ([]*Zpool, error) {
0000000000000000000000000000000000000000;;		args := []string{"list", "-Ho", "name"}
0000000000000000000000000000000000000000;;		out, err := zpool(args...)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var pools []*Zpool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, line := range out {
0000000000000000000000000000000000000000;;			z, err := GetZpool(line[0])
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			pools = append(pools, z)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return pools, nil
0000000000000000000000000000000000000000;;	}
