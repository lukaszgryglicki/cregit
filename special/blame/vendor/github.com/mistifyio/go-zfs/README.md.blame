0000000000000000000000000000000000000000;;	# Go Wrapper for ZFS #
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Simple wrappers for ZFS command line tools.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	[![GoDoc](https://godoc.org/github.com/mistifyio/go-zfs?status.svg)](https://godoc.org/github.com/mistifyio/go-zfs)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Requirements ##
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	You need a working ZFS setup.  To use on Ubuntu 14.04, setup ZFS:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    sudo apt-get install python-software-properties
0000000000000000000000000000000000000000;;	    sudo apt-add-repository ppa:zfs-native/stable
0000000000000000000000000000000000000000;;	    sudo apt-get update
0000000000000000000000000000000000000000;;	    sudo apt-get install ubuntu-zfs libzfs-dev
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Developed using Go 1.3, but currently there isn't anything 1.3 specific. Don't use Ubuntu packages for Go, use http://golang.org/doc/install
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Generally you need root privileges to use anything zfs related.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Status ##
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	This has been only been tested on Ubuntu 14.04
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	In the future, we hope to work directly with libzfs.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Hacking #
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The tests have decent examples for most functions.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	//assuming a zpool named test
0000000000000000000000000000000000000000;;	//error handling ommitted
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	f, err := zfs.CreateFilesystem("test/snapshot-test", nil)
0000000000000000000000000000000000000000;;	ok(t, err)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	s, err := f.Snapshot("test", nil)
0000000000000000000000000000000000000000;;	ok(t, err)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// snapshot is named "test/snapshot-test@test"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	c, err := s.Clone("test/clone-test", nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	err := c.Destroy()
0000000000000000000000000000000000000000;;	err := s.Destroy()
0000000000000000000000000000000000000000;;	err := f.Destroy()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Contributing #
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	See the [contributing guidelines](./CONTRIBUTING.md)
0000000000000000000000000000000000000000;;	
