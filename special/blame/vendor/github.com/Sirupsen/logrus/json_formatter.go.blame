0000000000000000000000000000000000000000;;	package logrus
fb7a692d29014e605484d1379339c3bb1445f46a;Godeps/_workspace/src/github.com/Sirupsen/logrus/json_formatter.go[Godeps/_workspace/src/github.com/Sirupsen/logrus/json_formatter.go][vendor/github.com/Sirupsen/logrus/json_formatter.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type JSONFormatter struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *JSONFormatter) Format(entry *Entry) ([]byte, error) {
0000000000000000000000000000000000000000;;		data := make(Fields, len(entry.Data)+3)
0000000000000000000000000000000000000000;;		for k, v := range entry.Data {
0000000000000000000000000000000000000000;;			data[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		prefixFieldClashes(data)
0000000000000000000000000000000000000000;;		data["time"] = entry.Time.Format(time.RFC3339)
0000000000000000000000000000000000000000;;		data["msg"] = entry.Message
0000000000000000000000000000000000000000;;		data["level"] = entry.Level.String()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		serialized, err := json.Marshal(data)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("Failed to marshal fields to JSON, %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return append(serialized, '\n'), nil
0000000000000000000000000000000000000000;;	}
