0000000000000000000000000000000000000000;;	package logrus
fb7a692d29014e605484d1379339c3bb1445f46a;Godeps/_workspace/src/github.com/Sirupsen/logrus/logger.go[Godeps/_workspace/src/github.com/Sirupsen/logrus/logger.go][vendor/github.com/Sirupsen/logrus/logger.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Logger struct {
0000000000000000000000000000000000000000;;		// The logs are `io.Copy`'d to this in a mutex. It's common to set this to a
0000000000000000000000000000000000000000;;		// file, or leave it default which is `os.Stdout`. You can also set this to
0000000000000000000000000000000000000000;;		// something more adventorous, such as logging to Kafka.
0000000000000000000000000000000000000000;;		Out io.Writer
0000000000000000000000000000000000000000;;		// Hooks for the logger instance. These allow firing events based on logging
0000000000000000000000000000000000000000;;		// levels and log entries. For example, to send errors to an error tracking
0000000000000000000000000000000000000000;;		// service, log to StatsD or dump the core on fatal errors.
0000000000000000000000000000000000000000;;		Hooks levelHooks
0000000000000000000000000000000000000000;;		// All log entries pass through the formatter before logged to Out. The
0000000000000000000000000000000000000000;;		// included formatters are `TextFormatter` and `JSONFormatter` for which
0000000000000000000000000000000000000000;;		// TextFormatter is the default. In development (when a TTY is attached) it
0000000000000000000000000000000000000000;;		// logs with colors, but to a file it wouldn't. You can easily implement your
0000000000000000000000000000000000000000;;		// own that implements the `Formatter` interface, see the `README` or included
0000000000000000000000000000000000000000;;		// formatters for examples.
0000000000000000000000000000000000000000;;		Formatter Formatter
0000000000000000000000000000000000000000;;		// The logging level the logger should log at. This is typically (and defaults
0000000000000000000000000000000000000000;;		// to) `logrus.Info`, which allows Info(), Warn(), Error() and Fatal() to be
0000000000000000000000000000000000000000;;		// logged. `logrus.Debug` is useful in
0000000000000000000000000000000000000000;;		Level Level
0000000000000000000000000000000000000000;;		// Used to sync writing to the log.
0000000000000000000000000000000000000000;;		mu sync.Mutex
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Creates a new logger. Configuration should be set by changing `Formatter`,
0000000000000000000000000000000000000000;;	// `Out` and `Hooks` directly on the default logger instance. You can also just
0000000000000000000000000000000000000000;;	// instantiate your own:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    var log = &Logger{
0000000000000000000000000000000000000000;;	//      Out: os.Stderr,
0000000000000000000000000000000000000000;;	//      Formatter: new(JSONFormatter),
0000000000000000000000000000000000000000;;	//      Hooks: make(levelHooks),
0000000000000000000000000000000000000000;;	//      Level: logrus.DebugLevel,
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// It's recommended to make this a global instance called `log`.
0000000000000000000000000000000000000000;;	func New() *Logger {
0000000000000000000000000000000000000000;;		return &Logger{
0000000000000000000000000000000000000000;;			Out:       os.Stdout,
0000000000000000000000000000000000000000;;			Formatter: new(TextFormatter),
0000000000000000000000000000000000000000;;			Hooks:     make(levelHooks),
0000000000000000000000000000000000000000;;			Level:     InfoLevel,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Adds a field to the log entry, note that you it doesn't log until you call
0000000000000000000000000000000000000000;;	// Debug, Print, Info, Warn, Fatal or Panic. It only creates a log entry.
0000000000000000000000000000000000000000;;	// Ff you want multiple fields, use `WithFields`.
0000000000000000000000000000000000000000;;	func (logger *Logger) WithField(key string, value interface{}) *Entry {
0000000000000000000000000000000000000000;;		return NewEntry(logger).WithField(key, value)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Adds a struct of fields to the log entry. All it does is call `WithField` for
0000000000000000000000000000000000000000;;	// each `Field`.
0000000000000000000000000000000000000000;;	func (logger *Logger) WithFields(fields Fields) *Entry {
0000000000000000000000000000000000000000;;		return NewEntry(logger).WithFields(fields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (logger *Logger) Debugf(format string, args ...interface{}) {
0000000000000000000000000000000000000000;;		NewEntry(logger).Debugf(format, args...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (logger *Logger) Infof(format string, args ...interface{}) {
0000000000000000000000000000000000000000;;		NewEntry(logger).Infof(format, args...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (logger *Logger) Printf(format string, args ...interface{}) {
0000000000000000000000000000000000000000;;		NewEntry(logger).Printf(format, args...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (logger *Logger) Warnf(format string, args ...interface{}) {
0000000000000000000000000000000000000000;;		NewEntry(logger).Warnf(format, args...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (logger *Logger) Warningf(format string, args ...interface{}) {
0000000000000000000000000000000000000000;;		NewEntry(logger).Warnf(format, args...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (logger *Logger) Errorf(format string, args ...interface{}) {
0000000000000000000000000000000000000000;;		NewEntry(logger).Errorf(format, args...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (logger *Logger) Fatalf(format string, args ...interface{}) {
0000000000000000000000000000000000000000;;		NewEntry(logger).Fatalf(format, args...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (logger *Logger) Panicf(format string, args ...interface{}) {
0000000000000000000000000000000000000000;;		NewEntry(logger).Panicf(format, args...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (logger *Logger) Debug(args ...interface{}) {
0000000000000000000000000000000000000000;;		NewEntry(logger).Debug(args...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (logger *Logger) Info(args ...interface{}) {
0000000000000000000000000000000000000000;;		NewEntry(logger).Info(args...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (logger *Logger) Print(args ...interface{}) {
0000000000000000000000000000000000000000;;		NewEntry(logger).Info(args...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (logger *Logger) Warn(args ...interface{}) {
0000000000000000000000000000000000000000;;		NewEntry(logger).Warn(args...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (logger *Logger) Warning(args ...interface{}) {
0000000000000000000000000000000000000000;;		NewEntry(logger).Warn(args...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (logger *Logger) Error(args ...interface{}) {
0000000000000000000000000000000000000000;;		NewEntry(logger).Error(args...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (logger *Logger) Fatal(args ...interface{}) {
0000000000000000000000000000000000000000;;		NewEntry(logger).Fatal(args...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (logger *Logger) Panic(args ...interface{}) {
0000000000000000000000000000000000000000;;		NewEntry(logger).Panic(args...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (logger *Logger) Debugln(args ...interface{}) {
0000000000000000000000000000000000000000;;		NewEntry(logger).Debugln(args...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (logger *Logger) Infoln(args ...interface{}) {
0000000000000000000000000000000000000000;;		NewEntry(logger).Infoln(args...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (logger *Logger) Println(args ...interface{}) {
0000000000000000000000000000000000000000;;		NewEntry(logger).Println(args...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (logger *Logger) Warnln(args ...interface{}) {
0000000000000000000000000000000000000000;;		NewEntry(logger).Warnln(args...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (logger *Logger) Warningln(args ...interface{}) {
0000000000000000000000000000000000000000;;		NewEntry(logger).Warnln(args...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (logger *Logger) Errorln(args ...interface{}) {
0000000000000000000000000000000000000000;;		NewEntry(logger).Errorln(args...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (logger *Logger) Fatalln(args ...interface{}) {
0000000000000000000000000000000000000000;;		NewEntry(logger).Fatalln(args...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (logger *Logger) Panicln(args ...interface{}) {
0000000000000000000000000000000000000000;;		NewEntry(logger).Panicln(args...)
0000000000000000000000000000000000000000;;	}
