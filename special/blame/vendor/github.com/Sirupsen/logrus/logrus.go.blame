0000000000000000000000000000000000000000;;	package logrus
fb7a692d29014e605484d1379339c3bb1445f46a;Godeps/_workspace/src/github.com/Sirupsen/logrus/logrus.go[Godeps/_workspace/src/github.com/Sirupsen/logrus/logrus.go][vendor/github.com/Sirupsen/logrus/logrus.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"log"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields type, used to pass to `WithFields`.
0000000000000000000000000000000000000000;;	type Fields map[string]interface{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Level type
0000000000000000000000000000000000000000;;	type Level uint8
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Convert the Level to a string. E.g. PanicLevel becomes "panic".
0000000000000000000000000000000000000000;;	func (level Level) String() string {
0000000000000000000000000000000000000000;;		switch level {
0000000000000000000000000000000000000000;;		case DebugLevel:
0000000000000000000000000000000000000000;;			return "debug"
0000000000000000000000000000000000000000;;		case InfoLevel:
0000000000000000000000000000000000000000;;			return "info"
0000000000000000000000000000000000000000;;		case WarnLevel:
0000000000000000000000000000000000000000;;			return "warning"
0000000000000000000000000000000000000000;;		case ErrorLevel:
0000000000000000000000000000000000000000;;			return "error"
0000000000000000000000000000000000000000;;		case FatalLevel:
0000000000000000000000000000000000000000;;			return "fatal"
0000000000000000000000000000000000000000;;		case PanicLevel:
0000000000000000000000000000000000000000;;			return "panic"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return "unknown"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ParseLevel takes a string level and returns the Logrus log level constant.
0000000000000000000000000000000000000000;;	func ParseLevel(lvl string) (Level, error) {
0000000000000000000000000000000000000000;;		switch lvl {
0000000000000000000000000000000000000000;;		case "panic":
0000000000000000000000000000000000000000;;			return PanicLevel, nil
0000000000000000000000000000000000000000;;		case "fatal":
0000000000000000000000000000000000000000;;			return FatalLevel, nil
0000000000000000000000000000000000000000;;		case "error":
0000000000000000000000000000000000000000;;			return ErrorLevel, nil
0000000000000000000000000000000000000000;;		case "warn", "warning":
0000000000000000000000000000000000000000;;			return WarnLevel, nil
0000000000000000000000000000000000000000;;		case "info":
0000000000000000000000000000000000000000;;			return InfoLevel, nil
0000000000000000000000000000000000000000;;		case "debug":
0000000000000000000000000000000000000000;;			return DebugLevel, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var l Level
0000000000000000000000000000000000000000;;		return l, fmt.Errorf("not a valid logrus Level: %q", lvl)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// These are the different logging levels. You can set the logging level to log
0000000000000000000000000000000000000000;;	// on your instance of logger, obtained with `logrus.New()`.
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// PanicLevel level, highest level of severity. Logs and then calls panic with the
0000000000000000000000000000000000000000;;		// message passed to Debug, Info, ...
0000000000000000000000000000000000000000;;		PanicLevel Level = iota
0000000000000000000000000000000000000000;;		// FatalLevel level. Logs and then calls `os.Exit(1)`. It will exit even if the
0000000000000000000000000000000000000000;;		// logging level is set to Panic.
0000000000000000000000000000000000000000;;		FatalLevel
0000000000000000000000000000000000000000;;		// ErrorLevel level. Logs. Used for errors that should definitely be noted.
0000000000000000000000000000000000000000;;		// Commonly used for hooks to send errors to an error tracking service.
0000000000000000000000000000000000000000;;		ErrorLevel
0000000000000000000000000000000000000000;;		// WarnLevel level. Non-critical entries that deserve eyes.
0000000000000000000000000000000000000000;;		WarnLevel
0000000000000000000000000000000000000000;;		// InfoLevel level. General operational entries about what's going on inside the
0000000000000000000000000000000000000000;;		// application.
0000000000000000000000000000000000000000;;		InfoLevel
0000000000000000000000000000000000000000;;		// DebugLevel level. Usually only enabled when debugging. Very verbose logging.
0000000000000000000000000000000000000000;;		DebugLevel
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Won't compile if StdLogger can't be realized by a log.Logger
0000000000000000000000000000000000000000;;	var _ StdLogger = &log.Logger{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StdLogger is what your logrus-enabled library should take, that way
0000000000000000000000000000000000000000;;	// it'll accept a stdlib logger and a logrus logger. There's no standard
0000000000000000000000000000000000000000;;	// interface, this is the closest we get, unfortunately.
0000000000000000000000000000000000000000;;	type StdLogger interface {
0000000000000000000000000000000000000000;;		Print(...interface{})
0000000000000000000000000000000000000000;;		Printf(string, ...interface{})
0000000000000000000000000000000000000000;;		Println(...interface{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Fatal(...interface{})
0000000000000000000000000000000000000000;;		Fatalf(string, ...interface{})
0000000000000000000000000000000000000000;;		Fatalln(...interface{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Panic(...interface{})
0000000000000000000000000000000000000000;;		Panicf(string, ...interface{})
0000000000000000000000000000000000000000;;		Panicln(...interface{})
0000000000000000000000000000000000000000;;	}
