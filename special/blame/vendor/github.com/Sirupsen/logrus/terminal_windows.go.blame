0000000000000000000000000000000000000000;;	// Based on ssh/terminal:
0000000000000000000000000000000000000000;;	// Copyright 2011 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
fb7a692d29014e605484d1379339c3bb1445f46a;Godeps/_workspace/src/github.com/Sirupsen/logrus/terminal_windows.go[Godeps/_workspace/src/github.com/Sirupsen/logrus/terminal_windows.go][vendor/github.com/Sirupsen/logrus/terminal_windows.go];	
0000000000000000000000000000000000000000;;	// +build windows
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package logrus
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;		"unsafe"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var kernel32 = syscall.NewLazyDLL("kernel32.dll")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		procGetConsoleMode = kernel32.NewProc("GetConsoleMode")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsTerminal returns true if the given file descriptor is a terminal.
0000000000000000000000000000000000000000;;	func IsTerminal() bool {
0000000000000000000000000000000000000000;;		fd := syscall.Stdout
0000000000000000000000000000000000000000;;		var st uint32
0000000000000000000000000000000000000000;;		r, _, e := syscall.Syscall(procGetConsoleMode.Addr(), 2, uintptr(fd), uintptr(unsafe.Pointer(&st)), 0)
0000000000000000000000000000000000000000;;		return r != 0 && e == 0
0000000000000000000000000000000000000000;;	}
