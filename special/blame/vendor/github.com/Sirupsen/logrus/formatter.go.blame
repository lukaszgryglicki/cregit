0000000000000000000000000000000000000000;;	package logrus
fb7a692d29014e605484d1379339c3bb1445f46a;Godeps/_workspace/src/github.com/Sirupsen/logrus/formatter.go[Godeps/_workspace/src/github.com/Sirupsen/logrus/formatter.go][vendor/github.com/Sirupsen/logrus/formatter.go];	
0000000000000000000000000000000000000000;;	// The Formatter interface is used to implement a custom Formatter. It takes an
0000000000000000000000000000000000000000;;	// `Entry`. It exposes all the fields, including the default ones:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// * `entry.Data["msg"]`. The message passed from Info, Warn, Error ..
0000000000000000000000000000000000000000;;	// * `entry.Data["time"]`. The timestamp.
0000000000000000000000000000000000000000;;	// * `entry.Data["level"]. The level the entry was logged at.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Any additional fields added with `WithField` or `WithFields` are also in
0000000000000000000000000000000000000000;;	// `entry.Data`. Format is expected to return an array of bytes which are then
0000000000000000000000000000000000000000;;	// logged to `logger.Out`.
0000000000000000000000000000000000000000;;	type Formatter interface {
0000000000000000000000000000000000000000;;		Format(*Entry) ([]byte, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is to not silently overwrite `time`, `msg` and `level` fields when
0000000000000000000000000000000000000000;;	// dumping it. If this code wasn't there doing:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//  logrus.WithField("level", 1).Info("hello")
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Would just silently drop the user provided level. Instead with this code
0000000000000000000000000000000000000000;;	// it'll logged as:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//  {"level": "info", "fields.level": 1, "msg": "hello", "time": "..."}
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// It's not exported because it's still using Data in an opinionated way. It's to
0000000000000000000000000000000000000000;;	// avoid code duplication between the two default formatters.
0000000000000000000000000000000000000000;;	func prefixFieldClashes(data Fields) {
0000000000000000000000000000000000000000;;		_, ok := data["time"]
0000000000000000000000000000000000000000;;		if ok {
0000000000000000000000000000000000000000;;			data["fields.time"] = data["time"]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, ok = data["msg"]
0000000000000000000000000000000000000000;;		if ok {
0000000000000000000000000000000000000000;;			data["fields.msg"] = data["msg"]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, ok = data["level"]
0000000000000000000000000000000000000000;;		if ok {
0000000000000000000000000000000000000000;;			data["fields.level"] = data["level"]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
