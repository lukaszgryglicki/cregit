0000000000000000000000000000000000000000;;	// Copyright (c) 2013, Suryandaru Triandana <syndtr@gmail.com>
0000000000000000000000000000000000000000;;	// All rights reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style license that can be
0000000000000000000000000000000000000000;;	// found in the LICENSE file.
a32493865be4f7e35896c83bdc29fed7e53478df;Godeps/_workspace/src/github.com/syndtr/gocapability/capability/capability.go[Godeps/_workspace/src/github.com/syndtr/gocapability/capability/capability.go][vendor/github.com/syndtr/gocapability/capability/capability.go];	
0000000000000000000000000000000000000000;;	// Package capability provides utilities for manipulating POSIX capabilities.
0000000000000000000000000000000000000000;;	package capability
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Capabilities interface {
0000000000000000000000000000000000000000;;		// Get check whether a capability present in the given
0000000000000000000000000000000000000000;;		// capabilities set. The 'which' value should be one of EFFECTIVE,
0000000000000000000000000000000000000000;;		// PERMITTED, INHERITABLE, BOUNDING or AMBIENT.
0000000000000000000000000000000000000000;;		Get(which CapType, what Cap) bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Empty check whether all capability bits of the given capabilities
0000000000000000000000000000000000000000;;		// set are zero. The 'which' value should be one of EFFECTIVE,
0000000000000000000000000000000000000000;;		// PERMITTED, INHERITABLE, BOUNDING or AMBIENT.
0000000000000000000000000000000000000000;;		Empty(which CapType) bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Full check whether all capability bits of the given capabilities
0000000000000000000000000000000000000000;;		// set are one. The 'which' value should be one of EFFECTIVE,
0000000000000000000000000000000000000000;;		// PERMITTED, INHERITABLE, BOUNDING or AMBIENT.
0000000000000000000000000000000000000000;;		Full(which CapType) bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Set sets capabilities of the given capabilities sets. The
0000000000000000000000000000000000000000;;		// 'which' value should be one or combination (OR'ed) of EFFECTIVE,
0000000000000000000000000000000000000000;;		// PERMITTED, INHERITABLE, BOUNDING or AMBIENT.
0000000000000000000000000000000000000000;;		Set(which CapType, caps ...Cap)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Unset unsets capabilities of the given capabilities sets. The
0000000000000000000000000000000000000000;;		// 'which' value should be one or combination (OR'ed) of EFFECTIVE,
0000000000000000000000000000000000000000;;		// PERMITTED, INHERITABLE, BOUNDING or AMBIENT.
0000000000000000000000000000000000000000;;		Unset(which CapType, caps ...Cap)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Fill sets all bits of the given capabilities kind to one. The
0000000000000000000000000000000000000000;;		// 'kind' value should be one or combination (OR'ed) of CAPS,
0000000000000000000000000000000000000000;;		// BOUNDS or AMBS.
0000000000000000000000000000000000000000;;		Fill(kind CapType)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Clear sets all bits of the given capabilities kind to zero. The
0000000000000000000000000000000000000000;;		// 'kind' value should be one or combination (OR'ed) of CAPS,
0000000000000000000000000000000000000000;;		// BOUNDS or AMBS.
0000000000000000000000000000000000000000;;		Clear(kind CapType)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// String return current capabilities state of the given capabilities
0000000000000000000000000000000000000000;;		// set as string. The 'which' value should be one of EFFECTIVE,
0000000000000000000000000000000000000000;;		// PERMITTED, INHERITABLE BOUNDING or AMBIENT
0000000000000000000000000000000000000000;;		StringCap(which CapType) string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// String return current capabilities state as string.
0000000000000000000000000000000000000000;;		String() string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Load load actual capabilities value. This will overwrite all
0000000000000000000000000000000000000000;;		// outstanding changes.
0000000000000000000000000000000000000000;;		Load() error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Apply apply the capabilities settings, so all changes will take
0000000000000000000000000000000000000000;;		// effect.
0000000000000000000000000000000000000000;;		Apply(kind CapType) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewPid create new initialized Capabilities object for given pid when it
0000000000000000000000000000000000000000;;	// is nonzero, or for the current pid if pid is 0
0000000000000000000000000000000000000000;;	func NewPid(pid int) (Capabilities, error) {
0000000000000000000000000000000000000000;;		return newPid(pid)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewFile create new initialized Capabilities object for given named file.
0000000000000000000000000000000000000000;;	func NewFile(name string) (Capabilities, error) {
0000000000000000000000000000000000000000;;		return newFile(name)
0000000000000000000000000000000000000000;;	}
