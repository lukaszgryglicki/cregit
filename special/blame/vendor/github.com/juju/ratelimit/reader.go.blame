0000000000000000000000000000000000000000;;	// Copyright 2014 Canonical Ltd.
0000000000000000000000000000000000000000;;	// Licensed under the LGPLv3 with static-linking exception.
0000000000000000000000000000000000000000;;	// See LICENCE file for details.
935e0b671fa8798cf3bf94c7249393468c9316bd;;	
0000000000000000000000000000000000000000;;	package ratelimit
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type reader struct {
0000000000000000000000000000000000000000;;		r      io.Reader
0000000000000000000000000000000000000000;;		bucket *Bucket
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Reader returns a reader that is rate limited by
0000000000000000000000000000000000000000;;	// the given token bucket. Each token in the bucket
0000000000000000000000000000000000000000;;	// represents one byte.
0000000000000000000000000000000000000000;;	func Reader(r io.Reader, bucket *Bucket) io.Reader {
0000000000000000000000000000000000000000;;		return &reader{
0000000000000000000000000000000000000000;;			r:      r,
0000000000000000000000000000000000000000;;			bucket: bucket,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *reader) Read(buf []byte) (int, error) {
0000000000000000000000000000000000000000;;		n, err := r.r.Read(buf)
0000000000000000000000000000000000000000;;		if n <= 0 {
0000000000000000000000000000000000000000;;			return n, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r.bucket.Wait(int64(n))
0000000000000000000000000000000000000000;;		return n, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type writer struct {
0000000000000000000000000000000000000000;;		w      io.Writer
0000000000000000000000000000000000000000;;		bucket *Bucket
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Writer returns a reader that is rate limited by
0000000000000000000000000000000000000000;;	// the given token bucket. Each token in the bucket
0000000000000000000000000000000000000000;;	// represents one byte.
0000000000000000000000000000000000000000;;	func Writer(w io.Writer, bucket *Bucket) io.Writer {
0000000000000000000000000000000000000000;;		return &writer{
0000000000000000000000000000000000000000;;			w:      w,
0000000000000000000000000000000000000000;;			bucket: bucket,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *writer) Write(buf []byte) (int, error) {
0000000000000000000000000000000000000000;;		w.bucket.Wait(int64(len(buf)))
0000000000000000000000000000000000000000;;		return w.w.Write(buf)
0000000000000000000000000000000000000000;;	}
