0000000000000000000000000000000000000000;;	# ratelimit
0000000000000000000000000000000000000000;;	--
0000000000000000000000000000000000000000;;	    import "github.com/juju/ratelimit"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The ratelimit package provides an efficient token bucket implementation. See
0000000000000000000000000000000000000000;;	http://en.wikipedia.org/wiki/Token_bucket.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Usage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#### func  Reader
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	func Reader(r io.Reader, bucket *Bucket) io.Reader
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	Reader returns a reader that is rate limited by the given token bucket. Each
0000000000000000000000000000000000000000;;	token in the bucket represents one byte.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#### func  Writer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	func Writer(w io.Writer, bucket *Bucket) io.Writer
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	Writer returns a writer that is rate limited by the given token bucket. Each
0000000000000000000000000000000000000000;;	token in the bucket represents one byte.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#### type Bucket
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	type Bucket struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Bucket represents a token bucket that fills at a predetermined rate. Methods on
0000000000000000000000000000000000000000;;	Bucket may be called concurrently.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#### func  NewBucket
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	func NewBucket(fillInterval time.Duration, capacity int64) *Bucket
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	NewBucket returns a new token bucket that fills at the rate of one token every
0000000000000000000000000000000000000000;;	fillInterval, up to the given maximum capacity. Both arguments must be positive.
0000000000000000000000000000000000000000;;	The bucket is initially full.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#### func  NewBucketWithQuantum
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	func NewBucketWithQuantum(fillInterval time.Duration, capacity, quantum int64) *Bucket
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	NewBucketWithQuantum is similar to NewBucket, but allows the specification of
0000000000000000000000000000000000000000;;	the quantum size - quantum tokens are added every fillInterval.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#### func  NewBucketWithRate
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	func NewBucketWithRate(rate float64, capacity int64) *Bucket
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	NewBucketWithRate returns a token bucket that fills the bucket at the rate of
0000000000000000000000000000000000000000;;	rate tokens per second up to the given maximum capacity. Because of limited
0000000000000000000000000000000000000000;;	clock resolution, at high rates, the actual rate may be up to 1% different from
0000000000000000000000000000000000000000;;	the specified rate.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#### func (*Bucket) Rate
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	func (tb *Bucket) Rate() float64
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	Rate returns the fill rate of the bucket, in tokens per second.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#### func (*Bucket) Take
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	func (tb *Bucket) Take(count int64) time.Duration
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	Take takes count tokens from the bucket without blocking. It returns the time
0000000000000000000000000000000000000000;;	that the caller should wait until the tokens are actually available.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Note that if the request is irrevocable - there is no way to return tokens to
0000000000000000000000000000000000000000;;	the bucket once this method commits us to taking them.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#### func (*Bucket) TakeAvailable
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	func (tb *Bucket) TakeAvailable(count int64) int64
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	TakeAvailable takes up to count immediately available tokens from the bucket. It
0000000000000000000000000000000000000000;;	returns the number of tokens removed, or zero if there are no available tokens.
0000000000000000000000000000000000000000;;	It does not block.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#### func (*Bucket) TakeMaxDuration
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	func (tb *Bucket) TakeMaxDuration(count int64, maxWait time.Duration) (time.Duration, bool)
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	TakeMaxDuration is like Take, except that it will only take tokens from the
0000000000000000000000000000000000000000;;	bucket if the wait time for the tokens is no greater than maxWait.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	If it would take longer than maxWait for the tokens to become available, it does
0000000000000000000000000000000000000000;;	nothing and reports false, otherwise it returns the time that the caller should
0000000000000000000000000000000000000000;;	wait until the tokens are actually available, and reports true.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#### func (*Bucket) Wait
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	func (tb *Bucket) Wait(count int64)
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	Wait takes count tokens from the bucket, waiting until they are available.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#### func (*Bucket) WaitMaxDuration
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	func (tb *Bucket) WaitMaxDuration(count int64, maxWait time.Duration) bool
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	WaitMaxDuration is like Wait except that it will only take tokens from the
0000000000000000000000000000000000000000;;	bucket if it needs to wait for no greater than maxWait. It reports whether any
0000000000000000000000000000000000000000;;	tokens have been removed from the bucket If no tokens have been removed, it
0000000000000000000000000000000000000000;;	returns immediately.
