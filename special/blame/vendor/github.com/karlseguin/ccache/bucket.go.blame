0000000000000000000000000000000000000000;;	package ccache
550be6508d59ea184bfb64f8ae23c177b9e6d1c9;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type bucket struct {
0000000000000000000000000000000000000000;;		sync.RWMutex
0000000000000000000000000000000000000000;;		lookup map[string]*Item
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (b *bucket) get(key string) *Item {
0000000000000000000000000000000000000000;;		b.RLock()
0000000000000000000000000000000000000000;;		defer b.RUnlock()
0000000000000000000000000000000000000000;;		return b.lookup[key]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (b *bucket) set(key string, value interface{}, duration time.Duration) (*Item, *Item) {
0000000000000000000000000000000000000000;;		expires := time.Now().Add(duration).UnixNano()
0000000000000000000000000000000000000000;;		item := newItem(key, value, expires)
0000000000000000000000000000000000000000;;		b.Lock()
0000000000000000000000000000000000000000;;		defer b.Unlock()
0000000000000000000000000000000000000000;;		existing := b.lookup[key]
0000000000000000000000000000000000000000;;		b.lookup[key] = item
0000000000000000000000000000000000000000;;		return item, existing
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (b *bucket) delete(key string) *Item {
0000000000000000000000000000000000000000;;		b.Lock()
0000000000000000000000000000000000000000;;		defer b.Unlock()
0000000000000000000000000000000000000000;;		item := b.lookup[key]
0000000000000000000000000000000000000000;;		delete(b.lookup, key)
0000000000000000000000000000000000000000;;		return item
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (b *bucket) clear() {
0000000000000000000000000000000000000000;;		b.Lock()
0000000000000000000000000000000000000000;;		defer b.Unlock()
0000000000000000000000000000000000000000;;		b.lookup = make(map[string]*Item)
0000000000000000000000000000000000000000;;	}
