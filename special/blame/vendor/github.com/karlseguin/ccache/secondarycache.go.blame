0000000000000000000000000000000000000000;;	package ccache
550be6508d59ea184bfb64f8ae23c177b9e6d1c9;;	
0000000000000000000000000000000000000000;;	import "time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SecondaryCache struct {
0000000000000000000000000000000000000000;;		bucket *bucket
0000000000000000000000000000000000000000;;		pCache *LayeredCache
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get the secondary key.
0000000000000000000000000000000000000000;;	// The semantics are the same as for LayeredCache.Get
0000000000000000000000000000000000000000;;	func (s *SecondaryCache) Get(secondary string) *Item {
0000000000000000000000000000000000000000;;		return s.bucket.get(secondary)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Set the secondary key to a value.
0000000000000000000000000000000000000000;;	// The semantics are the same as for LayeredCache.Set
0000000000000000000000000000000000000000;;	func (s *SecondaryCache) Set(secondary string, value interface{}, duration time.Duration) *Item {
0000000000000000000000000000000000000000;;		item, existing := s.bucket.set(secondary, value, duration)
0000000000000000000000000000000000000000;;		if existing != nil {
0000000000000000000000000000000000000000;;			s.pCache.deletables <- existing
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s.pCache.promote(item)
0000000000000000000000000000000000000000;;		return item
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fetch or set a secondary key.
0000000000000000000000000000000000000000;;	// The semantics are the same as for LayeredCache.Fetch
0000000000000000000000000000000000000000;;	func (s *SecondaryCache) Fetch(secondary string, duration time.Duration, fetch func() (interface{}, error)) (*Item, error) {
0000000000000000000000000000000000000000;;		item := s.Get(secondary)
0000000000000000000000000000000000000000;;		if item != nil {
0000000000000000000000000000000000000000;;			return item, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		value, err := fetch()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return s.Set(secondary, value, duration), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Delete a secondary key.
0000000000000000000000000000000000000000;;	// The semantics are the same as for LayeredCache.Delete
0000000000000000000000000000000000000000;;	func (s *SecondaryCache) Delete(secondary string) bool {
0000000000000000000000000000000000000000;;		item := s.bucket.delete(secondary)
0000000000000000000000000000000000000000;;		if item != nil {
0000000000000000000000000000000000000000;;			s.pCache.deletables <- item
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Replace a secondary key.
0000000000000000000000000000000000000000;;	// The semantics are the same as for LayeredCache.Replace
0000000000000000000000000000000000000000;;	func (s *SecondaryCache) Replace(secondary string, value interface{}) bool {
0000000000000000000000000000000000000000;;		item := s.Get(secondary)
0000000000000000000000000000000000000000;;		if item == nil {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s.Set(secondary, value, item.TTL())
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Track a secondary key.
0000000000000000000000000000000000000000;;	// The semantics are the same as for LayeredCache.TrackingGet
0000000000000000000000000000000000000000;;	func (c *SecondaryCache) TrackingGet(secondary string) TrackedItem {
0000000000000000000000000000000000000000;;		item := c.Get(secondary)
0000000000000000000000000000000000000000;;		if item == nil {
0000000000000000000000000000000000000000;;			return NilTracked
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		item.track()
0000000000000000000000000000000000000000;;		return item
0000000000000000000000000000000000000000;;	}
