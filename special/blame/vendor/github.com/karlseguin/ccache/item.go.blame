0000000000000000000000000000000000000000;;	package ccache
550be6508d59ea184bfb64f8ae23c177b9e6d1c9;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"container/list"
0000000000000000000000000000000000000000;;		"sync/atomic"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Sized interface {
0000000000000000000000000000000000000000;;		Size() int64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TrackedItem interface {
0000000000000000000000000000000000000000;;		Value() interface{}
0000000000000000000000000000000000000000;;		Release()
0000000000000000000000000000000000000000;;		Expired() bool
0000000000000000000000000000000000000000;;		TTL() time.Duration
0000000000000000000000000000000000000000;;		Expires() time.Time
0000000000000000000000000000000000000000;;		Extend(duration time.Duration)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type nilItem struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (n *nilItem) Value() interface{} { return nil }
0000000000000000000000000000000000000000;;	func (n *nilItem) Release()           {}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *nilItem) Expired() bool {
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *nilItem) TTL() time.Duration {
0000000000000000000000000000000000000000;;		return time.Minute
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *nilItem) Expires() time.Time {
0000000000000000000000000000000000000000;;		return time.Time{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *nilItem) Extend(duration time.Duration) {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var NilTracked = new(nilItem)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Item struct {
0000000000000000000000000000000000000000;;		key        string
0000000000000000000000000000000000000000;;		group      string
0000000000000000000000000000000000000000;;		promotions int32
0000000000000000000000000000000000000000;;		refCount   int32
0000000000000000000000000000000000000000;;		expires    int64
0000000000000000000000000000000000000000;;		size       int64
0000000000000000000000000000000000000000;;		value      interface{}
0000000000000000000000000000000000000000;;		element    *list.Element
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newItem(key string, value interface{}, expires int64) *Item {
0000000000000000000000000000000000000000;;		size := int64(1)
0000000000000000000000000000000000000000;;		if sized, ok := value.(Sized); ok {
0000000000000000000000000000000000000000;;			size = sized.Size()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &Item{
0000000000000000000000000000000000000000;;			key:        key,
0000000000000000000000000000000000000000;;			value:      value,
0000000000000000000000000000000000000000;;			promotions: 0,
0000000000000000000000000000000000000000;;			size:       size,
0000000000000000000000000000000000000000;;			expires:    expires,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *Item) shouldPromote(getsPerPromote int32) bool {
0000000000000000000000000000000000000000;;		i.promotions += 1
0000000000000000000000000000000000000000;;		return i.promotions == getsPerPromote
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *Item) Value() interface{} {
0000000000000000000000000000000000000000;;		return i.value
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *Item) track() {
0000000000000000000000000000000000000000;;		atomic.AddInt32(&i.refCount, 1)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *Item) Release() {
0000000000000000000000000000000000000000;;		atomic.AddInt32(&i.refCount, -1)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *Item) Expired() bool {
0000000000000000000000000000000000000000;;		expires := atomic.LoadInt64(&i.expires)
0000000000000000000000000000000000000000;;		return expires < time.Now().UnixNano()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *Item) TTL() time.Duration {
0000000000000000000000000000000000000000;;		expires := atomic.LoadInt64(&i.expires)
0000000000000000000000000000000000000000;;		return time.Nanosecond * time.Duration(expires-time.Now().UnixNano())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *Item) Expires() time.Time {
0000000000000000000000000000000000000000;;		expires := atomic.LoadInt64(&i.expires)
0000000000000000000000000000000000000000;;		return time.Unix(0, expires)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *Item) Extend(duration time.Duration) {
0000000000000000000000000000000000000000;;		atomic.StoreInt64(&i.expires, time.Now().Add(duration).UnixNano())
0000000000000000000000000000000000000000;;	}
