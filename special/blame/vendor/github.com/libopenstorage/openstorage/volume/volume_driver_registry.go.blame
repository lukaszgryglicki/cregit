0000000000000000000000000000000000000000;;	package volume
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	
0000000000000000000000000000000000000000;;	import "sync"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type volumeDriverRegistry struct {
0000000000000000000000000000000000000000;;		nameToInitFunc     map[string]func(map[string]string) (VolumeDriver, error)
0000000000000000000000000000000000000000;;		nameToVolumeDriver map[string]VolumeDriver
0000000000000000000000000000000000000000;;		lock               *sync.RWMutex
0000000000000000000000000000000000000000;;		isShutdown         bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newVolumeDriverRegistry(nameToInitFunc map[string]func(map[string]string) (VolumeDriver, error)) *volumeDriverRegistry {
0000000000000000000000000000000000000000;;		return &volumeDriverRegistry{
0000000000000000000000000000000000000000;;			nameToInitFunc,
0000000000000000000000000000000000000000;;			make(map[string]VolumeDriver),
0000000000000000000000000000000000000000;;			&sync.RWMutex{},
0000000000000000000000000000000000000000;;			false,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v *volumeDriverRegistry) Get(name string) (VolumeDriver, error) {
0000000000000000000000000000000000000000;;		v.lock.RLock()
0000000000000000000000000000000000000000;;		defer v.lock.RUnlock()
0000000000000000000000000000000000000000;;		if v.isShutdown {
0000000000000000000000000000000000000000;;			return nil, ErrAlreadyShutdown
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		volumeDriver, ok := v.nameToVolumeDriver[name]
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return nil, ErrDriverNotFound
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return volumeDriver, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v *volumeDriverRegistry) Add(name string, init func(map[string]string) (VolumeDriver, error)) error {
0000000000000000000000000000000000000000;;		v.nameToInitFunc[name] = init
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v *volumeDriverRegistry) Register(name string, params map[string]string) error {
0000000000000000000000000000000000000000;;		initFunc, ok := v.nameToInitFunc[name]
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return ErrNotSupported
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		v.lock.Lock()
0000000000000000000000000000000000000000;;		defer v.lock.Unlock()
0000000000000000000000000000000000000000;;		if v.isShutdown {
0000000000000000000000000000000000000000;;			return ErrAlreadyShutdown
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, ok := v.nameToVolumeDriver[name]; ok {
0000000000000000000000000000000000000000;;			return ErrExist
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		volumeDriver, err := initFunc(params)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		v.nameToVolumeDriver[name] = volumeDriver
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v *volumeDriverRegistry) Shutdown() error {
0000000000000000000000000000000000000000;;		v.lock.Lock()
0000000000000000000000000000000000000000;;		if v.isShutdown {
0000000000000000000000000000000000000000;;			return ErrAlreadyShutdown
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, volumeDriver := range v.nameToVolumeDriver {
0000000000000000000000000000000000000000;;			volumeDriver.Shutdown()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		v.isShutdown = true
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
