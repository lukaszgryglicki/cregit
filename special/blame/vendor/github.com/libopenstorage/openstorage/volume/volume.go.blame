0000000000000000000000000000000000000000;;	package volume
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/libopenstorage/openstorage/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		ErrAlreadyShutdown         = errors.New("VolumeDriverProvider already shutdown")
0000000000000000000000000000000000000000;;		ErrExist                   = errors.New("Driver already exists")
0000000000000000000000000000000000000000;;		ErrDriverNotFound          = errors.New("Driver implementation not found")
0000000000000000000000000000000000000000;;		ErrDriverInitializing      = errors.New("Driver is initializing")
0000000000000000000000000000000000000000;;		ErrEnoEnt                  = errors.New("Volume does not exist.")
0000000000000000000000000000000000000000;;		ErrEnomem                  = errors.New("Out of memory.")
0000000000000000000000000000000000000000;;		ErrEinval                  = errors.New("Invalid argument")
0000000000000000000000000000000000000000;;		ErrVolDetached             = errors.New("Volume is detached")
0000000000000000000000000000000000000000;;		ErrVolAttached             = errors.New("Volume is attached")
0000000000000000000000000000000000000000;;		ErrVolAttachedOnRemoteNode = errors.New("Volume is attached on another node")
0000000000000000000000000000000000000000;;		ErrVolAttachedScale        = errors.New("Volume is attached but can be scaled")
0000000000000000000000000000000000000000;;		ErrVolHasSnaps             = errors.New("Volume has snapshots associated")
0000000000000000000000000000000000000000;;		ErrNotSupported            = errors.New("Operation not supported")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Constants used by the VolumeDriver
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		APIVersion    = "v1"
0000000000000000000000000000000000000000;;		PluginAPIBase = "/run/docker/plugins/"
0000000000000000000000000000000000000000;;		DriverAPIBase = "/var/lib/osd/driver/"
0000000000000000000000000000000000000000;;		MountBase     = "/var/lib/osd/mounts/"
0000000000000000000000000000000000000000;;		VolumeBase    = "/var/lib/osd/"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Store interface {
0000000000000000000000000000000000000000;;		// Lock volume specified by volumeID.
0000000000000000000000000000000000000000;;		Lock(volumeID string) (interface{}, error)
0000000000000000000000000000000000000000;;		// Lock volume with token obtained from call to Lock.
0000000000000000000000000000000000000000;;		Unlock(token interface{}) error
0000000000000000000000000000000000000000;;		// CreateVol returns error if volume with the same ID already existe.
0000000000000000000000000000000000000000;;		CreateVol(vol *api.Volume) error
0000000000000000000000000000000000000000;;		// GetVol from volumeID.
0000000000000000000000000000000000000000;;		GetVol(volumeID string) (*api.Volume, error)
0000000000000000000000000000000000000000;;		// UpdateVol with vol
0000000000000000000000000000000000000000;;		UpdateVol(vol *api.Volume) error
0000000000000000000000000000000000000000;;		// DeleteVol. Returns error if volume does not exist.
0000000000000000000000000000000000000000;;		DeleteVol(volumeID string) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VolumeDriver is the main interface to be implemented by any storage driver.
0000000000000000000000000000000000000000;;	// Every driver must at minimum implement the ProtoDriver sub interface.
0000000000000000000000000000000000000000;;	type VolumeDriver interface {
0000000000000000000000000000000000000000;;		IODriver
0000000000000000000000000000000000000000;;		ProtoDriver
0000000000000000000000000000000000000000;;		BlockDriver
0000000000000000000000000000000000000000;;		Enumerator
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IODriver interfaces applicable to object store interfaces.
0000000000000000000000000000000000000000;;	type IODriver interface {
0000000000000000000000000000000000000000;;		// Read sz bytes from specified volume at specified offset.
0000000000000000000000000000000000000000;;		// Return number of bytes read and error.
0000000000000000000000000000000000000000;;		Read(volumeID string, buf []byte, sz uint64, offset int64) (int64, error)
0000000000000000000000000000000000000000;;		// Write sz bytes from specified volume at specified offset.
0000000000000000000000000000000000000000;;		// Return number of bytes written and error.
0000000000000000000000000000000000000000;;		Write(volumeID string, buf []byte, sz uint64, offset int64) (int64, error)
0000000000000000000000000000000000000000;;		// Flush writes to stable storage.
0000000000000000000000000000000000000000;;		// Return error.
0000000000000000000000000000000000000000;;		Flush(volumeID string) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SnapshotDriver interface {
0000000000000000000000000000000000000000;;		// Snapshot create volume snapshot.
0000000000000000000000000000000000000000;;		// Errors ErrEnoEnt may be returned
0000000000000000000000000000000000000000;;		Snapshot(volumeID string, readonly bool, locator *api.VolumeLocator) (string, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ProtoDriver must be implemented by all volume drivers.  It specifies the
0000000000000000000000000000000000000000;;	// most basic functionality, such as creating and deleting volumes.
0000000000000000000000000000000000000000;;	type ProtoDriver interface {
0000000000000000000000000000000000000000;;		SnapshotDriver
0000000000000000000000000000000000000000;;		// Name returns the name of the driver.
0000000000000000000000000000000000000000;;		Name() string
0000000000000000000000000000000000000000;;		// Type of this driver
0000000000000000000000000000000000000000;;		Type() api.DriverType
0000000000000000000000000000000000000000;;		// Create a new Vol for the specific volume spec.
0000000000000000000000000000000000000000;;		// It returns a system generated VolumeID that uniquely identifies the volume
0000000000000000000000000000000000000000;;		Create(locator *api.VolumeLocator, Source *api.Source, spec *api.VolumeSpec) (string, error)
0000000000000000000000000000000000000000;;		// Delete volume.
0000000000000000000000000000000000000000;;		// Errors ErrEnoEnt, ErrVolHasSnaps may be returned.
0000000000000000000000000000000000000000;;		Delete(volumeID string) error
0000000000000000000000000000000000000000;;		// Mount volume at specified path
0000000000000000000000000000000000000000;;		// Errors ErrEnoEnt, ErrVolDetached may be returned.
0000000000000000000000000000000000000000;;		Mount(volumeID string, mountPath string) error
0000000000000000000000000000000000000000;;		// MountedAt return volume mounted at specified mountpath.
0000000000000000000000000000000000000000;;		MountedAt(mountPath string) string
0000000000000000000000000000000000000000;;		// Unmount volume at specified path
0000000000000000000000000000000000000000;;		// Errors ErrEnoEnt, ErrVolDetached may be returned.
0000000000000000000000000000000000000000;;		Unmount(volumeID string, mountPath string) error
0000000000000000000000000000000000000000;;		// Update not all fields of the spec are supported, ErrNotSupported will be thrown for unsupported
0000000000000000000000000000000000000000;;		// updates.
0000000000000000000000000000000000000000;;		Set(volumeID string, locator *api.VolumeLocator, spec *api.VolumeSpec) error
0000000000000000000000000000000000000000;;		// Stats for specified volume.
0000000000000000000000000000000000000000;;		// cumulative stats are /proc/diskstats style stats.
0000000000000000000000000000000000000000;;		// nonCumulative stats are stats for specific duration.
0000000000000000000000000000000000000000;;		// Errors ErrEnoEnt may be returned
0000000000000000000000000000000000000000;;		Stats(volumeID string, cumulative bool) (*api.Stats, error)
0000000000000000000000000000000000000000;;		// Alerts on this volume.
0000000000000000000000000000000000000000;;		// Errors ErrEnoEnt may be returned
0000000000000000000000000000000000000000;;		Alerts(volumeID string) (*api.Alerts, error)
0000000000000000000000000000000000000000;;		// GetActiveRequests get active requests
0000000000000000000000000000000000000000;;		GetActiveRequests() (*api.ActiveRequests, error)
0000000000000000000000000000000000000000;;		// Status returns a set of key-value pairs which give low
0000000000000000000000000000000000000000;;		// level diagnostic status about this driver.
0000000000000000000000000000000000000000;;		Status() [][2]string
0000000000000000000000000000000000000000;;		// Shutdown and cleanup.
0000000000000000000000000000000000000000;;		Shutdown()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Enumerator provides a set of interfaces to get details on a set of volumes.
0000000000000000000000000000000000000000;;	type Enumerator interface {
0000000000000000000000000000000000000000;;		// Inspect specified volumes.
0000000000000000000000000000000000000000;;		// Returns slice of volumes that were found.
0000000000000000000000000000000000000000;;		Inspect(volumeIDs []string) ([]*api.Volume, error)
0000000000000000000000000000000000000000;;		// Enumerate volumes that map to the volumeLocator. Locator fields may be regexp.
0000000000000000000000000000000000000000;;		// If locator fields are left blank, this will return all volumes.
0000000000000000000000000000000000000000;;		Enumerate(locator *api.VolumeLocator, labels map[string]string) ([]*api.Volume, error)
0000000000000000000000000000000000000000;;		// Enumerate snaps for specified volumes
0000000000000000000000000000000000000000;;		SnapEnumerate(volID []string, snapLabels map[string]string) ([]*api.Volume, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StoreEnumerator interface {
0000000000000000000000000000000000000000;;		Store
0000000000000000000000000000000000000000;;		Enumerator
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BlockDriver needs to be implemented by block volume drivers.  Filesystem volume
0000000000000000000000000000000000000000;;	// drivers can ignore this interface and include the builtin DefaultBlockDriver.
0000000000000000000000000000000000000000;;	type BlockDriver interface {
0000000000000000000000000000000000000000;;		// Attach map device to the host.
0000000000000000000000000000000000000000;;		// On success the devicePath specifies location where the device is exported
0000000000000000000000000000000000000000;;		// Errors ErrEnoEnt, ErrVolAttached may be returned.
0000000000000000000000000000000000000000;;		Attach(volumeID string) (string, error)
0000000000000000000000000000000000000000;;		// Detach device from the host.
0000000000000000000000000000000000000000;;		// Errors ErrEnoEnt, ErrVolDetached may be returned.
0000000000000000000000000000000000000000;;		Detach(volumeID string) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VolumeDriverProvider provides VolumeDrivers.
0000000000000000000000000000000000000000;;	type VolumeDriverProvider interface {
0000000000000000000000000000000000000000;;		// Get gets the VolumeDriver for the given name.
0000000000000000000000000000000000000000;;		// If a VolumeDriver was not created for the given name, the error ErrDriverNotFound is returned.
0000000000000000000000000000000000000000;;		Get(name string) (VolumeDriver, error)
0000000000000000000000000000000000000000;;		// Shutdown shuts down all volume drivers.
0000000000000000000000000000000000000000;;		Shutdown() error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VolumeDriverRegistry registers VolumeDrivers.
0000000000000000000000000000000000000000;;	type VolumeDriverRegistry interface {
0000000000000000000000000000000000000000;;		VolumeDriverProvider
0000000000000000000000000000000000000000;;		// New creates the VolumeDriver for the given name.
0000000000000000000000000000000000000000;;		// If a VolumeDriver was already created for the given name, the error ErrExist is returned.
0000000000000000000000000000000000000000;;		Register(name string, params map[string]string) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Add inserts a new VolumeDriver provider with a well known name.
0000000000000000000000000000000000000000;;		Add(name string, init func(map[string]string) (VolumeDriver, error)) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VolumeDriverRegistry constructs a new VolumeDriverRegistry.
0000000000000000000000000000000000000000;;	func NewVolumeDriverRegistry(nameToInitFunc map[string]func(map[string]string) (VolumeDriver, error)) VolumeDriverRegistry {
0000000000000000000000000000000000000000;;		return newVolumeDriverRegistry(nameToInitFunc)
0000000000000000000000000000000000000000;;	}
