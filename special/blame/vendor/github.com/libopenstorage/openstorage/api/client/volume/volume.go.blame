0000000000000000000000000000000000000000;;	package volume
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"github.com/libopenstorage/openstorage/api/client"
0000000000000000000000000000000000000000;;		"github.com/libopenstorage/openstorage/volume"
0000000000000000000000000000000000000000;;		"github.com/libopenstorage/openstorage/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VolumeDriver returns a REST wrapper for the VolumeDriver interface.
0000000000000000000000000000000000000000;;	func VolumeDriver(c *client.Client) volume.VolumeDriver {
0000000000000000000000000000000000000000;;		return newVolumeClient(c)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewDriver returns a new REST client of the supplied version for specified driver.
0000000000000000000000000000000000000000;;	// host: REST endpoint [http://<ip>:<port> OR unix://<path-to-unix-socket>]. default: [unix:///var/lib/osd/<driverName>.sock]
0000000000000000000000000000000000000000;;	// version: Volume API version
0000000000000000000000000000000000000000;;	func NewDriverClient(host, driverName, version string) (*client.Client, error) {
0000000000000000000000000000000000000000;;		if driverName == "" {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("Driver Name cannot be empty")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if host == "" {
0000000000000000000000000000000000000000;;			host = client.GetUnixServerPath(driverName, volume.DriverAPIBase)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if version == "" {
0000000000000000000000000000000000000000;;			// Set the default version
0000000000000000000000000000000000000000;;			version = volume.APIVersion
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return client.NewClient(host, version)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetSupportedDriverVersions returns a list of supported versions
0000000000000000000000000000000000000000;;	// for the provided driver. It uses the given server endpoint or the
0000000000000000000000000000000000000000;;	// standard unix domain socket
0000000000000000000000000000000000000000;;	func GetSupportedDriverVersions(driverName, host string) ([]string, error) {
0000000000000000000000000000000000000000;;		// Get a client handler
0000000000000000000000000000000000000000;;		if host == "" {
0000000000000000000000000000000000000000;;			host = client.GetUnixServerPath(driverName, volume.DriverAPIBase)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		client, err := client.NewClient(host, "")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return []string{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		versions, err := client.Versions(api.OsdVolumePath)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return []string{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return versions, nil
0000000000000000000000000000000000000000;;	}
