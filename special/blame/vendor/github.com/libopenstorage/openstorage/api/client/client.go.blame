0000000000000000000000000000000000000000;;	package client
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"crypto/tls"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		httpCache = make(map[string]*http.Client)
0000000000000000000000000000000000000000;;		cacheLock sync.Mutex
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewClient returns a new REST client for specified server.
0000000000000000000000000000000000000000;;	func NewClient(host string, version string) (*Client, error) {
0000000000000000000000000000000000000000;;		baseURL, err := url.Parse(host)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if baseURL.Path == "" {
0000000000000000000000000000000000000000;;			baseURL.Path = "/"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		unix2HTTP(baseURL)
0000000000000000000000000000000000000000;;		c := &Client{
0000000000000000000000000000000000000000;;			base:       baseURL,
0000000000000000000000000000000000000000;;			version:    version,
0000000000000000000000000000000000000000;;			httpClient: getHttpClient(host),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetUnixServerPath(socketName string, paths ...string) string {
0000000000000000000000000000000000000000;;		serverPath := "unix://"
0000000000000000000000000000000000000000;;		for _, path := range paths {
0000000000000000000000000000000000000000;;			serverPath = serverPath + path
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		serverPath = serverPath + socketName + ".sock"
0000000000000000000000000000000000000000;;		return serverPath
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Client is an HTTP REST wrapper. Use one of Get/Post/Put/Delete to get a request
0000000000000000000000000000000000000000;;	// object.
0000000000000000000000000000000000000000;;	type Client struct {
0000000000000000000000000000000000000000;;		base       *url.URL
0000000000000000000000000000000000000000;;		version    string
0000000000000000000000000000000000000000;;		httpClient *http.Client
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Status sends a Status request at the /status REST endpoint.
0000000000000000000000000000000000000000;;	func (c *Client) Status() (*Status, error) {
0000000000000000000000000000000000000000;;		status := &Status{}
0000000000000000000000000000000000000000;;		err := c.Get().UsePath("/status").Do().Unmarshal(status)
0000000000000000000000000000000000000000;;		return status, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Version send a request at the /versions REST endpoint.
0000000000000000000000000000000000000000;;	func (c *Client) Versions(endpoint string) ([]string, error) {
0000000000000000000000000000000000000000;;		versions := []string{}
0000000000000000000000000000000000000000;;		err := c.Get().Resource(endpoint + "/versions").Do().Unmarshal(&versions)
0000000000000000000000000000000000000000;;		return versions, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get returns a Request object setup for GET call.
0000000000000000000000000000000000000000;;	func (c *Client) Get() *Request {
0000000000000000000000000000000000000000;;		return NewRequest(c.httpClient, c.base, "GET", c.version)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Post returns a Request object setup for POST call.
0000000000000000000000000000000000000000;;	func (c *Client) Post() *Request {
0000000000000000000000000000000000000000;;		return NewRequest(c.httpClient, c.base, "POST", c.version)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Put returns a Request object setup for PUT call.
0000000000000000000000000000000000000000;;	func (c *Client) Put() *Request {
0000000000000000000000000000000000000000;;		return NewRequest(c.httpClient, c.base, "PUT", c.version)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Put returns a Request object setup for DELETE call.
0000000000000000000000000000000000000000;;	func (c *Client) Delete() *Request {
0000000000000000000000000000000000000000;;		return NewRequest(c.httpClient, c.base, "DELETE", c.version)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func unix2HTTP(u *url.URL) {
0000000000000000000000000000000000000000;;		if u.Scheme == "unix" {
0000000000000000000000000000000000000000;;			// Override the main URL object so the HTTP lib won't complain
0000000000000000000000000000000000000000;;			u.Scheme = "http"
0000000000000000000000000000000000000000;;			u.Host = "unix.sock"
0000000000000000000000000000000000000000;;			u.Path = ""
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newHTTPClient(u *url.URL, tlsConfig *tls.Config, timeout time.Duration) *http.Client {
0000000000000000000000000000000000000000;;		httpTransport := &http.Transport{
0000000000000000000000000000000000000000;;			TLSClientConfig: tlsConfig,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch u.Scheme {
0000000000000000000000000000000000000000;;		case "unix":
0000000000000000000000000000000000000000;;			socketPath := u.Path
0000000000000000000000000000000000000000;;			unixDial := func(proto, addr string) (net.Conn, error) {
0000000000000000000000000000000000000000;;				ret, err := net.DialTimeout("unix", socketPath, timeout)
0000000000000000000000000000000000000000;;				return ret, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			httpTransport.Dial = unixDial
0000000000000000000000000000000000000000;;			unix2HTTP(u)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			httpTransport.Dial = func(proto, addr string) (net.Conn, error) {
0000000000000000000000000000000000000000;;				return net.DialTimeout(proto, addr, timeout)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &http.Client{Transport: httpTransport}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getHttpClient(host string) *http.Client {
0000000000000000000000000000000000000000;;		c, ok := httpCache[host]
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			cacheLock.Lock()
0000000000000000000000000000000000000000;;			defer cacheLock.Unlock()
0000000000000000000000000000000000000000;;			c, ok = httpCache[host]
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				u, err := url.Parse(host)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					// TODO(pedge): clean up
0000000000000000000000000000000000000000;;					fmt.Println("Failed to parse into url", host)
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if u.Path == "" {
0000000000000000000000000000000000000000;;					u.Path = "/"
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				c = newHTTPClient(u, nil, 10*time.Second)
0000000000000000000000000000000000000000;;				httpCache[host] = c
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
