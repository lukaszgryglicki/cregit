0000000000000000000000000000000000000000;;	package volume
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/libopenstorage/openstorage/api"
0000000000000000000000000000000000000000;;		"github.com/libopenstorage/openstorage/api/client"
0000000000000000000000000000000000000000;;		"github.com/libopenstorage/openstorage/volume"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		graphPath  = "/graph"
0000000000000000000000000000000000000000;;		volumePath = "/osd-volumes"
0000000000000000000000000000000000000000;;		snapPath   = "/osd-snapshot"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type volumeClient struct {
0000000000000000000000000000000000000000;;		volume.IODriver
0000000000000000000000000000000000000000;;		c *client.Client
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newVolumeClient(c *client.Client) volume.VolumeDriver {
0000000000000000000000000000000000000000;;		return &volumeClient{volume.IONotSupported, c}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String description of this driver.
0000000000000000000000000000000000000000;;	func (v *volumeClient) Name() string {
0000000000000000000000000000000000000000;;		return "VolumeDriver"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v *volumeClient) Type() api.DriverType {
0000000000000000000000000000000000000000;;		// Block drivers implement the superset.
0000000000000000000000000000000000000000;;		return api.DriverType_DRIVER_TYPE_BLOCK
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v *volumeClient) GraphDriverCreate(id string, parent string) error {
0000000000000000000000000000000000000000;;		response := ""
0000000000000000000000000000000000000000;;		if err := v.c.Put().Resource(graphPath + "/create").Instance(id).Do().Unmarshal(&response); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if response != id {
0000000000000000000000000000000000000000;;			return fmt.Errorf("Invalid response: %s", response)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v *volumeClient) GraphDriverRemove(id string) error {
0000000000000000000000000000000000000000;;		response := ""
0000000000000000000000000000000000000000;;		if err := v.c.Put().Resource(graphPath + "/remove").Instance(id).Do().Unmarshal(&response); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if response != id {
0000000000000000000000000000000000000000;;			return fmt.Errorf("Invalid response: %s", response)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v *volumeClient) GraphDriverGet(id string, mountLabel string) (string, error) {
0000000000000000000000000000000000000000;;		response := ""
0000000000000000000000000000000000000000;;		if err := v.c.Get().Resource(graphPath + "/inspect").Instance(id).Do().Unmarshal(&response); err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return response, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v *volumeClient) GraphDriverRelease(id string) error {
0000000000000000000000000000000000000000;;		response := ""
0000000000000000000000000000000000000000;;		if err := v.c.Put().Resource(graphPath + "/release").Instance(id).Do().Unmarshal(&response); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if response != id {
0000000000000000000000000000000000000000;;			return fmt.Errorf("Invalid response: %v", response)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v *volumeClient) GraphDriverExists(id string) bool {
0000000000000000000000000000000000000000;;		response := false
0000000000000000000000000000000000000000;;		v.c.Get().Resource(graphPath + "/exists").Instance(id).Do().Unmarshal(&response)
0000000000000000000000000000000000000000;;		return response
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v *volumeClient) GraphDriverDiff(id string, parent string) io.Writer {
0000000000000000000000000000000000000000;;		body, _ := v.c.Get().Resource(graphPath + "/diff?id=" + id + "&parent=" + parent).Do().Body()
0000000000000000000000000000000000000000;;		return bytes.NewBuffer(body)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v *volumeClient) GraphDriverChanges(id string, parent string) ([]api.GraphDriverChanges, error) {
0000000000000000000000000000000000000000;;		var changes []api.GraphDriverChanges
0000000000000000000000000000000000000000;;		err := v.c.Get().Resource(graphPath + "/changes").Instance(id).Do().Unmarshal(&changes)
0000000000000000000000000000000000000000;;		return changes, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v *volumeClient) GraphDriverApplyDiff(id string, parent string, diff io.Reader) (int, error) {
0000000000000000000000000000000000000000;;		b, err := ioutil.ReadAll(diff)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		response := 0
0000000000000000000000000000000000000000;;		if err = v.c.Put().Resource(graphPath + "/diff?id=" + id + "&parent=" + parent).Instance(id).Body(b).Do().Unmarshal(&response); err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return response, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v *volumeClient) GraphDriverDiffSize(id string, parent string) (int, error) {
0000000000000000000000000000000000000000;;		size := 0
0000000000000000000000000000000000000000;;		err := v.c.Get().Resource(graphPath + "/diffsize").Instance(id).Do().Unmarshal(&size)
0000000000000000000000000000000000000000;;		return size, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create a new Vol for the specific volume spev.c.
0000000000000000000000000000000000000000;;	// It returns a system generated VolumeID that uniquely identifies the volume
0000000000000000000000000000000000000000;;	func (v *volumeClient) Create(locator *api.VolumeLocator, source *api.Source,
0000000000000000000000000000000000000000;;		spec *api.VolumeSpec) (string, error) {
0000000000000000000000000000000000000000;;		response := &api.VolumeCreateResponse{}
0000000000000000000000000000000000000000;;		request := &api.VolumeCreateRequest{
0000000000000000000000000000000000000000;;			Locator: locator,
0000000000000000000000000000000000000000;;			Source:  source,
0000000000000000000000000000000000000000;;			Spec:    spec,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := v.c.Post().Resource(volumePath).Body(request).Do().Unmarshal(response); err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if response.VolumeResponse != nil && response.VolumeResponse.Error != "" {
0000000000000000000000000000000000000000;;			return "", errors.New(response.VolumeResponse.Error)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return response.Id, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Status diagnostic information
0000000000000000000000000000000000000000;;	func (v *volumeClient) Status() [][2]string {
0000000000000000000000000000000000000000;;		return [][2]string{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Inspect specified volumes.
0000000000000000000000000000000000000000;;	// Errors ErrEnoEnt may be returned.
0000000000000000000000000000000000000000;;	func (v *volumeClient) Inspect(ids []string) ([]*api.Volume, error) {
0000000000000000000000000000000000000000;;		if len(ids) == 0 {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var volumes []*api.Volume
0000000000000000000000000000000000000000;;		request := v.c.Get().Resource(volumePath)
0000000000000000000000000000000000000000;;		for _, id := range ids {
0000000000000000000000000000000000000000;;			request.QueryOption(api.OptVolumeID, id)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := request.Do().Unmarshal(&volumes); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return volumes, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Delete volume.
0000000000000000000000000000000000000000;;	// Errors ErrEnoEnt, ErrVolHasSnaps may be returned.
0000000000000000000000000000000000000000;;	func (v *volumeClient) Delete(volumeID string) error {
0000000000000000000000000000000000000000;;		response := &api.VolumeResponse{}
0000000000000000000000000000000000000000;;		if err := v.c.Delete().Resource(volumePath).Instance(volumeID).Do().Unmarshal(response); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if response.Error != "" {
0000000000000000000000000000000000000000;;			return errors.New(response.Error)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Snap specified volume. IO to the underlying volume should be quiesced before
0000000000000000000000000000000000000000;;	// calling this function.
0000000000000000000000000000000000000000;;	// Errors ErrEnoEnt may be returned
0000000000000000000000000000000000000000;;	func (v *volumeClient) Snapshot(volumeID string, readonly bool,
0000000000000000000000000000000000000000;;		locator *api.VolumeLocator) (string, error) {
0000000000000000000000000000000000000000;;		response := &api.SnapCreateResponse{}
0000000000000000000000000000000000000000;;		request := &api.SnapCreateRequest{
0000000000000000000000000000000000000000;;			Id:       volumeID,
0000000000000000000000000000000000000000;;			Readonly: readonly,
0000000000000000000000000000000000000000;;			Locator:  locator,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := v.c.Post().Resource(snapPath).Body(request).Do().Unmarshal(response); err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// TODO(pedge): this probably should not be embedded in this way
0000000000000000000000000000000000000000;;		if response.VolumeCreateResponse != nil &&
0000000000000000000000000000000000000000;;			response.VolumeCreateResponse.VolumeResponse != nil &&
0000000000000000000000000000000000000000;;			response.VolumeCreateResponse.VolumeResponse.Error != "" {
0000000000000000000000000000000000000000;;			return "", errors.New(
0000000000000000000000000000000000000000;;				response.VolumeCreateResponse.VolumeResponse.Error)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if response.VolumeCreateResponse != nil {
0000000000000000000000000000000000000000;;			return response.VolumeCreateResponse.Id, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "", nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Stats for specified volume.
0000000000000000000000000000000000000000;;	// Errors ErrEnoEnt may be returned
0000000000000000000000000000000000000000;;	func (v *volumeClient) Stats(
0000000000000000000000000000000000000000;;		volumeID string,
0000000000000000000000000000000000000000;;		cumulative bool,
0000000000000000000000000000000000000000;;	) (*api.Stats, error) {
0000000000000000000000000000000000000000;;		stats := &api.Stats{}
0000000000000000000000000000000000000000;;		req := v.c.Get().Resource(volumePath + "/stats").Instance(volumeID)
0000000000000000000000000000000000000000;;		req.QueryOption(api.OptCumulative, strconv.FormatBool(cumulative))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := req.Do().Unmarshal(stats); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return stats, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Alerts on this volume.
0000000000000000000000000000000000000000;;	// Errors ErrEnoEnt may be returned
0000000000000000000000000000000000000000;;	func (v *volumeClient) Alerts(volumeID string) (*api.Alerts, error) {
0000000000000000000000000000000000000000;;		alerts := &api.Alerts{}
0000000000000000000000000000000000000000;;		if err := v.c.Get().Resource(volumePath + "/alerts").Instance(volumeID).Do().Unmarshal(alerts); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return alerts, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Active Requests on all volume.
0000000000000000000000000000000000000000;;	func (v *volumeClient) GetActiveRequests() (*api.ActiveRequests, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		requests := &api.ActiveRequests{}
0000000000000000000000000000000000000000;;		resp := v.c.Get().Resource(volumePath + "/requests").Instance("vol_id").Do()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if resp.Error() != nil {
0000000000000000000000000000000000000000;;			return nil, resp.FormatError()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := resp.Unmarshal(requests); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return requests, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Shutdown and cleanup.
0000000000000000000000000000000000000000;;	func (v *volumeClient) Shutdown() {}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Enumerate volumes that map to the volumeLocator. Locator fields may be regexp.
0000000000000000000000000000000000000000;;	// If locator fields are left blank, this will return all volumes.
0000000000000000000000000000000000000000;;	func (v *volumeClient) Enumerate(locator *api.VolumeLocator,
0000000000000000000000000000000000000000;;		labels map[string]string) ([]*api.Volume, error) {
0000000000000000000000000000000000000000;;		var volumes []*api.Volume
0000000000000000000000000000000000000000;;		req := v.c.Get().Resource(volumePath)
0000000000000000000000000000000000000000;;		if locator.Name != "" {
0000000000000000000000000000000000000000;;			req.QueryOption(api.OptName, locator.Name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(locator.VolumeLabels) != 0 {
0000000000000000000000000000000000000000;;			req.QueryOptionLabel(api.OptLabel, locator.VolumeLabels)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(labels) != 0 {
0000000000000000000000000000000000000000;;			req.QueryOptionLabel(api.OptConfigLabel, labels)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		resp := req.Do()
0000000000000000000000000000000000000000;;		if resp.Error() != nil {
0000000000000000000000000000000000000000;;			return nil, resp.FormatError()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := resp.Unmarshal(&volumes); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return volumes, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Enumerate snaps for specified volume
0000000000000000000000000000000000000000;;	// Count indicates the number of snaps populated.
0000000000000000000000000000000000000000;;	func (v *volumeClient) SnapEnumerate(ids []string,
0000000000000000000000000000000000000000;;		snapLabels map[string]string) ([]*api.Volume, error) {
0000000000000000000000000000000000000000;;		var volumes []*api.Volume
0000000000000000000000000000000000000000;;		request := v.c.Get().Resource(snapPath)
0000000000000000000000000000000000000000;;		for _, id := range ids {
0000000000000000000000000000000000000000;;			request.QueryOption(api.OptVolumeID, id)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(snapLabels) != 0 {
0000000000000000000000000000000000000000;;			request.QueryOptionLabel(api.OptLabel, snapLabels)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := request.Do().Unmarshal(&volumes); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return volumes, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Attach map device to the host.
0000000000000000000000000000000000000000;;	// On success the devicePath specifies location where the device is exported
0000000000000000000000000000000000000000;;	// Errors ErrEnoEnt, ErrVolAttached may be returned.
0000000000000000000000000000000000000000;;	func (v *volumeClient) Attach(volumeID string) (string, error) {
0000000000000000000000000000000000000000;;		response, err := v.doVolumeSetGetResponse(
0000000000000000000000000000000000000000;;			volumeID,
0000000000000000000000000000000000000000;;			&api.VolumeSetRequest{
0000000000000000000000000000000000000000;;				Action: &api.VolumeStateAction{
0000000000000000000000000000000000000000;;					Attach: api.VolumeActionParam_VOLUME_ACTION_PARAM_ON,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if response.Volume != nil {
0000000000000000000000000000000000000000;;			if response.Volume.Spec.Encrypted {
0000000000000000000000000000000000000000;;				return response.Volume.SecureDevicePath, nil
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				return response.Volume.DevicePath, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "", nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Detach device from the host.
0000000000000000000000000000000000000000;;	// Errors ErrEnoEnt, ErrVolDetached may be returned.
0000000000000000000000000000000000000000;;	func (v *volumeClient) Detach(volumeID string) error {
0000000000000000000000000000000000000000;;		return v.doVolumeSet(
0000000000000000000000000000000000000000;;			volumeID,
0000000000000000000000000000000000000000;;			&api.VolumeSetRequest{
0000000000000000000000000000000000000000;;				Action: &api.VolumeStateAction{
0000000000000000000000000000000000000000;;					Attach: api.VolumeActionParam_VOLUME_ACTION_PARAM_OFF,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v *volumeClient) MountedAt(mountPath string) string {
0000000000000000000000000000000000000000;;		return ""
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Mount volume at specified path
0000000000000000000000000000000000000000;;	// Errors ErrEnoEnt, ErrVolDetached may be returned.
0000000000000000000000000000000000000000;;	func (v *volumeClient) Mount(volumeID string, mountPath string) error {
0000000000000000000000000000000000000000;;		return v.doVolumeSet(
0000000000000000000000000000000000000000;;			volumeID,
0000000000000000000000000000000000000000;;			&api.VolumeSetRequest{
0000000000000000000000000000000000000000;;				Action: &api.VolumeStateAction{
0000000000000000000000000000000000000000;;					Mount:     api.VolumeActionParam_VOLUME_ACTION_PARAM_ON,
0000000000000000000000000000000000000000;;					MountPath: mountPath,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Unmount volume at specified path
0000000000000000000000000000000000000000;;	// Errors ErrEnoEnt, ErrVolDetached may be returned.
0000000000000000000000000000000000000000;;	func (v *volumeClient) Unmount(volumeID string, mountPath string) error {
0000000000000000000000000000000000000000;;		return v.doVolumeSet(
0000000000000000000000000000000000000000;;			volumeID,
0000000000000000000000000000000000000000;;			&api.VolumeSetRequest{
0000000000000000000000000000000000000000;;				Action: &api.VolumeStateAction{
0000000000000000000000000000000000000000;;					Mount:     api.VolumeActionParam_VOLUME_ACTION_PARAM_OFF,
0000000000000000000000000000000000000000;;					MountPath: mountPath,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Update volume
0000000000000000000000000000000000000000;;	func (v *volumeClient) Set(volumeID string, locator *api.VolumeLocator,
0000000000000000000000000000000000000000;;		spec *api.VolumeSpec) error {
0000000000000000000000000000000000000000;;		return v.doVolumeSet(
0000000000000000000000000000000000000000;;			volumeID,
0000000000000000000000000000000000000000;;			&api.VolumeSetRequest{
0000000000000000000000000000000000000000;;				Locator: locator,
0000000000000000000000000000000000000000;;				Spec:    spec,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v *volumeClient) doVolumeSet(volumeID string,
0000000000000000000000000000000000000000;;		request *api.VolumeSetRequest) error {
0000000000000000000000000000000000000000;;		_, err := v.doVolumeSetGetResponse(volumeID, request)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v *volumeClient) doVolumeSetGetResponse(volumeID string,
0000000000000000000000000000000000000000;;		request *api.VolumeSetRequest) (*api.VolumeSetResponse, error) {
0000000000000000000000000000000000000000;;		response := &api.VolumeSetResponse{}
0000000000000000000000000000000000000000;;		if err := v.c.Put().Resource(volumePath).Instance(volumeID).Body(request).Do().Unmarshal(response); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if response.VolumeResponse != nil && response.VolumeResponse.Error != "" {
0000000000000000000000000000000000000000;;			return nil, errors.New(response.VolumeResponse.Error)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return response, nil
0000000000000000000000000000000000000000;;	}
