0000000000000000000000000000000000000000;;	package client
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Request is contructed iteratively by the client and finally dispatched.
0000000000000000000000000000000000000000;;	// A REST endpoint is accessed with the following convention:
0000000000000000000000000000000000000000;;	// base_url/<version>/<resource>/[<instance>]
0000000000000000000000000000000000000000;;	type Request struct {
0000000000000000000000000000000000000000;;		client   *http.Client
0000000000000000000000000000000000000000;;		version  string
0000000000000000000000000000000000000000;;		verb     string
0000000000000000000000000000000000000000;;		path     string
0000000000000000000000000000000000000000;;		base     *url.URL
0000000000000000000000000000000000000000;;		params   url.Values
0000000000000000000000000000000000000000;;		headers  http.Header
0000000000000000000000000000000000000000;;		resource string
0000000000000000000000000000000000000000;;		instance string
0000000000000000000000000000000000000000;;		err      error
0000000000000000000000000000000000000000;;		body     []byte
0000000000000000000000000000000000000000;;		req      *http.Request
0000000000000000000000000000000000000000;;		resp     *http.Response
0000000000000000000000000000000000000000;;		timeout  time.Duration
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Response is a representation of HTTP response received from the server.
0000000000000000000000000000000000000000;;	type Response struct {
0000000000000000000000000000000000000000;;		status     string
0000000000000000000000000000000000000000;;		statusCode int
0000000000000000000000000000000000000000;;		err        error
0000000000000000000000000000000000000000;;		body       []byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Status upon error, attempts to parse the body of a response into a meaningful status.
0000000000000000000000000000000000000000;;	type Status struct {
0000000000000000000000000000000000000000;;		Message   string
0000000000000000000000000000000000000000;;		ErrorCode int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewRequest instance
0000000000000000000000000000000000000000;;	func NewRequest(client *http.Client, base *url.URL, verb string, version string) *Request {
0000000000000000000000000000000000000000;;		return &Request{
0000000000000000000000000000000000000000;;			client:  client,
0000000000000000000000000000000000000000;;			verb:    verb,
0000000000000000000000000000000000000000;;			base:    base,
0000000000000000000000000000000000000000;;			path:    base.Path,
0000000000000000000000000000000000000000;;			version: version,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func checkExists(mustExist string, before string) error {
0000000000000000000000000000000000000000;;		if len(mustExist) == 0 {
0000000000000000000000000000000000000000;;			return fmt.Errorf("%q should be set before setting %q", mustExist, before)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func checkSet(name string, s *string, newval string) error {
0000000000000000000000000000000000000000;;		if len(*s) != 0 {
0000000000000000000000000000000000000000;;			return fmt.Errorf("%q already set to %q, cannot change to %q",
0000000000000000000000000000000000000000;;				name, *s, newval)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*s = newval
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Resource specifies the resource to be accessed.
0000000000000000000000000000000000000000;;	func (r *Request) Resource(resource string) *Request {
0000000000000000000000000000000000000000;;		if r.err == nil {
0000000000000000000000000000000000000000;;			r.err = checkSet("resource", &r.resource, resource)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return r
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Instance specifies the instance of the resource to be accessed.
0000000000000000000000000000000000000000;;	func (r *Request) Instance(instance string) *Request {
0000000000000000000000000000000000000000;;		if r.err == nil {
0000000000000000000000000000000000000000;;			r.err = checkExists("resource", "instance")
0000000000000000000000000000000000000000;;			if r.err == nil {
0000000000000000000000000000000000000000;;				r.err = checkSet("instance", &r.instance, instance)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return r
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UsePath use the specified path and don't build up a request.
0000000000000000000000000000000000000000;;	func (r *Request) UsePath(path string) *Request {
0000000000000000000000000000000000000000;;		if r.err == nil {
0000000000000000000000000000000000000000;;			r.err = checkSet("path", &r.path, path)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return r
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// QueryOption adds specified options to query.
0000000000000000000000000000000000000000;;	func (r *Request) QueryOption(key string, value string) *Request {
0000000000000000000000000000000000000000;;		if r.err != nil {
0000000000000000000000000000000000000000;;			return r
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if r.params == nil {
0000000000000000000000000000000000000000;;			r.params = make(url.Values)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r.params.Add(string(key), value)
0000000000000000000000000000000000000000;;		return r
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// QueryOptionLabel adds specified label to query.
0000000000000000000000000000000000000000;;	func (r *Request) QueryOptionLabel(key string, labels map[string]string) *Request {
0000000000000000000000000000000000000000;;		if r.err != nil {
0000000000000000000000000000000000000000;;			return r
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if b, err := json.Marshal(labels); err != nil {
0000000000000000000000000000000000000000;;			r.err = err
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			if r.params == nil {
0000000000000000000000000000000000000000;;				r.params = make(url.Values)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			r.params.Add(string(key), string(b))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return r
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetHeader adds specified header values to query.
0000000000000000000000000000000000000000;;	func (r *Request) SetHeader(key, value string) *Request {
0000000000000000000000000000000000000000;;		if r.headers == nil {
0000000000000000000000000000000000000000;;			r.headers = http.Header{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r.headers.Set(key, value)
0000000000000000000000000000000000000000;;		return r
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Timeout makes the request use the given duration as a timeout. Sets the "timeout"
0000000000000000000000000000000000000000;;	// parameter.
0000000000000000000000000000000000000000;;	func (r *Request) Timeout(d time.Duration) *Request {
0000000000000000000000000000000000000000;;		if r.err != nil {
0000000000000000000000000000000000000000;;			return r
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r.timeout = d
0000000000000000000000000000000000000000;;		return r
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Body sets the request Body.
0000000000000000000000000000000000000000;;	func (r *Request) Body(v interface{}) *Request {
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		if r.err != nil {
0000000000000000000000000000000000000000;;			return r
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r.body, err = json.Marshal(v)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			r.err = err
0000000000000000000000000000000000000000;;			return r
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return r
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// URL returns the current working URL.
0000000000000000000000000000000000000000;;	func (r *Request) URL() *url.URL {
0000000000000000000000000000000000000000;;		u := *r.base
0000000000000000000000000000000000000000;;		p := r.path
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(r.version) != 0 {
0000000000000000000000000000000000000000;;			p = path.Join(p, strings.ToLower(r.version))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(r.resource) != 0 {
0000000000000000000000000000000000000000;;			p = path.Join(p, strings.ToLower(r.resource))
0000000000000000000000000000000000000000;;			if len(r.instance) != 0 {
0000000000000000000000000000000000000000;;				p = path.Join(p, r.instance)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		u.Path = p
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		query := url.Values{}
0000000000000000000000000000000000000000;;		for key, values := range r.params {
0000000000000000000000000000000000000000;;			for _, value := range values {
0000000000000000000000000000000000000000;;				query.Add(key, value)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if r.timeout != 0 {
0000000000000000000000000000000000000000;;			query.Set("timeout", r.timeout.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		u.RawQuery = query.Encode()
0000000000000000000000000000000000000000;;		return &u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// headerVal for key as an int. Return false if header is not present or valid.
0000000000000000000000000000000000000000;;	func headerVal(key string, resp *http.Response) (int, bool) {
0000000000000000000000000000000000000000;;		if h := resp.Header.Get(key); len(h) > 0 {
0000000000000000000000000000000000000000;;			if i, err := strconv.Atoi(h); err == nil {
0000000000000000000000000000000000000000;;				return i, true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return 0, false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func parseHTTPStatus(resp *http.Response, body []byte) error {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			status *Status
0000000000000000000000000000000000000000;;			err    error
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		httpOK := resp.StatusCode >= http.StatusOK && resp.StatusCode <= http.StatusPartialContent
0000000000000000000000000000000000000000;;		hasStatus := false
0000000000000000000000000000000000000000;;		if body != nil {
0000000000000000000000000000000000000000;;			err = json.Unmarshal(body, status)
0000000000000000000000000000000000000000;;			if err == nil && status.Message != "" {
0000000000000000000000000000000000000000;;				hasStatus = true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// If the status is NG, return an error regardless of HTTP status.
0000000000000000000000000000000000000000;;		if hasStatus && status.ErrorCode != 0 {
0000000000000000000000000000000000000000;;			return fmt.Errorf("Error %v : %v", status.ErrorCode, status.Message)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Status is good and HTTP status is good, everything is good
0000000000000000000000000000000000000000;;		if httpOK {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If HTTP status is NG, return an error.
0000000000000000000000000000000000000000;;		return fmt.Errorf("HTTP error %d", resp.StatusCode)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the request and returns a Response.
0000000000000000000000000000000000000000;;	func (r *Request) Do() *Response {
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			err  error
0000000000000000000000000000000000000000;;			req  *http.Request
0000000000000000000000000000000000000000;;			resp *http.Response
0000000000000000000000000000000000000000;;			url  string
0000000000000000000000000000000000000000;;			body []byte
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		if r.err != nil {
0000000000000000000000000000000000000000;;			return &Response{err: r.err}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		url = r.URL().String()
0000000000000000000000000000000000000000;;		req, err = http.NewRequest(r.verb, url, bytes.NewBuffer(r.body))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return &Response{err: err}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if r.headers == nil {
0000000000000000000000000000000000000000;;			r.headers = http.Header{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		req.Header = r.headers
0000000000000000000000000000000000000000;;		req.Header.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		resp, err = r.client.Do(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return &Response{err: err}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if resp.Body != nil {
0000000000000000000000000000000000000000;;			defer resp.Body.Close()
0000000000000000000000000000000000000000;;			body, err = ioutil.ReadAll(resp.Body)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return &Response{err: err}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &Response{
0000000000000000000000000000000000000000;;			status:     resp.Status,
0000000000000000000000000000000000000000;;			statusCode: resp.StatusCode,
0000000000000000000000000000000000000000;;			body:       body,
0000000000000000000000000000000000000000;;			err:        parseHTTPStatus(resp, body),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Body return http body, valid only if there is no error
0000000000000000000000000000000000000000;;	func (r Response) Body() ([]byte, error) {
0000000000000000000000000000000000000000;;		return r.body, r.err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StatusCode HTTP status code returned.
0000000000000000000000000000000000000000;;	func (r Response) StatusCode() int {
0000000000000000000000000000000000000000;;		return r.statusCode
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Unmarshal result into obj
0000000000000000000000000000000000000000;;	func (r Response) Unmarshal(v interface{}) error {
0000000000000000000000000000000000000000;;		if r.err != nil {
0000000000000000000000000000000000000000;;			return r.err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return json.Unmarshal(r.body, v)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Error executing the request.
0000000000000000000000000000000000000000;;	func (r Response) Error() error {
0000000000000000000000000000000000000000;;		return r.err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r Response) FormatError() error {
0000000000000000000000000000000000000000;;		if len(r.body) == 0 {
0000000000000000000000000000000000000000;;			return fmt.Errorf("Error: %v", r.err)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			return fmt.Errorf("HTTP-%d: %s", r.statusCode, string(r.body))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
