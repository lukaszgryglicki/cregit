0000000000000000000000000000000000000000;;	// Copyright 2011 Google Inc.  All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
268e3120b2e4a7425b04801561b9aaf732ed6369;third_party/src/code.google.com/p/go-uuid/uuid/node.go[third_party/src/code.google.com/p/go-uuid/uuid/node.go][vendor/github.com/pborman/uuid/node.go];	
0000000000000000000000000000000000000000;;	package uuid
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "net"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		interfaces []net.Interface // cached list of interfaces
0000000000000000000000000000000000000000;;		ifname     string          // name of interface being used
0000000000000000000000000000000000000000;;		nodeID     []byte          // hardware for version 1 UUIDs
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NodeInterface returns the name of the interface from which the NodeID was
0000000000000000000000000000000000000000;;	// derived.  The interface "user" is returned if the NodeID was set by
0000000000000000000000000000000000000000;;	// SetNodeID.
0000000000000000000000000000000000000000;;	func NodeInterface() string {
0000000000000000000000000000000000000000;;		return ifname
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNodeInterface selects the hardware address to be used for Version 1 UUIDs.
0000000000000000000000000000000000000000;;	// If name is "" then the first usable interface found will be used or a random
0000000000000000000000000000000000000000;;	// Node ID will be generated.  If a named interface cannot be found then false
0000000000000000000000000000000000000000;;	// is returned.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// SetNodeInterface never fails when name is "".
0000000000000000000000000000000000000000;;	func SetNodeInterface(name string) bool {
0000000000000000000000000000000000000000;;		if interfaces == nil {
0000000000000000000000000000000000000000;;			var err error
0000000000000000000000000000000000000000;;			interfaces, err = net.Interfaces()
0000000000000000000000000000000000000000;;			if err != nil && name != "" {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, ifs := range interfaces {
0000000000000000000000000000000000000000;;			if len(ifs.HardwareAddr) >= 6 && (name == "" || name == ifs.Name) {
0000000000000000000000000000000000000000;;				if setNodeID(ifs.HardwareAddr) {
0000000000000000000000000000000000000000;;					ifname = ifs.Name
0000000000000000000000000000000000000000;;					return true
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// We found no interfaces with a valid hardware address.  If name
0000000000000000000000000000000000000000;;		// does not specify a specific interface generate a random Node ID
0000000000000000000000000000000000000000;;		// (section 4.1.6)
0000000000000000000000000000000000000000;;		if name == "" {
0000000000000000000000000000000000000000;;			if nodeID == nil {
0000000000000000000000000000000000000000;;				nodeID = make([]byte, 6)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			randomBits(nodeID)
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NodeID returns a slice of a copy of the current Node ID, setting the Node ID
0000000000000000000000000000000000000000;;	// if not already set.
0000000000000000000000000000000000000000;;	func NodeID() []byte {
0000000000000000000000000000000000000000;;		if nodeID == nil {
0000000000000000000000000000000000000000;;			SetNodeInterface("")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		nid := make([]byte, 6)
0000000000000000000000000000000000000000;;		copy(nid, nodeID)
0000000000000000000000000000000000000000;;		return nid
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNodeID sets the Node ID to be used for Version 1 UUIDs.  The first 6 bytes
0000000000000000000000000000000000000000;;	// of id are used.  If id is less than 6 bytes then false is returned and the
0000000000000000000000000000000000000000;;	// Node ID is not set.
0000000000000000000000000000000000000000;;	func SetNodeID(id []byte) bool {
0000000000000000000000000000000000000000;;		if setNodeID(id) {
0000000000000000000000000000000000000000;;			ifname = "user"
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func setNodeID(id []byte) bool {
0000000000000000000000000000000000000000;;		if len(id) < 6 {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if nodeID == nil {
0000000000000000000000000000000000000000;;			nodeID = make([]byte, 6)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		copy(nodeID, id)
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NodeID returns the 6 byte node id encoded in uuid.  It returns nil if uuid is
0000000000000000000000000000000000000000;;	// not valid.  The NodeID is only well defined for version 1 and 2 UUIDs.
0000000000000000000000000000000000000000;;	func (uuid UUID) NodeID() []byte {
0000000000000000000000000000000000000000;;		if len(uuid) != 16 {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		node := make([]byte, 6)
0000000000000000000000000000000000000000;;		copy(node, uuid[10:])
0000000000000000000000000000000000000000;;		return node
0000000000000000000000000000000000000000;;	}
