0000000000000000000000000000000000000000;;	// Copyright 2011 Google Inc.  All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
268e3120b2e4a7425b04801561b9aaf732ed6369;third_party/src/code.google.com/p/go-uuid/uuid/dce.go[third_party/src/code.google.com/p/go-uuid/uuid/dce.go][vendor/github.com/pborman/uuid/dce.go];	
0000000000000000000000000000000000000000;;	package uuid
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/binary"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A Domain represents a Version 2 domain
0000000000000000000000000000000000000000;;	type Domain byte
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Domain constants for DCE Security (Version 2) UUIDs.
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		Person = Domain(0)
0000000000000000000000000000000000000000;;		Group  = Domain(1)
0000000000000000000000000000000000000000;;		Org    = Domain(2)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewDCESecurity returns a DCE Security (Version 2) UUID.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The domain should be one of Person, Group or Org.
0000000000000000000000000000000000000000;;	// On a POSIX system the id should be the users UID for the Person
0000000000000000000000000000000000000000;;	// domain and the users GID for the Group.  The meaning of id for
0000000000000000000000000000000000000000;;	// the domain Org or on non-POSIX systems is site defined.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For a given domain/id pair the same token may be returned for up to
0000000000000000000000000000000000000000;;	// 7 minutes and 10 seconds.
0000000000000000000000000000000000000000;;	func NewDCESecurity(domain Domain, id uint32) UUID {
0000000000000000000000000000000000000000;;		uuid := NewUUID()
0000000000000000000000000000000000000000;;		if uuid != nil {
0000000000000000000000000000000000000000;;			uuid[6] = (uuid[6] & 0x0f) | 0x20 // Version 2
0000000000000000000000000000000000000000;;			uuid[9] = byte(domain)
0000000000000000000000000000000000000000;;			binary.BigEndian.PutUint32(uuid[0:], id)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return uuid
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewDCEPerson returns a DCE Security (Version 2) UUID in the person
0000000000000000000000000000000000000000;;	// domain with the id returned by os.Getuid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//  NewDCEPerson(Person, uint32(os.Getuid()))
0000000000000000000000000000000000000000;;	func NewDCEPerson() UUID {
0000000000000000000000000000000000000000;;		return NewDCESecurity(Person, uint32(os.Getuid()))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewDCEGroup returns a DCE Security (Version 2) UUID in the group
0000000000000000000000000000000000000000;;	// domain with the id returned by os.Getgid.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//  NewDCEGroup(Group, uint32(os.Getgid()))
0000000000000000000000000000000000000000;;	func NewDCEGroup() UUID {
0000000000000000000000000000000000000000;;		return NewDCESecurity(Group, uint32(os.Getgid()))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Domain returns the domain for a Version 2 UUID or false.
0000000000000000000000000000000000000000;;	func (uuid UUID) Domain() (Domain, bool) {
0000000000000000000000000000000000000000;;		if v, _ := uuid.Version(); v != 2 {
0000000000000000000000000000000000000000;;			return 0, false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return Domain(uuid[9]), true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Id returns the id for a Version 2 UUID or false.
0000000000000000000000000000000000000000;;	func (uuid UUID) Id() (uint32, bool) {
0000000000000000000000000000000000000000;;		if v, _ := uuid.Version(); v != 2 {
0000000000000000000000000000000000000000;;			return 0, false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return binary.BigEndian.Uint32(uuid[0:4]), true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d Domain) String() string {
0000000000000000000000000000000000000000;;		switch d {
0000000000000000000000000000000000000000;;		case Person:
0000000000000000000000000000000000000000;;			return "Person"
0000000000000000000000000000000000000000;;		case Group:
0000000000000000000000000000000000000000;;			return "Group"
0000000000000000000000000000000000000000;;		case Org:
0000000000000000000000000000000000000000;;			return "Org"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fmt.Sprintf("Domain%d", int(d))
0000000000000000000000000000000000000000;;	}
