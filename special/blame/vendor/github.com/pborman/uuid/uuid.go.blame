0000000000000000000000000000000000000000;;	// Copyright 2011 Google Inc.  All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
268e3120b2e4a7425b04801561b9aaf732ed6369;third_party/src/code.google.com/p/go-uuid/uuid/uuid.go[third_party/src/code.google.com/p/go-uuid/uuid/uuid.go][vendor/github.com/pborman/uuid/uuid.go];	
0000000000000000000000000000000000000000;;	package uuid
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"crypto/rand"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A UUID is a 128 bit (16 byte) Universal Unique IDentifier as defined in RFC
0000000000000000000000000000000000000000;;	// 4122.
0000000000000000000000000000000000000000;;	type UUID []byte
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A Version represents a UUIDs version.
0000000000000000000000000000000000000000;;	type Version byte
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A Variant represents a UUIDs variant.
0000000000000000000000000000000000000000;;	type Variant byte
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Constants returned by Variant.
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		Invalid   = Variant(iota) // Invalid UUID
0000000000000000000000000000000000000000;;		RFC4122                   // The variant specified in RFC4122
0000000000000000000000000000000000000000;;		Reserved                  // Reserved, NCS backward compatibility.
0000000000000000000000000000000000000000;;		Microsoft                 // Reserved, Microsoft Corporation backward compatibility.
0000000000000000000000000000000000000000;;		Future                    // Reserved for future definition.
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var rander = rand.Reader // random function
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// New returns a new random (version 4) UUID as a string.  It is a convenience
0000000000000000000000000000000000000000;;	// function for NewRandom().String().
0000000000000000000000000000000000000000;;	func New() string {
0000000000000000000000000000000000000000;;		return NewRandom().String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Parse decodes s into a UUID or returns nil.  Both the UUID form of
0000000000000000000000000000000000000000;;	// xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx and
0000000000000000000000000000000000000000;;	// urn:uuid:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx are decoded.
0000000000000000000000000000000000000000;;	func Parse(s string) UUID {
0000000000000000000000000000000000000000;;		if len(s) == 36+9 {
0000000000000000000000000000000000000000;;			if strings.ToLower(s[:9]) != "urn:uuid:" {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			s = s[9:]
0000000000000000000000000000000000000000;;		} else if len(s) != 36 {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s[8] != '-' || s[13] != '-' || s[18] != '-' || s[23] != '-' {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		uuid := make([]byte, 16)
0000000000000000000000000000000000000000;;		for i, x := range []int{
0000000000000000000000000000000000000000;;			0, 2, 4, 6,
0000000000000000000000000000000000000000;;			9, 11,
0000000000000000000000000000000000000000;;			14, 16,
0000000000000000000000000000000000000000;;			19, 21,
0000000000000000000000000000000000000000;;			24, 26, 28, 30, 32, 34} {
0000000000000000000000000000000000000000;;			if v, ok := xtob(s[x:]); !ok {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				uuid[i] = v
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return uuid
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Equal returns true if uuid1 and uuid2 are equal.
0000000000000000000000000000000000000000;;	func Equal(uuid1, uuid2 UUID) bool {
0000000000000000000000000000000000000000;;		return bytes.Equal(uuid1, uuid2)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the string form of uuid, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
0000000000000000000000000000000000000000;;	// , or "" if uuid is invalid.
0000000000000000000000000000000000000000;;	func (uuid UUID) String() string {
0000000000000000000000000000000000000000;;		if uuid == nil || len(uuid) != 16 {
0000000000000000000000000000000000000000;;			return ""
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		b := []byte(uuid)
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%08x-%04x-%04x-%04x-%012x",
0000000000000000000000000000000000000000;;			b[:4], b[4:6], b[6:8], b[8:10], b[10:])
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// URN returns the RFC 2141 URN form of uuid,
0000000000000000000000000000000000000000;;	// urn:uuid:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx,  or "" if uuid is invalid.
0000000000000000000000000000000000000000;;	func (uuid UUID) URN() string {
0000000000000000000000000000000000000000;;		if uuid == nil || len(uuid) != 16 {
0000000000000000000000000000000000000000;;			return ""
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		b := []byte(uuid)
0000000000000000000000000000000000000000;;		return fmt.Sprintf("urn:uuid:%08x-%04x-%04x-%04x-%012x",
0000000000000000000000000000000000000000;;			b[:4], b[4:6], b[6:8], b[8:10], b[10:])
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Variant returns the variant encoded in uuid.  It returns Invalid if
0000000000000000000000000000000000000000;;	// uuid is invalid.
0000000000000000000000000000000000000000;;	func (uuid UUID) Variant() Variant {
0000000000000000000000000000000000000000;;		if len(uuid) != 16 {
0000000000000000000000000000000000000000;;			return Invalid
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case (uuid[8] & 0xc0) == 0x80:
0000000000000000000000000000000000000000;;			return RFC4122
0000000000000000000000000000000000000000;;		case (uuid[8] & 0xe0) == 0xc0:
0000000000000000000000000000000000000000;;			return Microsoft
0000000000000000000000000000000000000000;;		case (uuid[8] & 0xe0) == 0xe0:
0000000000000000000000000000000000000000;;			return Future
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return Reserved
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		panic("unreachable")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Version returns the verison of uuid.  It returns false if uuid is not
0000000000000000000000000000000000000000;;	// valid.
0000000000000000000000000000000000000000;;	func (uuid UUID) Version() (Version, bool) {
0000000000000000000000000000000000000000;;		if len(uuid) != 16 {
0000000000000000000000000000000000000000;;			return 0, false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return Version(uuid[6] >> 4), true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v Version) String() string {
0000000000000000000000000000000000000000;;		if v > 15 {
0000000000000000000000000000000000000000;;			return fmt.Sprintf("BAD_VERSION_%d", v)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fmt.Sprintf("VERSION_%d", v)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v Variant) String() string {
0000000000000000000000000000000000000000;;		switch v {
0000000000000000000000000000000000000000;;		case RFC4122:
0000000000000000000000000000000000000000;;			return "RFC4122"
0000000000000000000000000000000000000000;;		case Reserved:
0000000000000000000000000000000000000000;;			return "Reserved"
0000000000000000000000000000000000000000;;		case Microsoft:
0000000000000000000000000000000000000000;;			return "Microsoft"
0000000000000000000000000000000000000000;;		case Future:
0000000000000000000000000000000000000000;;			return "Future"
0000000000000000000000000000000000000000;;		case Invalid:
0000000000000000000000000000000000000000;;			return "Invalid"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fmt.Sprintf("BadVariant%d", int(v))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRand sets the random number generator to r, which implents io.Reader.
0000000000000000000000000000000000000000;;	// If r.Read returns an error when the package requests random data then
0000000000000000000000000000000000000000;;	// a panic will be issued.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Calling SetRand with nil sets the random number generator to the default
0000000000000000000000000000000000000000;;	// generator.
0000000000000000000000000000000000000000;;	func SetRand(r io.Reader) {
0000000000000000000000000000000000000000;;		if r == nil {
0000000000000000000000000000000000000000;;			rander = rand.Reader
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		rander = r
0000000000000000000000000000000000000000;;	}
