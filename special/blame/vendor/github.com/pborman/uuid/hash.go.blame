0000000000000000000000000000000000000000;;	// Copyright 2011 Google Inc.  All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
268e3120b2e4a7425b04801561b9aaf732ed6369;third_party/src/code.google.com/p/go-uuid/uuid/hash.go[third_party/src/code.google.com/p/go-uuid/uuid/hash.go][vendor/github.com/pborman/uuid/hash.go];	
0000000000000000000000000000000000000000;;	package uuid
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"crypto/md5"
0000000000000000000000000000000000000000;;		"crypto/sha1"
0000000000000000000000000000000000000000;;		"hash"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Well known Name Space IDs and UUIDs
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		NameSpace_DNS  = Parse("6ba7b810-9dad-11d1-80b4-00c04fd430c8")
0000000000000000000000000000000000000000;;		NameSpace_URL  = Parse("6ba7b811-9dad-11d1-80b4-00c04fd430c8")
0000000000000000000000000000000000000000;;		NameSpace_OID  = Parse("6ba7b812-9dad-11d1-80b4-00c04fd430c8")
0000000000000000000000000000000000000000;;		NameSpace_X500 = Parse("6ba7b814-9dad-11d1-80b4-00c04fd430c8")
0000000000000000000000000000000000000000;;		NIL            = Parse("00000000-0000-0000-0000-000000000000")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewHash returns a new UUID dervied from the hash of space concatenated with
0000000000000000000000000000000000000000;;	// data generated by h.  The hash should be at least 16 byte in length.  The
0000000000000000000000000000000000000000;;	// first 16 bytes of the hash are used to form the UUID.  The version of the
0000000000000000000000000000000000000000;;	// UUID will be the lower 4 bits of version.  NewHash is used to implement
0000000000000000000000000000000000000000;;	// NewMD5 and NewSHA1.
0000000000000000000000000000000000000000;;	func NewHash(h hash.Hash, space UUID, data []byte, version int) UUID {
0000000000000000000000000000000000000000;;		h.Reset()
0000000000000000000000000000000000000000;;		h.Write(space)
0000000000000000000000000000000000000000;;		h.Write([]byte(data))
0000000000000000000000000000000000000000;;		s := h.Sum(nil)
0000000000000000000000000000000000000000;;		uuid := make([]byte, 16)
0000000000000000000000000000000000000000;;		copy(uuid, s)
0000000000000000000000000000000000000000;;		uuid[6] = (uuid[6] & 0x0f) | uint8((version&0xf)<<4)
0000000000000000000000000000000000000000;;		uuid[8] = (uuid[8] & 0x3f) | 0x80 // RFC 4122 variant
0000000000000000000000000000000000000000;;		return uuid
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewMD5 returns a new MD5 (Version 3) UUID based on the
0000000000000000000000000000000000000000;;	// supplied name space and data.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//  NewHash(md5.New(), space, data, 3)
0000000000000000000000000000000000000000;;	func NewMD5(space UUID, data []byte) UUID {
0000000000000000000000000000000000000000;;		return NewHash(md5.New(), space, data, 3)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewSHA1 returns a new SHA1 (Version 5) UUID based on the
0000000000000000000000000000000000000000;;	// supplied name space and data.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//  NewHash(sha1.New(), space, data, 5)
0000000000000000000000000000000000000000;;	func NewSHA1(space UUID, data []byte) UUID {
0000000000000000000000000000000000000000;;		return NewHash(sha1.New(), space, data, 5)
0000000000000000000000000000000000000000;;	}
