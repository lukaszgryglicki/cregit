0000000000000000000000000000000000000000;;	// Copyright 2011 Google Inc.  All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
268e3120b2e4a7425b04801561b9aaf732ed6369;third_party/src/code.google.com/p/go-uuid/uuid/version1.go[third_party/src/code.google.com/p/go-uuid/uuid/version1.go][vendor/github.com/pborman/uuid/version1.go];	
0000000000000000000000000000000000000000;;	package uuid
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/binary"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewUUID returns a Version 1 UUID based on the current NodeID and clock
0000000000000000000000000000000000000000;;	// sequence, and the current time.  If the NodeID has not been set by SetNodeID
0000000000000000000000000000000000000000;;	// or SetNodeInterface then it will be set automatically.  If the NodeID cannot
0000000000000000000000000000000000000000;;	// be set NewUUID returns nil.  If clock sequence has not been set by
0000000000000000000000000000000000000000;;	// SetClockSequence then it will be set automatically.  If GetTime fails to
0000000000000000000000000000000000000000;;	// return the current NewUUID returns nil.
0000000000000000000000000000000000000000;;	func NewUUID() UUID {
0000000000000000000000000000000000000000;;		if nodeID == nil {
0000000000000000000000000000000000000000;;			SetNodeInterface("")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		now, seq, err := GetTime()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		uuid := make([]byte, 16)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		time_low := uint32(now & 0xffffffff)
0000000000000000000000000000000000000000;;		time_mid := uint16((now >> 32) & 0xffff)
0000000000000000000000000000000000000000;;		time_hi := uint16((now >> 48) & 0x0fff)
0000000000000000000000000000000000000000;;		time_hi |= 0x1000 // Version 1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		binary.BigEndian.PutUint32(uuid[0:], time_low)
0000000000000000000000000000000000000000;;		binary.BigEndian.PutUint16(uuid[4:], time_mid)
0000000000000000000000000000000000000000;;		binary.BigEndian.PutUint16(uuid[6:], time_hi)
0000000000000000000000000000000000000000;;		binary.BigEndian.PutUint16(uuid[8:], seq)
0000000000000000000000000000000000000000;;		copy(uuid[10:], nodeID)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return uuid
0000000000000000000000000000000000000000;;	}
