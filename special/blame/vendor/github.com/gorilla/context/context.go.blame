0000000000000000000000000000000000000000;;	// Copyright 2012 The Gorilla Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
1112581bf14ecbe49da5663b4a1980f25a695031;Godeps/_workspace/src/github.com/fsouza/go-dockerclient/vendor/github.com/gorilla/context/context.go[Godeps/_workspace/src/github.com/fsouza/go-dockerclient/vendor/github.com/gorilla/context/context.go][vendor/github.com/gorilla/context/context.go];	
0000000000000000000000000000000000000000;;	package context
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		mutex sync.RWMutex
0000000000000000000000000000000000000000;;		data  = make(map[*http.Request]map[interface{}]interface{})
0000000000000000000000000000000000000000;;		datat = make(map[*http.Request]int64)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Set stores a value for a given key in a given request.
0000000000000000000000000000000000000000;;	func Set(r *http.Request, key, val interface{}) {
0000000000000000000000000000000000000000;;		mutex.Lock()
0000000000000000000000000000000000000000;;		if data[r] == nil {
0000000000000000000000000000000000000000;;			data[r] = make(map[interface{}]interface{})
0000000000000000000000000000000000000000;;			datat[r] = time.Now().Unix()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		data[r][key] = val
0000000000000000000000000000000000000000;;		mutex.Unlock()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get returns a value stored for a given key in a given request.
0000000000000000000000000000000000000000;;	func Get(r *http.Request, key interface{}) interface{} {
0000000000000000000000000000000000000000;;		mutex.RLock()
0000000000000000000000000000000000000000;;		if ctx := data[r]; ctx != nil {
0000000000000000000000000000000000000000;;			value := ctx[key]
0000000000000000000000000000000000000000;;			mutex.RUnlock()
0000000000000000000000000000000000000000;;			return value
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		mutex.RUnlock()
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetOk returns stored value and presence state like multi-value return of map access.
0000000000000000000000000000000000000000;;	func GetOk(r *http.Request, key interface{}) (interface{}, bool) {
0000000000000000000000000000000000000000;;		mutex.RLock()
0000000000000000000000000000000000000000;;		if _, ok := data[r]; ok {
0000000000000000000000000000000000000000;;			value, ok := data[r][key]
0000000000000000000000000000000000000000;;			mutex.RUnlock()
0000000000000000000000000000000000000000;;			return value, ok
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		mutex.RUnlock()
0000000000000000000000000000000000000000;;		return nil, false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetAll returns all stored values for the request as a map. Nil is returned for invalid requests.
0000000000000000000000000000000000000000;;	func GetAll(r *http.Request) map[interface{}]interface{} {
0000000000000000000000000000000000000000;;		mutex.RLock()
0000000000000000000000000000000000000000;;		if context, ok := data[r]; ok {
0000000000000000000000000000000000000000;;			result := make(map[interface{}]interface{}, len(context))
0000000000000000000000000000000000000000;;			for k, v := range context {
0000000000000000000000000000000000000000;;				result[k] = v
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			mutex.RUnlock()
0000000000000000000000000000000000000000;;			return result
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		mutex.RUnlock()
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetAllOk returns all stored values for the request as a map and a boolean value that indicates if
0000000000000000000000000000000000000000;;	// the request was registered.
0000000000000000000000000000000000000000;;	func GetAllOk(r *http.Request) (map[interface{}]interface{}, bool) {
0000000000000000000000000000000000000000;;		mutex.RLock()
0000000000000000000000000000000000000000;;		context, ok := data[r]
0000000000000000000000000000000000000000;;		result := make(map[interface{}]interface{}, len(context))
0000000000000000000000000000000000000000;;		for k, v := range context {
0000000000000000000000000000000000000000;;			result[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		mutex.RUnlock()
0000000000000000000000000000000000000000;;		return result, ok
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Delete removes a value stored for a given key in a given request.
0000000000000000000000000000000000000000;;	func Delete(r *http.Request, key interface{}) {
0000000000000000000000000000000000000000;;		mutex.Lock()
0000000000000000000000000000000000000000;;		if data[r] != nil {
0000000000000000000000000000000000000000;;			delete(data[r], key)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		mutex.Unlock()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Clear removes all values stored for a given request.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This is usually called by a handler wrapper to clean up request
0000000000000000000000000000000000000000;;	// variables at the end of a request lifetime. See ClearHandler().
0000000000000000000000000000000000000000;;	func Clear(r *http.Request) {
0000000000000000000000000000000000000000;;		mutex.Lock()
0000000000000000000000000000000000000000;;		clear(r)
0000000000000000000000000000000000000000;;		mutex.Unlock()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// clear is Clear without the lock.
0000000000000000000000000000000000000000;;	func clear(r *http.Request) {
0000000000000000000000000000000000000000;;		delete(data, r)
0000000000000000000000000000000000000000;;		delete(datat, r)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Purge removes request data stored for longer than maxAge, in seconds.
0000000000000000000000000000000000000000;;	// It returns the amount of requests removed.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If maxAge <= 0, all request data is removed.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This is only used for sanity check: in case context cleaning was not
0000000000000000000000000000000000000000;;	// properly set some request data can be kept forever, consuming an increasing
0000000000000000000000000000000000000000;;	// amount of memory. In case this is detected, Purge() must be called
0000000000000000000000000000000000000000;;	// periodically until the problem is fixed.
0000000000000000000000000000000000000000;;	func Purge(maxAge int) int {
0000000000000000000000000000000000000000;;		mutex.Lock()
0000000000000000000000000000000000000000;;		count := 0
0000000000000000000000000000000000000000;;		if maxAge <= 0 {
0000000000000000000000000000000000000000;;			count = len(data)
0000000000000000000000000000000000000000;;			data = make(map[*http.Request]map[interface{}]interface{})
0000000000000000000000000000000000000000;;			datat = make(map[*http.Request]int64)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			min := time.Now().Unix() - int64(maxAge)
0000000000000000000000000000000000000000;;			for r := range data {
0000000000000000000000000000000000000000;;				if datat[r] < min {
0000000000000000000000000000000000000000;;					clear(r)
0000000000000000000000000000000000000000;;					count++
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		mutex.Unlock()
0000000000000000000000000000000000000000;;		return count
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ClearHandler wraps an http.Handler and clears request values at the end
0000000000000000000000000000000000000000;;	// of a request lifetime.
0000000000000000000000000000000000000000;;	func ClearHandler(h http.Handler) http.Handler {
0000000000000000000000000000000000000000;;		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			defer Clear(r)
0000000000000000000000000000000000000000;;			h.ServeHTTP(w, r)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
