0000000000000000000000000000000000000000;;	// Copyright 2013 The Gorilla WebSocket Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	package websocket
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WriteJSON is deprecated, use c.WriteJSON instead.
0000000000000000000000000000000000000000;;	func WriteJSON(c *Conn, v interface{}) error {
0000000000000000000000000000000000000000;;		return c.WriteJSON(v)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WriteJSON writes the JSON encoding of v to the connection.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the documentation for encoding/json Marshal for details about the
0000000000000000000000000000000000000000;;	// conversion of Go values to JSON.
0000000000000000000000000000000000000000;;	func (c *Conn) WriteJSON(v interface{}) error {
0000000000000000000000000000000000000000;;		w, err := c.NextWriter(TextMessage)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err1 := json.NewEncoder(w).Encode(v)
0000000000000000000000000000000000000000;;		err2 := w.Close()
0000000000000000000000000000000000000000;;		if err1 != nil {
0000000000000000000000000000000000000000;;			return err1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return err2
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ReadJSON is deprecated, use c.ReadJSON instead.
0000000000000000000000000000000000000000;;	func ReadJSON(c *Conn, v interface{}) error {
0000000000000000000000000000000000000000;;		return c.ReadJSON(v)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ReadJSON reads the next JSON-encoded message from the connection and stores
0000000000000000000000000000000000000000;;	// it in the value pointed to by v.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the documentation for the encoding/json Unmarshal function for details
0000000000000000000000000000000000000000;;	// about the conversion of JSON to a Go value.
0000000000000000000000000000000000000000;;	func (c *Conn) ReadJSON(v interface{}) error {
0000000000000000000000000000000000000000;;		_, r, err := c.NextReader()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err = json.NewDecoder(r).Decode(v)
0000000000000000000000000000000000000000;;		if err == io.EOF {
0000000000000000000000000000000000000000;;			// Decode returns io.EOF when the message is empty or all whitespace.
0000000000000000000000000000000000000000;;			// Convert to io.ErrUnexpectedEOF so that application can distinguish
0000000000000000000000000000000000000000;;			// between an error reading the JSON value and the connection closing.
0000000000000000000000000000000000000000;;			err = io.ErrUnexpectedEOF
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
