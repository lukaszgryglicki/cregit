0000000000000000000000000000000000000000;;	// Copyright 2013 The Gorilla WebSocket Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	package websocket
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"crypto/rand"
0000000000000000000000000000000000000000;;		"crypto/sha1"
0000000000000000000000000000000000000000;;		"encoding/base64"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// tokenListContainsValue returns true if the 1#token header with the given
0000000000000000000000000000000000000000;;	// name contains token.
0000000000000000000000000000000000000000;;	func tokenListContainsValue(header http.Header, name string, value string) bool {
0000000000000000000000000000000000000000;;		for _, v := range header[name] {
0000000000000000000000000000000000000000;;			for _, s := range strings.Split(v, ",") {
0000000000000000000000000000000000000000;;				if strings.EqualFold(value, strings.TrimSpace(s)) {
0000000000000000000000000000000000000000;;					return true
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var keyGUID = []byte("258EAFA5-E914-47DA-95CA-C5AB0DC85B11")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func computeAcceptKey(challengeKey string) string {
0000000000000000000000000000000000000000;;		h := sha1.New()
0000000000000000000000000000000000000000;;		h.Write([]byte(challengeKey))
0000000000000000000000000000000000000000;;		h.Write(keyGUID)
0000000000000000000000000000000000000000;;		return base64.StdEncoding.EncodeToString(h.Sum(nil))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func generateChallengeKey() (string, error) {
0000000000000000000000000000000000000000;;		p := make([]byte, 16)
0000000000000000000000000000000000000000;;		if _, err := io.ReadFull(rand.Reader, p); err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return base64.StdEncoding.EncodeToString(p), nil
0000000000000000000000000000000000000000;;	}
