0000000000000000000000000000000000000000;;	# go-wordwrap
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	`go-wordwrap` (Golang package: `wordwrap`) is a package for Go that
0000000000000000000000000000000000000000;;	automatically wraps words into multiple lines. The primary use case for this
0000000000000000000000000000000000000000;;	is in formatting CLI output, but of course word wrapping is a generally useful
0000000000000000000000000000000000000000;;	thing to do.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Installation and Usage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Install using `go get github.com/mitchellh/go-wordwrap`.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Full documentation is available at
0000000000000000000000000000000000000000;;	http://godoc.org/github.com/mitchellh/go-wordwrap
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Below is an example of its usage ignoring errors:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	wrapped := wordwrap.WrapString("foo bar baz", 3)
0000000000000000000000000000000000000000;;	fmt.Println(wrapped)
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Would output:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	foo
0000000000000000000000000000000000000000;;	bar
0000000000000000000000000000000000000000;;	baz
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Word Wrap Algorithm
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	This library doesn't use any clever algorithm for word wrapping. The wrapping
0000000000000000000000000000000000000000;;	is actually very naive: whenever there is whitespace or an explicit linebreak.
0000000000000000000000000000000000000000;;	The goal of this library is for word wrapping CLI output, so the input is
0000000000000000000000000000000000000000;;	typically pretty well controlled human language. Because of this, the naive
0000000000000000000000000000000000000000;;	approach typically works just fine.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	In the future, we'd like to make the algorithm more advanced. We would do
0000000000000000000000000000000000000000;;	so without breaking the API.
