0000000000000000000000000000000000000000;;	package types
bed3bbbd20d07cd2188d11c1be163c46f1d22c8d;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"context"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DefaultNamespace is used when a namespace hasn't been specified.
0000000000000000000000000000000000000000;;	const DefaultNamespace = "default"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Volume represents storage volume.
0000000000000000000000000000000000000000;;	// swagger:model Volume
0000000000000000000000000000000000000000;;	type Volume struct {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Volume unique ID.
0000000000000000000000000000000000000000;;		// Read Only: true
0000000000000000000000000000000000000000;;		ID string `json:"id"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Block device inode.
0000000000000000000000000000000000000000;;		// Read Only: true
0000000000000000000000000000000000000000;;		Inode uint32 `json:"inode"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Volume name.
0000000000000000000000000000000000000000;;		// Required: true
0000000000000000000000000000000000000000;;		Name string `json:"name"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Size in GB.
0000000000000000000000000000000000000000;;		// Required: true
0000000000000000000000000000000000000000;;		Size int `json:"size"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Name of capacity pool to provision the volume in, or the name of the current pool.
0000000000000000000000000000000000000000;;		Pool string `json:"pool"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Filesystem type to mount.  May be set on create, or set by rules to influence client.
0000000000000000000000000000000000000000;;		FSType string `json:"fsType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Volume description.
0000000000000000000000000000000000000000;;		Description string `json:"description"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// User-defined key/value metadata.
0000000000000000000000000000000000000000;;		Labels map[string]string `json:"labels"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Namespace is the object name and authentication scope, such as for teams and projects.
0000000000000000000000000000000000000000;;		Namespace string `json:"namespace"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Volume deployment information for the master volume.
0000000000000000000000000000000000000000;;		// Read Only: true
0000000000000000000000000000000000000000;;		Master *Deployment `json:"master,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Flag indicating if the volume is mounted and in use.
0000000000000000000000000000000000000000;;		// Read Only: true
0000000000000000000000000000000000000000;;		Mounted bool `json:"mounted"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Mountpoint, where the volume is mounted
0000000000000000000000000000000000000000;;		Mountpoint string `json:"mountpoint"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// When the volume was mounted.
0000000000000000000000000000000000000000;;		// Read Only: true
0000000000000000000000000000000000000000;;		MountedAt time.Time `json:"mountedAt,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Reference to the node that has the volume mounted.
0000000000000000000000000000000000000000;;		// Read Only: true
0000000000000000000000000000000000000000;;		MountedBy string `json:"mountedBy,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Volume deployment information for the replica volumes.
0000000000000000000000000000000000000000;;		// Read Only: true
0000000000000000000000000000000000000000;;		Replicas []*Deployment `json:"replicas"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Volume health, one of: healthy, degraded or dead.
0000000000000000000000000000000000000000;;		// Read Only: true
0000000000000000000000000000000000000000;;		Health string `json:"health"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Short status, one of: pending, evaluating, deploying, active, unavailable, failed, updating, deleting.
0000000000000000000000000000000000000000;;		// Read Only: true
0000000000000000000000000000000000000000;;		Status string `json:"status"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Status message explaining current status.
0000000000000000000000000000000000000000;;		// Read Only: true
0000000000000000000000000000000000000000;;		StatusMessage string `json:"statusMessage"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// When the volume was created.
0000000000000000000000000000000000000000;;		// Read Only: true
0000000000000000000000000000000000000000;;		CreatedAt time.Time `json:"createdAt"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// User that created the volume.
0000000000000000000000000000000000000000;;		// Read Only: true
0000000000000000000000000000000000000000;;		CreatedBy string `json:"createdBy"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VolumeMountOptions - used by clients to inform of volume mount operations.
0000000000000000000000000000000000000000;;	type VolumeMountOptions struct {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Volume unique ID.
0000000000000000000000000000000000000000;;		ID string `json:"id"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Name is the name of the volume to mount.
0000000000000000000000000000000000000000;;		Name string `json:"name"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Mountpoint, where the volume is mounted
0000000000000000000000000000000000000000;;		Mountpoint string `json:"mountpoint"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Filesystem type, optional but expected when mounting raw volume
0000000000000000000000000000000000000000;;		FsType string `json:"fsType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Namespace is the object scope, such as for teams and projects.
0000000000000000000000000000000000000000;;		Namespace string `json:"namespace"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The hostname of the client mounting the volume.
0000000000000000000000000000000000000000;;		Client string `json:"client"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Context can be set with a timeout or can be used to cancel a request.
0000000000000000000000000000000000000000;;		Context context.Context `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VolumeUnmountOptions - used by clients to inform of volume mount operations.
0000000000000000000000000000000000000000;;	type VolumeUnmountOptions struct {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Volume unique ID.
0000000000000000000000000000000000000000;;		ID string `json:"id"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Name is the name of the volume to unmount.
0000000000000000000000000000000000000000;;		Name string `json:"name"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Namespace is the object scope, such as for teams and projects.
0000000000000000000000000000000000000000;;		Namespace string `json:"namespace"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The hostname of the client unmounting the volume.  Must match the hostname
0000000000000000000000000000000000000000;;		// of the client that registered the mount operation.
0000000000000000000000000000000000000000;;		Client string `json:"client"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Context can be set with a timeout or can be used to cancel a request.
0000000000000000000000000000000000000000;;		Context context.Context `json:"-"`
0000000000000000000000000000000000000000;;	}
