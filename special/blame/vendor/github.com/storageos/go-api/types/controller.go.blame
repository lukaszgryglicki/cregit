0000000000000000000000000000000000000000;;	package types
bed3bbbd20d07cd2188d11c1be163c46f1d22c8d;;	
0000000000000000000000000000000000000000;;	// Versions and Prefixes used in API and KV URLs
0000000000000000000000000000000000000000;;	import "time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		ControllerAPIPrefix     = "controller"
0000000000000000000000000000000000000000;;		ControllerDefaultPort   = "3260"
0000000000000000000000000000000000000000;;		ControllerScanAPIPrefix = "config/scan"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ControllerCurrent - current controller
0000000000000000000000000000000000000000;;	var ControllerCurrent = ""
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Controller status phases
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		ControllerStatusPending    = "pending"
0000000000000000000000000000000000000000;;		ControllerStatusEvaluating = "evaluating"
0000000000000000000000000000000000000000;;		ControllerStatusDeploying  = "deploying"
0000000000000000000000000000000000000000;;		ControllerStatusActive     = "active"
0000000000000000000000000000000000000000;;		ControllerStatusFailed     = "failed"
0000000000000000000000000000000000000000;;		ControllerStatusDeleting   = "deleting"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ControllerHealthStarting = "starting"
0000000000000000000000000000000000000000;;		ControllerHealthOK       = "healthy"
0000000000000000000000000000000000000000;;		ControllerHealthDegraded = "degraded"
0000000000000000000000000000000000000000;;		ControllerHealthOffline  = "offline"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Errors for controller related things
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		ErrControllerHostIDAllocation string = "error, could not allocate hostid"
0000000000000000000000000000000000000000;;		ErrControllerIDNotSet                = "error, controller ID not set"
0000000000000000000000000000000000000000;;		ErrControllerNotFound                = "controller not found"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Controller is used to represent a storage node in a cluster
0000000000000000000000000000000000000000;;	type Controller struct {
0000000000000000000000000000000000000000;;		ID               string                 `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		HostID           uint16                 `json:"hostID"`
0000000000000000000000000000000000000000;;		Scheduler        bool                   `json:"scheduler"`
0000000000000000000000000000000000000000;;		Name             string                 `json:"name"`
0000000000000000000000000000000000000000;;		Address          string                 `json:"address"`
0000000000000000000000000000000000000000;;		APIPort          int                    `json:"apiPort"`
0000000000000000000000000000000000000000;;		NatsPort         int                    `json:"natsPort"`
0000000000000000000000000000000000000000;;		NatsClusterPort  int                    `json:"natsClusterPort"`
0000000000000000000000000000000000000000;;		SerfPort         int                    `json:"serfPort"`
0000000000000000000000000000000000000000;;		DFSPort          int                    `json:"dfsPort"`
0000000000000000000000000000000000000000;;		Description      string                 `json:"description"`
0000000000000000000000000000000000000000;;		ControllerGroups []string               `json:"controllerGroups"`
0000000000000000000000000000000000000000;;		Tags             []string               `json:"tags"`
0000000000000000000000000000000000000000;;		Labels           map[string]string      `json:"labels"`
0000000000000000000000000000000000000000;;		VolumeStats      VolumeStats            `json:"volumeStats"`
0000000000000000000000000000000000000000;;		PoolStats        map[string]DriverStats `json:"poolStats"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// health is updated by the
0000000000000000000000000000000000000000;;		Health          string                 `json:"health"`
0000000000000000000000000000000000000000;;		HealthUpdatedAt time.Time              `json:"healthUpdatedAt"`
0000000000000000000000000000000000000000;;		VersionInfo     map[string]VersionInfo `json:"versionInfo"`
0000000000000000000000000000000000000000;;		Version         string                 `json:"version"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// high level stats that combine info from all driver instances
0000000000000000000000000000000000000000;;		CapacityStats CapacityStats `json:"capacityStats"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DriverStats is used to report stats for all drivers in a pool.
0000000000000000000000000000000000000000;;	type DriverStats map[string]CapacityStats
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VolumeStats - volume stats (volume counts, looking forward to capacity)
0000000000000000000000000000000000000000;;	type VolumeStats struct {
0000000000000000000000000000000000000000;;		MasterVolumeCount  int `json:"masterVolumeCount"`
0000000000000000000000000000000000000000;;		ReplicaVolumeCount int `json:"replicaVolumeCount"`
0000000000000000000000000000000000000000;;		VirtualVolumeCount int `json:"virtualVolumeCount"`
0000000000000000000000000000000000000000;;	}
