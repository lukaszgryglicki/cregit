0000000000000000000000000000000000000000;;	package types
bed3bbbd20d07cd2188d11c1be163c46f1d22c8d;;	
0000000000000000000000000000000000000000;;	import "context"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VolumeCreateOptions are available parameters for creating new volumes.
0000000000000000000000000000000000000000;;	type VolumeCreateOptions struct {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Name is the name of the volume to create.
0000000000000000000000000000000000000000;;		// Required: true
0000000000000000000000000000000000000000;;		Name string `json:"name"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Description describes the volume.
0000000000000000000000000000000000000000;;		Description string `json:"description"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Size in GB.
0000000000000000000000000000000000000000;;		// Required: true
0000000000000000000000000000000000000000;;		Size int `json:"size"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Pool is the name or id of capacity pool to provision the volume in.
0000000000000000000000000000000000000000;;		Pool string `json:"pool"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Filesystem type to mount.  May be set on create, or set by rules to influence client.
0000000000000000000000000000000000000000;;		FSType string `json:"fsType"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Namespace is the object scope, such as for teams and projects.
0000000000000000000000000000000000000000;;		Namespace string `json:"namespace"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Labels are user-defined key/value metadata.
0000000000000000000000000000000000000000;;		Labels map[string]string `json:"labels"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Context can be set with a timeout or can be used to cancel a request.
0000000000000000000000000000000000000000;;		Context context.Context `json:"-"`
0000000000000000000000000000000000000000;;	}
