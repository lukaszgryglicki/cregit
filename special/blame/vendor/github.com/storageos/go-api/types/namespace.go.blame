0000000000000000000000000000000000000000;;	package types
bed3bbbd20d07cd2188d11c1be163c46f1d22c8d;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"context"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Namespace is used to as a container to isolate namespace and rule obects.
0000000000000000000000000000000000000000;;	type Namespace struct {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Namespace unique ID.
0000000000000000000000000000000000000000;;		// Read Only: true
0000000000000000000000000000000000000000;;		ID string `json:"id"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Namespace name.
0000000000000000000000000000000000000000;;		// Required: true
0000000000000000000000000000000000000000;;		Name string `json:"name"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The optional DisplayName is how the project is displayed in the web console (defaults to name).
0000000000000000000000000000000000000000;;		DisplayName string `json:"displayName"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Namespcae description.
0000000000000000000000000000000000000000;;		Description string `json:"description"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// User-defined key/value metadata.
0000000000000000000000000000000000000000;;		Labels map[string]string `json:"labels"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// When the namespace was created.
0000000000000000000000000000000000000000;;		// Read Only: true
0000000000000000000000000000000000000000;;		CreatedAt time.Time `json:"createdAt"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// User that created the namespace.
0000000000000000000000000000000000000000;;		// Read Only: true
0000000000000000000000000000000000000000;;		CreatedBy string `json:"createdBy"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// When the namespace was created.
0000000000000000000000000000000000000000;;		// Read Only: true
0000000000000000000000000000000000000000;;		UpdatedAt time.Time `json:"updatedAt"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NamespaceCreateOptions are available parameters for creating new namespaces.
0000000000000000000000000000000000000000;;	type NamespaceCreateOptions struct {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Name is the name of the namespace to create.
0000000000000000000000000000000000000000;;		// Required: true
0000000000000000000000000000000000000000;;		Name string `json:"name"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The optional DisplayName is how the project is displayed in the web console (defaults to name).
0000000000000000000000000000000000000000;;		DisplayName string `json:"displayName"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Description describes the namespace.
0000000000000000000000000000000000000000;;		Description string `json:"description"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Labels are user-defined key/value metadata.
0000000000000000000000000000000000000000;;		Labels map[string]string `json:"labels"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Context can be set with a timeout or can be used to cancel a request.
0000000000000000000000000000000000000000;;		Context context.Context `json:"-"`
0000000000000000000000000000000000000000;;	}
