0000000000000000000000000000000000000000;;	package types
bed3bbbd20d07cd2188d11c1be163c46f1d22c8d;;	
0000000000000000000000000000000000000000;;	import "context"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Rule is used to define a rule
0000000000000000000000000000000000000000;;	type Rule struct {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Rule unique ID.
0000000000000000000000000000000000000000;;		// Read Only: true
0000000000000000000000000000000000000000;;		ID string `json:"id"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Rule name.
0000000000000000000000000000000000000000;;		// Required: true
0000000000000000000000000000000000000000;;		Name string `json:"name"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Namespace is the object name and authentication scope, such as for teams and projects.
0000000000000000000000000000000000000000;;		Namespace string `json:"namespace"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Rule description.
0000000000000000000000000000000000000000;;		Description string `json:"description"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Flag describing whether the rule is active.
0000000000000000000000000000000000000000;;		// Default: false
0000000000000000000000000000000000000000;;		Active bool `json:"active"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Weight is used to determine order during rule processing.  Rules with
0000000000000000000000000000000000000000;;		// heavier weights are processed later.
0000000000000000000000000000000000000000;;		// default: 0
0000000000000000000000000000000000000000;;		Weight int `json:"weight"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RuleAction controls whether the action is to add or remove a label from the
0000000000000000000000000000000000000000;;		// matching object(s).
0000000000000000000000000000000000000000;;		RuleAction string `json:"action"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Selectors defines the list of labels that should trigger a rule.
0000000000000000000000000000000000000000;;		Selector string `json:"selector"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Labels define the list of labels that will be added or removed from the
0000000000000000000000000000000000000000;;		// matching object(s).
0000000000000000000000000000000000000000;;		Labels map[string]string `json:"labels"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Rules is a collection of Rules.
0000000000000000000000000000000000000000;;	type Rules []*Rule
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RuleCreateOptions are available parameters for creating new rules.
0000000000000000000000000000000000000000;;	type RuleCreateOptions struct {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Rule name.
0000000000000000000000000000000000000000;;		// Required: true
0000000000000000000000000000000000000000;;		Name string `json:"name"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Namespace is the object name and authentication scope, such as for teams and projects.
0000000000000000000000000000000000000000;;		Namespace string `json:"namespace"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Rule description.
0000000000000000000000000000000000000000;;		Description string `json:"description"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Flag describing whether the rule is active.
0000000000000000000000000000000000000000;;		// Default: false
0000000000000000000000000000000000000000;;		Active bool `json:"active"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Weight is used to determine order during rule processing.  Rules with
0000000000000000000000000000000000000000;;		// heavier weights are processed later.
0000000000000000000000000000000000000000;;		// default: 0
0000000000000000000000000000000000000000;;		Weight int `json:"weight"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RuleAction controls whether the action is to add or remove a label from the
0000000000000000000000000000000000000000;;		// matching object(s).
0000000000000000000000000000000000000000;;		RuleAction string `json:"action"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Selectors defines the list of labels that should trigger a rule.
0000000000000000000000000000000000000000;;		Selector string `json:"selector"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Labels define the list of labels that will be added or removed from the
0000000000000000000000000000000000000000;;		// matching object(s).
0000000000000000000000000000000000000000;;		Labels map[string]string `json:"labels"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Context can be set with a timeout or can be used to cancel a request.
0000000000000000000000000000000000000000;;		Context context.Context `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RuleUpdateOptions are available parameters for creating new rules.
0000000000000000000000000000000000000000;;	type RuleUpdateOptions struct {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Rule unique ID.
0000000000000000000000000000000000000000;;		// Read Only: true
0000000000000000000000000000000000000000;;		ID string `json:"id"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Rule name.
0000000000000000000000000000000000000000;;		// Required: true
0000000000000000000000000000000000000000;;		Name string `json:"name"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Namespace is the object name and authentication scope, such as for teams and projects.
0000000000000000000000000000000000000000;;		Namespace string `json:"namespace"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Rule description.
0000000000000000000000000000000000000000;;		Description string `json:"description"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Flag describing whether the rule is active.
0000000000000000000000000000000000000000;;		// Default: false
0000000000000000000000000000000000000000;;		Active bool `json:"active"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Weight is used to determine order during rule processing.  Rules with
0000000000000000000000000000000000000000;;		// heavier weights are processed later.
0000000000000000000000000000000000000000;;		// default: 0
0000000000000000000000000000000000000000;;		Weight int `json:"weight"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Operator is used to compare objects or labels.
0000000000000000000000000000000000000000;;		Operator string `json:"operator"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RuleAction controls whether the action is to add or remove a label from the
0000000000000000000000000000000000000000;;		// matching object(s).
0000000000000000000000000000000000000000;;		RuleAction string `json:"action"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Selectors defines the list of labels that should trigger a rule.
0000000000000000000000000000000000000000;;		Selector string `json:"selector"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Labels define the list of labels that will be added or removed from the
0000000000000000000000000000000000000000;;		// matching object(s).
0000000000000000000000000000000000000000;;		Labels map[string]string `json:"labels"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Context can be set with a timeout or can be used to cancel a request.
0000000000000000000000000000000000000000;;		Context context.Context `json:"-"`
0000000000000000000000000000000000000000;;	}
