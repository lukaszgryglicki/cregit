0000000000000000000000000000000000000000;;	package types
bed3bbbd20d07cd2188d11c1be163c46f1d22c8d;;	
0000000000000000000000000000000000000000;;	// VersionInfo describes version and runtime info.
0000000000000000000000000000000000000000;;	type VersionInfo struct {
0000000000000000000000000000000000000000;;		Name          string `json:"name"`
0000000000000000000000000000000000000000;;		BuildDate     string `json:"buildDate"`
0000000000000000000000000000000000000000;;		Revision      string `json:"revision"`
0000000000000000000000000000000000000000;;		Version       string `json:"version"`
0000000000000000000000000000000000000000;;		APIVersion    string `json:"apiVersion"`
0000000000000000000000000000000000000000;;		GoVersion     string `json:"goVersion"`
0000000000000000000000000000000000000000;;		OS            string `json:"os"`
0000000000000000000000000000000000000000;;		Arch          string `json:"arch"`
0000000000000000000000000000000000000000;;		KernelVersion string `json:"kernelVersion"`
0000000000000000000000000000000000000000;;		Experimental  bool   `json:"experimental"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VersionResponse struct {
0000000000000000000000000000000000000000;;		Client *VersionInfo
0000000000000000000000000000000000000000;;		Server *VersionInfo
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ServerOK returns true when the client could connect to the docker server
0000000000000000000000000000000000000000;;	// and parse the information received. It returns false otherwise.
0000000000000000000000000000000000000000;;	func (v VersionResponse) ServerOK() bool {
0000000000000000000000000000000000000000;;		return v.Server != nil
0000000000000000000000000000000000000000;;	}
