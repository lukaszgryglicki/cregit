0000000000000000000000000000000000000000;;	package types
bed3bbbd20d07cd2188d11c1be163c46f1d22c8d;;	
0000000000000000000000000000000000000000;;	import "encoding/gob"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DriverInstance is used to define an instance of a storage capacity driver.
0000000000000000000000000000000000000000;;	type DriverInstance struct {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Instance unique ID.
0000000000000000000000000000000000000000;;		// Read Only: true
0000000000000000000000000000000000000000;;		ID string `json:"id"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Instance name.
0000000000000000000000000000000000000000;;		Name string `json:"name"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Instance description.
0000000000000000000000000000000000000000;;		Description string `json:"description"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Flag describing whether the template is active.
0000000000000000000000000000000000000000;;		// Default: false
0000000000000000000000000000000000000000;;		Active bool `json:"active"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Config is JSON struct that is passed directly to the driver.  There is no
0000000000000000000000000000000000000000;;		// specific format, and the driver is responsible for validation.
0000000000000000000000000000000000000000;;		Config interface{} `json:"config"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Labels define a list of labels that describe the driver instance.  These
0000000000000000000000000000000000000000;;		// are inherited from the pool when the driver instance is created.
0000000000000000000000000000000000000000;;		Labels []string `json:"labels"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ControllerName specifies the controller that this instance is running on.
0000000000000000000000000000000000000000;;		ControllerName string `json:"controllerName"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// PoolID refers to the pool that this driver instance relates to.
0000000000000000000000000000000000000000;;		PoolID string `json:"poolID"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DriverName specifies which capacity driver this is an instance of.
0000000000000000000000000000000000000000;;		DriverName string `json:"driverName"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// CapacityStats tracks that capacity usage of this driver instance on the
0000000000000000000000000000000000000000;;		// current controller.
0000000000000000000000000000000000000000;;		CapacityStats CapacityStats `json:"capacityStats"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DriverInstances is a collection of Driver instance objects.
0000000000000000000000000000000000000000;;	type DriverInstances []*DriverInstance
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		gob.Register(DriverInstance{})
0000000000000000000000000000000000000000;;		gob.Register([]interface{}{})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Find an instance matching the parameters.
0000000000000000000000000000000000000000;;	func (i *DriverInstances) Find(pool string, driver string, controller string) *DriverInstance {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, inst := range *i {
0000000000000000000000000000000000000000;;			if inst.PoolID == pool && inst.DriverName == driver && inst.ControllerName == controller {
0000000000000000000000000000000000000000;;				return inst
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Add a new instance to the list of instances.
0000000000000000000000000000000000000000;;	func (i *DriverInstances) Add(new *DriverInstance) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, inst := range *i {
0000000000000000000000000000000000000000;;			// Skip if it already exists
0000000000000000000000000000000000000000;;			if inst.PoolID == new.PoolID && inst.DriverName == new.DriverName && inst.ControllerName == new.ControllerName {
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*i = append(*i, new)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Remove an instance to the list of instances.
0000000000000000000000000000000000000000;;	func (i *DriverInstances) Remove(id string) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TODO: not working
0000000000000000000000000000000000000000;;		// for ndx, inst := range *i {
0000000000000000000000000000000000000000;;		// 	if inst.ID == id {
0000000000000000000000000000000000000000;;		// 		// splice out the item to remove
0000000000000000000000000000000000000000;;		// 		*i = append(*i[:ndx], *i[ndx+1:]...)
0000000000000000000000000000000000000000;;		// 		return
0000000000000000000000000000000000000000;;		// 	}
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	}
