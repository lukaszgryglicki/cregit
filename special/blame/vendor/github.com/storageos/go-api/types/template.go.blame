0000000000000000000000000000000000000000;;	package types
bed3bbbd20d07cd2188d11c1be163c46f1d22c8d;;	
0000000000000000000000000000000000000000;;	// Template is used to define an auto-naming rule.
0000000000000000000000000000000000000000;;	type Template struct {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Template unique ID.
0000000000000000000000000000000000000000;;		// Read Only: true
0000000000000000000000000000000000000000;;		ID string `json:"id"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Template name.
0000000000000000000000000000000000000000;;		// Required: true
0000000000000000000000000000000000000000;;		Name string `json:"name"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Template description.
0000000000000000000000000000000000000000;;		Description string `json:"description"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Template format.  This is used for pattern matching against labels.
0000000000000000000000000000000000000000;;		Format string `json:"format"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Autoincrement defines whether there is a dynamic numeric component in the
0000000000000000000000000000000000000000;;		// template that must auto-increment when objects with the same name already
0000000000000000000000000000000000000000;;		// exists.
0000000000000000000000000000000000000000;;		AutoIncrement bool `json:"autoIncrement"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Padding determines whether a dynamic numeric component in the name should
0000000000000000000000000000000000000000;;		// be padded.
0000000000000000000000000000000000000000;;		// default: false
0000000000000000000000000000000000000000;;		Padding bool `json:"padding"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// PaddingLength sets the length of the padding.  A Padding length of 3 would
0000000000000000000000000000000000000000;;		// set name similar to `abc001` for the first item.  Ignored if Padding set to
0000000000000000000000000000000000000000;;		// `false`.
0000000000000000000000000000000000000000;;		PaddingLength int `json:"paddingLength"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Flag describing whether the template is active.
0000000000000000000000000000000000000000;;		// Default: false
0000000000000000000000000000000000000000;;		Active bool `json:"active"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Weight is used to determine order during template processing.  Templates
0000000000000000000000000000000000000000;;		// with heavier weights are processed later.
0000000000000000000000000000000000000000;;		// default: 0
0000000000000000000000000000000000000000;;		Weight int `json:"weight"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ObjectTypes defines the type names that the template can be applied to.
0000000000000000000000000000000000000000;;		ObjectTypes []string `json:"objectTypes"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Labels define a list of the labels that the object must have in order for
0000000000000000000000000000000000000000;;		// the template to be applied.
0000000000000000000000000000000000000000;;		Labels map[string]string `json:"labels"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Templates is a collection of Template objects
0000000000000000000000000000000000000000;;	type Templates []*Template
