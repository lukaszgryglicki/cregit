0000000000000000000000000000000000000000;;	package types
bed3bbbd20d07cd2188d11c1be163c46f1d22c8d;;	
0000000000000000000000000000000000000000;;	// Pool is used to define a capacity pool.
0000000000000000000000000000000000000000;;	type Pool struct {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Pool unique ID.
0000000000000000000000000000000000000000;;		// Read Only: true
0000000000000000000000000000000000000000;;		ID string `json:"id"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Pool name.
0000000000000000000000000000000000000000;;		// Required: true
0000000000000000000000000000000000000000;;		Name string `json:"name"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Pool description.
0000000000000000000000000000000000000000;;		Description string `json:"description"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Default determines whether this pool is the default if a volume is
0000000000000000000000000000000000000000;;		// provisioned without a pool specified.  There can only be one default pool.
0000000000000000000000000000000000000000;;		Default bool `json:"default"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DefaultDriver specifies the storage driver to use by default if there are
0000000000000000000000000000000000000000;;		// multiple drivers in the pool and no driver was specified in the
0000000000000000000000000000000000000000;;		// provisioning request or assigned by rules.  If no driver was specified and
0000000000000000000000000000000000000000;;		// no default set, driver weight is used to determine the default.
0000000000000000000000000000000000000000;;		DefaultDriver string `json:"defaultDriver"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ControllerNames is a list of controller names that are participating in the
0000000000000000000000000000000000000000;;		// storage pool.
0000000000000000000000000000000000000000;;		ControllerNames []string `json:"controllerNames"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DriverNames is a list of backend storage drivers that are available in the
0000000000000000000000000000000000000000;;		// storage pool.
0000000000000000000000000000000000000000;;		DriverNames []string `json:"driverNames"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DriverInstances is used to track instances of each driver.  Drivers have a
0000000000000000000000000000000000000000;;		// default configuration, which can then be customised for each pool where
0000000000000000000000000000000000000000;;		// they are used, which is representated as a DriverInstance.
0000000000000000000000000000000000000000;;		// Read Only: true
0000000000000000000000000000000000000000;;		DriverInstances []*DriverInstance `json:"driverInstances"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Flag describing whether the template is active.
0000000000000000000000000000000000000000;;		// Default: false
0000000000000000000000000000000000000000;;		Active bool `json:"active"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// CapacityStats are used to track aggregate capacity usage information across
0000000000000000000000000000000000000000;;		// all controllers and driver instances.
0000000000000000000000000000000000000000;;		// Read Only: true
0000000000000000000000000000000000000000;;		CapacityStats CapacityStats `json:"capacityStats"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Labels define a list of labels that describe the pool.
0000000000000000000000000000000000000000;;		Labels map[string]string `json:"labels"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Pools is a collection of Pool objects
0000000000000000000000000000000000000000;;	type Pools []*Pool
