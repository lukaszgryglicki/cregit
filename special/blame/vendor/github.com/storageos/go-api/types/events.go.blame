0000000000000000000000000000000000000000;;	package types
bed3bbbd20d07cd2188d11c1be163c46f1d22c8d;;	
0000000000000000000000000000000000000000;;	import "time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EventType describes the type of event
0000000000000000000000000000000000000000;;	type EventType string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EventTypes are added to events to assist with type assertions
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		RequestType   EventType = "request"
0000000000000000000000000000000000000000;;		ResponseType            = "response"
0000000000000000000000000000000000000000;;		HeartbeatType           = "heartbeat"
0000000000000000000000000000000000000000;;		BackupType              = "backup"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Event describes the fields that all events should implement.  Event is
0000000000000000000000000000000000000000;;	// intended to be inherherited in more specific Event types.
0000000000000000000000000000000000000000;;	type Event struct {
0000000000000000000000000000000000000000;;		ID string `json:"id"`
0000000000000000000000000000000000000000;;		// Parent is used to specify parent event
0000000000000000000000000000000000000000;;		Parent          string    `json:"parent"`
0000000000000000000000000000000000000000;;		EventType       EventType `json:"eventType"`
0000000000000000000000000000000000000000;;		Action          string    `json:"action"`
0000000000000000000000000000000000000000;;		Timestamp       int64     `json:"timestamp"`
0000000000000000000000000000000000000000;;		Status          string    `json:"status"`
0000000000000000000000000000000000000000;;		Message         string    `json:"message"`
0000000000000000000000000000000000000000;;		Log             []string  `json:"log"`
0000000000000000000000000000000000000000;;		ProgressPercent int       `json:"progressPercent"`
0000000000000000000000000000000000000000;;		CreatedBy       string    `json:"createdBy"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Target        string      `json:"target"`
0000000000000000000000000000000000000000;;		ActionPayload interface{} `json:"actionPayload"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// payload can be encoded into bytes as well
0000000000000000000000000000000000000000;;		ActionPayloadBytes []byte `json:"actionPayloadBts"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		UpdatedAt time.Time `json:"updatedAt"`
0000000000000000000000000000000000000000;;		CreatedAt time.Time `json:"createdAt"`
0000000000000000000000000000000000000000;;		// retry related value
0000000000000000000000000000000000000000;;		Retry     bool      `json:"retry"`
0000000000000000000000000000000000000000;;		RetriedAt time.Time `json:"retriedAt"`
0000000000000000000000000000000000000000;;		Attempts  int       `json:"attempts"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// optional parameter
0000000000000000000000000000000000000000;;		Deadline time.Time `json:"deadline"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// optional events to dispatch
0000000000000000000000000000000000000000;;		Rollback     []*Request `json:"rollback"`
0000000000000000000000000000000000000000;;		RollbackDone bool       `json:"rollbackDone"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Subject string `json:"subject"` // or "queue"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// controller ID which created this event
0000000000000000000000000000000000000000;;		OriginController string `json:"originController"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Request is the message structure used for sending request events
0000000000000000000000000000000000000000;;	type Request struct {
0000000000000000000000000000000000000000;;		Event
0000000000000000000000000000000000000000;;	}
