0000000000000000000000000000000000000000;;	package storageos
bed3bbbd20d07cd2188d11c1be163c46f1d22c8d;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/storageos/go-api/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// PoolAPIPrefix is a partial path to the HTTP endpoint.
0000000000000000000000000000000000000000;;		PoolAPIPrefix = "pools"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ErrNoSuchPool is the error returned when the pool does not exist.
0000000000000000000000000000000000000000;;		ErrNoSuchPool = errors.New("no such pool")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ErrPoolInUse is the error returned when the pool requested to be removed is still in use.
0000000000000000000000000000000000000000;;		ErrPoolInUse = errors.New("pool in use and cannot be removed")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PoolList returns the list of available pools.
0000000000000000000000000000000000000000;;	func (c *Client) PoolList(opts types.ListOptions) ([]*types.Pool, error) {
0000000000000000000000000000000000000000;;		listOpts := doOptions{
0000000000000000000000000000000000000000;;			fieldSelector: opts.FieldSelector,
0000000000000000000000000000000000000000;;			labelSelector: opts.LabelSelector,
0000000000000000000000000000000000000000;;			namespace:     opts.Namespace,
0000000000000000000000000000000000000000;;			context:       opts.Context,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		resp, err := c.do("GET", PoolAPIPrefix, listOpts)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;		var pools []*types.Pool
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(resp.Body).Decode(&pools); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return pools, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PoolCreate creates a pool on the server and returns the new object.
0000000000000000000000000000000000000000;;	func (c *Client) PoolCreate(opts types.PoolCreateOptions) (*types.Pool, error) {
0000000000000000000000000000000000000000;;		resp, err := c.do("POST", PoolAPIPrefix, doOptions{
0000000000000000000000000000000000000000;;			data:    opts,
0000000000000000000000000000000000000000;;			context: opts.Context,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var pool types.Pool
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(resp.Body).Decode(&pool); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &pool, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Pool returns a pool by its reference.
0000000000000000000000000000000000000000;;	func (c *Client) Pool(ref string) (*types.Pool, error) {
0000000000000000000000000000000000000000;;		resp, err := c.do("GET", PoolAPIPrefix+"/"+ref, doOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if e, ok := err.(*Error); ok && e.Status == http.StatusNotFound {
0000000000000000000000000000000000000000;;				return nil, ErrNoSuchPool
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;		var pool types.Pool
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(resp.Body).Decode(&pool); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &pool, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PoolDelete removes a pool by its reference.
0000000000000000000000000000000000000000;;	func (c *Client) PoolDelete(opts types.DeleteOptions) error {
0000000000000000000000000000000000000000;;		deleteOpts := doOptions{
0000000000000000000000000000000000000000;;			force:   opts.Force,
0000000000000000000000000000000000000000;;			context: opts.Context,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		resp, err := c.do("DELETE", PoolAPIPrefix+"/"+opts.Name, deleteOpts)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if e, ok := err.(*Error); ok {
0000000000000000000000000000000000000000;;				if e.Status == http.StatusNotFound {
0000000000000000000000000000000000000000;;					return ErrNoSuchPool
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if e.Status == http.StatusConflict {
0000000000000000000000000000000000000000;;					return ErrPoolInUse
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
