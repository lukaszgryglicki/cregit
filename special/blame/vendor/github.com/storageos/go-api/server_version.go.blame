0000000000000000000000000000000000000000;;	package storageos
bed3bbbd20d07cd2188d11c1be163c46f1d22c8d;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"context"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/storageos/go-api/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ServerVersion returns the server's version and runtime info.
0000000000000000000000000000000000000000;;	func (c *Client) ServerVersion(ctx context.Context) (*types.VersionInfo, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Send as unversioned
0000000000000000000000000000000000000000;;		resp, err := c.do("GET", "version", doOptions{context: ctx, unversioned: true})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if resp.StatusCode != http.StatusOK {
0000000000000000000000000000000000000000;;			return nil, newError(resp)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;		var version types.VersionInfo
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(resp.Body).Decode(&version); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &version, nil
0000000000000000000000000000000000000000;;	}
