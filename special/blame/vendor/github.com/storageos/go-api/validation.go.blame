0000000000000000000000000000000000000000;;	package storageos
bed3bbbd20d07cd2188d11c1be163c46f1d22c8d;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"regexp"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// IDFormat are the characters allowed to represent an ID.
0000000000000000000000000000000000000000;;		IDFormat = `[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NameFormat are the characters allowed to represent a name.
0000000000000000000000000000000000000000;;		NameFormat = `[a-zA-Z0-9][a-zA-Z0-9~_.-]+`
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		// IDPattern is a regular expression to validate a unique id against the
0000000000000000000000000000000000000000;;		// collection of restricted characters.
0000000000000000000000000000000000000000;;		IDPattern = regexp.MustCompile(`^` + IDFormat + `$`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NamePattern is a regular expression to validate names against the
0000000000000000000000000000000000000000;;		// collection of restricted characters.
0000000000000000000000000000000000000000;;		NamePattern = regexp.MustCompile(`^` + NameFormat + `$`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ErrNoRef       = errors.New("no ref provided or incorrect format")
0000000000000000000000000000000000000000;;		ErrNoNamespace = errors.New("no namespace provided or incorrect format")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ValidateNamespaceAndRef returns true if both the namespace and ref are valid.
0000000000000000000000000000000000000000;;	func ValidateNamespaceAndRef(namespace, ref string) error {
0000000000000000000000000000000000000000;;		if !IsUUID(ref) && !IsName(ref) {
0000000000000000000000000000000000000000;;			return ErrNoRef
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !IsName(namespace) {
0000000000000000000000000000000000000000;;			return ErrNoNamespace
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ValidateNamespace returns true if the namespace uses a valid name.
0000000000000000000000000000000000000000;;	func ValidateNamespace(namespace string) error {
0000000000000000000000000000000000000000;;		if !IsName(namespace) {
0000000000000000000000000000000000000000;;			return ErrNoNamespace
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsUUID returns true if the string input is a valid UUID string.
0000000000000000000000000000000000000000;;	func IsUUID(s string) bool {
0000000000000000000000000000000000000000;;		return IDPattern.MatchString(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsName returns true if the string input is a valid Name string.
0000000000000000000000000000000000000000;;	func IsName(s string) bool {
0000000000000000000000000000000000000000;;		return NamePattern.MatchString(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// namespacedPath checks for valid input and returns api path for a namespaced
0000000000000000000000000000000000000000;;	// objectType.  Use namespacedRefPath for objects.
0000000000000000000000000000000000000000;;	func namespacedPath(namespace, objectType string) (string, error) {
0000000000000000000000000000000000000000;;		if err := ValidateNamespace(namespace); err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "/namespaces/" + namespace + "/" + objectType, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// namespacedRefPath checks for valid input and returns api path for a single
0000000000000000000000000000000000000000;;	// namespaced object.  Use namespacedPath for objects type path.
0000000000000000000000000000000000000000;;	func namespacedRefPath(namespace, objectType, ref string) (string, error) {
0000000000000000000000000000000000000000;;		if err := ValidateNamespaceAndRef(namespace, ref); err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "/namespaces/" + namespace + "/" + objectType + "/" + ref, nil
0000000000000000000000000000000000000000;;	}
