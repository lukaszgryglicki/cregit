0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# A Swagger 2.0 (a.k.a. OpenAPI) definition of the StorageOS API.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# This is used for generating API documentation and the types used by the
0000000000000000000000000000000000000000;;	# client/server. See api/README.md for more information.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Some style notes:
0000000000000000000000000000000000000000;;	# - This file is used by ReDoc, which allows GitHub Flavored Markdown in
0000000000000000000000000000000000000000;;	#   descriptions.
0000000000000000000000000000000000000000;;	# - There is no maximum line length, for ease of editing and pretty diffs.
0000000000000000000000000000000000000000;;	# - operationIds are in the format "NounVerb", with a singular noun.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	swagger: "2.0"
0000000000000000000000000000000000000000;;	schemes:
0000000000000000000000000000000000000000;;	  - "http"
0000000000000000000000000000000000000000;;	  - "https"
0000000000000000000000000000000000000000;;	produces:
0000000000000000000000000000000000000000;;	  - "application/json"
0000000000000000000000000000000000000000;;	  - "text/plain"
0000000000000000000000000000000000000000;;	consumes:
0000000000000000000000000000000000000000;;	  - "application/json"
0000000000000000000000000000000000000000;;	  - "text/plain"
0000000000000000000000000000000000000000;;	basePath: "/v1"
0000000000000000000000000000000000000000;;	info:
0000000000000000000000000000000000000000;;	  title: "StorageOS API"
0000000000000000000000000000000000000000;;	  version: "0.7"
0000000000000000000000000000000000000000;;	  x-logo:
0000000000000000000000000000000000000000;;	    url: "http://storageos.wpengine.com/wp-content/uploads/2017/03/cropped-logo-1.png"
0000000000000000000000000000000000000000;;	  description: |
0000000000000000000000000000000000000000;;	    The StorageOS API is an HTTP API used for managing volumes and StorageOS services. It is the API that the StorageOS UI, CLI and platform integrations use to communicate with the StorageOS backend.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    # Errors
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:
0000000000000000000000000000000000000000;;	    ```
0000000000000000000000000000000000000000;;	    {
0000000000000000000000000000000000000000;;	      "message": "page not found"
0000000000000000000000000000000000000000;;	    }
0000000000000000000000000000000000000000;;	    ```
0000000000000000000000000000000000000000;;	# The tags on paths define the menu sections in the ReDoc documentation, so
0000000000000000000000000000000000000000;;	# the usage of tags must make sense for that:
0000000000000000000000000000000000000000;;	# - They should be singular, not plural.
0000000000000000000000000000000000000000;;	# - There should not be too many tags, or the menu becomes unwieldy. For
0000000000000000000000000000000000000000;;	#   example, it is preferable to add a path to the "System" tag instead of
0000000000000000000000000000000000000000;;	#   creating a tag with a single path in it.
0000000000000000000000000000000000000000;;	# - The order of tags in this list defines the order in the menu.
0000000000000000000000000000000000000000;;	tags:
0000000000000000000000000000000000000000;;	  # Primary objects
0000000000000000000000000000000000000000;;	  - name: "Volume"
0000000000000000000000000000000000000000;;	    x-displayName: "Volumes"
0000000000000000000000000000000000000000;;	    description: |
0000000000000000000000000000000000000000;;	      Create and manage volumes.
0000000000000000000000000000000000000000;;	  - name: "Pool"
0000000000000000000000000000000000000000;;	    x-displayName: "Pools"
0000000000000000000000000000000000000000;;	    description: |
0000000000000000000000000000000000000000;;	      Create and manage distributed capacity pools.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	definitions:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  ErrorResponse:
0000000000000000000000000000000000000000;;	    description: "Represents an error."
0000000000000000000000000000000000000000;;	    type: "object"
0000000000000000000000000000000000000000;;	    required: ["message"]
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      message:
0000000000000000000000000000000000000000;;	        description: "The error message."
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        x-nullable: false
0000000000000000000000000000000000000000;;	    example:
0000000000000000000000000000000000000000;;	      message: "Something went wrong."
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  Deployment:
0000000000000000000000000000000000000000;;	    type: "object"
0000000000000000000000000000000000000000;;	    description: "Volume master or replica deployment details."
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      ID:
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        readOnly: true
0000000000000000000000000000000000000000;;	      Controller:
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        readOnly: true
0000000000000000000000000000000000000000;;	      Inode:
0000000000000000000000000000000000000000;;	        type: "integer"
0000000000000000000000000000000000000000;;	        format: "uint32"
0000000000000000000000000000000000000000;;	        readOnly: true
0000000000000000000000000000000000000000;;	      Status:
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        readOnly: true
0000000000000000000000000000000000000000;;	      Health:
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        readOnly: true
0000000000000000000000000000000000000000;;	      CreatedAt:
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        format: "datetime"
0000000000000000000000000000000000000000;;	        readOnly: true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  VolumeCreateOptions:
0000000000000000000000000000000000000000;;	    type: "object"
0000000000000000000000000000000000000000;;	    description: "Parameters available for creating new volumes."
0000000000000000000000000000000000000000;;	    required: [Name]
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      Name:
0000000000000000000000000000000000000000;;	        description: "Volume name."
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        x-nullable: false
0000000000000000000000000000000000000000;;	      Description:
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        x-nullable: false
0000000000000000000000000000000000000000;;	        description: "Volume description."
0000000000000000000000000000000000000000;;	      Size:
0000000000000000000000000000000000000000;;	        type: "integer"
0000000000000000000000000000000000000000;;	        description: "Size in GB (if 0 or not specified, then defaults to 10 GB)."
0000000000000000000000000000000000000000;;	        x-nullable: false
0000000000000000000000000000000000000000;;	      Pool:
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        description: "Name of capacity pool to provision the volume in, or the name of the current pool."
0000000000000000000000000000000000000000;;	      Labels:
0000000000000000000000000000000000000000;;	        type: "object"
0000000000000000000000000000000000000000;;	        description: "User-defined key/value metadata."
0000000000000000000000000000000000000000;;	        x-nullable: false
0000000000000000000000000000000000000000;;	        additionalProperties:
0000000000000000000000000000000000000000;;	          type: "string"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  VolumeUpdateOptions:
0000000000000000000000000000000000000000;;	    type: "object"
0000000000000000000000000000000000000000;;	    description: "Parameters available for updating existing volumes."
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      Description:
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        x-nullable: false
0000000000000000000000000000000000000000;;	        description: "Volume description."
0000000000000000000000000000000000000000;;	      Size:
0000000000000000000000000000000000000000;;	        type: "integer"
0000000000000000000000000000000000000000;;	        description: "Size in GB."
0000000000000000000000000000000000000000;;	        x-nullable: false
0000000000000000000000000000000000000000;;	      Labels:
0000000000000000000000000000000000000000;;	        type: "object"
0000000000000000000000000000000000000000;;	        description: "User-defined key/value metadata."
0000000000000000000000000000000000000000;;	        x-nullable: false
0000000000000000000000000000000000000000;;	        additionalProperties:
0000000000000000000000000000000000000000;;	          type: "string"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # VolumeMountOptions:
0000000000000000000000000000000000000000;;	  #   type: "object"
0000000000000000000000000000000000000000;;	  #   description: "Parameters available for mounting volumes."
0000000000000000000000000000000000000000;;	  #   properties:
0000000000000000000000000000000000000000;;	  #     ID:
0000000000000000000000000000000000000000;;	  #       type: "string"
0000000000000000000000000000000000000000;;	  #       x-nullable: false
0000000000000000000000000000000000000000;;	  #       description: "Volume unique ID."
0000000000000000000000000000000000000000;;	  #     Name:
0000000000000000000000000000000000000000;;	  #       description: "Volume name."
0000000000000000000000000000000000000000;;	  #       type: "string"
0000000000000000000000000000000000000000;;	  #       x-nullable: false
0000000000000000000000000000000000000000;;	  #     Namespace:
0000000000000000000000000000000000000000;;	  #       description: "The object scope, such as for teams and projects."
0000000000000000000000000000000000000000;;	  #       type: "string"
0000000000000000000000000000000000000000;;	  #       x-nullable: false
0000000000000000000000000000000000000000;;	  #     Client:
0000000000000000000000000000000000000000;;	  #       type: "string"
0000000000000000000000000000000000000000;;	  #       x-nullable: false
0000000000000000000000000000000000000000;;	  #       description: "Hostname of the client performing the mount."
0000000000000000000000000000000000000000;;	  #
0000000000000000000000000000000000000000;;	  # VolumeUnmountOptions:
0000000000000000000000000000000000000000;;	  #   type: "object"
0000000000000000000000000000000000000000;;	  #   description: "Parameters available for unmounting volumes."
0000000000000000000000000000000000000000;;	  #   properties:
0000000000000000000000000000000000000000;;	  #     ID:
0000000000000000000000000000000000000000;;	  #       type: "string"
0000000000000000000000000000000000000000;;	  #       x-nullable: false
0000000000000000000000000000000000000000;;	  #       description: "Volume unique ID."
0000000000000000000000000000000000000000;;	  #     Name:
0000000000000000000000000000000000000000;;	  #       description: "Volume name."
0000000000000000000000000000000000000000;;	  #       type: "string"
0000000000000000000000000000000000000000;;	  #       x-nullable: false
0000000000000000000000000000000000000000;;	  #     Namespace:
0000000000000000000000000000000000000000;;	  #       description: "The object scope, such as for teams and projects."
0000000000000000000000000000000000000000;;	  #       type: "string"
0000000000000000000000000000000000000000;;	  #       x-nullable: false
0000000000000000000000000000000000000000;;	  #     Client:
0000000000000000000000000000000000000000;;	  #       type: "string"
0000000000000000000000000000000000000000;;	  #       x-nullable: false
0000000000000000000000000000000000000000;;	  #       description: "Hostname of the client performing the unmount."
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  # ListOptions:
0000000000000000000000000000000000000000;;	  #   type: "object"
0000000000000000000000000000000000000000;;	  #   description: "Parameters for finding volumes."
0000000000000000000000000000000000000000;;	  #   properties:
0000000000000000000000000000000000000000;;	  #     LabelSelector:
0000000000000000000000000000000000000000;;	  #       description: "A selector to restrict the list of returned objects by their labels. Defaults to everything."
0000000000000000000000000000000000000000;;	  #       type: "string"
0000000000000000000000000000000000000000;;	  #     FieldSelector:
0000000000000000000000000000000000000000;;	  #       type: "string"
0000000000000000000000000000000000000000;;	  #       description: "A selector to restrict the list of returned objects by their fields. Defaults to everything."
0000000000000000000000000000000000000000;;	  #     TimeoutSeconds:
0000000000000000000000000000000000000000;;	  #       type: "integer"
0000000000000000000000000000000000000000;;	  #       description: "Timeout for the list call."
0000000000000000000000000000000000000000;;	  #     Namespace:
0000000000000000000000000000000000000000;;	  #       type: "string"
0000000000000000000000000000000000000000;;	  #       description: "Object name and auth scope, such as for teams and projects"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  Volume:
0000000000000000000000000000000000000000;;	    type: "object"
0000000000000000000000000000000000000000;;	    description: "A storage volume."
0000000000000000000000000000000000000000;;	    required: [Name, Size]
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      ID:
0000000000000000000000000000000000000000;;	        description: "Volume unique ID."
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        x-nullable: false
0000000000000000000000000000000000000000;;	        readOnly: true
0000000000000000000000000000000000000000;;	      Name:
0000000000000000000000000000000000000000;;	        description: "Volume name."
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        x-nullable: false
0000000000000000000000000000000000000000;;	      Description:
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        x-nullable: false
0000000000000000000000000000000000000000;;	        description: "Volume description."
0000000000000000000000000000000000000000;;	      Size:
0000000000000000000000000000000000000000;;	        type: integer
0000000000000000000000000000000000000000;;	        description: "Size in GB."
0000000000000000000000000000000000000000;;	        x-nullable: false
0000000000000000000000000000000000000000;;	      Pool:
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        description: "Name of capacity pool to provision the volume in, or the name of the current pool."
0000000000000000000000000000000000000000;;	      Labels:
0000000000000000000000000000000000000000;;	        type: "object"
0000000000000000000000000000000000000000;;	        description: "User-defined key/value metadata."
0000000000000000000000000000000000000000;;	        x-nullable: false
0000000000000000000000000000000000000000;;	        additionalProperties:
0000000000000000000000000000000000000000;;	          type: "string"
0000000000000000000000000000000000000000;;	      Master:
0000000000000000000000000000000000000000;;	        $ref: "#/definitions/Deployment"
0000000000000000000000000000000000000000;;	      Replicas:
0000000000000000000000000000000000000000;;	        type: "array"
0000000000000000000000000000000000000000;;	        description: "Volume deployment information for the replica volumes."
0000000000000000000000000000000000000000;;	        items:
0000000000000000000000000000000000000000;;	          $ref: "#/definitions/Deployment"
0000000000000000000000000000000000000000;;	        readOnly: true
0000000000000000000000000000000000000000;;	      Status:
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        description: "Short status, one of: pending, evaluating, deploying, active, unavailable, failed, updating, deleting."
0000000000000000000000000000000000000000;;	        readOnly: true
0000000000000000000000000000000000000000;;	      StatusMessage:
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        description: "Status message explaining current status."
0000000000000000000000000000000000000000;;	        readOnly: true
0000000000000000000000000000000000000000;;	      Health:
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        description: "Volume health, one of: healthy, degraded or dead."
0000000000000000000000000000000000000000;;	        readOnly: true
0000000000000000000000000000000000000000;;	      Inode:
0000000000000000000000000000000000000000;;	        type: "integer"
0000000000000000000000000000000000000000;;	        format: "uint32"
0000000000000000000000000000000000000000;;	        description: "Block device inode."
0000000000000000000000000000000000000000;;	        readOnly: true
0000000000000000000000000000000000000000;;	      Deleted:
0000000000000000000000000000000000000000;;	        type: "boolean"
0000000000000000000000000000000000000000;;	        description: "Flag indicating if the volume has been deleted and is waiting for scrubbing."
0000000000000000000000000000000000000000;;	        readOnly: true
0000000000000000000000000000000000000000;;	      Mounted:
0000000000000000000000000000000000000000;;	        type: "boolean"
0000000000000000000000000000000000000000;;	        description: "Flag indicating if the volume is mounted and in use."
0000000000000000000000000000000000000000;;	        readOnly: true
0000000000000000000000000000000000000000;;	      MountedBy:
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        description: "Reference to the node that has the volume mounted."
0000000000000000000000000000000000000000;;	        readOnly: true
0000000000000000000000000000000000000000;;	      Mountpoint:
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        description: "Mountpoint where the volume was mounted."
0000000000000000000000000000000000000000;;	        readOnly: true  
0000000000000000000000000000000000000000;;	      MountedAt:
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        format: "dateTime"
0000000000000000000000000000000000000000;;	        description: "When the volume was mounted."
0000000000000000000000000000000000000000;;	        readOnly: true
0000000000000000000000000000000000000000;;	      CreatedBy:
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        description: "User that created the volume."
0000000000000000000000000000000000000000;;	        readOnly: true
0000000000000000000000000000000000000000;;	      CreatedAt:
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        format: "dateTime"
0000000000000000000000000000000000000000;;	        description: "When the volume was created."
0000000000000000000000000000000000000000;;	        readOnly: true
0000000000000000000000000000000000000000;;	    example:
0000000000000000000000000000000000000000;;	      Name: vol01
0000000000000000000000000000000000000000;;	      Size: 5
0000000000000000000000000000000000000000;;	      Labels:
0000000000000000000000000000000000000000;;	        com.example.some-label: "some-value"
0000000000000000000000000000000000000000;;	        com.example.some-other-label: "some-other-value"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  PoolCreateOptions:
0000000000000000000000000000000000000000;;	    type: "object"
0000000000000000000000000000000000000000;;	    description: "Parameters available for creating new pools."
0000000000000000000000000000000000000000;;	    required: [Name]
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      Name:
0000000000000000000000000000000000000000;;	        description: "Pool name."
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        x-nullable: false
0000000000000000000000000000000000000000;;	      Description:
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        x-nullable: false
0000000000000000000000000000000000000000;;	        description: "Pool description."
0000000000000000000000000000000000000000;;	      Default:
0000000000000000000000000000000000000000;;	        type: "boolean"
0000000000000000000000000000000000000000;;	        description: "Default determines whether this pool is the default if a volume is provisioned without a pool specified.  There can only be one default pool."
0000000000000000000000000000000000000000;;	        x-nullable: false
0000000000000000000000000000000000000000;;	      DefaultDriver:
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        x-nullable: false
0000000000000000000000000000000000000000;;	        description: "DefaultDriver specifies the storage driver to use by default if there are multiple drivers in the pool and no driver was specified in the provisioning request or assigned by rules.  If no driver was specified and no default set, driver weight is used to determine the default."
0000000000000000000000000000000000000000;;	      ControllerNames:
0000000000000000000000000000000000000000;;	        type: "array"
0000000000000000000000000000000000000000;;	        description: "ControllerNames is a list of controller names that are participating in the storage pool."
0000000000000000000000000000000000000000;;	        items:
0000000000000000000000000000000000000000;;	          type: "string"
0000000000000000000000000000000000000000;;	      DriverNames:
0000000000000000000000000000000000000000;;	        type: "array"
0000000000000000000000000000000000000000;;	        description: "DriverNames is a list of backend storage drivers that are available in the storage pool."
0000000000000000000000000000000000000000;;	        items:
0000000000000000000000000000000000000000;;	          type: "string"
0000000000000000000000000000000000000000;;	      Active:
0000000000000000000000000000000000000000;;	        type: "boolean"
0000000000000000000000000000000000000000;;	        x-nullable: false
0000000000000000000000000000000000000000;;	        description: "Flag describing whether rule is active."
0000000000000000000000000000000000000000;;	        default: false
0000000000000000000000000000000000000000;;	      Labels:
0000000000000000000000000000000000000000;;	        type: "object"
0000000000000000000000000000000000000000;;	        description: "Labels define a list of labels that describe the pool."
0000000000000000000000000000000000000000;;	        additionalProperties:
0000000000000000000000000000000000000000;;	          type: "string"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  Pool:
0000000000000000000000000000000000000000;;	    type: "object"
0000000000000000000000000000000000000000;;	    description: |
0000000000000000000000000000000000000000;;	      Pools are used to define distributed capacity that can be used to provision
0000000000000000000000000000000000000000;;	      volumes from.  Typically, each server that makes storage available will be
0000000000000000000000000000000000000000;;	      added to one or more pools.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	      Capacity drivers are also added to the pool to determine which backend
0000000000000000000000000000000000000000;;	      storage driver to use.  Currently this is limited to a single type of
0000000000000000000000000000000000000000;;	      driver per pool, but in the future we will allow multiple, allowing for
0000000000000000000000000000000000000000;;	      dynamic tiering and snapshots from one driver type to another.
0000000000000000000000000000000000000000;;	    required: [Name]
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      ID:
0000000000000000000000000000000000000000;;	        description: "Pool unique ID."
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        x-nullable: false
0000000000000000000000000000000000000000;;	        readOnly: true
0000000000000000000000000000000000000000;;	      Name:
0000000000000000000000000000000000000000;;	        description: "Pool name."
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        x-nullable: false
0000000000000000000000000000000000000000;;	      Description:
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        x-nullable: false
0000000000000000000000000000000000000000;;	        description: "Pool description."
0000000000000000000000000000000000000000;;	      Default:
0000000000000000000000000000000000000000;;	        type: "boolean"
0000000000000000000000000000000000000000;;	        x-nullable: false
0000000000000000000000000000000000000000;;	        description: |
0000000000000000000000000000000000000000;;	          Default determines whether this pool is the default if a volume is
0000000000000000000000000000000000000000;;	          provisioned without a pool specified.  There can only be one default
0000000000000000000000000000000000000000;;	          pool.
0000000000000000000000000000000000000000;;	      DefaultDriver:
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        description: |
0000000000000000000000000000000000000000;;	          DefaultDriver specifies the storage driver to use by default if there
0000000000000000000000000000000000000000;;	          are multiple drivers in the pool and no driver was specified in the
0000000000000000000000000000000000000000;;	          provisioning request or assigned by rules.  If no driver was specified
0000000000000000000000000000000000000000;;	          and no default set, driver weight is used to determine the default.
0000000000000000000000000000000000000000;;	      ControllerNames:
0000000000000000000000000000000000000000;;	        type: "array"
0000000000000000000000000000000000000000;;	        description: "ControllerNames is a list of controller names that are participating in the storage pool."
0000000000000000000000000000000000000000;;	        items:
0000000000000000000000000000000000000000;;	          type: "string"
0000000000000000000000000000000000000000;;	      DriverNames:
0000000000000000000000000000000000000000;;	        type: "array"
0000000000000000000000000000000000000000;;	        description: "DriverNames is a list of backend storage drivers that are available in the storage pool."
0000000000000000000000000000000000000000;;	        items:
0000000000000000000000000000000000000000;;	          type: "string"
0000000000000000000000000000000000000000;;	      DriverInstances:
0000000000000000000000000000000000000000;;	        $ref: "#/definitions/DriverInstances"
0000000000000000000000000000000000000000;;	      Active:
0000000000000000000000000000000000000000;;	        type: "boolean"
0000000000000000000000000000000000000000;;	        x-nullable: false
0000000000000000000000000000000000000000;;	        description: "Flag describing whether rule is active."
0000000000000000000000000000000000000000;;	        default: false
0000000000000000000000000000000000000000;;	      CapacityStats:
0000000000000000000000000000000000000000;;	        $ref: "#/definitions/CapacityStats"
0000000000000000000000000000000000000000;;	      Labels:
0000000000000000000000000000000000000000;;	        type: "object"
0000000000000000000000000000000000000000;;	        description: "Labels define a list of labels that describe the pool."
0000000000000000000000000000000000000000;;	        additionalProperties:
0000000000000000000000000000000000000000;;	          type: "string"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  Rule:
0000000000000000000000000000000000000000;;	    type: "object"
0000000000000000000000000000000000000000;;	    description: "A policy rule."
0000000000000000000000000000000000000000;;	    required: [Name]
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      ID:
0000000000000000000000000000000000000000;;	        description: "Rule unique ID."
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        x-nullable: false
0000000000000000000000000000000000000000;;	        readOnly: true
0000000000000000000000000000000000000000;;	      Name:
0000000000000000000000000000000000000000;;	        description: "Rule name."
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        x-nullable: false
0000000000000000000000000000000000000000;;	      Description:
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        x-nullable: false
0000000000000000000000000000000000000000;;	        description: "Rule description."
0000000000000000000000000000000000000000;;	      Active:
0000000000000000000000000000000000000000;;	        type: "boolean"
0000000000000000000000000000000000000000;;	        x-nullable: false
0000000000000000000000000000000000000000;;	        description: "Flag describing whether rule is active."
0000000000000000000000000000000000000000;;	        default: false
0000000000000000000000000000000000000000;;	      Weight:
0000000000000000000000000000000000000000;;	        type: "integer"
0000000000000000000000000000000000000000;;	        x-nullable: false
0000000000000000000000000000000000000000;;	        description: |
0000000000000000000000000000000000000000;;	          "Weight is used to determine order during rule processing.  Rules with heavier weights are processed later."
0000000000000000000000000000000000000000;;	        default: 0
0000000000000000000000000000000000000000;;	      Operator:
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        description: "Operator is used to compare objects or labels."
0000000000000000000000000000000000000000;;	        enum:
0000000000000000000000000000000000000000;;	          - "!"
0000000000000000000000000000000000000000;;	          - "="
0000000000000000000000000000000000000000;;	          - "=="
0000000000000000000000000000000000000000;;	          - "in"
0000000000000000000000000000000000000000;;	          - "!="
0000000000000000000000000000000000000000;;	          - "notin"
0000000000000000000000000000000000000000;;	          - "exists"
0000000000000000000000000000000000000000;;	          - "gt"
0000000000000000000000000000000000000000;;	          - "lt"
0000000000000000000000000000000000000000;;	      RuleAction:
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        description: "RuleAction controls whether the action is to add or remove a label from the matching object(s)."
0000000000000000000000000000000000000000;;	        enum:
0000000000000000000000000000000000000000;;	          - "add"
0000000000000000000000000000000000000000;;	          - "remove"
0000000000000000000000000000000000000000;;	        default: "add"
0000000000000000000000000000000000000000;;	      Selectors:
0000000000000000000000000000000000000000;;	        type: "object"
0000000000000000000000000000000000000000;;	        description: "Selectors defines the list of labels that should trigger a rule."
0000000000000000000000000000000000000000;;	        additionalProperties:
0000000000000000000000000000000000000000;;	          type: "string"
0000000000000000000000000000000000000000;;	      Labels:
0000000000000000000000000000000000000000;;	        type: "object"
0000000000000000000000000000000000000000;;	        description: "Labels define the list of labels that will be added or removed from the matching object(s).."
0000000000000000000000000000000000000000;;	        additionalProperties:
0000000000000000000000000000000000000000;;	          type: "string"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  CapacityStats:
0000000000000000000000000000000000000000;;	    type: "object"
0000000000000000000000000000000000000000;;	    description: "CapacityStats is used to report capacity statistics on pools and controllers."
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      TotalCapacityBytes:
0000000000000000000000000000000000000000;;	        description: "TotalCapacityBytes is the object's total capacity in bytes."
0000000000000000000000000000000000000000;;	        type: "integer"
0000000000000000000000000000000000000000;;	        readOnly: true
0000000000000000000000000000000000000000;;	      AvailableCapacityBytes:
0000000000000000000000000000000000000000;;	        description: "AvailableCapacityBytes is the object's available capacity in bytes."
0000000000000000000000000000000000000000;;	        type: "integer"
0000000000000000000000000000000000000000;;	        readOnly: true
0000000000000000000000000000000000000000;;	      ProvisionedCapacityBytes:
0000000000000000000000000000000000000000;;	        description: "ProvisionedCapacityBytes is the object's provisioned capacity in bytes."
0000000000000000000000000000000000000000;;	        type: "integer"
0000000000000000000000000000000000000000;;	        readOnly: true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  DriverInstances:
0000000000000000000000000000000000000000;;	    type: "object"
0000000000000000000000000000000000000000;;	    description: "DriverInstances shows the internal configuration and state of each driver on all the nodes in the pool. Data within DriverInstances can not be modified directly."
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      ID:
0000000000000000000000000000000000000000;;	        description: "Instance unique ID."
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        x-nullable: false
0000000000000000000000000000000000000000;;	        readOnly: true
0000000000000000000000000000000000000000;;	      Name:
0000000000000000000000000000000000000000;;	        description: "Instance name."
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        x-nullable: false
0000000000000000000000000000000000000000;;	        readOnly: true
0000000000000000000000000000000000000000;;	      Description:
0000000000000000000000000000000000000000;;	        description: "Instance description."
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        x-nullable: false
0000000000000000000000000000000000000000;;	        readOnly: true
0000000000000000000000000000000000000000;;	      Active:
0000000000000000000000000000000000000000;;	        description: "Flag describing whether the template is active."
0000000000000000000000000000000000000000;;	        type: "boolean"
0000000000000000000000000000000000000000;;	        x-nullable: false
0000000000000000000000000000000000000000;;	        readOnly: true
0000000000000000000000000000000000000000;;	      Config:
0000000000000000000000000000000000000000;;	        description: "Config is JSON struct that is passed directly to the driver.  There is no specific format, and the driver is responsible for validation."
0000000000000000000000000000000000000000;;	        type: "object"
0000000000000000000000000000000000000000;;	        readOnly: true
0000000000000000000000000000000000000000;;	        additionalProperties:
0000000000000000000000000000000000000000;;	          type: "string"
0000000000000000000000000000000000000000;;	      Labels:
0000000000000000000000000000000000000000;;	        description: "Labels define a list of labels that describe the driver instance.  These are inherited from the pool when the driver instance is created."
0000000000000000000000000000000000000000;;	        type: "object"
0000000000000000000000000000000000000000;;	        readOnly: true
0000000000000000000000000000000000000000;;	        additionalProperties:
0000000000000000000000000000000000000000;;	          type: "string"
0000000000000000000000000000000000000000;;	      ControllerName:
0000000000000000000000000000000000000000;;	        description: "ControllerName specifies the controller that this instance is running on."
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        x-nullable: false
0000000000000000000000000000000000000000;;	        readOnly: true
0000000000000000000000000000000000000000;;	      PoolID:
0000000000000000000000000000000000000000;;	        description: "PoolID refers to the pool that this driver instance relates to."
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        x-nullable: false
0000000000000000000000000000000000000000;;	        readOnly: true
0000000000000000000000000000000000000000;;	      DriverName:
0000000000000000000000000000000000000000;;	        description: "DriverName specifies which capacity driver this is an instance of."
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        x-nullable: false
0000000000000000000000000000000000000000;;	        readOnly: true
0000000000000000000000000000000000000000;;	      CapacityStats:
0000000000000000000000000000000000000000;;	        $ref: "#/definitions/CapacityStats"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	parameters:
0000000000000000000000000000000000000000;;	  Name:
0000000000000000000000000000000000000000;;	    name: "name"
0000000000000000000000000000000000000000;;	    in: "path"
0000000000000000000000000000000000000000;;	    type: "string"
0000000000000000000000000000000000000000;;	    description: "Volume name or ID."
0000000000000000000000000000000000000000;;	    required: true
0000000000000000000000000000000000000000;;	  Namespace:
0000000000000000000000000000000000000000;;	    name: "namespace"
0000000000000000000000000000000000000000;;	    in: "path"
0000000000000000000000000000000000000000;;	    type: "string"
0000000000000000000000000000000000000000;;	    description: "Object name and auth scope, such as for teams and projects."
0000000000000000000000000000000000000000;;	    required: true
0000000000000000000000000000000000000000;;	  NamespaceQuery:
0000000000000000000000000000000000000000;;	    name: "namespace"
0000000000000000000000000000000000000000;;	    in: "query"
0000000000000000000000000000000000000000;;	    type: "string"
0000000000000000000000000000000000000000;;	    description: "Object name and auth scope, such as for teams and projects."
0000000000000000000000000000000000000000;;	    default: "default"
0000000000000000000000000000000000000000;;	  LabelSelector:
0000000000000000000000000000000000000000;;	    name: "labelSelector"
0000000000000000000000000000000000000000;;	    in: "query"
0000000000000000000000000000000000000000;;	    description: "A selector to restrict the list of returned objects by their labels. Defaults to everything."
0000000000000000000000000000000000000000;;	    type: "string"
0000000000000000000000000000000000000000;;	  FieldSelector:
0000000000000000000000000000000000000000;;	    name: "fieldSelector"
0000000000000000000000000000000000000000;;	    in: "query"
0000000000000000000000000000000000000000;;	    type: "string"
0000000000000000000000000000000000000000;;	    description: "A selector to restrict the list of returned objects by their fields. Defaults to everything."
0000000000000000000000000000000000000000;;	  TimeoutSeconds:
0000000000000000000000000000000000000000;;	    name: "timeoutSeconds"
0000000000000000000000000000000000000000;;	    in: "query"
0000000000000000000000000000000000000000;;	    type: "integer"
0000000000000000000000000000000000000000;;	    description: "Timeout for the list call."
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	paths:
0000000000000000000000000000000000000000;;	  /namespaces/{namespace}/volumes:
0000000000000000000000000000000000000000;;	    get:
0000000000000000000000000000000000000000;;	      summary: "List volumes"
0000000000000000000000000000000000000000;;	      description: "List of volumes that match the query."
0000000000000000000000000000000000000000;;	      produces:
0000000000000000000000000000000000000000;;	        - "application/json"
0000000000000000000000000000000000000000;;	      tags: ["Volume"]
0000000000000000000000000000000000000000;;	      parameters:
0000000000000000000000000000000000000000;;	        - name: "namespace"
0000000000000000000000000000000000000000;;	          in: "path"
0000000000000000000000000000000000000000;;	          required: true
0000000000000000000000000000000000000000;;	          description: "The object scope, such as for teams and projects."
0000000000000000000000000000000000000000;;	          type: "string"
0000000000000000000000000000000000000000;;	        - $ref: "#/parameters/LabelSelector"
0000000000000000000000000000000000000000;;	        - $ref: "#/parameters/FieldSelector"
0000000000000000000000000000000000000000;;	        - $ref: "#/parameters/TimeoutSeconds"
0000000000000000000000000000000000000000;;	        - $ref: "#/parameters/NamespaceQuery"
0000000000000000000000000000000000000000;;	      responses:
0000000000000000000000000000000000000000;;	        200:
0000000000000000000000000000000000000000;;	          description: "Success"
0000000000000000000000000000000000000000;;	          schema:
0000000000000000000000000000000000000000;;	            type: "array"
0000000000000000000000000000000000000000;;	            items:
0000000000000000000000000000000000000000;;	              $ref: "#/definitions/Volume"
0000000000000000000000000000000000000000;;	        500:
0000000000000000000000000000000000000000;;	          description: "Server error"
0000000000000000000000000000000000000000;;	          schema:
0000000000000000000000000000000000000000;;	            $ref: "#/definitions/ErrorResponse"
0000000000000000000000000000000000000000;;	    post:
0000000000000000000000000000000000000000;;	      summary: "Create volume"
0000000000000000000000000000000000000000;;	      description: "Provisions a new volume."
0000000000000000000000000000000000000000;;	      produces:
0000000000000000000000000000000000000000;;	        - "application/json"
0000000000000000000000000000000000000000;;	      tags: ["Volume"]
0000000000000000000000000000000000000000;;	      parameters:
0000000000000000000000000000000000000000;;	        - $ref: "#/parameters/Namespace"
0000000000000000000000000000000000000000;;	        - name: "VolumeCreateOptions"
0000000000000000000000000000000000000000;;	          in: "body"
0000000000000000000000000000000000000000;;	          schema:
0000000000000000000000000000000000000000;;	            $ref: "#/definitions/VolumeCreateOptions"
0000000000000000000000000000000000000000;;	      responses:
0000000000000000000000000000000000000000;;	        201:
0000000000000000000000000000000000000000;;	          description: "Volume created successfully"
0000000000000000000000000000000000000000;;	          schema:
0000000000000000000000000000000000000000;;	            $ref: "#/definitions/Volume"
0000000000000000000000000000000000000000;;	        401:
0000000000000000000000000000000000000000;;	          description: "Unauthorized"
0000000000000000000000000000000000000000;;	        409:
0000000000000000000000000000000000000000;;	          description: "Volume with name already exists"
0000000000000000000000000000000000000000;;	        500:
0000000000000000000000000000000000000000;;	          description: "Server error"
0000000000000000000000000000000000000000;;	          schema:
0000000000000000000000000000000000000000;;	            $ref: "#/definitions/ErrorResponse"
0000000000000000000000000000000000000000;;	  /namespaces/{namespace}/volumes/{name}:
0000000000000000000000000000000000000000;;	    get:
0000000000000000000000000000000000000000;;	      summary: "Get a volume"
0000000000000000000000000000000000000000;;	      description: "Gets a volume by name or ID.  Returns to whole volume object."
0000000000000000000000000000000000000000;;	      produces:
0000000000000000000000000000000000000000;;	        - "application/json"
0000000000000000000000000000000000000000;;	      tags: ["Volume"]
0000000000000000000000000000000000000000;;	      parameters:
0000000000000000000000000000000000000000;;	        - $ref: "#/parameters/Name"
0000000000000000000000000000000000000000;;	        - $ref: "#/parameters/Namespace"
0000000000000000000000000000000000000000;;	      responses:
0000000000000000000000000000000000000000;;	        200:
0000000000000000000000000000000000000000;;	          description: "Success"
0000000000000000000000000000000000000000;;	          schema:
0000000000000000000000000000000000000000;;	            $ref: "#/definitions/Volume"
0000000000000000000000000000000000000000;;	        401:
0000000000000000000000000000000000000000;;	          description: "Unauthorized"
0000000000000000000000000000000000000000;;	        404:
0000000000000000000000000000000000000000;;	          description: "Not found"
0000000000000000000000000000000000000000;;	          schema:
0000000000000000000000000000000000000000;;	            $ref: "#/definitions/ErrorResponse"
0000000000000000000000000000000000000000;;	        407:
0000000000000000000000000000000000000000;;	          description: "Volume already exists"
0000000000000000000000000000000000000000;;	        500:
0000000000000000000000000000000000000000;;	          description: "Server error"
0000000000000000000000000000000000000000;;	          schema:
0000000000000000000000000000000000000000;;	            $ref: "#/definitions/ErrorResponse"
0000000000000000000000000000000000000000;;	    put:
0000000000000000000000000000000000000000;;	      summary: "Update volume"
0000000000000000000000000000000000000000;;	      description: "Updates an existing volume."
0000000000000000000000000000000000000000;;	      produces:
0000000000000000000000000000000000000000;;	        - "application/json"
0000000000000000000000000000000000000000;;	      tags: ["Volume"]
0000000000000000000000000000000000000000;;	      parameters:
0000000000000000000000000000000000000000;;	        - $ref: "#/parameters/Name"
0000000000000000000000000000000000000000;;	        - $ref: "#/parameters/Namespace"
0000000000000000000000000000000000000000;;	        - name: "VolumeUpdateOptions"
0000000000000000000000000000000000000000;;	          in: "body"
0000000000000000000000000000000000000000;;	          schema:
0000000000000000000000000000000000000000;;	            $ref: "#/definitions/VolumeUpdateOptions"
0000000000000000000000000000000000000000;;	      responses:
0000000000000000000000000000000000000000;;	        200:
0000000000000000000000000000000000000000;;	          description: "Success"
0000000000000000000000000000000000000000;;	          schema:
0000000000000000000000000000000000000000;;	            $ref: "#/definitions/Volume"
0000000000000000000000000000000000000000;;	        401:
0000000000000000000000000000000000000000;;	          description: "Unauthorized"
0000000000000000000000000000000000000000;;	        500:
0000000000000000000000000000000000000000;;	          description: "Server error"
0000000000000000000000000000000000000000;;	          schema:
0000000000000000000000000000000000000000;;	            $ref: "#/definitions/ErrorResponse"
0000000000000000000000000000000000000000;;	    delete:
0000000000000000000000000000000000000000;;	      summary: "Delete volume"
0000000000000000000000000000000000000000;;	      description: "Deletes a volume."
0000000000000000000000000000000000000000;;	      produces:
0000000000000000000000000000000000000000;;	        - "application/json"
0000000000000000000000000000000000000000;;	      tags: ["Volume"]
0000000000000000000000000000000000000000;;	      parameters:
0000000000000000000000000000000000000000;;	        - name: "namespace"
0000000000000000000000000000000000000000;;	          in: "path"
0000000000000000000000000000000000000000;;	          required: true
0000000000000000000000000000000000000000;;	          description: "The object scope, such as for teams and projects."
0000000000000000000000000000000000000000;;	          type: "string"
0000000000000000000000000000000000000000;;	        - name: "name"
0000000000000000000000000000000000000000;;	          in: "path"
0000000000000000000000000000000000000000;;	          required: true
0000000000000000000000000000000000000000;;	          description: "Volume name or ID."
0000000000000000000000000000000000000000;;	          type: "string"
0000000000000000000000000000000000000000;;	      responses:
0000000000000000000000000000000000000000;;	        200:
0000000000000000000000000000000000000000;;	          description: "Success"
0000000000000000000000000000000000000000;;	        401:
0000000000000000000000000000000000000000;;	          description: "Unauthorized"
0000000000000000000000000000000000000000;;	        407:
0000000000000000000000000000000000000000;;	          description: "Volume in use"
0000000000000000000000000000000000000000;;	        500:
0000000000000000000000000000000000000000;;	          description: "Server error"
0000000000000000000000000000000000000000;;	          schema:
0000000000000000000000000000000000000000;;	            $ref: "#/definitions/ErrorResponse"
0000000000000000000000000000000000000000;;	  /namespaces/{namespace}/volumes/{name}/mount:
0000000000000000000000000000000000000000;;	    post:
0000000000000000000000000000000000000000;;	      summary: "Mount volume"
0000000000000000000000000000000000000000;;	      description: "Updates the mount reference for the volume."
0000000000000000000000000000000000000000;;	      produces:
0000000000000000000000000000000000000000;;	        - "application/json"
0000000000000000000000000000000000000000;;	      tags: ["Volume"]
0000000000000000000000000000000000000000;;	      parameters:
0000000000000000000000000000000000000000;;	        - $ref: "#/parameters/Name"
0000000000000000000000000000000000000000;;	        - $ref: "#/parameters/Namespace"
0000000000000000000000000000000000000000;;	        - name: "client"
0000000000000000000000000000000000000000;;	          in: "body"
0000000000000000000000000000000000000000;;	          description: "Hostname of the client mounting the volume"
0000000000000000000000000000000000000000;;	          required: true
0000000000000000000000000000000000000000;;	          schema:
0000000000000000000000000000000000000000;;	            type: "string"
0000000000000000000000000000000000000000;;	      responses:
0000000000000000000000000000000000000000;;	        200:
0000000000000000000000000000000000000000;;	          description: "Success"
0000000000000000000000000000000000000000;;	          schema:
0000000000000000000000000000000000000000;;	            $ref: "#/definitions/Volume"
0000000000000000000000000000000000000000;;	        401:
0000000000000000000000000000000000000000;;	          description: "Unauthorized"
0000000000000000000000000000000000000000;;	        407:
0000000000000000000000000000000000000000;;	          description: "Volume already mounted"
0000000000000000000000000000000000000000;;	        500:
0000000000000000000000000000000000000000;;	          description: "Server error"
0000000000000000000000000000000000000000;;	          schema:
0000000000000000000000000000000000000000;;	            $ref: "#/definitions/ErrorResponse"
0000000000000000000000000000000000000000;;	  /namespaces/{namespace}/volumes/{name}/unmount:
0000000000000000000000000000000000000000;;	    post:
0000000000000000000000000000000000000000;;	      summary: "Mount volume"
0000000000000000000000000000000000000000;;	      description: "Updates the mount reference for the volume."
0000000000000000000000000000000000000000;;	      produces:
0000000000000000000000000000000000000000;;	        - "application/json"
0000000000000000000000000000000000000000;;	      tags: ["Volume"]
0000000000000000000000000000000000000000;;	      parameters:
0000000000000000000000000000000000000000;;	        - $ref: "#/parameters/Name"
0000000000000000000000000000000000000000;;	        - $ref: "#/parameters/Namespace"
0000000000000000000000000000000000000000;;	        - name: "client"
0000000000000000000000000000000000000000;;	          in: "body"
0000000000000000000000000000000000000000;;	          description: "Hostname of the client mounting the volume"
0000000000000000000000000000000000000000;;	          required: true
0000000000000000000000000000000000000000;;	          schema:
0000000000000000000000000000000000000000;;	            type: "string"
0000000000000000000000000000000000000000;;	      responses:
0000000000000000000000000000000000000000;;	        200:
0000000000000000000000000000000000000000;;	          description: "Success"
0000000000000000000000000000000000000000;;	          schema:
0000000000000000000000000000000000000000;;	            $ref: "#/definitions/Volume"
0000000000000000000000000000000000000000;;	        401:
0000000000000000000000000000000000000000;;	          description: "Unauthorized"
0000000000000000000000000000000000000000;;	        407:
0000000000000000000000000000000000000000;;	          description: "Volume not mounted"
0000000000000000000000000000000000000000;;	        500:
0000000000000000000000000000000000000000;;	          description: "Server error"
0000000000000000000000000000000000000000;;	          schema:
0000000000000000000000000000000000000000;;	            $ref: "#/definitions/ErrorResponse"
0000000000000000000000000000000000000000;;	  /pools:
0000000000000000000000000000000000000000;;	    get:
0000000000000000000000000000000000000000;;	      summary: "List pools"
0000000000000000000000000000000000000000;;	      description: "List of pools that match the query."
0000000000000000000000000000000000000000;;	      produces:
0000000000000000000000000000000000000000;;	        - "application/json"
0000000000000000000000000000000000000000;;	      tags: ["Pool"]
0000000000000000000000000000000000000000;;	      #parameters:
0000000000000000000000000000000000000000;;	      #  - $ref: "#/parameters/LabelSelector"
0000000000000000000000000000000000000000;;	      #  - $ref: "#/parameters/FieldSelector"
0000000000000000000000000000000000000000;;	      #  - $ref: "#/parameters/TimeoutSeconds"
0000000000000000000000000000000000000000;;	      #  - $ref: "#/parameters/NamespaceQuery"
0000000000000000000000000000000000000000;;	      responses:
0000000000000000000000000000000000000000;;	        200:
0000000000000000000000000000000000000000;;	          description: "Success"
0000000000000000000000000000000000000000;;	          schema:
0000000000000000000000000000000000000000;;	            type: "array"
0000000000000000000000000000000000000000;;	            items:
0000000000000000000000000000000000000000;;	              $ref: "#/definitions/Pool"
0000000000000000000000000000000000000000;;	        500:
0000000000000000000000000000000000000000;;	          description: "Server error"
0000000000000000000000000000000000000000;;	          schema:
0000000000000000000000000000000000000000;;	            $ref: "#/definitions/ErrorResponse"
0000000000000000000000000000000000000000;;	    post:
0000000000000000000000000000000000000000;;	      summary: "Create pool"
0000000000000000000000000000000000000000;;	      description: "Provisions a new pool."
0000000000000000000000000000000000000000;;	      produces:
0000000000000000000000000000000000000000;;	        - "application/json"
0000000000000000000000000000000000000000;;	      tags: ["Pool"]
0000000000000000000000000000000000000000;;	      parameters:
0000000000000000000000000000000000000000;;	        - name: "PoolCreateOptions"
0000000000000000000000000000000000000000;;	          in: "body"
0000000000000000000000000000000000000000;;	          schema:
0000000000000000000000000000000000000000;;	            $ref: "#/definitions/PoolCreateOptions"
0000000000000000000000000000000000000000;;	      responses:
0000000000000000000000000000000000000000;;	        201:
0000000000000000000000000000000000000000;;	          description: "Pool created successfully"
0000000000000000000000000000000000000000;;	          schema:
0000000000000000000000000000000000000000;;	            $ref: "#/definitions/Pool"
0000000000000000000000000000000000000000;;	        401:
0000000000000000000000000000000000000000;;	          description: "Unauthorized"
0000000000000000000000000000000000000000;;	        409:
0000000000000000000000000000000000000000;;	          description: "Pool with name already exists"
0000000000000000000000000000000000000000;;	        500:
0000000000000000000000000000000000000000;;	          description: "Server error"
0000000000000000000000000000000000000000;;	          schema:
0000000000000000000000000000000000000000;;	            $ref: "#/definitions/ErrorResponse"
0000000000000000000000000000000000000000;;	  /pools/{name}:
0000000000000000000000000000000000000000;;	    get:
0000000000000000000000000000000000000000;;	      summary: "Get a pool"
0000000000000000000000000000000000000000;;	      description: "Gets a pool by name or ID.  Returns to whole pool object."
0000000000000000000000000000000000000000;;	      produces:
0000000000000000000000000000000000000000;;	        - "application/json"
0000000000000000000000000000000000000000;;	      tags: ["Pool"]
0000000000000000000000000000000000000000;;	      parameters:
0000000000000000000000000000000000000000;;	        - $ref: "#/parameters/Name"
0000000000000000000000000000000000000000;;	      responses:
0000000000000000000000000000000000000000;;	        200:
0000000000000000000000000000000000000000;;	          description: "Success"
0000000000000000000000000000000000000000;;	          schema:
0000000000000000000000000000000000000000;;	            $ref: "#/definitions/Pool"
0000000000000000000000000000000000000000;;	        401:
0000000000000000000000000000000000000000;;	          description: "Unauthorized"
0000000000000000000000000000000000000000;;	        404:
0000000000000000000000000000000000000000;;	          description: "Not found"
0000000000000000000000000000000000000000;;	          schema:
0000000000000000000000000000000000000000;;	            $ref: "#/definitions/ErrorResponse"
0000000000000000000000000000000000000000;;	        407:
0000000000000000000000000000000000000000;;	          description: "Pool already exists"
0000000000000000000000000000000000000000;;	        500:
0000000000000000000000000000000000000000;;	          description: "Server error"
0000000000000000000000000000000000000000;;	          schema:
0000000000000000000000000000000000000000;;	            $ref: "#/definitions/ErrorResponse"
0000000000000000000000000000000000000000;;	    delete:
0000000000000000000000000000000000000000;;	      summary: "Delete pool"
0000000000000000000000000000000000000000;;	      description: "Deletes a pool."
0000000000000000000000000000000000000000;;	      produces:
0000000000000000000000000000000000000000;;	        - "application/json"
0000000000000000000000000000000000000000;;	      tags: ["Pool"]
0000000000000000000000000000000000000000;;	      parameters:
0000000000000000000000000000000000000000;;	        - name: "name"
0000000000000000000000000000000000000000;;	          in: "path"
0000000000000000000000000000000000000000;;	          required: true
0000000000000000000000000000000000000000;;	          description: "Pool name or ID."
0000000000000000000000000000000000000000;;	          type: "string"
0000000000000000000000000000000000000000;;	      responses:
0000000000000000000000000000000000000000;;	        200:
0000000000000000000000000000000000000000;;	          description: "Success"
0000000000000000000000000000000000000000;;	        401:
0000000000000000000000000000000000000000;;	          description: "Unauthorized"
0000000000000000000000000000000000000000;;	        407:
0000000000000000000000000000000000000000;;	          description: "Pool in use"
0000000000000000000000000000000000000000;;	        500:
0000000000000000000000000000000000000000;;	          description: "Server error"
0000000000000000000000000000000000000000;;	          schema:
0000000000000000000000000000000000000000;;	            $ref: "#/definitions/ErrorResponse"
