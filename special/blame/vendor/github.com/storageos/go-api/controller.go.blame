0000000000000000000000000000000000000000;;	package storageos
bed3bbbd20d07cd2188d11c1be163c46f1d22c8d;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/storageos/go-api/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ControllerAPIPrefix is a partial path to the HTTP endpoint.
0000000000000000000000000000000000000000;;		ControllerAPIPrefix = "controllers"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ErrNoSuchController is the error returned when the controller does not exist.
0000000000000000000000000000000000000000;;		ErrNoSuchController = errors.New("no such controller")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ErrControllerInUse is the error returned when the controller requested to be removed is still in use.
0000000000000000000000000000000000000000;;		ErrControllerInUse = errors.New("controller in use and cannot be removed")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ControllerList returns the list of available controllers.
0000000000000000000000000000000000000000;;	func (c *Client) ControllerList(opts types.ListOptions) ([]*types.Controller, error) {
0000000000000000000000000000000000000000;;		listOpts := doOptions{
0000000000000000000000000000000000000000;;			fieldSelector: opts.FieldSelector,
0000000000000000000000000000000000000000;;			labelSelector: opts.LabelSelector,
0000000000000000000000000000000000000000;;			namespace:     opts.Namespace,
0000000000000000000000000000000000000000;;			context:       opts.Context,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if opts.LabelSelector != "" {
0000000000000000000000000000000000000000;;			query := url.Values{}
0000000000000000000000000000000000000000;;			query.Add("labelSelector", opts.LabelSelector)
0000000000000000000000000000000000000000;;			listOpts.values = query
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := c.do("GET", ControllerAPIPrefix, listOpts)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;		var controllers []*types.Controller
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(resp.Body).Decode(&controllers); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return controllers, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Controller returns a controller by its reference.
0000000000000000000000000000000000000000;;	func (c *Client) Controller(ref string) (*types.Controller, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := c.do("GET", ControllerAPIPrefix+"/"+ref, doOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if e, ok := err.(*Error); ok && e.Status == http.StatusNotFound {
0000000000000000000000000000000000000000;;				return nil, ErrNoSuchController
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;		var controller types.Controller
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(resp.Body).Decode(&controller); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &controller, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ControllerUpdate updates a controller on the server.
0000000000000000000000000000000000000000;;	func (c *Client) ControllerUpdate(opts types.ControllerUpdateOptions) (*types.Controller, error) {
0000000000000000000000000000000000000000;;		ref := opts.Name
0000000000000000000000000000000000000000;;		if IsUUID(opts.ID) {
0000000000000000000000000000000000000000;;			ref = opts.ID
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		resp, err := c.do("PUT", ControllerAPIPrefix+"/"+ref, doOptions{
0000000000000000000000000000000000000000;;			data:    opts,
0000000000000000000000000000000000000000;;			context: opts.Context,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;		var controller types.Controller
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(resp.Body).Decode(&controller); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &controller, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ControllerDelete removes a controller by its reference.
0000000000000000000000000000000000000000;;	func (c *Client) ControllerDelete(opts types.DeleteOptions) error {
0000000000000000000000000000000000000000;;		deleteOpts := doOptions{
0000000000000000000000000000000000000000;;			namespace: opts.Namespace,
0000000000000000000000000000000000000000;;			force:     opts.Force,
0000000000000000000000000000000000000000;;			context:   opts.Context,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		resp, err := c.do("DELETE", ControllerAPIPrefix+"/"+opts.Name, deleteOpts)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if e, ok := err.(*Error); ok {
0000000000000000000000000000000000000000;;				if e.Status == http.StatusNotFound {
0000000000000000000000000000000000000000;;					return ErrNoSuchController
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if e.Status == http.StatusConflict {
0000000000000000000000000000000000000000;;					return ErrControllerInUse
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
