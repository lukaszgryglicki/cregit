0000000000000000000000000000000000000000;;	package storageos
bed3bbbd20d07cd2188d11c1be163c46f1d22c8d;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/storageos/go-api/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TemplateAPIPrefix is a partial path to the HTTP endpoint.
0000000000000000000000000000000000000000;;		TemplateAPIPrefix = "/templates"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ErrNoSuchTemplate is the error returned when the template does not exist.
0000000000000000000000000000000000000000;;		ErrNoSuchTemplate = errors.New("no such template")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ErrTemplateInUse is the error returned when the template requested to be removed is still in use.
0000000000000000000000000000000000000000;;		ErrTemplateInUse = errors.New("template in use and cannot be removed")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TemplateList returns the list of available templates.
0000000000000000000000000000000000000000;;	func (c *Client) TemplateList(opts types.ListOptions) ([]types.Template, error) {
0000000000000000000000000000000000000000;;		path := TemplateAPIPrefix + "?" + queryString(opts)
0000000000000000000000000000000000000000;;		resp, err := c.do("GET", path, doOptions{context: opts.Context})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;		var templates []types.Template
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(resp.Body).Decode(&templates); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return templates, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TemplateCreate creates a template on the server and returns the new object.
0000000000000000000000000000000000000000;;	func (c *Client) TemplateCreate(opts types.TemplateCreateOptions) (string, error) {
0000000000000000000000000000000000000000;;		resp, err := c.do("POST", TemplateAPIPrefix, doOptions{
0000000000000000000000000000000000000000;;			data:    opts,
0000000000000000000000000000000000000000;;			context: opts.Context,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;		out, err := ioutil.ReadAll(resp.Body)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return strconv.Unquote(string(out))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Template returns a template by its reference.
0000000000000000000000000000000000000000;;	func (c *Client) Template(ref string) (*types.Template, error) {
0000000000000000000000000000000000000000;;		resp, err := c.do("GET", TemplateAPIPrefix+"/"+ref, doOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if e, ok := err.(*Error); ok && e.Status == http.StatusNotFound {
0000000000000000000000000000000000000000;;				return nil, ErrNoSuchTemplate
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;		var template types.Template
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(resp.Body).Decode(&template); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &template, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TemplateDelete removes a template by its reference.
0000000000000000000000000000000000000000;;	func (c *Client) TemplateDelete(ref string) error {
0000000000000000000000000000000000000000;;		resp, err := c.do("DELETE", TemplateAPIPrefix+"/"+ref, doOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if e, ok := err.(*Error); ok {
0000000000000000000000000000000000000000;;				if e.Status == http.StatusNotFound {
0000000000000000000000000000000000000000;;					return ErrNoSuchTemplate
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if e.Status == http.StatusConflict {
0000000000000000000000000000000000000000;;					return ErrTemplateInUse
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
