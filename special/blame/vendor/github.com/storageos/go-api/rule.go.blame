0000000000000000000000000000000000000000;;	package storageos
bed3bbbd20d07cd2188d11c1be163c46f1d22c8d;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/storageos/go-api/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RuleAPIPrefix is a partial path to the HTTP endpoint.
0000000000000000000000000000000000000000;;		RuleAPIPrefix = "rules"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ErrNoSuchRule is the error returned when the rule does not exist.
0000000000000000000000000000000000000000;;		ErrNoSuchRule = errors.New("no such rule")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ErrRuleInUse is the error returned when the rule requested to be removed is still in use.
0000000000000000000000000000000000000000;;		ErrRuleInUse = errors.New("rule in use and cannot be removed")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RuleList returns the list of available rules.
0000000000000000000000000000000000000000;;	func (c *Client) RuleList(opts types.ListOptions) ([]*types.Rule, error) {
0000000000000000000000000000000000000000;;		listOpts := doOptions{
0000000000000000000000000000000000000000;;			fieldSelector: opts.FieldSelector,
0000000000000000000000000000000000000000;;			labelSelector: opts.LabelSelector,
0000000000000000000000000000000000000000;;			namespace:     opts.Namespace,
0000000000000000000000000000000000000000;;			context:       opts.Context,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if opts.LabelSelector != "" {
0000000000000000000000000000000000000000;;			query := url.Values{}
0000000000000000000000000000000000000000;;			query.Add("labelSelector", opts.LabelSelector)
0000000000000000000000000000000000000000;;			listOpts.values = query
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := c.do("GET", RuleAPIPrefix, listOpts)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;		var rules []*types.Rule
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(resp.Body).Decode(&rules); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return rules, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Rule returns a rule by its reference.
0000000000000000000000000000000000000000;;	func (c *Client) Rule(namespace string, ref string) (*types.Rule, error) {
0000000000000000000000000000000000000000;;		path, err := namespacedRefPath(namespace, RuleAPIPrefix, ref)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		resp, err := c.do("GET", path, doOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if e, ok := err.(*Error); ok && e.Status == http.StatusNotFound {
0000000000000000000000000000000000000000;;				return nil, ErrNoSuchRule
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;		var rule types.Rule
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(resp.Body).Decode(&rule); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &rule, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RuleCreate creates a rule on the server and returns the new object.
0000000000000000000000000000000000000000;;	func (c *Client) RuleCreate(opts types.RuleCreateOptions) (*types.Rule, error) {
0000000000000000000000000000000000000000;;		resp, err := c.do("POST", RuleAPIPrefix, doOptions{
0000000000000000000000000000000000000000;;			data:      opts,
0000000000000000000000000000000000000000;;			namespace: opts.Namespace,
0000000000000000000000000000000000000000;;			context:   opts.Context,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var rule types.Rule
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(resp.Body).Decode(&rule); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &rule, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RuleUpdate updates a rule on the server.
0000000000000000000000000000000000000000;;	func (c *Client) RuleUpdate(opts types.RuleUpdateOptions) (*types.Rule, error) {
0000000000000000000000000000000000000000;;		ref := opts.Name
0000000000000000000000000000000000000000;;		if IsUUID(opts.ID) {
0000000000000000000000000000000000000000;;			ref = opts.ID
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fmt.Printf("%#v\n", opts)
0000000000000000000000000000000000000000;;		path, err := namespacedRefPath(opts.Namespace, RuleAPIPrefix, ref)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		resp, err := c.do("PUT", path, doOptions{
0000000000000000000000000000000000000000;;			data:    opts,
0000000000000000000000000000000000000000;;			context: opts.Context,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;		var rule types.Rule
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(resp.Body).Decode(&rule); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &rule, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RuleDelete removes a rule by its reference.
0000000000000000000000000000000000000000;;	func (c *Client) RuleDelete(opts types.DeleteOptions) error {
0000000000000000000000000000000000000000;;		deleteOpts := doOptions{
0000000000000000000000000000000000000000;;			namespace: opts.Namespace,
0000000000000000000000000000000000000000;;			force:     opts.Force,
0000000000000000000000000000000000000000;;			context:   opts.Context,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		resp, err := c.do("DELETE", RuleAPIPrefix+"/"+opts.Name, deleteOpts)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if e, ok := err.(*Error); ok {
0000000000000000000000000000000000000000;;				if e.Status == http.StatusNotFound {
0000000000000000000000000000000000000000;;					return ErrNoSuchRule
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if e.Status == http.StatusConflict {
0000000000000000000000000000000000000000;;					return ErrRuleInUse
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
