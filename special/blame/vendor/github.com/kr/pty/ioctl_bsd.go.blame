0000000000000000000000000000000000000000;;	// +build darwin dragonfly freebsd netbsd openbsd
ab71d75cf683c780361e644c5f2ee500a1c1e0f8;Godeps/_workspace/src/github.com/kr/pty/ioctl_bsd.go[Godeps/_workspace/src/github.com/kr/pty/ioctl_bsd.go][vendor/github.com/kr/pty/ioctl_bsd.go];	
0000000000000000000000000000000000000000;;	package pty
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// from <sys/ioccom.h>
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		_IOC_VOID    uintptr = 0x20000000
0000000000000000000000000000000000000000;;		_IOC_OUT     uintptr = 0x40000000
0000000000000000000000000000000000000000;;		_IOC_IN      uintptr = 0x80000000
0000000000000000000000000000000000000000;;		_IOC_IN_OUT  uintptr = _IOC_OUT | _IOC_IN
0000000000000000000000000000000000000000;;		_IOC_DIRMASK         = _IOC_VOID | _IOC_OUT | _IOC_IN
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_IOC_PARAM_SHIFT = 13
0000000000000000000000000000000000000000;;		_IOC_PARAM_MASK  = (1 << _IOC_PARAM_SHIFT) - 1
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func _IOC_PARM_LEN(ioctl uintptr) uintptr {
0000000000000000000000000000000000000000;;		return (ioctl >> 16) & _IOC_PARAM_MASK
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func _IOC(inout uintptr, group byte, ioctl_num uintptr, param_len uintptr) uintptr {
0000000000000000000000000000000000000000;;		return inout | (param_len&_IOC_PARAM_MASK)<<16 | uintptr(group)<<8 | ioctl_num
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func _IO(group byte, ioctl_num uintptr) uintptr {
0000000000000000000000000000000000000000;;		return _IOC(_IOC_VOID, group, ioctl_num, 0)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func _IOR(group byte, ioctl_num uintptr, param_len uintptr) uintptr {
0000000000000000000000000000000000000000;;		return _IOC(_IOC_OUT, group, ioctl_num, param_len)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func _IOW(group byte, ioctl_num uintptr, param_len uintptr) uintptr {
0000000000000000000000000000000000000000;;		return _IOC(_IOC_IN, group, ioctl_num, param_len)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func _IOWR(group byte, ioctl_num uintptr, param_len uintptr) uintptr {
0000000000000000000000000000000000000000;;		return _IOC(_IOC_IN_OUT, group, ioctl_num, param_len)
0000000000000000000000000000000000000000;;	}
