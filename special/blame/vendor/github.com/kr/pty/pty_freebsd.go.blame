0000000000000000000000000000000000000000;;	package pty
ab71d75cf683c780361e644c5f2ee500a1c1e0f8;Godeps/_workspace/src/github.com/kr/pty/pty_freebsd.go[Godeps/_workspace/src/github.com/kr/pty/pty_freebsd.go][vendor/github.com/kr/pty/pty_freebsd.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;		"unsafe"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func posix_openpt(oflag int) (fd int, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall(syscall.SYS_POSIX_OPENPT, uintptr(oflag), 0, 0)
0000000000000000000000000000000000000000;;		fd = int(r0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func open() (pty, tty *os.File, err error) {
0000000000000000000000000000000000000000;;		fd, err := posix_openpt(syscall.O_RDWR | syscall.O_CLOEXEC)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p := os.NewFile(uintptr(fd), "/dev/pts")
0000000000000000000000000000000000000000;;		sname, err := ptsname(p)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		t, err := os.OpenFile("/dev/"+sname, os.O_RDWR, 0)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return p, t, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func isptmaster(fd uintptr) (bool, error) {
0000000000000000000000000000000000000000;;		err := ioctl(fd, syscall.TIOCPTMASTER, 0)
0000000000000000000000000000000000000000;;		return err == nil, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		emptyFiodgnameArg fiodgnameArg
0000000000000000000000000000000000000000;;		ioctl_FIODGNAME   = _IOW('f', 120, unsafe.Sizeof(emptyFiodgnameArg))
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ptsname(f *os.File) (string, error) {
0000000000000000000000000000000000000000;;		master, err := isptmaster(f.Fd())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !master {
0000000000000000000000000000000000000000;;			return "", syscall.EINVAL
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		const n = _C_SPECNAMELEN + 1
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			buf = make([]byte, n)
0000000000000000000000000000000000000000;;			arg = fiodgnameArg{Len: n, Buf: (*byte)(unsafe.Pointer(&buf[0]))}
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		err = ioctl(f.Fd(), ioctl_FIODGNAME, uintptr(unsafe.Pointer(&arg)))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, c := range buf {
0000000000000000000000000000000000000000;;			if c == 0 {
0000000000000000000000000000000000000000;;				return string(buf[:i]), nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "", errors.New("FIODGNAME string not NUL-terminated")
0000000000000000000000000000000000000000;;	}
