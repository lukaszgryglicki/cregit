0000000000000000000000000000000000000000;;	# pty
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Pty is a Go package for using unix pseudo-terminals.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Install
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    go get github.com/kr/pty
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Example
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/kr/pty"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"os/exec"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func main() {
0000000000000000000000000000000000000000;;		c := exec.Command("grep", "--color=auto", "bar")
0000000000000000000000000000000000000000;;		f, err := pty.Start(c)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			f.Write([]byte("foo\n"))
0000000000000000000000000000000000000000;;			f.Write([]byte("bar\n"))
0000000000000000000000000000000000000000;;			f.Write([]byte("baz\n"))
0000000000000000000000000000000000000000;;			f.Write([]byte{4}) // EOT
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		io.Copy(os.Stdout, f)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	```
