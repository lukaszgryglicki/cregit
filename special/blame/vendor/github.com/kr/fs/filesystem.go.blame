0000000000000000000000000000000000000000;;	package fs
1ff933fb12f53e8c83a97bf4a48f852f030855aa;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FileSystem defines the methods of an abstract filesystem.
0000000000000000000000000000000000000000;;	type FileSystem interface {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ReadDir reads the directory named by dirname and returns a
0000000000000000000000000000000000000000;;		// list of directory entries.
0000000000000000000000000000000000000000;;		ReadDir(dirname string) ([]os.FileInfo, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Lstat returns a FileInfo describing the named file. If the file is a
0000000000000000000000000000000000000000;;		// symbolic link, the returned FileInfo describes the symbolic link. Lstat
0000000000000000000000000000000000000000;;		// makes no attempt to follow the link.
0000000000000000000000000000000000000000;;		Lstat(name string) (os.FileInfo, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Join joins any number of path elements into a single path, adding a
0000000000000000000000000000000000000000;;		// separator if necessary. The result is Cleaned; in particular, all
0000000000000000000000000000000000000000;;		// empty strings are ignored.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// The separator is FileSystem specific.
0000000000000000000000000000000000000000;;		Join(elem ...string) string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// fs represents a FileSystem provided by the os package.
0000000000000000000000000000000000000000;;	type fs struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fs) ReadDir(dirname string) ([]os.FileInfo, error) { return ioutil.ReadDir(dirname) }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fs) Lstat(name string) (os.FileInfo, error) { return os.Lstat(name) }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fs) Join(elem ...string) string { return filepath.Join(elem...) }
