0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Run all the different permutations of all the tests.
0000000000000000000000000000000000000000;;	# This helps ensure that nothing gets broken.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	_run() {
0000000000000000000000000000000000000000;;	    # 1. VARIATIONS: regular (t), canonical (c), IO R/W (i),
0000000000000000000000000000000000000000;;	    #                binc-nosymbols (n), struct2array (s), intern string (e),
0000000000000000000000000000000000000000;;	    #                json-indent (d), circular (l)
0000000000000000000000000000000000000000;;	    # 2. MODE: reflection (r), external (x), codecgen (g), unsafe (u), notfastpath (f)
0000000000000000000000000000000000000000;;	    # 3. OPTIONS: verbose (v), reset (z), must (m),
0000000000000000000000000000000000000000;;	    # 
0000000000000000000000000000000000000000;;	    # Use combinations of mode to get exactly what you want,
0000000000000000000000000000000000000000;;	    # and then pass the variations you need.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    ztags=""
0000000000000000000000000000000000000000;;	    zargs=""
0000000000000000000000000000000000000000;;	    local OPTIND 
0000000000000000000000000000000000000000;;	    OPTIND=1
0000000000000000000000000000000000000000;;	    while getopts "_xurtcinsvgzmefdl" flag
0000000000000000000000000000000000000000;;	    do
0000000000000000000000000000000000000000;;	        case "x$flag" in 
0000000000000000000000000000000000000000;;	            'xr')  ;;
0000000000000000000000000000000000000000;;	            'xf') ztags="$ztags notfastpath" ;;
0000000000000000000000000000000000000000;;	            'xg') ztags="$ztags codecgen" ;;
0000000000000000000000000000000000000000;;	            'xx') ztags="$ztags x" ;;
0000000000000000000000000000000000000000;;	            'xu') ztags="$ztags unsafe" ;;
0000000000000000000000000000000000000000;;	            'xv') zargs="$zargs -tv" ;;
0000000000000000000000000000000000000000;;	            'xz') zargs="$zargs -tr" ;;
0000000000000000000000000000000000000000;;	            'xm') zargs="$zargs -tm" ;;
0000000000000000000000000000000000000000;;	            'xl') zargs="$zargs -tl" ;;
0000000000000000000000000000000000000000;;	            *) ;;
0000000000000000000000000000000000000000;;	        esac
0000000000000000000000000000000000000000;;	    done
0000000000000000000000000000000000000000;;	    # shift $((OPTIND-1))
0000000000000000000000000000000000000000;;	    printf '............. TAGS: %s .............\n' "$ztags"
0000000000000000000000000000000000000000;;	    # echo ">>>>>>> TAGS: $ztags"
0000000000000000000000000000000000000000;;	    
0000000000000000000000000000000000000000;;	    OPTIND=1
0000000000000000000000000000000000000000;;	    while getopts "_xurtcinsvgzmefdl" flag
0000000000000000000000000000000000000000;;	    do
0000000000000000000000000000000000000000;;	        case "x$flag" in 
0000000000000000000000000000000000000000;;	            'xt') printf ">>>>>>> REGULAR    : "; go test "-tags=$ztags" $zargs ; sleep 2 ;;
0000000000000000000000000000000000000000;;	            'xc') printf ">>>>>>> CANONICAL  : "; go test "-tags=$ztags" $zargs -tc; sleep 2 ;;
0000000000000000000000000000000000000000;;	            'xi') printf ">>>>>>> I/O        : "; go test "-tags=$ztags" $zargs -ti; sleep 2 ;;
0000000000000000000000000000000000000000;;	            'xn') printf ">>>>>>> NO_SYMBOLS : "; go test "-tags=$ztags" -run=Binc $zargs -tn; sleep 2 ;;
0000000000000000000000000000000000000000;;	            'xs') printf ">>>>>>> TO_ARRAY   : "; go test "-tags=$ztags" $zargs -ts; sleep 2 ;;
0000000000000000000000000000000000000000;;	            'xe') printf ">>>>>>> INTERN     : "; go test "-tags=$ztags" $zargs -te; sleep 2 ;;
0000000000000000000000000000000000000000;;	            'xd') printf ">>>>>>> INDENT     : ";
0000000000000000000000000000000000000000;;	                  go test "-tags=$ztags" -run=JsonCodecsTable -td=-1 $zargs;
0000000000000000000000000000000000000000;;	                  go test "-tags=$ztags" -run=JsonCodecsTable -td=8 $zargs;
0000000000000000000000000000000000000000;;	                  sleep 2 ;;
0000000000000000000000000000000000000000;;	            *) ;;
0000000000000000000000000000000000000000;;	        esac
0000000000000000000000000000000000000000;;	    done
0000000000000000000000000000000000000000;;	    shift $((OPTIND-1))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    OPTIND=1
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# echo ">>>>>>> RUNNING VARIATIONS OF TESTS"    
0000000000000000000000000000000000000000;;	if [[ "x$@" = "x"  || "x$@" = "x-A" ]]; then
0000000000000000000000000000000000000000;;	    # All: r, x, g, gu
0000000000000000000000000000000000000000;;	    _run "-_tcinsed_ml"  # regular
0000000000000000000000000000000000000000;;	    _run "-_tcinsed_ml_z" # regular with reset
0000000000000000000000000000000000000000;;	    _run "-_tcinsed_ml_f" # regular with no fastpath (notfastpath)
0000000000000000000000000000000000000000;;	    _run "-x_tcinsed_ml" # external
0000000000000000000000000000000000000000;;	    _run "-gx_tcinsed_ml" # codecgen: requires external
0000000000000000000000000000000000000000;;	    _run "-gxu_tcinsed_ml" # codecgen + unsafe
0000000000000000000000000000000000000000;;	elif [[ "x$@" = "x-Z" ]]; then
0000000000000000000000000000000000000000;;	    # Regular
0000000000000000000000000000000000000000;;	    _run "-_tcinsed_ml"  # regular
0000000000000000000000000000000000000000;;	    _run "-_tcinsed_ml_z" # regular with reset
0000000000000000000000000000000000000000;;	elif [[ "x$@" = "x-F" ]]; then
0000000000000000000000000000000000000000;;	    # regular with notfastpath
0000000000000000000000000000000000000000;;	    _run "-_tcinsed_ml_f"  # regular
0000000000000000000000000000000000000000;;	    _run "-_tcinsed_ml_zf" # regular with reset
0000000000000000000000000000000000000000;;	elif [[ "x$@" = "x-C" ]]; then
0000000000000000000000000000000000000000;;	    # codecgen
0000000000000000000000000000000000000000;;	    _run "-gx_tcinsed_ml" # codecgen: requires external
0000000000000000000000000000000000000000;;	    _run "-gxu_tcinsed_ml" # codecgen + unsafe
0000000000000000000000000000000000000000;;	elif [[ "x$@" = "x-X" ]]; then
0000000000000000000000000000000000000000;;	    # external
0000000000000000000000000000000000000000;;	    _run "-x_tcinsed_ml" # external
0000000000000000000000000000000000000000;;	elif [[ "x$@" = "x-h" || "x$@" = "x-?" ]]; then
0000000000000000000000000000000000000000;;	    cat <<EOF
0000000000000000000000000000000000000000;;	Usage: tests.sh [options...]
0000000000000000000000000000000000000000;;	  -A run through all tests (regular, external, codecgen)
0000000000000000000000000000000000000000;;	  -Z regular tests only 
0000000000000000000000000000000000000000;;	  -F regular tests only (without fastpath, so they run quickly)
0000000000000000000000000000000000000000;;	  -C codecgen only 
0000000000000000000000000000000000000000;;	  -X external only 
0000000000000000000000000000000000000000;;	  -h show help (usage)
0000000000000000000000000000000000000000;;	  -? same as -h
0000000000000000000000000000000000000000;;	  (no options) 
0000000000000000000000000000000000000000;;	      same as -A
0000000000000000000000000000000000000000;;	  (unrecognized options)
0000000000000000000000000000000000000000;;	      just pass on the options from the command line 
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	else
0000000000000000000000000000000000000000;;	    _run "$@"
0000000000000000000000000000000000000000;;	fi
