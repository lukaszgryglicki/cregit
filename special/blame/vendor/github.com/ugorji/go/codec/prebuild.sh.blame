0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# _needgen is a helper function to tell if we need to generate files for msgp, codecgen.
0000000000000000000000000000000000000000;;	_needgen() {
0000000000000000000000000000000000000000;;	    local a="$1"
0000000000000000000000000000000000000000;;	    zneedgen=0
0000000000000000000000000000000000000000;;	    if [[ ! -e "$a" ]]
0000000000000000000000000000000000000000;;	    then
0000000000000000000000000000000000000000;;	        zneedgen=1
0000000000000000000000000000000000000000;;	        echo 1
0000000000000000000000000000000000000000;;	        return 0
0000000000000000000000000000000000000000;;	    fi 
0000000000000000000000000000000000000000;;	    for i in `ls -1 *.go.tmpl gen.go values_test.go`
0000000000000000000000000000000000000000;;	    do
0000000000000000000000000000000000000000;;	        if [[ "$a" -ot "$i" ]]
0000000000000000000000000000000000000000;;	        then
0000000000000000000000000000000000000000;;	            zneedgen=1
0000000000000000000000000000000000000000;;	            echo 1
0000000000000000000000000000000000000000;;	            return 0
0000000000000000000000000000000000000000;;	        fi 
0000000000000000000000000000000000000000;;	    done 
0000000000000000000000000000000000000000;;	    echo 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# _build generates fast-path.go and gen-helper.go.
0000000000000000000000000000000000000000;;	# 
0000000000000000000000000000000000000000;;	# It is needed because there is some dependency between the generated code
0000000000000000000000000000000000000000;;	# and the other classes. Consequently, we have to totally remove the 
0000000000000000000000000000000000000000;;	# generated files and put stubs in place, before calling "go run" again
0000000000000000000000000000000000000000;;	# to recreate them.
0000000000000000000000000000000000000000;;	_build() {
0000000000000000000000000000000000000000;;	    if ! [[ "${zforce}" == "1" ||
0000000000000000000000000000000000000000;;	                "1" == $( _needgen "fast-path.generated.go" ) ||
0000000000000000000000000000000000000000;;	                "1" == $( _needgen "gen-helper.generated.go" ) ||
0000000000000000000000000000000000000000;;	                "1" == $( _needgen "gen.generated.go" ) ||
0000000000000000000000000000000000000000;;	                1 == 0 ]]
0000000000000000000000000000000000000000;;	    then
0000000000000000000000000000000000000000;;	        return 0
0000000000000000000000000000000000000000;;	    fi 
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	   # echo "Running prebuild"
0000000000000000000000000000000000000000;;	    if [ "${zbak}" == "1" ] 
0000000000000000000000000000000000000000;;	    then
0000000000000000000000000000000000000000;;	        # echo "Backing up old generated files"
0000000000000000000000000000000000000000;;	        _zts=`date '+%m%d%Y_%H%M%S'`
0000000000000000000000000000000000000000;;	        _gg=".generated.go"
0000000000000000000000000000000000000000;;	        [ -e "gen-helper${_gg}" ] && mv gen-helper${_gg} gen-helper${_gg}__${_zts}.bak
0000000000000000000000000000000000000000;;	        [ -e "fast-path${_gg}" ] && mv fast-path${_gg} fast-path${_gg}__${_zts}.bak
0000000000000000000000000000000000000000;;	        # [ -e "safe${_gg}" ] && mv safe${_gg} safe${_gg}__${_zts}.bak
0000000000000000000000000000000000000000;;	        # [ -e "unsafe${_gg}" ] && mv unsafe${_gg} unsafe${_gg}__${_zts}.bak
0000000000000000000000000000000000000000;;	    else 
0000000000000000000000000000000000000000;;	        rm -f fast-path.generated.go gen.generated.go gen-helper.generated.go \
0000000000000000000000000000000000000000;;	           *safe.generated.go *_generated_test.go *.generated_ffjson_expose.go
0000000000000000000000000000000000000000;;	    fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    cat > gen.generated.go <<EOF
0000000000000000000000000000000000000000;;	// Copyright (c) 2012-2015 Ugorji Nwoke. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a MIT license found in the LICENSE file.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package codec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DO NOT EDIT. THIS FILE IS AUTO-GENERATED FROM gen-dec-(map|array).go.tmpl
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const genDecMapTmpl = \`
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    cat >> gen.generated.go < gen-dec-map.go.tmpl
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    cat >> gen.generated.go <<EOF
0000000000000000000000000000000000000000;;	\`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const genDecListTmpl = \`
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    cat >> gen.generated.go < gen-dec-array.go.tmpl
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    cat >> gen.generated.go <<EOF
0000000000000000000000000000000000000000;;	\`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    cat > gen-from-tmpl.codec.generated.go <<EOF
0000000000000000000000000000000000000000;;	package codec 
0000000000000000000000000000000000000000;;	import "io"
0000000000000000000000000000000000000000;;	func GenInternalGoFile(r io.Reader, w io.Writer, safe bool) error {
0000000000000000000000000000000000000000;;	return genInternalGoFile(r, w, safe)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	    
0000000000000000000000000000000000000000;;	    cat > gen-from-tmpl.generated.go <<EOF
0000000000000000000000000000000000000000;;	//+build ignore
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//import "flag"
0000000000000000000000000000000000000000;;	import "ugorji.net/codec"
0000000000000000000000000000000000000000;;	import "os"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func run(fnameIn, fnameOut string, safe bool) {
0000000000000000000000000000000000000000;;	fin, err := os.Open(fnameIn)
0000000000000000000000000000000000000000;;	if err != nil { panic(err) }
0000000000000000000000000000000000000000;;	defer fin.Close()
0000000000000000000000000000000000000000;;	fout, err := os.Create(fnameOut)
0000000000000000000000000000000000000000;;	if err != nil { panic(err) }
0000000000000000000000000000000000000000;;	defer fout.Close()
0000000000000000000000000000000000000000;;	err = codec.GenInternalGoFile(fin, fout, safe)
0000000000000000000000000000000000000000;;	if err != nil { panic(err) }
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func main() {
0000000000000000000000000000000000000000;;	// do not make safe/unsafe variants. 
0000000000000000000000000000000000000000;;	// Instead, depend on escape analysis, and place string creation and usage appropriately.
0000000000000000000000000000000000000000;;	// run("unsafe.go.tmpl", "safe.generated.go", true)
0000000000000000000000000000000000000000;;	// run("unsafe.go.tmpl", "unsafe.generated.go", false)
0000000000000000000000000000000000000000;;	run("fast-path.go.tmpl", "fast-path.generated.go", false)
0000000000000000000000000000000000000000;;	run("gen-helper.go.tmpl", "gen-helper.generated.go", false)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	    go run -tags=notfastpath gen-from-tmpl.generated.go && \
0000000000000000000000000000000000000000;;	        rm -f gen-from-tmpl.*generated.go 
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	_codegenerators() {
0000000000000000000000000000000000000000;;	    if [[ $zforce == "1" || 
0000000000000000000000000000000000000000;;	                "1" == $( _needgen "values_codecgen${zsfx}" ) ||
0000000000000000000000000000000000000000;;	                "1" == $( _needgen "values_msgp${zsfx}" ) ||
0000000000000000000000000000000000000000;;	                "1" == $( _needgen "values_ffjson${zsfx}" ) ||
0000000000000000000000000000000000000000;;	                1 == 0 ]] 
0000000000000000000000000000000000000000;;	    then
0000000000000000000000000000000000000000;;	        # codecgen creates some temporary files in the directory (main, pkg).
0000000000000000000000000000000000000000;;	        # Consequently, we should start msgp and ffjson first, and also put a small time latency before
0000000000000000000000000000000000000000;;	        # starting codecgen.
0000000000000000000000000000000000000000;;	        # Without this, ffjson chokes on one of the temporary files from codecgen.
0000000000000000000000000000000000000000;;	        if [[ $zexternal == "1" ]]
0000000000000000000000000000000000000000;;	        then 
0000000000000000000000000000000000000000;;	            echo "ffjson ... " && \
0000000000000000000000000000000000000000;;	                ffjson -w values_ffjson${zsfx} $zfin &
0000000000000000000000000000000000000000;;	            zzzIdFF=$!
0000000000000000000000000000000000000000;;	            echo "msgp ... " && \
0000000000000000000000000000000000000000;;	                msgp -tests=false -o=values_msgp${zsfx} -file=$zfin &
0000000000000000000000000000000000000000;;	            zzzIdMsgp=$!
0000000000000000000000000000000000000000;;	            
0000000000000000000000000000000000000000;;	            sleep 1 # give ffjson and msgp some buffer time. see note above.
0000000000000000000000000000000000000000;;	        fi
0000000000000000000000000000000000000000;;	        
0000000000000000000000000000000000000000;;	        echo "codecgen - !unsafe ... " && \
0000000000000000000000000000000000000000;;	            codecgen -rt codecgen -t 'x,codecgen,!unsafe' -o values_codecgen${zsfx} -d 19780 $zfin &
0000000000000000000000000000000000000000;;	        zzzIdC=$!
0000000000000000000000000000000000000000;;	        echo "codecgen - unsafe ... " && \
0000000000000000000000000000000000000000;;	            codecgen  -u -rt codecgen -t 'x,codecgen,unsafe' -o values_codecgen_unsafe${zsfx} -d 19781 $zfin &
0000000000000000000000000000000000000000;;	        zzzIdCU=$!
0000000000000000000000000000000000000000;;	        wait $zzzIdC $zzzIdCU $zzzIdMsgp $zzzIdFF && \
0000000000000000000000000000000000000000;;	            # remove (M|Unm)arshalJSON implementations, so they don't conflict with encoding/json bench \
0000000000000000000000000000000000000000;;	            if [[ $zexternal == "1" ]]
0000000000000000000000000000000000000000;;	            then
0000000000000000000000000000000000000000;;	                sed -i 's+ MarshalJSON(+ _MarshalJSON(+g' values_ffjson${zsfx} && \
0000000000000000000000000000000000000000;;	                    sed -i 's+ UnmarshalJSON(+ _UnmarshalJSON(+g' values_ffjson${zsfx}
0000000000000000000000000000000000000000;;	            fi && \
0000000000000000000000000000000000000000;;	            echo "generators done!" && \
0000000000000000000000000000000000000000;;	            true
0000000000000000000000000000000000000000;;	    fi 
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# _init reads the arguments and sets up the flags
0000000000000000000000000000000000000000;;	_init() {
0000000000000000000000000000000000000000;;	OPTIND=1
0000000000000000000000000000000000000000;;	while getopts "fbx" flag
0000000000000000000000000000000000000000;;	do
0000000000000000000000000000000000000000;;	    case "x$flag" in 
0000000000000000000000000000000000000000;;	        'xf') zforce=1;;
0000000000000000000000000000000000000000;;	        'xb') zbak=1;;
0000000000000000000000000000000000000000;;	        'xx') zexternal=1;;
0000000000000000000000000000000000000000;;	        *) echo "prebuild.sh accepts [-fbx] only"; return 1;;
0000000000000000000000000000000000000000;;	    esac
0000000000000000000000000000000000000000;;	done
0000000000000000000000000000000000000000;;	shift $((OPTIND-1))
0000000000000000000000000000000000000000;;	OPTIND=1
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# main script.
0000000000000000000000000000000000000000;;	# First ensure that this is being run from the basedir (i.e. dirname of script is .)
0000000000000000000000000000000000000000;;	if [ "." = `dirname $0` ]
0000000000000000000000000000000000000000;;	then
0000000000000000000000000000000000000000;;	    zmydir=`pwd`
0000000000000000000000000000000000000000;;	    zfin="test_values.generated.go"
0000000000000000000000000000000000000000;;	    zsfx="_generated_test.go"
0000000000000000000000000000000000000000;;	    # rm -f *_generated_test.go 
0000000000000000000000000000000000000000;;	    rm -f codecgen-*.go && \
0000000000000000000000000000000000000000;;	        _init "$@" && \
0000000000000000000000000000000000000000;;	        _build && \
0000000000000000000000000000000000000000;;	        cp $zmydir/values_test.go $zmydir/$zfin && \
0000000000000000000000000000000000000000;;	        _codegenerators && \
0000000000000000000000000000000000000000;;	        echo prebuild done successfully
0000000000000000000000000000000000000000;;	    rm -f $zmydir/$zfin
0000000000000000000000000000000000000000;;	else
0000000000000000000000000000000000000000;;	    echo "Script must be run from the directory it resides in"
0000000000000000000000000000000000000000;;	fi 
0000000000000000000000000000000000000000;;	
