0000000000000000000000000000000000000000;;	# codecgen tool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Generate is given a list of *.go files to parse, and an output file (fout),
0000000000000000000000000000000000000000;;	codecgen will create an output file __file.go__ which
0000000000000000000000000000000000000000;;	contains `codec.Selfer` implementations for the named types found
0000000000000000000000000000000000000000;;	in the files parsed.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Using codecgen is very straightforward.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	**Download and install the tool**
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	`go get -u github.com/ugorji/go/codec/codecgen`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	**Run the tool on your files**
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The command line format is:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	`codecgen [options] (-o outfile) (infile ...)`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```sh
0000000000000000000000000000000000000000;;	% codecgen -?
0000000000000000000000000000000000000000;;	Usage of codecgen:
0000000000000000000000000000000000000000;;	  -c="github.com/ugorji/go/codec": codec path
0000000000000000000000000000000000000000;;	  -o="": out file
0000000000000000000000000000000000000000;;	  -r=".*": regex for type name to match
0000000000000000000000000000000000000000;;	  -nr="": regex for type name to exclude
0000000000000000000000000000000000000000;;	  -rt="": tags for go run
0000000000000000000000000000000000000000;;	  -t="": build tag to put in file
0000000000000000000000000000000000000000;;	  -u=false: Use unsafe, e.g. to avoid unnecessary allocation on []byte->string
0000000000000000000000000000000000000000;;	  -x=false: keep temp file
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	% codecgen -o values_codecgen.go values.go values2.go moretypedefs.go
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Please see the [blog article](http://ugorji.net/blog/go-codecgen)
0000000000000000000000000000000000000000;;	for more information on how to use the tool.
0000000000000000000000000000000000000000;;	
