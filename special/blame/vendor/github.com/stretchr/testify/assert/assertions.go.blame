0000000000000000000000000000000000000000;;	package assert
1a94c3b20410978e7ed06e2ef4fda76273f848ff;third_party/src/github.com/stretchr/testify/assert/assertions.go[third_party/src/github.com/stretchr/testify/assert/assertions.go][vendor/github.com/stretchr/testify/assert/assertions.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bufio"
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"math"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"regexp"
0000000000000000000000000000000000000000;;		"runtime"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;		"unicode"
0000000000000000000000000000000000000000;;		"unicode/utf8"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/davecgh/go-spew/spew"
0000000000000000000000000000000000000000;;		"github.com/pmezard/go-difflib/difflib"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestingT is an interface wrapper around *testing.T
0000000000000000000000000000000000000000;;	type TestingT interface {
0000000000000000000000000000000000000000;;		Errorf(format string, args ...interface{})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Comparison a custom function that returns true on success and false on failure
0000000000000000000000000000000000000000;;	type Comparison func() (success bool)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;		Helper functions
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ObjectsAreEqual determines if two objects are considered equal.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This function does no assertion of any kind.
0000000000000000000000000000000000000000;;	func ObjectsAreEqual(expected, actual interface{}) bool {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if expected == nil || actual == nil {
0000000000000000000000000000000000000000;;			return expected == actual
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return reflect.DeepEqual(expected, actual)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ObjectsAreEqualValues gets whether two objects are equal, or if their
0000000000000000000000000000000000000000;;	// values are equal.
0000000000000000000000000000000000000000;;	func ObjectsAreEqualValues(expected, actual interface{}) bool {
0000000000000000000000000000000000000000;;		if ObjectsAreEqual(expected, actual) {
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		actualType := reflect.TypeOf(actual)
0000000000000000000000000000000000000000;;		if actualType == nil {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		expectedValue := reflect.ValueOf(expected)
0000000000000000000000000000000000000000;;		if expectedValue.IsValid() && expectedValue.Type().ConvertibleTo(actualType) {
0000000000000000000000000000000000000000;;			// Attempt comparison after type conversion
0000000000000000000000000000000000000000;;			return reflect.DeepEqual(expectedValue.Convert(actualType).Interface(), actual)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/* CallerInfo is necessary because the assert functions use the testing object
0000000000000000000000000000000000000000;;	internally, causing it to print the file:line of the assert method, rather than where
0000000000000000000000000000000000000000;;	the problem actually occured in calling code.*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CallerInfo returns an array of strings containing the file and line number
0000000000000000000000000000000000000000;;	// of each stack frame leading from the current test to the assert call that
0000000000000000000000000000000000000000;;	// failed.
0000000000000000000000000000000000000000;;	func CallerInfo() []string {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pc := uintptr(0)
0000000000000000000000000000000000000000;;		file := ""
0000000000000000000000000000000000000000;;		line := 0
0000000000000000000000000000000000000000;;		ok := false
0000000000000000000000000000000000000000;;		name := ""
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		callers := []string{}
0000000000000000000000000000000000000000;;		for i := 0; ; i++ {
0000000000000000000000000000000000000000;;			pc, file, line, ok = runtime.Caller(i)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// This is a huge edge case, but it will panic if this is the case, see #180
0000000000000000000000000000000000000000;;			if file == "<autogenerated>" {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			parts := strings.Split(file, "/")
0000000000000000000000000000000000000000;;			dir := parts[len(parts)-2]
0000000000000000000000000000000000000000;;			file = parts[len(parts)-1]
0000000000000000000000000000000000000000;;			if (dir != "assert" && dir != "mock" && dir != "require") || file == "mock_test.go" {
0000000000000000000000000000000000000000;;				callers = append(callers, fmt.Sprintf("%s:%d", file, line))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			f := runtime.FuncForPC(pc)
0000000000000000000000000000000000000000;;			if f == nil {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			name = f.Name()
0000000000000000000000000000000000000000;;			// Drop the package
0000000000000000000000000000000000000000;;			segments := strings.Split(name, ".")
0000000000000000000000000000000000000000;;			name = segments[len(segments)-1]
0000000000000000000000000000000000000000;;			if isTest(name, "Test") ||
0000000000000000000000000000000000000000;;				isTest(name, "Benchmark") ||
0000000000000000000000000000000000000000;;				isTest(name, "Example") {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return callers
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Stolen from the `go test` tool.
0000000000000000000000000000000000000000;;	// isTest tells whether name looks like a test (or benchmark, according to prefix).
0000000000000000000000000000000000000000;;	// It is a Test (say) if there is a character after Test that is not a lower-case letter.
0000000000000000000000000000000000000000;;	// We don't want TesticularCancer.
0000000000000000000000000000000000000000;;	func isTest(name, prefix string) bool {
0000000000000000000000000000000000000000;;		if !strings.HasPrefix(name, prefix) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(name) == len(prefix) { // "Test" is ok
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		rune, _ := utf8.DecodeRuneInString(name[len(prefix):])
0000000000000000000000000000000000000000;;		return !unicode.IsLower(rune)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// getWhitespaceString returns a string that is long enough to overwrite the default
0000000000000000000000000000000000000000;;	// output from the go testing framework.
0000000000000000000000000000000000000000;;	func getWhitespaceString() string {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, file, line, ok := runtime.Caller(1)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return ""
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		parts := strings.Split(file, "/")
0000000000000000000000000000000000000000;;		file = parts[len(parts)-1]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return strings.Repeat(" ", len(fmt.Sprintf("%s:%d:      ", file, line)))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func messageFromMsgAndArgs(msgAndArgs ...interface{}) string {
0000000000000000000000000000000000000000;;		if len(msgAndArgs) == 0 || msgAndArgs == nil {
0000000000000000000000000000000000000000;;			return ""
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(msgAndArgs) == 1 {
0000000000000000000000000000000000000000;;			return msgAndArgs[0].(string)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(msgAndArgs) > 1 {
0000000000000000000000000000000000000000;;			return fmt.Sprintf(msgAndArgs[0].(string), msgAndArgs[1:]...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ""
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Indents all lines of the message by appending a number of tabs to each line, in an output format compatible with Go's
0000000000000000000000000000000000000000;;	// test printing (see inner comment for specifics)
0000000000000000000000000000000000000000;;	func indentMessageLines(message string, tabs int) string {
0000000000000000000000000000000000000000;;		outBuf := new(bytes.Buffer)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, scanner := 0, bufio.NewScanner(strings.NewReader(message)); scanner.Scan(); i++ {
0000000000000000000000000000000000000000;;			if i != 0 {
0000000000000000000000000000000000000000;;				outBuf.WriteRune('\n')
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for ii := 0; ii < tabs; ii++ {
0000000000000000000000000000000000000000;;				outBuf.WriteRune('\t')
0000000000000000000000000000000000000000;;				// Bizarrely, all lines except the first need one fewer tabs prepended, so deliberately advance the counter
0000000000000000000000000000000000000000;;				// by 1 prematurely.
0000000000000000000000000000000000000000;;				if ii == 0 && i > 0 {
0000000000000000000000000000000000000000;;					ii++
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			outBuf.WriteString(scanner.Text())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return outBuf.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fail reports a failure through
0000000000000000000000000000000000000000;;	func Fail(t TestingT, failureMessage string, msgAndArgs ...interface{}) bool {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		message := messageFromMsgAndArgs(msgAndArgs...)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errorTrace := strings.Join(CallerInfo(), "\n\r\t\t\t")
0000000000000000000000000000000000000000;;		if len(message) > 0 {
0000000000000000000000000000000000000000;;			t.Errorf("\r%s\r\tError Trace:\t%s\n"+
0000000000000000000000000000000000000000;;				"\r\tError:%s\n"+
0000000000000000000000000000000000000000;;				"\r\tMessages:\t%s\n\r",
0000000000000000000000000000000000000000;;				getWhitespaceString(),
0000000000000000000000000000000000000000;;				errorTrace,
0000000000000000000000000000000000000000;;				indentMessageLines(failureMessage, 2),
0000000000000000000000000000000000000000;;				message)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			t.Errorf("\r%s\r\tError Trace:\t%s\n"+
0000000000000000000000000000000000000000;;				"\r\tError:%s\n\r",
0000000000000000000000000000000000000000;;				getWhitespaceString(),
0000000000000000000000000000000000000000;;				errorTrace,
0000000000000000000000000000000000000000;;				indentMessageLines(failureMessage, 2))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Implements asserts that an object is implemented by the specified interface.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    assert.Implements(t, (*MyInterface)(nil), new(MyObject), "MyObject")
0000000000000000000000000000000000000000;;	func Implements(t TestingT, interfaceObject interface{}, object interface{}, msgAndArgs ...interface{}) bool {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		interfaceType := reflect.TypeOf(interfaceObject).Elem()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !reflect.TypeOf(object).Implements(interfaceType) {
0000000000000000000000000000000000000000;;			return Fail(t, fmt.Sprintf("%T must implement %v", object, interfaceType), msgAndArgs...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsType asserts that the specified objects are of the same type.
0000000000000000000000000000000000000000;;	func IsType(t TestingT, expectedType interface{}, object interface{}, msgAndArgs ...interface{}) bool {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !ObjectsAreEqual(reflect.TypeOf(object), reflect.TypeOf(expectedType)) {
0000000000000000000000000000000000000000;;			return Fail(t, fmt.Sprintf("Object expected to be of type %v, but was %v", reflect.TypeOf(expectedType), reflect.TypeOf(object)), msgAndArgs...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Equal asserts that two objects are equal.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    assert.Equal(t, 123, 123, "123 and 123 should be equal")
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns whether the assertion was successful (true) or not (false).
0000000000000000000000000000000000000000;;	func Equal(t TestingT, expected, actual interface{}, msgAndArgs ...interface{}) bool {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !ObjectsAreEqual(expected, actual) {
0000000000000000000000000000000000000000;;			diff := diff(expected, actual)
0000000000000000000000000000000000000000;;			return Fail(t, fmt.Sprintf("Not equal: %#v (expected)\n"+
0000000000000000000000000000000000000000;;				"        != %#v (actual)%s", expected, actual, diff), msgAndArgs...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EqualValues asserts that two objects are equal or convertable to the same types
0000000000000000000000000000000000000000;;	// and equal.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    assert.EqualValues(t, uint32(123), int32(123), "123 and 123 should be equal")
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns whether the assertion was successful (true) or not (false).
0000000000000000000000000000000000000000;;	func EqualValues(t TestingT, expected, actual interface{}, msgAndArgs ...interface{}) bool {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !ObjectsAreEqualValues(expected, actual) {
0000000000000000000000000000000000000000;;			return Fail(t, fmt.Sprintf("Not equal: %#v (expected)\n"+
0000000000000000000000000000000000000000;;				"        != %#v (actual)", expected, actual), msgAndArgs...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Exactly asserts that two objects are equal is value and type.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    assert.Exactly(t, int32(123), int64(123), "123 and 123 should NOT be equal")
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns whether the assertion was successful (true) or not (false).
0000000000000000000000000000000000000000;;	func Exactly(t TestingT, expected, actual interface{}, msgAndArgs ...interface{}) bool {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		aType := reflect.TypeOf(expected)
0000000000000000000000000000000000000000;;		bType := reflect.TypeOf(actual)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if aType != bType {
0000000000000000000000000000000000000000;;			return Fail(t, fmt.Sprintf("Types expected to match exactly\n\r\t%v != %v", aType, bType), msgAndArgs...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return Equal(t, expected, actual, msgAndArgs...)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NotNil asserts that the specified object is not nil.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    assert.NotNil(t, err, "err should be something")
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns whether the assertion was successful (true) or not (false).
0000000000000000000000000000000000000000;;	func NotNil(t TestingT, object interface{}, msgAndArgs ...interface{}) bool {
0000000000000000000000000000000000000000;;		if !isNil(object) {
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return Fail(t, "Expected value not to be nil.", msgAndArgs...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// isNil checks if a specified object is nil or not, without Failing.
0000000000000000000000000000000000000000;;	func isNil(object interface{}) bool {
0000000000000000000000000000000000000000;;		if object == nil {
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		value := reflect.ValueOf(object)
0000000000000000000000000000000000000000;;		kind := value.Kind()
0000000000000000000000000000000000000000;;		if kind >= reflect.Chan && kind <= reflect.Slice && value.IsNil() {
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Nil asserts that the specified object is nil.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    assert.Nil(t, err, "err should be nothing")
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns whether the assertion was successful (true) or not (false).
0000000000000000000000000000000000000000;;	func Nil(t TestingT, object interface{}, msgAndArgs ...interface{}) bool {
0000000000000000000000000000000000000000;;		if isNil(object) {
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return Fail(t, fmt.Sprintf("Expected nil, but got: %#v", object), msgAndArgs...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var numericZeros = []interface{}{
0000000000000000000000000000000000000000;;		int(0),
0000000000000000000000000000000000000000;;		int8(0),
0000000000000000000000000000000000000000;;		int16(0),
0000000000000000000000000000000000000000;;		int32(0),
0000000000000000000000000000000000000000;;		int64(0),
0000000000000000000000000000000000000000;;		uint(0),
0000000000000000000000000000000000000000;;		uint8(0),
0000000000000000000000000000000000000000;;		uint16(0),
0000000000000000000000000000000000000000;;		uint32(0),
0000000000000000000000000000000000000000;;		uint64(0),
0000000000000000000000000000000000000000;;		float32(0),
0000000000000000000000000000000000000000;;		float64(0),
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// isEmpty gets whether the specified object is considered empty or not.
0000000000000000000000000000000000000000;;	func isEmpty(object interface{}) bool {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if object == nil {
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		} else if object == "" {
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		} else if object == false {
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, v := range numericZeros {
0000000000000000000000000000000000000000;;			if object == v {
0000000000000000000000000000000000000000;;				return true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		objValue := reflect.ValueOf(object)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch objValue.Kind() {
0000000000000000000000000000000000000000;;		case reflect.Map:
0000000000000000000000000000000000000000;;			fallthrough
0000000000000000000000000000000000000000;;		case reflect.Slice, reflect.Chan:
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				return (objValue.Len() == 0)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case reflect.Ptr:
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				if objValue.IsNil() {
0000000000000000000000000000000000000000;;					return true
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				switch object.(type) {
0000000000000000000000000000000000000000;;				case *time.Time:
0000000000000000000000000000000000000000;;					return object.(*time.Time).IsZero()
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Empty asserts that the specified object is empty.  I.e. nil, "", false, 0 or either
0000000000000000000000000000000000000000;;	// a slice or a channel with len == 0.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//  assert.Empty(t, obj)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns whether the assertion was successful (true) or not (false).
0000000000000000000000000000000000000000;;	func Empty(t TestingT, object interface{}, msgAndArgs ...interface{}) bool {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pass := isEmpty(object)
0000000000000000000000000000000000000000;;		if !pass {
0000000000000000000000000000000000000000;;			Fail(t, fmt.Sprintf("Should be empty, but was %v", object), msgAndArgs...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return pass
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NotEmpty asserts that the specified object is NOT empty.  I.e. not nil, "", false, 0 or either
0000000000000000000000000000000000000000;;	// a slice or a channel with len == 0.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//  if assert.NotEmpty(t, obj) {
0000000000000000000000000000000000000000;;	//    assert.Equal(t, "two", obj[1])
0000000000000000000000000000000000000000;;	//  }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns whether the assertion was successful (true) or not (false).
0000000000000000000000000000000000000000;;	func NotEmpty(t TestingT, object interface{}, msgAndArgs ...interface{}) bool {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pass := !isEmpty(object)
0000000000000000000000000000000000000000;;		if !pass {
0000000000000000000000000000000000000000;;			Fail(t, fmt.Sprintf("Should NOT be empty, but was %v", object), msgAndArgs...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return pass
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// getLen try to get length of object.
0000000000000000000000000000000000000000;;	// return (false, 0) if impossible.
0000000000000000000000000000000000000000;;	func getLen(x interface{}) (ok bool, length int) {
0000000000000000000000000000000000000000;;		v := reflect.ValueOf(x)
0000000000000000000000000000000000000000;;		defer func() {
0000000000000000000000000000000000000000;;			if e := recover(); e != nil {
0000000000000000000000000000000000000000;;				ok = false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		return true, v.Len()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Len asserts that the specified object has specific length.
0000000000000000000000000000000000000000;;	// Len also fails if the object has a type that len() not accept.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    assert.Len(t, mySlice, 3, "The size of slice is not 3")
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns whether the assertion was successful (true) or not (false).
0000000000000000000000000000000000000000;;	func Len(t TestingT, object interface{}, length int, msgAndArgs ...interface{}) bool {
0000000000000000000000000000000000000000;;		ok, l := getLen(object)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return Fail(t, fmt.Sprintf("\"%s\" could not be applied builtin len()", object), msgAndArgs...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if l != length {
0000000000000000000000000000000000000000;;			return Fail(t, fmt.Sprintf("\"%s\" should have %d item(s), but has %d", object, length, l), msgAndArgs...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// True asserts that the specified value is true.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    assert.True(t, myBool, "myBool should be true")
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns whether the assertion was successful (true) or not (false).
0000000000000000000000000000000000000000;;	func True(t TestingT, value bool, msgAndArgs ...interface{}) bool {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if value != true {
0000000000000000000000000000000000000000;;			return Fail(t, "Should be true", msgAndArgs...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// False asserts that the specified value is false.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    assert.False(t, myBool, "myBool should be false")
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns whether the assertion was successful (true) or not (false).
0000000000000000000000000000000000000000;;	func False(t TestingT, value bool, msgAndArgs ...interface{}) bool {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if value != false {
0000000000000000000000000000000000000000;;			return Fail(t, "Should be false", msgAndArgs...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NotEqual asserts that the specified values are NOT equal.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    assert.NotEqual(t, obj1, obj2, "two objects shouldn't be equal")
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns whether the assertion was successful (true) or not (false).
0000000000000000000000000000000000000000;;	func NotEqual(t TestingT, expected, actual interface{}, msgAndArgs ...interface{}) bool {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if ObjectsAreEqual(expected, actual) {
0000000000000000000000000000000000000000;;			return Fail(t, fmt.Sprintf("Should not be: %#v\n", actual), msgAndArgs...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// containsElement try loop over the list check if the list includes the element.
0000000000000000000000000000000000000000;;	// return (false, false) if impossible.
0000000000000000000000000000000000000000;;	// return (true, false) if element was not found.
0000000000000000000000000000000000000000;;	// return (true, true) if element was found.
0000000000000000000000000000000000000000;;	func includeElement(list interface{}, element interface{}) (ok, found bool) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		listValue := reflect.ValueOf(list)
0000000000000000000000000000000000000000;;		elementValue := reflect.ValueOf(element)
0000000000000000000000000000000000000000;;		defer func() {
0000000000000000000000000000000000000000;;			if e := recover(); e != nil {
0000000000000000000000000000000000000000;;				ok = false
0000000000000000000000000000000000000000;;				found = false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if reflect.TypeOf(list).Kind() == reflect.String {
0000000000000000000000000000000000000000;;			return true, strings.Contains(listValue.String(), elementValue.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if reflect.TypeOf(list).Kind() == reflect.Map {
0000000000000000000000000000000000000000;;			mapKeys := listValue.MapKeys()
0000000000000000000000000000000000000000;;			for i := 0; i < len(mapKeys); i++ {
0000000000000000000000000000000000000000;;				if ObjectsAreEqual(mapKeys[i].Interface(), element) {
0000000000000000000000000000000000000000;;					return true, true
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return true, false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i := 0; i < listValue.Len(); i++ {
0000000000000000000000000000000000000000;;			if ObjectsAreEqual(listValue.Index(i).Interface(), element) {
0000000000000000000000000000000000000000;;				return true, true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true, false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains asserts that the specified string, list(array, slice...) or map contains the
0000000000000000000000000000000000000000;;	// specified substring or element.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    assert.Contains(t, "Hello World", "World", "But 'Hello World' does contain 'World'")
0000000000000000000000000000000000000000;;	//    assert.Contains(t, ["Hello", "World"], "World", "But ["Hello", "World"] does contain 'World'")
0000000000000000000000000000000000000000;;	//    assert.Contains(t, {"Hello": "World"}, "Hello", "But {'Hello': 'World'} does contain 'Hello'")
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns whether the assertion was successful (true) or not (false).
0000000000000000000000000000000000000000;;	func Contains(t TestingT, s, contains interface{}, msgAndArgs ...interface{}) bool {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ok, found := includeElement(s, contains)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return Fail(t, fmt.Sprintf("\"%s\" could not be applied builtin len()", s), msgAndArgs...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !found {
0000000000000000000000000000000000000000;;			return Fail(t, fmt.Sprintf("\"%s\" does not contain \"%s\"", s, contains), msgAndArgs...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NotContains asserts that the specified string, list(array, slice...) or map does NOT contain the
0000000000000000000000000000000000000000;;	// specified substring or element.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    assert.NotContains(t, "Hello World", "Earth", "But 'Hello World' does NOT contain 'Earth'")
0000000000000000000000000000000000000000;;	//    assert.NotContains(t, ["Hello", "World"], "Earth", "But ['Hello', 'World'] does NOT contain 'Earth'")
0000000000000000000000000000000000000000;;	//    assert.NotContains(t, {"Hello": "World"}, "Earth", "But {'Hello': 'World'} does NOT contain 'Earth'")
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns whether the assertion was successful (true) or not (false).
0000000000000000000000000000000000000000;;	func NotContains(t TestingT, s, contains interface{}, msgAndArgs ...interface{}) bool {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ok, found := includeElement(s, contains)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return Fail(t, fmt.Sprintf("\"%s\" could not be applied builtin len()", s), msgAndArgs...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if found {
0000000000000000000000000000000000000000;;			return Fail(t, fmt.Sprintf("\"%s\" should not contain \"%s\"", s, contains), msgAndArgs...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Condition uses a Comparison to assert a complex condition.
0000000000000000000000000000000000000000;;	func Condition(t TestingT, comp Comparison, msgAndArgs ...interface{}) bool {
0000000000000000000000000000000000000000;;		result := comp()
0000000000000000000000000000000000000000;;		if !result {
0000000000000000000000000000000000000000;;			Fail(t, "Condition failed!", msgAndArgs...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return result
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PanicTestFunc defines a func that should be passed to the assert.Panics and assert.NotPanics
0000000000000000000000000000000000000000;;	// methods, and represents a simple func that takes no arguments, and returns nothing.
0000000000000000000000000000000000000000;;	type PanicTestFunc func()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// didPanic returns true if the function passed to it panics. Otherwise, it returns false.
0000000000000000000000000000000000000000;;	func didPanic(f PanicTestFunc) (bool, interface{}) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		didPanic := false
0000000000000000000000000000000000000000;;		var message interface{}
0000000000000000000000000000000000000000;;		func() {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			defer func() {
0000000000000000000000000000000000000000;;				if message = recover(); message != nil {
0000000000000000000000000000000000000000;;					didPanic = true
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// call the target function
0000000000000000000000000000000000000000;;			f()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return didPanic, message
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Panics asserts that the code inside the specified PanicTestFunc panics.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   assert.Panics(t, func(){
0000000000000000000000000000000000000000;;	//     GoCrazy()
0000000000000000000000000000000000000000;;	//   }, "Calling GoCrazy() should panic")
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns whether the assertion was successful (true) or not (false).
0000000000000000000000000000000000000000;;	func Panics(t TestingT, f PanicTestFunc, msgAndArgs ...interface{}) bool {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if funcDidPanic, panicValue := didPanic(f); !funcDidPanic {
0000000000000000000000000000000000000000;;			return Fail(t, fmt.Sprintf("func %#v should panic\n\r\tPanic value:\t%v", f, panicValue), msgAndArgs...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NotPanics asserts that the code inside the specified PanicTestFunc does NOT panic.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   assert.NotPanics(t, func(){
0000000000000000000000000000000000000000;;	//     RemainCalm()
0000000000000000000000000000000000000000;;	//   }, "Calling RemainCalm() should NOT panic")
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns whether the assertion was successful (true) or not (false).
0000000000000000000000000000000000000000;;	func NotPanics(t TestingT, f PanicTestFunc, msgAndArgs ...interface{}) bool {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if funcDidPanic, panicValue := didPanic(f); funcDidPanic {
0000000000000000000000000000000000000000;;			return Fail(t, fmt.Sprintf("func %#v should not panic\n\r\tPanic value:\t%v", f, panicValue), msgAndArgs...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithinDuration asserts that the two times are within duration delta of each other.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   assert.WithinDuration(t, time.Now(), time.Now(), 10*time.Second, "The difference should not be more than 10s")
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns whether the assertion was successful (true) or not (false).
0000000000000000000000000000000000000000;;	func WithinDuration(t TestingT, expected, actual time.Time, delta time.Duration, msgAndArgs ...interface{}) bool {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		dt := expected.Sub(actual)
0000000000000000000000000000000000000000;;		if dt < -delta || dt > delta {
0000000000000000000000000000000000000000;;			return Fail(t, fmt.Sprintf("Max difference between %v and %v allowed is %v, but difference was %v", expected, actual, delta, dt), msgAndArgs...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func toFloat(x interface{}) (float64, bool) {
0000000000000000000000000000000000000000;;		var xf float64
0000000000000000000000000000000000000000;;		xok := true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch xn := x.(type) {
0000000000000000000000000000000000000000;;		case uint8:
0000000000000000000000000000000000000000;;			xf = float64(xn)
0000000000000000000000000000000000000000;;		case uint16:
0000000000000000000000000000000000000000;;			xf = float64(xn)
0000000000000000000000000000000000000000;;		case uint32:
0000000000000000000000000000000000000000;;			xf = float64(xn)
0000000000000000000000000000000000000000;;		case uint64:
0000000000000000000000000000000000000000;;			xf = float64(xn)
0000000000000000000000000000000000000000;;		case int:
0000000000000000000000000000000000000000;;			xf = float64(xn)
0000000000000000000000000000000000000000;;		case int8:
0000000000000000000000000000000000000000;;			xf = float64(xn)
0000000000000000000000000000000000000000;;		case int16:
0000000000000000000000000000000000000000;;			xf = float64(xn)
0000000000000000000000000000000000000000;;		case int32:
0000000000000000000000000000000000000000;;			xf = float64(xn)
0000000000000000000000000000000000000000;;		case int64:
0000000000000000000000000000000000000000;;			xf = float64(xn)
0000000000000000000000000000000000000000;;		case float32:
0000000000000000000000000000000000000000;;			xf = float64(xn)
0000000000000000000000000000000000000000;;		case float64:
0000000000000000000000000000000000000000;;			xf = float64(xn)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			xok = false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return xf, xok
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InDelta asserts that the two numerals are within delta of each other.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// 	 assert.InDelta(t, math.Pi, (22 / 7.0), 0.01)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns whether the assertion was successful (true) or not (false).
0000000000000000000000000000000000000000;;	func InDelta(t TestingT, expected, actual interface{}, delta float64, msgAndArgs ...interface{}) bool {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		af, aok := toFloat(expected)
0000000000000000000000000000000000000000;;		bf, bok := toFloat(actual)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !aok || !bok {
0000000000000000000000000000000000000000;;			return Fail(t, fmt.Sprintf("Parameters must be numerical"), msgAndArgs...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if math.IsNaN(af) {
0000000000000000000000000000000000000000;;			return Fail(t, fmt.Sprintf("Actual must not be NaN"), msgAndArgs...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if math.IsNaN(bf) {
0000000000000000000000000000000000000000;;			return Fail(t, fmt.Sprintf("Expected %v with delta %v, but was NaN", expected, delta), msgAndArgs...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		dt := af - bf
0000000000000000000000000000000000000000;;		if dt < -delta || dt > delta {
0000000000000000000000000000000000000000;;			return Fail(t, fmt.Sprintf("Max difference between %v and %v allowed is %v, but difference was %v", expected, actual, delta, dt), msgAndArgs...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InDeltaSlice is the same as InDelta, except it compares two slices.
0000000000000000000000000000000000000000;;	func InDeltaSlice(t TestingT, expected, actual interface{}, delta float64, msgAndArgs ...interface{}) bool {
0000000000000000000000000000000000000000;;		if expected == nil || actual == nil ||
0000000000000000000000000000000000000000;;			reflect.TypeOf(actual).Kind() != reflect.Slice ||
0000000000000000000000000000000000000000;;			reflect.TypeOf(expected).Kind() != reflect.Slice {
0000000000000000000000000000000000000000;;			return Fail(t, fmt.Sprintf("Parameters must be slice"), msgAndArgs...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		actualSlice := reflect.ValueOf(actual)
0000000000000000000000000000000000000000;;		expectedSlice := reflect.ValueOf(expected)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i := 0; i < actualSlice.Len(); i++ {
0000000000000000000000000000000000000000;;			result := InDelta(t, actualSlice.Index(i).Interface(), expectedSlice.Index(i).Interface(), delta)
0000000000000000000000000000000000000000;;			if !result {
0000000000000000000000000000000000000000;;				return result
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// min(|expected|, |actual|) * epsilon
0000000000000000000000000000000000000000;;	func calcEpsilonDelta(expected, actual interface{}, epsilon float64) float64 {
0000000000000000000000000000000000000000;;		af, aok := toFloat(expected)
0000000000000000000000000000000000000000;;		bf, bok := toFloat(actual)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !aok || !bok {
0000000000000000000000000000000000000000;;			// invalid input
0000000000000000000000000000000000000000;;			return 0
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if af < 0 {
0000000000000000000000000000000000000000;;			af = -af
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if bf < 0 {
0000000000000000000000000000000000000000;;			bf = -bf
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var delta float64
0000000000000000000000000000000000000000;;		if af < bf {
0000000000000000000000000000000000000000;;			delta = af * epsilon
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			delta = bf * epsilon
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return delta
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InEpsilon asserts that expected and actual have a relative error less than epsilon
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns whether the assertion was successful (true) or not (false).
0000000000000000000000000000000000000000;;	func InEpsilon(t TestingT, expected, actual interface{}, epsilon float64, msgAndArgs ...interface{}) bool {
0000000000000000000000000000000000000000;;		delta := calcEpsilonDelta(expected, actual, epsilon)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return InDelta(t, expected, actual, delta, msgAndArgs...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InEpsilonSlice is the same as InEpsilon, except it compares two slices.
0000000000000000000000000000000000000000;;	func InEpsilonSlice(t TestingT, expected, actual interface{}, delta float64, msgAndArgs ...interface{}) bool {
0000000000000000000000000000000000000000;;		if expected == nil || actual == nil ||
0000000000000000000000000000000000000000;;			reflect.TypeOf(actual).Kind() != reflect.Slice ||
0000000000000000000000000000000000000000;;			reflect.TypeOf(expected).Kind() != reflect.Slice {
0000000000000000000000000000000000000000;;			return Fail(t, fmt.Sprintf("Parameters must be slice"), msgAndArgs...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		actualSlice := reflect.ValueOf(actual)
0000000000000000000000000000000000000000;;		expectedSlice := reflect.ValueOf(expected)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i := 0; i < actualSlice.Len(); i++ {
0000000000000000000000000000000000000000;;			result := InEpsilon(t, actualSlice.Index(i).Interface(), expectedSlice.Index(i).Interface(), delta)
0000000000000000000000000000000000000000;;			if !result {
0000000000000000000000000000000000000000;;				return result
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;		Errors
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NoError asserts that a function returned no error (i.e. `nil`).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   actualObj, err := SomeFunction()
0000000000000000000000000000000000000000;;	//   if assert.NoError(t, err) {
0000000000000000000000000000000000000000;;	//	   assert.Equal(t, actualObj, expectedObj)
0000000000000000000000000000000000000000;;	//   }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns whether the assertion was successful (true) or not (false).
0000000000000000000000000000000000000000;;	func NoError(t TestingT, err error, msgAndArgs ...interface{}) bool {
0000000000000000000000000000000000000000;;		if isNil(err) {
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return Fail(t, fmt.Sprintf("Received unexpected error %q", err), msgAndArgs...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Error asserts that a function returned an error (i.e. not `nil`).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   actualObj, err := SomeFunction()
0000000000000000000000000000000000000000;;	//   if assert.Error(t, err, "An error was expected") {
0000000000000000000000000000000000000000;;	//	   assert.Equal(t, err, expectedError)
0000000000000000000000000000000000000000;;	//   }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns whether the assertion was successful (true) or not (false).
0000000000000000000000000000000000000000;;	func Error(t TestingT, err error, msgAndArgs ...interface{}) bool {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		message := messageFromMsgAndArgs(msgAndArgs...)
0000000000000000000000000000000000000000;;		return NotNil(t, err, "An error is expected but got nil. %s", message)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EqualError asserts that a function returned an error (i.e. not `nil`)
0000000000000000000000000000000000000000;;	// and that it is equal to the provided error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   actualObj, err := SomeFunction()
0000000000000000000000000000000000000000;;	//   if assert.Error(t, err, "An error was expected") {
0000000000000000000000000000000000000000;;	//	   assert.Equal(t, err, expectedError)
0000000000000000000000000000000000000000;;	//   }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns whether the assertion was successful (true) or not (false).
0000000000000000000000000000000000000000;;	func EqualError(t TestingT, theError error, errString string, msgAndArgs ...interface{}) bool {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		message := messageFromMsgAndArgs(msgAndArgs...)
0000000000000000000000000000000000000000;;		if !NotNil(t, theError, "An error is expected but got nil. %s", message) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s := "An error with value \"%s\" is expected but got \"%s\". %s"
0000000000000000000000000000000000000000;;		return Equal(t, errString, theError.Error(),
0000000000000000000000000000000000000000;;			s, errString, theError.Error(), message)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// matchRegexp return true if a specified regexp matches a string.
0000000000000000000000000000000000000000;;	func matchRegexp(rx interface{}, str interface{}) bool {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var r *regexp.Regexp
0000000000000000000000000000000000000000;;		if rr, ok := rx.(*regexp.Regexp); ok {
0000000000000000000000000000000000000000;;			r = rr
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			r = regexp.MustCompile(fmt.Sprint(rx))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return (r.FindStringIndex(fmt.Sprint(str)) != nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Regexp asserts that a specified regexp matches a string.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//  assert.Regexp(t, regexp.MustCompile("start"), "it's starting")
0000000000000000000000000000000000000000;;	//  assert.Regexp(t, "start...$", "it's not starting")
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns whether the assertion was successful (true) or not (false).
0000000000000000000000000000000000000000;;	func Regexp(t TestingT, rx interface{}, str interface{}, msgAndArgs ...interface{}) bool {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		match := matchRegexp(rx, str)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !match {
0000000000000000000000000000000000000000;;			Fail(t, fmt.Sprintf("Expect \"%v\" to match \"%v\"", str, rx), msgAndArgs...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return match
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NotRegexp asserts that a specified regexp does not match a string.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//  assert.NotRegexp(t, regexp.MustCompile("starts"), "it's starting")
0000000000000000000000000000000000000000;;	//  assert.NotRegexp(t, "^start", "it's not starting")
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns whether the assertion was successful (true) or not (false).
0000000000000000000000000000000000000000;;	func NotRegexp(t TestingT, rx interface{}, str interface{}, msgAndArgs ...interface{}) bool {
0000000000000000000000000000000000000000;;		match := matchRegexp(rx, str)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if match {
0000000000000000000000000000000000000000;;			Fail(t, fmt.Sprintf("Expect \"%v\" to NOT match \"%v\"", str, rx), msgAndArgs...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return !match
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Zero asserts that i is the zero value for its type and returns the truth.
0000000000000000000000000000000000000000;;	func Zero(t TestingT, i interface{}, msgAndArgs ...interface{}) bool {
0000000000000000000000000000000000000000;;		if i != nil && !reflect.DeepEqual(i, reflect.Zero(reflect.TypeOf(i)).Interface()) {
0000000000000000000000000000000000000000;;			return Fail(t, fmt.Sprintf("Should be zero, but was %v", i), msgAndArgs...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NotZero asserts that i is not the zero value for its type and returns the truth.
0000000000000000000000000000000000000000;;	func NotZero(t TestingT, i interface{}, msgAndArgs ...interface{}) bool {
0000000000000000000000000000000000000000;;		if i == nil || reflect.DeepEqual(i, reflect.Zero(reflect.TypeOf(i)).Interface()) {
0000000000000000000000000000000000000000;;			return Fail(t, fmt.Sprintf("Should not be zero, but was %v", i), msgAndArgs...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// JSONEq asserts that two JSON strings are equivalent.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//  assert.JSONEq(t, `{"hello": "world", "foo": "bar"}`, `{"foo": "bar", "hello": "world"}`)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns whether the assertion was successful (true) or not (false).
0000000000000000000000000000000000000000;;	func JSONEq(t TestingT, expected string, actual string, msgAndArgs ...interface{}) bool {
0000000000000000000000000000000000000000;;		var expectedJSONAsInterface, actualJSONAsInterface interface{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := json.Unmarshal([]byte(expected), &expectedJSONAsInterface); err != nil {
0000000000000000000000000000000000000000;;			return Fail(t, fmt.Sprintf("Expected value ('%s') is not valid json.\nJSON parsing error: '%s'", expected, err.Error()), msgAndArgs...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := json.Unmarshal([]byte(actual), &actualJSONAsInterface); err != nil {
0000000000000000000000000000000000000000;;			return Fail(t, fmt.Sprintf("Input ('%s') needs to be valid json.\nJSON parsing error: '%s'", actual, err.Error()), msgAndArgs...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return Equal(t, expectedJSONAsInterface, actualJSONAsInterface, msgAndArgs...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func typeAndKind(v interface{}) (reflect.Type, reflect.Kind) {
0000000000000000000000000000000000000000;;		t := reflect.TypeOf(v)
0000000000000000000000000000000000000000;;		k := t.Kind()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if k == reflect.Ptr {
0000000000000000000000000000000000000000;;			t = t.Elem()
0000000000000000000000000000000000000000;;			k = t.Kind()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return t, k
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// diff returns a diff of both values as long as both are of the same type and
0000000000000000000000000000000000000000;;	// are a struct, map, slice or array. Otherwise it returns an empty string.
0000000000000000000000000000000000000000;;	func diff(expected interface{}, actual interface{}) string {
0000000000000000000000000000000000000000;;		if expected == nil || actual == nil {
0000000000000000000000000000000000000000;;			return ""
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		et, ek := typeAndKind(expected)
0000000000000000000000000000000000000000;;		at, _ := typeAndKind(actual)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if et != at {
0000000000000000000000000000000000000000;;			return ""
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if ek != reflect.Struct && ek != reflect.Map && ek != reflect.Slice && ek != reflect.Array {
0000000000000000000000000000000000000000;;			return ""
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		spew.Config.SortKeys = true
0000000000000000000000000000000000000000;;		e := spew.Sdump(expected)
0000000000000000000000000000000000000000;;		a := spew.Sdump(actual)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		diff, _ := difflib.GetUnifiedDiffString(difflib.UnifiedDiff{
0000000000000000000000000000000000000000;;			A:        difflib.SplitLines(e),
0000000000000000000000000000000000000000;;			B:        difflib.SplitLines(a),
0000000000000000000000000000000000000000;;			FromFile: "Expected",
0000000000000000000000000000000000000000;;			FromDate: "",
0000000000000000000000000000000000000000;;			ToFile:   "Actual",
0000000000000000000000000000000000000000;;			ToDate:   "",
0000000000000000000000000000000000000000;;			Context:  1,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return "\n\nDiff:\n" + diff
0000000000000000000000000000000000000000;;	}
