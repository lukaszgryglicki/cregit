0000000000000000000000000000000000000000;;	package assert
b8afb3b69b1f3498b6aaeb3117617fa5bef8af8a;Godeps/_workspace/src/github.com/stretchr/testify/assert/http_assertions.go[Godeps/_workspace/src/github.com/stretchr/testify/assert/http_assertions.go][vendor/github.com/stretchr/testify/assert/http_assertions.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/http/httptest"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// httpCode is a helper that returns HTTP code of the response. It returns -1
0000000000000000000000000000000000000000;;	// if building a new request fails.
0000000000000000000000000000000000000000;;	func httpCode(handler http.HandlerFunc, method, url string, values url.Values) int {
0000000000000000000000000000000000000000;;		w := httptest.NewRecorder()
0000000000000000000000000000000000000000;;		req, err := http.NewRequest(method, url+"?"+values.Encode(), nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return -1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		handler(w, req)
0000000000000000000000000000000000000000;;		return w.Code
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HTTPSuccess asserts that a specified handler returns a success status code.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//  assert.HTTPSuccess(t, myHandler, "POST", "http://www.google.com", nil)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns whether the assertion was successful (true) or not (false).
0000000000000000000000000000000000000000;;	func HTTPSuccess(t TestingT, handler http.HandlerFunc, method, url string, values url.Values) bool {
0000000000000000000000000000000000000000;;		code := httpCode(handler, method, url, values)
0000000000000000000000000000000000000000;;		if code == -1 {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return code >= http.StatusOK && code <= http.StatusPartialContent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HTTPRedirect asserts that a specified handler returns a redirect status code.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//  assert.HTTPRedirect(t, myHandler, "GET", "/a/b/c", url.Values{"a": []string{"b", "c"}}
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns whether the assertion was successful (true) or not (false).
0000000000000000000000000000000000000000;;	func HTTPRedirect(t TestingT, handler http.HandlerFunc, method, url string, values url.Values) bool {
0000000000000000000000000000000000000000;;		code := httpCode(handler, method, url, values)
0000000000000000000000000000000000000000;;		if code == -1 {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return code >= http.StatusMultipleChoices && code <= http.StatusTemporaryRedirect
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HTTPError asserts that a specified handler returns an error status code.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//  assert.HTTPError(t, myHandler, "POST", "/a/b/c", url.Values{"a": []string{"b", "c"}}
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns whether the assertion was successful (true) or not (false).
0000000000000000000000000000000000000000;;	func HTTPError(t TestingT, handler http.HandlerFunc, method, url string, values url.Values) bool {
0000000000000000000000000000000000000000;;		code := httpCode(handler, method, url, values)
0000000000000000000000000000000000000000;;		if code == -1 {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return code >= http.StatusBadRequest
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HTTPBody is a helper that returns HTTP body of the response. It returns
0000000000000000000000000000000000000000;;	// empty string if building a new request fails.
0000000000000000000000000000000000000000;;	func HTTPBody(handler http.HandlerFunc, method, url string, values url.Values) string {
0000000000000000000000000000000000000000;;		w := httptest.NewRecorder()
0000000000000000000000000000000000000000;;		req, err := http.NewRequest(method, url+"?"+values.Encode(), nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return ""
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		handler(w, req)
0000000000000000000000000000000000000000;;		return w.Body.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HTTPBodyContains asserts that a specified handler returns a
0000000000000000000000000000000000000000;;	// body that contains a string.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//  assert.HTTPBodyContains(t, myHandler, "www.google.com", nil, "I'm Feeling Lucky")
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns whether the assertion was successful (true) or not (false).
0000000000000000000000000000000000000000;;	func HTTPBodyContains(t TestingT, handler http.HandlerFunc, method, url string, values url.Values, str interface{}) bool {
0000000000000000000000000000000000000000;;		body := HTTPBody(handler, method, url, values)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		contains := strings.Contains(body, fmt.Sprint(str))
0000000000000000000000000000000000000000;;		if !contains {
0000000000000000000000000000000000000000;;			Fail(t, fmt.Sprintf("Expected response body for \"%s\" to contain \"%s\" but found \"%s\"", url+"?"+values.Encode(), str, body))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return contains
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HTTPBodyNotContains asserts that a specified handler returns a
0000000000000000000000000000000000000000;;	// body that does not contain a string.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//  assert.HTTPBodyNotContains(t, myHandler, "www.google.com", nil, "I'm Feeling Lucky")
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns whether the assertion was successful (true) or not (false).
0000000000000000000000000000000000000000;;	func HTTPBodyNotContains(t TestingT, handler http.HandlerFunc, method, url string, values url.Values, str interface{}) bool {
0000000000000000000000000000000000000000;;		body := HTTPBody(handler, method, url, values)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		contains := strings.Contains(body, fmt.Sprint(str))
0000000000000000000000000000000000000000;;		if contains {
0000000000000000000000000000000000000000;;			Fail(t, "Expected response body for %s to NOT contain \"%s\" but found \"%s\"", url+"?"+values.Encode(), str, body)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return !contains
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Assertions Wrappers
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HTTPSuccess asserts that a specified handler returns a success status code.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//  assert.HTTPSuccess(myHandler, "POST", "http://www.google.com", nil)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns whether the assertion was successful (true) or not (false).
0000000000000000000000000000000000000000;;	func (a *Assertions) HTTPSuccess(handler http.HandlerFunc, method, url string, values url.Values) bool {
0000000000000000000000000000000000000000;;		return HTTPSuccess(a.t, handler, method, url, values)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HTTPRedirect asserts that a specified handler returns a redirect status code.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//  assert.HTTPRedirect(myHandler, "GET", "/a/b/c", url.Values{"a": []string{"b", "c"}}
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns whether the assertion was successful (true) or not (false).
0000000000000000000000000000000000000000;;	func (a *Assertions) HTTPRedirect(handler http.HandlerFunc, method, url string, values url.Values) bool {
0000000000000000000000000000000000000000;;		return HTTPRedirect(a.t, handler, method, url, values)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HTTPError asserts that a specified handler returns an error status code.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//  assert.HTTPError(myHandler, "POST", "/a/b/c", url.Values{"a": []string{"b", "c"}}
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns whether the assertion was successful (true) or not (false).
0000000000000000000000000000000000000000;;	func (a *Assertions) HTTPError(handler http.HandlerFunc, method, url string, values url.Values) bool {
0000000000000000000000000000000000000000;;		return HTTPError(a.t, handler, method, url, values)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HTTPBodyContains asserts that a specified handler returns a
0000000000000000000000000000000000000000;;	// body that contains a string.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//  assert.HTTPBodyContains(t, myHandler, "www.google.com", nil, "I'm Feeling Lucky")
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns whether the assertion was successful (true) or not (false).
0000000000000000000000000000000000000000;;	func (a *Assertions) HTTPBodyContains(handler http.HandlerFunc, method, url string, values url.Values, str interface{}) bool {
0000000000000000000000000000000000000000;;		return HTTPBodyContains(a.t, handler, method, url, values, str)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HTTPBodyNotContains asserts that a specified handler returns a
0000000000000000000000000000000000000000;;	// body that does not contain a string.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//  assert.HTTPBodyNotContains(t, myHandler, "www.google.com", nil, "I'm Feeling Lucky")
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns whether the assertion was successful (true) or not (false).
0000000000000000000000000000000000000000;;	func (a *Assertions) HTTPBodyNotContains(handler http.HandlerFunc, method, url string, values url.Values, str interface{}) bool {
0000000000000000000000000000000000000000;;		return HTTPBodyNotContains(a.t, handler, method, url, values, str)
0000000000000000000000000000000000000000;;	}
