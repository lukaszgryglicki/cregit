0000000000000000000000000000000000000000;;	// Provides a system by which it is possible to mock your objects and verify calls are happening as expected.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Example Usage
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The mock package provides an object, Mock, that tracks activity on another object.  It is usually
0000000000000000000000000000000000000000;;	// embedded into a test object as shown below:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   type MyTestObject struct {
0000000000000000000000000000000000000000;;	//     // add a Mock object instance
0000000000000000000000000000000000000000;;	//     mock.Mock
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     // other fields go here as normal
0000000000000000000000000000000000000000;;	//   }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// When implementing the methods of an interface, you wire your functions up
0000000000000000000000000000000000000000;;	// to call the Mock.Called(args...) method, and return the appropriate values.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For example, to mock a method that saves the name and age of a person and returns
0000000000000000000000000000000000000000;;	// the year of their birth or an error, you might write this:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     func (o *MyTestObject) SavePersonDetails(firstname, lastname string, age int) (int, error) {
0000000000000000000000000000000000000000;;	//       args := o.Called(firstname, lastname, age)
0000000000000000000000000000000000000000;;	//       return args.Int(0), args.Error(1)
0000000000000000000000000000000000000000;;	//     }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The Int, Error and Bool methods are examples of strongly typed getters that take the argument
0000000000000000000000000000000000000000;;	// index position. Given this argument list:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     (12, true, "Something")
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// You could read them out strongly typed like this:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     args.Int(0)
0000000000000000000000000000000000000000;;	//     args.Bool(1)
0000000000000000000000000000000000000000;;	//     args.String(2)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For objects of your own type, use the generic Arguments.Get(index) method and make a type assertion:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     return args.Get(0).(*MyObject), args.Get(1).(*AnotherObjectOfMine)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This may cause a panic if the object you are getting is nil (the type assertion will fail), in those
0000000000000000000000000000000000000000;;	// cases you should check for nil first.
0000000000000000000000000000000000000000;;	package mock
