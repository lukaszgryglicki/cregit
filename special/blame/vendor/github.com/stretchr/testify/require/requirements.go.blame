0000000000000000000000000000000000000000;;	package require
657816720e1aeeb701ec9e6435b68c14821717ce;Godeps/_workspace/src/github.com/stretchr/testify/require/requirements.go[Godeps/_workspace/src/github.com/stretchr/testify/require/requirements.go][vendor/github.com/stretchr/testify/require/requirements.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TestingT interface {
0000000000000000000000000000000000000000;;		Errorf(format string, args ...interface{})
0000000000000000000000000000000000000000;;		FailNow()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fail reports a failure through
0000000000000000000000000000000000000000;;	func FailNow(t TestingT, failureMessage string, msgAndArgs ...interface{}) {
0000000000000000000000000000000000000000;;		assert.Fail(t, failureMessage, msgAndArgs...)
0000000000000000000000000000000000000000;;		t.FailNow()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Implements asserts that an object is implemented by the specified interface.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    require.Implements(t, (*MyInterface)(nil), new(MyObject), "MyObject")
0000000000000000000000000000000000000000;;	func Implements(t TestingT, interfaceObject interface{}, object interface{}, msgAndArgs ...interface{}) {
0000000000000000000000000000000000000000;;		if !assert.Implements(t, interfaceObject, object, msgAndArgs...) {
0000000000000000000000000000000000000000;;			t.FailNow()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsType asserts that the specified objects are of the same type.
0000000000000000000000000000000000000000;;	func IsType(t TestingT, expectedType interface{}, object interface{}, msgAndArgs ...interface{}) {
0000000000000000000000000000000000000000;;		if !assert.IsType(t, expectedType, object, msgAndArgs...) {
0000000000000000000000000000000000000000;;			t.FailNow()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Equal asserts that two objects are equal.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    require.Equal(t, 123, 123, "123 and 123 should be equal")
0000000000000000000000000000000000000000;;	func Equal(t TestingT, expected, actual interface{}, msgAndArgs ...interface{}) {
0000000000000000000000000000000000000000;;		if !assert.Equal(t, expected, actual, msgAndArgs...) {
0000000000000000000000000000000000000000;;			t.FailNow()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EqualValues asserts that two objects are equal or convertable to each other.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    require.EqualValues(t, uint32(123), int32(123), "123 and 123 should be equal")
0000000000000000000000000000000000000000;;	func EqualValues(t TestingT, expected, actual interface{}, msgAndArgs ...interface{}) {
0000000000000000000000000000000000000000;;		if !assert.EqualValues(t, expected, actual, msgAndArgs...) {
0000000000000000000000000000000000000000;;			t.FailNow()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Exactly asserts that two objects are equal is value and type.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    require.Exactly(t, int32(123), int64(123), "123 and 123 should NOT be equal")
0000000000000000000000000000000000000000;;	func Exactly(t TestingT, expected, actual interface{}, msgAndArgs ...interface{}) {
0000000000000000000000000000000000000000;;		if !assert.Exactly(t, expected, actual, msgAndArgs...) {
0000000000000000000000000000000000000000;;			t.FailNow()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NotNil asserts that the specified object is not nil.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    require.NotNil(t, err, "err should be something")
0000000000000000000000000000000000000000;;	func NotNil(t TestingT, object interface{}, msgAndArgs ...interface{}) {
0000000000000000000000000000000000000000;;		if !assert.NotNil(t, object, msgAndArgs...) {
0000000000000000000000000000000000000000;;			t.FailNow()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Nil asserts that the specified object is nil.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    require.Nil(t, err, "err should be nothing")
0000000000000000000000000000000000000000;;	func Nil(t TestingT, object interface{}, msgAndArgs ...interface{}) {
0000000000000000000000000000000000000000;;		if !assert.Nil(t, object, msgAndArgs...) {
0000000000000000000000000000000000000000;;			t.FailNow()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Empty asserts that the specified object is empty.  I.e. nil, "", false, 0 or either
0000000000000000000000000000000000000000;;	// a slice or a channel with len == 0.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// require.Empty(t, obj)
0000000000000000000000000000000000000000;;	func Empty(t TestingT, object interface{}, msgAndArgs ...interface{}) {
0000000000000000000000000000000000000000;;		if !assert.Empty(t, object, msgAndArgs...) {
0000000000000000000000000000000000000000;;			t.FailNow()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NotEmpty asserts that the specified object is NOT empty.  I.e. not nil, "", false, 0 or either
0000000000000000000000000000000000000000;;	// a slice or a channel with len == 0.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// require.NotEmpty(t, obj)
0000000000000000000000000000000000000000;;	// require.Equal(t, "one", obj[0])
0000000000000000000000000000000000000000;;	func NotEmpty(t TestingT, object interface{}, msgAndArgs ...interface{}) {
0000000000000000000000000000000000000000;;		if !assert.NotEmpty(t, object, msgAndArgs...) {
0000000000000000000000000000000000000000;;			t.FailNow()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Len asserts that the specified object has specific length.
0000000000000000000000000000000000000000;;	// Len also fails if the object has a type that len() not accept.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    require.Len(t, mySlice, 3, "The size of slice is not 3")
0000000000000000000000000000000000000000;;	func Len(t TestingT, object interface{}, length int, msgAndArgs ...interface{}) {
0000000000000000000000000000000000000000;;		if !assert.Len(t, object, length, msgAndArgs...) {
0000000000000000000000000000000000000000;;			t.FailNow()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// True asserts that the specified value is true.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    require.True(t, myBool, "myBool should be true")
0000000000000000000000000000000000000000;;	func True(t TestingT, value bool, msgAndArgs ...interface{}) {
0000000000000000000000000000000000000000;;		if !assert.True(t, value, msgAndArgs...) {
0000000000000000000000000000000000000000;;			t.FailNow()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// False asserts that the specified value is false.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    require.False(t, myBool, "myBool should be false")
0000000000000000000000000000000000000000;;	func False(t TestingT, value bool, msgAndArgs ...interface{}) {
0000000000000000000000000000000000000000;;		if !assert.False(t, value, msgAndArgs...) {
0000000000000000000000000000000000000000;;			t.FailNow()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NotEqual asserts that the specified values are NOT equal.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    require.NotEqual(t, obj1, obj2, "two objects shouldn't be equal")
0000000000000000000000000000000000000000;;	func NotEqual(t TestingT, expected, actual interface{}, msgAndArgs ...interface{}) {
0000000000000000000000000000000000000000;;		if !assert.NotEqual(t, expected, actual, msgAndArgs...) {
0000000000000000000000000000000000000000;;			t.FailNow()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains asserts that the specified string, list(array, slice...) or map contains the
0000000000000000000000000000000000000000;;	// specified substring or element.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    require.Contains(t, "Hello World", "World", "But 'Hello World' does contain 'World'")
0000000000000000000000000000000000000000;;	//    require.Contains(t, ["Hello", "World"], "World", "But ["Hello", "World"] does contain 'World'")
0000000000000000000000000000000000000000;;	//    require.Contains(t, {"Hello": "World"}, "Hello", "But {'Hello': 'World'} does contain 'Hello'")
0000000000000000000000000000000000000000;;	func Contains(t TestingT, s, contains interface{}, msgAndArgs ...interface{}) {
0000000000000000000000000000000000000000;;		if !assert.Contains(t, s, contains, msgAndArgs...) {
0000000000000000000000000000000000000000;;			t.FailNow()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NotContains asserts that the specified string does NOT contain the specified substring.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    require.NotContains(t, "Hello World", "Earth", "But 'Hello World' does NOT contain 'Earth'")
0000000000000000000000000000000000000000;;	func NotContains(t TestingT, s, contains interface{}, msgAndArgs ...interface{}) {
0000000000000000000000000000000000000000;;		if !assert.NotContains(t, s, contains, msgAndArgs...) {
0000000000000000000000000000000000000000;;			t.FailNow()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Condition uses a Comparison to assert a complex condition.
0000000000000000000000000000000000000000;;	func Condition(t TestingT, comp assert.Comparison, msgAndArgs ...interface{}) {
0000000000000000000000000000000000000000;;		if !assert.Condition(t, comp, msgAndArgs...) {
0000000000000000000000000000000000000000;;			t.FailNow()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Panics asserts that the code inside the specified PanicTestFunc panics.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   require.Panics(t, func(){
0000000000000000000000000000000000000000;;	//     GoCrazy()
0000000000000000000000000000000000000000;;	//   }, "Calling GoCrazy() should panic")
0000000000000000000000000000000000000000;;	func Panics(t TestingT, f assert.PanicTestFunc, msgAndArgs ...interface{}) {
0000000000000000000000000000000000000000;;		if !assert.Panics(t, f, msgAndArgs...) {
0000000000000000000000000000000000000000;;			t.FailNow()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NotPanics asserts that the code inside the specified PanicTestFunc does NOT panic.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   require.NotPanics(t, func(){
0000000000000000000000000000000000000000;;	//     RemainCalm()
0000000000000000000000000000000000000000;;	//   }, "Calling RemainCalm() should NOT panic")
0000000000000000000000000000000000000000;;	func NotPanics(t TestingT, f assert.PanicTestFunc, msgAndArgs ...interface{}) {
0000000000000000000000000000000000000000;;		if !assert.NotPanics(t, f, msgAndArgs...) {
0000000000000000000000000000000000000000;;			t.FailNow()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithinDuration asserts that the two times are within duration delta of each other.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   require.WithinDuration(t, time.Now(), time.Now(), 10*time.Second, "The difference should not be more than 10s")
0000000000000000000000000000000000000000;;	func WithinDuration(t TestingT, expected, actual time.Time, delta time.Duration, msgAndArgs ...interface{}) {
0000000000000000000000000000000000000000;;		if !assert.WithinDuration(t, expected, actual, delta, msgAndArgs...) {
0000000000000000000000000000000000000000;;			t.FailNow()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InDelta asserts that the two numerals are within delta of each other.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   require.InDelta(t, math.Pi, (22 / 7.0), 0.01)
0000000000000000000000000000000000000000;;	func InDelta(t TestingT, expected, actual interface{}, delta float64, msgAndArgs ...interface{}) {
0000000000000000000000000000000000000000;;		if !assert.InDelta(t, expected, actual, delta, msgAndArgs...) {
0000000000000000000000000000000000000000;;			t.FailNow()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InEpsilon asserts that expected and actual have a relative error less than epsilon
0000000000000000000000000000000000000000;;	func InEpsilon(t TestingT, expected, actual interface{}, epsilon float64, msgAndArgs ...interface{}) {
0000000000000000000000000000000000000000;;		if !assert.InEpsilon(t, expected, actual, epsilon, msgAndArgs...) {
0000000000000000000000000000000000000000;;			t.FailNow()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Regexp asserts that a specified regexp matches a string.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//  require.Regexp(t, regexp.MustCompile("start"), "it's starting")
0000000000000000000000000000000000000000;;	//  require.Regexp(t, "start...$", "it's not starting")
0000000000000000000000000000000000000000;;	func Regexp(t TestingT, rx interface{}, str interface{}, msgAndArgs ...interface{}) {
0000000000000000000000000000000000000000;;		if !assert.Regexp(t, rx, str, msgAndArgs...) {
0000000000000000000000000000000000000000;;			t.FailNow()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NotRegexp asserts that a specified regexp does not match a string.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//  require.NotRegexp(t, regexp.MustCompile("starts"), "it's starting")
0000000000000000000000000000000000000000;;	//  require.NotRegexp(t, "^start", "it's not starting")
0000000000000000000000000000000000000000;;	func NotRegexp(t TestingT, rx interface{}, str interface{}, msgAndArgs ...interface{}) {
0000000000000000000000000000000000000000;;		if !assert.NotRegexp(t, rx, str, msgAndArgs...) {
0000000000000000000000000000000000000000;;			t.FailNow()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// JSONEq asserts that two JSON strings are equivalent.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//  assert.JSONEq(t, `{"hello": "world", "foo": "bar"}`, `{"foo": "bar", "hello": "world"}`)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns whether the assertion was successful (true) or not (false).
0000000000000000000000000000000000000000;;	func JSONEq(t TestingT, expected string, actual string, msgAndArgs ...interface{}) {
0000000000000000000000000000000000000000;;		var expectedJSONAsInterface, actualJSONAsInterface interface{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := json.Unmarshal([]byte(expected), &expectedJSONAsInterface); err != nil {
0000000000000000000000000000000000000000;;			t.FailNow()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := json.Unmarshal([]byte(actual), &actualJSONAsInterface); err != nil {
0000000000000000000000000000000000000000;;			t.FailNow()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Equal(t, expectedJSONAsInterface, actualJSONAsInterface, msgAndArgs...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;		Errors
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NoError asserts that a function returned no error (i.e. `nil`).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   actualObj, err := SomeFunction()
0000000000000000000000000000000000000000;;	//   require.NoError(t, err)
0000000000000000000000000000000000000000;;	//   require.Equal(t, actualObj, expectedObj)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Returns whether the assertion was successful (true) or not (false).
0000000000000000000000000000000000000000;;	func NoError(t TestingT, err error, msgAndArgs ...interface{}) {
0000000000000000000000000000000000000000;;		if !assert.NoError(t, err, msgAndArgs...) {
0000000000000000000000000000000000000000;;			t.FailNow()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Error asserts that a function returned an error (i.e. not `nil`).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   actualObj, err := SomeFunction()
0000000000000000000000000000000000000000;;	//   require.Error(t, err, "An error was expected")
0000000000000000000000000000000000000000;;	//   require.Equal(t, err, expectedError)
0000000000000000000000000000000000000000;;	//   }
0000000000000000000000000000000000000000;;	func Error(t TestingT, err error, msgAndArgs ...interface{}) {
0000000000000000000000000000000000000000;;		if !assert.Error(t, err, msgAndArgs...) {
0000000000000000000000000000000000000000;;			t.FailNow()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EqualError asserts that a function returned an error (i.e. not `nil`)
0000000000000000000000000000000000000000;;	// and that it is equal to the provided error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   actualObj, err := SomeFunction()
0000000000000000000000000000000000000000;;	//   require.Error(t, err, "An error was expected")
0000000000000000000000000000000000000000;;	//   require.Equal(t, err, expectedError)
0000000000000000000000000000000000000000;;	//   }
0000000000000000000000000000000000000000;;	func EqualError(t TestingT, theError error, errString string, msgAndArgs ...interface{}) {
0000000000000000000000000000000000000000;;		if !assert.EqualError(t, theError, errString, msgAndArgs...) {
0000000000000000000000000000000000000000;;			t.FailNow()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Zero asserts that i is the zero value for its type and returns the truth.
0000000000000000000000000000000000000000;;	func Zero(t TestingT, i interface{}, msgAndArgs ...interface{}) {
0000000000000000000000000000000000000000;;		if !assert.Zero(t, i, msgAndArgs...) {
0000000000000000000000000000000000000000;;			t.FailNow()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NotZero asserts that i is not the zero value for its type and returns the truth.
0000000000000000000000000000000000000000;;	func NotZero(t TestingT, i interface{}, msgAndArgs ...interface{}) {
0000000000000000000000000000000000000000;;		if !assert.NotZero(t, i, msgAndArgs...) {
0000000000000000000000000000000000000000;;			t.FailNow()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
