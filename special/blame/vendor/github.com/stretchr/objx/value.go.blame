0000000000000000000000000000000000000000;;	package objx
3cf0baf74e8a07b2c54564947f6896a529cec0c7;third_party/src/github.com/stretchr/objx/value.go[third_party/src/github.com/stretchr/objx/value.go][vendor/github.com/stretchr/objx/value.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Value provides methods for extracting interface{} data in various
0000000000000000000000000000000000000000;;	// types.
0000000000000000000000000000000000000000;;	type Value struct {
0000000000000000000000000000000000000000;;		// data contains the raw data being managed by this Value
0000000000000000000000000000000000000000;;		data interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Data returns the raw data contained by this Value
0000000000000000000000000000000000000000;;	func (v *Value) Data() interface{} {
0000000000000000000000000000000000000000;;		return v.data
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the value always as a string
0000000000000000000000000000000000000000;;	func (v *Value) String() string {
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case v.IsStr():
0000000000000000000000000000000000000000;;			return v.Str()
0000000000000000000000000000000000000000;;		case v.IsBool():
0000000000000000000000000000000000000000;;			return strconv.FormatBool(v.Bool())
0000000000000000000000000000000000000000;;		case v.IsFloat32():
0000000000000000000000000000000000000000;;			return strconv.FormatFloat(float64(v.Float32()), 'f', -1, 32)
0000000000000000000000000000000000000000;;		case v.IsFloat64():
0000000000000000000000000000000000000000;;			return strconv.FormatFloat(v.Float64(), 'f', -1, 64)
0000000000000000000000000000000000000000;;		case v.IsInt():
0000000000000000000000000000000000000000;;			return strconv.FormatInt(int64(v.Int()), 10)
0000000000000000000000000000000000000000;;		case v.IsInt():
0000000000000000000000000000000000000000;;			return strconv.FormatInt(int64(v.Int()), 10)
0000000000000000000000000000000000000000;;		case v.IsInt8():
0000000000000000000000000000000000000000;;			return strconv.FormatInt(int64(v.Int8()), 10)
0000000000000000000000000000000000000000;;		case v.IsInt16():
0000000000000000000000000000000000000000;;			return strconv.FormatInt(int64(v.Int16()), 10)
0000000000000000000000000000000000000000;;		case v.IsInt32():
0000000000000000000000000000000000000000;;			return strconv.FormatInt(int64(v.Int32()), 10)
0000000000000000000000000000000000000000;;		case v.IsInt64():
0000000000000000000000000000000000000000;;			return strconv.FormatInt(v.Int64(), 10)
0000000000000000000000000000000000000000;;		case v.IsUint():
0000000000000000000000000000000000000000;;			return strconv.FormatUint(uint64(v.Uint()), 10)
0000000000000000000000000000000000000000;;		case v.IsUint8():
0000000000000000000000000000000000000000;;			return strconv.FormatUint(uint64(v.Uint8()), 10)
0000000000000000000000000000000000000000;;		case v.IsUint16():
0000000000000000000000000000000000000000;;			return strconv.FormatUint(uint64(v.Uint16()), 10)
0000000000000000000000000000000000000000;;		case v.IsUint32():
0000000000000000000000000000000000000000;;			return strconv.FormatUint(uint64(v.Uint32()), 10)
0000000000000000000000000000000000000000;;		case v.IsUint64():
0000000000000000000000000000000000000000;;			return strconv.FormatUint(v.Uint64(), 10)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%#v", v.Data())
0000000000000000000000000000000000000000;;	}
