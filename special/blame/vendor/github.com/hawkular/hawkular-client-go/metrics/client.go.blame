0000000000000000000000000000000000000000;;	package metrics
f1b7b8566d6c114c83a96e2bd7e7b3d31b7aaba4;Godeps/_workspace/src/github.com/hawkular/hawkular-client-go/metrics/client.go[Godeps/_workspace/src/github.com/hawkular/hawkular-client-go/metrics/client.go][vendor/github.com/hawkular/hawkular-client-go/metrics/client.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"crypto/tls"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO Instrumentation? To get statistics?
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// More detailed error
0000000000000000000000000000000000000000;;	type HawkularClientError struct {
0000000000000000000000000000000000000000;;		msg  string
0000000000000000000000000000000000000000;;		Code int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *HawkularClientError) Error() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("Hawkular returned status code %d, error message: %s", self.Code, self.msg)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Client creation and instance config
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		base_url string        = "hawkular/metrics"
0000000000000000000000000000000000000000;;		timeout  time.Duration = time.Duration(30 * time.Second)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Parameters struct {
0000000000000000000000000000000000000000;;		Tenant    string // Technically optional, but requires setting Tenant() option everytime
0000000000000000000000000000000000000000;;		Url       string
0000000000000000000000000000000000000000;;		TLSConfig *tls.Config
0000000000000000000000000000000000000000;;		Token     string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Client struct {
0000000000000000000000000000000000000000;;		Tenant string
0000000000000000000000000000000000000000;;		url    *url.URL
0000000000000000000000000000000000000000;;		client *http.Client
0000000000000000000000000000000000000000;;		Token  string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HawkularClient interface {
0000000000000000000000000000000000000000;;		Send(*http.Request) (*http.Response, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Modifiers
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Modifier func(*http.Request) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Override function to replace the Tenant (defaults to Client default)
0000000000000000000000000000000000000000;;	func Tenant(tenant string) Modifier {
0000000000000000000000000000000000000000;;		return func(r *http.Request) error {
0000000000000000000000000000000000000000;;			r.Header.Set("Hawkular-Tenant", tenant)
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Add payload to the request
0000000000000000000000000000000000000000;;	func Data(data interface{}) Modifier {
0000000000000000000000000000000000000000;;		return func(r *http.Request) error {
0000000000000000000000000000000000000000;;			jsonb, err := json.Marshal(data)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			b := bytes.NewBuffer(jsonb)
0000000000000000000000000000000000000000;;			rc := ioutil.NopCloser(b)
0000000000000000000000000000000000000000;;			r.Body = rc
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// fmt.Printf("Sending: %s\n", string(jsonb))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if b != nil {
0000000000000000000000000000000000000000;;				r.ContentLength = int64(b.Len())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *Client) Url(method string, e ...Endpoint) Modifier {
0000000000000000000000000000000000000000;;		// TODO Create composite URLs? Add().Add().. etc? Easier to modify on the fly..
0000000000000000000000000000000000000000;;		return func(r *http.Request) error {
0000000000000000000000000000000000000000;;			u := self.createUrl(e...)
0000000000000000000000000000000000000000;;			r.URL = u
0000000000000000000000000000000000000000;;			r.Method = method
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Filters for querying
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Filter func(r *http.Request)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Filters(f ...Filter) Modifier {
0000000000000000000000000000000000000000;;		return func(r *http.Request) error {
0000000000000000000000000000000000000000;;			for _, filter := range f {
0000000000000000000000000000000000000000;;				filter(r)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil // Or should filter return err?
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Add query parameters
0000000000000000000000000000000000000000;;	func Param(k string, v string) Filter {
0000000000000000000000000000000000000000;;		return func(r *http.Request) {
0000000000000000000000000000000000000000;;			q := r.URL.Query()
0000000000000000000000000000000000000000;;			q.Set(k, v)
0000000000000000000000000000000000000000;;			r.URL.RawQuery = q.Encode()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TypeFilter(t MetricType) Filter {
0000000000000000000000000000000000000000;;		return Param("type", t.shortForm())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TagsFilter(t map[string]string) Filter {
0000000000000000000000000000000000000000;;		j := tagsEncoder(t)
0000000000000000000000000000000000000000;;		return Param("tags", j)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Requires HWKMETRICS-233
0000000000000000000000000000000000000000;;	func IdFilter(regexp string) Filter {
0000000000000000000000000000000000000000;;		return Param("id", regexp)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func StartTimeFilter(startTime time.Time) Filter {
0000000000000000000000000000000000000000;;		return Param("start", strconv.Itoa(int(startTime.Unix())))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func EndTimeFilter(endTime time.Time) Filter {
0000000000000000000000000000000000000000;;		return Param("end", strconv.Itoa(int(endTime.Unix())))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func BucketsFilter(buckets int) Filter {
0000000000000000000000000000000000000000;;		return Param("buckets", strconv.Itoa(buckets))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func PercentilesFilter(percentiles []float64) Filter {
0000000000000000000000000000000000000000;;		s := make([]string, 0, len(percentiles))
0000000000000000000000000000000000000000;;		for _, v := range percentiles {
0000000000000000000000000000000000000000;;			s = append(s, fmt.Sprintf("%v", v))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		j := strings.Join(s, ",")
0000000000000000000000000000000000000000;;		return Param("percentiles", j)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The SEND method..
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *Client) createRequest() *http.Request {
0000000000000000000000000000000000000000;;		req := &http.Request{
0000000000000000000000000000000000000000;;			Proto:      "HTTP/1.1",
0000000000000000000000000000000000000000;;			ProtoMajor: 1,
0000000000000000000000000000000000000000;;			ProtoMinor: 1,
0000000000000000000000000000000000000000;;			Header:     make(http.Header),
0000000000000000000000000000000000000000;;			Host:       self.url.Host,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		req.Header.Add("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		req.Header.Add("Hawkular-Tenant", self.Tenant)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(self.Token) > 0 {
0000000000000000000000000000000000000000;;			req.Header.Add("Authorization", fmt.Sprintf("Bearer %s", self.Token))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return req
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *Client) Send(o ...Modifier) (*http.Response, error) {
0000000000000000000000000000000000000000;;		// Initialize
0000000000000000000000000000000000000000;;		r := self.createRequest()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Run all the modifiers
0000000000000000000000000000000000000000;;		for _, f := range o {
0000000000000000000000000000000000000000;;			err := f(r)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return self.client.Do(r)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Commands
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func prepend(slice []Modifier, a ...Modifier) []Modifier {
0000000000000000000000000000000000000000;;		p := make([]Modifier, 0, len(slice)+len(a))
0000000000000000000000000000000000000000;;		p = append(p, a...)
0000000000000000000000000000000000000000;;		p = append(p, slice...)
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create new Definition
0000000000000000000000000000000000000000;;	func (self *Client) Create(md MetricDefinition, o ...Modifier) (bool, error) {
0000000000000000000000000000000000000000;;		// Keep the order, add custom prepend
0000000000000000000000000000000000000000;;		o = prepend(o, self.Url("POST", TypeEndpoint(md.Type)), Data(md))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r, err := self.Send(o...)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return false, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		defer r.Body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if r.StatusCode > 399 {
0000000000000000000000000000000000000000;;			err = self.parseErrorResponse(r)
0000000000000000000000000000000000000000;;			if err, ok := err.(*HawkularClientError); ok {
0000000000000000000000000000000000000000;;				if err.Code != http.StatusConflict {
0000000000000000000000000000000000000000;;					return false, err
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					return false, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return false, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fetch definitions
0000000000000000000000000000000000000000;;	func (self *Client) Definitions(o ...Modifier) ([]*MetricDefinition, error) {
0000000000000000000000000000000000000000;;		o = prepend(o, self.Url("GET", TypeEndpoint(Generic)))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r, err := self.Send(o...)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		defer r.Body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if r.StatusCode == http.StatusOK {
0000000000000000000000000000000000000000;;			b, err := ioutil.ReadAll(r.Body)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			md := []*MetricDefinition{}
0000000000000000000000000000000000000000;;			if b != nil {
0000000000000000000000000000000000000000;;				if err = json.Unmarshal(b, &md); err != nil {
0000000000000000000000000000000000000000;;					return nil, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return md, err
0000000000000000000000000000000000000000;;		} else if r.StatusCode > 399 {
0000000000000000000000000000000000000000;;			return nil, self.parseErrorResponse(r)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Return a single definition
0000000000000000000000000000000000000000;;	func (self *Client) Definition(t MetricType, id string, o ...Modifier) (*MetricDefinition, error) {
0000000000000000000000000000000000000000;;		o = prepend(o, self.Url("GET", TypeEndpoint(t), SingleMetricEndpoint(id)))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r, err := self.Send(o...)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		defer r.Body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if r.StatusCode == http.StatusOK {
0000000000000000000000000000000000000000;;			b, err := ioutil.ReadAll(r.Body)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			md := &MetricDefinition{}
0000000000000000000000000000000000000000;;			if b != nil {
0000000000000000000000000000000000000000;;				if err = json.Unmarshal(b, md); err != nil {
0000000000000000000000000000000000000000;;					return nil, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return md, err
0000000000000000000000000000000000000000;;		} else if r.StatusCode > 399 {
0000000000000000000000000000000000000000;;			return nil, self.parseErrorResponse(r)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Update tags
0000000000000000000000000000000000000000;;	func (self *Client) UpdateTags(t MetricType, id string, tags map[string]string, o ...Modifier) error {
0000000000000000000000000000000000000000;;		o = prepend(o, self.Url("PUT", TypeEndpoint(t), SingleMetricEndpoint(id), TagEndpoint()), Data(tags))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r, err := self.Send(o...)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		defer r.Body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if r.StatusCode > 399 {
0000000000000000000000000000000000000000;;			return self.parseErrorResponse(r)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Delete given tags from the definition
0000000000000000000000000000000000000000;;	func (self *Client) DeleteTags(t MetricType, id string, tags map[string]string, o ...Modifier) error {
0000000000000000000000000000000000000000;;		o = prepend(o, self.Url("DELETE", TypeEndpoint(t), SingleMetricEndpoint(id), TagEndpoint(), TagsEndpoint(tags)))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r, err := self.Send(o...)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		defer r.Body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if r.StatusCode > 399 {
0000000000000000000000000000000000000000;;			return self.parseErrorResponse(r)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fetch metric definition tags
0000000000000000000000000000000000000000;;	func (self *Client) Tags(t MetricType, id string, o ...Modifier) (map[string]string, error) {
0000000000000000000000000000000000000000;;		o = prepend(o, self.Url("GET", TypeEndpoint(t), SingleMetricEndpoint(id), TagEndpoint()))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r, err := self.Send(o...)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		defer r.Body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if r.StatusCode == http.StatusOK {
0000000000000000000000000000000000000000;;			b, err := ioutil.ReadAll(r.Body)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			tags := make(map[string]string)
0000000000000000000000000000000000000000;;			if b != nil {
0000000000000000000000000000000000000000;;				if err = json.Unmarshal(b, &tags); err != nil {
0000000000000000000000000000000000000000;;					return nil, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return tags, nil
0000000000000000000000000000000000000000;;		} else if r.StatusCode > 399 {
0000000000000000000000000000000000000000;;			return nil, self.parseErrorResponse(r)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Write datapoints to the server
0000000000000000000000000000000000000000;;	func (self *Client) Write(metrics []MetricHeader, o ...Modifier) error {
0000000000000000000000000000000000000000;;		if len(metrics) > 0 {
0000000000000000000000000000000000000000;;			mHs := make(map[MetricType][]MetricHeader)
0000000000000000000000000000000000000000;;			for _, m := range metrics {
0000000000000000000000000000000000000000;;				if _, found := mHs[m.Type]; !found {
0000000000000000000000000000000000000000;;					mHs[m.Type] = make([]MetricHeader, 0, 1)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				mHs[m.Type] = append(mHs[m.Type], m)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			wg := &sync.WaitGroup{}
0000000000000000000000000000000000000000;;			errorsChan := make(chan error, len(mHs))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for k, v := range mHs {
0000000000000000000000000000000000000000;;				wg.Add(1)
0000000000000000000000000000000000000000;;				go func(k MetricType, v []MetricHeader) {
0000000000000000000000000000000000000000;;					defer wg.Done()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					// Should be sorted and splitted by type & tenant..
0000000000000000000000000000000000000000;;					on := o
0000000000000000000000000000000000000000;;					on = prepend(on, self.Url("POST", TypeEndpoint(k), DataEndpoint()), Data(v))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					r, err := self.Send(on...)
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						errorsChan <- err
0000000000000000000000000000000000000000;;						return
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					defer r.Body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					if r.StatusCode > 399 {
0000000000000000000000000000000000000000;;						errorsChan <- self.parseErrorResponse(r)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}(k, v)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			wg.Wait()
0000000000000000000000000000000000000000;;			select {
0000000000000000000000000000000000000000;;			case err, ok := <-errorsChan:
0000000000000000000000000000000000000000;;				if ok {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				// If channel is closed, we're done
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				// Nothing to do
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Read data from the server
0000000000000000000000000000000000000000;;	func (self *Client) ReadMetric(t MetricType, id string, o ...Modifier) ([]*Datapoint, error) {
0000000000000000000000000000000000000000;;		o = prepend(o, self.Url("GET", TypeEndpoint(t), SingleMetricEndpoint(id), DataEndpoint()))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r, err := self.Send(o...)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		defer r.Body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if r.StatusCode == http.StatusOK {
0000000000000000000000000000000000000000;;			b, err := ioutil.ReadAll(r.Body)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Check for GaugeBucketpoint and so on for the rest.. uh
0000000000000000000000000000000000000000;;			dp := []*Datapoint{}
0000000000000000000000000000000000000000;;			if b != nil {
0000000000000000000000000000000000000000;;				if err = json.Unmarshal(b, &dp); err != nil {
0000000000000000000000000000000000000000;;					return nil, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return dp, nil
0000000000000000000000000000000000000000;;		} else if r.StatusCode > 399 {
0000000000000000000000000000000000000000;;			return nil, self.parseErrorResponse(r)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO ReadMetrics should be equal also, to read new tagsFilter aggregation..
0000000000000000000000000000000000000000;;	func (self *Client) ReadBuckets(t MetricType, o ...Modifier) ([]*Bucketpoint, error) {
0000000000000000000000000000000000000000;;		o = prepend(o, self.Url("GET", TypeEndpoint(t), DataEndpoint()))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r, err := self.Send(o...)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		defer r.Body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if r.StatusCode == http.StatusOK {
0000000000000000000000000000000000000000;;			b, err := ioutil.ReadAll(r.Body)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Check for GaugeBucketpoint and so on for the rest.. uh
0000000000000000000000000000000000000000;;			bp := []*Bucketpoint{}
0000000000000000000000000000000000000000;;			if b != nil {
0000000000000000000000000000000000000000;;				if err = json.Unmarshal(b, &bp); err != nil {
0000000000000000000000000000000000000000;;					return nil, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return bp, nil
0000000000000000000000000000000000000000;;		} else if r.StatusCode > 399 {
0000000000000000000000000000000000000000;;			return nil, self.parseErrorResponse(r)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Initialization
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewHawkularClient(p Parameters) (*Client, error) {
0000000000000000000000000000000000000000;;		uri, err := url.Parse(p.Url)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if uri.Path == "" {
0000000000000000000000000000000000000000;;			uri.Path = base_url
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		u := &url.URL{
0000000000000000000000000000000000000000;;			Host:   uri.Host,
0000000000000000000000000000000000000000;;			Path:   uri.Path,
0000000000000000000000000000000000000000;;			Scheme: uri.Scheme,
0000000000000000000000000000000000000000;;			Opaque: fmt.Sprintf("//%s/%s", uri.Host, uri.Path),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		c := &http.Client{
0000000000000000000000000000000000000000;;			Timeout: timeout,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if p.TLSConfig != nil {
0000000000000000000000000000000000000000;;			transport := &http.Transport{TLSClientConfig: p.TLSConfig}
0000000000000000000000000000000000000000;;			c.Transport = transport
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &Client{
0000000000000000000000000000000000000000;;			url:    u,
0000000000000000000000000000000000000000;;			Tenant: p.Tenant,
0000000000000000000000000000000000000000;;			Token:  p.Token,
0000000000000000000000000000000000000000;;			client: c,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HTTP Helper functions
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func cleanId(id string) string {
0000000000000000000000000000000000000000;;		return url.QueryEscape(id)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *Client) parseErrorResponse(resp *http.Response) error {
0000000000000000000000000000000000000000;;		// Parse error messages here correctly..
0000000000000000000000000000000000000000;;		reply, err := ioutil.ReadAll(resp.Body)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return &HawkularClientError{Code: resp.StatusCode,
0000000000000000000000000000000000000000;;				msg: fmt.Sprintf("Reply could not be read: %s", err.Error()),
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		details := &HawkularError{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = json.Unmarshal(reply, details)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return &HawkularClientError{Code: resp.StatusCode,
0000000000000000000000000000000000000000;;				msg: fmt.Sprintf("Reply could not be parsed: %s", err.Error()),
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &HawkularClientError{Code: resp.StatusCode,
0000000000000000000000000000000000000000;;			msg: details.ErrorMsg,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// URL functions (...)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Endpoint func(u *url.URL)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *Client) createUrl(e ...Endpoint) *url.URL {
0000000000000000000000000000000000000000;;		mu := *self.url
0000000000000000000000000000000000000000;;		for _, f := range e {
0000000000000000000000000000000000000000;;			f(&mu)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &mu
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TypeEndpoint(t MetricType) Endpoint {
0000000000000000000000000000000000000000;;		return func(u *url.URL) {
0000000000000000000000000000000000000000;;			addToUrl(u, t.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func SingleMetricEndpoint(id string) Endpoint {
0000000000000000000000000000000000000000;;		return func(u *url.URL) {
0000000000000000000000000000000000000000;;			addToUrl(u, url.QueryEscape(id))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TagEndpoint() Endpoint {
0000000000000000000000000000000000000000;;		return func(u *url.URL) {
0000000000000000000000000000000000000000;;			addToUrl(u, "tags")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TagsEndpoint(tags map[string]string) Endpoint {
0000000000000000000000000000000000000000;;		return func(u *url.URL) {
0000000000000000000000000000000000000000;;			addToUrl(u, tagsEncoder(tags))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func DataEndpoint() Endpoint {
0000000000000000000000000000000000000000;;		return func(u *url.URL) {
0000000000000000000000000000000000000000;;			addToUrl(u, "data")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func addToUrl(u *url.URL, s string) *url.URL {
0000000000000000000000000000000000000000;;		u.Opaque = fmt.Sprintf("%s/%s", u.Opaque, s)
0000000000000000000000000000000000000000;;		return u
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func tagsEncoder(t map[string]string) string {
0000000000000000000000000000000000000000;;		tags := make([]string, 0, len(t))
0000000000000000000000000000000000000000;;		for k, v := range t {
0000000000000000000000000000000000000000;;			tags = append(tags, fmt.Sprintf("%s:%s", k, v))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		j := strings.Join(tags, ",")
0000000000000000000000000000000000000000;;		return j
0000000000000000000000000000000000000000;;	}
