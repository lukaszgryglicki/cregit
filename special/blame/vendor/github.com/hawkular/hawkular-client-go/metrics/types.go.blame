0000000000000000000000000000000000000000;;	package metrics
f1b7b8566d6c114c83a96e2bd7e7b3d31b7aaba4;Godeps/_workspace/src/github.com/hawkular/hawkular-client-go/metrics/types.go[Godeps/_workspace/src/github.com/hawkular/hawkular-client-go/metrics/types.go][vendor/github.com/hawkular/hawkular-client-go/metrics/types.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		// "time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MetricType restrictions
0000000000000000000000000000000000000000;;	type MetricType int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		Gauge = iota
0000000000000000000000000000000000000000;;		Availability
0000000000000000000000000000000000000000;;		Counter
0000000000000000000000000000000000000000;;		Generic
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var longForm = []string{
0000000000000000000000000000000000000000;;		"gauges",
0000000000000000000000000000000000000000;;		"availability",
0000000000000000000000000000000000000000;;		"counters",
0000000000000000000000000000000000000000;;		"metrics",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var shortForm = []string{
0000000000000000000000000000000000000000;;		"gauge",
0000000000000000000000000000000000000000;;		"availability",
0000000000000000000000000000000000000000;;		"counter",
0000000000000000000000000000000000000000;;		"metrics",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self MetricType) validate() error {
0000000000000000000000000000000000000000;;		if int(self) > len(longForm) && int(self) > len(shortForm) {
0000000000000000000000000000000000000000;;			return fmt.Errorf("Given MetricType value %d is not valid", self)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self MetricType) String() string {
0000000000000000000000000000000000000000;;		if err := self.validate(); err != nil {
0000000000000000000000000000000000000000;;			return "unknown"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return longForm[self]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self MetricType) shortForm() string {
0000000000000000000000000000000000000000;;		if err := self.validate(); err != nil {
0000000000000000000000000000000000000000;;			return "unknown"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return shortForm[self]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Custom unmarshaller
0000000000000000000000000000000000000000;;	func (self *MetricType) UnmarshalJSON(b []byte) error {
0000000000000000000000000000000000000000;;		var f interface{}
0000000000000000000000000000000000000000;;		err := json.Unmarshal(b, &f)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if str, ok := f.(string); ok {
0000000000000000000000000000000000000000;;			for i, v := range shortForm {
0000000000000000000000000000000000000000;;				if str == v {
0000000000000000000000000000000000000000;;					*self = MetricType(i)
0000000000000000000000000000000000000000;;					break
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self MetricType) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		return json.Marshal(self.String())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SortKey struct {
0000000000000000000000000000000000000000;;		Tenant string
0000000000000000000000000000000000000000;;		Type   MetricType
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Hawkular-Metrics external structs
0000000000000000000000000000000000000000;;	// Do I need external.. hmph.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MetricHeader struct {
0000000000000000000000000000000000000000;;		Tenant string      `json:"-"`
0000000000000000000000000000000000000000;;		Type   MetricType  `json:"-"`
0000000000000000000000000000000000000000;;		Id     string      `json:"id"`
0000000000000000000000000000000000000000;;		Data   []Datapoint `json:"data"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Value should be convertible to float64 for numeric values
0000000000000000000000000000000000000000;;	// Timestamp is milliseconds since epoch
0000000000000000000000000000000000000000;;	type Datapoint struct {
0000000000000000000000000000000000000000;;		Timestamp int64             `json:"timestamp"`
0000000000000000000000000000000000000000;;		Value     interface{}       `json:"value"`
0000000000000000000000000000000000000000;;		Tags      map[string]string `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HawkularError struct {
0000000000000000000000000000000000000000;;		ErrorMsg string `json:"errorMsg"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MetricDefinition struct {
0000000000000000000000000000000000000000;;		Tenant        string            `json:"-"`
0000000000000000000000000000000000000000;;		Type          MetricType        `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Id            string            `json:"id"`
0000000000000000000000000000000000000000;;		Tags          map[string]string `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		RetentionTime int               `json:"dataRetention,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO Fix the Start & End to return a time.Time
0000000000000000000000000000000000000000;;	type Bucketpoint struct {
0000000000000000000000000000000000000000;;		Start       int64        `json:"start"`
0000000000000000000000000000000000000000;;		End         int64        `json:"end"`
0000000000000000000000000000000000000000;;		Min         float64      `json:"min"`
0000000000000000000000000000000000000000;;		Max         float64      `json:"max"`
0000000000000000000000000000000000000000;;		Avg         float64      `json:"avg"`
0000000000000000000000000000000000000000;;		Median      float64      `json:"median"`
0000000000000000000000000000000000000000;;		Empty       bool         `json:"empty"`
0000000000000000000000000000000000000000;;		Samples     int64        `json:"samples"`
0000000000000000000000000000000000000000;;		Percentiles []Percentile `json:"percentiles"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Percentile struct {
0000000000000000000000000000000000000000;;		Quantile float64 `json:"quantile"`
0000000000000000000000000000000000000000;;		Value    float64 `json:"value"`
0000000000000000000000000000000000000000;;	}
