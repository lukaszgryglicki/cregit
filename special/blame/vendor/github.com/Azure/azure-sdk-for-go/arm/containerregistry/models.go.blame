0000000000000000000000000000000000000000;;	package containerregistry
d847c78ae1f722cdc1b2b0be7f75237cf70584c4;;	
0000000000000000000000000000000000000000;;	// Copyright (c) Microsoft and contributors.  All rights reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	// http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
0000000000000000000000000000000000000000;;	// Changes may cause incorrect behavior and will be lost if the code is
0000000000000000000000000000000000000000;;	// regenerated.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/Azure/go-autorest/autorest"
0000000000000000000000000000000000000000;;		"github.com/Azure/go-autorest/autorest/date"
0000000000000000000000000000000000000000;;		"github.com/Azure/go-autorest/autorest/to"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PasswordName enumerates the values for password name.
0000000000000000000000000000000000000000;;	type PasswordName string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Password specifies the password state for password name.
0000000000000000000000000000000000000000;;		Password PasswordName = "password"
0000000000000000000000000000000000000000;;		// Password2 specifies the password 2 state for password name.
0000000000000000000000000000000000000000;;		Password2 PasswordName = "password2"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ProvisioningState enumerates the values for provisioning state.
0000000000000000000000000000000000000000;;	type ProvisioningState string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Creating specifies the creating state for provisioning state.
0000000000000000000000000000000000000000;;		Creating ProvisioningState = "Creating"
0000000000000000000000000000000000000000;;		// Succeeded specifies the succeeded state for provisioning state.
0000000000000000000000000000000000000000;;		Succeeded ProvisioningState = "Succeeded"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SkuTier enumerates the values for sku tier.
0000000000000000000000000000000000000000;;	type SkuTier string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Basic specifies the basic state for sku tier.
0000000000000000000000000000000000000000;;		Basic SkuTier = "Basic"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OperationDefinition is the definition of a container registry operation.
0000000000000000000000000000000000000000;;	type OperationDefinition struct {
0000000000000000000000000000000000000000;;		Name    *string                     `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Display *OperationDisplayDefinition `json:"display,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OperationDisplayDefinition is the display information for a container
0000000000000000000000000000000000000000;;	// registry operation.
0000000000000000000000000000000000000000;;	type OperationDisplayDefinition struct {
0000000000000000000000000000000000000000;;		Provider    *string `json:"provider,omitempty"`
0000000000000000000000000000000000000000;;		Resource    *string `json:"resource,omitempty"`
0000000000000000000000000000000000000000;;		Operation   *string `json:"operation,omitempty"`
0000000000000000000000000000000000000000;;		Description *string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OperationListResult is the result of a request to list container registry
0000000000000000000000000000000000000000;;	// operations.
0000000000000000000000000000000000000000;;	type OperationListResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]OperationDefinition `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		NextLink          *string                `json:"nextLink,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OperationListResultPreparer prepares a request to retrieve the next set of results. It returns
0000000000000000000000000000000000000000;;	// nil if no more results exist.
0000000000000000000000000000000000000000;;	func (client OperationListResult) OperationListResultPreparer() (*http.Request, error) {
0000000000000000000000000000000000000000;;		if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return autorest.Prepare(&http.Request{},
0000000000000000000000000000000000000000;;			autorest.AsJSON(),
0000000000000000000000000000000000000000;;			autorest.AsGet(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(to.String(client.NextLink)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RegenerateCredentialParameters is the parameters used to regenerate the
0000000000000000000000000000000000000000;;	// login credential.
0000000000000000000000000000000000000000;;	type RegenerateCredentialParameters struct {
0000000000000000000000000000000000000000;;		Name PasswordName `json:"name,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Registry is an object that represents a container registry.
0000000000000000000000000000000000000000;;	type Registry struct {
0000000000000000000000000000000000000000;;		autorest.Response   `json:"-"`
0000000000000000000000000000000000000000;;		ID                  *string             `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Name                *string             `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Type                *string             `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Location            *string             `json:"location,omitempty"`
0000000000000000000000000000000000000000;;		Tags                *map[string]*string `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Sku                 *Sku                `json:"sku,omitempty"`
0000000000000000000000000000000000000000;;		*RegistryProperties `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RegistryCreateParameters is the parameters for creating a container
0000000000000000000000000000000000000000;;	// registry.
0000000000000000000000000000000000000000;;	type RegistryCreateParameters struct {
0000000000000000000000000000000000000000;;		Tags                                *map[string]*string `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Location                            *string             `json:"location,omitempty"`
0000000000000000000000000000000000000000;;		Sku                                 *Sku                `json:"sku,omitempty"`
0000000000000000000000000000000000000000;;		*RegistryPropertiesCreateParameters `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RegistryListCredentialsResult is the response from the ListCredentials
0000000000000000000000000000000000000000;;	// operation.
0000000000000000000000000000000000000000;;	type RegistryListCredentialsResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Username          *string             `json:"username,omitempty"`
0000000000000000000000000000000000000000;;		Passwords         *[]RegistryPassword `json:"passwords,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RegistryListResult is the result of a request to list container registries.
0000000000000000000000000000000000000000;;	type RegistryListResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]Registry `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		NextLink          *string     `json:"nextLink,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RegistryListResultPreparer prepares a request to retrieve the next set of results. It returns
0000000000000000000000000000000000000000;;	// nil if no more results exist.
0000000000000000000000000000000000000000;;	func (client RegistryListResult) RegistryListResultPreparer() (*http.Request, error) {
0000000000000000000000000000000000000000;;		if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return autorest.Prepare(&http.Request{},
0000000000000000000000000000000000000000;;			autorest.AsJSON(),
0000000000000000000000000000000000000000;;			autorest.AsGet(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(to.String(client.NextLink)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RegistryNameCheckRequest is a request to check whether a container registry
0000000000000000000000000000000000000000;;	// name is available.
0000000000000000000000000000000000000000;;	type RegistryNameCheckRequest struct {
0000000000000000000000000000000000000000;;		Name *string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Type *string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RegistryNameStatus is the result of a request to check the availability of a
0000000000000000000000000000000000000000;;	// container registry name.
0000000000000000000000000000000000000000;;	type RegistryNameStatus struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		NameAvailable     *bool   `json:"nameAvailable,omitempty"`
0000000000000000000000000000000000000000;;		Reason            *string `json:"reason,omitempty"`
0000000000000000000000000000000000000000;;		Message           *string `json:"message,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RegistryPassword is the login password for the container registry.
0000000000000000000000000000000000000000;;	type RegistryPassword struct {
0000000000000000000000000000000000000000;;		Name  PasswordName `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Value *string      `json:"value,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RegistryProperties is the properties of a container registry.
0000000000000000000000000000000000000000;;	type RegistryProperties struct {
0000000000000000000000000000000000000000;;		LoginServer       *string                   `json:"loginServer,omitempty"`
0000000000000000000000000000000000000000;;		CreationDate      *date.Time                `json:"creationDate,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState ProvisioningState         `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;		AdminUserEnabled  *bool                     `json:"adminUserEnabled,omitempty"`
0000000000000000000000000000000000000000;;		StorageAccount    *StorageAccountProperties `json:"storageAccount,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RegistryPropertiesCreateParameters is the parameters for creating the
0000000000000000000000000000000000000000;;	// properties of a container registry.
0000000000000000000000000000000000000000;;	type RegistryPropertiesCreateParameters struct {
0000000000000000000000000000000000000000;;		AdminUserEnabled *bool                     `json:"adminUserEnabled,omitempty"`
0000000000000000000000000000000000000000;;		StorageAccount   *StorageAccountParameters `json:"storageAccount,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RegistryPropertiesUpdateParameters is the parameters for updating the
0000000000000000000000000000000000000000;;	// properties of a container registry.
0000000000000000000000000000000000000000;;	type RegistryPropertiesUpdateParameters struct {
0000000000000000000000000000000000000000;;		AdminUserEnabled *bool                     `json:"adminUserEnabled,omitempty"`
0000000000000000000000000000000000000000;;		StorageAccount   *StorageAccountParameters `json:"storageAccount,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RegistryUpdateParameters is the parameters for updating a container
0000000000000000000000000000000000000000;;	// registry.
0000000000000000000000000000000000000000;;	type RegistryUpdateParameters struct {
0000000000000000000000000000000000000000;;		Tags                                *map[string]*string `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		*RegistryPropertiesUpdateParameters `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Resource is an Azure resource.
0000000000000000000000000000000000000000;;	type Resource struct {
0000000000000000000000000000000000000000;;		ID       *string             `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Name     *string             `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Type     *string             `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Location *string             `json:"location,omitempty"`
0000000000000000000000000000000000000000;;		Tags     *map[string]*string `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Sku is the SKU of a container registry.
0000000000000000000000000000000000000000;;	type Sku struct {
0000000000000000000000000000000000000000;;		Name *string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Tier SkuTier `json:"tier,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StorageAccountParameters is the parameters of a storage account for a
0000000000000000000000000000000000000000;;	// container registry.
0000000000000000000000000000000000000000;;	type StorageAccountParameters struct {
0000000000000000000000000000000000000000;;		Name      *string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		AccessKey *string `json:"accessKey,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StorageAccountProperties is the properties of a storage account for a
0000000000000000000000000000000000000000;;	// container registry.
0000000000000000000000000000000000000000;;	type StorageAccountProperties struct {
0000000000000000000000000000000000000000;;		Name *string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;	}
