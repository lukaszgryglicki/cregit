0000000000000000000000000000000000000000;;	package compute
6d6afa491b422a1e9d1fe39b10df70e4bf5254bf;;	
0000000000000000000000000000000000000000;;	// Copyright (c) Microsoft and contributors.  All rights reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	// http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
0000000000000000000000000000000000000000;;	// Changes may cause incorrect behavior and will be lost if the code is
0000000000000000000000000000000000000000;;	// regenerated.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/Azure/go-autorest/autorest"
0000000000000000000000000000000000000000;;		"github.com/Azure/go-autorest/autorest/date"
0000000000000000000000000000000000000000;;		"github.com/Azure/go-autorest/autorest/to"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CachingTypes enumerates the values for caching types.
0000000000000000000000000000000000000000;;	type CachingTypes string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// None specifies the none state for caching types.
0000000000000000000000000000000000000000;;		None CachingTypes = "None"
0000000000000000000000000000000000000000;;		// ReadOnly specifies the read only state for caching types.
0000000000000000000000000000000000000000;;		ReadOnly CachingTypes = "ReadOnly"
0000000000000000000000000000000000000000;;		// ReadWrite specifies the read write state for caching types.
0000000000000000000000000000000000000000;;		ReadWrite CachingTypes = "ReadWrite"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ComponentNames enumerates the values for component names.
0000000000000000000000000000000000000000;;	type ComponentNames string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// MicrosoftWindowsShellSetup specifies the microsoft windows shell setup
0000000000000000000000000000000000000000;;		// state for component names.
0000000000000000000000000000000000000000;;		MicrosoftWindowsShellSetup ComponentNames = "Microsoft-Windows-Shell-Setup"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DiskCreateOptionTypes enumerates the values for disk create option types.
0000000000000000000000000000000000000000;;	type DiskCreateOptionTypes string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Attach specifies the attach state for disk create option types.
0000000000000000000000000000000000000000;;		Attach DiskCreateOptionTypes = "attach"
0000000000000000000000000000000000000000;;		// Empty specifies the empty state for disk create option types.
0000000000000000000000000000000000000000;;		Empty DiskCreateOptionTypes = "empty"
0000000000000000000000000000000000000000;;		// FromImage specifies the from image state for disk create option types.
0000000000000000000000000000000000000000;;		FromImage DiskCreateOptionTypes = "fromImage"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InstanceViewTypes enumerates the values for instance view types.
0000000000000000000000000000000000000000;;	type InstanceViewTypes string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// InstanceView specifies the instance view state for instance view types.
0000000000000000000000000000000000000000;;		InstanceView InstanceViewTypes = "instanceView"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OperatingSystemStateTypes enumerates the values for operating system state
0000000000000000000000000000000000000000;;	// types.
0000000000000000000000000000000000000000;;	type OperatingSystemStateTypes string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Generalized specifies the generalized state for operating system state
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		Generalized OperatingSystemStateTypes = "Generalized"
0000000000000000000000000000000000000000;;		// Specialized specifies the specialized state for operating system state
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		Specialized OperatingSystemStateTypes = "Specialized"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OperatingSystemTypes enumerates the values for operating system types.
0000000000000000000000000000000000000000;;	type OperatingSystemTypes string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Linux specifies the linux state for operating system types.
0000000000000000000000000000000000000000;;		Linux OperatingSystemTypes = "Linux"
0000000000000000000000000000000000000000;;		// Windows specifies the windows state for operating system types.
0000000000000000000000000000000000000000;;		Windows OperatingSystemTypes = "Windows"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PassNames enumerates the values for pass names.
0000000000000000000000000000000000000000;;	type PassNames string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// OobeSystem specifies the oobe system state for pass names.
0000000000000000000000000000000000000000;;		OobeSystem PassNames = "oobeSystem"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ProtocolTypes enumerates the values for protocol types.
0000000000000000000000000000000000000000;;	type ProtocolTypes string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// HTTP specifies the http state for protocol types.
0000000000000000000000000000000000000000;;		HTTP ProtocolTypes = "Http"
0000000000000000000000000000000000000000;;		// HTTPS specifies the https state for protocol types.
0000000000000000000000000000000000000000;;		HTTPS ProtocolTypes = "Https"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResourceIdentityType enumerates the values for resource identity type.
0000000000000000000000000000000000000000;;	type ResourceIdentityType string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// SystemAssigned specifies the system assigned state for resource identity
0000000000000000000000000000000000000000;;		// type.
0000000000000000000000000000000000000000;;		SystemAssigned ResourceIdentityType = "SystemAssigned"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SettingNames enumerates the values for setting names.
0000000000000000000000000000000000000000;;	type SettingNames string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// AutoLogon specifies the auto logon state for setting names.
0000000000000000000000000000000000000000;;		AutoLogon SettingNames = "AutoLogon"
0000000000000000000000000000000000000000;;		// FirstLogonCommands specifies the first logon commands state for setting
0000000000000000000000000000000000000000;;		// names.
0000000000000000000000000000000000000000;;		FirstLogonCommands SettingNames = "FirstLogonCommands"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StatusLevelTypes enumerates the values for status level types.
0000000000000000000000000000000000000000;;	type StatusLevelTypes string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Error specifies the error state for status level types.
0000000000000000000000000000000000000000;;		Error StatusLevelTypes = "Error"
0000000000000000000000000000000000000000;;		// Info specifies the info state for status level types.
0000000000000000000000000000000000000000;;		Info StatusLevelTypes = "Info"
0000000000000000000000000000000000000000;;		// Warning specifies the warning state for status level types.
0000000000000000000000000000000000000000;;		Warning StatusLevelTypes = "Warning"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StorageAccountTypes enumerates the values for storage account types.
0000000000000000000000000000000000000000;;	type StorageAccountTypes string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// PremiumLRS specifies the premium lrs state for storage account types.
0000000000000000000000000000000000000000;;		PremiumLRS StorageAccountTypes = "Premium_LRS"
0000000000000000000000000000000000000000;;		// StandardLRS specifies the standard lrs state for storage account types.
0000000000000000000000000000000000000000;;		StandardLRS StorageAccountTypes = "Standard_LRS"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpgradeMode enumerates the values for upgrade mode.
0000000000000000000000000000000000000000;;	type UpgradeMode string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Automatic specifies the automatic state for upgrade mode.
0000000000000000000000000000000000000000;;		Automatic UpgradeMode = "Automatic"
0000000000000000000000000000000000000000;;		// Manual specifies the manual state for upgrade mode.
0000000000000000000000000000000000000000;;		Manual UpgradeMode = "Manual"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineScaleSetSkuScaleType enumerates the values for virtual machine
0000000000000000000000000000000000000000;;	// scale set sku scale type.
0000000000000000000000000000000000000000;;	type VirtualMachineScaleSetSkuScaleType string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// VirtualMachineScaleSetSkuScaleTypeAutomatic specifies the virtual
0000000000000000000000000000000000000000;;		// machine scale set sku scale type automatic state for virtual machine
0000000000000000000000000000000000000000;;		// scale set sku scale type.
0000000000000000000000000000000000000000;;		VirtualMachineScaleSetSkuScaleTypeAutomatic VirtualMachineScaleSetSkuScaleType = "Automatic"
0000000000000000000000000000000000000000;;		// VirtualMachineScaleSetSkuScaleTypeNone specifies the virtual machine
0000000000000000000000000000000000000000;;		// scale set sku scale type none state for virtual machine scale set sku
0000000000000000000000000000000000000000;;		// scale type.
0000000000000000000000000000000000000000;;		VirtualMachineScaleSetSkuScaleTypeNone VirtualMachineScaleSetSkuScaleType = "None"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineSizeTypes enumerates the values for virtual machine size
0000000000000000000000000000000000000000;;	// types.
0000000000000000000000000000000000000000;;	type VirtualMachineSizeTypes string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// BasicA0 specifies the basic a0 state for virtual machine size types.
0000000000000000000000000000000000000000;;		BasicA0 VirtualMachineSizeTypes = "Basic_A0"
0000000000000000000000000000000000000000;;		// BasicA1 specifies the basic a1 state for virtual machine size types.
0000000000000000000000000000000000000000;;		BasicA1 VirtualMachineSizeTypes = "Basic_A1"
0000000000000000000000000000000000000000;;		// BasicA2 specifies the basic a2 state for virtual machine size types.
0000000000000000000000000000000000000000;;		BasicA2 VirtualMachineSizeTypes = "Basic_A2"
0000000000000000000000000000000000000000;;		// BasicA3 specifies the basic a3 state for virtual machine size types.
0000000000000000000000000000000000000000;;		BasicA3 VirtualMachineSizeTypes = "Basic_A3"
0000000000000000000000000000000000000000;;		// BasicA4 specifies the basic a4 state for virtual machine size types.
0000000000000000000000000000000000000000;;		BasicA4 VirtualMachineSizeTypes = "Basic_A4"
0000000000000000000000000000000000000000;;		// StandardA0 specifies the standard a0 state for virtual machine size
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		StandardA0 VirtualMachineSizeTypes = "Standard_A0"
0000000000000000000000000000000000000000;;		// StandardA1 specifies the standard a1 state for virtual machine size
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		StandardA1 VirtualMachineSizeTypes = "Standard_A1"
0000000000000000000000000000000000000000;;		// StandardA10 specifies the standard a10 state for virtual machine size
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		StandardA10 VirtualMachineSizeTypes = "Standard_A10"
0000000000000000000000000000000000000000;;		// StandardA11 specifies the standard a11 state for virtual machine size
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		StandardA11 VirtualMachineSizeTypes = "Standard_A11"
0000000000000000000000000000000000000000;;		// StandardA2 specifies the standard a2 state for virtual machine size
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		StandardA2 VirtualMachineSizeTypes = "Standard_A2"
0000000000000000000000000000000000000000;;		// StandardA3 specifies the standard a3 state for virtual machine size
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		StandardA3 VirtualMachineSizeTypes = "Standard_A3"
0000000000000000000000000000000000000000;;		// StandardA4 specifies the standard a4 state for virtual machine size
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		StandardA4 VirtualMachineSizeTypes = "Standard_A4"
0000000000000000000000000000000000000000;;		// StandardA5 specifies the standard a5 state for virtual machine size
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		StandardA5 VirtualMachineSizeTypes = "Standard_A5"
0000000000000000000000000000000000000000;;		// StandardA6 specifies the standard a6 state for virtual machine size
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		StandardA6 VirtualMachineSizeTypes = "Standard_A6"
0000000000000000000000000000000000000000;;		// StandardA7 specifies the standard a7 state for virtual machine size
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		StandardA7 VirtualMachineSizeTypes = "Standard_A7"
0000000000000000000000000000000000000000;;		// StandardA8 specifies the standard a8 state for virtual machine size
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		StandardA8 VirtualMachineSizeTypes = "Standard_A8"
0000000000000000000000000000000000000000;;		// StandardA9 specifies the standard a9 state for virtual machine size
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		StandardA9 VirtualMachineSizeTypes = "Standard_A9"
0000000000000000000000000000000000000000;;		// StandardD1 specifies the standard d1 state for virtual machine size
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		StandardD1 VirtualMachineSizeTypes = "Standard_D1"
0000000000000000000000000000000000000000;;		// StandardD11 specifies the standard d11 state for virtual machine size
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		StandardD11 VirtualMachineSizeTypes = "Standard_D11"
0000000000000000000000000000000000000000;;		// StandardD11V2 specifies the standard d11v2 state for virtual machine
0000000000000000000000000000000000000000;;		// size types.
0000000000000000000000000000000000000000;;		StandardD11V2 VirtualMachineSizeTypes = "Standard_D11_v2"
0000000000000000000000000000000000000000;;		// StandardD12 specifies the standard d12 state for virtual machine size
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		StandardD12 VirtualMachineSizeTypes = "Standard_D12"
0000000000000000000000000000000000000000;;		// StandardD12V2 specifies the standard d12v2 state for virtual machine
0000000000000000000000000000000000000000;;		// size types.
0000000000000000000000000000000000000000;;		StandardD12V2 VirtualMachineSizeTypes = "Standard_D12_v2"
0000000000000000000000000000000000000000;;		// StandardD13 specifies the standard d13 state for virtual machine size
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		StandardD13 VirtualMachineSizeTypes = "Standard_D13"
0000000000000000000000000000000000000000;;		// StandardD13V2 specifies the standard d13v2 state for virtual machine
0000000000000000000000000000000000000000;;		// size types.
0000000000000000000000000000000000000000;;		StandardD13V2 VirtualMachineSizeTypes = "Standard_D13_v2"
0000000000000000000000000000000000000000;;		// StandardD14 specifies the standard d14 state for virtual machine size
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		StandardD14 VirtualMachineSizeTypes = "Standard_D14"
0000000000000000000000000000000000000000;;		// StandardD14V2 specifies the standard d14v2 state for virtual machine
0000000000000000000000000000000000000000;;		// size types.
0000000000000000000000000000000000000000;;		StandardD14V2 VirtualMachineSizeTypes = "Standard_D14_v2"
0000000000000000000000000000000000000000;;		// StandardD15V2 specifies the standard d15v2 state for virtual machine
0000000000000000000000000000000000000000;;		// size types.
0000000000000000000000000000000000000000;;		StandardD15V2 VirtualMachineSizeTypes = "Standard_D15_v2"
0000000000000000000000000000000000000000;;		// StandardD1V2 specifies the standard d1v2 state for virtual machine size
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		StandardD1V2 VirtualMachineSizeTypes = "Standard_D1_v2"
0000000000000000000000000000000000000000;;		// StandardD2 specifies the standard d2 state for virtual machine size
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		StandardD2 VirtualMachineSizeTypes = "Standard_D2"
0000000000000000000000000000000000000000;;		// StandardD2V2 specifies the standard d2v2 state for virtual machine size
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		StandardD2V2 VirtualMachineSizeTypes = "Standard_D2_v2"
0000000000000000000000000000000000000000;;		// StandardD3 specifies the standard d3 state for virtual machine size
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		StandardD3 VirtualMachineSizeTypes = "Standard_D3"
0000000000000000000000000000000000000000;;		// StandardD3V2 specifies the standard d3v2 state for virtual machine size
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		StandardD3V2 VirtualMachineSizeTypes = "Standard_D3_v2"
0000000000000000000000000000000000000000;;		// StandardD4 specifies the standard d4 state for virtual machine size
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		StandardD4 VirtualMachineSizeTypes = "Standard_D4"
0000000000000000000000000000000000000000;;		// StandardD4V2 specifies the standard d4v2 state for virtual machine size
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		StandardD4V2 VirtualMachineSizeTypes = "Standard_D4_v2"
0000000000000000000000000000000000000000;;		// StandardD5V2 specifies the standard d5v2 state for virtual machine size
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		StandardD5V2 VirtualMachineSizeTypes = "Standard_D5_v2"
0000000000000000000000000000000000000000;;		// StandardDS1 specifies the standard ds1 state for virtual machine size
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		StandardDS1 VirtualMachineSizeTypes = "Standard_DS1"
0000000000000000000000000000000000000000;;		// StandardDS11 specifies the standard ds11 state for virtual machine size
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		StandardDS11 VirtualMachineSizeTypes = "Standard_DS11"
0000000000000000000000000000000000000000;;		// StandardDS11V2 specifies the standard ds11v2 state for virtual machine
0000000000000000000000000000000000000000;;		// size types.
0000000000000000000000000000000000000000;;		StandardDS11V2 VirtualMachineSizeTypes = "Standard_DS11_v2"
0000000000000000000000000000000000000000;;		// StandardDS12 specifies the standard ds12 state for virtual machine size
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		StandardDS12 VirtualMachineSizeTypes = "Standard_DS12"
0000000000000000000000000000000000000000;;		// StandardDS12V2 specifies the standard ds12v2 state for virtual machine
0000000000000000000000000000000000000000;;		// size types.
0000000000000000000000000000000000000000;;		StandardDS12V2 VirtualMachineSizeTypes = "Standard_DS12_v2"
0000000000000000000000000000000000000000;;		// StandardDS13 specifies the standard ds13 state for virtual machine size
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		StandardDS13 VirtualMachineSizeTypes = "Standard_DS13"
0000000000000000000000000000000000000000;;		// StandardDS13V2 specifies the standard ds13v2 state for virtual machine
0000000000000000000000000000000000000000;;		// size types.
0000000000000000000000000000000000000000;;		StandardDS13V2 VirtualMachineSizeTypes = "Standard_DS13_v2"
0000000000000000000000000000000000000000;;		// StandardDS14 specifies the standard ds14 state for virtual machine size
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		StandardDS14 VirtualMachineSizeTypes = "Standard_DS14"
0000000000000000000000000000000000000000;;		// StandardDS14V2 specifies the standard ds14v2 state for virtual machine
0000000000000000000000000000000000000000;;		// size types.
0000000000000000000000000000000000000000;;		StandardDS14V2 VirtualMachineSizeTypes = "Standard_DS14_v2"
0000000000000000000000000000000000000000;;		// StandardDS15V2 specifies the standard ds15v2 state for virtual machine
0000000000000000000000000000000000000000;;		// size types.
0000000000000000000000000000000000000000;;		StandardDS15V2 VirtualMachineSizeTypes = "Standard_DS15_v2"
0000000000000000000000000000000000000000;;		// StandardDS1V2 specifies the standard ds1v2 state for virtual machine
0000000000000000000000000000000000000000;;		// size types.
0000000000000000000000000000000000000000;;		StandardDS1V2 VirtualMachineSizeTypes = "Standard_DS1_v2"
0000000000000000000000000000000000000000;;		// StandardDS2 specifies the standard ds2 state for virtual machine size
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		StandardDS2 VirtualMachineSizeTypes = "Standard_DS2"
0000000000000000000000000000000000000000;;		// StandardDS2V2 specifies the standard ds2v2 state for virtual machine
0000000000000000000000000000000000000000;;		// size types.
0000000000000000000000000000000000000000;;		StandardDS2V2 VirtualMachineSizeTypes = "Standard_DS2_v2"
0000000000000000000000000000000000000000;;		// StandardDS3 specifies the standard ds3 state for virtual machine size
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		StandardDS3 VirtualMachineSizeTypes = "Standard_DS3"
0000000000000000000000000000000000000000;;		// StandardDS3V2 specifies the standard ds3v2 state for virtual machine
0000000000000000000000000000000000000000;;		// size types.
0000000000000000000000000000000000000000;;		StandardDS3V2 VirtualMachineSizeTypes = "Standard_DS3_v2"
0000000000000000000000000000000000000000;;		// StandardDS4 specifies the standard ds4 state for virtual machine size
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		StandardDS4 VirtualMachineSizeTypes = "Standard_DS4"
0000000000000000000000000000000000000000;;		// StandardDS4V2 specifies the standard ds4v2 state for virtual machine
0000000000000000000000000000000000000000;;		// size types.
0000000000000000000000000000000000000000;;		StandardDS4V2 VirtualMachineSizeTypes = "Standard_DS4_v2"
0000000000000000000000000000000000000000;;		// StandardDS5V2 specifies the standard ds5v2 state for virtual machine
0000000000000000000000000000000000000000;;		// size types.
0000000000000000000000000000000000000000;;		StandardDS5V2 VirtualMachineSizeTypes = "Standard_DS5_v2"
0000000000000000000000000000000000000000;;		// StandardG1 specifies the standard g1 state for virtual machine size
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		StandardG1 VirtualMachineSizeTypes = "Standard_G1"
0000000000000000000000000000000000000000;;		// StandardG2 specifies the standard g2 state for virtual machine size
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		StandardG2 VirtualMachineSizeTypes = "Standard_G2"
0000000000000000000000000000000000000000;;		// StandardG3 specifies the standard g3 state for virtual machine size
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		StandardG3 VirtualMachineSizeTypes = "Standard_G3"
0000000000000000000000000000000000000000;;		// StandardG4 specifies the standard g4 state for virtual machine size
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		StandardG4 VirtualMachineSizeTypes = "Standard_G4"
0000000000000000000000000000000000000000;;		// StandardG5 specifies the standard g5 state for virtual machine size
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		StandardG5 VirtualMachineSizeTypes = "Standard_G5"
0000000000000000000000000000000000000000;;		// StandardGS1 specifies the standard gs1 state for virtual machine size
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		StandardGS1 VirtualMachineSizeTypes = "Standard_GS1"
0000000000000000000000000000000000000000;;		// StandardGS2 specifies the standard gs2 state for virtual machine size
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		StandardGS2 VirtualMachineSizeTypes = "Standard_GS2"
0000000000000000000000000000000000000000;;		// StandardGS3 specifies the standard gs3 state for virtual machine size
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		StandardGS3 VirtualMachineSizeTypes = "Standard_GS3"
0000000000000000000000000000000000000000;;		// StandardGS4 specifies the standard gs4 state for virtual machine size
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		StandardGS4 VirtualMachineSizeTypes = "Standard_GS4"
0000000000000000000000000000000000000000;;		// StandardGS5 specifies the standard gs5 state for virtual machine size
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		StandardGS5 VirtualMachineSizeTypes = "Standard_GS5"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AdditionalUnattendContent is additional XML formatted information that can
0000000000000000000000000000000000000000;;	// be included in the Unattend.xml file, which is used by Windows Setup.
0000000000000000000000000000000000000000;;	// Contents are defined by setting name, component name, and the pass in which
0000000000000000000000000000000000000000;;	// the content is a applied.
0000000000000000000000000000000000000000;;	type AdditionalUnattendContent struct {
0000000000000000000000000000000000000000;;		PassName      PassNames      `json:"passName,omitempty"`
0000000000000000000000000000000000000000;;		ComponentName ComponentNames `json:"componentName,omitempty"`
0000000000000000000000000000000000000000;;		SettingName   SettingNames   `json:"settingName,omitempty"`
0000000000000000000000000000000000000000;;		Content       *string        `json:"content,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// APIEntityReference is the API entity reference.
0000000000000000000000000000000000000000;;	type APIEntityReference struct {
0000000000000000000000000000000000000000;;		ID *string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// APIError is api error.
0000000000000000000000000000000000000000;;	type APIError struct {
0000000000000000000000000000000000000000;;		Details    *[]APIErrorBase `json:"details,omitempty"`
0000000000000000000000000000000000000000;;		Innererror *InnerError     `json:"innererror,omitempty"`
0000000000000000000000000000000000000000;;		Code       *string         `json:"code,omitempty"`
0000000000000000000000000000000000000000;;		Target     *string         `json:"target,omitempty"`
0000000000000000000000000000000000000000;;		Message    *string         `json:"message,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// APIErrorBase is api error base.
0000000000000000000000000000000000000000;;	type APIErrorBase struct {
0000000000000000000000000000000000000000;;		Code    *string `json:"code,omitempty"`
0000000000000000000000000000000000000000;;		Target  *string `json:"target,omitempty"`
0000000000000000000000000000000000000000;;		Message *string `json:"message,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AvailabilitySet is create or update availability set parameters.
0000000000000000000000000000000000000000;;	type AvailabilitySet struct {
0000000000000000000000000000000000000000;;		autorest.Response          `json:"-"`
0000000000000000000000000000000000000000;;		ID                         *string             `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Name                       *string             `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Type                       *string             `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Location                   *string             `json:"location,omitempty"`
0000000000000000000000000000000000000000;;		Tags                       *map[string]*string `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		*AvailabilitySetProperties `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Sku                        *Sku `json:"sku,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AvailabilitySetListResult is the List Availability Set operation response.
0000000000000000000000000000000000000000;;	type AvailabilitySetListResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]AvailabilitySet `json:"value,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AvailabilitySetProperties is the instance view of a resource.
0000000000000000000000000000000000000000;;	type AvailabilitySetProperties struct {
0000000000000000000000000000000000000000;;		PlatformUpdateDomainCount *int32                `json:"platformUpdateDomainCount,omitempty"`
0000000000000000000000000000000000000000;;		PlatformFaultDomainCount  *int32                `json:"platformFaultDomainCount,omitempty"`
0000000000000000000000000000000000000000;;		VirtualMachines           *[]SubResource        `json:"virtualMachines,omitempty"`
0000000000000000000000000000000000000000;;		Statuses                  *[]InstanceViewStatus `json:"statuses,omitempty"`
0000000000000000000000000000000000000000;;		Managed                   *bool                 `json:"managed,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BootDiagnostics is describes Boot Diagnostics.
0000000000000000000000000000000000000000;;	type BootDiagnostics struct {
0000000000000000000000000000000000000000;;		Enabled    *bool   `json:"enabled,omitempty"`
0000000000000000000000000000000000000000;;		StorageURI *string `json:"storageUri,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BootDiagnosticsInstanceView is the instance view of a virtual machine boot
0000000000000000000000000000000000000000;;	// diagnostics.
0000000000000000000000000000000000000000;;	type BootDiagnosticsInstanceView struct {
0000000000000000000000000000000000000000;;		ConsoleScreenshotBlobURI *string `json:"consoleScreenshotBlobUri,omitempty"`
0000000000000000000000000000000000000000;;		SerialConsoleLogBlobURI  *string `json:"serialConsoleLogBlobUri,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DataDisk is describes a data disk.
0000000000000000000000000000000000000000;;	type DataDisk struct {
0000000000000000000000000000000000000000;;		Lun          *int32                 `json:"lun,omitempty"`
0000000000000000000000000000000000000000;;		Name         *string                `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Vhd          *VirtualHardDisk       `json:"vhd,omitempty"`
0000000000000000000000000000000000000000;;		Image        *VirtualHardDisk       `json:"image,omitempty"`
0000000000000000000000000000000000000000;;		Caching      CachingTypes           `json:"caching,omitempty"`
0000000000000000000000000000000000000000;;		CreateOption DiskCreateOptionTypes  `json:"createOption,omitempty"`
0000000000000000000000000000000000000000;;		DiskSizeGB   *int32                 `json:"diskSizeGB,omitempty"`
0000000000000000000000000000000000000000;;		ManagedDisk  *ManagedDiskParameters `json:"managedDisk,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DataDiskImage is contains the data disk images information.
0000000000000000000000000000000000000000;;	type DataDiskImage struct {
0000000000000000000000000000000000000000;;		Lun *int32 `json:"lun,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DiagnosticsProfile is describes a diagnostics profile.
0000000000000000000000000000000000000000;;	type DiagnosticsProfile struct {
0000000000000000000000000000000000000000;;		BootDiagnostics *BootDiagnostics `json:"bootDiagnostics,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DiskEncryptionSettings is describes a Encryption Settings for a Disk
0000000000000000000000000000000000000000;;	type DiskEncryptionSettings struct {
0000000000000000000000000000000000000000;;		DiskEncryptionKey *KeyVaultSecretReference `json:"diskEncryptionKey,omitempty"`
0000000000000000000000000000000000000000;;		KeyEncryptionKey  *KeyVaultKeyReference    `json:"keyEncryptionKey,omitempty"`
0000000000000000000000000000000000000000;;		Enabled           *bool                    `json:"enabled,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DiskInstanceView is the instance view of the disk.
0000000000000000000000000000000000000000;;	type DiskInstanceView struct {
0000000000000000000000000000000000000000;;		Name     *string               `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Statuses *[]InstanceViewStatus `json:"statuses,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HardwareProfile is describes a hardware profile.
0000000000000000000000000000000000000000;;	type HardwareProfile struct {
0000000000000000000000000000000000000000;;		VMSize VirtualMachineSizeTypes `json:"vmSize,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Image is describes an Image.
0000000000000000000000000000000000000000;;	type Image struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		ID                *string             `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Name              *string             `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Type              *string             `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Location          *string             `json:"location,omitempty"`
0000000000000000000000000000000000000000;;		Tags              *map[string]*string `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		*ImageProperties  `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImageDataDisk is describes a data disk.
0000000000000000000000000000000000000000;;	type ImageDataDisk struct {
0000000000000000000000000000000000000000;;		Lun         *int32       `json:"lun,omitempty"`
0000000000000000000000000000000000000000;;		Snapshot    *SubResource `json:"snapshot,omitempty"`
0000000000000000000000000000000000000000;;		ManagedDisk *SubResource `json:"managedDisk,omitempty"`
0000000000000000000000000000000000000000;;		BlobURI     *string      `json:"blobUri,omitempty"`
0000000000000000000000000000000000000000;;		Caching     CachingTypes `json:"caching,omitempty"`
0000000000000000000000000000000000000000;;		DiskSizeGB  *int32       `json:"diskSizeGB,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImageListResult is the List Image operation response.
0000000000000000000000000000000000000000;;	type ImageListResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]Image `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		NextLink          *string  `json:"nextLink,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImageListResultPreparer prepares a request to retrieve the next set of results. It returns
0000000000000000000000000000000000000000;;	// nil if no more results exist.
0000000000000000000000000000000000000000;;	func (client ImageListResult) ImageListResultPreparer() (*http.Request, error) {
0000000000000000000000000000000000000000;;		if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return autorest.Prepare(&http.Request{},
0000000000000000000000000000000000000000;;			autorest.AsJSON(),
0000000000000000000000000000000000000000;;			autorest.AsGet(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(to.String(client.NextLink)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImageOSDisk is describes an Operating System disk.
0000000000000000000000000000000000000000;;	type ImageOSDisk struct {
0000000000000000000000000000000000000000;;		OsType      OperatingSystemTypes      `json:"osType,omitempty"`
0000000000000000000000000000000000000000;;		OsState     OperatingSystemStateTypes `json:"osState,omitempty"`
0000000000000000000000000000000000000000;;		Snapshot    *SubResource              `json:"snapshot,omitempty"`
0000000000000000000000000000000000000000;;		ManagedDisk *SubResource              `json:"managedDisk,omitempty"`
0000000000000000000000000000000000000000;;		BlobURI     *string                   `json:"blobUri,omitempty"`
0000000000000000000000000000000000000000;;		Caching     CachingTypes              `json:"caching,omitempty"`
0000000000000000000000000000000000000000;;		DiskSizeGB  *int32                    `json:"diskSizeGB,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImageProperties is describes the properties of an Image.
0000000000000000000000000000000000000000;;	type ImageProperties struct {
0000000000000000000000000000000000000000;;		SourceVirtualMachine *SubResource         `json:"sourceVirtualMachine,omitempty"`
0000000000000000000000000000000000000000;;		StorageProfile       *ImageStorageProfile `json:"storageProfile,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState    *string              `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImageReference is the image reference.
0000000000000000000000000000000000000000;;	type ImageReference struct {
0000000000000000000000000000000000000000;;		ID        *string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Publisher *string `json:"publisher,omitempty"`
0000000000000000000000000000000000000000;;		Offer     *string `json:"offer,omitempty"`
0000000000000000000000000000000000000000;;		Sku       *string `json:"sku,omitempty"`
0000000000000000000000000000000000000000;;		Version   *string `json:"version,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ImageStorageProfile is describes a storage profile.
0000000000000000000000000000000000000000;;	type ImageStorageProfile struct {
0000000000000000000000000000000000000000;;		OsDisk    *ImageOSDisk     `json:"osDisk,omitempty"`
0000000000000000000000000000000000000000;;		DataDisks *[]ImageDataDisk `json:"dataDisks,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InnerError is inner error details.
0000000000000000000000000000000000000000;;	type InnerError struct {
0000000000000000000000000000000000000000;;		Exceptiontype *string `json:"exceptiontype,omitempty"`
0000000000000000000000000000000000000000;;		Errordetail   *string `json:"errordetail,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InstanceViewStatus is instance view status.
0000000000000000000000000000000000000000;;	type InstanceViewStatus struct {
0000000000000000000000000000000000000000;;		Code          *string          `json:"code,omitempty"`
0000000000000000000000000000000000000000;;		Level         StatusLevelTypes `json:"level,omitempty"`
0000000000000000000000000000000000000000;;		DisplayStatus *string          `json:"displayStatus,omitempty"`
0000000000000000000000000000000000000000;;		Message       *string          `json:"message,omitempty"`
0000000000000000000000000000000000000000;;		Time          *date.Time       `json:"time,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// KeyVaultKeyReference is describes a reference to Key Vault Key
0000000000000000000000000000000000000000;;	type KeyVaultKeyReference struct {
0000000000000000000000000000000000000000;;		KeyURL      *string      `json:"keyUrl,omitempty"`
0000000000000000000000000000000000000000;;		SourceVault *SubResource `json:"sourceVault,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// KeyVaultSecretReference is describes a reference to Key Vault Secret
0000000000000000000000000000000000000000;;	type KeyVaultSecretReference struct {
0000000000000000000000000000000000000000;;		SecretURL   *string      `json:"secretUrl,omitempty"`
0000000000000000000000000000000000000000;;		SourceVault *SubResource `json:"sourceVault,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LinuxConfiguration is describes Windows configuration of the OS Profile.
0000000000000000000000000000000000000000;;	type LinuxConfiguration struct {
0000000000000000000000000000000000000000;;		DisablePasswordAuthentication *bool             `json:"disablePasswordAuthentication,omitempty"`
0000000000000000000000000000000000000000;;		SSH                           *SSHConfiguration `json:"ssh,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListUsagesResult is the List Usages operation response.
0000000000000000000000000000000000000000;;	type ListUsagesResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]Usage `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		NextLink          *string  `json:"nextLink,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListUsagesResultPreparer prepares a request to retrieve the next set of results. It returns
0000000000000000000000000000000000000000;;	// nil if no more results exist.
0000000000000000000000000000000000000000;;	func (client ListUsagesResult) ListUsagesResultPreparer() (*http.Request, error) {
0000000000000000000000000000000000000000;;		if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return autorest.Prepare(&http.Request{},
0000000000000000000000000000000000000000;;			autorest.AsJSON(),
0000000000000000000000000000000000000000;;			autorest.AsGet(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(to.String(client.NextLink)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListVirtualMachineExtensionImage is
0000000000000000000000000000000000000000;;	type ListVirtualMachineExtensionImage struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]VirtualMachineExtensionImage `json:"value,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListVirtualMachineImageResource is
0000000000000000000000000000000000000000;;	type ListVirtualMachineImageResource struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]VirtualMachineImageResource `json:"value,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LongRunningOperationProperties is compute-specific operation properties,
0000000000000000000000000000000000000000;;	// including output
0000000000000000000000000000000000000000;;	type LongRunningOperationProperties struct {
0000000000000000000000000000000000000000;;		Output *map[string]interface{} `json:"output,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ManagedDiskParameters is the parameters of a managed disk.
0000000000000000000000000000000000000000;;	type ManagedDiskParameters struct {
0000000000000000000000000000000000000000;;		ID                 *string             `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		StorageAccountType StorageAccountTypes `json:"storageAccountType,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NetworkInterfaceReference is describes a network interface reference.
0000000000000000000000000000000000000000;;	type NetworkInterfaceReference struct {
0000000000000000000000000000000000000000;;		ID                                   *string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		*NetworkInterfaceReferenceProperties `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NetworkInterfaceReferenceProperties is describes a network interface
0000000000000000000000000000000000000000;;	// reference properties.
0000000000000000000000000000000000000000;;	type NetworkInterfaceReferenceProperties struct {
0000000000000000000000000000000000000000;;		Primary *bool `json:"primary,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NetworkProfile is describes a network profile.
0000000000000000000000000000000000000000;;	type NetworkProfile struct {
0000000000000000000000000000000000000000;;		NetworkInterfaces *[]NetworkInterfaceReference `json:"networkInterfaces,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OperationStatusResponse is operation status response
0000000000000000000000000000000000000000;;	type OperationStatusResponse struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Name              *string    `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Status            *string    `json:"status,omitempty"`
0000000000000000000000000000000000000000;;		StartTime         *date.Time `json:"startTime,omitempty"`
0000000000000000000000000000000000000000;;		EndTime           *date.Time `json:"endTime,omitempty"`
0000000000000000000000000000000000000000;;		Error             *APIError  `json:"error,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OSDisk is describes an Operating System disk.
0000000000000000000000000000000000000000;;	type OSDisk struct {
0000000000000000000000000000000000000000;;		OsType             OperatingSystemTypes    `json:"osType,omitempty"`
0000000000000000000000000000000000000000;;		EncryptionSettings *DiskEncryptionSettings `json:"encryptionSettings,omitempty"`
0000000000000000000000000000000000000000;;		Name               *string                 `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Vhd                *VirtualHardDisk        `json:"vhd,omitempty"`
0000000000000000000000000000000000000000;;		Image              *VirtualHardDisk        `json:"image,omitempty"`
0000000000000000000000000000000000000000;;		Caching            CachingTypes            `json:"caching,omitempty"`
0000000000000000000000000000000000000000;;		CreateOption       DiskCreateOptionTypes   `json:"createOption,omitempty"`
0000000000000000000000000000000000000000;;		DiskSizeGB         *int32                  `json:"diskSizeGB,omitempty"`
0000000000000000000000000000000000000000;;		ManagedDisk        *ManagedDiskParameters  `json:"managedDisk,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OSDiskImage is contains the os disk image information.
0000000000000000000000000000000000000000;;	type OSDiskImage struct {
0000000000000000000000000000000000000000;;		OperatingSystem OperatingSystemTypes `json:"operatingSystem,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OSProfile is describes an OS profile.
0000000000000000000000000000000000000000;;	type OSProfile struct {
0000000000000000000000000000000000000000;;		ComputerName         *string               `json:"computerName,omitempty"`
0000000000000000000000000000000000000000;;		AdminUsername        *string               `json:"adminUsername,omitempty"`
0000000000000000000000000000000000000000;;		AdminPassword        *string               `json:"adminPassword,omitempty"`
0000000000000000000000000000000000000000;;		CustomData           *string               `json:"customData,omitempty"`
0000000000000000000000000000000000000000;;		WindowsConfiguration *WindowsConfiguration `json:"windowsConfiguration,omitempty"`
0000000000000000000000000000000000000000;;		LinuxConfiguration   *LinuxConfiguration   `json:"linuxConfiguration,omitempty"`
0000000000000000000000000000000000000000;;		Secrets              *[]VaultSecretGroup   `json:"secrets,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Plan is plan for the resource.
0000000000000000000000000000000000000000;;	type Plan struct {
0000000000000000000000000000000000000000;;		Name          *string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Publisher     *string `json:"publisher,omitempty"`
0000000000000000000000000000000000000000;;		Product       *string `json:"product,omitempty"`
0000000000000000000000000000000000000000;;		PromotionCode *string `json:"promotionCode,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PurchasePlan is used for establishing the purchase context of any 3rd Party
0000000000000000000000000000000000000000;;	// artifact through MarketPlace.
0000000000000000000000000000000000000000;;	type PurchasePlan struct {
0000000000000000000000000000000000000000;;		Publisher *string `json:"publisher,omitempty"`
0000000000000000000000000000000000000000;;		Name      *string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Product   *string `json:"product,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Resource is the Resource model definition.
0000000000000000000000000000000000000000;;	type Resource struct {
0000000000000000000000000000000000000000;;		ID       *string             `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Name     *string             `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Type     *string             `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Location *string             `json:"location,omitempty"`
0000000000000000000000000000000000000000;;		Tags     *map[string]*string `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Sku is describes a virtual machine scale set sku.
0000000000000000000000000000000000000000;;	type Sku struct {
0000000000000000000000000000000000000000;;		Name     *string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Tier     *string `json:"tier,omitempty"`
0000000000000000000000000000000000000000;;		Capacity *int64  `json:"capacity,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SSHConfiguration is sSH configuration for Linux based VMs running on Azure
0000000000000000000000000000000000000000;;	type SSHConfiguration struct {
0000000000000000000000000000000000000000;;		PublicKeys *[]SSHPublicKey `json:"publicKeys,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SSHPublicKey is contains information about SSH certificate public key and
0000000000000000000000000000000000000000;;	// the path on the Linux VM where the public key is placed.
0000000000000000000000000000000000000000;;	type SSHPublicKey struct {
0000000000000000000000000000000000000000;;		Path    *string `json:"path,omitempty"`
0000000000000000000000000000000000000000;;		KeyData *string `json:"keyData,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StorageProfile is describes a storage profile.
0000000000000000000000000000000000000000;;	type StorageProfile struct {
0000000000000000000000000000000000000000;;		ImageReference *ImageReference `json:"imageReference,omitempty"`
0000000000000000000000000000000000000000;;		OsDisk         *OSDisk         `json:"osDisk,omitempty"`
0000000000000000000000000000000000000000;;		DataDisks      *[]DataDisk     `json:"dataDisks,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SubResource is
0000000000000000000000000000000000000000;;	type SubResource struct {
0000000000000000000000000000000000000000;;		ID *string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SubResourceReadOnly is
0000000000000000000000000000000000000000;;	type SubResourceReadOnly struct {
0000000000000000000000000000000000000000;;		ID *string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpgradePolicy is describes an upgrade policy - automatic or manual.
0000000000000000000000000000000000000000;;	type UpgradePolicy struct {
0000000000000000000000000000000000000000;;		Mode UpgradeMode `json:"mode,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Usage is describes Compute Resource Usage.
0000000000000000000000000000000000000000;;	type Usage struct {
0000000000000000000000000000000000000000;;		Unit         *string    `json:"unit,omitempty"`
0000000000000000000000000000000000000000;;		CurrentValue *int32     `json:"currentValue,omitempty"`
0000000000000000000000000000000000000000;;		Limit        *int64     `json:"limit,omitempty"`
0000000000000000000000000000000000000000;;		Name         *UsageName `json:"name,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UsageName is the Usage Names.
0000000000000000000000000000000000000000;;	type UsageName struct {
0000000000000000000000000000000000000000;;		Value          *string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		LocalizedValue *string `json:"localizedValue,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VaultCertificate is describes a single certificate reference in a Key Vault,
0000000000000000000000000000000000000000;;	// and where the certificate should reside on the VM.
0000000000000000000000000000000000000000;;	type VaultCertificate struct {
0000000000000000000000000000000000000000;;		CertificateURL   *string `json:"certificateUrl,omitempty"`
0000000000000000000000000000000000000000;;		CertificateStore *string `json:"certificateStore,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VaultSecretGroup is describes a set of certificates which are all in the
0000000000000000000000000000000000000000;;	// same Key Vault.
0000000000000000000000000000000000000000;;	type VaultSecretGroup struct {
0000000000000000000000000000000000000000;;		SourceVault       *SubResource        `json:"sourceVault,omitempty"`
0000000000000000000000000000000000000000;;		VaultCertificates *[]VaultCertificate `json:"vaultCertificates,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualHardDisk is describes the uri of a disk.
0000000000000000000000000000000000000000;;	type VirtualHardDisk struct {
0000000000000000000000000000000000000000;;		URI *string `json:"uri,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachine is describes a Virtual Machine.
0000000000000000000000000000000000000000;;	type VirtualMachine struct {
0000000000000000000000000000000000000000;;		autorest.Response         `json:"-"`
0000000000000000000000000000000000000000;;		ID                        *string             `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Name                      *string             `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Type                      *string             `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Location                  *string             `json:"location,omitempty"`
0000000000000000000000000000000000000000;;		Tags                      *map[string]*string `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Plan                      *Plan               `json:"plan,omitempty"`
0000000000000000000000000000000000000000;;		*VirtualMachineProperties `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Resources                 *[]VirtualMachineExtension `json:"resources,omitempty"`
0000000000000000000000000000000000000000;;		Identity                  *VirtualMachineIdentity    `json:"identity,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineAgentInstanceView is the instance view of the VM Agent running
0000000000000000000000000000000000000000;;	// on the virtual machine.
0000000000000000000000000000000000000000;;	type VirtualMachineAgentInstanceView struct {
0000000000000000000000000000000000000000;;		VMAgentVersion    *string                                       `json:"vmAgentVersion,omitempty"`
0000000000000000000000000000000000000000;;		ExtensionHandlers *[]VirtualMachineExtensionHandlerInstanceView `json:"extensionHandlers,omitempty"`
0000000000000000000000000000000000000000;;		Statuses          *[]InstanceViewStatus                         `json:"statuses,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineCaptureParameters is capture Virtual Machine parameters.
0000000000000000000000000000000000000000;;	type VirtualMachineCaptureParameters struct {
0000000000000000000000000000000000000000;;		VhdPrefix                *string `json:"vhdPrefix,omitempty"`
0000000000000000000000000000000000000000;;		DestinationContainerName *string `json:"destinationContainerName,omitempty"`
0000000000000000000000000000000000000000;;		OverwriteVhds            *bool   `json:"overwriteVhds,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineCaptureResult is resource Id.
0000000000000000000000000000000000000000;;	type VirtualMachineCaptureResult struct {
0000000000000000000000000000000000000000;;		autorest.Response                      `json:"-"`
0000000000000000000000000000000000000000;;		ID                                     *string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		*VirtualMachineCaptureResultProperties `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineCaptureResultProperties is compute-specific operation
0000000000000000000000000000000000000000;;	// properties, including output
0000000000000000000000000000000000000000;;	type VirtualMachineCaptureResultProperties struct {
0000000000000000000000000000000000000000;;		Output *map[string]interface{} `json:"output,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineExtension is describes a Virtual Machine Extension.
0000000000000000000000000000000000000000;;	type VirtualMachineExtension struct {
0000000000000000000000000000000000000000;;		autorest.Response                  `json:"-"`
0000000000000000000000000000000000000000;;		ID                                 *string             `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Name                               *string             `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Type                               *string             `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Location                           *string             `json:"location,omitempty"`
0000000000000000000000000000000000000000;;		Tags                               *map[string]*string `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		*VirtualMachineExtensionProperties `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineExtensionHandlerInstanceView is the instance view of a virtual
0000000000000000000000000000000000000000;;	// machine extension handler.
0000000000000000000000000000000000000000;;	type VirtualMachineExtensionHandlerInstanceView struct {
0000000000000000000000000000000000000000;;		Type               *string             `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		TypeHandlerVersion *string             `json:"typeHandlerVersion,omitempty"`
0000000000000000000000000000000000000000;;		Status             *InstanceViewStatus `json:"status,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineExtensionImage is describes a Virtual Machine Extension Image.
0000000000000000000000000000000000000000;;	type VirtualMachineExtensionImage struct {
0000000000000000000000000000000000000000;;		autorest.Response                       `json:"-"`
0000000000000000000000000000000000000000;;		ID                                      *string             `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Name                                    *string             `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Type                                    *string             `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Location                                *string             `json:"location,omitempty"`
0000000000000000000000000000000000000000;;		Tags                                    *map[string]*string `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		*VirtualMachineExtensionImageProperties `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineExtensionImageProperties is describes the properties of a
0000000000000000000000000000000000000000;;	// Virtual Machine Extension Image.
0000000000000000000000000000000000000000;;	type VirtualMachineExtensionImageProperties struct {
0000000000000000000000000000000000000000;;		OperatingSystem            *string `json:"operatingSystem,omitempty"`
0000000000000000000000000000000000000000;;		ComputeRole                *string `json:"computeRole,omitempty"`
0000000000000000000000000000000000000000;;		HandlerSchema              *string `json:"handlerSchema,omitempty"`
0000000000000000000000000000000000000000;;		VMScaleSetEnabled          *bool   `json:"vmScaleSetEnabled,omitempty"`
0000000000000000000000000000000000000000;;		SupportsMultipleExtensions *bool   `json:"supportsMultipleExtensions,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineExtensionInstanceView is the instance view of a virtual
0000000000000000000000000000000000000000;;	// machine extension.
0000000000000000000000000000000000000000;;	type VirtualMachineExtensionInstanceView struct {
0000000000000000000000000000000000000000;;		Name               *string               `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Type               *string               `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		TypeHandlerVersion *string               `json:"typeHandlerVersion,omitempty"`
0000000000000000000000000000000000000000;;		Substatuses        *[]InstanceViewStatus `json:"substatuses,omitempty"`
0000000000000000000000000000000000000000;;		Statuses           *[]InstanceViewStatus `json:"statuses,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineExtensionProperties is describes the properties of a Virtual
0000000000000000000000000000000000000000;;	// Machine Extension.
0000000000000000000000000000000000000000;;	type VirtualMachineExtensionProperties struct {
0000000000000000000000000000000000000000;;		ForceUpdateTag          *string                              `json:"forceUpdateTag,omitempty"`
0000000000000000000000000000000000000000;;		Publisher               *string                              `json:"publisher,omitempty"`
0000000000000000000000000000000000000000;;		Type                    *string                              `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		TypeHandlerVersion      *string                              `json:"typeHandlerVersion,omitempty"`
0000000000000000000000000000000000000000;;		AutoUpgradeMinorVersion *bool                                `json:"autoUpgradeMinorVersion,omitempty"`
0000000000000000000000000000000000000000;;		Settings                *map[string]interface{}              `json:"settings,omitempty"`
0000000000000000000000000000000000000000;;		ProtectedSettings       *map[string]interface{}              `json:"protectedSettings,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState       *string                              `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;		InstanceView            *VirtualMachineExtensionInstanceView `json:"instanceView,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineIdentity is identity for the virtual machine.
0000000000000000000000000000000000000000;;	type VirtualMachineIdentity struct {
0000000000000000000000000000000000000000;;		PrincipalID *string              `json:"principalId,omitempty"`
0000000000000000000000000000000000000000;;		TenantID    *string              `json:"tenantId,omitempty"`
0000000000000000000000000000000000000000;;		Type        ResourceIdentityType `json:"type,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineImage is describes a Virtual Machine Image.
0000000000000000000000000000000000000000;;	type VirtualMachineImage struct {
0000000000000000000000000000000000000000;;		autorest.Response              `json:"-"`
0000000000000000000000000000000000000000;;		ID                             *string             `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Name                           *string             `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Location                       *string             `json:"location,omitempty"`
0000000000000000000000000000000000000000;;		Tags                           *map[string]*string `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		*VirtualMachineImageProperties `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineImageProperties is describes the properties of a Virtual
0000000000000000000000000000000000000000;;	// Machine Image.
0000000000000000000000000000000000000000;;	type VirtualMachineImageProperties struct {
0000000000000000000000000000000000000000;;		Plan           *PurchasePlan    `json:"plan,omitempty"`
0000000000000000000000000000000000000000;;		OsDiskImage    *OSDiskImage     `json:"osDiskImage,omitempty"`
0000000000000000000000000000000000000000;;		DataDiskImages *[]DataDiskImage `json:"dataDiskImages,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineImageResource is virtual machine image resource information.
0000000000000000000000000000000000000000;;	type VirtualMachineImageResource struct {
0000000000000000000000000000000000000000;;		ID       *string             `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Name     *string             `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Location *string             `json:"location,omitempty"`
0000000000000000000000000000000000000000;;		Tags     *map[string]*string `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineInstanceView is the instance view of a virtual machine.
0000000000000000000000000000000000000000;;	type VirtualMachineInstanceView struct {
0000000000000000000000000000000000000000;;		PlatformUpdateDomain *int32                                 `json:"platformUpdateDomain,omitempty"`
0000000000000000000000000000000000000000;;		PlatformFaultDomain  *int32                                 `json:"platformFaultDomain,omitempty"`
0000000000000000000000000000000000000000;;		RdpThumbPrint        *string                                `json:"rdpThumbPrint,omitempty"`
0000000000000000000000000000000000000000;;		VMAgent              *VirtualMachineAgentInstanceView       `json:"vmAgent,omitempty"`
0000000000000000000000000000000000000000;;		Disks                *[]DiskInstanceView                    `json:"disks,omitempty"`
0000000000000000000000000000000000000000;;		Extensions           *[]VirtualMachineExtensionInstanceView `json:"extensions,omitempty"`
0000000000000000000000000000000000000000;;		BootDiagnostics      *BootDiagnosticsInstanceView           `json:"bootDiagnostics,omitempty"`
0000000000000000000000000000000000000000;;		Statuses             *[]InstanceViewStatus                  `json:"statuses,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineListResult is the List Virtual Machine operation response.
0000000000000000000000000000000000000000;;	type VirtualMachineListResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]VirtualMachine `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		NextLink          *string           `json:"nextLink,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineListResultPreparer prepares a request to retrieve the next set of results. It returns
0000000000000000000000000000000000000000;;	// nil if no more results exist.
0000000000000000000000000000000000000000;;	func (client VirtualMachineListResult) VirtualMachineListResultPreparer() (*http.Request, error) {
0000000000000000000000000000000000000000;;		if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return autorest.Prepare(&http.Request{},
0000000000000000000000000000000000000000;;			autorest.AsJSON(),
0000000000000000000000000000000000000000;;			autorest.AsGet(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(to.String(client.NextLink)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineProperties is describes the properties of a Virtual Machine.
0000000000000000000000000000000000000000;;	type VirtualMachineProperties struct {
0000000000000000000000000000000000000000;;		HardwareProfile    *HardwareProfile            `json:"hardwareProfile,omitempty"`
0000000000000000000000000000000000000000;;		StorageProfile     *StorageProfile             `json:"storageProfile,omitempty"`
0000000000000000000000000000000000000000;;		OsProfile          *OSProfile                  `json:"osProfile,omitempty"`
0000000000000000000000000000000000000000;;		NetworkProfile     *NetworkProfile             `json:"networkProfile,omitempty"`
0000000000000000000000000000000000000000;;		DiagnosticsProfile *DiagnosticsProfile         `json:"diagnosticsProfile,omitempty"`
0000000000000000000000000000000000000000;;		AvailabilitySet    *SubResource                `json:"availabilitySet,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState  *string                     `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;		InstanceView       *VirtualMachineInstanceView `json:"instanceView,omitempty"`
0000000000000000000000000000000000000000;;		LicenseType        *string                     `json:"licenseType,omitempty"`
0000000000000000000000000000000000000000;;		VMID               *string                     `json:"vmId,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineScaleSet is describes a Virtual Machine Scale Set.
0000000000000000000000000000000000000000;;	type VirtualMachineScaleSet struct {
0000000000000000000000000000000000000000;;		autorest.Response                 `json:"-"`
0000000000000000000000000000000000000000;;		ID                                *string             `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Name                              *string             `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Type                              *string             `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Location                          *string             `json:"location,omitempty"`
0000000000000000000000000000000000000000;;		Tags                              *map[string]*string `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Sku                               *Sku                `json:"sku,omitempty"`
0000000000000000000000000000000000000000;;		Plan                              *Plan               `json:"plan,omitempty"`
0000000000000000000000000000000000000000;;		*VirtualMachineScaleSetProperties `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Identity                          *VirtualMachineScaleSetIdentity `json:"identity,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineScaleSetDataDisk is describes a virtual machine scale set data
0000000000000000000000000000000000000000;;	// disk.
0000000000000000000000000000000000000000;;	type VirtualMachineScaleSetDataDisk struct {
0000000000000000000000000000000000000000;;		Name         *string                                      `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Lun          *int32                                       `json:"lun,omitempty"`
0000000000000000000000000000000000000000;;		Caching      CachingTypes                                 `json:"caching,omitempty"`
0000000000000000000000000000000000000000;;		CreateOption DiskCreateOptionTypes                        `json:"createOption,omitempty"`
0000000000000000000000000000000000000000;;		DiskSizeGB   *int32                                       `json:"diskSizeGB,omitempty"`
0000000000000000000000000000000000000000;;		ManagedDisk  *VirtualMachineScaleSetManagedDiskParameters `json:"managedDisk,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineScaleSetExtension is describes a Virtual Machine Scale Set
0000000000000000000000000000000000000000;;	// Extension.
0000000000000000000000000000000000000000;;	type VirtualMachineScaleSetExtension struct {
0000000000000000000000000000000000000000;;		ID                                         *string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Name                                       *string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		*VirtualMachineScaleSetExtensionProperties `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineScaleSetExtensionProfile is describes a virtual machine scale
0000000000000000000000000000000000000000;;	// set extension profile.
0000000000000000000000000000000000000000;;	type VirtualMachineScaleSetExtensionProfile struct {
0000000000000000000000000000000000000000;;		Extensions *[]VirtualMachineScaleSetExtension `json:"extensions,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineScaleSetExtensionProperties is describes the properties of a
0000000000000000000000000000000000000000;;	// Virtual Machine Scale Set Extension.
0000000000000000000000000000000000000000;;	type VirtualMachineScaleSetExtensionProperties struct {
0000000000000000000000000000000000000000;;		Publisher               *string                 `json:"publisher,omitempty"`
0000000000000000000000000000000000000000;;		Type                    *string                 `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		TypeHandlerVersion      *string                 `json:"typeHandlerVersion,omitempty"`
0000000000000000000000000000000000000000;;		AutoUpgradeMinorVersion *bool                   `json:"autoUpgradeMinorVersion,omitempty"`
0000000000000000000000000000000000000000;;		Settings                *map[string]interface{} `json:"settings,omitempty"`
0000000000000000000000000000000000000000;;		ProtectedSettings       *map[string]interface{} `json:"protectedSettings,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState       *string                 `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineScaleSetIdentity is identity for the virtual machine scale
0000000000000000000000000000000000000000;;	// set.
0000000000000000000000000000000000000000;;	type VirtualMachineScaleSetIdentity struct {
0000000000000000000000000000000000000000;;		PrincipalID *string              `json:"principalId,omitempty"`
0000000000000000000000000000000000000000;;		TenantID    *string              `json:"tenantId,omitempty"`
0000000000000000000000000000000000000000;;		Type        ResourceIdentityType `json:"type,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineScaleSetInstanceView is the instance view of a virtual machine
0000000000000000000000000000000000000000;;	// scale set.
0000000000000000000000000000000000000000;;	type VirtualMachineScaleSetInstanceView struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		VirtualMachine    *VirtualMachineScaleSetInstanceViewStatusesSummary `json:"virtualMachine,omitempty"`
0000000000000000000000000000000000000000;;		Extensions        *[]VirtualMachineScaleSetVMExtensionsSummary       `json:"extensions,omitempty"`
0000000000000000000000000000000000000000;;		Statuses          *[]InstanceViewStatus                              `json:"statuses,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineScaleSetInstanceViewStatusesSummary is instance view statuses
0000000000000000000000000000000000000000;;	// summary for virtual machines of a virtual machine scale set.
0000000000000000000000000000000000000000;;	type VirtualMachineScaleSetInstanceViewStatusesSummary struct {
0000000000000000000000000000000000000000;;		StatusesSummary *[]VirtualMachineStatusCodeCount `json:"statusesSummary,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineScaleSetIPConfiguration is describes a virtual machine scale
0000000000000000000000000000000000000000;;	// set network profile's IP configuration.
0000000000000000000000000000000000000000;;	type VirtualMachineScaleSetIPConfiguration struct {
0000000000000000000000000000000000000000;;		ID                                               *string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Name                                             *string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		*VirtualMachineScaleSetIPConfigurationProperties `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineScaleSetIPConfigurationProperties is describes a virtual
0000000000000000000000000000000000000000;;	// machine scale set network profile's IP configuration properties.
0000000000000000000000000000000000000000;;	type VirtualMachineScaleSetIPConfigurationProperties struct {
0000000000000000000000000000000000000000;;		Subnet                                *APIEntityReference `json:"subnet,omitempty"`
0000000000000000000000000000000000000000;;		ApplicationGatewayBackendAddressPools *[]SubResource      `json:"applicationGatewayBackendAddressPools,omitempty"`
0000000000000000000000000000000000000000;;		LoadBalancerBackendAddressPools       *[]SubResource      `json:"loadBalancerBackendAddressPools,omitempty"`
0000000000000000000000000000000000000000;;		LoadBalancerInboundNatPools           *[]SubResource      `json:"loadBalancerInboundNatPools,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineScaleSetListResult is the List Virtual Machine operation
0000000000000000000000000000000000000000;;	// response.
0000000000000000000000000000000000000000;;	type VirtualMachineScaleSetListResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]VirtualMachineScaleSet `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		NextLink          *string                   `json:"nextLink,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineScaleSetListResultPreparer prepares a request to retrieve the next set of results. It returns
0000000000000000000000000000000000000000;;	// nil if no more results exist.
0000000000000000000000000000000000000000;;	func (client VirtualMachineScaleSetListResult) VirtualMachineScaleSetListResultPreparer() (*http.Request, error) {
0000000000000000000000000000000000000000;;		if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return autorest.Prepare(&http.Request{},
0000000000000000000000000000000000000000;;			autorest.AsJSON(),
0000000000000000000000000000000000000000;;			autorest.AsGet(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(to.String(client.NextLink)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineScaleSetListSkusResult is the Virtual Machine Scale Set List
0000000000000000000000000000000000000000;;	// Skus operation response.
0000000000000000000000000000000000000000;;	type VirtualMachineScaleSetListSkusResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]VirtualMachineScaleSetSku `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		NextLink          *string                      `json:"nextLink,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineScaleSetListSkusResultPreparer prepares a request to retrieve the next set of results. It returns
0000000000000000000000000000000000000000;;	// nil if no more results exist.
0000000000000000000000000000000000000000;;	func (client VirtualMachineScaleSetListSkusResult) VirtualMachineScaleSetListSkusResultPreparer() (*http.Request, error) {
0000000000000000000000000000000000000000;;		if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return autorest.Prepare(&http.Request{},
0000000000000000000000000000000000000000;;			autorest.AsJSON(),
0000000000000000000000000000000000000000;;			autorest.AsGet(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(to.String(client.NextLink)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineScaleSetListWithLinkResult is the List Virtual Machine
0000000000000000000000000000000000000000;;	// operation response.
0000000000000000000000000000000000000000;;	type VirtualMachineScaleSetListWithLinkResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]VirtualMachineScaleSet `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		NextLink          *string                   `json:"nextLink,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineScaleSetListWithLinkResultPreparer prepares a request to retrieve the next set of results. It returns
0000000000000000000000000000000000000000;;	// nil if no more results exist.
0000000000000000000000000000000000000000;;	func (client VirtualMachineScaleSetListWithLinkResult) VirtualMachineScaleSetListWithLinkResultPreparer() (*http.Request, error) {
0000000000000000000000000000000000000000;;		if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return autorest.Prepare(&http.Request{},
0000000000000000000000000000000000000000;;			autorest.AsJSON(),
0000000000000000000000000000000000000000;;			autorest.AsGet(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(to.String(client.NextLink)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineScaleSetManagedDiskParameters is describes the parameters of a
0000000000000000000000000000000000000000;;	// ScaleSet managed disk.
0000000000000000000000000000000000000000;;	type VirtualMachineScaleSetManagedDiskParameters struct {
0000000000000000000000000000000000000000;;		StorageAccountType StorageAccountTypes `json:"storageAccountType,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineScaleSetNetworkConfiguration is describes a virtual machine
0000000000000000000000000000000000000000;;	// scale set network profile's network configurations.
0000000000000000000000000000000000000000;;	type VirtualMachineScaleSetNetworkConfiguration struct {
0000000000000000000000000000000000000000;;		ID                                                    *string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Name                                                  *string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		*VirtualMachineScaleSetNetworkConfigurationProperties `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineScaleSetNetworkConfigurationProperties is describes a virtual
0000000000000000000000000000000000000000;;	// machine scale set network profile's IP configuration.
0000000000000000000000000000000000000000;;	type VirtualMachineScaleSetNetworkConfigurationProperties struct {
0000000000000000000000000000000000000000;;		Primary          *bool                                    `json:"primary,omitempty"`
0000000000000000000000000000000000000000;;		IPConfigurations *[]VirtualMachineScaleSetIPConfiguration `json:"ipConfigurations,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineScaleSetNetworkProfile is describes a virtual machine scale
0000000000000000000000000000000000000000;;	// set network profile.
0000000000000000000000000000000000000000;;	type VirtualMachineScaleSetNetworkProfile struct {
0000000000000000000000000000000000000000;;		NetworkInterfaceConfigurations *[]VirtualMachineScaleSetNetworkConfiguration `json:"networkInterfaceConfigurations,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineScaleSetOSDisk is describes a virtual machine scale set
0000000000000000000000000000000000000000;;	// operating system disk.
0000000000000000000000000000000000000000;;	type VirtualMachineScaleSetOSDisk struct {
0000000000000000000000000000000000000000;;		Name          *string                                      `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Caching       CachingTypes                                 `json:"caching,omitempty"`
0000000000000000000000000000000000000000;;		CreateOption  DiskCreateOptionTypes                        `json:"createOption,omitempty"`
0000000000000000000000000000000000000000;;		OsType        OperatingSystemTypes                         `json:"osType,omitempty"`
0000000000000000000000000000000000000000;;		Image         *VirtualHardDisk                             `json:"image,omitempty"`
0000000000000000000000000000000000000000;;		VhdContainers *[]string                                    `json:"vhdContainers,omitempty"`
0000000000000000000000000000000000000000;;		ManagedDisk   *VirtualMachineScaleSetManagedDiskParameters `json:"managedDisk,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineScaleSetOSProfile is describes a virtual machine scale set OS
0000000000000000000000000000000000000000;;	// profile.
0000000000000000000000000000000000000000;;	type VirtualMachineScaleSetOSProfile struct {
0000000000000000000000000000000000000000;;		ComputerNamePrefix   *string               `json:"computerNamePrefix,omitempty"`
0000000000000000000000000000000000000000;;		AdminUsername        *string               `json:"adminUsername,omitempty"`
0000000000000000000000000000000000000000;;		AdminPassword        *string               `json:"adminPassword,omitempty"`
0000000000000000000000000000000000000000;;		CustomData           *string               `json:"customData,omitempty"`
0000000000000000000000000000000000000000;;		WindowsConfiguration *WindowsConfiguration `json:"windowsConfiguration,omitempty"`
0000000000000000000000000000000000000000;;		LinuxConfiguration   *LinuxConfiguration   `json:"linuxConfiguration,omitempty"`
0000000000000000000000000000000000000000;;		Secrets              *[]VaultSecretGroup   `json:"secrets,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineScaleSetProperties is describes the properties of a Virtual
0000000000000000000000000000000000000000;;	// Machine Scale Set.
0000000000000000000000000000000000000000;;	type VirtualMachineScaleSetProperties struct {
0000000000000000000000000000000000000000;;		UpgradePolicy         *UpgradePolicy                   `json:"upgradePolicy,omitempty"`
0000000000000000000000000000000000000000;;		VirtualMachineProfile *VirtualMachineScaleSetVMProfile `json:"virtualMachineProfile,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState     *string                          `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;		Overprovision         *bool                            `json:"overprovision,omitempty"`
0000000000000000000000000000000000000000;;		SinglePlacementGroup  *bool                            `json:"singlePlacementGroup,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineScaleSetSku is describes an available virtual machine scale
0000000000000000000000000000000000000000;;	// set sku.
0000000000000000000000000000000000000000;;	type VirtualMachineScaleSetSku struct {
0000000000000000000000000000000000000000;;		ResourceType *string                            `json:"resourceType,omitempty"`
0000000000000000000000000000000000000000;;		Sku          *Sku                               `json:"sku,omitempty"`
0000000000000000000000000000000000000000;;		Capacity     *VirtualMachineScaleSetSkuCapacity `json:"capacity,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineScaleSetSkuCapacity is describes scaling information of a sku.
0000000000000000000000000000000000000000;;	type VirtualMachineScaleSetSkuCapacity struct {
0000000000000000000000000000000000000000;;		Minimum         *int64                             `json:"minimum,omitempty"`
0000000000000000000000000000000000000000;;		Maximum         *int64                             `json:"maximum,omitempty"`
0000000000000000000000000000000000000000;;		DefaultCapacity *int64                             `json:"defaultCapacity,omitempty"`
0000000000000000000000000000000000000000;;		ScaleType       VirtualMachineScaleSetSkuScaleType `json:"scaleType,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineScaleSetStorageProfile is describes a virtual machine scale
0000000000000000000000000000000000000000;;	// set storage profile.
0000000000000000000000000000000000000000;;	type VirtualMachineScaleSetStorageProfile struct {
0000000000000000000000000000000000000000;;		ImageReference *ImageReference                   `json:"imageReference,omitempty"`
0000000000000000000000000000000000000000;;		OsDisk         *VirtualMachineScaleSetOSDisk     `json:"osDisk,omitempty"`
0000000000000000000000000000000000000000;;		DataDisks      *[]VirtualMachineScaleSetDataDisk `json:"dataDisks,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineScaleSetVM is describes a virtual machine scale set virtual
0000000000000000000000000000000000000000;;	// machine.
0000000000000000000000000000000000000000;;	type VirtualMachineScaleSetVM struct {
0000000000000000000000000000000000000000;;		autorest.Response                   `json:"-"`
0000000000000000000000000000000000000000;;		ID                                  *string             `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Name                                *string             `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Type                                *string             `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Location                            *string             `json:"location,omitempty"`
0000000000000000000000000000000000000000;;		Tags                                *map[string]*string `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		InstanceID                          *string             `json:"instanceId,omitempty"`
0000000000000000000000000000000000000000;;		Sku                                 *Sku                `json:"sku,omitempty"`
0000000000000000000000000000000000000000;;		*VirtualMachineScaleSetVMProperties `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Plan                                *Plan                      `json:"plan,omitempty"`
0000000000000000000000000000000000000000;;		Resources                           *[]VirtualMachineExtension `json:"resources,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineScaleSetVMExtensionsSummary is extensions summary for virtual
0000000000000000000000000000000000000000;;	// machines of a virtual machine scale set.
0000000000000000000000000000000000000000;;	type VirtualMachineScaleSetVMExtensionsSummary struct {
0000000000000000000000000000000000000000;;		Name            *string                          `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		StatusesSummary *[]VirtualMachineStatusCodeCount `json:"statusesSummary,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineScaleSetVMInstanceIDs is specifies a list of virtual machine
0000000000000000000000000000000000000000;;	// instance IDs from the VM scale set.
0000000000000000000000000000000000000000;;	type VirtualMachineScaleSetVMInstanceIDs struct {
0000000000000000000000000000000000000000;;		InstanceIds *[]string `json:"instanceIds,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineScaleSetVMInstanceRequiredIDs is specifies a list of virtual
0000000000000000000000000000000000000000;;	// machine instance IDs from the VM scale set.
0000000000000000000000000000000000000000;;	type VirtualMachineScaleSetVMInstanceRequiredIDs struct {
0000000000000000000000000000000000000000;;		InstanceIds *[]string `json:"instanceIds,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineScaleSetVMInstanceView is the instance view of a virtual
0000000000000000000000000000000000000000;;	// machine scale set VM.
0000000000000000000000000000000000000000;;	type VirtualMachineScaleSetVMInstanceView struct {
0000000000000000000000000000000000000000;;		autorest.Response    `json:"-"`
0000000000000000000000000000000000000000;;		PlatformUpdateDomain *int32                                 `json:"platformUpdateDomain,omitempty"`
0000000000000000000000000000000000000000;;		PlatformFaultDomain  *int32                                 `json:"platformFaultDomain,omitempty"`
0000000000000000000000000000000000000000;;		RdpThumbPrint        *string                                `json:"rdpThumbPrint,omitempty"`
0000000000000000000000000000000000000000;;		VMAgent              *VirtualMachineAgentInstanceView       `json:"vmAgent,omitempty"`
0000000000000000000000000000000000000000;;		Disks                *[]DiskInstanceView                    `json:"disks,omitempty"`
0000000000000000000000000000000000000000;;		Extensions           *[]VirtualMachineExtensionInstanceView `json:"extensions,omitempty"`
0000000000000000000000000000000000000000;;		BootDiagnostics      *BootDiagnosticsInstanceView           `json:"bootDiagnostics,omitempty"`
0000000000000000000000000000000000000000;;		Statuses             *[]InstanceViewStatus                  `json:"statuses,omitempty"`
0000000000000000000000000000000000000000;;		PlacementGroupID     *string                                `json:"placementGroupId,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineScaleSetVMListResult is the List Virtual Machine Scale Set VMs
0000000000000000000000000000000000000000;;	// operation response.
0000000000000000000000000000000000000000;;	type VirtualMachineScaleSetVMListResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]VirtualMachineScaleSetVM `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		NextLink          *string                     `json:"nextLink,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineScaleSetVMListResultPreparer prepares a request to retrieve the next set of results. It returns
0000000000000000000000000000000000000000;;	// nil if no more results exist.
0000000000000000000000000000000000000000;;	func (client VirtualMachineScaleSetVMListResult) VirtualMachineScaleSetVMListResultPreparer() (*http.Request, error) {
0000000000000000000000000000000000000000;;		if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return autorest.Prepare(&http.Request{},
0000000000000000000000000000000000000000;;			autorest.AsJSON(),
0000000000000000000000000000000000000000;;			autorest.AsGet(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(to.String(client.NextLink)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineScaleSetVMProfile is describes a virtual machine scale set
0000000000000000000000000000000000000000;;	// virtual machine profile.
0000000000000000000000000000000000000000;;	type VirtualMachineScaleSetVMProfile struct {
0000000000000000000000000000000000000000;;		OsProfile        *VirtualMachineScaleSetOSProfile        `json:"osProfile,omitempty"`
0000000000000000000000000000000000000000;;		StorageProfile   *VirtualMachineScaleSetStorageProfile   `json:"storageProfile,omitempty"`
0000000000000000000000000000000000000000;;		NetworkProfile   *VirtualMachineScaleSetNetworkProfile   `json:"networkProfile,omitempty"`
0000000000000000000000000000000000000000;;		ExtensionProfile *VirtualMachineScaleSetExtensionProfile `json:"extensionProfile,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineScaleSetVMProperties is describes the properties of a virtual
0000000000000000000000000000000000000000;;	// machine scale set virtual machine.
0000000000000000000000000000000000000000;;	type VirtualMachineScaleSetVMProperties struct {
0000000000000000000000000000000000000000;;		LatestModelApplied *bool                       `json:"latestModelApplied,omitempty"`
0000000000000000000000000000000000000000;;		VMID               *string                     `json:"vmId,omitempty"`
0000000000000000000000000000000000000000;;		InstanceView       *VirtualMachineInstanceView `json:"instanceView,omitempty"`
0000000000000000000000000000000000000000;;		HardwareProfile    *HardwareProfile            `json:"hardwareProfile,omitempty"`
0000000000000000000000000000000000000000;;		StorageProfile     *StorageProfile             `json:"storageProfile,omitempty"`
0000000000000000000000000000000000000000;;		OsProfile          *OSProfile                  `json:"osProfile,omitempty"`
0000000000000000000000000000000000000000;;		NetworkProfile     *NetworkProfile             `json:"networkProfile,omitempty"`
0000000000000000000000000000000000000000;;		DiagnosticsProfile *DiagnosticsProfile         `json:"diagnosticsProfile,omitempty"`
0000000000000000000000000000000000000000;;		AvailabilitySet    *SubResource                `json:"availabilitySet,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState  *string                     `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;		LicenseType        *string                     `json:"licenseType,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineSize is describes the properties of a VM size.
0000000000000000000000000000000000000000;;	type VirtualMachineSize struct {
0000000000000000000000000000000000000000;;		Name                 *string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		NumberOfCores        *int32  `json:"numberOfCores,omitempty"`
0000000000000000000000000000000000000000;;		OsDiskSizeInMB       *int32  `json:"osDiskSizeInMB,omitempty"`
0000000000000000000000000000000000000000;;		ResourceDiskSizeInMB *int32  `json:"resourceDiskSizeInMB,omitempty"`
0000000000000000000000000000000000000000;;		MemoryInMB           *int32  `json:"memoryInMB,omitempty"`
0000000000000000000000000000000000000000;;		MaxDataDiskCount     *int32  `json:"maxDataDiskCount,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineSizeListResult is the List Virtual Machine operation response.
0000000000000000000000000000000000000000;;	type VirtualMachineSizeListResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]VirtualMachineSize `json:"value,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualMachineStatusCodeCount is the status code and count of the virtual
0000000000000000000000000000000000000000;;	// machine scale set instance view status summary.
0000000000000000000000000000000000000000;;	type VirtualMachineStatusCodeCount struct {
0000000000000000000000000000000000000000;;		Code  *string `json:"code,omitempty"`
0000000000000000000000000000000000000000;;		Count *int32  `json:"count,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WindowsConfiguration is describes Windows Configuration of the OS Profile.
0000000000000000000000000000000000000000;;	type WindowsConfiguration struct {
0000000000000000000000000000000000000000;;		ProvisionVMAgent          *bool                        `json:"provisionVMAgent,omitempty"`
0000000000000000000000000000000000000000;;		EnableAutomaticUpdates    *bool                        `json:"enableAutomaticUpdates,omitempty"`
0000000000000000000000000000000000000000;;		TimeZone                  *string                      `json:"timeZone,omitempty"`
0000000000000000000000000000000000000000;;		AdditionalUnattendContent *[]AdditionalUnattendContent `json:"additionalUnattendContent,omitempty"`
0000000000000000000000000000000000000000;;		WinRM                     *WinRMConfiguration          `json:"winRM,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WinRMConfiguration is describes Windows Remote Management configuration of
0000000000000000000000000000000000000000;;	// the VM
0000000000000000000000000000000000000000;;	type WinRMConfiguration struct {
0000000000000000000000000000000000000000;;		Listeners *[]WinRMListener `json:"listeners,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WinRMListener is describes Protocol and thumbprint of Windows Remote
0000000000000000000000000000000000000000;;	// Management listener
0000000000000000000000000000000000000000;;	type WinRMListener struct {
0000000000000000000000000000000000000000;;		Protocol       ProtocolTypes `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;		CertificateURL *string       `json:"certificateUrl,omitempty"`
0000000000000000000000000000000000000000;;	}
