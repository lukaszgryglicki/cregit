0000000000000000000000000000000000000000;;	package network
6d6afa491b422a1e9d1fe39b10df70e4bf5254bf;;	
0000000000000000000000000000000000000000;;	// Copyright (c) Microsoft and contributors.  All rights reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	// http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
0000000000000000000000000000000000000000;;	// Changes may cause incorrect behavior and will be lost if the code is
0000000000000000000000000000000000000000;;	// regenerated.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/Azure/go-autorest/autorest"
0000000000000000000000000000000000000000;;		"github.com/Azure/go-autorest/autorest/azure"
0000000000000000000000000000000000000000;;		"github.com/Azure/go-autorest/autorest/validation"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UsagesClient is the composite Swagger for Network Client
0000000000000000000000000000000000000000;;	type UsagesClient struct {
0000000000000000000000000000000000000000;;		ManagementClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewUsagesClient creates an instance of the UsagesClient client.
0000000000000000000000000000000000000000;;	func NewUsagesClient(subscriptionID string) UsagesClient {
0000000000000000000000000000000000000000;;		return NewUsagesClientWithBaseURI(DefaultBaseURI, subscriptionID)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewUsagesClientWithBaseURI creates an instance of the UsagesClient client.
0000000000000000000000000000000000000000;;	func NewUsagesClientWithBaseURI(baseURI string, subscriptionID string) UsagesClient {
0000000000000000000000000000000000000000;;		return UsagesClient{NewWithBaseURI(baseURI, subscriptionID)}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List lists compute usages for a subscription.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// location is the location where resource usage is queried.
0000000000000000000000000000000000000000;;	func (client UsagesClient) List(location string) (result UsagesListResult, err error) {
0000000000000000000000000000000000000000;;		if err := validation.Validate([]validation.Validation{
0000000000000000000000000000000000000000;;			{TargetValue: location,
0000000000000000000000000000000000000000;;				Constraints: []validation.Constraint{{Target: "location", Name: validation.Pattern, Rule: `^[-\w\._]+$`, Chain: nil}}}}); err != nil {
0000000000000000000000000000000000000000;;			return result, validation.NewErrorWithValidationError(err, "network.UsagesClient", "List")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req, err := client.ListPreparer(location)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "network.UsagesClient", "List", nil, "Failure preparing request")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := client.ListSender(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "network.UsagesClient", "List", resp, "Failure sending request")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result, err = client.ListResponder(resp)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "network.UsagesClient", "List", resp, "Failure responding to request")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListPreparer prepares the List request.
0000000000000000000000000000000000000000;;	func (client UsagesClient) ListPreparer(location string) (*http.Request, error) {
0000000000000000000000000000000000000000;;		pathParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"location":       autorest.Encode("path", location),
0000000000000000000000000000000000000000;;			"subscriptionId": autorest.Encode("path", client.SubscriptionID),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		const APIVersion = "2017-03-01"
0000000000000000000000000000000000000000;;		queryParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"api-version": APIVersion,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		preparer := autorest.CreatePreparer(
0000000000000000000000000000000000000000;;			autorest.AsGet(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(client.BaseURI),
0000000000000000000000000000000000000000;;			autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/usages", pathParameters),
0000000000000000000000000000000000000000;;			autorest.WithQueryParameters(queryParameters))
0000000000000000000000000000000000000000;;		return preparer.Prepare(&http.Request{})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListSender sends the List request. The method will close the
0000000000000000000000000000000000000000;;	// http.Response Body if it receives an error.
0000000000000000000000000000000000000000;;	func (client UsagesClient) ListSender(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;		return autorest.SendWithSender(client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListResponder handles the response to the List request. The method always
0000000000000000000000000000000000000000;;	// closes the http.Response Body.
0000000000000000000000000000000000000000;;	func (client UsagesClient) ListResponder(resp *http.Response) (result UsagesListResult, err error) {
0000000000000000000000000000000000000000;;		err = autorest.Respond(
0000000000000000000000000000000000000000;;			resp,
0000000000000000000000000000000000000000;;			client.ByInspecting(),
0000000000000000000000000000000000000000;;			azure.WithErrorUnlessStatusCode(http.StatusOK),
0000000000000000000000000000000000000000;;			autorest.ByUnmarshallingJSON(&result),
0000000000000000000000000000000000000000;;			autorest.ByClosing())
0000000000000000000000000000000000000000;;		result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListNextResults retrieves the next set of results, if any.
0000000000000000000000000000000000000000;;	func (client UsagesClient) ListNextResults(lastResults UsagesListResult) (result UsagesListResult, err error) {
0000000000000000000000000000000000000000;;		req, err := lastResults.UsagesListResultPreparer()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return result, autorest.NewErrorWithError(err, "network.UsagesClient", "List", nil, "Failure preparing next results request")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if req == nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := client.ListSender(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;			return result, autorest.NewErrorWithError(err, "network.UsagesClient", "List", resp, "Failure sending next results request")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result, err = client.ListResponder(resp)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "network.UsagesClient", "List", resp, "Failure responding to next results request")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
