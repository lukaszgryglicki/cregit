0000000000000000000000000000000000000000;;	package network
6d6afa491b422a1e9d1fe39b10df70e4bf5254bf;;	
0000000000000000000000000000000000000000;;	// Copyright (c) Microsoft and contributors.  All rights reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	// http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
0000000000000000000000000000000000000000;;	// Changes may cause incorrect behavior and will be lost if the code is
0000000000000000000000000000000000000000;;	// regenerated.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/Azure/go-autorest/autorest"
0000000000000000000000000000000000000000;;		"github.com/Azure/go-autorest/autorest/azure"
0000000000000000000000000000000000000000;;		"github.com/Azure/go-autorest/autorest/validation"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PublicIPAddressesClient is the composite Swagger for Network Client
0000000000000000000000000000000000000000;;	type PublicIPAddressesClient struct {
0000000000000000000000000000000000000000;;		ManagementClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewPublicIPAddressesClient creates an instance of the
0000000000000000000000000000000000000000;;	// PublicIPAddressesClient client.
0000000000000000000000000000000000000000;;	func NewPublicIPAddressesClient(subscriptionID string) PublicIPAddressesClient {
0000000000000000000000000000000000000000;;		return NewPublicIPAddressesClientWithBaseURI(DefaultBaseURI, subscriptionID)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewPublicIPAddressesClientWithBaseURI creates an instance of the
0000000000000000000000000000000000000000;;	// PublicIPAddressesClient client.
0000000000000000000000000000000000000000;;	func NewPublicIPAddressesClientWithBaseURI(baseURI string, subscriptionID string) PublicIPAddressesClient {
0000000000000000000000000000000000000000;;		return PublicIPAddressesClient{NewWithBaseURI(baseURI, subscriptionID)}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateOrUpdate creates or updates a static or dynamic public IP address.
0000000000000000000000000000000000000000;;	// This method may poll for completion. Polling can be canceled by passing the
0000000000000000000000000000000000000000;;	// cancel channel argument. The channel will be used to cancel polling and any
0000000000000000000000000000000000000000;;	// outstanding HTTP requests.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// resourceGroupName is the name of the resource group. publicIPAddressName is
0000000000000000000000000000000000000000;;	// the name of the public IP address. parameters is parameters supplied to the
0000000000000000000000000000000000000000;;	// create or update public IP address operation.
0000000000000000000000000000000000000000;;	func (client PublicIPAddressesClient) CreateOrUpdate(resourceGroupName string, publicIPAddressName string, parameters PublicIPAddress, cancel <-chan struct{}) (<-chan PublicIPAddress, <-chan error) {
0000000000000000000000000000000000000000;;		resultChan := make(chan PublicIPAddress, 1)
0000000000000000000000000000000000000000;;		errChan := make(chan error, 1)
0000000000000000000000000000000000000000;;		if err := validation.Validate([]validation.Validation{
0000000000000000000000000000000000000000;;			{TargetValue: parameters,
0000000000000000000000000000000000000000;;				Constraints: []validation.Constraint{{Target: "parameters.PublicIPAddressPropertiesFormat", Name: validation.Null, Rule: false,
0000000000000000000000000000000000000000;;					Chain: []validation.Constraint{{Target: "parameters.PublicIPAddressPropertiesFormat.IPConfiguration", Name: validation.Null, Rule: false,
0000000000000000000000000000000000000000;;						Chain: []validation.Constraint{{Target: "parameters.PublicIPAddressPropertiesFormat.IPConfiguration.IPConfigurationPropertiesFormat", Name: validation.Null, Rule: false,
0000000000000000000000000000000000000000;;							Chain: []validation.Constraint{{Target: "parameters.PublicIPAddressPropertiesFormat.IPConfiguration.IPConfigurationPropertiesFormat.PublicIPAddress", Name: validation.Null, Rule: false, Chain: nil}}},
0000000000000000000000000000000000000000;;						}},
0000000000000000000000000000000000000000;;					}}}}}); err != nil {
0000000000000000000000000000000000000000;;			errChan <- validation.NewErrorWithValidationError(err, "network.PublicIPAddressesClient", "CreateOrUpdate")
0000000000000000000000000000000000000000;;			close(errChan)
0000000000000000000000000000000000000000;;			close(resultChan)
0000000000000000000000000000000000000000;;			return resultChan, errChan
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			var err error
0000000000000000000000000000000000000000;;			var result PublicIPAddress
0000000000000000000000000000000000000000;;			defer func() {
0000000000000000000000000000000000000000;;				resultChan <- result
0000000000000000000000000000000000000000;;				errChan <- err
0000000000000000000000000000000000000000;;				close(resultChan)
0000000000000000000000000000000000000000;;				close(errChan)
0000000000000000000000000000000000000000;;			}()
0000000000000000000000000000000000000000;;			req, err := client.CreateOrUpdatePreparer(resourceGroupName, publicIPAddressName, parameters, cancel)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				err = autorest.NewErrorWithError(err, "network.PublicIPAddressesClient", "CreateOrUpdate", nil, "Failure preparing request")
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			resp, err := client.CreateOrUpdateSender(req)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;				err = autorest.NewErrorWithError(err, "network.PublicIPAddressesClient", "CreateOrUpdate", resp, "Failure sending request")
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			result, err = client.CreateOrUpdateResponder(resp)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				err = autorest.NewErrorWithError(err, "network.PublicIPAddressesClient", "CreateOrUpdate", resp, "Failure responding to request")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		return resultChan, errChan
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateOrUpdatePreparer prepares the CreateOrUpdate request.
0000000000000000000000000000000000000000;;	func (client PublicIPAddressesClient) CreateOrUpdatePreparer(resourceGroupName string, publicIPAddressName string, parameters PublicIPAddress, cancel <-chan struct{}) (*http.Request, error) {
0000000000000000000000000000000000000000;;		pathParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"publicIpAddressName": autorest.Encode("path", publicIPAddressName),
0000000000000000000000000000000000000000;;			"resourceGroupName":   autorest.Encode("path", resourceGroupName),
0000000000000000000000000000000000000000;;			"subscriptionId":      autorest.Encode("path", client.SubscriptionID),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		const APIVersion = "2017-03-01"
0000000000000000000000000000000000000000;;		queryParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"api-version": APIVersion,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		preparer := autorest.CreatePreparer(
0000000000000000000000000000000000000000;;			autorest.AsJSON(),
0000000000000000000000000000000000000000;;			autorest.AsPut(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(client.BaseURI),
0000000000000000000000000000000000000000;;			autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPAddresses/{publicIpAddressName}", pathParameters),
0000000000000000000000000000000000000000;;			autorest.WithJSON(parameters),
0000000000000000000000000000000000000000;;			autorest.WithQueryParameters(queryParameters))
0000000000000000000000000000000000000000;;		return preparer.Prepare(&http.Request{Cancel: cancel})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateOrUpdateSender sends the CreateOrUpdate request. The method will close the
0000000000000000000000000000000000000000;;	// http.Response Body if it receives an error.
0000000000000000000000000000000000000000;;	func (client PublicIPAddressesClient) CreateOrUpdateSender(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;		return autorest.SendWithSender(client,
0000000000000000000000000000000000000000;;			req,
0000000000000000000000000000000000000000;;			azure.DoPollForAsynchronous(client.PollingDelay))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateOrUpdateResponder handles the response to the CreateOrUpdate request. The method always
0000000000000000000000000000000000000000;;	// closes the http.Response Body.
0000000000000000000000000000000000000000;;	func (client PublicIPAddressesClient) CreateOrUpdateResponder(resp *http.Response) (result PublicIPAddress, err error) {
0000000000000000000000000000000000000000;;		err = autorest.Respond(
0000000000000000000000000000000000000000;;			resp,
0000000000000000000000000000000000000000;;			client.ByInspecting(),
0000000000000000000000000000000000000000;;			azure.WithErrorUnlessStatusCode(http.StatusCreated, http.StatusOK),
0000000000000000000000000000000000000000;;			autorest.ByUnmarshallingJSON(&result),
0000000000000000000000000000000000000000;;			autorest.ByClosing())
0000000000000000000000000000000000000000;;		result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Delete deletes the specified public IP address. This method may poll for
0000000000000000000000000000000000000000;;	// completion. Polling can be canceled by passing the cancel channel argument.
0000000000000000000000000000000000000000;;	// The channel will be used to cancel polling and any outstanding HTTP
0000000000000000000000000000000000000000;;	// requests.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// resourceGroupName is the name of the resource group. publicIPAddressName is
0000000000000000000000000000000000000000;;	// the name of the subnet.
0000000000000000000000000000000000000000;;	func (client PublicIPAddressesClient) Delete(resourceGroupName string, publicIPAddressName string, cancel <-chan struct{}) (<-chan autorest.Response, <-chan error) {
0000000000000000000000000000000000000000;;		resultChan := make(chan autorest.Response, 1)
0000000000000000000000000000000000000000;;		errChan := make(chan error, 1)
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			var err error
0000000000000000000000000000000000000000;;			var result autorest.Response
0000000000000000000000000000000000000000;;			defer func() {
0000000000000000000000000000000000000000;;				resultChan <- result
0000000000000000000000000000000000000000;;				errChan <- err
0000000000000000000000000000000000000000;;				close(resultChan)
0000000000000000000000000000000000000000;;				close(errChan)
0000000000000000000000000000000000000000;;			}()
0000000000000000000000000000000000000000;;			req, err := client.DeletePreparer(resourceGroupName, publicIPAddressName, cancel)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				err = autorest.NewErrorWithError(err, "network.PublicIPAddressesClient", "Delete", nil, "Failure preparing request")
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			resp, err := client.DeleteSender(req)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				result.Response = resp
0000000000000000000000000000000000000000;;				err = autorest.NewErrorWithError(err, "network.PublicIPAddressesClient", "Delete", resp, "Failure sending request")
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			result, err = client.DeleteResponder(resp)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				err = autorest.NewErrorWithError(err, "network.PublicIPAddressesClient", "Delete", resp, "Failure responding to request")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		return resultChan, errChan
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeletePreparer prepares the Delete request.
0000000000000000000000000000000000000000;;	func (client PublicIPAddressesClient) DeletePreparer(resourceGroupName string, publicIPAddressName string, cancel <-chan struct{}) (*http.Request, error) {
0000000000000000000000000000000000000000;;		pathParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"publicIpAddressName": autorest.Encode("path", publicIPAddressName),
0000000000000000000000000000000000000000;;			"resourceGroupName":   autorest.Encode("path", resourceGroupName),
0000000000000000000000000000000000000000;;			"subscriptionId":      autorest.Encode("path", client.SubscriptionID),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		const APIVersion = "2017-03-01"
0000000000000000000000000000000000000000;;		queryParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"api-version": APIVersion,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		preparer := autorest.CreatePreparer(
0000000000000000000000000000000000000000;;			autorest.AsDelete(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(client.BaseURI),
0000000000000000000000000000000000000000;;			autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPAddresses/{publicIpAddressName}", pathParameters),
0000000000000000000000000000000000000000;;			autorest.WithQueryParameters(queryParameters))
0000000000000000000000000000000000000000;;		return preparer.Prepare(&http.Request{Cancel: cancel})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteSender sends the Delete request. The method will close the
0000000000000000000000000000000000000000;;	// http.Response Body if it receives an error.
0000000000000000000000000000000000000000;;	func (client PublicIPAddressesClient) DeleteSender(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;		return autorest.SendWithSender(client,
0000000000000000000000000000000000000000;;			req,
0000000000000000000000000000000000000000;;			azure.DoPollForAsynchronous(client.PollingDelay))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteResponder handles the response to the Delete request. The method always
0000000000000000000000000000000000000000;;	// closes the http.Response Body.
0000000000000000000000000000000000000000;;	func (client PublicIPAddressesClient) DeleteResponder(resp *http.Response) (result autorest.Response, err error) {
0000000000000000000000000000000000000000;;		err = autorest.Respond(
0000000000000000000000000000000000000000;;			resp,
0000000000000000000000000000000000000000;;			client.ByInspecting(),
0000000000000000000000000000000000000000;;			azure.WithErrorUnlessStatusCode(http.StatusNoContent, http.StatusAccepted, http.StatusOK),
0000000000000000000000000000000000000000;;			autorest.ByClosing())
0000000000000000000000000000000000000000;;		result.Response = resp
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get gets the specified public IP address in a specified resource group.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// resourceGroupName is the name of the resource group. publicIPAddressName is
0000000000000000000000000000000000000000;;	// the name of the subnet. expand is expands referenced resources.
0000000000000000000000000000000000000000;;	func (client PublicIPAddressesClient) Get(resourceGroupName string, publicIPAddressName string, expand string) (result PublicIPAddress, err error) {
0000000000000000000000000000000000000000;;		req, err := client.GetPreparer(resourceGroupName, publicIPAddressName, expand)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "network.PublicIPAddressesClient", "Get", nil, "Failure preparing request")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := client.GetSender(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "network.PublicIPAddressesClient", "Get", resp, "Failure sending request")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result, err = client.GetResponder(resp)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "network.PublicIPAddressesClient", "Get", resp, "Failure responding to request")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetPreparer prepares the Get request.
0000000000000000000000000000000000000000;;	func (client PublicIPAddressesClient) GetPreparer(resourceGroupName string, publicIPAddressName string, expand string) (*http.Request, error) {
0000000000000000000000000000000000000000;;		pathParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"publicIpAddressName": autorest.Encode("path", publicIPAddressName),
0000000000000000000000000000000000000000;;			"resourceGroupName":   autorest.Encode("path", resourceGroupName),
0000000000000000000000000000000000000000;;			"subscriptionId":      autorest.Encode("path", client.SubscriptionID),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		const APIVersion = "2017-03-01"
0000000000000000000000000000000000000000;;		queryParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"api-version": APIVersion,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(expand) > 0 {
0000000000000000000000000000000000000000;;			queryParameters["$expand"] = autorest.Encode("query", expand)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		preparer := autorest.CreatePreparer(
0000000000000000000000000000000000000000;;			autorest.AsGet(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(client.BaseURI),
0000000000000000000000000000000000000000;;			autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPAddresses/{publicIpAddressName}", pathParameters),
0000000000000000000000000000000000000000;;			autorest.WithQueryParameters(queryParameters))
0000000000000000000000000000000000000000;;		return preparer.Prepare(&http.Request{})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetSender sends the Get request. The method will close the
0000000000000000000000000000000000000000;;	// http.Response Body if it receives an error.
0000000000000000000000000000000000000000;;	func (client PublicIPAddressesClient) GetSender(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;		return autorest.SendWithSender(client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetResponder handles the response to the Get request. The method always
0000000000000000000000000000000000000000;;	// closes the http.Response Body.
0000000000000000000000000000000000000000;;	func (client PublicIPAddressesClient) GetResponder(resp *http.Response) (result PublicIPAddress, err error) {
0000000000000000000000000000000000000000;;		err = autorest.Respond(
0000000000000000000000000000000000000000;;			resp,
0000000000000000000000000000000000000000;;			client.ByInspecting(),
0000000000000000000000000000000000000000;;			azure.WithErrorUnlessStatusCode(http.StatusOK),
0000000000000000000000000000000000000000;;			autorest.ByUnmarshallingJSON(&result),
0000000000000000000000000000000000000000;;			autorest.ByClosing())
0000000000000000000000000000000000000000;;		result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List gets all public IP addresses in a resource group.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// resourceGroupName is the name of the resource group.
0000000000000000000000000000000000000000;;	func (client PublicIPAddressesClient) List(resourceGroupName string) (result PublicIPAddressListResult, err error) {
0000000000000000000000000000000000000000;;		req, err := client.ListPreparer(resourceGroupName)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "network.PublicIPAddressesClient", "List", nil, "Failure preparing request")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := client.ListSender(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "network.PublicIPAddressesClient", "List", resp, "Failure sending request")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result, err = client.ListResponder(resp)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "network.PublicIPAddressesClient", "List", resp, "Failure responding to request")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListPreparer prepares the List request.
0000000000000000000000000000000000000000;;	func (client PublicIPAddressesClient) ListPreparer(resourceGroupName string) (*http.Request, error) {
0000000000000000000000000000000000000000;;		pathParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"resourceGroupName": autorest.Encode("path", resourceGroupName),
0000000000000000000000000000000000000000;;			"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		const APIVersion = "2017-03-01"
0000000000000000000000000000000000000000;;		queryParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"api-version": APIVersion,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		preparer := autorest.CreatePreparer(
0000000000000000000000000000000000000000;;			autorest.AsGet(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(client.BaseURI),
0000000000000000000000000000000000000000;;			autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPAddresses", pathParameters),
0000000000000000000000000000000000000000;;			autorest.WithQueryParameters(queryParameters))
0000000000000000000000000000000000000000;;		return preparer.Prepare(&http.Request{})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListSender sends the List request. The method will close the
0000000000000000000000000000000000000000;;	// http.Response Body if it receives an error.
0000000000000000000000000000000000000000;;	func (client PublicIPAddressesClient) ListSender(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;		return autorest.SendWithSender(client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListResponder handles the response to the List request. The method always
0000000000000000000000000000000000000000;;	// closes the http.Response Body.
0000000000000000000000000000000000000000;;	func (client PublicIPAddressesClient) ListResponder(resp *http.Response) (result PublicIPAddressListResult, err error) {
0000000000000000000000000000000000000000;;		err = autorest.Respond(
0000000000000000000000000000000000000000;;			resp,
0000000000000000000000000000000000000000;;			client.ByInspecting(),
0000000000000000000000000000000000000000;;			azure.WithErrorUnlessStatusCode(http.StatusOK),
0000000000000000000000000000000000000000;;			autorest.ByUnmarshallingJSON(&result),
0000000000000000000000000000000000000000;;			autorest.ByClosing())
0000000000000000000000000000000000000000;;		result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListNextResults retrieves the next set of results, if any.
0000000000000000000000000000000000000000;;	func (client PublicIPAddressesClient) ListNextResults(lastResults PublicIPAddressListResult) (result PublicIPAddressListResult, err error) {
0000000000000000000000000000000000000000;;		req, err := lastResults.PublicIPAddressListResultPreparer()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return result, autorest.NewErrorWithError(err, "network.PublicIPAddressesClient", "List", nil, "Failure preparing next results request")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if req == nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := client.ListSender(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;			return result, autorest.NewErrorWithError(err, "network.PublicIPAddressesClient", "List", resp, "Failure sending next results request")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result, err = client.ListResponder(resp)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "network.PublicIPAddressesClient", "List", resp, "Failure responding to next results request")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListAll gets all the public IP addresses in a subscription.
0000000000000000000000000000000000000000;;	func (client PublicIPAddressesClient) ListAll() (result PublicIPAddressListResult, err error) {
0000000000000000000000000000000000000000;;		req, err := client.ListAllPreparer()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "network.PublicIPAddressesClient", "ListAll", nil, "Failure preparing request")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := client.ListAllSender(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "network.PublicIPAddressesClient", "ListAll", resp, "Failure sending request")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result, err = client.ListAllResponder(resp)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "network.PublicIPAddressesClient", "ListAll", resp, "Failure responding to request")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListAllPreparer prepares the ListAll request.
0000000000000000000000000000000000000000;;	func (client PublicIPAddressesClient) ListAllPreparer() (*http.Request, error) {
0000000000000000000000000000000000000000;;		pathParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"subscriptionId": autorest.Encode("path", client.SubscriptionID),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		const APIVersion = "2017-03-01"
0000000000000000000000000000000000000000;;		queryParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"api-version": APIVersion,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		preparer := autorest.CreatePreparer(
0000000000000000000000000000000000000000;;			autorest.AsGet(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(client.BaseURI),
0000000000000000000000000000000000000000;;			autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.Network/publicIPAddresses", pathParameters),
0000000000000000000000000000000000000000;;			autorest.WithQueryParameters(queryParameters))
0000000000000000000000000000000000000000;;		return preparer.Prepare(&http.Request{})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListAllSender sends the ListAll request. The method will close the
0000000000000000000000000000000000000000;;	// http.Response Body if it receives an error.
0000000000000000000000000000000000000000;;	func (client PublicIPAddressesClient) ListAllSender(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;		return autorest.SendWithSender(client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListAllResponder handles the response to the ListAll request. The method always
0000000000000000000000000000000000000000;;	// closes the http.Response Body.
0000000000000000000000000000000000000000;;	func (client PublicIPAddressesClient) ListAllResponder(resp *http.Response) (result PublicIPAddressListResult, err error) {
0000000000000000000000000000000000000000;;		err = autorest.Respond(
0000000000000000000000000000000000000000;;			resp,
0000000000000000000000000000000000000000;;			client.ByInspecting(),
0000000000000000000000000000000000000000;;			azure.WithErrorUnlessStatusCode(http.StatusOK),
0000000000000000000000000000000000000000;;			autorest.ByUnmarshallingJSON(&result),
0000000000000000000000000000000000000000;;			autorest.ByClosing())
0000000000000000000000000000000000000000;;		result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListAllNextResults retrieves the next set of results, if any.
0000000000000000000000000000000000000000;;	func (client PublicIPAddressesClient) ListAllNextResults(lastResults PublicIPAddressListResult) (result PublicIPAddressListResult, err error) {
0000000000000000000000000000000000000000;;		req, err := lastResults.PublicIPAddressListResultPreparer()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return result, autorest.NewErrorWithError(err, "network.PublicIPAddressesClient", "ListAll", nil, "Failure preparing next results request")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if req == nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := client.ListAllSender(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;			return result, autorest.NewErrorWithError(err, "network.PublicIPAddressesClient", "ListAll", resp, "Failure sending next results request")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result, err = client.ListAllResponder(resp)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "network.PublicIPAddressesClient", "ListAll", resp, "Failure responding to next results request")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
