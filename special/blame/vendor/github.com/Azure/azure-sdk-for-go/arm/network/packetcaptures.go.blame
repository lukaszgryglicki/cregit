0000000000000000000000000000000000000000;;	package network
91454efdcfe2d233cf3f75fc014b3bb9ac6e5ae7;;	
0000000000000000000000000000000000000000;;	// Copyright (c) Microsoft and contributors.  All rights reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	// http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
0000000000000000000000000000000000000000;;	// Changes may cause incorrect behavior and will be lost if the code is
0000000000000000000000000000000000000000;;	// regenerated.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/Azure/go-autorest/autorest"
0000000000000000000000000000000000000000;;		"github.com/Azure/go-autorest/autorest/azure"
0000000000000000000000000000000000000000;;		"github.com/Azure/go-autorest/autorest/validation"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PacketCapturesClient is the composite Swagger for Network Client
0000000000000000000000000000000000000000;;	type PacketCapturesClient struct {
0000000000000000000000000000000000000000;;		ManagementClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewPacketCapturesClient creates an instance of the PacketCapturesClient
0000000000000000000000000000000000000000;;	// client.
0000000000000000000000000000000000000000;;	func NewPacketCapturesClient(subscriptionID string) PacketCapturesClient {
0000000000000000000000000000000000000000;;		return NewPacketCapturesClientWithBaseURI(DefaultBaseURI, subscriptionID)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewPacketCapturesClientWithBaseURI creates an instance of the
0000000000000000000000000000000000000000;;	// PacketCapturesClient client.
0000000000000000000000000000000000000000;;	func NewPacketCapturesClientWithBaseURI(baseURI string, subscriptionID string) PacketCapturesClient {
0000000000000000000000000000000000000000;;		return PacketCapturesClient{NewWithBaseURI(baseURI, subscriptionID)}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create create and start a packet capture on the specified VM. This method
0000000000000000000000000000000000000000;;	// may poll for completion. Polling can be canceled by passing the cancel
0000000000000000000000000000000000000000;;	// channel argument. The channel will be used to cancel polling and any
0000000000000000000000000000000000000000;;	// outstanding HTTP requests.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// resourceGroupName is the name of the resource group. networkWatcherName is
0000000000000000000000000000000000000000;;	// the name of the network watcher. packetCaptureName is the name of the packet
0000000000000000000000000000000000000000;;	// capture session. parameters is parameters that define the create packet
0000000000000000000000000000000000000000;;	// capture operation.
0000000000000000000000000000000000000000;;	func (client PacketCapturesClient) Create(resourceGroupName string, networkWatcherName string, packetCaptureName string, parameters PacketCapture, cancel <-chan struct{}) (<-chan PacketCaptureResult, <-chan error) {
0000000000000000000000000000000000000000;;		resultChan := make(chan PacketCaptureResult, 1)
0000000000000000000000000000000000000000;;		errChan := make(chan error, 1)
0000000000000000000000000000000000000000;;		if err := validation.Validate([]validation.Validation{
0000000000000000000000000000000000000000;;			{TargetValue: parameters,
0000000000000000000000000000000000000000;;				Constraints: []validation.Constraint{{Target: "parameters.PacketCaptureParameters", Name: validation.Null, Rule: true,
0000000000000000000000000000000000000000;;					Chain: []validation.Constraint{{Target: "parameters.PacketCaptureParameters.Target", Name: validation.Null, Rule: true, Chain: nil},
0000000000000000000000000000000000000000;;						{Target: "parameters.PacketCaptureParameters.StorageLocation", Name: validation.Null, Rule: true, Chain: nil},
0000000000000000000000000000000000000000;;					}}}}}); err != nil {
0000000000000000000000000000000000000000;;			errChan <- validation.NewErrorWithValidationError(err, "network.PacketCapturesClient", "Create")
0000000000000000000000000000000000000000;;			close(errChan)
0000000000000000000000000000000000000000;;			close(resultChan)
0000000000000000000000000000000000000000;;			return resultChan, errChan
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			var err error
0000000000000000000000000000000000000000;;			var result PacketCaptureResult
0000000000000000000000000000000000000000;;			defer func() {
0000000000000000000000000000000000000000;;				resultChan <- result
0000000000000000000000000000000000000000;;				errChan <- err
0000000000000000000000000000000000000000;;				close(resultChan)
0000000000000000000000000000000000000000;;				close(errChan)
0000000000000000000000000000000000000000;;			}()
0000000000000000000000000000000000000000;;			req, err := client.CreatePreparer(resourceGroupName, networkWatcherName, packetCaptureName, parameters, cancel)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				err = autorest.NewErrorWithError(err, "network.PacketCapturesClient", "Create", nil, "Failure preparing request")
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			resp, err := client.CreateSender(req)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;				err = autorest.NewErrorWithError(err, "network.PacketCapturesClient", "Create", resp, "Failure sending request")
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			result, err = client.CreateResponder(resp)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				err = autorest.NewErrorWithError(err, "network.PacketCapturesClient", "Create", resp, "Failure responding to request")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		return resultChan, errChan
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreatePreparer prepares the Create request.
0000000000000000000000000000000000000000;;	func (client PacketCapturesClient) CreatePreparer(resourceGroupName string, networkWatcherName string, packetCaptureName string, parameters PacketCapture, cancel <-chan struct{}) (*http.Request, error) {
0000000000000000000000000000000000000000;;		pathParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"networkWatcherName": autorest.Encode("path", networkWatcherName),
0000000000000000000000000000000000000000;;			"packetCaptureName":  autorest.Encode("path", packetCaptureName),
0000000000000000000000000000000000000000;;			"resourceGroupName":  autorest.Encode("path", resourceGroupName),
0000000000000000000000000000000000000000;;			"subscriptionId":     autorest.Encode("path", client.SubscriptionID),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		const APIVersion = "2017-03-01"
0000000000000000000000000000000000000000;;		queryParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"api-version": APIVersion,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		preparer := autorest.CreatePreparer(
0000000000000000000000000000000000000000;;			autorest.AsJSON(),
0000000000000000000000000000000000000000;;			autorest.AsPut(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(client.BaseURI),
0000000000000000000000000000000000000000;;			autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/packetCaptures/{packetCaptureName}", pathParameters),
0000000000000000000000000000000000000000;;			autorest.WithJSON(parameters),
0000000000000000000000000000000000000000;;			autorest.WithQueryParameters(queryParameters))
0000000000000000000000000000000000000000;;		return preparer.Prepare(&http.Request{Cancel: cancel})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateSender sends the Create request. The method will close the
0000000000000000000000000000000000000000;;	// http.Response Body if it receives an error.
0000000000000000000000000000000000000000;;	func (client PacketCapturesClient) CreateSender(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;		return autorest.SendWithSender(client,
0000000000000000000000000000000000000000;;			req,
0000000000000000000000000000000000000000;;			azure.DoPollForAsynchronous(client.PollingDelay))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateResponder handles the response to the Create request. The method always
0000000000000000000000000000000000000000;;	// closes the http.Response Body.
0000000000000000000000000000000000000000;;	func (client PacketCapturesClient) CreateResponder(resp *http.Response) (result PacketCaptureResult, err error) {
0000000000000000000000000000000000000000;;		err = autorest.Respond(
0000000000000000000000000000000000000000;;			resp,
0000000000000000000000000000000000000000;;			client.ByInspecting(),
0000000000000000000000000000000000000000;;			azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated),
0000000000000000000000000000000000000000;;			autorest.ByUnmarshallingJSON(&result),
0000000000000000000000000000000000000000;;			autorest.ByClosing())
0000000000000000000000000000000000000000;;		result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Delete deletes the specified packet capture session. This method may poll
0000000000000000000000000000000000000000;;	// for completion. Polling can be canceled by passing the cancel channel
0000000000000000000000000000000000000000;;	// argument. The channel will be used to cancel polling and any outstanding
0000000000000000000000000000000000000000;;	// HTTP requests.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// resourceGroupName is the name of the resource group. networkWatcherName is
0000000000000000000000000000000000000000;;	// the name of the network watcher. packetCaptureName is the name of the packet
0000000000000000000000000000000000000000;;	// capture session.
0000000000000000000000000000000000000000;;	func (client PacketCapturesClient) Delete(resourceGroupName string, networkWatcherName string, packetCaptureName string, cancel <-chan struct{}) (<-chan autorest.Response, <-chan error) {
0000000000000000000000000000000000000000;;		resultChan := make(chan autorest.Response, 1)
0000000000000000000000000000000000000000;;		errChan := make(chan error, 1)
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			var err error
0000000000000000000000000000000000000000;;			var result autorest.Response
0000000000000000000000000000000000000000;;			defer func() {
0000000000000000000000000000000000000000;;				resultChan <- result
0000000000000000000000000000000000000000;;				errChan <- err
0000000000000000000000000000000000000000;;				close(resultChan)
0000000000000000000000000000000000000000;;				close(errChan)
0000000000000000000000000000000000000000;;			}()
0000000000000000000000000000000000000000;;			req, err := client.DeletePreparer(resourceGroupName, networkWatcherName, packetCaptureName, cancel)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				err = autorest.NewErrorWithError(err, "network.PacketCapturesClient", "Delete", nil, "Failure preparing request")
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			resp, err := client.DeleteSender(req)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				result.Response = resp
0000000000000000000000000000000000000000;;				err = autorest.NewErrorWithError(err, "network.PacketCapturesClient", "Delete", resp, "Failure sending request")
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			result, err = client.DeleteResponder(resp)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				err = autorest.NewErrorWithError(err, "network.PacketCapturesClient", "Delete", resp, "Failure responding to request")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		return resultChan, errChan
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeletePreparer prepares the Delete request.
0000000000000000000000000000000000000000;;	func (client PacketCapturesClient) DeletePreparer(resourceGroupName string, networkWatcherName string, packetCaptureName string, cancel <-chan struct{}) (*http.Request, error) {
0000000000000000000000000000000000000000;;		pathParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"networkWatcherName": autorest.Encode("path", networkWatcherName),
0000000000000000000000000000000000000000;;			"packetCaptureName":  autorest.Encode("path", packetCaptureName),
0000000000000000000000000000000000000000;;			"resourceGroupName":  autorest.Encode("path", resourceGroupName),
0000000000000000000000000000000000000000;;			"subscriptionId":     autorest.Encode("path", client.SubscriptionID),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		const APIVersion = "2017-03-01"
0000000000000000000000000000000000000000;;		queryParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"api-version": APIVersion,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		preparer := autorest.CreatePreparer(
0000000000000000000000000000000000000000;;			autorest.AsDelete(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(client.BaseURI),
0000000000000000000000000000000000000000;;			autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/packetCaptures/{packetCaptureName}", pathParameters),
0000000000000000000000000000000000000000;;			autorest.WithQueryParameters(queryParameters))
0000000000000000000000000000000000000000;;		return preparer.Prepare(&http.Request{Cancel: cancel})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteSender sends the Delete request. The method will close the
0000000000000000000000000000000000000000;;	// http.Response Body if it receives an error.
0000000000000000000000000000000000000000;;	func (client PacketCapturesClient) DeleteSender(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;		return autorest.SendWithSender(client,
0000000000000000000000000000000000000000;;			req,
0000000000000000000000000000000000000000;;			azure.DoPollForAsynchronous(client.PollingDelay))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteResponder handles the response to the Delete request. The method always
0000000000000000000000000000000000000000;;	// closes the http.Response Body.
0000000000000000000000000000000000000000;;	func (client PacketCapturesClient) DeleteResponder(resp *http.Response) (result autorest.Response, err error) {
0000000000000000000000000000000000000000;;		err = autorest.Respond(
0000000000000000000000000000000000000000;;			resp,
0000000000000000000000000000000000000000;;			client.ByInspecting(),
0000000000000000000000000000000000000000;;			azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent, http.StatusAccepted),
0000000000000000000000000000000000000000;;			autorest.ByClosing())
0000000000000000000000000000000000000000;;		result.Response = resp
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get gets a packet capture session by name.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// resourceGroupName is the name of the resource group. networkWatcherName is
0000000000000000000000000000000000000000;;	// the name of the network watcher. packetCaptureName is the name of the packet
0000000000000000000000000000000000000000;;	// capture session.
0000000000000000000000000000000000000000;;	func (client PacketCapturesClient) Get(resourceGroupName string, networkWatcherName string, packetCaptureName string) (result PacketCaptureResult, err error) {
0000000000000000000000000000000000000000;;		req, err := client.GetPreparer(resourceGroupName, networkWatcherName, packetCaptureName)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "network.PacketCapturesClient", "Get", nil, "Failure preparing request")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := client.GetSender(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "network.PacketCapturesClient", "Get", resp, "Failure sending request")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result, err = client.GetResponder(resp)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "network.PacketCapturesClient", "Get", resp, "Failure responding to request")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetPreparer prepares the Get request.
0000000000000000000000000000000000000000;;	func (client PacketCapturesClient) GetPreparer(resourceGroupName string, networkWatcherName string, packetCaptureName string) (*http.Request, error) {
0000000000000000000000000000000000000000;;		pathParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"networkWatcherName": autorest.Encode("path", networkWatcherName),
0000000000000000000000000000000000000000;;			"packetCaptureName":  autorest.Encode("path", packetCaptureName),
0000000000000000000000000000000000000000;;			"resourceGroupName":  autorest.Encode("path", resourceGroupName),
0000000000000000000000000000000000000000;;			"subscriptionId":     autorest.Encode("path", client.SubscriptionID),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		const APIVersion = "2017-03-01"
0000000000000000000000000000000000000000;;		queryParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"api-version": APIVersion,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		preparer := autorest.CreatePreparer(
0000000000000000000000000000000000000000;;			autorest.AsGet(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(client.BaseURI),
0000000000000000000000000000000000000000;;			autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/packetCaptures/{packetCaptureName}", pathParameters),
0000000000000000000000000000000000000000;;			autorest.WithQueryParameters(queryParameters))
0000000000000000000000000000000000000000;;		return preparer.Prepare(&http.Request{})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetSender sends the Get request. The method will close the
0000000000000000000000000000000000000000;;	// http.Response Body if it receives an error.
0000000000000000000000000000000000000000;;	func (client PacketCapturesClient) GetSender(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;		return autorest.SendWithSender(client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetResponder handles the response to the Get request. The method always
0000000000000000000000000000000000000000;;	// closes the http.Response Body.
0000000000000000000000000000000000000000;;	func (client PacketCapturesClient) GetResponder(resp *http.Response) (result PacketCaptureResult, err error) {
0000000000000000000000000000000000000000;;		err = autorest.Respond(
0000000000000000000000000000000000000000;;			resp,
0000000000000000000000000000000000000000;;			client.ByInspecting(),
0000000000000000000000000000000000000000;;			azure.WithErrorUnlessStatusCode(http.StatusOK),
0000000000000000000000000000000000000000;;			autorest.ByUnmarshallingJSON(&result),
0000000000000000000000000000000000000000;;			autorest.ByClosing())
0000000000000000000000000000000000000000;;		result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetStatus query the status of a running packet capture session. This method
0000000000000000000000000000000000000000;;	// may poll for completion. Polling can be canceled by passing the cancel
0000000000000000000000000000000000000000;;	// channel argument. The channel will be used to cancel polling and any
0000000000000000000000000000000000000000;;	// outstanding HTTP requests.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// resourceGroupName is the name of the resource group. networkWatcherName is
0000000000000000000000000000000000000000;;	// the name of the Network Watcher resource. packetCaptureName is the name
0000000000000000000000000000000000000000;;	// given to the packet capture session.
0000000000000000000000000000000000000000;;	func (client PacketCapturesClient) GetStatus(resourceGroupName string, networkWatcherName string, packetCaptureName string, cancel <-chan struct{}) (<-chan PacketCaptureQueryStatusResult, <-chan error) {
0000000000000000000000000000000000000000;;		resultChan := make(chan PacketCaptureQueryStatusResult, 1)
0000000000000000000000000000000000000000;;		errChan := make(chan error, 1)
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			var err error
0000000000000000000000000000000000000000;;			var result PacketCaptureQueryStatusResult
0000000000000000000000000000000000000000;;			defer func() {
0000000000000000000000000000000000000000;;				resultChan <- result
0000000000000000000000000000000000000000;;				errChan <- err
0000000000000000000000000000000000000000;;				close(resultChan)
0000000000000000000000000000000000000000;;				close(errChan)
0000000000000000000000000000000000000000;;			}()
0000000000000000000000000000000000000000;;			req, err := client.GetStatusPreparer(resourceGroupName, networkWatcherName, packetCaptureName, cancel)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				err = autorest.NewErrorWithError(err, "network.PacketCapturesClient", "GetStatus", nil, "Failure preparing request")
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			resp, err := client.GetStatusSender(req)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;				err = autorest.NewErrorWithError(err, "network.PacketCapturesClient", "GetStatus", resp, "Failure sending request")
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			result, err = client.GetStatusResponder(resp)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				err = autorest.NewErrorWithError(err, "network.PacketCapturesClient", "GetStatus", resp, "Failure responding to request")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		return resultChan, errChan
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetStatusPreparer prepares the GetStatus request.
0000000000000000000000000000000000000000;;	func (client PacketCapturesClient) GetStatusPreparer(resourceGroupName string, networkWatcherName string, packetCaptureName string, cancel <-chan struct{}) (*http.Request, error) {
0000000000000000000000000000000000000000;;		pathParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"networkWatcherName": autorest.Encode("path", networkWatcherName),
0000000000000000000000000000000000000000;;			"packetCaptureName":  autorest.Encode("path", packetCaptureName),
0000000000000000000000000000000000000000;;			"resourceGroupName":  autorest.Encode("path", resourceGroupName),
0000000000000000000000000000000000000000;;			"subscriptionId":     autorest.Encode("path", client.SubscriptionID),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		const APIVersion = "2017-03-01"
0000000000000000000000000000000000000000;;		queryParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"api-version": APIVersion,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		preparer := autorest.CreatePreparer(
0000000000000000000000000000000000000000;;			autorest.AsPost(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(client.BaseURI),
0000000000000000000000000000000000000000;;			autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/packetCaptures/{packetCaptureName}/queryStatus", pathParameters),
0000000000000000000000000000000000000000;;			autorest.WithQueryParameters(queryParameters))
0000000000000000000000000000000000000000;;		return preparer.Prepare(&http.Request{Cancel: cancel})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetStatusSender sends the GetStatus request. The method will close the
0000000000000000000000000000000000000000;;	// http.Response Body if it receives an error.
0000000000000000000000000000000000000000;;	func (client PacketCapturesClient) GetStatusSender(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;		return autorest.SendWithSender(client,
0000000000000000000000000000000000000000;;			req,
0000000000000000000000000000000000000000;;			azure.DoPollForAsynchronous(client.PollingDelay))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetStatusResponder handles the response to the GetStatus request. The method always
0000000000000000000000000000000000000000;;	// closes the http.Response Body.
0000000000000000000000000000000000000000;;	func (client PacketCapturesClient) GetStatusResponder(resp *http.Response) (result PacketCaptureQueryStatusResult, err error) {
0000000000000000000000000000000000000000;;		err = autorest.Respond(
0000000000000000000000000000000000000000;;			resp,
0000000000000000000000000000000000000000;;			client.ByInspecting(),
0000000000000000000000000000000000000000;;			azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted),
0000000000000000000000000000000000000000;;			autorest.ByUnmarshallingJSON(&result),
0000000000000000000000000000000000000000;;			autorest.ByClosing())
0000000000000000000000000000000000000000;;		result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List lists all packet capture sessions within the specified resource group.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// resourceGroupName is the name of the resource group. networkWatcherName is
0000000000000000000000000000000000000000;;	// the name of the Network Watcher resource.
0000000000000000000000000000000000000000;;	func (client PacketCapturesClient) List(resourceGroupName string, networkWatcherName string) (result PacketCaptureListResult, err error) {
0000000000000000000000000000000000000000;;		req, err := client.ListPreparer(resourceGroupName, networkWatcherName)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "network.PacketCapturesClient", "List", nil, "Failure preparing request")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := client.ListSender(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "network.PacketCapturesClient", "List", resp, "Failure sending request")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result, err = client.ListResponder(resp)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "network.PacketCapturesClient", "List", resp, "Failure responding to request")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListPreparer prepares the List request.
0000000000000000000000000000000000000000;;	func (client PacketCapturesClient) ListPreparer(resourceGroupName string, networkWatcherName string) (*http.Request, error) {
0000000000000000000000000000000000000000;;		pathParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"networkWatcherName": autorest.Encode("path", networkWatcherName),
0000000000000000000000000000000000000000;;			"resourceGroupName":  autorest.Encode("path", resourceGroupName),
0000000000000000000000000000000000000000;;			"subscriptionId":     autorest.Encode("path", client.SubscriptionID),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		const APIVersion = "2017-03-01"
0000000000000000000000000000000000000000;;		queryParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"api-version": APIVersion,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		preparer := autorest.CreatePreparer(
0000000000000000000000000000000000000000;;			autorest.AsGet(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(client.BaseURI),
0000000000000000000000000000000000000000;;			autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/packetCaptures", pathParameters),
0000000000000000000000000000000000000000;;			autorest.WithQueryParameters(queryParameters))
0000000000000000000000000000000000000000;;		return preparer.Prepare(&http.Request{})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListSender sends the List request. The method will close the
0000000000000000000000000000000000000000;;	// http.Response Body if it receives an error.
0000000000000000000000000000000000000000;;	func (client PacketCapturesClient) ListSender(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;		return autorest.SendWithSender(client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListResponder handles the response to the List request. The method always
0000000000000000000000000000000000000000;;	// closes the http.Response Body.
0000000000000000000000000000000000000000;;	func (client PacketCapturesClient) ListResponder(resp *http.Response) (result PacketCaptureListResult, err error) {
0000000000000000000000000000000000000000;;		err = autorest.Respond(
0000000000000000000000000000000000000000;;			resp,
0000000000000000000000000000000000000000;;			client.ByInspecting(),
0000000000000000000000000000000000000000;;			azure.WithErrorUnlessStatusCode(http.StatusOK),
0000000000000000000000000000000000000000;;			autorest.ByUnmarshallingJSON(&result),
0000000000000000000000000000000000000000;;			autorest.ByClosing())
0000000000000000000000000000000000000000;;		result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Stop stops a specified packet capture session. This method may poll for
0000000000000000000000000000000000000000;;	// completion. Polling can be canceled by passing the cancel channel argument.
0000000000000000000000000000000000000000;;	// The channel will be used to cancel polling and any outstanding HTTP
0000000000000000000000000000000000000000;;	// requests.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// resourceGroupName is the name of the resource group. networkWatcherName is
0000000000000000000000000000000000000000;;	// the name of the network watcher. packetCaptureName is the name of the packet
0000000000000000000000000000000000000000;;	// capture session.
0000000000000000000000000000000000000000;;	func (client PacketCapturesClient) Stop(resourceGroupName string, networkWatcherName string, packetCaptureName string, cancel <-chan struct{}) (<-chan autorest.Response, <-chan error) {
0000000000000000000000000000000000000000;;		resultChan := make(chan autorest.Response, 1)
0000000000000000000000000000000000000000;;		errChan := make(chan error, 1)
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			var err error
0000000000000000000000000000000000000000;;			var result autorest.Response
0000000000000000000000000000000000000000;;			defer func() {
0000000000000000000000000000000000000000;;				resultChan <- result
0000000000000000000000000000000000000000;;				errChan <- err
0000000000000000000000000000000000000000;;				close(resultChan)
0000000000000000000000000000000000000000;;				close(errChan)
0000000000000000000000000000000000000000;;			}()
0000000000000000000000000000000000000000;;			req, err := client.StopPreparer(resourceGroupName, networkWatcherName, packetCaptureName, cancel)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				err = autorest.NewErrorWithError(err, "network.PacketCapturesClient", "Stop", nil, "Failure preparing request")
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			resp, err := client.StopSender(req)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				result.Response = resp
0000000000000000000000000000000000000000;;				err = autorest.NewErrorWithError(err, "network.PacketCapturesClient", "Stop", resp, "Failure sending request")
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			result, err = client.StopResponder(resp)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				err = autorest.NewErrorWithError(err, "network.PacketCapturesClient", "Stop", resp, "Failure responding to request")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		return resultChan, errChan
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StopPreparer prepares the Stop request.
0000000000000000000000000000000000000000;;	func (client PacketCapturesClient) StopPreparer(resourceGroupName string, networkWatcherName string, packetCaptureName string, cancel <-chan struct{}) (*http.Request, error) {
0000000000000000000000000000000000000000;;		pathParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"networkWatcherName": autorest.Encode("path", networkWatcherName),
0000000000000000000000000000000000000000;;			"packetCaptureName":  autorest.Encode("path", packetCaptureName),
0000000000000000000000000000000000000000;;			"resourceGroupName":  autorest.Encode("path", resourceGroupName),
0000000000000000000000000000000000000000;;			"subscriptionId":     autorest.Encode("path", client.SubscriptionID),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		const APIVersion = "2017-03-01"
0000000000000000000000000000000000000000;;		queryParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"api-version": APIVersion,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		preparer := autorest.CreatePreparer(
0000000000000000000000000000000000000000;;			autorest.AsPost(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(client.BaseURI),
0000000000000000000000000000000000000000;;			autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/packetCaptures/{packetCaptureName}/stop", pathParameters),
0000000000000000000000000000000000000000;;			autorest.WithQueryParameters(queryParameters))
0000000000000000000000000000000000000000;;		return preparer.Prepare(&http.Request{Cancel: cancel})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StopSender sends the Stop request. The method will close the
0000000000000000000000000000000000000000;;	// http.Response Body if it receives an error.
0000000000000000000000000000000000000000;;	func (client PacketCapturesClient) StopSender(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;		return autorest.SendWithSender(client,
0000000000000000000000000000000000000000;;			req,
0000000000000000000000000000000000000000;;			azure.DoPollForAsynchronous(client.PollingDelay))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StopResponder handles the response to the Stop request. The method always
0000000000000000000000000000000000000000;;	// closes the http.Response Body.
0000000000000000000000000000000000000000;;	func (client PacketCapturesClient) StopResponder(resp *http.Response) (result autorest.Response, err error) {
0000000000000000000000000000000000000000;;		err = autorest.Respond(
0000000000000000000000000000000000000000;;			resp,
0000000000000000000000000000000000000000;;			client.ByInspecting(),
0000000000000000000000000000000000000000;;			azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted),
0000000000000000000000000000000000000000;;			autorest.ByClosing())
0000000000000000000000000000000000000000;;		result.Response = resp
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
