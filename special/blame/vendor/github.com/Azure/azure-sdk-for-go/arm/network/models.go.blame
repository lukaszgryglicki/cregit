0000000000000000000000000000000000000000;;	package network
6d6afa491b422a1e9d1fe39b10df70e4bf5254bf;;	
0000000000000000000000000000000000000000;;	// Copyright (c) Microsoft and contributors.  All rights reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	// http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
0000000000000000000000000000000000000000;;	// Changes may cause incorrect behavior and will be lost if the code is
0000000000000000000000000000000000000000;;	// regenerated.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/Azure/go-autorest/autorest"
0000000000000000000000000000000000000000;;		"github.com/Azure/go-autorest/autorest/date"
0000000000000000000000000000000000000000;;		"github.com/Azure/go-autorest/autorest/to"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Access enumerates the values for access.
0000000000000000000000000000000000000000;;	type Access string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Allow specifies the allow state for access.
0000000000000000000000000000000000000000;;		Allow Access = "Allow"
0000000000000000000000000000000000000000;;		// Deny specifies the deny state for access.
0000000000000000000000000000000000000000;;		Deny Access = "Deny"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewayBackendHealthServerHealth enumerates the values for
0000000000000000000000000000000000000000;;	// application gateway backend health server health.
0000000000000000000000000000000000000000;;	type ApplicationGatewayBackendHealthServerHealth string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Down specifies the down state for application gateway backend health
0000000000000000000000000000000000000000;;		// server health.
0000000000000000000000000000000000000000;;		Down ApplicationGatewayBackendHealthServerHealth = "Down"
0000000000000000000000000000000000000000;;		// Draining specifies the draining state for application gateway backend
0000000000000000000000000000000000000000;;		// health server health.
0000000000000000000000000000000000000000;;		Draining ApplicationGatewayBackendHealthServerHealth = "Draining"
0000000000000000000000000000000000000000;;		// Partial specifies the partial state for application gateway backend
0000000000000000000000000000000000000000;;		// health server health.
0000000000000000000000000000000000000000;;		Partial ApplicationGatewayBackendHealthServerHealth = "Partial"
0000000000000000000000000000000000000000;;		// Unknown specifies the unknown state for application gateway backend
0000000000000000000000000000000000000000;;		// health server health.
0000000000000000000000000000000000000000;;		Unknown ApplicationGatewayBackendHealthServerHealth = "Unknown"
0000000000000000000000000000000000000000;;		// Up specifies the up state for application gateway backend health server
0000000000000000000000000000000000000000;;		// health.
0000000000000000000000000000000000000000;;		Up ApplicationGatewayBackendHealthServerHealth = "Up"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewayCookieBasedAffinity enumerates the values for application
0000000000000000000000000000000000000000;;	// gateway cookie based affinity.
0000000000000000000000000000000000000000;;	type ApplicationGatewayCookieBasedAffinity string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Disabled specifies the disabled state for application gateway cookie
0000000000000000000000000000000000000000;;		// based affinity.
0000000000000000000000000000000000000000;;		Disabled ApplicationGatewayCookieBasedAffinity = "Disabled"
0000000000000000000000000000000000000000;;		// Enabled specifies the enabled state for application gateway cookie based
0000000000000000000000000000000000000000;;		// affinity.
0000000000000000000000000000000000000000;;		Enabled ApplicationGatewayCookieBasedAffinity = "Enabled"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewayFirewallMode enumerates the values for application gateway
0000000000000000000000000000000000000000;;	// firewall mode.
0000000000000000000000000000000000000000;;	type ApplicationGatewayFirewallMode string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Detection specifies the detection state for application gateway firewall
0000000000000000000000000000000000000000;;		// mode.
0000000000000000000000000000000000000000;;		Detection ApplicationGatewayFirewallMode = "Detection"
0000000000000000000000000000000000000000;;		// Prevention specifies the prevention state for application gateway
0000000000000000000000000000000000000000;;		// firewall mode.
0000000000000000000000000000000000000000;;		Prevention ApplicationGatewayFirewallMode = "Prevention"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewayOperationalState enumerates the values for application
0000000000000000000000000000000000000000;;	// gateway operational state.
0000000000000000000000000000000000000000;;	type ApplicationGatewayOperationalState string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Running specifies the running state for application gateway operational
0000000000000000000000000000000000000000;;		// state.
0000000000000000000000000000000000000000;;		Running ApplicationGatewayOperationalState = "Running"
0000000000000000000000000000000000000000;;		// Starting specifies the starting state for application gateway
0000000000000000000000000000000000000000;;		// operational state.
0000000000000000000000000000000000000000;;		Starting ApplicationGatewayOperationalState = "Starting"
0000000000000000000000000000000000000000;;		// Stopped specifies the stopped state for application gateway operational
0000000000000000000000000000000000000000;;		// state.
0000000000000000000000000000000000000000;;		Stopped ApplicationGatewayOperationalState = "Stopped"
0000000000000000000000000000000000000000;;		// Stopping specifies the stopping state for application gateway
0000000000000000000000000000000000000000;;		// operational state.
0000000000000000000000000000000000000000;;		Stopping ApplicationGatewayOperationalState = "Stopping"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewayProtocol enumerates the values for application gateway
0000000000000000000000000000000000000000;;	// protocol.
0000000000000000000000000000000000000000;;	type ApplicationGatewayProtocol string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// HTTP specifies the http state for application gateway protocol.
0000000000000000000000000000000000000000;;		HTTP ApplicationGatewayProtocol = "Http"
0000000000000000000000000000000000000000;;		// HTTPS specifies the https state for application gateway protocol.
0000000000000000000000000000000000000000;;		HTTPS ApplicationGatewayProtocol = "Https"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewayRequestRoutingRuleType enumerates the values for
0000000000000000000000000000000000000000;;	// application gateway request routing rule type.
0000000000000000000000000000000000000000;;	type ApplicationGatewayRequestRoutingRuleType string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Basic specifies the basic state for application gateway request routing
0000000000000000000000000000000000000000;;		// rule type.
0000000000000000000000000000000000000000;;		Basic ApplicationGatewayRequestRoutingRuleType = "Basic"
0000000000000000000000000000000000000000;;		// PathBasedRouting specifies the path based routing state for application
0000000000000000000000000000000000000000;;		// gateway request routing rule type.
0000000000000000000000000000000000000000;;		PathBasedRouting ApplicationGatewayRequestRoutingRuleType = "PathBasedRouting"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewaySkuName enumerates the values for application gateway sku
0000000000000000000000000000000000000000;;	// name.
0000000000000000000000000000000000000000;;	type ApplicationGatewaySkuName string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// StandardLarge specifies the standard large state for application gateway
0000000000000000000000000000000000000000;;		// sku name.
0000000000000000000000000000000000000000;;		StandardLarge ApplicationGatewaySkuName = "Standard_Large"
0000000000000000000000000000000000000000;;		// StandardMedium specifies the standard medium state for application
0000000000000000000000000000000000000000;;		// gateway sku name.
0000000000000000000000000000000000000000;;		StandardMedium ApplicationGatewaySkuName = "Standard_Medium"
0000000000000000000000000000000000000000;;		// StandardSmall specifies the standard small state for application gateway
0000000000000000000000000000000000000000;;		// sku name.
0000000000000000000000000000000000000000;;		StandardSmall ApplicationGatewaySkuName = "Standard_Small"
0000000000000000000000000000000000000000;;		// WAFLarge specifies the waf large state for application gateway sku name.
0000000000000000000000000000000000000000;;		WAFLarge ApplicationGatewaySkuName = "WAF_Large"
0000000000000000000000000000000000000000;;		// WAFMedium specifies the waf medium state for application gateway sku
0000000000000000000000000000000000000000;;		// name.
0000000000000000000000000000000000000000;;		WAFMedium ApplicationGatewaySkuName = "WAF_Medium"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewaySslProtocol enumerates the values for application gateway
0000000000000000000000000000000000000000;;	// ssl protocol.
0000000000000000000000000000000000000000;;	type ApplicationGatewaySslProtocol string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// TLSv10 specifies the tl sv 10 state for application gateway ssl
0000000000000000000000000000000000000000;;		// protocol.
0000000000000000000000000000000000000000;;		TLSv10 ApplicationGatewaySslProtocol = "TLSv1_0"
0000000000000000000000000000000000000000;;		// TLSv11 specifies the tl sv 11 state for application gateway ssl
0000000000000000000000000000000000000000;;		// protocol.
0000000000000000000000000000000000000000;;		TLSv11 ApplicationGatewaySslProtocol = "TLSv1_1"
0000000000000000000000000000000000000000;;		// TLSv12 specifies the tl sv 12 state for application gateway ssl
0000000000000000000000000000000000000000;;		// protocol.
0000000000000000000000000000000000000000;;		TLSv12 ApplicationGatewaySslProtocol = "TLSv1_2"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewayTier enumerates the values for application gateway tier.
0000000000000000000000000000000000000000;;	type ApplicationGatewayTier string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Standard specifies the standard state for application gateway tier.
0000000000000000000000000000000000000000;;		Standard ApplicationGatewayTier = "Standard"
0000000000000000000000000000000000000000;;		// WAF specifies the waf state for application gateway tier.
0000000000000000000000000000000000000000;;		WAF ApplicationGatewayTier = "WAF"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AssociationType enumerates the values for association type.
0000000000000000000000000000000000000000;;	type AssociationType string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Associated specifies the associated state for association type.
0000000000000000000000000000000000000000;;		Associated AssociationType = "Associated"
0000000000000000000000000000000000000000;;		// Contains specifies the contains state for association type.
0000000000000000000000000000000000000000;;		Contains AssociationType = "Contains"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthorizationUseStatus enumerates the values for authorization use status.
0000000000000000000000000000000000000000;;	type AuthorizationUseStatus string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Available specifies the available state for authorization use status.
0000000000000000000000000000000000000000;;		Available AuthorizationUseStatus = "Available"
0000000000000000000000000000000000000000;;		// InUse specifies the in use state for authorization use status.
0000000000000000000000000000000000000000;;		InUse AuthorizationUseStatus = "InUse"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BgpPeerState enumerates the values for bgp peer state.
0000000000000000000000000000000000000000;;	type BgpPeerState string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// BgpPeerStateConnected specifies the bgp peer state connected state for
0000000000000000000000000000000000000000;;		// bgp peer state.
0000000000000000000000000000000000000000;;		BgpPeerStateConnected BgpPeerState = "Connected"
0000000000000000000000000000000000000000;;		// BgpPeerStateConnecting specifies the bgp peer state connecting state for
0000000000000000000000000000000000000000;;		// bgp peer state.
0000000000000000000000000000000000000000;;		BgpPeerStateConnecting BgpPeerState = "Connecting"
0000000000000000000000000000000000000000;;		// BgpPeerStateIdle specifies the bgp peer state idle state for bgp peer
0000000000000000000000000000000000000000;;		// state.
0000000000000000000000000000000000000000;;		BgpPeerStateIdle BgpPeerState = "Idle"
0000000000000000000000000000000000000000;;		// BgpPeerStateStopped specifies the bgp peer state stopped state for bgp
0000000000000000000000000000000000000000;;		// peer state.
0000000000000000000000000000000000000000;;		BgpPeerStateStopped BgpPeerState = "Stopped"
0000000000000000000000000000000000000000;;		// BgpPeerStateUnknown specifies the bgp peer state unknown state for bgp
0000000000000000000000000000000000000000;;		// peer state.
0000000000000000000000000000000000000000;;		BgpPeerStateUnknown BgpPeerState = "Unknown"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DhGroup enumerates the values for dh group.
0000000000000000000000000000000000000000;;	type DhGroup string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// DHGroup1 specifies the dh group 1 state for dh group.
0000000000000000000000000000000000000000;;		DHGroup1 DhGroup = "DHGroup1"
0000000000000000000000000000000000000000;;		// DHGroup14 specifies the dh group 14 state for dh group.
0000000000000000000000000000000000000000;;		DHGroup14 DhGroup = "DHGroup14"
0000000000000000000000000000000000000000;;		// DHGroup2 specifies the dh group 2 state for dh group.
0000000000000000000000000000000000000000;;		DHGroup2 DhGroup = "DHGroup2"
0000000000000000000000000000000000000000;;		// DHGroup2048 specifies the dh group 2048 state for dh group.
0000000000000000000000000000000000000000;;		DHGroup2048 DhGroup = "DHGroup2048"
0000000000000000000000000000000000000000;;		// DHGroup24 specifies the dh group 24 state for dh group.
0000000000000000000000000000000000000000;;		DHGroup24 DhGroup = "DHGroup24"
0000000000000000000000000000000000000000;;		// ECP256 specifies the ecp256 state for dh group.
0000000000000000000000000000000000000000;;		ECP256 DhGroup = "ECP256"
0000000000000000000000000000000000000000;;		// ECP384 specifies the ecp384 state for dh group.
0000000000000000000000000000000000000000;;		ECP384 DhGroup = "ECP384"
0000000000000000000000000000000000000000;;		// None specifies the none state for dh group.
0000000000000000000000000000000000000000;;		None DhGroup = "None"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Direction enumerates the values for direction.
0000000000000000000000000000000000000000;;	type Direction string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Inbound specifies the inbound state for direction.
0000000000000000000000000000000000000000;;		Inbound Direction = "Inbound"
0000000000000000000000000000000000000000;;		// Outbound specifies the outbound state for direction.
0000000000000000000000000000000000000000;;		Outbound Direction = "Outbound"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EffectiveRouteSource enumerates the values for effective route source.
0000000000000000000000000000000000000000;;	type EffectiveRouteSource string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// EffectiveRouteSourceDefault specifies the effective route source default
0000000000000000000000000000000000000000;;		// state for effective route source.
0000000000000000000000000000000000000000;;		EffectiveRouteSourceDefault EffectiveRouteSource = "Default"
0000000000000000000000000000000000000000;;		// EffectiveRouteSourceUnknown specifies the effective route source unknown
0000000000000000000000000000000000000000;;		// state for effective route source.
0000000000000000000000000000000000000000;;		EffectiveRouteSourceUnknown EffectiveRouteSource = "Unknown"
0000000000000000000000000000000000000000;;		// EffectiveRouteSourceUser specifies the effective route source user state
0000000000000000000000000000000000000000;;		// for effective route source.
0000000000000000000000000000000000000000;;		EffectiveRouteSourceUser EffectiveRouteSource = "User"
0000000000000000000000000000000000000000;;		// EffectiveRouteSourceVirtualNetworkGateway specifies the effective route
0000000000000000000000000000000000000000;;		// source virtual network gateway state for effective route source.
0000000000000000000000000000000000000000;;		EffectiveRouteSourceVirtualNetworkGateway EffectiveRouteSource = "VirtualNetworkGateway"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EffectiveRouteState enumerates the values for effective route state.
0000000000000000000000000000000000000000;;	type EffectiveRouteState string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Active specifies the active state for effective route state.
0000000000000000000000000000000000000000;;		Active EffectiveRouteState = "Active"
0000000000000000000000000000000000000000;;		// Invalid specifies the invalid state for effective route state.
0000000000000000000000000000000000000000;;		Invalid EffectiveRouteState = "Invalid"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExpressRouteCircuitPeeringAdvertisedPublicPrefixState enumerates the values
0000000000000000000000000000000000000000;;	// for express route circuit peering advertised public prefix state.
0000000000000000000000000000000000000000;;	type ExpressRouteCircuitPeeringAdvertisedPublicPrefixState string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Configured specifies the configured state for express route circuit
0000000000000000000000000000000000000000;;		// peering advertised public prefix state.
0000000000000000000000000000000000000000;;		Configured ExpressRouteCircuitPeeringAdvertisedPublicPrefixState = "Configured"
0000000000000000000000000000000000000000;;		// Configuring specifies the configuring state for express route circuit
0000000000000000000000000000000000000000;;		// peering advertised public prefix state.
0000000000000000000000000000000000000000;;		Configuring ExpressRouteCircuitPeeringAdvertisedPublicPrefixState = "Configuring"
0000000000000000000000000000000000000000;;		// NotConfigured specifies the not configured state for express route
0000000000000000000000000000000000000000;;		// circuit peering advertised public prefix state.
0000000000000000000000000000000000000000;;		NotConfigured ExpressRouteCircuitPeeringAdvertisedPublicPrefixState = "NotConfigured"
0000000000000000000000000000000000000000;;		// ValidationNeeded specifies the validation needed state for express route
0000000000000000000000000000000000000000;;		// circuit peering advertised public prefix state.
0000000000000000000000000000000000000000;;		ValidationNeeded ExpressRouteCircuitPeeringAdvertisedPublicPrefixState = "ValidationNeeded"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExpressRouteCircuitPeeringState enumerates the values for express route
0000000000000000000000000000000000000000;;	// circuit peering state.
0000000000000000000000000000000000000000;;	type ExpressRouteCircuitPeeringState string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// ExpressRouteCircuitPeeringStateDisabled specifies the express route
0000000000000000000000000000000000000000;;		// circuit peering state disabled state for express route circuit peering
0000000000000000000000000000000000000000;;		// state.
0000000000000000000000000000000000000000;;		ExpressRouteCircuitPeeringStateDisabled ExpressRouteCircuitPeeringState = "Disabled"
0000000000000000000000000000000000000000;;		// ExpressRouteCircuitPeeringStateEnabled specifies the express route
0000000000000000000000000000000000000000;;		// circuit peering state enabled state for express route circuit peering
0000000000000000000000000000000000000000;;		// state.
0000000000000000000000000000000000000000;;		ExpressRouteCircuitPeeringStateEnabled ExpressRouteCircuitPeeringState = "Enabled"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExpressRouteCircuitPeeringType enumerates the values for express route
0000000000000000000000000000000000000000;;	// circuit peering type.
0000000000000000000000000000000000000000;;	type ExpressRouteCircuitPeeringType string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// AzurePrivatePeering specifies the azure private peering state for
0000000000000000000000000000000000000000;;		// express route circuit peering type.
0000000000000000000000000000000000000000;;		AzurePrivatePeering ExpressRouteCircuitPeeringType = "AzurePrivatePeering"
0000000000000000000000000000000000000000;;		// AzurePublicPeering specifies the azure public peering state for express
0000000000000000000000000000000000000000;;		// route circuit peering type.
0000000000000000000000000000000000000000;;		AzurePublicPeering ExpressRouteCircuitPeeringType = "AzurePublicPeering"
0000000000000000000000000000000000000000;;		// MicrosoftPeering specifies the microsoft peering state for express route
0000000000000000000000000000000000000000;;		// circuit peering type.
0000000000000000000000000000000000000000;;		MicrosoftPeering ExpressRouteCircuitPeeringType = "MicrosoftPeering"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExpressRouteCircuitSkuFamily enumerates the values for express route circuit
0000000000000000000000000000000000000000;;	// sku family.
0000000000000000000000000000000000000000;;	type ExpressRouteCircuitSkuFamily string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// MeteredData specifies the metered data state for express route circuit
0000000000000000000000000000000000000000;;		// sku family.
0000000000000000000000000000000000000000;;		MeteredData ExpressRouteCircuitSkuFamily = "MeteredData"
0000000000000000000000000000000000000000;;		// UnlimitedData specifies the unlimited data state for express route
0000000000000000000000000000000000000000;;		// circuit sku family.
0000000000000000000000000000000000000000;;		UnlimitedData ExpressRouteCircuitSkuFamily = "UnlimitedData"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExpressRouteCircuitSkuTier enumerates the values for express route circuit
0000000000000000000000000000000000000000;;	// sku tier.
0000000000000000000000000000000000000000;;	type ExpressRouteCircuitSkuTier string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// ExpressRouteCircuitSkuTierPremium specifies the express route circuit
0000000000000000000000000000000000000000;;		// sku tier premium state for express route circuit sku tier.
0000000000000000000000000000000000000000;;		ExpressRouteCircuitSkuTierPremium ExpressRouteCircuitSkuTier = "Premium"
0000000000000000000000000000000000000000;;		// ExpressRouteCircuitSkuTierStandard specifies the express route circuit
0000000000000000000000000000000000000000;;		// sku tier standard state for express route circuit sku tier.
0000000000000000000000000000000000000000;;		ExpressRouteCircuitSkuTierStandard ExpressRouteCircuitSkuTier = "Standard"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IkeEncryption enumerates the values for ike encryption.
0000000000000000000000000000000000000000;;	type IkeEncryption string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// AES128 specifies the aes128 state for ike encryption.
0000000000000000000000000000000000000000;;		AES128 IkeEncryption = "AES128"
0000000000000000000000000000000000000000;;		// AES192 specifies the aes192 state for ike encryption.
0000000000000000000000000000000000000000;;		AES192 IkeEncryption = "AES192"
0000000000000000000000000000000000000000;;		// AES256 specifies the aes256 state for ike encryption.
0000000000000000000000000000000000000000;;		AES256 IkeEncryption = "AES256"
0000000000000000000000000000000000000000;;		// DES specifies the des state for ike encryption.
0000000000000000000000000000000000000000;;		DES IkeEncryption = "DES"
0000000000000000000000000000000000000000;;		// DES3 specifies the des3 state for ike encryption.
0000000000000000000000000000000000000000;;		DES3 IkeEncryption = "DES3"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IkeIntegrity enumerates the values for ike integrity.
0000000000000000000000000000000000000000;;	type IkeIntegrity string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// MD5 specifies the md5 state for ike integrity.
0000000000000000000000000000000000000000;;		MD5 IkeIntegrity = "MD5"
0000000000000000000000000000000000000000;;		// SHA1 specifies the sha1 state for ike integrity.
0000000000000000000000000000000000000000;;		SHA1 IkeIntegrity = "SHA1"
0000000000000000000000000000000000000000;;		// SHA256 specifies the sha256 state for ike integrity.
0000000000000000000000000000000000000000;;		SHA256 IkeIntegrity = "SHA256"
0000000000000000000000000000000000000000;;		// SHA384 specifies the sha384 state for ike integrity.
0000000000000000000000000000000000000000;;		SHA384 IkeIntegrity = "SHA384"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IPAllocationMethod enumerates the values for ip allocation method.
0000000000000000000000000000000000000000;;	type IPAllocationMethod string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Dynamic specifies the dynamic state for ip allocation method.
0000000000000000000000000000000000000000;;		Dynamic IPAllocationMethod = "Dynamic"
0000000000000000000000000000000000000000;;		// Static specifies the static state for ip allocation method.
0000000000000000000000000000000000000000;;		Static IPAllocationMethod = "Static"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IpsecEncryption enumerates the values for ipsec encryption.
0000000000000000000000000000000000000000;;	type IpsecEncryption string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// IpsecEncryptionAES128 specifies the ipsec encryption aes128 state for
0000000000000000000000000000000000000000;;		// ipsec encryption.
0000000000000000000000000000000000000000;;		IpsecEncryptionAES128 IpsecEncryption = "AES128"
0000000000000000000000000000000000000000;;		// IpsecEncryptionAES192 specifies the ipsec encryption aes192 state for
0000000000000000000000000000000000000000;;		// ipsec encryption.
0000000000000000000000000000000000000000;;		IpsecEncryptionAES192 IpsecEncryption = "AES192"
0000000000000000000000000000000000000000;;		// IpsecEncryptionAES256 specifies the ipsec encryption aes256 state for
0000000000000000000000000000000000000000;;		// ipsec encryption.
0000000000000000000000000000000000000000;;		IpsecEncryptionAES256 IpsecEncryption = "AES256"
0000000000000000000000000000000000000000;;		// IpsecEncryptionDES specifies the ipsec encryption des state for ipsec
0000000000000000000000000000000000000000;;		// encryption.
0000000000000000000000000000000000000000;;		IpsecEncryptionDES IpsecEncryption = "DES"
0000000000000000000000000000000000000000;;		// IpsecEncryptionDES3 specifies the ipsec encryption des3 state for ipsec
0000000000000000000000000000000000000000;;		// encryption.
0000000000000000000000000000000000000000;;		IpsecEncryptionDES3 IpsecEncryption = "DES3"
0000000000000000000000000000000000000000;;		// IpsecEncryptionGCMAES128 specifies the ipsec encryption gcmaes128 state
0000000000000000000000000000000000000000;;		// for ipsec encryption.
0000000000000000000000000000000000000000;;		IpsecEncryptionGCMAES128 IpsecEncryption = "GCMAES128"
0000000000000000000000000000000000000000;;		// IpsecEncryptionGCMAES192 specifies the ipsec encryption gcmaes192 state
0000000000000000000000000000000000000000;;		// for ipsec encryption.
0000000000000000000000000000000000000000;;		IpsecEncryptionGCMAES192 IpsecEncryption = "GCMAES192"
0000000000000000000000000000000000000000;;		// IpsecEncryptionGCMAES256 specifies the ipsec encryption gcmaes256 state
0000000000000000000000000000000000000000;;		// for ipsec encryption.
0000000000000000000000000000000000000000;;		IpsecEncryptionGCMAES256 IpsecEncryption = "GCMAES256"
0000000000000000000000000000000000000000;;		// IpsecEncryptionNone specifies the ipsec encryption none state for ipsec
0000000000000000000000000000000000000000;;		// encryption.
0000000000000000000000000000000000000000;;		IpsecEncryptionNone IpsecEncryption = "None"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IpsecIntegrity enumerates the values for ipsec integrity.
0000000000000000000000000000000000000000;;	type IpsecIntegrity string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// IpsecIntegrityGCMAES128 specifies the ipsec integrity gcmaes128 state
0000000000000000000000000000000000000000;;		// for ipsec integrity.
0000000000000000000000000000000000000000;;		IpsecIntegrityGCMAES128 IpsecIntegrity = "GCMAES128"
0000000000000000000000000000000000000000;;		// IpsecIntegrityGCMAES192 specifies the ipsec integrity gcmaes192 state
0000000000000000000000000000000000000000;;		// for ipsec integrity.
0000000000000000000000000000000000000000;;		IpsecIntegrityGCMAES192 IpsecIntegrity = "GCMAES192"
0000000000000000000000000000000000000000;;		// IpsecIntegrityGCMAES256 specifies the ipsec integrity gcmaes256 state
0000000000000000000000000000000000000000;;		// for ipsec integrity.
0000000000000000000000000000000000000000;;		IpsecIntegrityGCMAES256 IpsecIntegrity = "GCMAES256"
0000000000000000000000000000000000000000;;		// IpsecIntegrityMD5 specifies the ipsec integrity md5 state for ipsec
0000000000000000000000000000000000000000;;		// integrity.
0000000000000000000000000000000000000000;;		IpsecIntegrityMD5 IpsecIntegrity = "MD5"
0000000000000000000000000000000000000000;;		// IpsecIntegritySHA1 specifies the ipsec integrity sha1 state for ipsec
0000000000000000000000000000000000000000;;		// integrity.
0000000000000000000000000000000000000000;;		IpsecIntegritySHA1 IpsecIntegrity = "SHA1"
0000000000000000000000000000000000000000;;		// IpsecIntegritySHA256 specifies the ipsec integrity sha256 state for
0000000000000000000000000000000000000000;;		// ipsec integrity.
0000000000000000000000000000000000000000;;		IpsecIntegritySHA256 IpsecIntegrity = "SHA256"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IPVersion enumerates the values for ip version.
0000000000000000000000000000000000000000;;	type IPVersion string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// IPv4 specifies the i pv 4 state for ip version.
0000000000000000000000000000000000000000;;		IPv4 IPVersion = "IPv4"
0000000000000000000000000000000000000000;;		// IPv6 specifies the i pv 6 state for ip version.
0000000000000000000000000000000000000000;;		IPv6 IPVersion = "IPv6"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LoadDistribution enumerates the values for load distribution.
0000000000000000000000000000000000000000;;	type LoadDistribution string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Default specifies the default state for load distribution.
0000000000000000000000000000000000000000;;		Default LoadDistribution = "Default"
0000000000000000000000000000000000000000;;		// SourceIP specifies the source ip state for load distribution.
0000000000000000000000000000000000000000;;		SourceIP LoadDistribution = "SourceIP"
0000000000000000000000000000000000000000;;		// SourceIPProtocol specifies the source ip protocol state for load
0000000000000000000000000000000000000000;;		// distribution.
0000000000000000000000000000000000000000;;		SourceIPProtocol LoadDistribution = "SourceIPProtocol"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NextHopType enumerates the values for next hop type.
0000000000000000000000000000000000000000;;	type NextHopType string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// NextHopTypeHyperNetGateway specifies the next hop type hyper net gateway
0000000000000000000000000000000000000000;;		// state for next hop type.
0000000000000000000000000000000000000000;;		NextHopTypeHyperNetGateway NextHopType = "HyperNetGateway"
0000000000000000000000000000000000000000;;		// NextHopTypeInternet specifies the next hop type internet state for next
0000000000000000000000000000000000000000;;		// hop type.
0000000000000000000000000000000000000000;;		NextHopTypeInternet NextHopType = "Internet"
0000000000000000000000000000000000000000;;		// NextHopTypeNone specifies the next hop type none state for next hop
0000000000000000000000000000000000000000;;		// type.
0000000000000000000000000000000000000000;;		NextHopTypeNone NextHopType = "None"
0000000000000000000000000000000000000000;;		// NextHopTypeVirtualAppliance specifies the next hop type virtual
0000000000000000000000000000000000000000;;		// appliance state for next hop type.
0000000000000000000000000000000000000000;;		NextHopTypeVirtualAppliance NextHopType = "VirtualAppliance"
0000000000000000000000000000000000000000;;		// NextHopTypeVirtualNetworkGateway specifies the next hop type virtual
0000000000000000000000000000000000000000;;		// network gateway state for next hop type.
0000000000000000000000000000000000000000;;		NextHopTypeVirtualNetworkGateway NextHopType = "VirtualNetworkGateway"
0000000000000000000000000000000000000000;;		// NextHopTypeVnetLocal specifies the next hop type vnet local state for
0000000000000000000000000000000000000000;;		// next hop type.
0000000000000000000000000000000000000000;;		NextHopTypeVnetLocal NextHopType = "VnetLocal"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OperationStatus enumerates the values for operation status.
0000000000000000000000000000000000000000;;	type OperationStatus string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Failed specifies the failed state for operation status.
0000000000000000000000000000000000000000;;		Failed OperationStatus = "Failed"
0000000000000000000000000000000000000000;;		// InProgress specifies the in progress state for operation status.
0000000000000000000000000000000000000000;;		InProgress OperationStatus = "InProgress"
0000000000000000000000000000000000000000;;		// Succeeded specifies the succeeded state for operation status.
0000000000000000000000000000000000000000;;		Succeeded OperationStatus = "Succeeded"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PcError enumerates the values for pc error.
0000000000000000000000000000000000000000;;	type PcError string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// AgentStopped specifies the agent stopped state for pc error.
0000000000000000000000000000000000000000;;		AgentStopped PcError = "AgentStopped"
0000000000000000000000000000000000000000;;		// CaptureFailed specifies the capture failed state for pc error.
0000000000000000000000000000000000000000;;		CaptureFailed PcError = "CaptureFailed"
0000000000000000000000000000000000000000;;		// InternalError specifies the internal error state for pc error.
0000000000000000000000000000000000000000;;		InternalError PcError = "InternalError"
0000000000000000000000000000000000000000;;		// LocalFileFailed specifies the local file failed state for pc error.
0000000000000000000000000000000000000000;;		LocalFileFailed PcError = "LocalFileFailed"
0000000000000000000000000000000000000000;;		// StorageFailed specifies the storage failed state for pc error.
0000000000000000000000000000000000000000;;		StorageFailed PcError = "StorageFailed"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PcProtocol enumerates the values for pc protocol.
0000000000000000000000000000000000000000;;	type PcProtocol string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Any specifies the any state for pc protocol.
0000000000000000000000000000000000000000;;		Any PcProtocol = "Any"
0000000000000000000000000000000000000000;;		// TCP specifies the tcp state for pc protocol.
0000000000000000000000000000000000000000;;		TCP PcProtocol = "TCP"
0000000000000000000000000000000000000000;;		// UDP specifies the udp state for pc protocol.
0000000000000000000000000000000000000000;;		UDP PcProtocol = "UDP"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PcStatus enumerates the values for pc status.
0000000000000000000000000000000000000000;;	type PcStatus string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// PcStatusError specifies the pc status error state for pc status.
0000000000000000000000000000000000000000;;		PcStatusError PcStatus = "Error"
0000000000000000000000000000000000000000;;		// PcStatusNotStarted specifies the pc status not started state for pc
0000000000000000000000000000000000000000;;		// status.
0000000000000000000000000000000000000000;;		PcStatusNotStarted PcStatus = "NotStarted"
0000000000000000000000000000000000000000;;		// PcStatusRunning specifies the pc status running state for pc status.
0000000000000000000000000000000000000000;;		PcStatusRunning PcStatus = "Running"
0000000000000000000000000000000000000000;;		// PcStatusStopped specifies the pc status stopped state for pc status.
0000000000000000000000000000000000000000;;		PcStatusStopped PcStatus = "Stopped"
0000000000000000000000000000000000000000;;		// PcStatusUnknown specifies the pc status unknown state for pc status.
0000000000000000000000000000000000000000;;		PcStatusUnknown PcStatus = "Unknown"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PfsGroup enumerates the values for pfs group.
0000000000000000000000000000000000000000;;	type PfsGroup string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// PfsGroupECP256 specifies the pfs group ecp256 state for pfs group.
0000000000000000000000000000000000000000;;		PfsGroupECP256 PfsGroup = "ECP256"
0000000000000000000000000000000000000000;;		// PfsGroupECP384 specifies the pfs group ecp384 state for pfs group.
0000000000000000000000000000000000000000;;		PfsGroupECP384 PfsGroup = "ECP384"
0000000000000000000000000000000000000000;;		// PfsGroupNone specifies the pfs group none state for pfs group.
0000000000000000000000000000000000000000;;		PfsGroupNone PfsGroup = "None"
0000000000000000000000000000000000000000;;		// PfsGroupPFS1 specifies the pfs group pfs1 state for pfs group.
0000000000000000000000000000000000000000;;		PfsGroupPFS1 PfsGroup = "PFS1"
0000000000000000000000000000000000000000;;		// PfsGroupPFS2 specifies the pfs group pfs2 state for pfs group.
0000000000000000000000000000000000000000;;		PfsGroupPFS2 PfsGroup = "PFS2"
0000000000000000000000000000000000000000;;		// PfsGroupPFS2048 specifies the pfs group pfs2048 state for pfs group.
0000000000000000000000000000000000000000;;		PfsGroupPFS2048 PfsGroup = "PFS2048"
0000000000000000000000000000000000000000;;		// PfsGroupPFS24 specifies the pfs group pfs24 state for pfs group.
0000000000000000000000000000000000000000;;		PfsGroupPFS24 PfsGroup = "PFS24"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ProbeProtocol enumerates the values for probe protocol.
0000000000000000000000000000000000000000;;	type ProbeProtocol string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// ProbeProtocolHTTP specifies the probe protocol http state for probe
0000000000000000000000000000000000000000;;		// protocol.
0000000000000000000000000000000000000000;;		ProbeProtocolHTTP ProbeProtocol = "Http"
0000000000000000000000000000000000000000;;		// ProbeProtocolTCP specifies the probe protocol tcp state for probe
0000000000000000000000000000000000000000;;		// protocol.
0000000000000000000000000000000000000000;;		ProbeProtocolTCP ProbeProtocol = "Tcp"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ProcessorArchitecture enumerates the values for processor architecture.
0000000000000000000000000000000000000000;;	type ProcessorArchitecture string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Amd64 specifies the amd 64 state for processor architecture.
0000000000000000000000000000000000000000;;		Amd64 ProcessorArchitecture = "Amd64"
0000000000000000000000000000000000000000;;		// X86 specifies the x86 state for processor architecture.
0000000000000000000000000000000000000000;;		X86 ProcessorArchitecture = "X86"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Protocol enumerates the values for protocol.
0000000000000000000000000000000000000000;;	type Protocol string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// ProtocolTCP specifies the protocol tcp state for protocol.
0000000000000000000000000000000000000000;;		ProtocolTCP Protocol = "TCP"
0000000000000000000000000000000000000000;;		// ProtocolUDP specifies the protocol udp state for protocol.
0000000000000000000000000000000000000000;;		ProtocolUDP Protocol = "UDP"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ProvisioningState enumerates the values for provisioning state.
0000000000000000000000000000000000000000;;	type ProvisioningState string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// ProvisioningStateDeleting specifies the provisioning state deleting
0000000000000000000000000000000000000000;;		// state for provisioning state.
0000000000000000000000000000000000000000;;		ProvisioningStateDeleting ProvisioningState = "Deleting"
0000000000000000000000000000000000000000;;		// ProvisioningStateFailed specifies the provisioning state failed state
0000000000000000000000000000000000000000;;		// for provisioning state.
0000000000000000000000000000000000000000;;		ProvisioningStateFailed ProvisioningState = "Failed"
0000000000000000000000000000000000000000;;		// ProvisioningStateSucceeded specifies the provisioning state succeeded
0000000000000000000000000000000000000000;;		// state for provisioning state.
0000000000000000000000000000000000000000;;		ProvisioningStateSucceeded ProvisioningState = "Succeeded"
0000000000000000000000000000000000000000;;		// ProvisioningStateUpdating specifies the provisioning state updating
0000000000000000000000000000000000000000;;		// state for provisioning state.
0000000000000000000000000000000000000000;;		ProvisioningStateUpdating ProvisioningState = "Updating"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RouteNextHopType enumerates the values for route next hop type.
0000000000000000000000000000000000000000;;	type RouteNextHopType string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// RouteNextHopTypeInternet specifies the route next hop type internet
0000000000000000000000000000000000000000;;		// state for route next hop type.
0000000000000000000000000000000000000000;;		RouteNextHopTypeInternet RouteNextHopType = "Internet"
0000000000000000000000000000000000000000;;		// RouteNextHopTypeNone specifies the route next hop type none state for
0000000000000000000000000000000000000000;;		// route next hop type.
0000000000000000000000000000000000000000;;		RouteNextHopTypeNone RouteNextHopType = "None"
0000000000000000000000000000000000000000;;		// RouteNextHopTypeVirtualAppliance specifies the route next hop type
0000000000000000000000000000000000000000;;		// virtual appliance state for route next hop type.
0000000000000000000000000000000000000000;;		RouteNextHopTypeVirtualAppliance RouteNextHopType = "VirtualAppliance"
0000000000000000000000000000000000000000;;		// RouteNextHopTypeVirtualNetworkGateway specifies the route next hop type
0000000000000000000000000000000000000000;;		// virtual network gateway state for route next hop type.
0000000000000000000000000000000000000000;;		RouteNextHopTypeVirtualNetworkGateway RouteNextHopType = "VirtualNetworkGateway"
0000000000000000000000000000000000000000;;		// RouteNextHopTypeVnetLocal specifies the route next hop type vnet local
0000000000000000000000000000000000000000;;		// state for route next hop type.
0000000000000000000000000000000000000000;;		RouteNextHopTypeVnetLocal RouteNextHopType = "VnetLocal"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SecurityRuleAccess enumerates the values for security rule access.
0000000000000000000000000000000000000000;;	type SecurityRuleAccess string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// SecurityRuleAccessAllow specifies the security rule access allow state
0000000000000000000000000000000000000000;;		// for security rule access.
0000000000000000000000000000000000000000;;		SecurityRuleAccessAllow SecurityRuleAccess = "Allow"
0000000000000000000000000000000000000000;;		// SecurityRuleAccessDeny specifies the security rule access deny state for
0000000000000000000000000000000000000000;;		// security rule access.
0000000000000000000000000000000000000000;;		SecurityRuleAccessDeny SecurityRuleAccess = "Deny"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SecurityRuleDirection enumerates the values for security rule direction.
0000000000000000000000000000000000000000;;	type SecurityRuleDirection string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// SecurityRuleDirectionInbound specifies the security rule direction
0000000000000000000000000000000000000000;;		// inbound state for security rule direction.
0000000000000000000000000000000000000000;;		SecurityRuleDirectionInbound SecurityRuleDirection = "Inbound"
0000000000000000000000000000000000000000;;		// SecurityRuleDirectionOutbound specifies the security rule direction
0000000000000000000000000000000000000000;;		// outbound state for security rule direction.
0000000000000000000000000000000000000000;;		SecurityRuleDirectionOutbound SecurityRuleDirection = "Outbound"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SecurityRuleProtocol enumerates the values for security rule protocol.
0000000000000000000000000000000000000000;;	type SecurityRuleProtocol string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// SecurityRuleProtocolAsterisk specifies the security rule protocol
0000000000000000000000000000000000000000;;		// asterisk state for security rule protocol.
0000000000000000000000000000000000000000;;		SecurityRuleProtocolAsterisk SecurityRuleProtocol = "*"
0000000000000000000000000000000000000000;;		// SecurityRuleProtocolTCP specifies the security rule protocol tcp state
0000000000000000000000000000000000000000;;		// for security rule protocol.
0000000000000000000000000000000000000000;;		SecurityRuleProtocolTCP SecurityRuleProtocol = "Tcp"
0000000000000000000000000000000000000000;;		// SecurityRuleProtocolUDP specifies the security rule protocol udp state
0000000000000000000000000000000000000000;;		// for security rule protocol.
0000000000000000000000000000000000000000;;		SecurityRuleProtocolUDP SecurityRuleProtocol = "Udp"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ServiceProviderProvisioningState enumerates the values for service provider
0000000000000000000000000000000000000000;;	// provisioning state.
0000000000000000000000000000000000000000;;	type ServiceProviderProvisioningState string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Deprovisioning specifies the deprovisioning state for service provider
0000000000000000000000000000000000000000;;		// provisioning state.
0000000000000000000000000000000000000000;;		Deprovisioning ServiceProviderProvisioningState = "Deprovisioning"
0000000000000000000000000000000000000000;;		// NotProvisioned specifies the not provisioned state for service provider
0000000000000000000000000000000000000000;;		// provisioning state.
0000000000000000000000000000000000000000;;		NotProvisioned ServiceProviderProvisioningState = "NotProvisioned"
0000000000000000000000000000000000000000;;		// Provisioned specifies the provisioned state for service provider
0000000000000000000000000000000000000000;;		// provisioning state.
0000000000000000000000000000000000000000;;		Provisioned ServiceProviderProvisioningState = "Provisioned"
0000000000000000000000000000000000000000;;		// Provisioning specifies the provisioning state for service provider
0000000000000000000000000000000000000000;;		// provisioning state.
0000000000000000000000000000000000000000;;		Provisioning ServiceProviderProvisioningState = "Provisioning"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TransportProtocol enumerates the values for transport protocol.
0000000000000000000000000000000000000000;;	type TransportProtocol string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// TransportProtocolTCP specifies the transport protocol tcp state for
0000000000000000000000000000000000000000;;		// transport protocol.
0000000000000000000000000000000000000000;;		TransportProtocolTCP TransportProtocol = "Tcp"
0000000000000000000000000000000000000000;;		// TransportProtocolUDP specifies the transport protocol udp state for
0000000000000000000000000000000000000000;;		// transport protocol.
0000000000000000000000000000000000000000;;		TransportProtocolUDP TransportProtocol = "Udp"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualNetworkGatewayConnectionStatus enumerates the values for virtual
0000000000000000000000000000000000000000;;	// network gateway connection status.
0000000000000000000000000000000000000000;;	type VirtualNetworkGatewayConnectionStatus string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// VirtualNetworkGatewayConnectionStatusConnected specifies the virtual
0000000000000000000000000000000000000000;;		// network gateway connection status connected state for virtual network
0000000000000000000000000000000000000000;;		// gateway connection status.
0000000000000000000000000000000000000000;;		VirtualNetworkGatewayConnectionStatusConnected VirtualNetworkGatewayConnectionStatus = "Connected"
0000000000000000000000000000000000000000;;		// VirtualNetworkGatewayConnectionStatusConnecting specifies the virtual
0000000000000000000000000000000000000000;;		// network gateway connection status connecting state for virtual network
0000000000000000000000000000000000000000;;		// gateway connection status.
0000000000000000000000000000000000000000;;		VirtualNetworkGatewayConnectionStatusConnecting VirtualNetworkGatewayConnectionStatus = "Connecting"
0000000000000000000000000000000000000000;;		// VirtualNetworkGatewayConnectionStatusNotConnected specifies the virtual
0000000000000000000000000000000000000000;;		// network gateway connection status not connected state for virtual
0000000000000000000000000000000000000000;;		// network gateway connection status.
0000000000000000000000000000000000000000;;		VirtualNetworkGatewayConnectionStatusNotConnected VirtualNetworkGatewayConnectionStatus = "NotConnected"
0000000000000000000000000000000000000000;;		// VirtualNetworkGatewayConnectionStatusUnknown specifies the virtual
0000000000000000000000000000000000000000;;		// network gateway connection status unknown state for virtual network
0000000000000000000000000000000000000000;;		// gateway connection status.
0000000000000000000000000000000000000000;;		VirtualNetworkGatewayConnectionStatusUnknown VirtualNetworkGatewayConnectionStatus = "Unknown"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualNetworkGatewayConnectionType enumerates the values for virtual
0000000000000000000000000000000000000000;;	// network gateway connection type.
0000000000000000000000000000000000000000;;	type VirtualNetworkGatewayConnectionType string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// ExpressRoute specifies the express route state for virtual network
0000000000000000000000000000000000000000;;		// gateway connection type.
0000000000000000000000000000000000000000;;		ExpressRoute VirtualNetworkGatewayConnectionType = "ExpressRoute"
0000000000000000000000000000000000000000;;		// IPsec specifies the i psec state for virtual network gateway connection
0000000000000000000000000000000000000000;;		// type.
0000000000000000000000000000000000000000;;		IPsec VirtualNetworkGatewayConnectionType = "IPsec"
0000000000000000000000000000000000000000;;		// Vnet2Vnet specifies the vnet 2 vnet state for virtual network gateway
0000000000000000000000000000000000000000;;		// connection type.
0000000000000000000000000000000000000000;;		Vnet2Vnet VirtualNetworkGatewayConnectionType = "Vnet2Vnet"
0000000000000000000000000000000000000000;;		// VPNClient specifies the vpn client state for virtual network gateway
0000000000000000000000000000000000000000;;		// connection type.
0000000000000000000000000000000000000000;;		VPNClient VirtualNetworkGatewayConnectionType = "VPNClient"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualNetworkGatewaySkuName enumerates the values for virtual network
0000000000000000000000000000000000000000;;	// gateway sku name.
0000000000000000000000000000000000000000;;	type VirtualNetworkGatewaySkuName string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// VirtualNetworkGatewaySkuNameBasic specifies the virtual network gateway
0000000000000000000000000000000000000000;;		// sku name basic state for virtual network gateway sku name.
0000000000000000000000000000000000000000;;		VirtualNetworkGatewaySkuNameBasic VirtualNetworkGatewaySkuName = "Basic"
0000000000000000000000000000000000000000;;		// VirtualNetworkGatewaySkuNameHighPerformance specifies the virtual
0000000000000000000000000000000000000000;;		// network gateway sku name high performance state for virtual network
0000000000000000000000000000000000000000;;		// gateway sku name.
0000000000000000000000000000000000000000;;		VirtualNetworkGatewaySkuNameHighPerformance VirtualNetworkGatewaySkuName = "HighPerformance"
0000000000000000000000000000000000000000;;		// VirtualNetworkGatewaySkuNameStandard specifies the virtual network
0000000000000000000000000000000000000000;;		// gateway sku name standard state for virtual network gateway sku name.
0000000000000000000000000000000000000000;;		VirtualNetworkGatewaySkuNameStandard VirtualNetworkGatewaySkuName = "Standard"
0000000000000000000000000000000000000000;;		// VirtualNetworkGatewaySkuNameUltraPerformance specifies the virtual
0000000000000000000000000000000000000000;;		// network gateway sku name ultra performance state for virtual network
0000000000000000000000000000000000000000;;		// gateway sku name.
0000000000000000000000000000000000000000;;		VirtualNetworkGatewaySkuNameUltraPerformance VirtualNetworkGatewaySkuName = "UltraPerformance"
0000000000000000000000000000000000000000;;		// VirtualNetworkGatewaySkuNameVpnGw1 specifies the virtual network gateway
0000000000000000000000000000000000000000;;		// sku name vpn gw 1 state for virtual network gateway sku name.
0000000000000000000000000000000000000000;;		VirtualNetworkGatewaySkuNameVpnGw1 VirtualNetworkGatewaySkuName = "VpnGw1"
0000000000000000000000000000000000000000;;		// VirtualNetworkGatewaySkuNameVpnGw2 specifies the virtual network gateway
0000000000000000000000000000000000000000;;		// sku name vpn gw 2 state for virtual network gateway sku name.
0000000000000000000000000000000000000000;;		VirtualNetworkGatewaySkuNameVpnGw2 VirtualNetworkGatewaySkuName = "VpnGw2"
0000000000000000000000000000000000000000;;		// VirtualNetworkGatewaySkuNameVpnGw3 specifies the virtual network gateway
0000000000000000000000000000000000000000;;		// sku name vpn gw 3 state for virtual network gateway sku name.
0000000000000000000000000000000000000000;;		VirtualNetworkGatewaySkuNameVpnGw3 VirtualNetworkGatewaySkuName = "VpnGw3"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualNetworkGatewaySkuTier enumerates the values for virtual network
0000000000000000000000000000000000000000;;	// gateway sku tier.
0000000000000000000000000000000000000000;;	type VirtualNetworkGatewaySkuTier string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// VirtualNetworkGatewaySkuTierBasic specifies the virtual network gateway
0000000000000000000000000000000000000000;;		// sku tier basic state for virtual network gateway sku tier.
0000000000000000000000000000000000000000;;		VirtualNetworkGatewaySkuTierBasic VirtualNetworkGatewaySkuTier = "Basic"
0000000000000000000000000000000000000000;;		// VirtualNetworkGatewaySkuTierHighPerformance specifies the virtual
0000000000000000000000000000000000000000;;		// network gateway sku tier high performance state for virtual network
0000000000000000000000000000000000000000;;		// gateway sku tier.
0000000000000000000000000000000000000000;;		VirtualNetworkGatewaySkuTierHighPerformance VirtualNetworkGatewaySkuTier = "HighPerformance"
0000000000000000000000000000000000000000;;		// VirtualNetworkGatewaySkuTierStandard specifies the virtual network
0000000000000000000000000000000000000000;;		// gateway sku tier standard state for virtual network gateway sku tier.
0000000000000000000000000000000000000000;;		VirtualNetworkGatewaySkuTierStandard VirtualNetworkGatewaySkuTier = "Standard"
0000000000000000000000000000000000000000;;		// VirtualNetworkGatewaySkuTierUltraPerformance specifies the virtual
0000000000000000000000000000000000000000;;		// network gateway sku tier ultra performance state for virtual network
0000000000000000000000000000000000000000;;		// gateway sku tier.
0000000000000000000000000000000000000000;;		VirtualNetworkGatewaySkuTierUltraPerformance VirtualNetworkGatewaySkuTier = "UltraPerformance"
0000000000000000000000000000000000000000;;		// VirtualNetworkGatewaySkuTierVpnGw1 specifies the virtual network gateway
0000000000000000000000000000000000000000;;		// sku tier vpn gw 1 state for virtual network gateway sku tier.
0000000000000000000000000000000000000000;;		VirtualNetworkGatewaySkuTierVpnGw1 VirtualNetworkGatewaySkuTier = "VpnGw1"
0000000000000000000000000000000000000000;;		// VirtualNetworkGatewaySkuTierVpnGw2 specifies the virtual network gateway
0000000000000000000000000000000000000000;;		// sku tier vpn gw 2 state for virtual network gateway sku tier.
0000000000000000000000000000000000000000;;		VirtualNetworkGatewaySkuTierVpnGw2 VirtualNetworkGatewaySkuTier = "VpnGw2"
0000000000000000000000000000000000000000;;		// VirtualNetworkGatewaySkuTierVpnGw3 specifies the virtual network gateway
0000000000000000000000000000000000000000;;		// sku tier vpn gw 3 state for virtual network gateway sku tier.
0000000000000000000000000000000000000000;;		VirtualNetworkGatewaySkuTierVpnGw3 VirtualNetworkGatewaySkuTier = "VpnGw3"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualNetworkGatewayType enumerates the values for virtual network gateway
0000000000000000000000000000000000000000;;	// type.
0000000000000000000000000000000000000000;;	type VirtualNetworkGatewayType string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// VirtualNetworkGatewayTypeExpressRoute specifies the virtual network
0000000000000000000000000000000000000000;;		// gateway type express route state for virtual network gateway type.
0000000000000000000000000000000000000000;;		VirtualNetworkGatewayTypeExpressRoute VirtualNetworkGatewayType = "ExpressRoute"
0000000000000000000000000000000000000000;;		// VirtualNetworkGatewayTypeVpn specifies the virtual network gateway type
0000000000000000000000000000000000000000;;		// vpn state for virtual network gateway type.
0000000000000000000000000000000000000000;;		VirtualNetworkGatewayTypeVpn VirtualNetworkGatewayType = "Vpn"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualNetworkPeeringState enumerates the values for virtual network peering
0000000000000000000000000000000000000000;;	// state.
0000000000000000000000000000000000000000;;	type VirtualNetworkPeeringState string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Connected specifies the connected state for virtual network peering
0000000000000000000000000000000000000000;;		// state.
0000000000000000000000000000000000000000;;		Connected VirtualNetworkPeeringState = "Connected"
0000000000000000000000000000000000000000;;		// Disconnected specifies the disconnected state for virtual network
0000000000000000000000000000000000000000;;		// peering state.
0000000000000000000000000000000000000000;;		Disconnected VirtualNetworkPeeringState = "Disconnected"
0000000000000000000000000000000000000000;;		// Initiated specifies the initiated state for virtual network peering
0000000000000000000000000000000000000000;;		// state.
0000000000000000000000000000000000000000;;		Initiated VirtualNetworkPeeringState = "Initiated"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VpnType enumerates the values for vpn type.
0000000000000000000000000000000000000000;;	type VpnType string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// PolicyBased specifies the policy based state for vpn type.
0000000000000000000000000000000000000000;;		PolicyBased VpnType = "PolicyBased"
0000000000000000000000000000000000000000;;		// RouteBased specifies the route based state for vpn type.
0000000000000000000000000000000000000000;;		RouteBased VpnType = "RouteBased"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddressSpace is addressSpace contains an array of IP address ranges that can
0000000000000000000000000000000000000000;;	// be used by subnets of the virtual network.
0000000000000000000000000000000000000000;;	type AddressSpace struct {
0000000000000000000000000000000000000000;;		AddressPrefixes *[]string `json:"addressPrefixes,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGateway is application gateway resource
0000000000000000000000000000000000000000;;	type ApplicationGateway struct {
0000000000000000000000000000000000000000;;		autorest.Response                   `json:"-"`
0000000000000000000000000000000000000000;;		ID                                  *string             `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Name                                *string             `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Type                                *string             `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Location                            *string             `json:"location,omitempty"`
0000000000000000000000000000000000000000;;		Tags                                *map[string]*string `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		*ApplicationGatewayPropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Etag                                *string `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewayAuthenticationCertificate is authentication certificates
0000000000000000000000000000000000000000;;	// of an application gateway.
0000000000000000000000000000000000000000;;	type ApplicationGatewayAuthenticationCertificate struct {
0000000000000000000000000000000000000000;;		ID                                                           *string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		*ApplicationGatewayAuthenticationCertificatePropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Name                                                         *string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Etag                                                         *string `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewayAuthenticationCertificatePropertiesFormat is
0000000000000000000000000000000000000000;;	// authentication certificates properties of an application gateway.
0000000000000000000000000000000000000000;;	type ApplicationGatewayAuthenticationCertificatePropertiesFormat struct {
0000000000000000000000000000000000000000;;		Data              *string `json:"data,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState *string `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewayAvailableWafRuleSetsResult is response for
0000000000000000000000000000000000000000;;	// ApplicationGatewayAvailableWafRuleSets API service call.
0000000000000000000000000000000000000000;;	type ApplicationGatewayAvailableWafRuleSetsResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]ApplicationGatewayFirewallRuleSet `json:"value,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewayBackendAddress is backend address of an application
0000000000000000000000000000000000000000;;	// gateway.
0000000000000000000000000000000000000000;;	type ApplicationGatewayBackendAddress struct {
0000000000000000000000000000000000000000;;		Fqdn      *string `json:"fqdn,omitempty"`
0000000000000000000000000000000000000000;;		IPAddress *string `json:"ipAddress,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewayBackendAddressPool is backend Address Pool of an
0000000000000000000000000000000000000000;;	// application gateway.
0000000000000000000000000000000000000000;;	type ApplicationGatewayBackendAddressPool struct {
0000000000000000000000000000000000000000;;		ID                                                    *string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		*ApplicationGatewayBackendAddressPoolPropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Name                                                  *string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Etag                                                  *string `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewayBackendAddressPoolPropertiesFormat is properties of
0000000000000000000000000000000000000000;;	// Backend Address Pool of an application gateway.
0000000000000000000000000000000000000000;;	type ApplicationGatewayBackendAddressPoolPropertiesFormat struct {
0000000000000000000000000000000000000000;;		BackendIPConfigurations *[]InterfaceIPConfiguration         `json:"backendIPConfigurations,omitempty"`
0000000000000000000000000000000000000000;;		BackendAddresses        *[]ApplicationGatewayBackendAddress `json:"backendAddresses,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState       *string                             `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewayBackendHealth is list of
0000000000000000000000000000000000000000;;	// ApplicationGatewayBackendHealthPool resources.
0000000000000000000000000000000000000000;;	type ApplicationGatewayBackendHealth struct {
0000000000000000000000000000000000000000;;		autorest.Response   `json:"-"`
0000000000000000000000000000000000000000;;		BackendAddressPools *[]ApplicationGatewayBackendHealthPool `json:"backendAddressPools,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewayBackendHealthHTTPSettings is application gateway
0000000000000000000000000000000000000000;;	// BackendHealthHttp settings.
0000000000000000000000000000000000000000;;	type ApplicationGatewayBackendHealthHTTPSettings struct {
0000000000000000000000000000000000000000;;		BackendHTTPSettings *ApplicationGatewayBackendHTTPSettings   `json:"backendHttpSettings,omitempty"`
0000000000000000000000000000000000000000;;		Servers             *[]ApplicationGatewayBackendHealthServer `json:"servers,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewayBackendHealthPool is application gateway BackendHealth
0000000000000000000000000000000000000000;;	// pool.
0000000000000000000000000000000000000000;;	type ApplicationGatewayBackendHealthPool struct {
0000000000000000000000000000000000000000;;		BackendAddressPool            *ApplicationGatewayBackendAddressPool          `json:"backendAddressPool,omitempty"`
0000000000000000000000000000000000000000;;		BackendHTTPSettingsCollection *[]ApplicationGatewayBackendHealthHTTPSettings `json:"backendHttpSettingsCollection,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewayBackendHealthServer is application gateway backendhealth
0000000000000000000000000000000000000000;;	// http settings.
0000000000000000000000000000000000000000;;	type ApplicationGatewayBackendHealthServer struct {
0000000000000000000000000000000000000000;;		Address         *string                                     `json:"address,omitempty"`
0000000000000000000000000000000000000000;;		IPConfiguration *SubResource                                `json:"ipConfiguration,omitempty"`
0000000000000000000000000000000000000000;;		Health          ApplicationGatewayBackendHealthServerHealth `json:"health,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewayBackendHTTPSettings is backend address pool settings of an
0000000000000000000000000000000000000000;;	// application gateway.
0000000000000000000000000000000000000000;;	type ApplicationGatewayBackendHTTPSettings struct {
0000000000000000000000000000000000000000;;		ID                                                     *string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		*ApplicationGatewayBackendHTTPSettingsPropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Name                                                   *string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Etag                                                   *string `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewayBackendHTTPSettingsPropertiesFormat is properties of
0000000000000000000000000000000000000000;;	// Backend address pool settings of an application gateway.
0000000000000000000000000000000000000000;;	type ApplicationGatewayBackendHTTPSettingsPropertiesFormat struct {
0000000000000000000000000000000000000000;;		Port                       *int32                                `json:"port,omitempty"`
0000000000000000000000000000000000000000;;		Protocol                   ApplicationGatewayProtocol            `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;		CookieBasedAffinity        ApplicationGatewayCookieBasedAffinity `json:"cookieBasedAffinity,omitempty"`
0000000000000000000000000000000000000000;;		RequestTimeout             *int32                                `json:"requestTimeout,omitempty"`
0000000000000000000000000000000000000000;;		Probe                      *SubResource                          `json:"probe,omitempty"`
0000000000000000000000000000000000000000;;		AuthenticationCertificates *[]SubResource                        `json:"authenticationCertificates,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState          *string                               `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;		ConnectionDraining         *ApplicationGatewayConnectionDraining `json:"connectionDraining,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewayConnectionDraining is connection draining allows open
0000000000000000000000000000000000000000;;	// connections to a backend server to be active for a specified time after the
0000000000000000000000000000000000000000;;	// backend server got removed from the configuration.
0000000000000000000000000000000000000000;;	type ApplicationGatewayConnectionDraining struct {
0000000000000000000000000000000000000000;;		Enabled           *bool  `json:"enabled,omitempty"`
0000000000000000000000000000000000000000;;		DrainTimeoutInSec *int32 `json:"drainTimeoutInSec,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewayFirewallDisabledRuleGroup is allows to disable rules
0000000000000000000000000000000000000000;;	// within a rule group or an entire rule group.
0000000000000000000000000000000000000000;;	type ApplicationGatewayFirewallDisabledRuleGroup struct {
0000000000000000000000000000000000000000;;		RuleGroupName *string  `json:"ruleGroupName,omitempty"`
0000000000000000000000000000000000000000;;		Rules         *[]int32 `json:"rules,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewayFirewallRule is a web application firewall rule.
0000000000000000000000000000000000000000;;	type ApplicationGatewayFirewallRule struct {
0000000000000000000000000000000000000000;;		RuleID      *int32  `json:"ruleId,omitempty"`
0000000000000000000000000000000000000000;;		Description *string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewayFirewallRuleGroup is a web application firewall rule
0000000000000000000000000000000000000000;;	// group.
0000000000000000000000000000000000000000;;	type ApplicationGatewayFirewallRuleGroup struct {
0000000000000000000000000000000000000000;;		RuleGroupName *string                           `json:"ruleGroupName,omitempty"`
0000000000000000000000000000000000000000;;		Description   *string                           `json:"description,omitempty"`
0000000000000000000000000000000000000000;;		Rules         *[]ApplicationGatewayFirewallRule `json:"rules,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewayFirewallRuleSet is a web application firewall rule set.
0000000000000000000000000000000000000000;;	type ApplicationGatewayFirewallRuleSet struct {
0000000000000000000000000000000000000000;;		ID                                                 *string             `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Name                                               *string             `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Type                                               *string             `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Location                                           *string             `json:"location,omitempty"`
0000000000000000000000000000000000000000;;		Tags                                               *map[string]*string `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		*ApplicationGatewayFirewallRuleSetPropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewayFirewallRuleSetPropertiesFormat is properties of the web
0000000000000000000000000000000000000000;;	// application firewall rule set.
0000000000000000000000000000000000000000;;	type ApplicationGatewayFirewallRuleSetPropertiesFormat struct {
0000000000000000000000000000000000000000;;		ProvisioningState *string                                `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;		RuleSetType       *string                                `json:"ruleSetType,omitempty"`
0000000000000000000000000000000000000000;;		RuleSetVersion    *string                                `json:"ruleSetVersion,omitempty"`
0000000000000000000000000000000000000000;;		RuleGroups        *[]ApplicationGatewayFirewallRuleGroup `json:"ruleGroups,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewayFrontendIPConfiguration is frontend IP configuration of an
0000000000000000000000000000000000000000;;	// application gateway.
0000000000000000000000000000000000000000;;	type ApplicationGatewayFrontendIPConfiguration struct {
0000000000000000000000000000000000000000;;		ID                                                         *string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		*ApplicationGatewayFrontendIPConfigurationPropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Name                                                       *string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Etag                                                       *string `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewayFrontendIPConfigurationPropertiesFormat is properties of
0000000000000000000000000000000000000000;;	// Frontend IP configuration of an application gateway.
0000000000000000000000000000000000000000;;	type ApplicationGatewayFrontendIPConfigurationPropertiesFormat struct {
0000000000000000000000000000000000000000;;		PrivateIPAddress          *string            `json:"privateIPAddress,omitempty"`
0000000000000000000000000000000000000000;;		PrivateIPAllocationMethod IPAllocationMethod `json:"privateIPAllocationMethod,omitempty"`
0000000000000000000000000000000000000000;;		Subnet                    *SubResource       `json:"subnet,omitempty"`
0000000000000000000000000000000000000000;;		PublicIPAddress           *SubResource       `json:"publicIPAddress,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState         *string            `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewayFrontendPort is frontend port of an application gateway.
0000000000000000000000000000000000000000;;	type ApplicationGatewayFrontendPort struct {
0000000000000000000000000000000000000000;;		ID                                              *string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		*ApplicationGatewayFrontendPortPropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Name                                            *string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Etag                                            *string `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewayFrontendPortPropertiesFormat is properties of Frontend
0000000000000000000000000000000000000000;;	// port of an application gateway.
0000000000000000000000000000000000000000;;	type ApplicationGatewayFrontendPortPropertiesFormat struct {
0000000000000000000000000000000000000000;;		Port              *int32  `json:"port,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState *string `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewayHTTPListener is http listener of an application gateway.
0000000000000000000000000000000000000000;;	type ApplicationGatewayHTTPListener struct {
0000000000000000000000000000000000000000;;		ID                                              *string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		*ApplicationGatewayHTTPListenerPropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Name                                            *string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Etag                                            *string `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewayHTTPListenerPropertiesFormat is properties of HTTP
0000000000000000000000000000000000000000;;	// listener of an application gateway.
0000000000000000000000000000000000000000;;	type ApplicationGatewayHTTPListenerPropertiesFormat struct {
0000000000000000000000000000000000000000;;		FrontendIPConfiguration     *SubResource               `json:"frontendIPConfiguration,omitempty"`
0000000000000000000000000000000000000000;;		FrontendPort                *SubResource               `json:"frontendPort,omitempty"`
0000000000000000000000000000000000000000;;		Protocol                    ApplicationGatewayProtocol `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;		HostName                    *string                    `json:"hostName,omitempty"`
0000000000000000000000000000000000000000;;		SslCertificate              *SubResource               `json:"sslCertificate,omitempty"`
0000000000000000000000000000000000000000;;		RequireServerNameIndication *bool                      `json:"requireServerNameIndication,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState           *string                    `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewayIPConfiguration is iP configuration of an application
0000000000000000000000000000000000000000;;	// gateway. Currently 1 public and 1 private IP configuration is allowed.
0000000000000000000000000000000000000000;;	type ApplicationGatewayIPConfiguration struct {
0000000000000000000000000000000000000000;;		ID                                                 *string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		*ApplicationGatewayIPConfigurationPropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Name                                               *string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Etag                                               *string `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewayIPConfigurationPropertiesFormat is properties of IP
0000000000000000000000000000000000000000;;	// configuration of an application gateway.
0000000000000000000000000000000000000000;;	type ApplicationGatewayIPConfigurationPropertiesFormat struct {
0000000000000000000000000000000000000000;;		Subnet            *SubResource `json:"subnet,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState *string      `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewayListResult is response for ListApplicationGateways API
0000000000000000000000000000000000000000;;	// service call.
0000000000000000000000000000000000000000;;	type ApplicationGatewayListResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]ApplicationGateway `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		NextLink          *string               `json:"nextLink,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewayListResultPreparer prepares a request to retrieve the next set of results. It returns
0000000000000000000000000000000000000000;;	// nil if no more results exist.
0000000000000000000000000000000000000000;;	func (client ApplicationGatewayListResult) ApplicationGatewayListResultPreparer() (*http.Request, error) {
0000000000000000000000000000000000000000;;		if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return autorest.Prepare(&http.Request{},
0000000000000000000000000000000000000000;;			autorest.AsJSON(),
0000000000000000000000000000000000000000;;			autorest.AsGet(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(to.String(client.NextLink)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewayPathRule is path rule of URL path map of an application
0000000000000000000000000000000000000000;;	// gateway.
0000000000000000000000000000000000000000;;	type ApplicationGatewayPathRule struct {
0000000000000000000000000000000000000000;;		ID                                          *string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		*ApplicationGatewayPathRulePropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Name                                        *string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Etag                                        *string `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewayPathRulePropertiesFormat is properties of probe of an
0000000000000000000000000000000000000000;;	// application gateway.
0000000000000000000000000000000000000000;;	type ApplicationGatewayPathRulePropertiesFormat struct {
0000000000000000000000000000000000000000;;		Paths               *[]string    `json:"paths,omitempty"`
0000000000000000000000000000000000000000;;		BackendAddressPool  *SubResource `json:"backendAddressPool,omitempty"`
0000000000000000000000000000000000000000;;		BackendHTTPSettings *SubResource `json:"backendHttpSettings,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState   *string      `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewayProbe is probe of the application gateway.
0000000000000000000000000000000000000000;;	type ApplicationGatewayProbe struct {
0000000000000000000000000000000000000000;;		ID                                       *string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		*ApplicationGatewayProbePropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Name                                     *string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Etag                                     *string `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewayProbePropertiesFormat is properties of probe of an
0000000000000000000000000000000000000000;;	// application gateway.
0000000000000000000000000000000000000000;;	type ApplicationGatewayProbePropertiesFormat struct {
0000000000000000000000000000000000000000;;		Protocol           ApplicationGatewayProtocol `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;		Host               *string                    `json:"host,omitempty"`
0000000000000000000000000000000000000000;;		Path               *string                    `json:"path,omitempty"`
0000000000000000000000000000000000000000;;		Interval           *int32                     `json:"interval,omitempty"`
0000000000000000000000000000000000000000;;		Timeout            *int32                     `json:"timeout,omitempty"`
0000000000000000000000000000000000000000;;		UnhealthyThreshold *int32                     `json:"unhealthyThreshold,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState  *string                    `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewayPropertiesFormat is properties of the application gateway.
0000000000000000000000000000000000000000;;	type ApplicationGatewayPropertiesFormat struct {
0000000000000000000000000000000000000000;;		Sku                                 *ApplicationGatewaySku                                 `json:"sku,omitempty"`
0000000000000000000000000000000000000000;;		SslPolicy                           *ApplicationGatewaySslPolicy                           `json:"sslPolicy,omitempty"`
0000000000000000000000000000000000000000;;		OperationalState                    ApplicationGatewayOperationalState                     `json:"operationalState,omitempty"`
0000000000000000000000000000000000000000;;		GatewayIPConfigurations             *[]ApplicationGatewayIPConfiguration                   `json:"gatewayIPConfigurations,omitempty"`
0000000000000000000000000000000000000000;;		AuthenticationCertificates          *[]ApplicationGatewayAuthenticationCertificate         `json:"authenticationCertificates,omitempty"`
0000000000000000000000000000000000000000;;		SslCertificates                     *[]ApplicationGatewaySslCertificate                    `json:"sslCertificates,omitempty"`
0000000000000000000000000000000000000000;;		FrontendIPConfigurations            *[]ApplicationGatewayFrontendIPConfiguration           `json:"frontendIPConfigurations,omitempty"`
0000000000000000000000000000000000000000;;		FrontendPorts                       *[]ApplicationGatewayFrontendPort                      `json:"frontendPorts,omitempty"`
0000000000000000000000000000000000000000;;		Probes                              *[]ApplicationGatewayProbe                             `json:"probes,omitempty"`
0000000000000000000000000000000000000000;;		BackendAddressPools                 *[]ApplicationGatewayBackendAddressPool                `json:"backendAddressPools,omitempty"`
0000000000000000000000000000000000000000;;		BackendHTTPSettingsCollection       *[]ApplicationGatewayBackendHTTPSettings               `json:"backendHttpSettingsCollection,omitempty"`
0000000000000000000000000000000000000000;;		HTTPListeners                       *[]ApplicationGatewayHTTPListener                      `json:"httpListeners,omitempty"`
0000000000000000000000000000000000000000;;		URLPathMaps                         *[]ApplicationGatewayURLPathMap                        `json:"urlPathMaps,omitempty"`
0000000000000000000000000000000000000000;;		RequestRoutingRules                 *[]ApplicationGatewayRequestRoutingRule                `json:"requestRoutingRules,omitempty"`
0000000000000000000000000000000000000000;;		WebApplicationFirewallConfiguration *ApplicationGatewayWebApplicationFirewallConfiguration `json:"webApplicationFirewallConfiguration,omitempty"`
0000000000000000000000000000000000000000;;		ResourceGUID                        *string                                                `json:"resourceGuid,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState                   *string                                                `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewayRequestRoutingRule is request routing rule of an
0000000000000000000000000000000000000000;;	// application gateway.
0000000000000000000000000000000000000000;;	type ApplicationGatewayRequestRoutingRule struct {
0000000000000000000000000000000000000000;;		ID                                                    *string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		*ApplicationGatewayRequestRoutingRulePropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Name                                                  *string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Etag                                                  *string `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewayRequestRoutingRulePropertiesFormat is properties of
0000000000000000000000000000000000000000;;	// request routing rule of the application gateway.
0000000000000000000000000000000000000000;;	type ApplicationGatewayRequestRoutingRulePropertiesFormat struct {
0000000000000000000000000000000000000000;;		RuleType            ApplicationGatewayRequestRoutingRuleType `json:"ruleType,omitempty"`
0000000000000000000000000000000000000000;;		BackendAddressPool  *SubResource                             `json:"backendAddressPool,omitempty"`
0000000000000000000000000000000000000000;;		BackendHTTPSettings *SubResource                             `json:"backendHttpSettings,omitempty"`
0000000000000000000000000000000000000000;;		HTTPListener        *SubResource                             `json:"httpListener,omitempty"`
0000000000000000000000000000000000000000;;		URLPathMap          *SubResource                             `json:"urlPathMap,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState   *string                                  `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewaySku is sKU of an application gateway
0000000000000000000000000000000000000000;;	type ApplicationGatewaySku struct {
0000000000000000000000000000000000000000;;		Name     ApplicationGatewaySkuName `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Tier     ApplicationGatewayTier    `json:"tier,omitempty"`
0000000000000000000000000000000000000000;;		Capacity *int32                    `json:"capacity,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewaySslCertificate is sSL certificates of an application
0000000000000000000000000000000000000000;;	// gateway.
0000000000000000000000000000000000000000;;	type ApplicationGatewaySslCertificate struct {
0000000000000000000000000000000000000000;;		ID                                                *string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		*ApplicationGatewaySslCertificatePropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Name                                              *string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Etag                                              *string `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewaySslCertificatePropertiesFormat is properties of SSL
0000000000000000000000000000000000000000;;	// certificates of an application gateway.
0000000000000000000000000000000000000000;;	type ApplicationGatewaySslCertificatePropertiesFormat struct {
0000000000000000000000000000000000000000;;		Data              *string `json:"data,omitempty"`
0000000000000000000000000000000000000000;;		Password          *string `json:"password,omitempty"`
0000000000000000000000000000000000000000;;		PublicCertData    *string `json:"publicCertData,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState *string `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewaySslPolicy is application gateway SSL policy.
0000000000000000000000000000000000000000;;	type ApplicationGatewaySslPolicy struct {
0000000000000000000000000000000000000000;;		DisabledSslProtocols *[]ApplicationGatewaySslProtocol `json:"disabledSslProtocols,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewayURLPathMap is urlPathMaps give a url path to the backend
0000000000000000000000000000000000000000;;	// mapping information for PathBasedRouting.
0000000000000000000000000000000000000000;;	type ApplicationGatewayURLPathMap struct {
0000000000000000000000000000000000000000;;		ID                                            *string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		*ApplicationGatewayURLPathMapPropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Name                                          *string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Etag                                          *string `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewayURLPathMapPropertiesFormat is properties of UrlPathMap of
0000000000000000000000000000000000000000;;	// the application gateway.
0000000000000000000000000000000000000000;;	type ApplicationGatewayURLPathMapPropertiesFormat struct {
0000000000000000000000000000000000000000;;		DefaultBackendAddressPool  *SubResource                  `json:"defaultBackendAddressPool,omitempty"`
0000000000000000000000000000000000000000;;		DefaultBackendHTTPSettings *SubResource                  `json:"defaultBackendHttpSettings,omitempty"`
0000000000000000000000000000000000000000;;		PathRules                  *[]ApplicationGatewayPathRule `json:"pathRules,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState          *string                       `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplicationGatewayWebApplicationFirewallConfiguration is application gateway
0000000000000000000000000000000000000000;;	// web application firewall configuration.
0000000000000000000000000000000000000000;;	type ApplicationGatewayWebApplicationFirewallConfiguration struct {
0000000000000000000000000000000000000000;;		Enabled            *bool                                          `json:"enabled,omitempty"`
0000000000000000000000000000000000000000;;		FirewallMode       ApplicationGatewayFirewallMode                 `json:"firewallMode,omitempty"`
0000000000000000000000000000000000000000;;		RuleSetType        *string                                        `json:"ruleSetType,omitempty"`
0000000000000000000000000000000000000000;;		RuleSetVersion     *string                                        `json:"ruleSetVersion,omitempty"`
0000000000000000000000000000000000000000;;		DisabledRuleGroups *[]ApplicationGatewayFirewallDisabledRuleGroup `json:"disabledRuleGroups,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthorizationListResult is response for ListAuthorizations API service call
0000000000000000000000000000000000000000;;	// retrieves all authorizations that belongs to an ExpressRouteCircuit.
0000000000000000000000000000000000000000;;	type AuthorizationListResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]ExpressRouteCircuitAuthorization `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		NextLink          *string                             `json:"nextLink,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthorizationListResultPreparer prepares a request to retrieve the next set of results. It returns
0000000000000000000000000000000000000000;;	// nil if no more results exist.
0000000000000000000000000000000000000000;;	func (client AuthorizationListResult) AuthorizationListResultPreparer() (*http.Request, error) {
0000000000000000000000000000000000000000;;		if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return autorest.Prepare(&http.Request{},
0000000000000000000000000000000000000000;;			autorest.AsJSON(),
0000000000000000000000000000000000000000;;			autorest.AsGet(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(to.String(client.NextLink)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthorizationPropertiesFormat is
0000000000000000000000000000000000000000;;	type AuthorizationPropertiesFormat struct {
0000000000000000000000000000000000000000;;		AuthorizationKey       *string                `json:"authorizationKey,omitempty"`
0000000000000000000000000000000000000000;;		AuthorizationUseStatus AuthorizationUseStatus `json:"authorizationUseStatus,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState      *string                `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AzureAsyncOperationResult is the response body contains the status of the
0000000000000000000000000000000000000000;;	// specified asynchronous operation, indicating whether it has succeeded, is in
0000000000000000000000000000000000000000;;	// progress, or has failed. Note that this status is distinct from the HTTP
0000000000000000000000000000000000000000;;	// status code returned for the Get Operation Status operation itself. If the
0000000000000000000000000000000000000000;;	// asynchronous operation succeeded, the response body includes the HTTP status
0000000000000000000000000000000000000000;;	// code for the successful request. If the asynchronous operation failed, the
0000000000000000000000000000000000000000;;	// response body includes the HTTP status code for the failed request and error
0000000000000000000000000000000000000000;;	// information regarding the failure.
0000000000000000000000000000000000000000;;	type AzureAsyncOperationResult struct {
0000000000000000000000000000000000000000;;		Status OperationStatus `json:"status,omitempty"`
0000000000000000000000000000000000000000;;		Error  *Error          `json:"error,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BackendAddressPool is pool of backend IP addresses.
0000000000000000000000000000000000000000;;	type BackendAddressPool struct {
0000000000000000000000000000000000000000;;		ID                                  *string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		*BackendAddressPoolPropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Name                                *string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Etag                                *string `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BackendAddressPoolPropertiesFormat is properties of the backend address
0000000000000000000000000000000000000000;;	// pool.
0000000000000000000000000000000000000000;;	type BackendAddressPoolPropertiesFormat struct {
0000000000000000000000000000000000000000;;		BackendIPConfigurations *[]InterfaceIPConfiguration `json:"backendIPConfigurations,omitempty"`
0000000000000000000000000000000000000000;;		LoadBalancingRules      *[]SubResource              `json:"loadBalancingRules,omitempty"`
0000000000000000000000000000000000000000;;		OutboundNatRule         *SubResource                `json:"outboundNatRule,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState       *string                     `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BGPCommunity is contains bgp community information offered in Service
0000000000000000000000000000000000000000;;	// Community resources.
0000000000000000000000000000000000000000;;	type BGPCommunity struct {
0000000000000000000000000000000000000000;;		ServiceSupportedRegion *string   `json:"serviceSupportedRegion,omitempty"`
0000000000000000000000000000000000000000;;		CommunityName          *string   `json:"communityName,omitempty"`
0000000000000000000000000000000000000000;;		CommunityValue         *string   `json:"communityValue,omitempty"`
0000000000000000000000000000000000000000;;		CommunityPrefixes      *[]string `json:"communityPrefixes,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BgpPeerStatus is bGP peer status details
0000000000000000000000000000000000000000;;	type BgpPeerStatus struct {
0000000000000000000000000000000000000000;;		LocalAddress      *string      `json:"localAddress,omitempty"`
0000000000000000000000000000000000000000;;		Neighbor          *string      `json:"neighbor,omitempty"`
0000000000000000000000000000000000000000;;		Asn               *int32       `json:"asn,omitempty"`
0000000000000000000000000000000000000000;;		State             BgpPeerState `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		ConnectedDuration *string      `json:"connectedDuration,omitempty"`
0000000000000000000000000000000000000000;;		RoutesReceived    *int64       `json:"routesReceived,omitempty"`
0000000000000000000000000000000000000000;;		MessagesSent      *int64       `json:"messagesSent,omitempty"`
0000000000000000000000000000000000000000;;		MessagesReceived  *int64       `json:"messagesReceived,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BgpPeerStatusListResult is response for list BGP peer status API service
0000000000000000000000000000000000000000;;	// call
0000000000000000000000000000000000000000;;	type BgpPeerStatusListResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]BgpPeerStatus `json:"value,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BgpServiceCommunity is service Community Properties.
0000000000000000000000000000000000000000;;	type BgpServiceCommunity struct {
0000000000000000000000000000000000000000;;		ID                                   *string             `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Name                                 *string             `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Type                                 *string             `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Location                             *string             `json:"location,omitempty"`
0000000000000000000000000000000000000000;;		Tags                                 *map[string]*string `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		*BgpServiceCommunityPropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BgpServiceCommunityListResult is response for the ListServiceCommunity API
0000000000000000000000000000000000000000;;	// service call.
0000000000000000000000000000000000000000;;	type BgpServiceCommunityListResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]BgpServiceCommunity `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		NextLink          *string                `json:"nextLink,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BgpServiceCommunityListResultPreparer prepares a request to retrieve the next set of results. It returns
0000000000000000000000000000000000000000;;	// nil if no more results exist.
0000000000000000000000000000000000000000;;	func (client BgpServiceCommunityListResult) BgpServiceCommunityListResultPreparer() (*http.Request, error) {
0000000000000000000000000000000000000000;;		if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return autorest.Prepare(&http.Request{},
0000000000000000000000000000000000000000;;			autorest.AsJSON(),
0000000000000000000000000000000000000000;;			autorest.AsGet(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(to.String(client.NextLink)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BgpServiceCommunityPropertiesFormat is properties of Service Community.
0000000000000000000000000000000000000000;;	type BgpServiceCommunityPropertiesFormat struct {
0000000000000000000000000000000000000000;;		ServiceName    *string         `json:"serviceName,omitempty"`
0000000000000000000000000000000000000000;;		BgpCommunities *[]BGPCommunity `json:"bgpCommunities,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BgpSettings is bGP settings details
0000000000000000000000000000000000000000;;	type BgpSettings struct {
0000000000000000000000000000000000000000;;		Asn               *int64  `json:"asn,omitempty"`
0000000000000000000000000000000000000000;;		BgpPeeringAddress *string `json:"bgpPeeringAddress,omitempty"`
0000000000000000000000000000000000000000;;		PeerWeight        *int32  `json:"peerWeight,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ConnectionResetSharedKey is the virtual network connection reset shared key
0000000000000000000000000000000000000000;;	type ConnectionResetSharedKey struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		KeyLength         *int32 `json:"keyLength,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ConnectionSharedKey is response for GetConnectionSharedKey API service call
0000000000000000000000000000000000000000;;	type ConnectionSharedKey struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DhcpOptions is dhcpOptions contains an array of DNS servers available to VMs
0000000000000000000000000000000000000000;;	// deployed in the virtual network. Standard DHCP option for a subnet overrides
0000000000000000000000000000000000000000;;	// VNET DHCP options.
0000000000000000000000000000000000000000;;	type DhcpOptions struct {
0000000000000000000000000000000000000000;;		DNSServers *[]string `json:"dnsServers,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DNSNameAvailabilityResult is response for the CheckDnsNameAvailability API
0000000000000000000000000000000000000000;;	// service call.
0000000000000000000000000000000000000000;;	type DNSNameAvailabilityResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Available         *bool `json:"available,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EffectiveNetworkSecurityGroup is effective network security group.
0000000000000000000000000000000000000000;;	type EffectiveNetworkSecurityGroup struct {
0000000000000000000000000000000000000000;;		NetworkSecurityGroup   *SubResource                              `json:"networkSecurityGroup,omitempty"`
0000000000000000000000000000000000000000;;		Association            *EffectiveNetworkSecurityGroupAssociation `json:"association,omitempty"`
0000000000000000000000000000000000000000;;		EffectiveSecurityRules *[]EffectiveNetworkSecurityRule           `json:"effectiveSecurityRules,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EffectiveNetworkSecurityGroupAssociation is the effective network security
0000000000000000000000000000000000000000;;	// group association.
0000000000000000000000000000000000000000;;	type EffectiveNetworkSecurityGroupAssociation struct {
0000000000000000000000000000000000000000;;		Subnet           *SubResource `json:"subnet,omitempty"`
0000000000000000000000000000000000000000;;		NetworkInterface *SubResource `json:"networkInterface,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EffectiveNetworkSecurityGroupListResult is response for list effective
0000000000000000000000000000000000000000;;	// network security groups API service call.
0000000000000000000000000000000000000000;;	type EffectiveNetworkSecurityGroupListResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]EffectiveNetworkSecurityGroup `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		NextLink          *string                          `json:"nextLink,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EffectiveNetworkSecurityRule is effective network security rules.
0000000000000000000000000000000000000000;;	type EffectiveNetworkSecurityRule struct {
0000000000000000000000000000000000000000;;		Name                             *string               `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Protocol                         SecurityRuleProtocol  `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;		SourcePortRange                  *string               `json:"sourcePortRange,omitempty"`
0000000000000000000000000000000000000000;;		DestinationPortRange             *string               `json:"destinationPortRange,omitempty"`
0000000000000000000000000000000000000000;;		SourceAddressPrefix              *string               `json:"sourceAddressPrefix,omitempty"`
0000000000000000000000000000000000000000;;		DestinationAddressPrefix         *string               `json:"destinationAddressPrefix,omitempty"`
0000000000000000000000000000000000000000;;		ExpandedSourceAddressPrefix      *[]string             `json:"expandedSourceAddressPrefix,omitempty"`
0000000000000000000000000000000000000000;;		ExpandedDestinationAddressPrefix *[]string             `json:"expandedDestinationAddressPrefix,omitempty"`
0000000000000000000000000000000000000000;;		Access                           SecurityRuleAccess    `json:"access,omitempty"`
0000000000000000000000000000000000000000;;		Priority                         *int32                `json:"priority,omitempty"`
0000000000000000000000000000000000000000;;		Direction                        SecurityRuleDirection `json:"direction,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EffectiveRoute is effective Route
0000000000000000000000000000000000000000;;	type EffectiveRoute struct {
0000000000000000000000000000000000000000;;		Name             *string              `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Source           EffectiveRouteSource `json:"source,omitempty"`
0000000000000000000000000000000000000000;;		State            EffectiveRouteState  `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		AddressPrefix    *[]string            `json:"addressPrefix,omitempty"`
0000000000000000000000000000000000000000;;		NextHopIPAddress *[]string            `json:"nextHopIpAddress,omitempty"`
0000000000000000000000000000000000000000;;		NextHopType      RouteNextHopType     `json:"nextHopType,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EffectiveRouteListResult is response for list effective route API service
0000000000000000000000000000000000000000;;	// call.
0000000000000000000000000000000000000000;;	type EffectiveRouteListResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]EffectiveRoute `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		NextLink          *string           `json:"nextLink,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Error is
0000000000000000000000000000000000000000;;	type Error struct {
0000000000000000000000000000000000000000;;		Code       *string         `json:"code,omitempty"`
0000000000000000000000000000000000000000;;		Message    *string         `json:"message,omitempty"`
0000000000000000000000000000000000000000;;		Target     *string         `json:"target,omitempty"`
0000000000000000000000000000000000000000;;		Details    *[]ErrorDetails `json:"details,omitempty"`
0000000000000000000000000000000000000000;;		InnerError *string         `json:"innerError,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrorDetails is
0000000000000000000000000000000000000000;;	type ErrorDetails struct {
0000000000000000000000000000000000000000;;		Code    *string `json:"code,omitempty"`
0000000000000000000000000000000000000000;;		Target  *string `json:"target,omitempty"`
0000000000000000000000000000000000000000;;		Message *string `json:"message,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExpressRouteCircuit is expressRouteCircuit resource
0000000000000000000000000000000000000000;;	type ExpressRouteCircuit struct {
0000000000000000000000000000000000000000;;		autorest.Response                    `json:"-"`
0000000000000000000000000000000000000000;;		ID                                   *string                 `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Name                                 *string                 `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Type                                 *string                 `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Location                             *string                 `json:"location,omitempty"`
0000000000000000000000000000000000000000;;		Tags                                 *map[string]*string     `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Sku                                  *ExpressRouteCircuitSku `json:"sku,omitempty"`
0000000000000000000000000000000000000000;;		*ExpressRouteCircuitPropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Etag                                 *string `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExpressRouteCircuitArpTable is the ARP table associated with the
0000000000000000000000000000000000000000;;	// ExpressRouteCircuit.
0000000000000000000000000000000000000000;;	type ExpressRouteCircuitArpTable struct {
0000000000000000000000000000000000000000;;		Age        *int32  `json:"age,omitempty"`
0000000000000000000000000000000000000000;;		Interface  *string `json:"interface,omitempty"`
0000000000000000000000000000000000000000;;		IPAddress  *string `json:"ipAddress,omitempty"`
0000000000000000000000000000000000000000;;		MacAddress *string `json:"macAddress,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExpressRouteCircuitAuthorization is authorization in an ExpressRouteCircuit
0000000000000000000000000000000000000000;;	// resource.
0000000000000000000000000000000000000000;;	type ExpressRouteCircuitAuthorization struct {
0000000000000000000000000000000000000000;;		autorest.Response              `json:"-"`
0000000000000000000000000000000000000000;;		ID                             *string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		*AuthorizationPropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Name                           *string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Etag                           *string `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExpressRouteCircuitListResult is response for ListExpressRouteCircuit API
0000000000000000000000000000000000000000;;	// service call.
0000000000000000000000000000000000000000;;	type ExpressRouteCircuitListResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]ExpressRouteCircuit `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		NextLink          *string                `json:"nextLink,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExpressRouteCircuitListResultPreparer prepares a request to retrieve the next set of results. It returns
0000000000000000000000000000000000000000;;	// nil if no more results exist.
0000000000000000000000000000000000000000;;	func (client ExpressRouteCircuitListResult) ExpressRouteCircuitListResultPreparer() (*http.Request, error) {
0000000000000000000000000000000000000000;;		if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return autorest.Prepare(&http.Request{},
0000000000000000000000000000000000000000;;			autorest.AsJSON(),
0000000000000000000000000000000000000000;;			autorest.AsGet(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(to.String(client.NextLink)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExpressRouteCircuitPeering is peering in an ExpressRouteCircuit resource.
0000000000000000000000000000000000000000;;	type ExpressRouteCircuitPeering struct {
0000000000000000000000000000000000000000;;		autorest.Response                           `json:"-"`
0000000000000000000000000000000000000000;;		ID                                          *string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		*ExpressRouteCircuitPeeringPropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Name                                        *string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Etag                                        *string `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExpressRouteCircuitPeeringConfig is specifies the peering configuration.
0000000000000000000000000000000000000000;;	type ExpressRouteCircuitPeeringConfig struct {
0000000000000000000000000000000000000000;;		AdvertisedPublicPrefixes      *[]string                                             `json:"advertisedPublicPrefixes,omitempty"`
0000000000000000000000000000000000000000;;		AdvertisedPublicPrefixesState ExpressRouteCircuitPeeringAdvertisedPublicPrefixState `json:"advertisedPublicPrefixesState,omitempty"`
0000000000000000000000000000000000000000;;		CustomerASN                   *int32                                                `json:"customerASN,omitempty"`
0000000000000000000000000000000000000000;;		RoutingRegistryName           *string                                               `json:"routingRegistryName,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExpressRouteCircuitPeeringListResult is response for ListPeering API service
0000000000000000000000000000000000000000;;	// call retrieves all peerings that belong to an ExpressRouteCircuit.
0000000000000000000000000000000000000000;;	type ExpressRouteCircuitPeeringListResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]ExpressRouteCircuitPeering `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		NextLink          *string                       `json:"nextLink,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExpressRouteCircuitPeeringListResultPreparer prepares a request to retrieve the next set of results. It returns
0000000000000000000000000000000000000000;;	// nil if no more results exist.
0000000000000000000000000000000000000000;;	func (client ExpressRouteCircuitPeeringListResult) ExpressRouteCircuitPeeringListResultPreparer() (*http.Request, error) {
0000000000000000000000000000000000000000;;		if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return autorest.Prepare(&http.Request{},
0000000000000000000000000000000000000000;;			autorest.AsJSON(),
0000000000000000000000000000000000000000;;			autorest.AsGet(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(to.String(client.NextLink)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExpressRouteCircuitPeeringPropertiesFormat is
0000000000000000000000000000000000000000;;	type ExpressRouteCircuitPeeringPropertiesFormat struct {
0000000000000000000000000000000000000000;;		PeeringType                ExpressRouteCircuitPeeringType    `json:"peeringType,omitempty"`
0000000000000000000000000000000000000000;;		State                      ExpressRouteCircuitPeeringState   `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		AzureASN                   *int32                            `json:"azureASN,omitempty"`
0000000000000000000000000000000000000000;;		PeerASN                    *int32                            `json:"peerASN,omitempty"`
0000000000000000000000000000000000000000;;		PrimaryPeerAddressPrefix   *string                           `json:"primaryPeerAddressPrefix,omitempty"`
0000000000000000000000000000000000000000;;		SecondaryPeerAddressPrefix *string                           `json:"secondaryPeerAddressPrefix,omitempty"`
0000000000000000000000000000000000000000;;		PrimaryAzurePort           *string                           `json:"primaryAzurePort,omitempty"`
0000000000000000000000000000000000000000;;		SecondaryAzurePort         *string                           `json:"secondaryAzurePort,omitempty"`
0000000000000000000000000000000000000000;;		SharedKey                  *string                           `json:"sharedKey,omitempty"`
0000000000000000000000000000000000000000;;		VlanID                     *int32                            `json:"vlanId,omitempty"`
0000000000000000000000000000000000000000;;		MicrosoftPeeringConfig     *ExpressRouteCircuitPeeringConfig `json:"microsoftPeeringConfig,omitempty"`
0000000000000000000000000000000000000000;;		Stats                      *ExpressRouteCircuitStats         `json:"stats,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState          *string                           `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;		GatewayManagerEtag         *string                           `json:"gatewayManagerEtag,omitempty"`
0000000000000000000000000000000000000000;;		LastModifiedBy             *string                           `json:"lastModifiedBy,omitempty"`
0000000000000000000000000000000000000000;;		RouteFilter                *RouteFilter                      `json:"routeFilter,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExpressRouteCircuitPropertiesFormat is properties of ExpressRouteCircuit.
0000000000000000000000000000000000000000;;	type ExpressRouteCircuitPropertiesFormat struct {
0000000000000000000000000000000000000000;;		AllowClassicOperations           *bool                                         `json:"allowClassicOperations,omitempty"`
0000000000000000000000000000000000000000;;		CircuitProvisioningState         *string                                       `json:"circuitProvisioningState,omitempty"`
0000000000000000000000000000000000000000;;		ServiceProviderProvisioningState ServiceProviderProvisioningState              `json:"serviceProviderProvisioningState,omitempty"`
0000000000000000000000000000000000000000;;		Authorizations                   *[]ExpressRouteCircuitAuthorization           `json:"authorizations,omitempty"`
0000000000000000000000000000000000000000;;		Peerings                         *[]ExpressRouteCircuitPeering                 `json:"peerings,omitempty"`
0000000000000000000000000000000000000000;;		ServiceKey                       *string                                       `json:"serviceKey,omitempty"`
0000000000000000000000000000000000000000;;		ServiceProviderNotes             *string                                       `json:"serviceProviderNotes,omitempty"`
0000000000000000000000000000000000000000;;		ServiceProviderProperties        *ExpressRouteCircuitServiceProviderProperties `json:"serviceProviderProperties,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState                *string                                       `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;		GatewayManagerEtag               *string                                       `json:"gatewayManagerEtag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExpressRouteCircuitRoutesTable is the routes table associated with the
0000000000000000000000000000000000000000;;	// ExpressRouteCircuit
0000000000000000000000000000000000000000;;	type ExpressRouteCircuitRoutesTable struct {
0000000000000000000000000000000000000000;;		NetworkProperty *string `json:"network,omitempty"`
0000000000000000000000000000000000000000;;		NextHop         *string `json:"nextHop,omitempty"`
0000000000000000000000000000000000000000;;		LocPrf          *string `json:"locPrf,omitempty"`
0000000000000000000000000000000000000000;;		Weight          *int32  `json:"weight,omitempty"`
0000000000000000000000000000000000000000;;		Path            *string `json:"path,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExpressRouteCircuitRoutesTableSummary is the routes table associated with
0000000000000000000000000000000000000000;;	// the ExpressRouteCircuit.
0000000000000000000000000000000000000000;;	type ExpressRouteCircuitRoutesTableSummary struct {
0000000000000000000000000000000000000000;;		Neighbor    *string `json:"neighbor,omitempty"`
0000000000000000000000000000000000000000;;		V           *int32  `json:"v,omitempty"`
0000000000000000000000000000000000000000;;		As          *int32  `json:"as,omitempty"`
0000000000000000000000000000000000000000;;		UpDown      *string `json:"upDown,omitempty"`
0000000000000000000000000000000000000000;;		StatePfxRcd *string `json:"statePfxRcd,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExpressRouteCircuitsArpTableListResult is response for ListArpTable
0000000000000000000000000000000000000000;;	// associated with the Express Route Circuits API.
0000000000000000000000000000000000000000;;	type ExpressRouteCircuitsArpTableListResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]ExpressRouteCircuitArpTable `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		NextLink          *string                        `json:"nextLink,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExpressRouteCircuitServiceProviderProperties is contains
0000000000000000000000000000000000000000;;	// ServiceProviderProperties in an ExpressRouteCircuit.
0000000000000000000000000000000000000000;;	type ExpressRouteCircuitServiceProviderProperties struct {
0000000000000000000000000000000000000000;;		ServiceProviderName *string `json:"serviceProviderName,omitempty"`
0000000000000000000000000000000000000000;;		PeeringLocation     *string `json:"peeringLocation,omitempty"`
0000000000000000000000000000000000000000;;		BandwidthInMbps     *int32  `json:"bandwidthInMbps,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExpressRouteCircuitSku is contains SKU in an ExpressRouteCircuit.
0000000000000000000000000000000000000000;;	type ExpressRouteCircuitSku struct {
0000000000000000000000000000000000000000;;		Name   *string                      `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Tier   ExpressRouteCircuitSkuTier   `json:"tier,omitempty"`
0000000000000000000000000000000000000000;;		Family ExpressRouteCircuitSkuFamily `json:"family,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExpressRouteCircuitsRoutesTableListResult is response for ListRoutesTable
0000000000000000000000000000000000000000;;	// associated with the Express Route Circuits API.
0000000000000000000000000000000000000000;;	type ExpressRouteCircuitsRoutesTableListResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]ExpressRouteCircuitRoutesTable `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		NextLink          *string                           `json:"nextLink,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExpressRouteCircuitsRoutesTableSummaryListResult is response for
0000000000000000000000000000000000000000;;	// ListRoutesTable associated with the Express Route Circuits API.
0000000000000000000000000000000000000000;;	type ExpressRouteCircuitsRoutesTableSummaryListResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]ExpressRouteCircuitRoutesTableSummary `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		NextLink          *string                                  `json:"nextLink,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExpressRouteCircuitStats is contains stats associated with the peering.
0000000000000000000000000000000000000000;;	type ExpressRouteCircuitStats struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		PrimarybytesIn    *int64 `json:"primarybytesIn,omitempty"`
0000000000000000000000000000000000000000;;		PrimarybytesOut   *int64 `json:"primarybytesOut,omitempty"`
0000000000000000000000000000000000000000;;		SecondarybytesIn  *int64 `json:"secondarybytesIn,omitempty"`
0000000000000000000000000000000000000000;;		SecondarybytesOut *int64 `json:"secondarybytesOut,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExpressRouteServiceProvider is a ExpressRouteResourceProvider object.
0000000000000000000000000000000000000000;;	type ExpressRouteServiceProvider struct {
0000000000000000000000000000000000000000;;		ID                                           *string             `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Name                                         *string             `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Type                                         *string             `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Location                                     *string             `json:"location,omitempty"`
0000000000000000000000000000000000000000;;		Tags                                         *map[string]*string `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		*ExpressRouteServiceProviderPropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExpressRouteServiceProviderBandwidthsOffered is contains bandwidths offered
0000000000000000000000000000000000000000;;	// in ExpressRouteServiceProvider resources.
0000000000000000000000000000000000000000;;	type ExpressRouteServiceProviderBandwidthsOffered struct {
0000000000000000000000000000000000000000;;		OfferName   *string `json:"offerName,omitempty"`
0000000000000000000000000000000000000000;;		ValueInMbps *int32  `json:"valueInMbps,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExpressRouteServiceProviderListResult is response for the
0000000000000000000000000000000000000000;;	// ListExpressRouteServiceProvider API service call.
0000000000000000000000000000000000000000;;	type ExpressRouteServiceProviderListResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]ExpressRouteServiceProvider `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		NextLink          *string                        `json:"nextLink,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExpressRouteServiceProviderListResultPreparer prepares a request to retrieve the next set of results. It returns
0000000000000000000000000000000000000000;;	// nil if no more results exist.
0000000000000000000000000000000000000000;;	func (client ExpressRouteServiceProviderListResult) ExpressRouteServiceProviderListResultPreparer() (*http.Request, error) {
0000000000000000000000000000000000000000;;		if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return autorest.Prepare(&http.Request{},
0000000000000000000000000000000000000000;;			autorest.AsJSON(),
0000000000000000000000000000000000000000;;			autorest.AsGet(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(to.String(client.NextLink)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExpressRouteServiceProviderPropertiesFormat is properties of
0000000000000000000000000000000000000000;;	// ExpressRouteServiceProvider.
0000000000000000000000000000000000000000;;	type ExpressRouteServiceProviderPropertiesFormat struct {
0000000000000000000000000000000000000000;;		PeeringLocations  *[]string                                       `json:"peeringLocations,omitempty"`
0000000000000000000000000000000000000000;;		BandwidthsOffered *[]ExpressRouteServiceProviderBandwidthsOffered `json:"bandwidthsOffered,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState *string                                         `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FlowLogInformation is information on the configuration of flow log.
0000000000000000000000000000000000000000;;	type FlowLogInformation struct {
0000000000000000000000000000000000000000;;		autorest.Response  `json:"-"`
0000000000000000000000000000000000000000;;		TargetResourceID   *string `json:"targetResourceId,omitempty"`
0000000000000000000000000000000000000000;;		*FlowLogProperties `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FlowLogProperties is parameters that define the configuration of flow log.
0000000000000000000000000000000000000000;;	type FlowLogProperties struct {
0000000000000000000000000000000000000000;;		StorageID       *string                    `json:"storageId,omitempty"`
0000000000000000000000000000000000000000;;		Enabled         *bool                      `json:"enabled,omitempty"`
0000000000000000000000000000000000000000;;		RetentionPolicy *RetentionPolicyParameters `json:"retentionPolicy,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FlowLogStatusParameters is parameters that define a resource to query flow
0000000000000000000000000000000000000000;;	// log status.
0000000000000000000000000000000000000000;;	type FlowLogStatusParameters struct {
0000000000000000000000000000000000000000;;		TargetResourceID *string `json:"targetResourceId,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FrontendIPConfiguration is frontend IP address of the load balancer.
0000000000000000000000000000000000000000;;	type FrontendIPConfiguration struct {
0000000000000000000000000000000000000000;;		ID                                       *string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		*FrontendIPConfigurationPropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Name                                     *string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Etag                                     *string `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FrontendIPConfigurationPropertiesFormat is properties of Frontend IP
0000000000000000000000000000000000000000;;	// Configuration of the load balancer.
0000000000000000000000000000000000000000;;	type FrontendIPConfigurationPropertiesFormat struct {
0000000000000000000000000000000000000000;;		InboundNatRules           *[]SubResource     `json:"inboundNatRules,omitempty"`
0000000000000000000000000000000000000000;;		InboundNatPools           *[]SubResource     `json:"inboundNatPools,omitempty"`
0000000000000000000000000000000000000000;;		OutboundNatRules          *[]SubResource     `json:"outboundNatRules,omitempty"`
0000000000000000000000000000000000000000;;		LoadBalancingRules        *[]SubResource     `json:"loadBalancingRules,omitempty"`
0000000000000000000000000000000000000000;;		PrivateIPAddress          *string            `json:"privateIPAddress,omitempty"`
0000000000000000000000000000000000000000;;		PrivateIPAllocationMethod IPAllocationMethod `json:"privateIPAllocationMethod,omitempty"`
0000000000000000000000000000000000000000;;		Subnet                    *Subnet            `json:"subnet,omitempty"`
0000000000000000000000000000000000000000;;		PublicIPAddress           *PublicIPAddress   `json:"publicIPAddress,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState         *string            `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GatewayRoute is gateway routing details
0000000000000000000000000000000000000000;;	type GatewayRoute struct {
0000000000000000000000000000000000000000;;		LocalAddress    *string `json:"localAddress,omitempty"`
0000000000000000000000000000000000000000;;		NetworkProperty *string `json:"network,omitempty"`
0000000000000000000000000000000000000000;;		NextHop         *string `json:"nextHop,omitempty"`
0000000000000000000000000000000000000000;;		SourcePeer      *string `json:"sourcePeer,omitempty"`
0000000000000000000000000000000000000000;;		Origin          *string `json:"origin,omitempty"`
0000000000000000000000000000000000000000;;		AsPath          *string `json:"asPath,omitempty"`
0000000000000000000000000000000000000000;;		Weight          *int32  `json:"weight,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GatewayRouteListResult is list of virtual network gateway routes
0000000000000000000000000000000000000000;;	type GatewayRouteListResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]GatewayRoute `json:"value,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InboundNatPool is inbound NAT pool of the load balancer.
0000000000000000000000000000000000000000;;	type InboundNatPool struct {
0000000000000000000000000000000000000000;;		ID                              *string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		*InboundNatPoolPropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Name                            *string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Etag                            *string `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InboundNatPoolPropertiesFormat is properties of Inbound NAT pool.
0000000000000000000000000000000000000000;;	type InboundNatPoolPropertiesFormat struct {
0000000000000000000000000000000000000000;;		FrontendIPConfiguration *SubResource      `json:"frontendIPConfiguration,omitempty"`
0000000000000000000000000000000000000000;;		Protocol                TransportProtocol `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;		FrontendPortRangeStart  *int32            `json:"frontendPortRangeStart,omitempty"`
0000000000000000000000000000000000000000;;		FrontendPortRangeEnd    *int32            `json:"frontendPortRangeEnd,omitempty"`
0000000000000000000000000000000000000000;;		BackendPort             *int32            `json:"backendPort,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState       *string           `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InboundNatRule is inbound NAT rule of the load balancer.
0000000000000000000000000000000000000000;;	type InboundNatRule struct {
0000000000000000000000000000000000000000;;		ID                              *string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		*InboundNatRulePropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Name                            *string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Etag                            *string `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InboundNatRulePropertiesFormat is properties of the inbound NAT rule.
0000000000000000000000000000000000000000;;	type InboundNatRulePropertiesFormat struct {
0000000000000000000000000000000000000000;;		FrontendIPConfiguration *SubResource              `json:"frontendIPConfiguration,omitempty"`
0000000000000000000000000000000000000000;;		BackendIPConfiguration  *InterfaceIPConfiguration `json:"backendIPConfiguration,omitempty"`
0000000000000000000000000000000000000000;;		Protocol                TransportProtocol         `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;		FrontendPort            *int32                    `json:"frontendPort,omitempty"`
0000000000000000000000000000000000000000;;		BackendPort             *int32                    `json:"backendPort,omitempty"`
0000000000000000000000000000000000000000;;		IdleTimeoutInMinutes    *int32                    `json:"idleTimeoutInMinutes,omitempty"`
0000000000000000000000000000000000000000;;		EnableFloatingIP        *bool                     `json:"enableFloatingIP,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState       *string                   `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Interface is a network interface in a resource group.
0000000000000000000000000000000000000000;;	type Interface struct {
0000000000000000000000000000000000000000;;		autorest.Response          `json:"-"`
0000000000000000000000000000000000000000;;		ID                         *string             `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Name                       *string             `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Type                       *string             `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Location                   *string             `json:"location,omitempty"`
0000000000000000000000000000000000000000;;		Tags                       *map[string]*string `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		*InterfacePropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Etag                       *string `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InterfaceAssociation is network interface and its custom security rules.
0000000000000000000000000000000000000000;;	type InterfaceAssociation struct {
0000000000000000000000000000000000000000;;		ID            *string         `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		SecurityRules *[]SecurityRule `json:"securityRules,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InterfaceDNSSettings is dNS settings of a network interface.
0000000000000000000000000000000000000000;;	type InterfaceDNSSettings struct {
0000000000000000000000000000000000000000;;		DNSServers               *[]string `json:"dnsServers,omitempty"`
0000000000000000000000000000000000000000;;		AppliedDNSServers        *[]string `json:"appliedDnsServers,omitempty"`
0000000000000000000000000000000000000000;;		InternalDNSNameLabel     *string   `json:"internalDnsNameLabel,omitempty"`
0000000000000000000000000000000000000000;;		InternalFqdn             *string   `json:"internalFqdn,omitempty"`
0000000000000000000000000000000000000000;;		InternalDomainNameSuffix *string   `json:"internalDomainNameSuffix,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InterfaceIPConfiguration is iPConfiguration in a network interface.
0000000000000000000000000000000000000000;;	type InterfaceIPConfiguration struct {
0000000000000000000000000000000000000000;;		ID                                        *string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		*InterfaceIPConfigurationPropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Name                                      *string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Etag                                      *string `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InterfaceIPConfigurationPropertiesFormat is properties of IP configuration.
0000000000000000000000000000000000000000;;	type InterfaceIPConfigurationPropertiesFormat struct {
0000000000000000000000000000000000000000;;		ApplicationGatewayBackendAddressPools *[]ApplicationGatewayBackendAddressPool `json:"applicationGatewayBackendAddressPools,omitempty"`
0000000000000000000000000000000000000000;;		LoadBalancerBackendAddressPools       *[]BackendAddressPool                   `json:"loadBalancerBackendAddressPools,omitempty"`
0000000000000000000000000000000000000000;;		LoadBalancerInboundNatRules           *[]InboundNatRule                       `json:"loadBalancerInboundNatRules,omitempty"`
0000000000000000000000000000000000000000;;		PrivateIPAddress                      *string                                 `json:"privateIPAddress,omitempty"`
0000000000000000000000000000000000000000;;		PrivateIPAllocationMethod             IPAllocationMethod                      `json:"privateIPAllocationMethod,omitempty"`
0000000000000000000000000000000000000000;;		PrivateIPAddressVersion               IPVersion                               `json:"privateIPAddressVersion,omitempty"`
0000000000000000000000000000000000000000;;		Subnet                                *Subnet                                 `json:"subnet,omitempty"`
0000000000000000000000000000000000000000;;		Primary                               *bool                                   `json:"primary,omitempty"`
0000000000000000000000000000000000000000;;		PublicIPAddress                       *PublicIPAddress                        `json:"publicIPAddress,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState                     *string                                 `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InterfaceListResult is response for the ListNetworkInterface API service
0000000000000000000000000000000000000000;;	// call.
0000000000000000000000000000000000000000;;	type InterfaceListResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]Interface `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		NextLink          *string      `json:"nextLink,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InterfaceListResultPreparer prepares a request to retrieve the next set of results. It returns
0000000000000000000000000000000000000000;;	// nil if no more results exist.
0000000000000000000000000000000000000000;;	func (client InterfaceListResult) InterfaceListResultPreparer() (*http.Request, error) {
0000000000000000000000000000000000000000;;		if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return autorest.Prepare(&http.Request{},
0000000000000000000000000000000000000000;;			autorest.AsJSON(),
0000000000000000000000000000000000000000;;			autorest.AsGet(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(to.String(client.NextLink)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InterfacePropertiesFormat is networkInterface properties.
0000000000000000000000000000000000000000;;	type InterfacePropertiesFormat struct {
0000000000000000000000000000000000000000;;		VirtualMachine              *SubResource                `json:"virtualMachine,omitempty"`
0000000000000000000000000000000000000000;;		NetworkSecurityGroup        *SecurityGroup              `json:"networkSecurityGroup,omitempty"`
0000000000000000000000000000000000000000;;		IPConfigurations            *[]InterfaceIPConfiguration `json:"ipConfigurations,omitempty"`
0000000000000000000000000000000000000000;;		DNSSettings                 *InterfaceDNSSettings       `json:"dnsSettings,omitempty"`
0000000000000000000000000000000000000000;;		MacAddress                  *string                     `json:"macAddress,omitempty"`
0000000000000000000000000000000000000000;;		Primary                     *bool                       `json:"primary,omitempty"`
0000000000000000000000000000000000000000;;		EnableAcceleratedNetworking *bool                       `json:"enableAcceleratedNetworking,omitempty"`
0000000000000000000000000000000000000000;;		EnableIPForwarding          *bool                       `json:"enableIPForwarding,omitempty"`
0000000000000000000000000000000000000000;;		ResourceGUID                *string                     `json:"resourceGuid,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState           *string                     `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IPAddressAvailabilityResult is response for CheckIPAddressAvailability API
0000000000000000000000000000000000000000;;	// service call
0000000000000000000000000000000000000000;;	type IPAddressAvailabilityResult struct {
0000000000000000000000000000000000000000;;		autorest.Response    `json:"-"`
0000000000000000000000000000000000000000;;		Available            *bool     `json:"available,omitempty"`
0000000000000000000000000000000000000000;;		AvailableIPAddresses *[]string `json:"availableIPAddresses,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IPConfiguration is iPConfiguration
0000000000000000000000000000000000000000;;	type IPConfiguration struct {
0000000000000000000000000000000000000000;;		ID                               *string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		*IPConfigurationPropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Name                             *string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Etag                             *string `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IPConfigurationPropertiesFormat is properties of IP configuration.
0000000000000000000000000000000000000000;;	type IPConfigurationPropertiesFormat struct {
0000000000000000000000000000000000000000;;		PrivateIPAddress          *string            `json:"privateIPAddress,omitempty"`
0000000000000000000000000000000000000000;;		PrivateIPAllocationMethod IPAllocationMethod `json:"privateIPAllocationMethod,omitempty"`
0000000000000000000000000000000000000000;;		Subnet                    *Subnet            `json:"subnet,omitempty"`
0000000000000000000000000000000000000000;;		PublicIPAddress           *PublicIPAddress   `json:"publicIPAddress,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState         *string            `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IpsecPolicy is an IPSec Policy configuration for a virtual network gateway
0000000000000000000000000000000000000000;;	// connection
0000000000000000000000000000000000000000;;	type IpsecPolicy struct {
0000000000000000000000000000000000000000;;		SaLifeTimeSeconds   *int32          `json:"saLifeTimeSeconds,omitempty"`
0000000000000000000000000000000000000000;;		SaDataSizeKilobytes *int32          `json:"saDataSizeKilobytes,omitempty"`
0000000000000000000000000000000000000000;;		IpsecEncryption     IpsecEncryption `json:"ipsecEncryption,omitempty"`
0000000000000000000000000000000000000000;;		IpsecIntegrity      IpsecIntegrity  `json:"ipsecIntegrity,omitempty"`
0000000000000000000000000000000000000000;;		IkeEncryption       IkeEncryption   `json:"ikeEncryption,omitempty"`
0000000000000000000000000000000000000000;;		IkeIntegrity        IkeIntegrity    `json:"ikeIntegrity,omitempty"`
0000000000000000000000000000000000000000;;		DhGroup             DhGroup         `json:"dhGroup,omitempty"`
0000000000000000000000000000000000000000;;		PfsGroup            PfsGroup        `json:"pfsGroup,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LoadBalancer is loadBalancer resource
0000000000000000000000000000000000000000;;	type LoadBalancer struct {
0000000000000000000000000000000000000000;;		autorest.Response             `json:"-"`
0000000000000000000000000000000000000000;;		ID                            *string             `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Name                          *string             `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Type                          *string             `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Location                      *string             `json:"location,omitempty"`
0000000000000000000000000000000000000000;;		Tags                          *map[string]*string `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		*LoadBalancerPropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Etag                          *string `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LoadBalancerListResult is response for ListLoadBalancers API service call.
0000000000000000000000000000000000000000;;	type LoadBalancerListResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]LoadBalancer `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		NextLink          *string         `json:"nextLink,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LoadBalancerListResultPreparer prepares a request to retrieve the next set of results. It returns
0000000000000000000000000000000000000000;;	// nil if no more results exist.
0000000000000000000000000000000000000000;;	func (client LoadBalancerListResult) LoadBalancerListResultPreparer() (*http.Request, error) {
0000000000000000000000000000000000000000;;		if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return autorest.Prepare(&http.Request{},
0000000000000000000000000000000000000000;;			autorest.AsJSON(),
0000000000000000000000000000000000000000;;			autorest.AsGet(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(to.String(client.NextLink)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LoadBalancerPropertiesFormat is properties of the load balancer.
0000000000000000000000000000000000000000;;	type LoadBalancerPropertiesFormat struct {
0000000000000000000000000000000000000000;;		FrontendIPConfigurations *[]FrontendIPConfiguration `json:"frontendIPConfigurations,omitempty"`
0000000000000000000000000000000000000000;;		BackendAddressPools      *[]BackendAddressPool      `json:"backendAddressPools,omitempty"`
0000000000000000000000000000000000000000;;		LoadBalancingRules       *[]LoadBalancingRule       `json:"loadBalancingRules,omitempty"`
0000000000000000000000000000000000000000;;		Probes                   *[]Probe                   `json:"probes,omitempty"`
0000000000000000000000000000000000000000;;		InboundNatRules          *[]InboundNatRule          `json:"inboundNatRules,omitempty"`
0000000000000000000000000000000000000000;;		InboundNatPools          *[]InboundNatPool          `json:"inboundNatPools,omitempty"`
0000000000000000000000000000000000000000;;		OutboundNatRules         *[]OutboundNatRule         `json:"outboundNatRules,omitempty"`
0000000000000000000000000000000000000000;;		ResourceGUID             *string                    `json:"resourceGuid,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState        *string                    `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LoadBalancingRule is a loag balancing rule for a load balancer.
0000000000000000000000000000000000000000;;	type LoadBalancingRule struct {
0000000000000000000000000000000000000000;;		ID                                 *string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		*LoadBalancingRulePropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Name                               *string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Etag                               *string `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LoadBalancingRulePropertiesFormat is properties of the load balancer.
0000000000000000000000000000000000000000;;	type LoadBalancingRulePropertiesFormat struct {
0000000000000000000000000000000000000000;;		FrontendIPConfiguration *SubResource      `json:"frontendIPConfiguration,omitempty"`
0000000000000000000000000000000000000000;;		BackendAddressPool      *SubResource      `json:"backendAddressPool,omitempty"`
0000000000000000000000000000000000000000;;		Probe                   *SubResource      `json:"probe,omitempty"`
0000000000000000000000000000000000000000;;		Protocol                TransportProtocol `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;		LoadDistribution        LoadDistribution  `json:"loadDistribution,omitempty"`
0000000000000000000000000000000000000000;;		FrontendPort            *int32            `json:"frontendPort,omitempty"`
0000000000000000000000000000000000000000;;		BackendPort             *int32            `json:"backendPort,omitempty"`
0000000000000000000000000000000000000000;;		IdleTimeoutInMinutes    *int32            `json:"idleTimeoutInMinutes,omitempty"`
0000000000000000000000000000000000000000;;		EnableFloatingIP        *bool             `json:"enableFloatingIP,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState       *string           `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LocalNetworkGateway is a common class for general resource information
0000000000000000000000000000000000000000;;	type LocalNetworkGateway struct {
0000000000000000000000000000000000000000;;		autorest.Response                    `json:"-"`
0000000000000000000000000000000000000000;;		ID                                   *string             `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Name                                 *string             `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Type                                 *string             `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Location                             *string             `json:"location,omitempty"`
0000000000000000000000000000000000000000;;		Tags                                 *map[string]*string `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		*LocalNetworkGatewayPropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Etag                                 *string `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LocalNetworkGatewayListResult is response for ListLocalNetworkGateways API
0000000000000000000000000000000000000000;;	// service call.
0000000000000000000000000000000000000000;;	type LocalNetworkGatewayListResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]LocalNetworkGateway `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		NextLink          *string                `json:"nextLink,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LocalNetworkGatewayListResultPreparer prepares a request to retrieve the next set of results. It returns
0000000000000000000000000000000000000000;;	// nil if no more results exist.
0000000000000000000000000000000000000000;;	func (client LocalNetworkGatewayListResult) LocalNetworkGatewayListResultPreparer() (*http.Request, error) {
0000000000000000000000000000000000000000;;		if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return autorest.Prepare(&http.Request{},
0000000000000000000000000000000000000000;;			autorest.AsJSON(),
0000000000000000000000000000000000000000;;			autorest.AsGet(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(to.String(client.NextLink)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LocalNetworkGatewayPropertiesFormat is localNetworkGateway properties
0000000000000000000000000000000000000000;;	type LocalNetworkGatewayPropertiesFormat struct {
0000000000000000000000000000000000000000;;		LocalNetworkAddressSpace *AddressSpace `json:"localNetworkAddressSpace,omitempty"`
0000000000000000000000000000000000000000;;		GatewayIPAddress         *string       `json:"gatewayIpAddress,omitempty"`
0000000000000000000000000000000000000000;;		BgpSettings              *BgpSettings  `json:"bgpSettings,omitempty"`
0000000000000000000000000000000000000000;;		ResourceGUID             *string       `json:"resourceGuid,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState        *string       `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NextHopParameters is parameters that define the source and destination
0000000000000000000000000000000000000000;;	// endpoint.
0000000000000000000000000000000000000000;;	type NextHopParameters struct {
0000000000000000000000000000000000000000;;		TargetResourceID     *string `json:"targetResourceId,omitempty"`
0000000000000000000000000000000000000000;;		SourceIPAddress      *string `json:"sourceIPAddress,omitempty"`
0000000000000000000000000000000000000000;;		DestinationIPAddress *string `json:"destinationIPAddress,omitempty"`
0000000000000000000000000000000000000000;;		TargetNicResourceID  *string `json:"targetNicResourceId,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NextHopResult is the information about next hop from the specified VM.
0000000000000000000000000000000000000000;;	type NextHopResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		NextHopType       NextHopType `json:"nextHopType,omitempty"`
0000000000000000000000000000000000000000;;		NextHopIPAddress  *string     `json:"nextHopIpAddress,omitempty"`
0000000000000000000000000000000000000000;;		RouteTableID      *string     `json:"routeTableId,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OutboundNatRule is outbound NAT pool of the load balancer.
0000000000000000000000000000000000000000;;	type OutboundNatRule struct {
0000000000000000000000000000000000000000;;		ID                               *string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		*OutboundNatRulePropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Name                             *string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Etag                             *string `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OutboundNatRulePropertiesFormat is outbound NAT pool of the load balancer.
0000000000000000000000000000000000000000;;	type OutboundNatRulePropertiesFormat struct {
0000000000000000000000000000000000000000;;		AllocatedOutboundPorts   *int32         `json:"allocatedOutboundPorts,omitempty"`
0000000000000000000000000000000000000000;;		FrontendIPConfigurations *[]SubResource `json:"frontendIPConfigurations,omitempty"`
0000000000000000000000000000000000000000;;		BackendAddressPool       *SubResource   `json:"backendAddressPool,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState        *string        `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PacketCapture is parameters that define the create packet capture operation.
0000000000000000000000000000000000000000;;	type PacketCapture struct {
0000000000000000000000000000000000000000;;		*PacketCaptureParameters `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PacketCaptureFilter is filter that is applied to packet capture request.
0000000000000000000000000000000000000000;;	// Multiple filters can be applied.
0000000000000000000000000000000000000000;;	type PacketCaptureFilter struct {
0000000000000000000000000000000000000000;;		Protocol        PcProtocol `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;		LocalIPAddress  *string    `json:"localIPAddress,omitempty"`
0000000000000000000000000000000000000000;;		RemoteIPAddress *string    `json:"remoteIPAddress,omitempty"`
0000000000000000000000000000000000000000;;		LocalPort       *string    `json:"localPort,omitempty"`
0000000000000000000000000000000000000000;;		RemotePort      *string    `json:"remotePort,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PacketCaptureListResult is list of packet capture sessions.
0000000000000000000000000000000000000000;;	type PacketCaptureListResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]PacketCaptureResult `json:"value,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PacketCaptureParameters is parameters that define the create packet capture
0000000000000000000000000000000000000000;;	// operation.
0000000000000000000000000000000000000000;;	type PacketCaptureParameters struct {
0000000000000000000000000000000000000000;;		Target                  *string                       `json:"target,omitempty"`
0000000000000000000000000000000000000000;;		BytesToCapturePerPacket *int32                        `json:"bytesToCapturePerPacket,omitempty"`
0000000000000000000000000000000000000000;;		TotalBytesPerSession    *int32                        `json:"totalBytesPerSession,omitempty"`
0000000000000000000000000000000000000000;;		TimeLimitInSeconds      *int32                        `json:"timeLimitInSeconds,omitempty"`
0000000000000000000000000000000000000000;;		StorageLocation         *PacketCaptureStorageLocation `json:"storageLocation,omitempty"`
0000000000000000000000000000000000000000;;		Filters                 *[]PacketCaptureFilter        `json:"filters,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PacketCaptureQueryStatusResult is status of packet capture session.
0000000000000000000000000000000000000000;;	type PacketCaptureQueryStatusResult struct {
0000000000000000000000000000000000000000;;		autorest.Response   `json:"-"`
0000000000000000000000000000000000000000;;		Name                *string    `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		ID                  *string    `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		CaptureStartTime    *date.Time `json:"captureStartTime,omitempty"`
0000000000000000000000000000000000000000;;		PacketCaptureStatus PcStatus   `json:"packetCaptureStatus,omitempty"`
0000000000000000000000000000000000000000;;		StopReason          *string    `json:"stopReason,omitempty"`
0000000000000000000000000000000000000000;;		PacketCaptureError  *[]PcError `json:"packetCaptureError,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PacketCaptureResult is information about packet capture session.
0000000000000000000000000000000000000000;;	type PacketCaptureResult struct {
0000000000000000000000000000000000000000;;		autorest.Response              `json:"-"`
0000000000000000000000000000000000000000;;		Name                           *string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		ID                             *string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Etag                           *string `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;		*PacketCaptureResultProperties `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PacketCaptureResultProperties is describes the properties of a packet
0000000000000000000000000000000000000000;;	// capture session.
0000000000000000000000000000000000000000;;	type PacketCaptureResultProperties struct {
0000000000000000000000000000000000000000;;		Target                  *string                       `json:"target,omitempty"`
0000000000000000000000000000000000000000;;		BytesToCapturePerPacket *int32                        `json:"bytesToCapturePerPacket,omitempty"`
0000000000000000000000000000000000000000;;		TotalBytesPerSession    *int32                        `json:"totalBytesPerSession,omitempty"`
0000000000000000000000000000000000000000;;		TimeLimitInSeconds      *int32                        `json:"timeLimitInSeconds,omitempty"`
0000000000000000000000000000000000000000;;		StorageLocation         *PacketCaptureStorageLocation `json:"storageLocation,omitempty"`
0000000000000000000000000000000000000000;;		Filters                 *[]PacketCaptureFilter        `json:"filters,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState       ProvisioningState             `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PacketCaptureStorageLocation is describes the storage location for a packet
0000000000000000000000000000000000000000;;	// capture session.
0000000000000000000000000000000000000000;;	type PacketCaptureStorageLocation struct {
0000000000000000000000000000000000000000;;		StorageID   *string `json:"storageId,omitempty"`
0000000000000000000000000000000000000000;;		StoragePath *string `json:"storagePath,omitempty"`
0000000000000000000000000000000000000000;;		FilePath    *string `json:"filePath,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PatchRouteFilter is route Filter Resource.
0000000000000000000000000000000000000000;;	type PatchRouteFilter struct {
0000000000000000000000000000000000000000;;		ID                           *string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		*RouteFilterPropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Name                         *string             `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Etag                         *string             `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;		Type                         *string             `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Tags                         *map[string]*string `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PatchRouteFilterRule is route Filter Rule Resource
0000000000000000000000000000000000000000;;	type PatchRouteFilterRule struct {
0000000000000000000000000000000000000000;;		ID                               *string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		*RouteFilterRulePropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Name                             *string             `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Etag                             *string             `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;		Tags                             *map[string]*string `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Probe is a load balancer probe.
0000000000000000000000000000000000000000;;	type Probe struct {
0000000000000000000000000000000000000000;;		ID                     *string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		*ProbePropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Name                   *string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Etag                   *string `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ProbePropertiesFormat is
0000000000000000000000000000000000000000;;	type ProbePropertiesFormat struct {
0000000000000000000000000000000000000000;;		LoadBalancingRules *[]SubResource `json:"loadBalancingRules,omitempty"`
0000000000000000000000000000000000000000;;		Protocol           ProbeProtocol  `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;		Port               *int32         `json:"port,omitempty"`
0000000000000000000000000000000000000000;;		IntervalInSeconds  *int32         `json:"intervalInSeconds,omitempty"`
0000000000000000000000000000000000000000;;		NumberOfProbes     *int32         `json:"numberOfProbes,omitempty"`
0000000000000000000000000000000000000000;;		RequestPath        *string        `json:"requestPath,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState  *string        `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PublicIPAddress is public IP address resource.
0000000000000000000000000000000000000000;;	type PublicIPAddress struct {
0000000000000000000000000000000000000000;;		autorest.Response                `json:"-"`
0000000000000000000000000000000000000000;;		ID                               *string             `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Name                             *string             `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Type                             *string             `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Location                         *string             `json:"location,omitempty"`
0000000000000000000000000000000000000000;;		Tags                             *map[string]*string `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		*PublicIPAddressPropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Etag                             *string `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PublicIPAddressDNSSettings is contains FQDN of the DNS record associated
0000000000000000000000000000000000000000;;	// with the public IP address
0000000000000000000000000000000000000000;;	type PublicIPAddressDNSSettings struct {
0000000000000000000000000000000000000000;;		DomainNameLabel *string `json:"domainNameLabel,omitempty"`
0000000000000000000000000000000000000000;;		Fqdn            *string `json:"fqdn,omitempty"`
0000000000000000000000000000000000000000;;		ReverseFqdn     *string `json:"reverseFqdn,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PublicIPAddressListResult is response for ListPublicIpAddresses API service
0000000000000000000000000000000000000000;;	// call.
0000000000000000000000000000000000000000;;	type PublicIPAddressListResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]PublicIPAddress `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		NextLink          *string            `json:"nextLink,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PublicIPAddressListResultPreparer prepares a request to retrieve the next set of results. It returns
0000000000000000000000000000000000000000;;	// nil if no more results exist.
0000000000000000000000000000000000000000;;	func (client PublicIPAddressListResult) PublicIPAddressListResultPreparer() (*http.Request, error) {
0000000000000000000000000000000000000000;;		if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return autorest.Prepare(&http.Request{},
0000000000000000000000000000000000000000;;			autorest.AsJSON(),
0000000000000000000000000000000000000000;;			autorest.AsGet(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(to.String(client.NextLink)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PublicIPAddressPropertiesFormat is public IP address properties.
0000000000000000000000000000000000000000;;	type PublicIPAddressPropertiesFormat struct {
0000000000000000000000000000000000000000;;		PublicIPAllocationMethod IPAllocationMethod          `json:"publicIPAllocationMethod,omitempty"`
0000000000000000000000000000000000000000;;		PublicIPAddressVersion   IPVersion                   `json:"publicIPAddressVersion,omitempty"`
0000000000000000000000000000000000000000;;		IPConfiguration          *IPConfiguration            `json:"ipConfiguration,omitempty"`
0000000000000000000000000000000000000000;;		DNSSettings              *PublicIPAddressDNSSettings `json:"dnsSettings,omitempty"`
0000000000000000000000000000000000000000;;		IPAddress                *string                     `json:"ipAddress,omitempty"`
0000000000000000000000000000000000000000;;		IdleTimeoutInMinutes     *int32                      `json:"idleTimeoutInMinutes,omitempty"`
0000000000000000000000000000000000000000;;		ResourceGUID             *string                     `json:"resourceGuid,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState        *string                     `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// QueryTroubleshootingParameters is parameters that define the resource to
0000000000000000000000000000000000000000;;	// query the troubleshooting result.
0000000000000000000000000000000000000000;;	type QueryTroubleshootingParameters struct {
0000000000000000000000000000000000000000;;		TargetResourceID *string `json:"targetResourceId,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Resource is
0000000000000000000000000000000000000000;;	type Resource struct {
0000000000000000000000000000000000000000;;		ID       *string             `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Name     *string             `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Type     *string             `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Location *string             `json:"location,omitempty"`
0000000000000000000000000000000000000000;;		Tags     *map[string]*string `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResourceNavigationLink is resourceNavigationLink resource.
0000000000000000000000000000000000000000;;	type ResourceNavigationLink struct {
0000000000000000000000000000000000000000;;		ID                            *string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		*ResourceNavigationLinkFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Name                          *string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Etag                          *string `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResourceNavigationLinkFormat is properties of ResourceNavigationLink.
0000000000000000000000000000000000000000;;	type ResourceNavigationLinkFormat struct {
0000000000000000000000000000000000000000;;		LinkedResourceType *string `json:"linkedResourceType,omitempty"`
0000000000000000000000000000000000000000;;		Link               *string `json:"link,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState  *string `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RetentionPolicyParameters is parameters that define the retention policy for
0000000000000000000000000000000000000000;;	// flow log.
0000000000000000000000000000000000000000;;	type RetentionPolicyParameters struct {
0000000000000000000000000000000000000000;;		Days    *int32 `json:"days,omitempty"`
0000000000000000000000000000000000000000;;		Enabled *bool  `json:"enabled,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Route is route resource
0000000000000000000000000000000000000000;;	type Route struct {
0000000000000000000000000000000000000000;;		autorest.Response      `json:"-"`
0000000000000000000000000000000000000000;;		ID                     *string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		*RoutePropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Name                   *string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Etag                   *string `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RouteFilter is route Filter Resource.
0000000000000000000000000000000000000000;;	type RouteFilter struct {
0000000000000000000000000000000000000000;;		autorest.Response            `json:"-"`
0000000000000000000000000000000000000000;;		ID                           *string             `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Name                         *string             `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Type                         *string             `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Location                     *string             `json:"location,omitempty"`
0000000000000000000000000000000000000000;;		Tags                         *map[string]*string `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		*RouteFilterPropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Etag                         *string `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RouteFilterListResult is response for the ListRouteFilters API service call.
0000000000000000000000000000000000000000;;	type RouteFilterListResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]RouteFilter `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		NextLink          *string        `json:"nextLink,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RouteFilterListResultPreparer prepares a request to retrieve the next set of results. It returns
0000000000000000000000000000000000000000;;	// nil if no more results exist.
0000000000000000000000000000000000000000;;	func (client RouteFilterListResult) RouteFilterListResultPreparer() (*http.Request, error) {
0000000000000000000000000000000000000000;;		if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return autorest.Prepare(&http.Request{},
0000000000000000000000000000000000000000;;			autorest.AsJSON(),
0000000000000000000000000000000000000000;;			autorest.AsGet(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(to.String(client.NextLink)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RouteFilterPropertiesFormat is route Filter Resource
0000000000000000000000000000000000000000;;	type RouteFilterPropertiesFormat struct {
0000000000000000000000000000000000000000;;		Rules             *[]RouteFilterRule            `json:"rules,omitempty"`
0000000000000000000000000000000000000000;;		Peerings          *[]ExpressRouteCircuitPeering `json:"peerings,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState *string                       `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RouteFilterRule is route Filter Rule Resource
0000000000000000000000000000000000000000;;	type RouteFilterRule struct {
0000000000000000000000000000000000000000;;		autorest.Response                `json:"-"`
0000000000000000000000000000000000000000;;		ID                               *string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		*RouteFilterRulePropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Name                             *string             `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Location                         *string             `json:"location,omitempty"`
0000000000000000000000000000000000000000;;		Etag                             *string             `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;		Tags                             *map[string]*string `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RouteFilterRuleListResult is response for the ListRouteFilterRules API
0000000000000000000000000000000000000000;;	// service call
0000000000000000000000000000000000000000;;	type RouteFilterRuleListResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]RouteFilterRule `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		NextLink          *string            `json:"nextLink,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RouteFilterRuleListResultPreparer prepares a request to retrieve the next set of results. It returns
0000000000000000000000000000000000000000;;	// nil if no more results exist.
0000000000000000000000000000000000000000;;	func (client RouteFilterRuleListResult) RouteFilterRuleListResultPreparer() (*http.Request, error) {
0000000000000000000000000000000000000000;;		if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return autorest.Prepare(&http.Request{},
0000000000000000000000000000000000000000;;			autorest.AsJSON(),
0000000000000000000000000000000000000000;;			autorest.AsGet(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(to.String(client.NextLink)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RouteFilterRulePropertiesFormat is route Filter Rule Resource
0000000000000000000000000000000000000000;;	type RouteFilterRulePropertiesFormat struct {
0000000000000000000000000000000000000000;;		Access              Access    `json:"access,omitempty"`
0000000000000000000000000000000000000000;;		RouteFilterRuleType *string   `json:"routeFilterRuleType,omitempty"`
0000000000000000000000000000000000000000;;		Communities         *[]string `json:"communities,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState   *string   `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RouteListResult is response for the ListRoute API service call
0000000000000000000000000000000000000000;;	type RouteListResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]Route `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		NextLink          *string  `json:"nextLink,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RouteListResultPreparer prepares a request to retrieve the next set of results. It returns
0000000000000000000000000000000000000000;;	// nil if no more results exist.
0000000000000000000000000000000000000000;;	func (client RouteListResult) RouteListResultPreparer() (*http.Request, error) {
0000000000000000000000000000000000000000;;		if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return autorest.Prepare(&http.Request{},
0000000000000000000000000000000000000000;;			autorest.AsJSON(),
0000000000000000000000000000000000000000;;			autorest.AsGet(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(to.String(client.NextLink)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RoutePropertiesFormat is route resource
0000000000000000000000000000000000000000;;	type RoutePropertiesFormat struct {
0000000000000000000000000000000000000000;;		AddressPrefix     *string          `json:"addressPrefix,omitempty"`
0000000000000000000000000000000000000000;;		NextHopType       RouteNextHopType `json:"nextHopType,omitempty"`
0000000000000000000000000000000000000000;;		NextHopIPAddress  *string          `json:"nextHopIpAddress,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState *string          `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RouteTable is route table resource.
0000000000000000000000000000000000000000;;	type RouteTable struct {
0000000000000000000000000000000000000000;;		autorest.Response           `json:"-"`
0000000000000000000000000000000000000000;;		ID                          *string             `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Name                        *string             `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Type                        *string             `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Location                    *string             `json:"location,omitempty"`
0000000000000000000000000000000000000000;;		Tags                        *map[string]*string `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		*RouteTablePropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Etag                        *string `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RouteTableListResult is response for the ListRouteTable API service call.
0000000000000000000000000000000000000000;;	type RouteTableListResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]RouteTable `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		NextLink          *string       `json:"nextLink,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RouteTableListResultPreparer prepares a request to retrieve the next set of results. It returns
0000000000000000000000000000000000000000;;	// nil if no more results exist.
0000000000000000000000000000000000000000;;	func (client RouteTableListResult) RouteTableListResultPreparer() (*http.Request, error) {
0000000000000000000000000000000000000000;;		if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return autorest.Prepare(&http.Request{},
0000000000000000000000000000000000000000;;			autorest.AsJSON(),
0000000000000000000000000000000000000000;;			autorest.AsGet(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(to.String(client.NextLink)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RouteTablePropertiesFormat is route Table resource
0000000000000000000000000000000000000000;;	type RouteTablePropertiesFormat struct {
0000000000000000000000000000000000000000;;		Routes            *[]Route  `json:"routes,omitempty"`
0000000000000000000000000000000000000000;;		Subnets           *[]Subnet `json:"subnets,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState *string   `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SecurityGroup is networkSecurityGroup resource.
0000000000000000000000000000000000000000;;	type SecurityGroup struct {
0000000000000000000000000000000000000000;;		autorest.Response              `json:"-"`
0000000000000000000000000000000000000000;;		ID                             *string             `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Name                           *string             `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Type                           *string             `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Location                       *string             `json:"location,omitempty"`
0000000000000000000000000000000000000000;;		Tags                           *map[string]*string `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		*SecurityGroupPropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Etag                           *string `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SecurityGroupListResult is response for ListNetworkSecurityGroups API
0000000000000000000000000000000000000000;;	// service call.
0000000000000000000000000000000000000000;;	type SecurityGroupListResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]SecurityGroup `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		NextLink          *string          `json:"nextLink,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SecurityGroupListResultPreparer prepares a request to retrieve the next set of results. It returns
0000000000000000000000000000000000000000;;	// nil if no more results exist.
0000000000000000000000000000000000000000;;	func (client SecurityGroupListResult) SecurityGroupListResultPreparer() (*http.Request, error) {
0000000000000000000000000000000000000000;;		if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return autorest.Prepare(&http.Request{},
0000000000000000000000000000000000000000;;			autorest.AsJSON(),
0000000000000000000000000000000000000000;;			autorest.AsGet(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(to.String(client.NextLink)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SecurityGroupNetworkInterface is network interface and all its associated
0000000000000000000000000000000000000000;;	// security rules.
0000000000000000000000000000000000000000;;	type SecurityGroupNetworkInterface struct {
0000000000000000000000000000000000000000;;		ID                       *string                   `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		SecurityRuleAssociations *SecurityRuleAssociations `json:"securityRuleAssociations,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SecurityGroupPropertiesFormat is network Security Group resource.
0000000000000000000000000000000000000000;;	type SecurityGroupPropertiesFormat struct {
0000000000000000000000000000000000000000;;		SecurityRules        *[]SecurityRule `json:"securityRules,omitempty"`
0000000000000000000000000000000000000000;;		DefaultSecurityRules *[]SecurityRule `json:"defaultSecurityRules,omitempty"`
0000000000000000000000000000000000000000;;		NetworkInterfaces    *[]Interface    `json:"networkInterfaces,omitempty"`
0000000000000000000000000000000000000000;;		Subnets              *[]Subnet       `json:"subnets,omitempty"`
0000000000000000000000000000000000000000;;		ResourceGUID         *string         `json:"resourceGuid,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState    *string         `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SecurityGroupViewParameters is parameters that define the VM to check
0000000000000000000000000000000000000000;;	// security groups for.
0000000000000000000000000000000000000000;;	type SecurityGroupViewParameters struct {
0000000000000000000000000000000000000000;;		TargetResourceID *string `json:"targetResourceId,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SecurityGroupViewResult is the information about security rules applied to
0000000000000000000000000000000000000000;;	// the specified VM.
0000000000000000000000000000000000000000;;	type SecurityGroupViewResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		NetworkInterfaces *[]SecurityGroupNetworkInterface `json:"networkInterfaces,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SecurityRule is network security rule.
0000000000000000000000000000000000000000;;	type SecurityRule struct {
0000000000000000000000000000000000000000;;		autorest.Response             `json:"-"`
0000000000000000000000000000000000000000;;		ID                            *string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		*SecurityRulePropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Name                          *string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Etag                          *string `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SecurityRuleAssociations is all security rules associated with the network
0000000000000000000000000000000000000000;;	// interface.
0000000000000000000000000000000000000000;;	type SecurityRuleAssociations struct {
0000000000000000000000000000000000000000;;		NetworkInterfaceAssociation *InterfaceAssociation           `json:"networkInterfaceAssociation,omitempty"`
0000000000000000000000000000000000000000;;		SubnetAssociation           *SubnetAssociation              `json:"subnetAssociation,omitempty"`
0000000000000000000000000000000000000000;;		DefaultSecurityRules        *[]SecurityRule                 `json:"defaultSecurityRules,omitempty"`
0000000000000000000000000000000000000000;;		EffectiveSecurityRules      *[]EffectiveNetworkSecurityRule `json:"effectiveSecurityRules,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SecurityRuleListResult is response for ListSecurityRule API service call.
0000000000000000000000000000000000000000;;	// Retrieves all security rules that belongs to a network security group.
0000000000000000000000000000000000000000;;	type SecurityRuleListResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]SecurityRule `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		NextLink          *string         `json:"nextLink,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SecurityRuleListResultPreparer prepares a request to retrieve the next set of results. It returns
0000000000000000000000000000000000000000;;	// nil if no more results exist.
0000000000000000000000000000000000000000;;	func (client SecurityRuleListResult) SecurityRuleListResultPreparer() (*http.Request, error) {
0000000000000000000000000000000000000000;;		if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return autorest.Prepare(&http.Request{},
0000000000000000000000000000000000000000;;			autorest.AsJSON(),
0000000000000000000000000000000000000000;;			autorest.AsGet(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(to.String(client.NextLink)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SecurityRulePropertiesFormat is
0000000000000000000000000000000000000000;;	type SecurityRulePropertiesFormat struct {
0000000000000000000000000000000000000000;;		Description              *string               `json:"description,omitempty"`
0000000000000000000000000000000000000000;;		Protocol                 SecurityRuleProtocol  `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;		SourcePortRange          *string               `json:"sourcePortRange,omitempty"`
0000000000000000000000000000000000000000;;		DestinationPortRange     *string               `json:"destinationPortRange,omitempty"`
0000000000000000000000000000000000000000;;		SourceAddressPrefix      *string               `json:"sourceAddressPrefix,omitempty"`
0000000000000000000000000000000000000000;;		DestinationAddressPrefix *string               `json:"destinationAddressPrefix,omitempty"`
0000000000000000000000000000000000000000;;		Access                   SecurityRuleAccess    `json:"access,omitempty"`
0000000000000000000000000000000000000000;;		Priority                 *int32                `json:"priority,omitempty"`
0000000000000000000000000000000000000000;;		Direction                SecurityRuleDirection `json:"direction,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState        *string               `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String is
0000000000000000000000000000000000000000;;	type String struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Subnet is subnet in a virtual network resource.
0000000000000000000000000000000000000000;;	type Subnet struct {
0000000000000000000000000000000000000000;;		autorest.Response       `json:"-"`
0000000000000000000000000000000000000000;;		ID                      *string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		*SubnetPropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Name                    *string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Etag                    *string `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SubnetAssociation is network interface and its custom security rules.
0000000000000000000000000000000000000000;;	type SubnetAssociation struct {
0000000000000000000000000000000000000000;;		ID            *string         `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		SecurityRules *[]SecurityRule `json:"securityRules,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SubnetListResult is response for ListSubnets API service callRetrieves all
0000000000000000000000000000000000000000;;	// subnet that belongs to a virtual network
0000000000000000000000000000000000000000;;	type SubnetListResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]Subnet `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		NextLink          *string   `json:"nextLink,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SubnetListResultPreparer prepares a request to retrieve the next set of results. It returns
0000000000000000000000000000000000000000;;	// nil if no more results exist.
0000000000000000000000000000000000000000;;	func (client SubnetListResult) SubnetListResultPreparer() (*http.Request, error) {
0000000000000000000000000000000000000000;;		if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return autorest.Prepare(&http.Request{},
0000000000000000000000000000000000000000;;			autorest.AsJSON(),
0000000000000000000000000000000000000000;;			autorest.AsGet(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(to.String(client.NextLink)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SubnetPropertiesFormat is
0000000000000000000000000000000000000000;;	type SubnetPropertiesFormat struct {
0000000000000000000000000000000000000000;;		AddressPrefix           *string                   `json:"addressPrefix,omitempty"`
0000000000000000000000000000000000000000;;		NetworkSecurityGroup    *SecurityGroup            `json:"networkSecurityGroup,omitempty"`
0000000000000000000000000000000000000000;;		RouteTable              *RouteTable               `json:"routeTable,omitempty"`
0000000000000000000000000000000000000000;;		IPConfigurations        *[]IPConfiguration        `json:"ipConfigurations,omitempty"`
0000000000000000000000000000000000000000;;		ResourceNavigationLinks *[]ResourceNavigationLink `json:"resourceNavigationLinks,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState       *string                   `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SubResource is
0000000000000000000000000000000000000000;;	type SubResource struct {
0000000000000000000000000000000000000000;;		ID *string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Topology is topology of the specified resource group.
0000000000000000000000000000000000000000;;	type Topology struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		ID                *string             `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		CreatedDateTime   *date.Time          `json:"createdDateTime,omitempty"`
0000000000000000000000000000000000000000;;		LastModified      *date.Time          `json:"lastModified,omitempty"`
0000000000000000000000000000000000000000;;		Resources         *[]TopologyResource `json:"resources,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TopologyAssociation is resources that have an association with the parent
0000000000000000000000000000000000000000;;	// resource.
0000000000000000000000000000000000000000;;	type TopologyAssociation struct {
0000000000000000000000000000000000000000;;		Name            *string         `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		ResourceID      *string         `json:"resourceId,omitempty"`
0000000000000000000000000000000000000000;;		AssociationType AssociationType `json:"associationType,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TopologyParameters is parameters that define the representation of topology.
0000000000000000000000000000000000000000;;	type TopologyParameters struct {
0000000000000000000000000000000000000000;;		TargetResourceGroupName *string `json:"targetResourceGroupName,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TopologyResource is the network resource topology information for the given
0000000000000000000000000000000000000000;;	// resource group.
0000000000000000000000000000000000000000;;	type TopologyResource struct {
0000000000000000000000000000000000000000;;		Name         *string                `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		ID           *string                `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Location     *string                `json:"location,omitempty"`
0000000000000000000000000000000000000000;;		Associations *[]TopologyAssociation `json:"associations,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TroubleshootingDetails is information gained from troubleshooting of
0000000000000000000000000000000000000000;;	// specified resource.
0000000000000000000000000000000000000000;;	type TroubleshootingDetails struct {
0000000000000000000000000000000000000000;;		ID                 *string                              `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		ReasonType         *string                              `json:"reasonType,omitempty"`
0000000000000000000000000000000000000000;;		Summary            *string                              `json:"summary,omitempty"`
0000000000000000000000000000000000000000;;		Detail             *string                              `json:"detail,omitempty"`
0000000000000000000000000000000000000000;;		RecommendedActions *[]TroubleshootingRecommendedActions `json:"recommendedActions,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TroubleshootingParameters is parameters that define the resource to
0000000000000000000000000000000000000000;;	// troubleshoot.
0000000000000000000000000000000000000000;;	type TroubleshootingParameters struct {
0000000000000000000000000000000000000000;;		TargetResourceID           *string `json:"targetResourceId,omitempty"`
0000000000000000000000000000000000000000;;		*TroubleshootingProperties `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TroubleshootingProperties is storage location provided for troubleshoot.
0000000000000000000000000000000000000000;;	type TroubleshootingProperties struct {
0000000000000000000000000000000000000000;;		StorageID   *string `json:"storageId,omitempty"`
0000000000000000000000000000000000000000;;		StoragePath *string `json:"storagePath,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TroubleshootingRecommendedActions is recommended actions based on discovered
0000000000000000000000000000000000000000;;	// issues.
0000000000000000000000000000000000000000;;	type TroubleshootingRecommendedActions struct {
0000000000000000000000000000000000000000;;		ActionID      *string `json:"actionId,omitempty"`
0000000000000000000000000000000000000000;;		ActionText    *string `json:"actionText,omitempty"`
0000000000000000000000000000000000000000;;		ActionURI     *string `json:"actionUri,omitempty"`
0000000000000000000000000000000000000000;;		ActionURIText *string `json:"actionUriText,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TroubleshootingResult is troubleshooting information gained from specified
0000000000000000000000000000000000000000;;	// resource.
0000000000000000000000000000000000000000;;	type TroubleshootingResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		StartTime         *date.Time                `json:"startTime,omitempty"`
0000000000000000000000000000000000000000;;		EndTime           *date.Time                `json:"endTime,omitempty"`
0000000000000000000000000000000000000000;;		Code              *string                   `json:"code,omitempty"`
0000000000000000000000000000000000000000;;		Results           *[]TroubleshootingDetails `json:"results,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TunnelConnectionHealth is virtualNetworkGatewayConnection properties
0000000000000000000000000000000000000000;;	type TunnelConnectionHealth struct {
0000000000000000000000000000000000000000;;		Tunnel                           *string                               `json:"tunnel,omitempty"`
0000000000000000000000000000000000000000;;		ConnectionStatus                 VirtualNetworkGatewayConnectionStatus `json:"connectionStatus,omitempty"`
0000000000000000000000000000000000000000;;		IngressBytesTransferred          *int64                                `json:"ingressBytesTransferred,omitempty"`
0000000000000000000000000000000000000000;;		EgressBytesTransferred           *int64                                `json:"egressBytesTransferred,omitempty"`
0000000000000000000000000000000000000000;;		LastConnectionEstablishedUtcTime *string                               `json:"lastConnectionEstablishedUtcTime,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Usage is describes network resource usage.
0000000000000000000000000000000000000000;;	type Usage struct {
0000000000000000000000000000000000000000;;		Unit         *string    `json:"unit,omitempty"`
0000000000000000000000000000000000000000;;		CurrentValue *int64     `json:"currentValue,omitempty"`
0000000000000000000000000000000000000000;;		Limit        *int64     `json:"limit,omitempty"`
0000000000000000000000000000000000000000;;		Name         *UsageName `json:"name,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UsageName is the usage names.
0000000000000000000000000000000000000000;;	type UsageName struct {
0000000000000000000000000000000000000000;;		Value          *string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		LocalizedValue *string `json:"localizedValue,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UsagesListResult is the list usages operation response.
0000000000000000000000000000000000000000;;	type UsagesListResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]Usage `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		NextLink          *string  `json:"nextLink,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UsagesListResultPreparer prepares a request to retrieve the next set of results. It returns
0000000000000000000000000000000000000000;;	// nil if no more results exist.
0000000000000000000000000000000000000000;;	func (client UsagesListResult) UsagesListResultPreparer() (*http.Request, error) {
0000000000000000000000000000000000000000;;		if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return autorest.Prepare(&http.Request{},
0000000000000000000000000000000000000000;;			autorest.AsJSON(),
0000000000000000000000000000000000000000;;			autorest.AsGet(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(to.String(client.NextLink)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VerificationIPFlowParameters is parameters that define the IP flow to be
0000000000000000000000000000000000000000;;	// verified.
0000000000000000000000000000000000000000;;	type VerificationIPFlowParameters struct {
0000000000000000000000000000000000000000;;		TargetResourceID    *string   `json:"targetResourceId,omitempty"`
0000000000000000000000000000000000000000;;		Direction           Direction `json:"direction,omitempty"`
0000000000000000000000000000000000000000;;		Protocol            Protocol  `json:"protocol,omitempty"`
0000000000000000000000000000000000000000;;		LocalPort           *string   `json:"localPort,omitempty"`
0000000000000000000000000000000000000000;;		RemotePort          *string   `json:"remotePort,omitempty"`
0000000000000000000000000000000000000000;;		LocalIPAddress      *string   `json:"localIPAddress,omitempty"`
0000000000000000000000000000000000000000;;		RemoteIPAddress     *string   `json:"remoteIPAddress,omitempty"`
0000000000000000000000000000000000000000;;		TargetNicResourceID *string   `json:"targetNicResourceId,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VerificationIPFlowResult is results of IP flow verification on the target
0000000000000000000000000000000000000000;;	// resource.
0000000000000000000000000000000000000000;;	type VerificationIPFlowResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Access            Access  `json:"access,omitempty"`
0000000000000000000000000000000000000000;;		RuleName          *string `json:"ruleName,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualNetwork is virtual Network resource.
0000000000000000000000000000000000000000;;	type VirtualNetwork struct {
0000000000000000000000000000000000000000;;		autorest.Response               `json:"-"`
0000000000000000000000000000000000000000;;		ID                              *string             `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Name                            *string             `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Type                            *string             `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Location                        *string             `json:"location,omitempty"`
0000000000000000000000000000000000000000;;		Tags                            *map[string]*string `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		*VirtualNetworkPropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Etag                            *string `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualNetworkGateway is a common class for general resource information
0000000000000000000000000000000000000000;;	type VirtualNetworkGateway struct {
0000000000000000000000000000000000000000;;		autorest.Response                      `json:"-"`
0000000000000000000000000000000000000000;;		ID                                     *string             `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Name                                   *string             `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Type                                   *string             `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Location                               *string             `json:"location,omitempty"`
0000000000000000000000000000000000000000;;		Tags                                   *map[string]*string `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		*VirtualNetworkGatewayPropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Etag                                   *string `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualNetworkGatewayConnection is a common class for general resource
0000000000000000000000000000000000000000;;	// information
0000000000000000000000000000000000000000;;	type VirtualNetworkGatewayConnection struct {
0000000000000000000000000000000000000000;;		autorest.Response                                `json:"-"`
0000000000000000000000000000000000000000;;		ID                                               *string             `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Name                                             *string             `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Type                                             *string             `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Location                                         *string             `json:"location,omitempty"`
0000000000000000000000000000000000000000;;		Tags                                             *map[string]*string `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		*VirtualNetworkGatewayConnectionPropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Etag                                             *string `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualNetworkGatewayConnectionListResult is response for the
0000000000000000000000000000000000000000;;	// ListVirtualNetworkGatewayConnections API service call
0000000000000000000000000000000000000000;;	type VirtualNetworkGatewayConnectionListResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]VirtualNetworkGatewayConnection `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		NextLink          *string                            `json:"nextLink,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualNetworkGatewayConnectionListResultPreparer prepares a request to retrieve the next set of results. It returns
0000000000000000000000000000000000000000;;	// nil if no more results exist.
0000000000000000000000000000000000000000;;	func (client VirtualNetworkGatewayConnectionListResult) VirtualNetworkGatewayConnectionListResultPreparer() (*http.Request, error) {
0000000000000000000000000000000000000000;;		if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return autorest.Prepare(&http.Request{},
0000000000000000000000000000000000000000;;			autorest.AsJSON(),
0000000000000000000000000000000000000000;;			autorest.AsGet(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(to.String(client.NextLink)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualNetworkGatewayConnectionPropertiesFormat is
0000000000000000000000000000000000000000;;	// virtualNetworkGatewayConnection properties
0000000000000000000000000000000000000000;;	type VirtualNetworkGatewayConnectionPropertiesFormat struct {
0000000000000000000000000000000000000000;;		AuthorizationKey               *string                               `json:"authorizationKey,omitempty"`
0000000000000000000000000000000000000000;;		VirtualNetworkGateway1         *VirtualNetworkGateway                `json:"virtualNetworkGateway1,omitempty"`
0000000000000000000000000000000000000000;;		VirtualNetworkGateway2         *VirtualNetworkGateway                `json:"virtualNetworkGateway2,omitempty"`
0000000000000000000000000000000000000000;;		LocalNetworkGateway2           *LocalNetworkGateway                  `json:"localNetworkGateway2,omitempty"`
0000000000000000000000000000000000000000;;		ConnectionType                 VirtualNetworkGatewayConnectionType   `json:"connectionType,omitempty"`
0000000000000000000000000000000000000000;;		RoutingWeight                  *int32                                `json:"routingWeight,omitempty"`
0000000000000000000000000000000000000000;;		SharedKey                      *string                               `json:"sharedKey,omitempty"`
0000000000000000000000000000000000000000;;		ConnectionStatus               VirtualNetworkGatewayConnectionStatus `json:"connectionStatus,omitempty"`
0000000000000000000000000000000000000000;;		TunnelConnectionStatus         *[]TunnelConnectionHealth             `json:"tunnelConnectionStatus,omitempty"`
0000000000000000000000000000000000000000;;		EgressBytesTransferred         *int64                                `json:"egressBytesTransferred,omitempty"`
0000000000000000000000000000000000000000;;		IngressBytesTransferred        *int64                                `json:"ingressBytesTransferred,omitempty"`
0000000000000000000000000000000000000000;;		Peer                           *SubResource                          `json:"peer,omitempty"`
0000000000000000000000000000000000000000;;		EnableBgp                      *bool                                 `json:"enableBgp,omitempty"`
0000000000000000000000000000000000000000;;		UsePolicyBasedTrafficSelectors *bool                                 `json:"usePolicyBasedTrafficSelectors,omitempty"`
0000000000000000000000000000000000000000;;		IpsecPolicies                  *[]IpsecPolicy                        `json:"ipsecPolicies,omitempty"`
0000000000000000000000000000000000000000;;		ResourceGUID                   *string                               `json:"resourceGuid,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState              *string                               `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualNetworkGatewayIPConfiguration is iP configuration for virtual network
0000000000000000000000000000000000000000;;	// gateway
0000000000000000000000000000000000000000;;	type VirtualNetworkGatewayIPConfiguration struct {
0000000000000000000000000000000000000000;;		ID                                                    *string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		*VirtualNetworkGatewayIPConfigurationPropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Name                                                  *string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Etag                                                  *string `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualNetworkGatewayIPConfigurationPropertiesFormat is properties of
0000000000000000000000000000000000000000;;	// VirtualNetworkGatewayIPConfiguration
0000000000000000000000000000000000000000;;	type VirtualNetworkGatewayIPConfigurationPropertiesFormat struct {
0000000000000000000000000000000000000000;;		PrivateIPAllocationMethod IPAllocationMethod `json:"privateIPAllocationMethod,omitempty"`
0000000000000000000000000000000000000000;;		Subnet                    *SubResource       `json:"subnet,omitempty"`
0000000000000000000000000000000000000000;;		PublicIPAddress           *SubResource       `json:"publicIPAddress,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState         *string            `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualNetworkGatewayListResult is response for the
0000000000000000000000000000000000000000;;	// ListVirtualNetworkGateways API service call.
0000000000000000000000000000000000000000;;	type VirtualNetworkGatewayListResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]VirtualNetworkGateway `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		NextLink          *string                  `json:"nextLink,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualNetworkGatewayListResultPreparer prepares a request to retrieve the next set of results. It returns
0000000000000000000000000000000000000000;;	// nil if no more results exist.
0000000000000000000000000000000000000000;;	func (client VirtualNetworkGatewayListResult) VirtualNetworkGatewayListResultPreparer() (*http.Request, error) {
0000000000000000000000000000000000000000;;		if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return autorest.Prepare(&http.Request{},
0000000000000000000000000000000000000000;;			autorest.AsJSON(),
0000000000000000000000000000000000000000;;			autorest.AsGet(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(to.String(client.NextLink)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualNetworkGatewayPropertiesFormat is virtualNetworkGateway properties
0000000000000000000000000000000000000000;;	type VirtualNetworkGatewayPropertiesFormat struct {
0000000000000000000000000000000000000000;;		IPConfigurations       *[]VirtualNetworkGatewayIPConfiguration `json:"ipConfigurations,omitempty"`
0000000000000000000000000000000000000000;;		GatewayType            VirtualNetworkGatewayType               `json:"gatewayType,omitempty"`
0000000000000000000000000000000000000000;;		VpnType                VpnType                                 `json:"vpnType,omitempty"`
0000000000000000000000000000000000000000;;		EnableBgp              *bool                                   `json:"enableBgp,omitempty"`
0000000000000000000000000000000000000000;;		ActiveActive           *bool                                   `json:"activeActive,omitempty"`
0000000000000000000000000000000000000000;;		GatewayDefaultSite     *SubResource                            `json:"gatewayDefaultSite,omitempty"`
0000000000000000000000000000000000000000;;		Sku                    *VirtualNetworkGatewaySku               `json:"sku,omitempty"`
0000000000000000000000000000000000000000;;		VpnClientConfiguration *VpnClientConfiguration                 `json:"vpnClientConfiguration,omitempty"`
0000000000000000000000000000000000000000;;		BgpSettings            *BgpSettings                            `json:"bgpSettings,omitempty"`
0000000000000000000000000000000000000000;;		ResourceGUID           *string                                 `json:"resourceGuid,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState      *string                                 `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualNetworkGatewaySku is virtualNetworkGatewaySku details
0000000000000000000000000000000000000000;;	type VirtualNetworkGatewaySku struct {
0000000000000000000000000000000000000000;;		Name     VirtualNetworkGatewaySkuName `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Tier     VirtualNetworkGatewaySkuTier `json:"tier,omitempty"`
0000000000000000000000000000000000000000;;		Capacity *int32                       `json:"capacity,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualNetworkListResult is response for the ListVirtualNetworks API service
0000000000000000000000000000000000000000;;	// call.
0000000000000000000000000000000000000000;;	type VirtualNetworkListResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]VirtualNetwork `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		NextLink          *string           `json:"nextLink,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualNetworkListResultPreparer prepares a request to retrieve the next set of results. It returns
0000000000000000000000000000000000000000;;	// nil if no more results exist.
0000000000000000000000000000000000000000;;	func (client VirtualNetworkListResult) VirtualNetworkListResultPreparer() (*http.Request, error) {
0000000000000000000000000000000000000000;;		if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return autorest.Prepare(&http.Request{},
0000000000000000000000000000000000000000;;			autorest.AsJSON(),
0000000000000000000000000000000000000000;;			autorest.AsGet(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(to.String(client.NextLink)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualNetworkPeering is peerings in a virtual network resource.
0000000000000000000000000000000000000000;;	type VirtualNetworkPeering struct {
0000000000000000000000000000000000000000;;		autorest.Response                      `json:"-"`
0000000000000000000000000000000000000000;;		ID                                     *string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		*VirtualNetworkPeeringPropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Name                                   *string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Etag                                   *string `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualNetworkPeeringListResult is response for ListSubnets API service
0000000000000000000000000000000000000000;;	// call. Retrieves all subnets that belong to a virtual network.
0000000000000000000000000000000000000000;;	type VirtualNetworkPeeringListResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]VirtualNetworkPeering `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		NextLink          *string                  `json:"nextLink,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualNetworkPeeringListResultPreparer prepares a request to retrieve the next set of results. It returns
0000000000000000000000000000000000000000;;	// nil if no more results exist.
0000000000000000000000000000000000000000;;	func (client VirtualNetworkPeeringListResult) VirtualNetworkPeeringListResultPreparer() (*http.Request, error) {
0000000000000000000000000000000000000000;;		if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return autorest.Prepare(&http.Request{},
0000000000000000000000000000000000000000;;			autorest.AsJSON(),
0000000000000000000000000000000000000000;;			autorest.AsGet(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(to.String(client.NextLink)))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualNetworkPeeringPropertiesFormat is
0000000000000000000000000000000000000000;;	type VirtualNetworkPeeringPropertiesFormat struct {
0000000000000000000000000000000000000000;;		AllowVirtualNetworkAccess *bool                      `json:"allowVirtualNetworkAccess,omitempty"`
0000000000000000000000000000000000000000;;		AllowForwardedTraffic     *bool                      `json:"allowForwardedTraffic,omitempty"`
0000000000000000000000000000000000000000;;		AllowGatewayTransit       *bool                      `json:"allowGatewayTransit,omitempty"`
0000000000000000000000000000000000000000;;		UseRemoteGateways         *bool                      `json:"useRemoteGateways,omitempty"`
0000000000000000000000000000000000000000;;		RemoteVirtualNetwork      *SubResource               `json:"remoteVirtualNetwork,omitempty"`
0000000000000000000000000000000000000000;;		PeeringState              VirtualNetworkPeeringState `json:"peeringState,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState         *string                    `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VirtualNetworkPropertiesFormat is
0000000000000000000000000000000000000000;;	type VirtualNetworkPropertiesFormat struct {
0000000000000000000000000000000000000000;;		AddressSpace           *AddressSpace            `json:"addressSpace,omitempty"`
0000000000000000000000000000000000000000;;		DhcpOptions            *DhcpOptions             `json:"dhcpOptions,omitempty"`
0000000000000000000000000000000000000000;;		Subnets                *[]Subnet                `json:"subnets,omitempty"`
0000000000000000000000000000000000000000;;		VirtualNetworkPeerings *[]VirtualNetworkPeering `json:"virtualNetworkPeerings,omitempty"`
0000000000000000000000000000000000000000;;		ResourceGUID           *string                  `json:"resourceGuid,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState      *string                  `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VpnClientConfiguration is vpnClientConfiguration for P2S client.
0000000000000000000000000000000000000000;;	type VpnClientConfiguration struct {
0000000000000000000000000000000000000000;;		VpnClientAddressPool         *AddressSpace                  `json:"vpnClientAddressPool,omitempty"`
0000000000000000000000000000000000000000;;		VpnClientRootCertificates    *[]VpnClientRootCertificate    `json:"vpnClientRootCertificates,omitempty"`
0000000000000000000000000000000000000000;;		VpnClientRevokedCertificates *[]VpnClientRevokedCertificate `json:"vpnClientRevokedCertificates,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VpnClientParameters is vpn Client Parameters for package generation
0000000000000000000000000000000000000000;;	type VpnClientParameters struct {
0000000000000000000000000000000000000000;;		ProcessorArchitecture ProcessorArchitecture `json:"processorArchitecture,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VpnClientRevokedCertificate is vPN client revoked certificate of virtual
0000000000000000000000000000000000000000;;	// network gateway.
0000000000000000000000000000000000000000;;	type VpnClientRevokedCertificate struct {
0000000000000000000000000000000000000000;;		ID                                           *string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		*VpnClientRevokedCertificatePropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Name                                         *string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Etag                                         *string `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VpnClientRevokedCertificatePropertiesFormat is properties of the revoked VPN
0000000000000000000000000000000000000000;;	// client certificate of virtual network gateway.
0000000000000000000000000000000000000000;;	type VpnClientRevokedCertificatePropertiesFormat struct {
0000000000000000000000000000000000000000;;		Thumbprint        *string `json:"thumbprint,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState *string `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VpnClientRootCertificate is vPN client root certificate of virtual network
0000000000000000000000000000000000000000;;	// gateway
0000000000000000000000000000000000000000;;	type VpnClientRootCertificate struct {
0000000000000000000000000000000000000000;;		ID                                        *string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		*VpnClientRootCertificatePropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		Name                                      *string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Etag                                      *string `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VpnClientRootCertificatePropertiesFormat is properties of SSL certificates
0000000000000000000000000000000000000000;;	// of application gateway
0000000000000000000000000000000000000000;;	type VpnClientRootCertificatePropertiesFormat struct {
0000000000000000000000000000000000000000;;		PublicCertData    *string `json:"publicCertData,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningState *string `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Watcher is network watcher in a resource group.
0000000000000000000000000000000000000000;;	type Watcher struct {
0000000000000000000000000000000000000000;;		autorest.Response        `json:"-"`
0000000000000000000000000000000000000000;;		ID                       *string             `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Name                     *string             `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Type                     *string             `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Location                 *string             `json:"location,omitempty"`
0000000000000000000000000000000000000000;;		Tags                     *map[string]*string `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Etag                     *string             `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;		*WatcherPropertiesFormat `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WatcherListResult is list of network watcher resources.
0000000000000000000000000000000000000000;;	type WatcherListResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]Watcher `json:"value,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WatcherPropertiesFormat is the network watcher properties.
0000000000000000000000000000000000000000;;	type WatcherPropertiesFormat struct {
0000000000000000000000000000000000000000;;		ProvisioningState ProvisioningState `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;	}
