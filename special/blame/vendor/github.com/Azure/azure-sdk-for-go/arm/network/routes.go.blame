0000000000000000000000000000000000000000;;	package network
6d6afa491b422a1e9d1fe39b10df70e4bf5254bf;;	
0000000000000000000000000000000000000000;;	// Copyright (c) Microsoft and contributors.  All rights reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	// http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
0000000000000000000000000000000000000000;;	// Changes may cause incorrect behavior and will be lost if the code is
0000000000000000000000000000000000000000;;	// regenerated.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/Azure/go-autorest/autorest"
0000000000000000000000000000000000000000;;		"github.com/Azure/go-autorest/autorest/azure"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RoutesClient is the composite Swagger for Network Client
0000000000000000000000000000000000000000;;	type RoutesClient struct {
0000000000000000000000000000000000000000;;		ManagementClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewRoutesClient creates an instance of the RoutesClient client.
0000000000000000000000000000000000000000;;	func NewRoutesClient(subscriptionID string) RoutesClient {
0000000000000000000000000000000000000000;;		return NewRoutesClientWithBaseURI(DefaultBaseURI, subscriptionID)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewRoutesClientWithBaseURI creates an instance of the RoutesClient client.
0000000000000000000000000000000000000000;;	func NewRoutesClientWithBaseURI(baseURI string, subscriptionID string) RoutesClient {
0000000000000000000000000000000000000000;;		return RoutesClient{NewWithBaseURI(baseURI, subscriptionID)}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateOrUpdate creates or updates a route in the specified route table. This
0000000000000000000000000000000000000000;;	// method may poll for completion. Polling can be canceled by passing the
0000000000000000000000000000000000000000;;	// cancel channel argument. The channel will be used to cancel polling and any
0000000000000000000000000000000000000000;;	// outstanding HTTP requests.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// resourceGroupName is the name of the resource group. routeTableName is the
0000000000000000000000000000000000000000;;	// name of the route table. routeName is the name of the route. routeParameters
0000000000000000000000000000000000000000;;	// is parameters supplied to the create or update route operation.
0000000000000000000000000000000000000000;;	func (client RoutesClient) CreateOrUpdate(resourceGroupName string, routeTableName string, routeName string, routeParameters Route, cancel <-chan struct{}) (<-chan Route, <-chan error) {
0000000000000000000000000000000000000000;;		resultChan := make(chan Route, 1)
0000000000000000000000000000000000000000;;		errChan := make(chan error, 1)
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			var err error
0000000000000000000000000000000000000000;;			var result Route
0000000000000000000000000000000000000000;;			defer func() {
0000000000000000000000000000000000000000;;				resultChan <- result
0000000000000000000000000000000000000000;;				errChan <- err
0000000000000000000000000000000000000000;;				close(resultChan)
0000000000000000000000000000000000000000;;				close(errChan)
0000000000000000000000000000000000000000;;			}()
0000000000000000000000000000000000000000;;			req, err := client.CreateOrUpdatePreparer(resourceGroupName, routeTableName, routeName, routeParameters, cancel)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				err = autorest.NewErrorWithError(err, "network.RoutesClient", "CreateOrUpdate", nil, "Failure preparing request")
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			resp, err := client.CreateOrUpdateSender(req)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;				err = autorest.NewErrorWithError(err, "network.RoutesClient", "CreateOrUpdate", resp, "Failure sending request")
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			result, err = client.CreateOrUpdateResponder(resp)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				err = autorest.NewErrorWithError(err, "network.RoutesClient", "CreateOrUpdate", resp, "Failure responding to request")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		return resultChan, errChan
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateOrUpdatePreparer prepares the CreateOrUpdate request.
0000000000000000000000000000000000000000;;	func (client RoutesClient) CreateOrUpdatePreparer(resourceGroupName string, routeTableName string, routeName string, routeParameters Route, cancel <-chan struct{}) (*http.Request, error) {
0000000000000000000000000000000000000000;;		pathParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"resourceGroupName": autorest.Encode("path", resourceGroupName),
0000000000000000000000000000000000000000;;			"routeName":         autorest.Encode("path", routeName),
0000000000000000000000000000000000000000;;			"routeTableName":    autorest.Encode("path", routeTableName),
0000000000000000000000000000000000000000;;			"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		const APIVersion = "2017-03-01"
0000000000000000000000000000000000000000;;		queryParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"api-version": APIVersion,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		preparer := autorest.CreatePreparer(
0000000000000000000000000000000000000000;;			autorest.AsJSON(),
0000000000000000000000000000000000000000;;			autorest.AsPut(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(client.BaseURI),
0000000000000000000000000000000000000000;;			autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeTables/{routeTableName}/routes/{routeName}", pathParameters),
0000000000000000000000000000000000000000;;			autorest.WithJSON(routeParameters),
0000000000000000000000000000000000000000;;			autorest.WithQueryParameters(queryParameters))
0000000000000000000000000000000000000000;;		return preparer.Prepare(&http.Request{Cancel: cancel})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateOrUpdateSender sends the CreateOrUpdate request. The method will close the
0000000000000000000000000000000000000000;;	// http.Response Body if it receives an error.
0000000000000000000000000000000000000000;;	func (client RoutesClient) CreateOrUpdateSender(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;		return autorest.SendWithSender(client,
0000000000000000000000000000000000000000;;			req,
0000000000000000000000000000000000000000;;			azure.DoPollForAsynchronous(client.PollingDelay))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateOrUpdateResponder handles the response to the CreateOrUpdate request. The method always
0000000000000000000000000000000000000000;;	// closes the http.Response Body.
0000000000000000000000000000000000000000;;	func (client RoutesClient) CreateOrUpdateResponder(resp *http.Response) (result Route, err error) {
0000000000000000000000000000000000000000;;		err = autorest.Respond(
0000000000000000000000000000000000000000;;			resp,
0000000000000000000000000000000000000000;;			client.ByInspecting(),
0000000000000000000000000000000000000000;;			azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated),
0000000000000000000000000000000000000000;;			autorest.ByUnmarshallingJSON(&result),
0000000000000000000000000000000000000000;;			autorest.ByClosing())
0000000000000000000000000000000000000000;;		result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Delete deletes the specified route from a route table. This method may poll
0000000000000000000000000000000000000000;;	// for completion. Polling can be canceled by passing the cancel channel
0000000000000000000000000000000000000000;;	// argument. The channel will be used to cancel polling and any outstanding
0000000000000000000000000000000000000000;;	// HTTP requests.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// resourceGroupName is the name of the resource group. routeTableName is the
0000000000000000000000000000000000000000;;	// name of the route table. routeName is the name of the route.
0000000000000000000000000000000000000000;;	func (client RoutesClient) Delete(resourceGroupName string, routeTableName string, routeName string, cancel <-chan struct{}) (<-chan autorest.Response, <-chan error) {
0000000000000000000000000000000000000000;;		resultChan := make(chan autorest.Response, 1)
0000000000000000000000000000000000000000;;		errChan := make(chan error, 1)
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			var err error
0000000000000000000000000000000000000000;;			var result autorest.Response
0000000000000000000000000000000000000000;;			defer func() {
0000000000000000000000000000000000000000;;				resultChan <- result
0000000000000000000000000000000000000000;;				errChan <- err
0000000000000000000000000000000000000000;;				close(resultChan)
0000000000000000000000000000000000000000;;				close(errChan)
0000000000000000000000000000000000000000;;			}()
0000000000000000000000000000000000000000;;			req, err := client.DeletePreparer(resourceGroupName, routeTableName, routeName, cancel)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				err = autorest.NewErrorWithError(err, "network.RoutesClient", "Delete", nil, "Failure preparing request")
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			resp, err := client.DeleteSender(req)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				result.Response = resp
0000000000000000000000000000000000000000;;				err = autorest.NewErrorWithError(err, "network.RoutesClient", "Delete", resp, "Failure sending request")
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			result, err = client.DeleteResponder(resp)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				err = autorest.NewErrorWithError(err, "network.RoutesClient", "Delete", resp, "Failure responding to request")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		return resultChan, errChan
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeletePreparer prepares the Delete request.
0000000000000000000000000000000000000000;;	func (client RoutesClient) DeletePreparer(resourceGroupName string, routeTableName string, routeName string, cancel <-chan struct{}) (*http.Request, error) {
0000000000000000000000000000000000000000;;		pathParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"resourceGroupName": autorest.Encode("path", resourceGroupName),
0000000000000000000000000000000000000000;;			"routeName":         autorest.Encode("path", routeName),
0000000000000000000000000000000000000000;;			"routeTableName":    autorest.Encode("path", routeTableName),
0000000000000000000000000000000000000000;;			"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		const APIVersion = "2017-03-01"
0000000000000000000000000000000000000000;;		queryParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"api-version": APIVersion,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		preparer := autorest.CreatePreparer(
0000000000000000000000000000000000000000;;			autorest.AsDelete(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(client.BaseURI),
0000000000000000000000000000000000000000;;			autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeTables/{routeTableName}/routes/{routeName}", pathParameters),
0000000000000000000000000000000000000000;;			autorest.WithQueryParameters(queryParameters))
0000000000000000000000000000000000000000;;		return preparer.Prepare(&http.Request{Cancel: cancel})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteSender sends the Delete request. The method will close the
0000000000000000000000000000000000000000;;	// http.Response Body if it receives an error.
0000000000000000000000000000000000000000;;	func (client RoutesClient) DeleteSender(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;		return autorest.SendWithSender(client,
0000000000000000000000000000000000000000;;			req,
0000000000000000000000000000000000000000;;			azure.DoPollForAsynchronous(client.PollingDelay))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteResponder handles the response to the Delete request. The method always
0000000000000000000000000000000000000000;;	// closes the http.Response Body.
0000000000000000000000000000000000000000;;	func (client RoutesClient) DeleteResponder(resp *http.Response) (result autorest.Response, err error) {
0000000000000000000000000000000000000000;;		err = autorest.Respond(
0000000000000000000000000000000000000000;;			resp,
0000000000000000000000000000000000000000;;			client.ByInspecting(),
0000000000000000000000000000000000000000;;			azure.WithErrorUnlessStatusCode(http.StatusAccepted, http.StatusOK, http.StatusNoContent),
0000000000000000000000000000000000000000;;			autorest.ByClosing())
0000000000000000000000000000000000000000;;		result.Response = resp
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get gets the specified route from a route table.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// resourceGroupName is the name of the resource group. routeTableName is the
0000000000000000000000000000000000000000;;	// name of the route table. routeName is the name of the route.
0000000000000000000000000000000000000000;;	func (client RoutesClient) Get(resourceGroupName string, routeTableName string, routeName string) (result Route, err error) {
0000000000000000000000000000000000000000;;		req, err := client.GetPreparer(resourceGroupName, routeTableName, routeName)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "network.RoutesClient", "Get", nil, "Failure preparing request")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := client.GetSender(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "network.RoutesClient", "Get", resp, "Failure sending request")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result, err = client.GetResponder(resp)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "network.RoutesClient", "Get", resp, "Failure responding to request")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetPreparer prepares the Get request.
0000000000000000000000000000000000000000;;	func (client RoutesClient) GetPreparer(resourceGroupName string, routeTableName string, routeName string) (*http.Request, error) {
0000000000000000000000000000000000000000;;		pathParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"resourceGroupName": autorest.Encode("path", resourceGroupName),
0000000000000000000000000000000000000000;;			"routeName":         autorest.Encode("path", routeName),
0000000000000000000000000000000000000000;;			"routeTableName":    autorest.Encode("path", routeTableName),
0000000000000000000000000000000000000000;;			"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		const APIVersion = "2017-03-01"
0000000000000000000000000000000000000000;;		queryParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"api-version": APIVersion,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		preparer := autorest.CreatePreparer(
0000000000000000000000000000000000000000;;			autorest.AsGet(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(client.BaseURI),
0000000000000000000000000000000000000000;;			autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeTables/{routeTableName}/routes/{routeName}", pathParameters),
0000000000000000000000000000000000000000;;			autorest.WithQueryParameters(queryParameters))
0000000000000000000000000000000000000000;;		return preparer.Prepare(&http.Request{})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetSender sends the Get request. The method will close the
0000000000000000000000000000000000000000;;	// http.Response Body if it receives an error.
0000000000000000000000000000000000000000;;	func (client RoutesClient) GetSender(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;		return autorest.SendWithSender(client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetResponder handles the response to the Get request. The method always
0000000000000000000000000000000000000000;;	// closes the http.Response Body.
0000000000000000000000000000000000000000;;	func (client RoutesClient) GetResponder(resp *http.Response) (result Route, err error) {
0000000000000000000000000000000000000000;;		err = autorest.Respond(
0000000000000000000000000000000000000000;;			resp,
0000000000000000000000000000000000000000;;			client.ByInspecting(),
0000000000000000000000000000000000000000;;			azure.WithErrorUnlessStatusCode(http.StatusOK),
0000000000000000000000000000000000000000;;			autorest.ByUnmarshallingJSON(&result),
0000000000000000000000000000000000000000;;			autorest.ByClosing())
0000000000000000000000000000000000000000;;		result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List gets all routes in a route table.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// resourceGroupName is the name of the resource group. routeTableName is the
0000000000000000000000000000000000000000;;	// name of the route table.
0000000000000000000000000000000000000000;;	func (client RoutesClient) List(resourceGroupName string, routeTableName string) (result RouteListResult, err error) {
0000000000000000000000000000000000000000;;		req, err := client.ListPreparer(resourceGroupName, routeTableName)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "network.RoutesClient", "List", nil, "Failure preparing request")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := client.ListSender(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "network.RoutesClient", "List", resp, "Failure sending request")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result, err = client.ListResponder(resp)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "network.RoutesClient", "List", resp, "Failure responding to request")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListPreparer prepares the List request.
0000000000000000000000000000000000000000;;	func (client RoutesClient) ListPreparer(resourceGroupName string, routeTableName string) (*http.Request, error) {
0000000000000000000000000000000000000000;;		pathParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"resourceGroupName": autorest.Encode("path", resourceGroupName),
0000000000000000000000000000000000000000;;			"routeTableName":    autorest.Encode("path", routeTableName),
0000000000000000000000000000000000000000;;			"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		const APIVersion = "2017-03-01"
0000000000000000000000000000000000000000;;		queryParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"api-version": APIVersion,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		preparer := autorest.CreatePreparer(
0000000000000000000000000000000000000000;;			autorest.AsGet(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(client.BaseURI),
0000000000000000000000000000000000000000;;			autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeTables/{routeTableName}/routes", pathParameters),
0000000000000000000000000000000000000000;;			autorest.WithQueryParameters(queryParameters))
0000000000000000000000000000000000000000;;		return preparer.Prepare(&http.Request{})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListSender sends the List request. The method will close the
0000000000000000000000000000000000000000;;	// http.Response Body if it receives an error.
0000000000000000000000000000000000000000;;	func (client RoutesClient) ListSender(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;		return autorest.SendWithSender(client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListResponder handles the response to the List request. The method always
0000000000000000000000000000000000000000;;	// closes the http.Response Body.
0000000000000000000000000000000000000000;;	func (client RoutesClient) ListResponder(resp *http.Response) (result RouteListResult, err error) {
0000000000000000000000000000000000000000;;		err = autorest.Respond(
0000000000000000000000000000000000000000;;			resp,
0000000000000000000000000000000000000000;;			client.ByInspecting(),
0000000000000000000000000000000000000000;;			azure.WithErrorUnlessStatusCode(http.StatusOK),
0000000000000000000000000000000000000000;;			autorest.ByUnmarshallingJSON(&result),
0000000000000000000000000000000000000000;;			autorest.ByClosing())
0000000000000000000000000000000000000000;;		result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListNextResults retrieves the next set of results, if any.
0000000000000000000000000000000000000000;;	func (client RoutesClient) ListNextResults(lastResults RouteListResult) (result RouteListResult, err error) {
0000000000000000000000000000000000000000;;		req, err := lastResults.RouteListResultPreparer()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return result, autorest.NewErrorWithError(err, "network.RoutesClient", "List", nil, "Failure preparing next results request")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if req == nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := client.ListSender(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;			return result, autorest.NewErrorWithError(err, "network.RoutesClient", "List", resp, "Failure sending next results request")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result, err = client.ListResponder(resp)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "network.RoutesClient", "List", resp, "Failure responding to next results request")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
