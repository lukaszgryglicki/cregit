0000000000000000000000000000000000000000;;	package storage
bf119e8337b916a81932389e376d77629c43bfe3;;	
0000000000000000000000000000000000000000;;	// Copyright (c) Microsoft and contributors.  All rights reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	// http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
0000000000000000000000000000000000000000;;	// Changes may cause incorrect behavior and will be lost if the code is
0000000000000000000000000000000000000000;;	// regenerated.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/Azure/go-autorest/autorest"
0000000000000000000000000000000000000000;;		"github.com/Azure/go-autorest/autorest/date"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AccessTier enumerates the values for access tier.
0000000000000000000000000000000000000000;;	type AccessTier string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Cool specifies the cool state for access tier.
0000000000000000000000000000000000000000;;		Cool AccessTier = "Cool"
0000000000000000000000000000000000000000;;		// Hot specifies the hot state for access tier.
0000000000000000000000000000000000000000;;		Hot AccessTier = "Hot"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AccountStatus enumerates the values for account status.
0000000000000000000000000000000000000000;;	type AccountStatus string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Available specifies the available state for account status.
0000000000000000000000000000000000000000;;		Available AccountStatus = "available"
0000000000000000000000000000000000000000;;		// Unavailable specifies the unavailable state for account status.
0000000000000000000000000000000000000000;;		Unavailable AccountStatus = "unavailable"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HTTPProtocol enumerates the values for http protocol.
0000000000000000000000000000000000000000;;	type HTTPProtocol string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// HTTPS specifies the https state for http protocol.
0000000000000000000000000000000000000000;;		HTTPS HTTPProtocol = "https"
0000000000000000000000000000000000000000;;		// Httpshttp specifies the httpshttp state for http protocol.
0000000000000000000000000000000000000000;;		Httpshttp HTTPProtocol = "https,http"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// KeyPermission enumerates the values for key permission.
0000000000000000000000000000000000000000;;	type KeyPermission string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Full specifies the full state for key permission.
0000000000000000000000000000000000000000;;		Full KeyPermission = "Full"
0000000000000000000000000000000000000000;;		// Read specifies the read state for key permission.
0000000000000000000000000000000000000000;;		Read KeyPermission = "Read"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Kind enumerates the values for kind.
0000000000000000000000000000000000000000;;	type Kind string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// BlobStorage specifies the blob storage state for kind.
0000000000000000000000000000000000000000;;		BlobStorage Kind = "BlobStorage"
0000000000000000000000000000000000000000;;		// Storage specifies the storage state for kind.
0000000000000000000000000000000000000000;;		Storage Kind = "Storage"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Permissions enumerates the values for permissions.
0000000000000000000000000000000000000000;;	type Permissions string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// A specifies the a state for permissions.
0000000000000000000000000000000000000000;;		A Permissions = "a"
0000000000000000000000000000000000000000;;		// C specifies the c state for permissions.
0000000000000000000000000000000000000000;;		C Permissions = "c"
0000000000000000000000000000000000000000;;		// D specifies the d state for permissions.
0000000000000000000000000000000000000000;;		D Permissions = "d"
0000000000000000000000000000000000000000;;		// L specifies the l state for permissions.
0000000000000000000000000000000000000000;;		L Permissions = "l"
0000000000000000000000000000000000000000;;		// P specifies the p state for permissions.
0000000000000000000000000000000000000000;;		P Permissions = "p"
0000000000000000000000000000000000000000;;		// R specifies the r state for permissions.
0000000000000000000000000000000000000000;;		R Permissions = "r"
0000000000000000000000000000000000000000;;		// U specifies the u state for permissions.
0000000000000000000000000000000000000000;;		U Permissions = "u"
0000000000000000000000000000000000000000;;		// W specifies the w state for permissions.
0000000000000000000000000000000000000000;;		W Permissions = "w"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Permissions1 enumerates the values for permissions 1.
0000000000000000000000000000000000000000;;	type Permissions1 string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Permissions1A specifies the permissions 1a state for permissions 1.
0000000000000000000000000000000000000000;;		Permissions1A Permissions1 = "a"
0000000000000000000000000000000000000000;;		// Permissions1C specifies the permissions 1c state for permissions 1.
0000000000000000000000000000000000000000;;		Permissions1C Permissions1 = "c"
0000000000000000000000000000000000000000;;		// Permissions1D specifies the permissions 1d state for permissions 1.
0000000000000000000000000000000000000000;;		Permissions1D Permissions1 = "d"
0000000000000000000000000000000000000000;;		// Permissions1L specifies the permissions 1l state for permissions 1.
0000000000000000000000000000000000000000;;		Permissions1L Permissions1 = "l"
0000000000000000000000000000000000000000;;		// Permissions1P specifies the permissions 1p state for permissions 1.
0000000000000000000000000000000000000000;;		Permissions1P Permissions1 = "p"
0000000000000000000000000000000000000000;;		// Permissions1R specifies the permissions 1r state for permissions 1.
0000000000000000000000000000000000000000;;		Permissions1R Permissions1 = "r"
0000000000000000000000000000000000000000;;		// Permissions1U specifies the permissions 1u state for permissions 1.
0000000000000000000000000000000000000000;;		Permissions1U Permissions1 = "u"
0000000000000000000000000000000000000000;;		// Permissions1W specifies the permissions 1w state for permissions 1.
0000000000000000000000000000000000000000;;		Permissions1W Permissions1 = "w"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ProvisioningState enumerates the values for provisioning state.
0000000000000000000000000000000000000000;;	type ProvisioningState string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Creating specifies the creating state for provisioning state.
0000000000000000000000000000000000000000;;		Creating ProvisioningState = "Creating"
0000000000000000000000000000000000000000;;		// ResolvingDNS specifies the resolving dns state for provisioning state.
0000000000000000000000000000000000000000;;		ResolvingDNS ProvisioningState = "ResolvingDNS"
0000000000000000000000000000000000000000;;		// Succeeded specifies the succeeded state for provisioning state.
0000000000000000000000000000000000000000;;		Succeeded ProvisioningState = "Succeeded"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Reason enumerates the values for reason.
0000000000000000000000000000000000000000;;	type Reason string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// AccountNameInvalid specifies the account name invalid state for reason.
0000000000000000000000000000000000000000;;		AccountNameInvalid Reason = "AccountNameInvalid"
0000000000000000000000000000000000000000;;		// AlreadyExists specifies the already exists state for reason.
0000000000000000000000000000000000000000;;		AlreadyExists Reason = "AlreadyExists"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResourceEnum enumerates the values for resource enum.
0000000000000000000000000000000000000000;;	type ResourceEnum string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// ResourceEnumB specifies the resource enum b state for resource enum.
0000000000000000000000000000000000000000;;		ResourceEnumB ResourceEnum = "b"
0000000000000000000000000000000000000000;;		// ResourceEnumC specifies the resource enum c state for resource enum.
0000000000000000000000000000000000000000;;		ResourceEnumC ResourceEnum = "c"
0000000000000000000000000000000000000000;;		// ResourceEnumF specifies the resource enum f state for resource enum.
0000000000000000000000000000000000000000;;		ResourceEnumF ResourceEnum = "f"
0000000000000000000000000000000000000000;;		// ResourceEnumS specifies the resource enum s state for resource enum.
0000000000000000000000000000000000000000;;		ResourceEnumS ResourceEnum = "s"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResourceTypes enumerates the values for resource types.
0000000000000000000000000000000000000000;;	type ResourceTypes string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// ResourceTypesC specifies the resource types c state for resource types.
0000000000000000000000000000000000000000;;		ResourceTypesC ResourceTypes = "c"
0000000000000000000000000000000000000000;;		// ResourceTypesO specifies the resource types o state for resource types.
0000000000000000000000000000000000000000;;		ResourceTypesO ResourceTypes = "o"
0000000000000000000000000000000000000000;;		// ResourceTypesS specifies the resource types s state for resource types.
0000000000000000000000000000000000000000;;		ResourceTypesS ResourceTypes = "s"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Services enumerates the values for services.
0000000000000000000000000000000000000000;;	type Services string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// B specifies the b state for services.
0000000000000000000000000000000000000000;;		B Services = "b"
0000000000000000000000000000000000000000;;		// F specifies the f state for services.
0000000000000000000000000000000000000000;;		F Services = "f"
0000000000000000000000000000000000000000;;		// Q specifies the q state for services.
0000000000000000000000000000000000000000;;		Q Services = "q"
0000000000000000000000000000000000000000;;		// T specifies the t state for services.
0000000000000000000000000000000000000000;;		T Services = "t"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SkuName enumerates the values for sku name.
0000000000000000000000000000000000000000;;	type SkuName string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// PremiumLRS specifies the premium lrs state for sku name.
0000000000000000000000000000000000000000;;		PremiumLRS SkuName = "Premium_LRS"
0000000000000000000000000000000000000000;;		// StandardGRS specifies the standard grs state for sku name.
0000000000000000000000000000000000000000;;		StandardGRS SkuName = "Standard_GRS"
0000000000000000000000000000000000000000;;		// StandardLRS specifies the standard lrs state for sku name.
0000000000000000000000000000000000000000;;		StandardLRS SkuName = "Standard_LRS"
0000000000000000000000000000000000000000;;		// StandardRAGRS specifies the standard ragrs state for sku name.
0000000000000000000000000000000000000000;;		StandardRAGRS SkuName = "Standard_RAGRS"
0000000000000000000000000000000000000000;;		// StandardZRS specifies the standard zrs state for sku name.
0000000000000000000000000000000000000000;;		StandardZRS SkuName = "Standard_ZRS"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SkuTier enumerates the values for sku tier.
0000000000000000000000000000000000000000;;	type SkuTier string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Premium specifies the premium state for sku tier.
0000000000000000000000000000000000000000;;		Premium SkuTier = "Premium"
0000000000000000000000000000000000000000;;		// Standard specifies the standard state for sku tier.
0000000000000000000000000000000000000000;;		Standard SkuTier = "Standard"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UsageUnit enumerates the values for usage unit.
0000000000000000000000000000000000000000;;	type UsageUnit string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Bytes specifies the bytes state for usage unit.
0000000000000000000000000000000000000000;;		Bytes UsageUnit = "Bytes"
0000000000000000000000000000000000000000;;		// BytesPerSecond specifies the bytes per second state for usage unit.
0000000000000000000000000000000000000000;;		BytesPerSecond UsageUnit = "BytesPerSecond"
0000000000000000000000000000000000000000;;		// Count specifies the count state for usage unit.
0000000000000000000000000000000000000000;;		Count UsageUnit = "Count"
0000000000000000000000000000000000000000;;		// CountsPerSecond specifies the counts per second state for usage unit.
0000000000000000000000000000000000000000;;		CountsPerSecond UsageUnit = "CountsPerSecond"
0000000000000000000000000000000000000000;;		// Percent specifies the percent state for usage unit.
0000000000000000000000000000000000000000;;		Percent UsageUnit = "Percent"
0000000000000000000000000000000000000000;;		// Seconds specifies the seconds state for usage unit.
0000000000000000000000000000000000000000;;		Seconds UsageUnit = "Seconds"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Account is the storage account.
0000000000000000000000000000000000000000;;	type Account struct {
0000000000000000000000000000000000000000;;		autorest.Response  `json:"-"`
0000000000000000000000000000000000000000;;		ID                 *string             `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Name               *string             `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Type               *string             `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Location           *string             `json:"location,omitempty"`
0000000000000000000000000000000000000000;;		Tags               *map[string]*string `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		Sku                *Sku                `json:"sku,omitempty"`
0000000000000000000000000000000000000000;;		Kind               Kind                `json:"kind,omitempty"`
0000000000000000000000000000000000000000;;		*AccountProperties `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AccountCheckNameAvailabilityParameters is the parameters used to check the
0000000000000000000000000000000000000000;;	// availabity of the storage account name.
0000000000000000000000000000000000000000;;	type AccountCheckNameAvailabilityParameters struct {
0000000000000000000000000000000000000000;;		Name *string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Type *string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AccountCreateParameters is the parameters used when creating a storage
0000000000000000000000000000000000000000;;	// account.
0000000000000000000000000000000000000000;;	type AccountCreateParameters struct {
0000000000000000000000000000000000000000;;		Sku                                *Sku                `json:"sku,omitempty"`
0000000000000000000000000000000000000000;;		Kind                               Kind                `json:"kind,omitempty"`
0000000000000000000000000000000000000000;;		Location                           *string             `json:"location,omitempty"`
0000000000000000000000000000000000000000;;		Tags                               *map[string]*string `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		*AccountPropertiesCreateParameters `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AccountKey is an access key for the storage account.
0000000000000000000000000000000000000000;;	type AccountKey struct {
0000000000000000000000000000000000000000;;		KeyName     *string       `json:"keyName,omitempty"`
0000000000000000000000000000000000000000;;		Value       *string       `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		Permissions KeyPermission `json:"permissions,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AccountListKeysResult is the response from the ListKeys operation.
0000000000000000000000000000000000000000;;	type AccountListKeysResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Keys              *[]AccountKey `json:"keys,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AccountListResult is the response from the List Storage Accounts operation.
0000000000000000000000000000000000000000;;	type AccountListResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]Account `json:"value,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AccountProperties is properties of the storage account.
0000000000000000000000000000000000000000;;	type AccountProperties struct {
0000000000000000000000000000000000000000;;		ProvisioningState      ProvisioningState `json:"provisioningState,omitempty"`
0000000000000000000000000000000000000000;;		PrimaryEndpoints       *Endpoints        `json:"primaryEndpoints,omitempty"`
0000000000000000000000000000000000000000;;		PrimaryLocation        *string           `json:"primaryLocation,omitempty"`
0000000000000000000000000000000000000000;;		StatusOfPrimary        AccountStatus     `json:"statusOfPrimary,omitempty"`
0000000000000000000000000000000000000000;;		LastGeoFailoverTime    *date.Time        `json:"lastGeoFailoverTime,omitempty"`
0000000000000000000000000000000000000000;;		SecondaryLocation      *string           `json:"secondaryLocation,omitempty"`
0000000000000000000000000000000000000000;;		StatusOfSecondary      AccountStatus     `json:"statusOfSecondary,omitempty"`
0000000000000000000000000000000000000000;;		CreationTime           *date.Time        `json:"creationTime,omitempty"`
0000000000000000000000000000000000000000;;		CustomDomain           *CustomDomain     `json:"customDomain,omitempty"`
0000000000000000000000000000000000000000;;		SecondaryEndpoints     *Endpoints        `json:"secondaryEndpoints,omitempty"`
0000000000000000000000000000000000000000;;		Encryption             *Encryption       `json:"encryption,omitempty"`
0000000000000000000000000000000000000000;;		AccessTier             AccessTier        `json:"accessTier,omitempty"`
0000000000000000000000000000000000000000;;		EnableHTTPSTrafficOnly *bool             `json:"supportsHttpsTrafficOnly,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AccountPropertiesCreateParameters is the parameters used to create the
0000000000000000000000000000000000000000;;	// storage account.
0000000000000000000000000000000000000000;;	type AccountPropertiesCreateParameters struct {
0000000000000000000000000000000000000000;;		CustomDomain           *CustomDomain `json:"customDomain,omitempty"`
0000000000000000000000000000000000000000;;		Encryption             *Encryption   `json:"encryption,omitempty"`
0000000000000000000000000000000000000000;;		AccessTier             AccessTier    `json:"accessTier,omitempty"`
0000000000000000000000000000000000000000;;		EnableHTTPSTrafficOnly *bool         `json:"supportsHttpsTrafficOnly,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AccountPropertiesUpdateParameters is the parameters used when updating a
0000000000000000000000000000000000000000;;	// storage account.
0000000000000000000000000000000000000000;;	type AccountPropertiesUpdateParameters struct {
0000000000000000000000000000000000000000;;		CustomDomain           *CustomDomain `json:"customDomain,omitempty"`
0000000000000000000000000000000000000000;;		Encryption             *Encryption   `json:"encryption,omitempty"`
0000000000000000000000000000000000000000;;		AccessTier             AccessTier    `json:"accessTier,omitempty"`
0000000000000000000000000000000000000000;;		EnableHTTPSTrafficOnly *bool         `json:"supportsHttpsTrafficOnly,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AccountRegenerateKeyParameters is the parameters used to regenerate the
0000000000000000000000000000000000000000;;	// storage account key.
0000000000000000000000000000000000000000;;	type AccountRegenerateKeyParameters struct {
0000000000000000000000000000000000000000;;		KeyName *string `json:"keyName,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AccountSasParameters is the parameters to list SAS credentials of a storage
0000000000000000000000000000000000000000;;	// account.
0000000000000000000000000000000000000000;;	type AccountSasParameters struct {
0000000000000000000000000000000000000000;;		Services               Services      `json:"signedServices,omitempty"`
0000000000000000000000000000000000000000;;		ResourceTypes          ResourceTypes `json:"signedResourceTypes,omitempty"`
0000000000000000000000000000000000000000;;		Permissions            Permissions   `json:"signedPermission,omitempty"`
0000000000000000000000000000000000000000;;		IPAddressOrRange       *string       `json:"signedIp,omitempty"`
0000000000000000000000000000000000000000;;		Protocols              HTTPProtocol  `json:"signedProtocol,omitempty"`
0000000000000000000000000000000000000000;;		SharedAccessStartTime  *date.Time    `json:"signedStart,omitempty"`
0000000000000000000000000000000000000000;;		SharedAccessExpiryTime *date.Time    `json:"signedExpiry,omitempty"`
0000000000000000000000000000000000000000;;		KeyToSign              *string       `json:"keyToSign,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AccountUpdateParameters is the parameters that can be provided when updating
0000000000000000000000000000000000000000;;	// the storage account properties.
0000000000000000000000000000000000000000;;	type AccountUpdateParameters struct {
0000000000000000000000000000000000000000;;		Sku                                *Sku                `json:"sku,omitempty"`
0000000000000000000000000000000000000000;;		Tags                               *map[string]*string `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;		*AccountPropertiesUpdateParameters `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CheckNameAvailabilityResult is the CheckNameAvailability operation response.
0000000000000000000000000000000000000000;;	type CheckNameAvailabilityResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		NameAvailable     *bool   `json:"nameAvailable,omitempty"`
0000000000000000000000000000000000000000;;		Reason            Reason  `json:"reason,omitempty"`
0000000000000000000000000000000000000000;;		Message           *string `json:"message,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CustomDomain is the custom domain assigned to this storage account. This can
0000000000000000000000000000000000000000;;	// be set via Update.
0000000000000000000000000000000000000000;;	type CustomDomain struct {
0000000000000000000000000000000000000000;;		Name         *string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		UseSubDomain *bool   `json:"useSubDomain,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Encryption is the encryption settings on the storage account.
0000000000000000000000000000000000000000;;	type Encryption struct {
0000000000000000000000000000000000000000;;		Services  *EncryptionServices `json:"services,omitempty"`
0000000000000000000000000000000000000000;;		KeySource *string             `json:"keySource,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EncryptionService is a service that allows server-side encryption to be
0000000000000000000000000000000000000000;;	// used.
0000000000000000000000000000000000000000;;	type EncryptionService struct {
0000000000000000000000000000000000000000;;		Enabled         *bool      `json:"enabled,omitempty"`
0000000000000000000000000000000000000000;;		LastEnabledTime *date.Time `json:"lastEnabledTime,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EncryptionServices is a list of services that support encryption.
0000000000000000000000000000000000000000;;	type EncryptionServices struct {
0000000000000000000000000000000000000000;;		Blob  *EncryptionService `json:"blob,omitempty"`
0000000000000000000000000000000000000000;;		File  *EncryptionService `json:"file,omitempty"`
0000000000000000000000000000000000000000;;		Table *EncryptionService `json:"table,omitempty"`
0000000000000000000000000000000000000000;;		Queue *EncryptionService `json:"queue,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Endpoints is the URIs that are used to perform a retrieval of a public blob,
0000000000000000000000000000000000000000;;	// queue, or table object.
0000000000000000000000000000000000000000;;	type Endpoints struct {
0000000000000000000000000000000000000000;;		Blob  *string `json:"blob,omitempty"`
0000000000000000000000000000000000000000;;		Queue *string `json:"queue,omitempty"`
0000000000000000000000000000000000000000;;		Table *string `json:"table,omitempty"`
0000000000000000000000000000000000000000;;		File  *string `json:"file,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListAccountSasResponse is the List SAS credentials operation response.
0000000000000000000000000000000000000000;;	type ListAccountSasResponse struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		AccountSasToken   *string `json:"accountSasToken,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListServiceSasResponse is the List service SAS credentials operation
0000000000000000000000000000000000000000;;	// response.
0000000000000000000000000000000000000000;;	type ListServiceSasResponse struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		ServiceSasToken   *string `json:"serviceSasToken,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Resource is describes a storage resource.
0000000000000000000000000000000000000000;;	type Resource struct {
0000000000000000000000000000000000000000;;		ID       *string             `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Name     *string             `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Type     *string             `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Location *string             `json:"location,omitempty"`
0000000000000000000000000000000000000000;;		Tags     *map[string]*string `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ServiceSasParameters is the parameters to list service SAS credentials of a
0000000000000000000000000000000000000000;;	// speicific resource.
0000000000000000000000000000000000000000;;	type ServiceSasParameters struct {
0000000000000000000000000000000000000000;;		CanonicalizedResource  *string      `json:"canonicalizedResource,omitempty"`
0000000000000000000000000000000000000000;;		Resource               Resource     `json:"signedResource,omitempty"`
0000000000000000000000000000000000000000;;		Permissions            Permissions  `json:"signedPermission,omitempty"`
0000000000000000000000000000000000000000;;		IPAddressOrRange       *string      `json:"signedIp,omitempty"`
0000000000000000000000000000000000000000;;		Protocols              HTTPProtocol `json:"signedProtocol,omitempty"`
0000000000000000000000000000000000000000;;		SharedAccessStartTime  *date.Time   `json:"signedStart,omitempty"`
0000000000000000000000000000000000000000;;		SharedAccessExpiryTime *date.Time   `json:"signedExpiry,omitempty"`
0000000000000000000000000000000000000000;;		Identifier             *string      `json:"signedIdentifier,omitempty"`
0000000000000000000000000000000000000000;;		PartitionKeyStart      *string      `json:"startPk,omitempty"`
0000000000000000000000000000000000000000;;		PartitionKeyEnd        *string      `json:"endPk,omitempty"`
0000000000000000000000000000000000000000;;		RowKeyStart            *string      `json:"startRk,omitempty"`
0000000000000000000000000000000000000000;;		RowKeyEnd              *string      `json:"endRk,omitempty"`
0000000000000000000000000000000000000000;;		KeyToSign              *string      `json:"keyToSign,omitempty"`
0000000000000000000000000000000000000000;;		CacheControl           *string      `json:"rscc,omitempty"`
0000000000000000000000000000000000000000;;		ContentDisposition     *string      `json:"rscd,omitempty"`
0000000000000000000000000000000000000000;;		ContentEncoding        *string      `json:"rsce,omitempty"`
0000000000000000000000000000000000000000;;		ContentLanguage        *string      `json:"rscl,omitempty"`
0000000000000000000000000000000000000000;;		ContentType            *string      `json:"rsct,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Sku is the SKU of the storage account.
0000000000000000000000000000000000000000;;	type Sku struct {
0000000000000000000000000000000000000000;;		Name SkuName `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Tier SkuTier `json:"tier,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Usage is describes Storage Resource Usage.
0000000000000000000000000000000000000000;;	type Usage struct {
0000000000000000000000000000000000000000;;		Unit         UsageUnit  `json:"unit,omitempty"`
0000000000000000000000000000000000000000;;		CurrentValue *int32     `json:"currentValue,omitempty"`
0000000000000000000000000000000000000000;;		Limit        *int32     `json:"limit,omitempty"`
0000000000000000000000000000000000000000;;		Name         *UsageName `json:"name,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UsageListResult is the response from the List Usages operation.
0000000000000000000000000000000000000000;;	type UsageListResult struct {
0000000000000000000000000000000000000000;;		autorest.Response `json:"-"`
0000000000000000000000000000000000000000;;		Value             *[]Usage `json:"value,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UsageName is the usage names that can be used; currently limited to
0000000000000000000000000000000000000000;;	// StorageAccount.
0000000000000000000000000000000000000000;;	type UsageName struct {
0000000000000000000000000000000000000000;;		Value          *string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;		LocalizedValue *string `json:"localizedValue,omitempty"`
0000000000000000000000000000000000000000;;	}
