0000000000000000000000000000000000000000;;	package storage
bf119e8337b916a81932389e376d77629c43bfe3;;	
0000000000000000000000000000000000000000;;	// Copyright (c) Microsoft and contributors.  All rights reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	// http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
0000000000000000000000000000000000000000;;	// Changes may cause incorrect behavior and will be lost if the code is
0000000000000000000000000000000000000000;;	// regenerated.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/Azure/go-autorest/autorest"
0000000000000000000000000000000000000000;;		"github.com/Azure/go-autorest/autorest/azure"
0000000000000000000000000000000000000000;;		"github.com/Azure/go-autorest/autorest/validation"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AccountsClient is the the Azure Storage Management API.
0000000000000000000000000000000000000000;;	type AccountsClient struct {
0000000000000000000000000000000000000000;;		ManagementClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewAccountsClient creates an instance of the AccountsClient client.
0000000000000000000000000000000000000000;;	func NewAccountsClient(subscriptionID string) AccountsClient {
0000000000000000000000000000000000000000;;		return NewAccountsClientWithBaseURI(DefaultBaseURI, subscriptionID)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewAccountsClientWithBaseURI creates an instance of the AccountsClient
0000000000000000000000000000000000000000;;	// client.
0000000000000000000000000000000000000000;;	func NewAccountsClientWithBaseURI(baseURI string, subscriptionID string) AccountsClient {
0000000000000000000000000000000000000000;;		return AccountsClient{NewWithBaseURI(baseURI, subscriptionID)}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CheckNameAvailability checks that the storage account name is valid and is
0000000000000000000000000000000000000000;;	// not already in use.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// accountName is the name of the storage account within the specified resource
0000000000000000000000000000000000000000;;	// group. Storage account names must be between 3 and 24 characters in length
0000000000000000000000000000000000000000;;	// and use numbers and lower-case letters only.
0000000000000000000000000000000000000000;;	func (client AccountsClient) CheckNameAvailability(accountName AccountCheckNameAvailabilityParameters) (result CheckNameAvailabilityResult, err error) {
0000000000000000000000000000000000000000;;		if err := validation.Validate([]validation.Validation{
0000000000000000000000000000000000000000;;			{TargetValue: accountName,
0000000000000000000000000000000000000000;;				Constraints: []validation.Constraint{{Target: "accountName.Name", Name: validation.Null, Rule: true, Chain: nil},
0000000000000000000000000000000000000000;;					{Target: "accountName.Type", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
0000000000000000000000000000000000000000;;			return result, validation.NewErrorWithValidationError(err, "storage.AccountsClient", "CheckNameAvailability")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req, err := client.CheckNameAvailabilityPreparer(accountName)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "storage.AccountsClient", "CheckNameAvailability", nil, "Failure preparing request")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := client.CheckNameAvailabilitySender(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "storage.AccountsClient", "CheckNameAvailability", resp, "Failure sending request")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result, err = client.CheckNameAvailabilityResponder(resp)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "storage.AccountsClient", "CheckNameAvailability", resp, "Failure responding to request")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CheckNameAvailabilityPreparer prepares the CheckNameAvailability request.
0000000000000000000000000000000000000000;;	func (client AccountsClient) CheckNameAvailabilityPreparer(accountName AccountCheckNameAvailabilityParameters) (*http.Request, error) {
0000000000000000000000000000000000000000;;		pathParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"subscriptionId": autorest.Encode("path", client.SubscriptionID),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		const APIVersion = "2016-12-01"
0000000000000000000000000000000000000000;;		queryParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"api-version": APIVersion,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		preparer := autorest.CreatePreparer(
0000000000000000000000000000000000000000;;			autorest.AsJSON(),
0000000000000000000000000000000000000000;;			autorest.AsPost(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(client.BaseURI),
0000000000000000000000000000000000000000;;			autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.Storage/checkNameAvailability", pathParameters),
0000000000000000000000000000000000000000;;			autorest.WithJSON(accountName),
0000000000000000000000000000000000000000;;			autorest.WithQueryParameters(queryParameters))
0000000000000000000000000000000000000000;;		return preparer.Prepare(&http.Request{})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CheckNameAvailabilitySender sends the CheckNameAvailability request. The method will close the
0000000000000000000000000000000000000000;;	// http.Response Body if it receives an error.
0000000000000000000000000000000000000000;;	func (client AccountsClient) CheckNameAvailabilitySender(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;		return autorest.SendWithSender(client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CheckNameAvailabilityResponder handles the response to the CheckNameAvailability request. The method always
0000000000000000000000000000000000000000;;	// closes the http.Response Body.
0000000000000000000000000000000000000000;;	func (client AccountsClient) CheckNameAvailabilityResponder(resp *http.Response) (result CheckNameAvailabilityResult, err error) {
0000000000000000000000000000000000000000;;		err = autorest.Respond(
0000000000000000000000000000000000000000;;			resp,
0000000000000000000000000000000000000000;;			client.ByInspecting(),
0000000000000000000000000000000000000000;;			azure.WithErrorUnlessStatusCode(http.StatusOK),
0000000000000000000000000000000000000000;;			autorest.ByUnmarshallingJSON(&result),
0000000000000000000000000000000000000000;;			autorest.ByClosing())
0000000000000000000000000000000000000000;;		result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create asynchronously creates a new storage account with the specified
0000000000000000000000000000000000000000;;	// parameters. If an account is already created and a subsequent create request
0000000000000000000000000000000000000000;;	// is issued with different properties, the account properties will be updated.
0000000000000000000000000000000000000000;;	// If an account is already created and a subsequent create or update request
0000000000000000000000000000000000000000;;	// is issued with the exact same set of properties, the request will succeed.
0000000000000000000000000000000000000000;;	// This method may poll for completion. Polling can be canceled by passing the
0000000000000000000000000000000000000000;;	// cancel channel argument. The channel will be used to cancel polling and any
0000000000000000000000000000000000000000;;	// outstanding HTTP requests.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// resourceGroupName is the name of the resource group within the user's
0000000000000000000000000000000000000000;;	// subscription. The name is case insensitive. accountName is the name of the
0000000000000000000000000000000000000000;;	// storage account within the specified resource group. Storage account names
0000000000000000000000000000000000000000;;	// must be between 3 and 24 characters in length and use numbers and lower-case
0000000000000000000000000000000000000000;;	// letters only. parameters is the parameters to provide for the created
0000000000000000000000000000000000000000;;	// account.
0000000000000000000000000000000000000000;;	func (client AccountsClient) Create(resourceGroupName string, accountName string, parameters AccountCreateParameters, cancel <-chan struct{}) (<-chan Account, <-chan error) {
0000000000000000000000000000000000000000;;		resultChan := make(chan Account, 1)
0000000000000000000000000000000000000000;;		errChan := make(chan error, 1)
0000000000000000000000000000000000000000;;		if err := validation.Validate([]validation.Validation{
0000000000000000000000000000000000000000;;			{TargetValue: resourceGroupName,
0000000000000000000000000000000000000000;;				Constraints: []validation.Constraint{{Target: "resourceGroupName", Name: validation.MaxLength, Rule: 90, Chain: nil},
0000000000000000000000000000000000000000;;					{Target: "resourceGroupName", Name: validation.MinLength, Rule: 1, Chain: nil},
0000000000000000000000000000000000000000;;					{Target: "resourceGroupName", Name: validation.Pattern, Rule: `^[-\w\._\(\)]+$`, Chain: nil}}},
0000000000000000000000000000000000000000;;			{TargetValue: accountName,
0000000000000000000000000000000000000000;;				Constraints: []validation.Constraint{{Target: "accountName", Name: validation.MaxLength, Rule: 24, Chain: nil},
0000000000000000000000000000000000000000;;					{Target: "accountName", Name: validation.MinLength, Rule: 3, Chain: nil}}},
0000000000000000000000000000000000000000;;			{TargetValue: parameters,
0000000000000000000000000000000000000000;;				Constraints: []validation.Constraint{{Target: "parameters.Sku", Name: validation.Null, Rule: true, Chain: nil},
0000000000000000000000000000000000000000;;					{Target: "parameters.Location", Name: validation.Null, Rule: true, Chain: nil},
0000000000000000000000000000000000000000;;					{Target: "parameters.AccountPropertiesCreateParameters", Name: validation.Null, Rule: false,
0000000000000000000000000000000000000000;;						Chain: []validation.Constraint{{Target: "parameters.AccountPropertiesCreateParameters.CustomDomain", Name: validation.Null, Rule: false,
0000000000000000000000000000000000000000;;							Chain: []validation.Constraint{{Target: "parameters.AccountPropertiesCreateParameters.CustomDomain.Name", Name: validation.Null, Rule: true, Chain: nil}}},
0000000000000000000000000000000000000000;;							{Target: "parameters.AccountPropertiesCreateParameters.Encryption", Name: validation.Null, Rule: false,
0000000000000000000000000000000000000000;;								Chain: []validation.Constraint{{Target: "parameters.AccountPropertiesCreateParameters.Encryption.KeySource", Name: validation.Null, Rule: true, Chain: nil}}},
0000000000000000000000000000000000000000;;						}}}}}); err != nil {
0000000000000000000000000000000000000000;;			errChan <- validation.NewErrorWithValidationError(err, "storage.AccountsClient", "Create")
0000000000000000000000000000000000000000;;			close(errChan)
0000000000000000000000000000000000000000;;			close(resultChan)
0000000000000000000000000000000000000000;;			return resultChan, errChan
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			var err error
0000000000000000000000000000000000000000;;			var result Account
0000000000000000000000000000000000000000;;			defer func() {
0000000000000000000000000000000000000000;;				resultChan <- result
0000000000000000000000000000000000000000;;				errChan <- err
0000000000000000000000000000000000000000;;				close(resultChan)
0000000000000000000000000000000000000000;;				close(errChan)
0000000000000000000000000000000000000000;;			}()
0000000000000000000000000000000000000000;;			req, err := client.CreatePreparer(resourceGroupName, accountName, parameters, cancel)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				err = autorest.NewErrorWithError(err, "storage.AccountsClient", "Create", nil, "Failure preparing request")
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			resp, err := client.CreateSender(req)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;				err = autorest.NewErrorWithError(err, "storage.AccountsClient", "Create", resp, "Failure sending request")
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			result, err = client.CreateResponder(resp)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				err = autorest.NewErrorWithError(err, "storage.AccountsClient", "Create", resp, "Failure responding to request")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		return resultChan, errChan
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreatePreparer prepares the Create request.
0000000000000000000000000000000000000000;;	func (client AccountsClient) CreatePreparer(resourceGroupName string, accountName string, parameters AccountCreateParameters, cancel <-chan struct{}) (*http.Request, error) {
0000000000000000000000000000000000000000;;		pathParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"accountName":       autorest.Encode("path", accountName),
0000000000000000000000000000000000000000;;			"resourceGroupName": autorest.Encode("path", resourceGroupName),
0000000000000000000000000000000000000000;;			"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		const APIVersion = "2016-12-01"
0000000000000000000000000000000000000000;;		queryParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"api-version": APIVersion,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		preparer := autorest.CreatePreparer(
0000000000000000000000000000000000000000;;			autorest.AsJSON(),
0000000000000000000000000000000000000000;;			autorest.AsPut(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(client.BaseURI),
0000000000000000000000000000000000000000;;			autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}", pathParameters),
0000000000000000000000000000000000000000;;			autorest.WithJSON(parameters),
0000000000000000000000000000000000000000;;			autorest.WithQueryParameters(queryParameters))
0000000000000000000000000000000000000000;;		return preparer.Prepare(&http.Request{Cancel: cancel})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateSender sends the Create request. The method will close the
0000000000000000000000000000000000000000;;	// http.Response Body if it receives an error.
0000000000000000000000000000000000000000;;	func (client AccountsClient) CreateSender(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;		return autorest.SendWithSender(client,
0000000000000000000000000000000000000000;;			req,
0000000000000000000000000000000000000000;;			azure.DoPollForAsynchronous(client.PollingDelay))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateResponder handles the response to the Create request. The method always
0000000000000000000000000000000000000000;;	// closes the http.Response Body.
0000000000000000000000000000000000000000;;	func (client AccountsClient) CreateResponder(resp *http.Response) (result Account, err error) {
0000000000000000000000000000000000000000;;		err = autorest.Respond(
0000000000000000000000000000000000000000;;			resp,
0000000000000000000000000000000000000000;;			client.ByInspecting(),
0000000000000000000000000000000000000000;;			azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted),
0000000000000000000000000000000000000000;;			autorest.ByUnmarshallingJSON(&result),
0000000000000000000000000000000000000000;;			autorest.ByClosing())
0000000000000000000000000000000000000000;;		result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Delete deletes a storage account in Microsoft Azure.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// resourceGroupName is the name of the resource group within the user's
0000000000000000000000000000000000000000;;	// subscription. The name is case insensitive. accountName is the name of the
0000000000000000000000000000000000000000;;	// storage account within the specified resource group. Storage account names
0000000000000000000000000000000000000000;;	// must be between 3 and 24 characters in length and use numbers and lower-case
0000000000000000000000000000000000000000;;	// letters only.
0000000000000000000000000000000000000000;;	func (client AccountsClient) Delete(resourceGroupName string, accountName string) (result autorest.Response, err error) {
0000000000000000000000000000000000000000;;		if err := validation.Validate([]validation.Validation{
0000000000000000000000000000000000000000;;			{TargetValue: resourceGroupName,
0000000000000000000000000000000000000000;;				Constraints: []validation.Constraint{{Target: "resourceGroupName", Name: validation.MaxLength, Rule: 90, Chain: nil},
0000000000000000000000000000000000000000;;					{Target: "resourceGroupName", Name: validation.MinLength, Rule: 1, Chain: nil},
0000000000000000000000000000000000000000;;					{Target: "resourceGroupName", Name: validation.Pattern, Rule: `^[-\w\._\(\)]+$`, Chain: nil}}},
0000000000000000000000000000000000000000;;			{TargetValue: accountName,
0000000000000000000000000000000000000000;;				Constraints: []validation.Constraint{{Target: "accountName", Name: validation.MaxLength, Rule: 24, Chain: nil},
0000000000000000000000000000000000000000;;					{Target: "accountName", Name: validation.MinLength, Rule: 3, Chain: nil}}}}); err != nil {
0000000000000000000000000000000000000000;;			return result, validation.NewErrorWithValidationError(err, "storage.AccountsClient", "Delete")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req, err := client.DeletePreparer(resourceGroupName, accountName)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "storage.AccountsClient", "Delete", nil, "Failure preparing request")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := client.DeleteSender(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			result.Response = resp
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "storage.AccountsClient", "Delete", resp, "Failure sending request")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result, err = client.DeleteResponder(resp)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "storage.AccountsClient", "Delete", resp, "Failure responding to request")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeletePreparer prepares the Delete request.
0000000000000000000000000000000000000000;;	func (client AccountsClient) DeletePreparer(resourceGroupName string, accountName string) (*http.Request, error) {
0000000000000000000000000000000000000000;;		pathParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"accountName":       autorest.Encode("path", accountName),
0000000000000000000000000000000000000000;;			"resourceGroupName": autorest.Encode("path", resourceGroupName),
0000000000000000000000000000000000000000;;			"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		const APIVersion = "2016-12-01"
0000000000000000000000000000000000000000;;		queryParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"api-version": APIVersion,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		preparer := autorest.CreatePreparer(
0000000000000000000000000000000000000000;;			autorest.AsDelete(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(client.BaseURI),
0000000000000000000000000000000000000000;;			autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}", pathParameters),
0000000000000000000000000000000000000000;;			autorest.WithQueryParameters(queryParameters))
0000000000000000000000000000000000000000;;		return preparer.Prepare(&http.Request{})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteSender sends the Delete request. The method will close the
0000000000000000000000000000000000000000;;	// http.Response Body if it receives an error.
0000000000000000000000000000000000000000;;	func (client AccountsClient) DeleteSender(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;		return autorest.SendWithSender(client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteResponder handles the response to the Delete request. The method always
0000000000000000000000000000000000000000;;	// closes the http.Response Body.
0000000000000000000000000000000000000000;;	func (client AccountsClient) DeleteResponder(resp *http.Response) (result autorest.Response, err error) {
0000000000000000000000000000000000000000;;		err = autorest.Respond(
0000000000000000000000000000000000000000;;			resp,
0000000000000000000000000000000000000000;;			client.ByInspecting(),
0000000000000000000000000000000000000000;;			azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
0000000000000000000000000000000000000000;;			autorest.ByClosing())
0000000000000000000000000000000000000000;;		result.Response = resp
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetProperties returns the properties for the specified storage account
0000000000000000000000000000000000000000;;	// including but not limited to name, SKU name, location, and account status.
0000000000000000000000000000000000000000;;	// The ListKeys operation should be used to retrieve storage keys.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// resourceGroupName is the name of the resource group within the user's
0000000000000000000000000000000000000000;;	// subscription. The name is case insensitive. accountName is the name of the
0000000000000000000000000000000000000000;;	// storage account within the specified resource group. Storage account names
0000000000000000000000000000000000000000;;	// must be between 3 and 24 characters in length and use numbers and lower-case
0000000000000000000000000000000000000000;;	// letters only.
0000000000000000000000000000000000000000;;	func (client AccountsClient) GetProperties(resourceGroupName string, accountName string) (result Account, err error) {
0000000000000000000000000000000000000000;;		if err := validation.Validate([]validation.Validation{
0000000000000000000000000000000000000000;;			{TargetValue: resourceGroupName,
0000000000000000000000000000000000000000;;				Constraints: []validation.Constraint{{Target: "resourceGroupName", Name: validation.MaxLength, Rule: 90, Chain: nil},
0000000000000000000000000000000000000000;;					{Target: "resourceGroupName", Name: validation.MinLength, Rule: 1, Chain: nil},
0000000000000000000000000000000000000000;;					{Target: "resourceGroupName", Name: validation.Pattern, Rule: `^[-\w\._\(\)]+$`, Chain: nil}}},
0000000000000000000000000000000000000000;;			{TargetValue: accountName,
0000000000000000000000000000000000000000;;				Constraints: []validation.Constraint{{Target: "accountName", Name: validation.MaxLength, Rule: 24, Chain: nil},
0000000000000000000000000000000000000000;;					{Target: "accountName", Name: validation.MinLength, Rule: 3, Chain: nil}}}}); err != nil {
0000000000000000000000000000000000000000;;			return result, validation.NewErrorWithValidationError(err, "storage.AccountsClient", "GetProperties")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req, err := client.GetPropertiesPreparer(resourceGroupName, accountName)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "storage.AccountsClient", "GetProperties", nil, "Failure preparing request")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := client.GetPropertiesSender(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "storage.AccountsClient", "GetProperties", resp, "Failure sending request")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result, err = client.GetPropertiesResponder(resp)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "storage.AccountsClient", "GetProperties", resp, "Failure responding to request")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetPropertiesPreparer prepares the GetProperties request.
0000000000000000000000000000000000000000;;	func (client AccountsClient) GetPropertiesPreparer(resourceGroupName string, accountName string) (*http.Request, error) {
0000000000000000000000000000000000000000;;		pathParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"accountName":       autorest.Encode("path", accountName),
0000000000000000000000000000000000000000;;			"resourceGroupName": autorest.Encode("path", resourceGroupName),
0000000000000000000000000000000000000000;;			"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		const APIVersion = "2016-12-01"
0000000000000000000000000000000000000000;;		queryParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"api-version": APIVersion,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		preparer := autorest.CreatePreparer(
0000000000000000000000000000000000000000;;			autorest.AsGet(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(client.BaseURI),
0000000000000000000000000000000000000000;;			autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}", pathParameters),
0000000000000000000000000000000000000000;;			autorest.WithQueryParameters(queryParameters))
0000000000000000000000000000000000000000;;		return preparer.Prepare(&http.Request{})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetPropertiesSender sends the GetProperties request. The method will close the
0000000000000000000000000000000000000000;;	// http.Response Body if it receives an error.
0000000000000000000000000000000000000000;;	func (client AccountsClient) GetPropertiesSender(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;		return autorest.SendWithSender(client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetPropertiesResponder handles the response to the GetProperties request. The method always
0000000000000000000000000000000000000000;;	// closes the http.Response Body.
0000000000000000000000000000000000000000;;	func (client AccountsClient) GetPropertiesResponder(resp *http.Response) (result Account, err error) {
0000000000000000000000000000000000000000;;		err = autorest.Respond(
0000000000000000000000000000000000000000;;			resp,
0000000000000000000000000000000000000000;;			client.ByInspecting(),
0000000000000000000000000000000000000000;;			azure.WithErrorUnlessStatusCode(http.StatusOK),
0000000000000000000000000000000000000000;;			autorest.ByUnmarshallingJSON(&result),
0000000000000000000000000000000000000000;;			autorest.ByClosing())
0000000000000000000000000000000000000000;;		result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List lists all the storage accounts available under the subscription. Note
0000000000000000000000000000000000000000;;	// that storage keys are not returned; use the ListKeys operation for this.
0000000000000000000000000000000000000000;;	func (client AccountsClient) List() (result AccountListResult, err error) {
0000000000000000000000000000000000000000;;		req, err := client.ListPreparer()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "storage.AccountsClient", "List", nil, "Failure preparing request")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := client.ListSender(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "storage.AccountsClient", "List", resp, "Failure sending request")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result, err = client.ListResponder(resp)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "storage.AccountsClient", "List", resp, "Failure responding to request")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListPreparer prepares the List request.
0000000000000000000000000000000000000000;;	func (client AccountsClient) ListPreparer() (*http.Request, error) {
0000000000000000000000000000000000000000;;		pathParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"subscriptionId": autorest.Encode("path", client.SubscriptionID),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		const APIVersion = "2016-12-01"
0000000000000000000000000000000000000000;;		queryParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"api-version": APIVersion,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		preparer := autorest.CreatePreparer(
0000000000000000000000000000000000000000;;			autorest.AsGet(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(client.BaseURI),
0000000000000000000000000000000000000000;;			autorest.WithPathParameters("/subscriptions/{subscriptionId}/providers/Microsoft.Storage/storageAccounts", pathParameters),
0000000000000000000000000000000000000000;;			autorest.WithQueryParameters(queryParameters))
0000000000000000000000000000000000000000;;		return preparer.Prepare(&http.Request{})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListSender sends the List request. The method will close the
0000000000000000000000000000000000000000;;	// http.Response Body if it receives an error.
0000000000000000000000000000000000000000;;	func (client AccountsClient) ListSender(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;		return autorest.SendWithSender(client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListResponder handles the response to the List request. The method always
0000000000000000000000000000000000000000;;	// closes the http.Response Body.
0000000000000000000000000000000000000000;;	func (client AccountsClient) ListResponder(resp *http.Response) (result AccountListResult, err error) {
0000000000000000000000000000000000000000;;		err = autorest.Respond(
0000000000000000000000000000000000000000;;			resp,
0000000000000000000000000000000000000000;;			client.ByInspecting(),
0000000000000000000000000000000000000000;;			azure.WithErrorUnlessStatusCode(http.StatusOK),
0000000000000000000000000000000000000000;;			autorest.ByUnmarshallingJSON(&result),
0000000000000000000000000000000000000000;;			autorest.ByClosing())
0000000000000000000000000000000000000000;;		result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListAccountSAS list SAS credentials of a storage account.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// resourceGroupName is the name of the resource group within the user's
0000000000000000000000000000000000000000;;	// subscription. The name is case insensitive. accountName is the name of the
0000000000000000000000000000000000000000;;	// storage account within the specified resource group. Storage account names
0000000000000000000000000000000000000000;;	// must be between 3 and 24 characters in length and use numbers and lower-case
0000000000000000000000000000000000000000;;	// letters only. parameters is the parameters to provide to list SAS
0000000000000000000000000000000000000000;;	// credentials for the storage account.
0000000000000000000000000000000000000000;;	func (client AccountsClient) ListAccountSAS(resourceGroupName string, accountName string, parameters AccountSasParameters) (result ListAccountSasResponse, err error) {
0000000000000000000000000000000000000000;;		if err := validation.Validate([]validation.Validation{
0000000000000000000000000000000000000000;;			{TargetValue: resourceGroupName,
0000000000000000000000000000000000000000;;				Constraints: []validation.Constraint{{Target: "resourceGroupName", Name: validation.MaxLength, Rule: 90, Chain: nil},
0000000000000000000000000000000000000000;;					{Target: "resourceGroupName", Name: validation.MinLength, Rule: 1, Chain: nil},
0000000000000000000000000000000000000000;;					{Target: "resourceGroupName", Name: validation.Pattern, Rule: `^[-\w\._\(\)]+$`, Chain: nil}}},
0000000000000000000000000000000000000000;;			{TargetValue: accountName,
0000000000000000000000000000000000000000;;				Constraints: []validation.Constraint{{Target: "accountName", Name: validation.MaxLength, Rule: 24, Chain: nil},
0000000000000000000000000000000000000000;;					{Target: "accountName", Name: validation.MinLength, Rule: 3, Chain: nil}}},
0000000000000000000000000000000000000000;;			{TargetValue: parameters,
0000000000000000000000000000000000000000;;				Constraints: []validation.Constraint{{Target: "parameters.SharedAccessExpiryTime", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
0000000000000000000000000000000000000000;;			return result, validation.NewErrorWithValidationError(err, "storage.AccountsClient", "ListAccountSAS")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req, err := client.ListAccountSASPreparer(resourceGroupName, accountName, parameters)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "storage.AccountsClient", "ListAccountSAS", nil, "Failure preparing request")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := client.ListAccountSASSender(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "storage.AccountsClient", "ListAccountSAS", resp, "Failure sending request")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result, err = client.ListAccountSASResponder(resp)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "storage.AccountsClient", "ListAccountSAS", resp, "Failure responding to request")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListAccountSASPreparer prepares the ListAccountSAS request.
0000000000000000000000000000000000000000;;	func (client AccountsClient) ListAccountSASPreparer(resourceGroupName string, accountName string, parameters AccountSasParameters) (*http.Request, error) {
0000000000000000000000000000000000000000;;		pathParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"accountName":       autorest.Encode("path", accountName),
0000000000000000000000000000000000000000;;			"resourceGroupName": autorest.Encode("path", resourceGroupName),
0000000000000000000000000000000000000000;;			"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		const APIVersion = "2016-12-01"
0000000000000000000000000000000000000000;;		queryParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"api-version": APIVersion,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		preparer := autorest.CreatePreparer(
0000000000000000000000000000000000000000;;			autorest.AsJSON(),
0000000000000000000000000000000000000000;;			autorest.AsPost(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(client.BaseURI),
0000000000000000000000000000000000000000;;			autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/ListAccountSas", pathParameters),
0000000000000000000000000000000000000000;;			autorest.WithJSON(parameters),
0000000000000000000000000000000000000000;;			autorest.WithQueryParameters(queryParameters))
0000000000000000000000000000000000000000;;		return preparer.Prepare(&http.Request{})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListAccountSASSender sends the ListAccountSAS request. The method will close the
0000000000000000000000000000000000000000;;	// http.Response Body if it receives an error.
0000000000000000000000000000000000000000;;	func (client AccountsClient) ListAccountSASSender(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;		return autorest.SendWithSender(client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListAccountSASResponder handles the response to the ListAccountSAS request. The method always
0000000000000000000000000000000000000000;;	// closes the http.Response Body.
0000000000000000000000000000000000000000;;	func (client AccountsClient) ListAccountSASResponder(resp *http.Response) (result ListAccountSasResponse, err error) {
0000000000000000000000000000000000000000;;		err = autorest.Respond(
0000000000000000000000000000000000000000;;			resp,
0000000000000000000000000000000000000000;;			client.ByInspecting(),
0000000000000000000000000000000000000000;;			azure.WithErrorUnlessStatusCode(http.StatusOK),
0000000000000000000000000000000000000000;;			autorest.ByUnmarshallingJSON(&result),
0000000000000000000000000000000000000000;;			autorest.ByClosing())
0000000000000000000000000000000000000000;;		result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListByResourceGroup lists all the storage accounts available under the given
0000000000000000000000000000000000000000;;	// resource group. Note that storage keys are not returned; use the ListKeys
0000000000000000000000000000000000000000;;	// operation for this.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// resourceGroupName is the name of the resource group within the user's
0000000000000000000000000000000000000000;;	// subscription. The name is case insensitive.
0000000000000000000000000000000000000000;;	func (client AccountsClient) ListByResourceGroup(resourceGroupName string) (result AccountListResult, err error) {
0000000000000000000000000000000000000000;;		if err := validation.Validate([]validation.Validation{
0000000000000000000000000000000000000000;;			{TargetValue: resourceGroupName,
0000000000000000000000000000000000000000;;				Constraints: []validation.Constraint{{Target: "resourceGroupName", Name: validation.MaxLength, Rule: 90, Chain: nil},
0000000000000000000000000000000000000000;;					{Target: "resourceGroupName", Name: validation.MinLength, Rule: 1, Chain: nil},
0000000000000000000000000000000000000000;;					{Target: "resourceGroupName", Name: validation.Pattern, Rule: `^[-\w\._\(\)]+$`, Chain: nil}}}}); err != nil {
0000000000000000000000000000000000000000;;			return result, validation.NewErrorWithValidationError(err, "storage.AccountsClient", "ListByResourceGroup")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req, err := client.ListByResourceGroupPreparer(resourceGroupName)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "storage.AccountsClient", "ListByResourceGroup", nil, "Failure preparing request")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := client.ListByResourceGroupSender(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "storage.AccountsClient", "ListByResourceGroup", resp, "Failure sending request")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result, err = client.ListByResourceGroupResponder(resp)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "storage.AccountsClient", "ListByResourceGroup", resp, "Failure responding to request")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListByResourceGroupPreparer prepares the ListByResourceGroup request.
0000000000000000000000000000000000000000;;	func (client AccountsClient) ListByResourceGroupPreparer(resourceGroupName string) (*http.Request, error) {
0000000000000000000000000000000000000000;;		pathParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"resourceGroupName": autorest.Encode("path", resourceGroupName),
0000000000000000000000000000000000000000;;			"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		const APIVersion = "2016-12-01"
0000000000000000000000000000000000000000;;		queryParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"api-version": APIVersion,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		preparer := autorest.CreatePreparer(
0000000000000000000000000000000000000000;;			autorest.AsGet(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(client.BaseURI),
0000000000000000000000000000000000000000;;			autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts", pathParameters),
0000000000000000000000000000000000000000;;			autorest.WithQueryParameters(queryParameters))
0000000000000000000000000000000000000000;;		return preparer.Prepare(&http.Request{})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListByResourceGroupSender sends the ListByResourceGroup request. The method will close the
0000000000000000000000000000000000000000;;	// http.Response Body if it receives an error.
0000000000000000000000000000000000000000;;	func (client AccountsClient) ListByResourceGroupSender(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;		return autorest.SendWithSender(client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListByResourceGroupResponder handles the response to the ListByResourceGroup request. The method always
0000000000000000000000000000000000000000;;	// closes the http.Response Body.
0000000000000000000000000000000000000000;;	func (client AccountsClient) ListByResourceGroupResponder(resp *http.Response) (result AccountListResult, err error) {
0000000000000000000000000000000000000000;;		err = autorest.Respond(
0000000000000000000000000000000000000000;;			resp,
0000000000000000000000000000000000000000;;			client.ByInspecting(),
0000000000000000000000000000000000000000;;			azure.WithErrorUnlessStatusCode(http.StatusOK),
0000000000000000000000000000000000000000;;			autorest.ByUnmarshallingJSON(&result),
0000000000000000000000000000000000000000;;			autorest.ByClosing())
0000000000000000000000000000000000000000;;		result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListKeys lists the access keys for the specified storage account.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// resourceGroupName is the name of the resource group within the user's
0000000000000000000000000000000000000000;;	// subscription. The name is case insensitive. accountName is the name of the
0000000000000000000000000000000000000000;;	// storage account within the specified resource group. Storage account names
0000000000000000000000000000000000000000;;	// must be between 3 and 24 characters in length and use numbers and lower-case
0000000000000000000000000000000000000000;;	// letters only.
0000000000000000000000000000000000000000;;	func (client AccountsClient) ListKeys(resourceGroupName string, accountName string) (result AccountListKeysResult, err error) {
0000000000000000000000000000000000000000;;		if err := validation.Validate([]validation.Validation{
0000000000000000000000000000000000000000;;			{TargetValue: resourceGroupName,
0000000000000000000000000000000000000000;;				Constraints: []validation.Constraint{{Target: "resourceGroupName", Name: validation.MaxLength, Rule: 90, Chain: nil},
0000000000000000000000000000000000000000;;					{Target: "resourceGroupName", Name: validation.MinLength, Rule: 1, Chain: nil},
0000000000000000000000000000000000000000;;					{Target: "resourceGroupName", Name: validation.Pattern, Rule: `^[-\w\._\(\)]+$`, Chain: nil}}},
0000000000000000000000000000000000000000;;			{TargetValue: accountName,
0000000000000000000000000000000000000000;;				Constraints: []validation.Constraint{{Target: "accountName", Name: validation.MaxLength, Rule: 24, Chain: nil},
0000000000000000000000000000000000000000;;					{Target: "accountName", Name: validation.MinLength, Rule: 3, Chain: nil}}}}); err != nil {
0000000000000000000000000000000000000000;;			return result, validation.NewErrorWithValidationError(err, "storage.AccountsClient", "ListKeys")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req, err := client.ListKeysPreparer(resourceGroupName, accountName)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "storage.AccountsClient", "ListKeys", nil, "Failure preparing request")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := client.ListKeysSender(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "storage.AccountsClient", "ListKeys", resp, "Failure sending request")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result, err = client.ListKeysResponder(resp)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "storage.AccountsClient", "ListKeys", resp, "Failure responding to request")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListKeysPreparer prepares the ListKeys request.
0000000000000000000000000000000000000000;;	func (client AccountsClient) ListKeysPreparer(resourceGroupName string, accountName string) (*http.Request, error) {
0000000000000000000000000000000000000000;;		pathParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"accountName":       autorest.Encode("path", accountName),
0000000000000000000000000000000000000000;;			"resourceGroupName": autorest.Encode("path", resourceGroupName),
0000000000000000000000000000000000000000;;			"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		const APIVersion = "2016-12-01"
0000000000000000000000000000000000000000;;		queryParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"api-version": APIVersion,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		preparer := autorest.CreatePreparer(
0000000000000000000000000000000000000000;;			autorest.AsPost(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(client.BaseURI),
0000000000000000000000000000000000000000;;			autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/listKeys", pathParameters),
0000000000000000000000000000000000000000;;			autorest.WithQueryParameters(queryParameters))
0000000000000000000000000000000000000000;;		return preparer.Prepare(&http.Request{})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListKeysSender sends the ListKeys request. The method will close the
0000000000000000000000000000000000000000;;	// http.Response Body if it receives an error.
0000000000000000000000000000000000000000;;	func (client AccountsClient) ListKeysSender(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;		return autorest.SendWithSender(client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListKeysResponder handles the response to the ListKeys request. The method always
0000000000000000000000000000000000000000;;	// closes the http.Response Body.
0000000000000000000000000000000000000000;;	func (client AccountsClient) ListKeysResponder(resp *http.Response) (result AccountListKeysResult, err error) {
0000000000000000000000000000000000000000;;		err = autorest.Respond(
0000000000000000000000000000000000000000;;			resp,
0000000000000000000000000000000000000000;;			client.ByInspecting(),
0000000000000000000000000000000000000000;;			azure.WithErrorUnlessStatusCode(http.StatusOK),
0000000000000000000000000000000000000000;;			autorest.ByUnmarshallingJSON(&result),
0000000000000000000000000000000000000000;;			autorest.ByClosing())
0000000000000000000000000000000000000000;;		result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListServiceSAS list service SAS credentials of a specific resource.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// resourceGroupName is the name of the resource group within the user's
0000000000000000000000000000000000000000;;	// subscription. The name is case insensitive. accountName is the name of the
0000000000000000000000000000000000000000;;	// storage account within the specified resource group. Storage account names
0000000000000000000000000000000000000000;;	// must be between 3 and 24 characters in length and use numbers and lower-case
0000000000000000000000000000000000000000;;	// letters only. parameters is the parameters to provide to list service SAS
0000000000000000000000000000000000000000;;	// credentials.
0000000000000000000000000000000000000000;;	func (client AccountsClient) ListServiceSAS(resourceGroupName string, accountName string, parameters ServiceSasParameters) (result ListServiceSasResponse, err error) {
0000000000000000000000000000000000000000;;		if err := validation.Validate([]validation.Validation{
0000000000000000000000000000000000000000;;			{TargetValue: resourceGroupName,
0000000000000000000000000000000000000000;;				Constraints: []validation.Constraint{{Target: "resourceGroupName", Name: validation.MaxLength, Rule: 90, Chain: nil},
0000000000000000000000000000000000000000;;					{Target: "resourceGroupName", Name: validation.MinLength, Rule: 1, Chain: nil},
0000000000000000000000000000000000000000;;					{Target: "resourceGroupName", Name: validation.Pattern, Rule: `^[-\w\._\(\)]+$`, Chain: nil}}},
0000000000000000000000000000000000000000;;			{TargetValue: accountName,
0000000000000000000000000000000000000000;;				Constraints: []validation.Constraint{{Target: "accountName", Name: validation.MaxLength, Rule: 24, Chain: nil},
0000000000000000000000000000000000000000;;					{Target: "accountName", Name: validation.MinLength, Rule: 3, Chain: nil}}},
0000000000000000000000000000000000000000;;			{TargetValue: parameters,
0000000000000000000000000000000000000000;;				Constraints: []validation.Constraint{{Target: "parameters.CanonicalizedResource", Name: validation.Null, Rule: true, Chain: nil},
0000000000000000000000000000000000000000;;					{Target: "parameters.Identifier", Name: validation.Null, Rule: false,
0000000000000000000000000000000000000000;;						Chain: []validation.Constraint{{Target: "parameters.Identifier", Name: validation.MaxLength, Rule: 64, Chain: nil}}}}}}); err != nil {
0000000000000000000000000000000000000000;;			return result, validation.NewErrorWithValidationError(err, "storage.AccountsClient", "ListServiceSAS")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req, err := client.ListServiceSASPreparer(resourceGroupName, accountName, parameters)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "storage.AccountsClient", "ListServiceSAS", nil, "Failure preparing request")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := client.ListServiceSASSender(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "storage.AccountsClient", "ListServiceSAS", resp, "Failure sending request")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result, err = client.ListServiceSASResponder(resp)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "storage.AccountsClient", "ListServiceSAS", resp, "Failure responding to request")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListServiceSASPreparer prepares the ListServiceSAS request.
0000000000000000000000000000000000000000;;	func (client AccountsClient) ListServiceSASPreparer(resourceGroupName string, accountName string, parameters ServiceSasParameters) (*http.Request, error) {
0000000000000000000000000000000000000000;;		pathParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"accountName":       autorest.Encode("path", accountName),
0000000000000000000000000000000000000000;;			"resourceGroupName": autorest.Encode("path", resourceGroupName),
0000000000000000000000000000000000000000;;			"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		const APIVersion = "2016-12-01"
0000000000000000000000000000000000000000;;		queryParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"api-version": APIVersion,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		preparer := autorest.CreatePreparer(
0000000000000000000000000000000000000000;;			autorest.AsJSON(),
0000000000000000000000000000000000000000;;			autorest.AsPost(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(client.BaseURI),
0000000000000000000000000000000000000000;;			autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/ListServiceSas", pathParameters),
0000000000000000000000000000000000000000;;			autorest.WithJSON(parameters),
0000000000000000000000000000000000000000;;			autorest.WithQueryParameters(queryParameters))
0000000000000000000000000000000000000000;;		return preparer.Prepare(&http.Request{})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListServiceSASSender sends the ListServiceSAS request. The method will close the
0000000000000000000000000000000000000000;;	// http.Response Body if it receives an error.
0000000000000000000000000000000000000000;;	func (client AccountsClient) ListServiceSASSender(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;		return autorest.SendWithSender(client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListServiceSASResponder handles the response to the ListServiceSAS request. The method always
0000000000000000000000000000000000000000;;	// closes the http.Response Body.
0000000000000000000000000000000000000000;;	func (client AccountsClient) ListServiceSASResponder(resp *http.Response) (result ListServiceSasResponse, err error) {
0000000000000000000000000000000000000000;;		err = autorest.Respond(
0000000000000000000000000000000000000000;;			resp,
0000000000000000000000000000000000000000;;			client.ByInspecting(),
0000000000000000000000000000000000000000;;			azure.WithErrorUnlessStatusCode(http.StatusOK),
0000000000000000000000000000000000000000;;			autorest.ByUnmarshallingJSON(&result),
0000000000000000000000000000000000000000;;			autorest.ByClosing())
0000000000000000000000000000000000000000;;		result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RegenerateKey regenerates one of the access keys for the specified storage
0000000000000000000000000000000000000000;;	// account.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// resourceGroupName is the name of the resource group within the user's
0000000000000000000000000000000000000000;;	// subscription. The name is case insensitive. accountName is the name of the
0000000000000000000000000000000000000000;;	// storage account within the specified resource group. Storage account names
0000000000000000000000000000000000000000;;	// must be between 3 and 24 characters in length and use numbers and lower-case
0000000000000000000000000000000000000000;;	// letters only. regenerateKey is specifies name of the key which should be
0000000000000000000000000000000000000000;;	// regenerated -- key1 or key2.
0000000000000000000000000000000000000000;;	func (client AccountsClient) RegenerateKey(resourceGroupName string, accountName string, regenerateKey AccountRegenerateKeyParameters) (result AccountListKeysResult, err error) {
0000000000000000000000000000000000000000;;		if err := validation.Validate([]validation.Validation{
0000000000000000000000000000000000000000;;			{TargetValue: resourceGroupName,
0000000000000000000000000000000000000000;;				Constraints: []validation.Constraint{{Target: "resourceGroupName", Name: validation.MaxLength, Rule: 90, Chain: nil},
0000000000000000000000000000000000000000;;					{Target: "resourceGroupName", Name: validation.MinLength, Rule: 1, Chain: nil},
0000000000000000000000000000000000000000;;					{Target: "resourceGroupName", Name: validation.Pattern, Rule: `^[-\w\._\(\)]+$`, Chain: nil}}},
0000000000000000000000000000000000000000;;			{TargetValue: accountName,
0000000000000000000000000000000000000000;;				Constraints: []validation.Constraint{{Target: "accountName", Name: validation.MaxLength, Rule: 24, Chain: nil},
0000000000000000000000000000000000000000;;					{Target: "accountName", Name: validation.MinLength, Rule: 3, Chain: nil}}},
0000000000000000000000000000000000000000;;			{TargetValue: regenerateKey,
0000000000000000000000000000000000000000;;				Constraints: []validation.Constraint{{Target: "regenerateKey.KeyName", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
0000000000000000000000000000000000000000;;			return result, validation.NewErrorWithValidationError(err, "storage.AccountsClient", "RegenerateKey")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req, err := client.RegenerateKeyPreparer(resourceGroupName, accountName, regenerateKey)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "storage.AccountsClient", "RegenerateKey", nil, "Failure preparing request")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := client.RegenerateKeySender(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "storage.AccountsClient", "RegenerateKey", resp, "Failure sending request")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result, err = client.RegenerateKeyResponder(resp)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "storage.AccountsClient", "RegenerateKey", resp, "Failure responding to request")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RegenerateKeyPreparer prepares the RegenerateKey request.
0000000000000000000000000000000000000000;;	func (client AccountsClient) RegenerateKeyPreparer(resourceGroupName string, accountName string, regenerateKey AccountRegenerateKeyParameters) (*http.Request, error) {
0000000000000000000000000000000000000000;;		pathParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"accountName":       autorest.Encode("path", accountName),
0000000000000000000000000000000000000000;;			"resourceGroupName": autorest.Encode("path", resourceGroupName),
0000000000000000000000000000000000000000;;			"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		const APIVersion = "2016-12-01"
0000000000000000000000000000000000000000;;		queryParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"api-version": APIVersion,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		preparer := autorest.CreatePreparer(
0000000000000000000000000000000000000000;;			autorest.AsJSON(),
0000000000000000000000000000000000000000;;			autorest.AsPost(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(client.BaseURI),
0000000000000000000000000000000000000000;;			autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/regenerateKey", pathParameters),
0000000000000000000000000000000000000000;;			autorest.WithJSON(regenerateKey),
0000000000000000000000000000000000000000;;			autorest.WithQueryParameters(queryParameters))
0000000000000000000000000000000000000000;;		return preparer.Prepare(&http.Request{})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RegenerateKeySender sends the RegenerateKey request. The method will close the
0000000000000000000000000000000000000000;;	// http.Response Body if it receives an error.
0000000000000000000000000000000000000000;;	func (client AccountsClient) RegenerateKeySender(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;		return autorest.SendWithSender(client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RegenerateKeyResponder handles the response to the RegenerateKey request. The method always
0000000000000000000000000000000000000000;;	// closes the http.Response Body.
0000000000000000000000000000000000000000;;	func (client AccountsClient) RegenerateKeyResponder(resp *http.Response) (result AccountListKeysResult, err error) {
0000000000000000000000000000000000000000;;		err = autorest.Respond(
0000000000000000000000000000000000000000;;			resp,
0000000000000000000000000000000000000000;;			client.ByInspecting(),
0000000000000000000000000000000000000000;;			azure.WithErrorUnlessStatusCode(http.StatusOK),
0000000000000000000000000000000000000000;;			autorest.ByUnmarshallingJSON(&result),
0000000000000000000000000000000000000000;;			autorest.ByClosing())
0000000000000000000000000000000000000000;;		result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Update the update operation can be used to update the SKU, encryption,
0000000000000000000000000000000000000000;;	// access tier, or tags for a storage account. It can also be used to map the
0000000000000000000000000000000000000000;;	// account to a custom domain. Only one custom domain is supported per storage
0000000000000000000000000000000000000000;;	// account; the replacement/change of custom domain is not supported. In order
0000000000000000000000000000000000000000;;	// to replace an old custom domain, the old value must be cleared/unregistered
0000000000000000000000000000000000000000;;	// before a new value can be set. The update of multiple properties is
0000000000000000000000000000000000000000;;	// supported. This call does not change the storage keys for the account. If
0000000000000000000000000000000000000000;;	// you want to change the storage account keys, use the regenerate keys
0000000000000000000000000000000000000000;;	// operation. The location and name of the storage account cannot be changed
0000000000000000000000000000000000000000;;	// after creation.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// resourceGroupName is the name of the resource group within the user's
0000000000000000000000000000000000000000;;	// subscription. The name is case insensitive. accountName is the name of the
0000000000000000000000000000000000000000;;	// storage account within the specified resource group. Storage account names
0000000000000000000000000000000000000000;;	// must be between 3 and 24 characters in length and use numbers and lower-case
0000000000000000000000000000000000000000;;	// letters only. parameters is the parameters to provide for the updated
0000000000000000000000000000000000000000;;	// account.
0000000000000000000000000000000000000000;;	func (client AccountsClient) Update(resourceGroupName string, accountName string, parameters AccountUpdateParameters) (result Account, err error) {
0000000000000000000000000000000000000000;;		if err := validation.Validate([]validation.Validation{
0000000000000000000000000000000000000000;;			{TargetValue: resourceGroupName,
0000000000000000000000000000000000000000;;				Constraints: []validation.Constraint{{Target: "resourceGroupName", Name: validation.MaxLength, Rule: 90, Chain: nil},
0000000000000000000000000000000000000000;;					{Target: "resourceGroupName", Name: validation.MinLength, Rule: 1, Chain: nil},
0000000000000000000000000000000000000000;;					{Target: "resourceGroupName", Name: validation.Pattern, Rule: `^[-\w\._\(\)]+$`, Chain: nil}}},
0000000000000000000000000000000000000000;;			{TargetValue: accountName,
0000000000000000000000000000000000000000;;				Constraints: []validation.Constraint{{Target: "accountName", Name: validation.MaxLength, Rule: 24, Chain: nil},
0000000000000000000000000000000000000000;;					{Target: "accountName", Name: validation.MinLength, Rule: 3, Chain: nil}}}}); err != nil {
0000000000000000000000000000000000000000;;			return result, validation.NewErrorWithValidationError(err, "storage.AccountsClient", "Update")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req, err := client.UpdatePreparer(resourceGroupName, accountName, parameters)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "storage.AccountsClient", "Update", nil, "Failure preparing request")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := client.UpdateSender(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "storage.AccountsClient", "Update", resp, "Failure sending request")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result, err = client.UpdateResponder(resp)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			err = autorest.NewErrorWithError(err, "storage.AccountsClient", "Update", resp, "Failure responding to request")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdatePreparer prepares the Update request.
0000000000000000000000000000000000000000;;	func (client AccountsClient) UpdatePreparer(resourceGroupName string, accountName string, parameters AccountUpdateParameters) (*http.Request, error) {
0000000000000000000000000000000000000000;;		pathParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"accountName":       autorest.Encode("path", accountName),
0000000000000000000000000000000000000000;;			"resourceGroupName": autorest.Encode("path", resourceGroupName),
0000000000000000000000000000000000000000;;			"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		const APIVersion = "2016-12-01"
0000000000000000000000000000000000000000;;		queryParameters := map[string]interface{}{
0000000000000000000000000000000000000000;;			"api-version": APIVersion,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		preparer := autorest.CreatePreparer(
0000000000000000000000000000000000000000;;			autorest.AsJSON(),
0000000000000000000000000000000000000000;;			autorest.AsPatch(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(client.BaseURI),
0000000000000000000000000000000000000000;;			autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}", pathParameters),
0000000000000000000000000000000000000000;;			autorest.WithJSON(parameters),
0000000000000000000000000000000000000000;;			autorest.WithQueryParameters(queryParameters))
0000000000000000000000000000000000000000;;		return preparer.Prepare(&http.Request{})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateSender sends the Update request. The method will close the
0000000000000000000000000000000000000000;;	// http.Response Body if it receives an error.
0000000000000000000000000000000000000000;;	func (client AccountsClient) UpdateSender(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;		return autorest.SendWithSender(client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateResponder handles the response to the Update request. The method always
0000000000000000000000000000000000000000;;	// closes the http.Response Body.
0000000000000000000000000000000000000000;;	func (client AccountsClient) UpdateResponder(resp *http.Response) (result Account, err error) {
0000000000000000000000000000000000000000;;		err = autorest.Respond(
0000000000000000000000000000000000000000;;			resp,
0000000000000000000000000000000000000000;;			client.ByInspecting(),
0000000000000000000000000000000000000000;;			azure.WithErrorUnlessStatusCode(http.StatusOK),
0000000000000000000000000000000000000000;;			autorest.ByUnmarshallingJSON(&result),
0000000000000000000000000000000000000000;;			autorest.ByClosing())
0000000000000000000000000000000000000000;;		result.Response = autorest.Response{Response: resp}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
