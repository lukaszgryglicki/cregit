0000000000000000000000000000000000000000;;	package storage
91454efdcfe2d233cf3f75fc014b3bb9ac6e5ae7;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/satori/uuid"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Annotating as secure for gas scanning
0000000000000000000000000000000000000000;;	/* #nosec */
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		partitionKeyNode  = "PartitionKey"
0000000000000000000000000000000000000000;;		rowKeyNode        = "RowKey"
0000000000000000000000000000000000000000;;		etagErrorTemplate = "Etag didn't match: %v"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		errEmptyPayload      = errors.New("Empty payload is not a valid metadata level for this operation")
0000000000000000000000000000000000000000;;		errNilPreviousResult = errors.New("The previous results page is nil")
0000000000000000000000000000000000000000;;		errNilNextLink       = errors.New("There are no more pages in this query results")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Entity represents an entity inside an Azure table.
0000000000000000000000000000000000000000;;	type Entity struct {
0000000000000000000000000000000000000000;;		Table         *Table
0000000000000000000000000000000000000000;;		PartitionKey  string
0000000000000000000000000000000000000000;;		RowKey        string
0000000000000000000000000000000000000000;;		TimeStamp     time.Time
0000000000000000000000000000000000000000;;		OdataMetadata string
0000000000000000000000000000000000000000;;		OdataType     string
0000000000000000000000000000000000000000;;		OdataID       string
0000000000000000000000000000000000000000;;		OdataEtag     string
0000000000000000000000000000000000000000;;		OdataEditLink string
0000000000000000000000000000000000000000;;		Properties    map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetEntityReference returns an Entity object with the specified
0000000000000000000000000000000000000000;;	// partition key and row key.
0000000000000000000000000000000000000000;;	func (t *Table) GetEntityReference(partitionKey, rowKey string) *Entity {
0000000000000000000000000000000000000000;;		return &Entity{
0000000000000000000000000000000000000000;;			PartitionKey: partitionKey,
0000000000000000000000000000000000000000;;			RowKey:       rowKey,
0000000000000000000000000000000000000000;;			Table:        t,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EntityOptions includes options for entity operations.
0000000000000000000000000000000000000000;;	type EntityOptions struct {
0000000000000000000000000000000000000000;;		Timeout   uint
0000000000000000000000000000000000000000;;		RequestID string `header:"x-ms-client-request-id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetEntityOptions includes options for a get entity operation
0000000000000000000000000000000000000000;;	type GetEntityOptions struct {
0000000000000000000000000000000000000000;;		Select    []string
0000000000000000000000000000000000000000;;		RequestID string `header:"x-ms-client-request-id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get gets the referenced entity. Which properties to get can be
0000000000000000000000000000000000000000;;	// specified using the select option.
0000000000000000000000000000000000000000;;	// See:
0000000000000000000000000000000000000000;;	// https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/query-entities
0000000000000000000000000000000000000000;;	// https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/querying-tables-and-entities
0000000000000000000000000000000000000000;;	func (e *Entity) Get(timeout uint, ml MetadataLevel, options *GetEntityOptions) error {
0000000000000000000000000000000000000000;;		if ml == EmptyPayload {
0000000000000000000000000000000000000000;;			return errEmptyPayload
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// RowKey and PartitionKey could be lost if not included in the query
0000000000000000000000000000000000000000;;		// As those are the entity identifiers, it is best if they are not lost
0000000000000000000000000000000000000000;;		rk := e.RowKey
0000000000000000000000000000000000000000;;		pk := e.PartitionKey
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		query := url.Values{
0000000000000000000000000000000000000000;;			"timeout": {strconv.FormatUint(uint64(timeout), 10)},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		headers := e.Table.tsc.client.getStandardHeaders()
0000000000000000000000000000000000000000;;		headers[headerAccept] = string(ml)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if options != nil {
0000000000000000000000000000000000000000;;			if len(options.Select) > 0 {
0000000000000000000000000000000000000000;;				query.Add("$select", strings.Join(options.Select, ","))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			headers = mergeHeaders(headers, headersFromStruct(*options))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		uri := e.Table.tsc.client.getEndpoint(tableServiceName, e.buildPath(), query)
0000000000000000000000000000000000000000;;		resp, err := e.Table.tsc.client.exec(http.MethodGet, uri, headers, nil, e.Table.tsc.auth)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer readAndCloseBody(resp.body)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err = checkRespCode(resp.statusCode, []int{http.StatusOK}); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		respBody, err := ioutil.ReadAll(resp.body)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err = json.Unmarshal(respBody, e)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		e.PartitionKey = pk
0000000000000000000000000000000000000000;;		e.RowKey = rk
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Insert inserts the referenced entity in its table.
0000000000000000000000000000000000000000;;	// The function fails if there is an entity with the same
0000000000000000000000000000000000000000;;	// PartitionKey and RowKey in the table.
0000000000000000000000000000000000000000;;	// ml determines the level of detail of metadata in the operation response,
0000000000000000000000000000000000000000;;	// or no data at all.
0000000000000000000000000000000000000000;;	// See: https://docs.microsoft.com/rest/api/storageservices/fileservices/insert-entity
0000000000000000000000000000000000000000;;	func (e *Entity) Insert(ml MetadataLevel, options *EntityOptions) error {
0000000000000000000000000000000000000000;;		query, headers := options.getParameters()
0000000000000000000000000000000000000000;;		headers = mergeHeaders(headers, e.Table.tsc.client.getStandardHeaders())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		body, err := json.Marshal(e)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		headers = addBodyRelatedHeaders(headers, len(body))
0000000000000000000000000000000000000000;;		headers = addReturnContentHeaders(headers, ml)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		uri := e.Table.tsc.client.getEndpoint(tableServiceName, e.Table.buildPath(), query)
0000000000000000000000000000000000000000;;		resp, err := e.Table.tsc.client.exec(http.MethodPost, uri, headers, bytes.NewReader(body), e.Table.tsc.auth)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		data, err := ioutil.ReadAll(resp.body)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if ml != EmptyPayload {
0000000000000000000000000000000000000000;;			if err = checkRespCode(resp.statusCode, []int{http.StatusCreated}); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err = e.UnmarshalJSON(data); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			if err = checkRespCode(resp.statusCode, []int{http.StatusNoContent}); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Update updates the contents of an entity. The function fails if there is no entity
0000000000000000000000000000000000000000;;	// with the same PartitionKey and RowKey in the table or if the ETag is different
0000000000000000000000000000000000000000;;	// than the one in Azure.
0000000000000000000000000000000000000000;;	// See: https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/update-entity2
0000000000000000000000000000000000000000;;	func (e *Entity) Update(force bool, options *EntityOptions) error {
0000000000000000000000000000000000000000;;		return e.updateMerge(force, http.MethodPut, options)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Merge merges the contents of entity specified with PartitionKey and RowKey
0000000000000000000000000000000000000000;;	// with the content specified in Properties.
0000000000000000000000000000000000000000;;	// The function fails if there is no entity with the same PartitionKey and
0000000000000000000000000000000000000000;;	// RowKey in the table or if the ETag is different than the one in Azure.
0000000000000000000000000000000000000000;;	// Read more: https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/merge-entity
0000000000000000000000000000000000000000;;	func (e *Entity) Merge(force bool, options *EntityOptions) error {
0000000000000000000000000000000000000000;;		return e.updateMerge(force, "MERGE", options)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Delete deletes the entity.
0000000000000000000000000000000000000000;;	// The function fails if there is no entity with the same PartitionKey and
0000000000000000000000000000000000000000;;	// RowKey in the table or if the ETag is different than the one in Azure.
0000000000000000000000000000000000000000;;	// See: https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/delete-entity1
0000000000000000000000000000000000000000;;	func (e *Entity) Delete(force bool, options *EntityOptions) error {
0000000000000000000000000000000000000000;;		query, headers := options.getParameters()
0000000000000000000000000000000000000000;;		headers = mergeHeaders(headers, e.Table.tsc.client.getStandardHeaders())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		headers = addIfMatchHeader(headers, force, e.OdataEtag)
0000000000000000000000000000000000000000;;		headers = addReturnContentHeaders(headers, EmptyPayload)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		uri := e.Table.tsc.client.getEndpoint(tableServiceName, e.buildPath(), query)
0000000000000000000000000000000000000000;;		resp, err := e.Table.tsc.client.exec(http.MethodDelete, uri, headers, nil, e.Table.tsc.auth)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if resp.statusCode == http.StatusPreconditionFailed {
0000000000000000000000000000000000000000;;				return fmt.Errorf(etagErrorTemplate, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer readAndCloseBody(resp.body)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err = checkRespCode(resp.statusCode, []int{http.StatusNoContent}); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return e.updateTimestamp(resp.headers)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InsertOrReplace inserts an entity or replaces the existing one.
0000000000000000000000000000000000000000;;	// Read more: https://docs.microsoft.com/rest/api/storageservices/fileservices/insert-or-replace-entity
0000000000000000000000000000000000000000;;	func (e *Entity) InsertOrReplace(options *EntityOptions) error {
0000000000000000000000000000000000000000;;		return e.insertOr(http.MethodPut, options)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InsertOrMerge inserts an entity or merges the existing one.
0000000000000000000000000000000000000000;;	// Read more: https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/insert-or-merge-entity
0000000000000000000000000000000000000000;;	func (e *Entity) InsertOrMerge(options *EntityOptions) error {
0000000000000000000000000000000000000000;;		return e.insertOr("MERGE", options)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *Entity) buildPath() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%s(PartitionKey='%s', RowKey='%s')", e.Table.buildPath(), e.PartitionKey, e.RowKey)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalJSON is a custom marshaller for entity
0000000000000000000000000000000000000000;;	func (e *Entity) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		completeMap := map[string]interface{}{}
0000000000000000000000000000000000000000;;		completeMap[partitionKeyNode] = e.PartitionKey
0000000000000000000000000000000000000000;;		completeMap[rowKeyNode] = e.RowKey
0000000000000000000000000000000000000000;;		for k, v := range e.Properties {
0000000000000000000000000000000000000000;;			typeKey := strings.Join([]string{k, OdataTypeSuffix}, "")
0000000000000000000000000000000000000000;;			switch t := v.(type) {
0000000000000000000000000000000000000000;;			case []byte:
0000000000000000000000000000000000000000;;				completeMap[typeKey] = OdataBinary
0000000000000000000000000000000000000000;;				completeMap[k] = string(t)
0000000000000000000000000000000000000000;;			case time.Time:
0000000000000000000000000000000000000000;;				completeMap[typeKey] = OdataDateTime
0000000000000000000000000000000000000000;;				completeMap[k] = t.Format(time.RFC3339Nano)
0000000000000000000000000000000000000000;;			case uuid.UUID:
0000000000000000000000000000000000000000;;				completeMap[typeKey] = OdataGUID
0000000000000000000000000000000000000000;;				completeMap[k] = t.String()
0000000000000000000000000000000000000000;;			case int64:
0000000000000000000000000000000000000000;;				completeMap[typeKey] = OdataInt64
0000000000000000000000000000000000000000;;				completeMap[k] = fmt.Sprintf("%v", v)
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				completeMap[k] = v
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if strings.HasSuffix(k, OdataTypeSuffix) {
0000000000000000000000000000000000000000;;				if !(completeMap[k] == OdataBinary ||
0000000000000000000000000000000000000000;;					completeMap[k] == OdataDateTime ||
0000000000000000000000000000000000000000;;					completeMap[k] == OdataGUID ||
0000000000000000000000000000000000000000;;					completeMap[k] == OdataInt64) {
0000000000000000000000000000000000000000;;					return nil, fmt.Errorf("Odata.type annotation %v value is not valid", k)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				valueKey := strings.TrimSuffix(k, OdataTypeSuffix)
0000000000000000000000000000000000000000;;				if _, ok := completeMap[valueKey]; !ok {
0000000000000000000000000000000000000000;;					return nil, fmt.Errorf("Odata.type annotation %v defined without value defined", k)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return json.Marshal(completeMap)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalJSON is a custom unmarshaller for entities
0000000000000000000000000000000000000000;;	func (e *Entity) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		errorTemplate := "Deserializing error: %v"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		props := map[string]interface{}{}
0000000000000000000000000000000000000000;;		err := json.Unmarshal(data, &props)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// deselialize metadata
0000000000000000000000000000000000000000;;		e.OdataMetadata = stringFromMap(props, "odata.metadata")
0000000000000000000000000000000000000000;;		e.OdataType = stringFromMap(props, "odata.type")
0000000000000000000000000000000000000000;;		e.OdataID = stringFromMap(props, "odata.id")
0000000000000000000000000000000000000000;;		e.OdataEtag = stringFromMap(props, "odata.etag")
0000000000000000000000000000000000000000;;		e.OdataEditLink = stringFromMap(props, "odata.editLink")
0000000000000000000000000000000000000000;;		e.PartitionKey = stringFromMap(props, partitionKeyNode)
0000000000000000000000000000000000000000;;		e.RowKey = stringFromMap(props, rowKeyNode)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// deserialize timestamp
0000000000000000000000000000000000000000;;		timeStamp, ok := props["Timestamp"]
0000000000000000000000000000000000000000;;		if ok {
0000000000000000000000000000000000000000;;			str, ok := timeStamp.(string)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				return fmt.Errorf(errorTemplate, "Timestamp casting error")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			t, err := time.Parse(time.RFC3339Nano, str)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return fmt.Errorf(errorTemplate, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			e.TimeStamp = t
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		delete(props, "Timestamp")
0000000000000000000000000000000000000000;;		delete(props, "Timestamp@odata.type")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// deserialize entity (user defined fields)
0000000000000000000000000000000000000000;;		for k, v := range props {
0000000000000000000000000000000000000000;;			if strings.HasSuffix(k, OdataTypeSuffix) {
0000000000000000000000000000000000000000;;				valueKey := strings.TrimSuffix(k, OdataTypeSuffix)
0000000000000000000000000000000000000000;;				str, ok := props[valueKey].(string)
0000000000000000000000000000000000000000;;				if !ok {
0000000000000000000000000000000000000000;;					return fmt.Errorf(errorTemplate, fmt.Sprintf("%v casting error", v))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				switch v {
0000000000000000000000000000000000000000;;				case OdataBinary:
0000000000000000000000000000000000000000;;					props[valueKey] = []byte(str)
0000000000000000000000000000000000000000;;				case OdataDateTime:
0000000000000000000000000000000000000000;;					t, err := time.Parse("2006-01-02T15:04:05Z", str)
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						return fmt.Errorf(errorTemplate, err)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					props[valueKey] = t
0000000000000000000000000000000000000000;;				case OdataGUID:
0000000000000000000000000000000000000000;;					props[valueKey] = uuid.FromStringOrNil(str)
0000000000000000000000000000000000000000;;				case OdataInt64:
0000000000000000000000000000000000000000;;					i, err := strconv.ParseInt(str, 10, 64)
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						return fmt.Errorf(errorTemplate, err)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					props[valueKey] = i
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					return fmt.Errorf(errorTemplate, fmt.Sprintf("%v is not supported", v))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				delete(props, k)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		e.Properties = props
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getAndDelete(props map[string]interface{}, key string) interface{} {
0000000000000000000000000000000000000000;;		if value, ok := props[key]; ok {
0000000000000000000000000000000000000000;;			delete(props, key)
0000000000000000000000000000000000000000;;			return value
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func addIfMatchHeader(h map[string]string, force bool, etag string) map[string]string {
0000000000000000000000000000000000000000;;		if force {
0000000000000000000000000000000000000000;;			h[headerIfMatch] = "*"
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			h[headerIfMatch] = etag
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return h
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// updates Etag and timestamp
0000000000000000000000000000000000000000;;	func (e *Entity) updateEtagAndTimestamp(headers http.Header) error {
0000000000000000000000000000000000000000;;		e.OdataEtag = headers.Get(headerEtag)
0000000000000000000000000000000000000000;;		return e.updateTimestamp(headers)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *Entity) updateTimestamp(headers http.Header) error {
0000000000000000000000000000000000000000;;		str := headers.Get(headerDate)
0000000000000000000000000000000000000000;;		t, err := time.Parse(time.RFC1123, str)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("Update timestamp error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		e.TimeStamp = t
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *Entity) insertOr(verb string, options *EntityOptions) error {
0000000000000000000000000000000000000000;;		query, headers := options.getParameters()
0000000000000000000000000000000000000000;;		headers = mergeHeaders(headers, e.Table.tsc.client.getStandardHeaders())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		body, err := json.Marshal(e)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		headers = addBodyRelatedHeaders(headers, len(body))
0000000000000000000000000000000000000000;;		headers = addReturnContentHeaders(headers, EmptyPayload)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		uri := e.Table.tsc.client.getEndpoint(tableServiceName, e.buildPath(), query)
0000000000000000000000000000000000000000;;		resp, err := e.Table.tsc.client.exec(verb, uri, headers, bytes.NewReader(body), e.Table.tsc.auth)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer readAndCloseBody(resp.body)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err = checkRespCode(resp.statusCode, []int{http.StatusNoContent}); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return e.updateEtagAndTimestamp(resp.headers)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *Entity) updateMerge(force bool, verb string, options *EntityOptions) error {
0000000000000000000000000000000000000000;;		query, headers := options.getParameters()
0000000000000000000000000000000000000000;;		headers = mergeHeaders(headers, e.Table.tsc.client.getStandardHeaders())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		body, err := json.Marshal(e)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		headers = addBodyRelatedHeaders(headers, len(body))
0000000000000000000000000000000000000000;;		headers = addIfMatchHeader(headers, force, e.OdataEtag)
0000000000000000000000000000000000000000;;		headers = addReturnContentHeaders(headers, EmptyPayload)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		uri := e.Table.tsc.client.getEndpoint(tableServiceName, e.buildPath(), query)
0000000000000000000000000000000000000000;;		resp, err := e.Table.tsc.client.exec(verb, uri, headers, bytes.NewReader(body), e.Table.tsc.auth)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if resp.statusCode == http.StatusPreconditionFailed {
0000000000000000000000000000000000000000;;				return fmt.Errorf(etagErrorTemplate, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer readAndCloseBody(resp.body)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err = checkRespCode(resp.statusCode, []int{http.StatusNoContent}); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return e.updateEtagAndTimestamp(resp.headers)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func stringFromMap(props map[string]interface{}, key string) string {
0000000000000000000000000000000000000000;;		value := getAndDelete(props, key)
0000000000000000000000000000000000000000;;		if value != nil {
0000000000000000000000000000000000000000;;			return value.(string)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ""
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (options *EntityOptions) getParameters() (url.Values, map[string]string) {
0000000000000000000000000000000000000000;;		query := url.Values{}
0000000000000000000000000000000000000000;;		headers := map[string]string{}
0000000000000000000000000000000000000000;;		if options != nil {
0000000000000000000000000000000000000000;;			query = addTimeout(query, options.Timeout)
0000000000000000000000000000000000000000;;			headers = headersFromStruct(*options)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return query, headers
0000000000000000000000000000000000000000;;	}
