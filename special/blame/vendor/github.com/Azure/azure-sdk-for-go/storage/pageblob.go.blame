0000000000000000000000000000000000000000;;	package storage
91454efdcfe2d233cf3f75fc014b3bb9ac6e5ae7;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/xml"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetPageRangesResponse contains the response fields from
0000000000000000000000000000000000000000;;	// Get Page Ranges call.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See https://msdn.microsoft.com/en-us/library/azure/ee691973.aspx
0000000000000000000000000000000000000000;;	type GetPageRangesResponse struct {
0000000000000000000000000000000000000000;;		XMLName  xml.Name    `xml:"PageList"`
0000000000000000000000000000000000000000;;		PageList []PageRange `xml:"PageRange"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PageRange contains information about a page of a page blob from
0000000000000000000000000000000000000000;;	// Get Pages Range call.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See https://msdn.microsoft.com/en-us/library/azure/ee691973.aspx
0000000000000000000000000000000000000000;;	type PageRange struct {
0000000000000000000000000000000000000000;;		Start int64 `xml:"Start"`
0000000000000000000000000000000000000000;;		End   int64 `xml:"End"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		errBlobCopyAborted    = errors.New("storage: blob copy is aborted")
0000000000000000000000000000000000000000;;		errBlobCopyIDMismatch = errors.New("storage: blob copy id is a mismatch")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PutPageOptions includes the options for a put page operation
0000000000000000000000000000000000000000;;	type PutPageOptions struct {
0000000000000000000000000000000000000000;;		Timeout                           uint
0000000000000000000000000000000000000000;;		LeaseID                           string     `header:"x-ms-lease-id"`
0000000000000000000000000000000000000000;;		IfSequenceNumberLessThanOrEqualTo *int       `header:"x-ms-if-sequence-number-le"`
0000000000000000000000000000000000000000;;		IfSequenceNumberLessThan          *int       `header:"x-ms-if-sequence-number-lt"`
0000000000000000000000000000000000000000;;		IfSequenceNumberEqualTo           *int       `header:"x-ms-if-sequence-number-eq"`
0000000000000000000000000000000000000000;;		IfModifiedSince                   *time.Time `header:"If-Modified-Since"`
0000000000000000000000000000000000000000;;		IfUnmodifiedSince                 *time.Time `header:"If-Unmodified-Since"`
0000000000000000000000000000000000000000;;		IfMatch                           string     `header:"If-Match"`
0000000000000000000000000000000000000000;;		IfNoneMatch                       string     `header:"If-None-Match"`
0000000000000000000000000000000000000000;;		RequestID                         string     `header:"x-ms-client-request-id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WriteRange writes a range of pages to a page blob.
0000000000000000000000000000000000000000;;	// Ranges must be aligned with 512-byte boundaries and chunk must be of size
0000000000000000000000000000000000000000;;	// multiplies by 512.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/Put-Page
0000000000000000000000000000000000000000;;	func (b *Blob) WriteRange(blobRange BlobRange, bytes io.Reader, options *PutPageOptions) error {
0000000000000000000000000000000000000000;;		if bytes == nil {
0000000000000000000000000000000000000000;;			return errors.New("bytes cannot be nil")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return b.modifyRange(blobRange, bytes, options)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ClearRange clears the given range in a page blob.
0000000000000000000000000000000000000000;;	// Ranges must be aligned with 512-byte boundaries and chunk must be of size
0000000000000000000000000000000000000000;;	// multiplies by 512.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/Put-Page
0000000000000000000000000000000000000000;;	func (b *Blob) ClearRange(blobRange BlobRange, options *PutPageOptions) error {
0000000000000000000000000000000000000000;;		return b.modifyRange(blobRange, nil, options)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (b *Blob) modifyRange(blobRange BlobRange, bytes io.Reader, options *PutPageOptions) error {
0000000000000000000000000000000000000000;;		if blobRange.End < blobRange.Start {
0000000000000000000000000000000000000000;;			return errors.New("the value for rangeEnd must be greater than or equal to rangeStart")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if blobRange.Start%512 != 0 {
0000000000000000000000000000000000000000;;			return errors.New("the value for rangeStart must be a modulus of 512")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if blobRange.End%512 != 511 {
0000000000000000000000000000000000000000;;			return errors.New("the value for rangeEnd must be a modulus of 511")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		params := url.Values{"comp": {"page"}}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// default to clear
0000000000000000000000000000000000000000;;		write := "clear"
0000000000000000000000000000000000000000;;		var cl uint64
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// if bytes is not nil then this is an update operation
0000000000000000000000000000000000000000;;		if bytes != nil {
0000000000000000000000000000000000000000;;			write = "update"
0000000000000000000000000000000000000000;;			cl = (blobRange.End - blobRange.Start) + 1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		headers := b.Container.bsc.client.getStandardHeaders()
0000000000000000000000000000000000000000;;		headers["x-ms-blob-type"] = string(BlobTypePage)
0000000000000000000000000000000000000000;;		headers["x-ms-page-write"] = write
0000000000000000000000000000000000000000;;		headers["x-ms-range"] = blobRange.String()
0000000000000000000000000000000000000000;;		headers["Content-Length"] = fmt.Sprintf("%v", cl)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if options != nil {
0000000000000000000000000000000000000000;;			params = addTimeout(params, options.Timeout)
0000000000000000000000000000000000000000;;			headers = mergeHeaders(headers, headersFromStruct(*options))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		uri := b.Container.bsc.client.getEndpoint(blobServiceName, b.buildPath(), params)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := b.Container.bsc.client.exec(http.MethodPut, uri, headers, bytes, b.Container.bsc.auth)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		readAndCloseBody(resp.body)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return checkRespCode(resp.statusCode, []int{http.StatusCreated})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetPageRangesOptions includes the options for a get page ranges operation
0000000000000000000000000000000000000000;;	type GetPageRangesOptions struct {
0000000000000000000000000000000000000000;;		Timeout          uint
0000000000000000000000000000000000000000;;		Snapshot         *time.Time
0000000000000000000000000000000000000000;;		PreviousSnapshot *time.Time
0000000000000000000000000000000000000000;;		Range            *BlobRange
0000000000000000000000000000000000000000;;		LeaseID          string `header:"x-ms-lease-id"`
0000000000000000000000000000000000000000;;		RequestID        string `header:"x-ms-client-request-id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetPageRanges returns the list of valid page ranges for a page blob.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/Get-Page-Ranges
0000000000000000000000000000000000000000;;	func (b *Blob) GetPageRanges(options *GetPageRangesOptions) (GetPageRangesResponse, error) {
0000000000000000000000000000000000000000;;		params := url.Values{"comp": {"pagelist"}}
0000000000000000000000000000000000000000;;		headers := b.Container.bsc.client.getStandardHeaders()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if options != nil {
0000000000000000000000000000000000000000;;			params = addTimeout(params, options.Timeout)
0000000000000000000000000000000000000000;;			params = addSnapshot(params, options.Snapshot)
0000000000000000000000000000000000000000;;			if options.PreviousSnapshot != nil {
0000000000000000000000000000000000000000;;				params.Add("prevsnapshot", timeRfc1123Formatted(*options.PreviousSnapshot))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if options.Range != nil {
0000000000000000000000000000000000000000;;				headers["Range"] = options.Range.String()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			headers = mergeHeaders(headers, headersFromStruct(*options))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		uri := b.Container.bsc.client.getEndpoint(blobServiceName, b.buildPath(), params)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var out GetPageRangesResponse
0000000000000000000000000000000000000000;;		resp, err := b.Container.bsc.client.exec(http.MethodGet, uri, headers, nil, b.Container.bsc.auth)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return out, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err = checkRespCode(resp.statusCode, []int{http.StatusOK}); err != nil {
0000000000000000000000000000000000000000;;			return out, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err = xmlUnmarshal(resp.body, &out)
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PutPageBlob initializes an empty page blob with specified name and maximum
0000000000000000000000000000000000000000;;	// size in bytes (size must be aligned to a 512-byte boundary). A page blob must
0000000000000000000000000000000000000000;;	// be created using this method before writing pages.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/Put-Blob
0000000000000000000000000000000000000000;;	func (b *Blob) PutPageBlob(options *PutBlobOptions) error {
0000000000000000000000000000000000000000;;		if b.Properties.ContentLength%512 != 0 {
0000000000000000000000000000000000000000;;			return errors.New("Content length must be aligned to a 512-byte boundary")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		params := url.Values{}
0000000000000000000000000000000000000000;;		headers := b.Container.bsc.client.getStandardHeaders()
0000000000000000000000000000000000000000;;		headers["x-ms-blob-type"] = string(BlobTypePage)
0000000000000000000000000000000000000000;;		headers["x-ms-blob-content-length"] = fmt.Sprintf("%v", b.Properties.ContentLength)
0000000000000000000000000000000000000000;;		headers["x-ms-blob-sequence-number"] = fmt.Sprintf("%v", b.Properties.SequenceNumber)
0000000000000000000000000000000000000000;;		headers = mergeHeaders(headers, headersFromStruct(b.Properties))
0000000000000000000000000000000000000000;;		headers = b.Container.bsc.client.addMetadataToHeaders(headers, b.Metadata)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if options != nil {
0000000000000000000000000000000000000000;;			params = addTimeout(params, options.Timeout)
0000000000000000000000000000000000000000;;			headers = mergeHeaders(headers, headersFromStruct(*options))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		uri := b.Container.bsc.client.getEndpoint(blobServiceName, b.buildPath(), params)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := b.Container.bsc.client.exec(http.MethodPut, uri, headers, nil, b.Container.bsc.auth)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		readAndCloseBody(resp.body)
0000000000000000000000000000000000000000;;		return checkRespCode(resp.statusCode, []int{http.StatusCreated})
0000000000000000000000000000000000000000;;	}
