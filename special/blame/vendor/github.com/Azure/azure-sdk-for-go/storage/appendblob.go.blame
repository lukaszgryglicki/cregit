0000000000000000000000000000000000000000;;	package storage
91454efdcfe2d233cf3f75fc014b3bb9ac6e5ae7;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PutAppendBlob initializes an empty append blob with specified name. An
0000000000000000000000000000000000000000;;	// append blob must be created using this method before appending blocks.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/Put-Blob
0000000000000000000000000000000000000000;;	func (b *Blob) PutAppendBlob(options *PutBlobOptions) error {
0000000000000000000000000000000000000000;;		params := url.Values{}
0000000000000000000000000000000000000000;;		headers := b.Container.bsc.client.getStandardHeaders()
0000000000000000000000000000000000000000;;		headers["x-ms-blob-type"] = string(BlobTypeAppend)
0000000000000000000000000000000000000000;;		headers = mergeHeaders(headers, headersFromStruct(b.Properties))
0000000000000000000000000000000000000000;;		headers = b.Container.bsc.client.addMetadataToHeaders(headers, b.Metadata)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if options != nil {
0000000000000000000000000000000000000000;;			params = addTimeout(params, options.Timeout)
0000000000000000000000000000000000000000;;			headers = mergeHeaders(headers, headersFromStruct(*options))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		uri := b.Container.bsc.client.getEndpoint(blobServiceName, b.buildPath(), params)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := b.Container.bsc.client.exec(http.MethodPut, uri, headers, nil, b.Container.bsc.auth)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		readAndCloseBody(resp.body)
0000000000000000000000000000000000000000;;		return checkRespCode(resp.statusCode, []int{http.StatusCreated})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AppendBlockOptions includes the options for an append block operation
0000000000000000000000000000000000000000;;	type AppendBlockOptions struct {
0000000000000000000000000000000000000000;;		Timeout           uint
0000000000000000000000000000000000000000;;		LeaseID           string     `header:"x-ms-lease-id"`
0000000000000000000000000000000000000000;;		MaxSize           *uint      `header:"x-ms-blob-condition-maxsize"`
0000000000000000000000000000000000000000;;		AppendPosition    *uint      `header:"x-ms-blob-condition-appendpos"`
0000000000000000000000000000000000000000;;		IfModifiedSince   *time.Time `header:"If-Modified-Since"`
0000000000000000000000000000000000000000;;		IfUnmodifiedSince *time.Time `header:"If-Unmodified-Since"`
0000000000000000000000000000000000000000;;		IfMatch           string     `header:"If-Match"`
0000000000000000000000000000000000000000;;		IfNoneMatch       string     `header:"If-None-Match"`
0000000000000000000000000000000000000000;;		RequestID         string     `header:"x-ms-client-request-id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AppendBlock appends a block to an append blob.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/Append-Block
0000000000000000000000000000000000000000;;	func (b *Blob) AppendBlock(chunk []byte, options *AppendBlockOptions) error {
0000000000000000000000000000000000000000;;		params := url.Values{"comp": {"appendblock"}}
0000000000000000000000000000000000000000;;		headers := b.Container.bsc.client.getStandardHeaders()
0000000000000000000000000000000000000000;;		headers["x-ms-blob-type"] = string(BlobTypeAppend)
0000000000000000000000000000000000000000;;		headers["Content-Length"] = fmt.Sprintf("%v", len(chunk))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if options != nil {
0000000000000000000000000000000000000000;;			params = addTimeout(params, options.Timeout)
0000000000000000000000000000000000000000;;			headers = mergeHeaders(headers, headersFromStruct(*options))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		uri := b.Container.bsc.client.getEndpoint(blobServiceName, b.buildPath(), params)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := b.Container.bsc.client.exec(http.MethodPut, uri, headers, bytes.NewReader(chunk), b.Container.bsc.auth)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		readAndCloseBody(resp.body)
0000000000000000000000000000000000000000;;		return checkRespCode(resp.statusCode, []int{http.StatusCreated})
0000000000000000000000000000000000000000;;	}
