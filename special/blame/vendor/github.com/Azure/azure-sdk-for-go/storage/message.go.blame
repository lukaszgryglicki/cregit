0000000000000000000000000000000000000000;;	package storage
91454efdcfe2d233cf3f75fc014b3bb9ac6e5ae7;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/xml"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Message represents an Azure message.
0000000000000000000000000000000000000000;;	type Message struct {
0000000000000000000000000000000000000000;;		Queue        *Queue
0000000000000000000000000000000000000000;;		Text         string      `xml:"MessageText"`
0000000000000000000000000000000000000000;;		ID           string      `xml:"MessageId"`
0000000000000000000000000000000000000000;;		Insertion    TimeRFC1123 `xml:"InsertionTime"`
0000000000000000000000000000000000000000;;		Expiration   TimeRFC1123 `xml:"ExpirationTime"`
0000000000000000000000000000000000000000;;		PopReceipt   string      `xml:"PopReceipt"`
0000000000000000000000000000000000000000;;		NextVisible  TimeRFC1123 `xml:"TimeNextVisible"`
0000000000000000000000000000000000000000;;		DequeueCount int         `xml:"DequeueCount"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *Message) buildPath() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%s/%s", m.Queue.buildPathMessages(), m.ID)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PutMessageOptions is the set of options can be specified for Put Messsage
0000000000000000000000000000000000000000;;	// operation. A zero struct does not use any preferences for the request.
0000000000000000000000000000000000000000;;	type PutMessageOptions struct {
0000000000000000000000000000000000000000;;		Timeout           uint
0000000000000000000000000000000000000000;;		VisibilityTimeout int
0000000000000000000000000000000000000000;;		MessageTTL        int
0000000000000000000000000000000000000000;;		RequestID         string `header:"x-ms-client-request-id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Put operation adds a new message to the back of the message queue.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/Put-Message
0000000000000000000000000000000000000000;;	func (m *Message) Put(options *PutMessageOptions) error {
0000000000000000000000000000000000000000;;		query := url.Values{}
0000000000000000000000000000000000000000;;		headers := m.Queue.qsc.client.getStandardHeaders()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req := putMessageRequest{MessageText: m.Text}
0000000000000000000000000000000000000000;;		body, nn, err := xmlMarshal(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		headers["Content-Length"] = strconv.Itoa(nn)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if options != nil {
0000000000000000000000000000000000000000;;			if options.VisibilityTimeout != 0 {
0000000000000000000000000000000000000000;;				query.Set("visibilitytimeout", strconv.Itoa(options.VisibilityTimeout))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if options.MessageTTL != 0 {
0000000000000000000000000000000000000000;;				query.Set("messagettl", strconv.Itoa(options.MessageTTL))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			query = addTimeout(query, options.Timeout)
0000000000000000000000000000000000000000;;			headers = mergeHeaders(headers, headersFromStruct(*options))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		uri := m.Queue.qsc.client.getEndpoint(queueServiceName, m.Queue.buildPathMessages(), query)
0000000000000000000000000000000000000000;;		resp, err := m.Queue.qsc.client.exec(http.MethodPost, uri, headers, body, m.Queue.qsc.auth)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer readAndCloseBody(resp.body)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = xmlUnmarshal(resp.body, m)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return checkRespCode(resp.statusCode, []int{http.StatusCreated})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateMessageOptions is the set of options can be specified for Update Messsage
0000000000000000000000000000000000000000;;	// operation. A zero struct does not use any preferences for the request.
0000000000000000000000000000000000000000;;	type UpdateMessageOptions struct {
0000000000000000000000000000000000000000;;		Timeout           uint
0000000000000000000000000000000000000000;;		VisibilityTimeout int
0000000000000000000000000000000000000000;;		RequestID         string `header:"x-ms-client-request-id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Update operation updates the specified message.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/Update-Message
0000000000000000000000000000000000000000;;	func (m *Message) Update(options *UpdateMessageOptions) error {
0000000000000000000000000000000000000000;;		query := url.Values{}
0000000000000000000000000000000000000000;;		if m.PopReceipt != "" {
0000000000000000000000000000000000000000;;			query.Set("popreceipt", m.PopReceipt)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		headers := m.Queue.qsc.client.getStandardHeaders()
0000000000000000000000000000000000000000;;		req := putMessageRequest{MessageText: m.Text}
0000000000000000000000000000000000000000;;		body, nn, err := xmlMarshal(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		headers["Content-Length"] = strconv.Itoa(nn)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if options != nil {
0000000000000000000000000000000000000000;;			if options.VisibilityTimeout != 0 {
0000000000000000000000000000000000000000;;				query.Set("visibilitytimeout", strconv.Itoa(options.VisibilityTimeout))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			query = addTimeout(query, options.Timeout)
0000000000000000000000000000000000000000;;			headers = mergeHeaders(headers, headersFromStruct(*options))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		uri := m.Queue.qsc.client.getEndpoint(queueServiceName, m.buildPath(), query)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := m.Queue.qsc.client.exec(http.MethodPut, uri, headers, body, m.Queue.qsc.auth)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer readAndCloseBody(resp.body)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		m.PopReceipt = resp.headers.Get("x-ms-popreceipt")
0000000000000000000000000000000000000000;;		nextTimeStr := resp.headers.Get("x-ms-time-next-visible")
0000000000000000000000000000000000000000;;		if nextTimeStr != "" {
0000000000000000000000000000000000000000;;			nextTime, err := time.Parse(time.RFC1123, nextTimeStr)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			m.NextVisible = TimeRFC1123(nextTime)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return checkRespCode(resp.statusCode, []int{http.StatusNoContent})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Delete operation deletes the specified message.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See https://msdn.microsoft.com/en-us/library/azure/dd179347.aspx
0000000000000000000000000000000000000000;;	func (m *Message) Delete(options *QueueServiceOptions) error {
0000000000000000000000000000000000000000;;		params := url.Values{"popreceipt": {m.PopReceipt}}
0000000000000000000000000000000000000000;;		headers := m.Queue.qsc.client.getStandardHeaders()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if options != nil {
0000000000000000000000000000000000000000;;			params = addTimeout(params, options.Timeout)
0000000000000000000000000000000000000000;;			headers = mergeHeaders(headers, headersFromStruct(*options))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		uri := m.Queue.qsc.client.getEndpoint(queueServiceName, m.buildPath(), params)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := m.Queue.qsc.client.exec(http.MethodDelete, uri, headers, nil, m.Queue.qsc.auth)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		readAndCloseBody(resp.body)
0000000000000000000000000000000000000000;;		return checkRespCode(resp.statusCode, []int{http.StatusNoContent})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type putMessageRequest struct {
0000000000000000000000000000000000000000;;		XMLName     xml.Name `xml:"QueueMessage"`
0000000000000000000000000000000000000000;;		MessageText string   `xml:"MessageText"`
0000000000000000000000000000000000000000;;	}
