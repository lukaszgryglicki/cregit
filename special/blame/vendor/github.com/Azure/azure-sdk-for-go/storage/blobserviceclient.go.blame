0000000000000000000000000000000000000000;;	package storage
91454efdcfe2d233cf3f75fc014b3bb9ac6e5ae7;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BlobStorageClient contains operations for Microsoft Azure Blob Storage
0000000000000000000000000000000000000000;;	// Service.
0000000000000000000000000000000000000000;;	type BlobStorageClient struct {
0000000000000000000000000000000000000000;;		client Client
0000000000000000000000000000000000000000;;		auth   authentication
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetServiceProperties gets the properties of your storage account's blob service.
0000000000000000000000000000000000000000;;	// See: https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/get-blob-service-properties
0000000000000000000000000000000000000000;;	func (b *BlobStorageClient) GetServiceProperties() (*ServiceProperties, error) {
0000000000000000000000000000000000000000;;		return b.client.getServiceProperties(blobServiceName, b.auth)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetServiceProperties sets the properties of your storage account's blob service.
0000000000000000000000000000000000000000;;	// See: https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/set-blob-service-properties
0000000000000000000000000000000000000000;;	func (b *BlobStorageClient) SetServiceProperties(props ServiceProperties) error {
0000000000000000000000000000000000000000;;		return b.client.setServiceProperties(props, blobServiceName, b.auth)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListContainersParameters defines the set of customizable parameters to make a
0000000000000000000000000000000000000000;;	// List Containers call.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See https://msdn.microsoft.com/en-us/library/azure/dd179352.aspx
0000000000000000000000000000000000000000;;	type ListContainersParameters struct {
0000000000000000000000000000000000000000;;		Prefix     string
0000000000000000000000000000000000000000;;		Marker     string
0000000000000000000000000000000000000000;;		Include    string
0000000000000000000000000000000000000000;;		MaxResults uint
0000000000000000000000000000000000000000;;		Timeout    uint
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetContainerReference returns a Container object for the specified container name.
0000000000000000000000000000000000000000;;	func (b *BlobStorageClient) GetContainerReference(name string) *Container {
0000000000000000000000000000000000000000;;		return &Container{
0000000000000000000000000000000000000000;;			bsc:  b,
0000000000000000000000000000000000000000;;			Name: name,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListContainers returns the list of containers in a storage account along with
0000000000000000000000000000000000000000;;	// pagination token and other response details.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See https://msdn.microsoft.com/en-us/library/azure/dd179352.aspx
0000000000000000000000000000000000000000;;	func (b BlobStorageClient) ListContainers(params ListContainersParameters) (*ContainerListResponse, error) {
0000000000000000000000000000000000000000;;		q := mergeParams(params.getParameters(), url.Values{"comp": {"list"}})
0000000000000000000000000000000000000000;;		uri := b.client.getEndpoint(blobServiceName, "", q)
0000000000000000000000000000000000000000;;		headers := b.client.getStandardHeaders()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var out ContainerListResponse
0000000000000000000000000000000000000000;;		resp, err := b.client.exec(http.MethodGet, uri, headers, nil, b.auth)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.body.Close()
0000000000000000000000000000000000000000;;		err = xmlUnmarshal(resp.body, &out)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// assign our client to the newly created Container objects
0000000000000000000000000000000000000000;;		for i := range out.Containers {
0000000000000000000000000000000000000000;;			out.Containers[i].bsc = &b
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p ListContainersParameters) getParameters() url.Values {
0000000000000000000000000000000000000000;;		out := url.Values{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if p.Prefix != "" {
0000000000000000000000000000000000000000;;			out.Set("prefix", p.Prefix)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if p.Marker != "" {
0000000000000000000000000000000000000000;;			out.Set("marker", p.Marker)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if p.Include != "" {
0000000000000000000000000000000000000000;;			out.Set("include", p.Include)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if p.MaxResults != 0 {
0000000000000000000000000000000000000000;;			out.Set("maxresults", strconv.FormatUint(uint64(p.MaxResults), 10))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if p.Timeout != 0 {
0000000000000000000000000000000000000000;;			out.Set("timeout", strconv.FormatUint(uint64(p.Timeout), 10))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return out
0000000000000000000000000000000000000000;;	}
