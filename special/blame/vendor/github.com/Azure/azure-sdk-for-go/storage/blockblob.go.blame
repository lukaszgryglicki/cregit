0000000000000000000000000000000000000000;;	package storage
91454efdcfe2d233cf3f75fc014b3bb9ac6e5ae7;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/xml"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BlockListType is used to filter out types of blocks in a Get Blocks List call
0000000000000000000000000000000000000000;;	// for a block blob.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See https://msdn.microsoft.com/en-us/library/azure/dd179400.aspx for all
0000000000000000000000000000000000000000;;	// block types.
0000000000000000000000000000000000000000;;	type BlockListType string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Filters for listing blocks in block blobs
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		BlockListTypeAll         BlockListType = "all"
0000000000000000000000000000000000000000;;		BlockListTypeCommitted   BlockListType = "committed"
0000000000000000000000000000000000000000;;		BlockListTypeUncommitted BlockListType = "uncommitted"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Maximum sizes (per REST API) for various concepts
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		MaxBlobBlockSize = 100 * 1024 * 1024
0000000000000000000000000000000000000000;;		MaxBlobPageSize  = 4 * 1024 * 1024
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BlockStatus defines states a block for a block blob can
0000000000000000000000000000000000000000;;	// be in.
0000000000000000000000000000000000000000;;	type BlockStatus string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List of statuses that can be used to refer to a block in a block list
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		BlockStatusUncommitted BlockStatus = "Uncommitted"
0000000000000000000000000000000000000000;;		BlockStatusCommitted   BlockStatus = "Committed"
0000000000000000000000000000000000000000;;		BlockStatusLatest      BlockStatus = "Latest"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Block is used to create Block entities for Put Block List
0000000000000000000000000000000000000000;;	// call.
0000000000000000000000000000000000000000;;	type Block struct {
0000000000000000000000000000000000000000;;		ID     string
0000000000000000000000000000000000000000;;		Status BlockStatus
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BlockListResponse contains the response fields from Get Block List call.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See https://msdn.microsoft.com/en-us/library/azure/dd179400.aspx
0000000000000000000000000000000000000000;;	type BlockListResponse struct {
0000000000000000000000000000000000000000;;		XMLName           xml.Name        `xml:"BlockList"`
0000000000000000000000000000000000000000;;		CommittedBlocks   []BlockResponse `xml:"CommittedBlocks>Block"`
0000000000000000000000000000000000000000;;		UncommittedBlocks []BlockResponse `xml:"UncommittedBlocks>Block"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BlockResponse contains the block information returned
0000000000000000000000000000000000000000;;	// in the GetBlockListCall.
0000000000000000000000000000000000000000;;	type BlockResponse struct {
0000000000000000000000000000000000000000;;		Name string `xml:"Name"`
0000000000000000000000000000000000000000;;		Size int64  `xml:"Size"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateBlockBlob initializes an empty block blob with no blocks.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/Put-Blob
0000000000000000000000000000000000000000;;	func (b *Blob) CreateBlockBlob(options *PutBlobOptions) error {
0000000000000000000000000000000000000000;;		return b.CreateBlockBlobFromReader(nil, options)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateBlockBlobFromReader initializes a block blob using data from
0000000000000000000000000000000000000000;;	// reader. Size must be the number of bytes read from reader. To
0000000000000000000000000000000000000000;;	// create an empty blob, use size==0 and reader==nil.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The API rejects requests with size > 256 MiB (but this limit is not
0000000000000000000000000000000000000000;;	// checked by the SDK). To write a larger blob, use CreateBlockBlob,
0000000000000000000000000000000000000000;;	// PutBlock, and PutBlockList.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/Put-Blob
0000000000000000000000000000000000000000;;	func (b *Blob) CreateBlockBlobFromReader(blob io.Reader, options *PutBlobOptions) error {
0000000000000000000000000000000000000000;;		params := url.Values{}
0000000000000000000000000000000000000000;;		headers := b.Container.bsc.client.getStandardHeaders()
0000000000000000000000000000000000000000;;		headers["x-ms-blob-type"] = string(BlobTypeBlock)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		headers["Content-Length"] = "0"
0000000000000000000000000000000000000000;;		var n int64
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		if blob != nil {
0000000000000000000000000000000000000000;;			buf := &bytes.Buffer{}
0000000000000000000000000000000000000000;;			n, err = io.Copy(buf, blob)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			blob = buf
0000000000000000000000000000000000000000;;			headers["Content-Length"] = strconv.FormatInt(n, 10)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		b.Properties.ContentLength = n
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		headers = mergeHeaders(headers, headersFromStruct(b.Properties))
0000000000000000000000000000000000000000;;		headers = b.Container.bsc.client.addMetadataToHeaders(headers, b.Metadata)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if options != nil {
0000000000000000000000000000000000000000;;			params = addTimeout(params, options.Timeout)
0000000000000000000000000000000000000000;;			headers = mergeHeaders(headers, headersFromStruct(*options))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		uri := b.Container.bsc.client.getEndpoint(blobServiceName, b.buildPath(), params)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := b.Container.bsc.client.exec(http.MethodPut, uri, headers, blob, b.Container.bsc.auth)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		readAndCloseBody(resp.body)
0000000000000000000000000000000000000000;;		return checkRespCode(resp.statusCode, []int{http.StatusCreated})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PutBlockOptions includes the options for a put block operation
0000000000000000000000000000000000000000;;	type PutBlockOptions struct {
0000000000000000000000000000000000000000;;		Timeout    uint
0000000000000000000000000000000000000000;;		LeaseID    string `header:"x-ms-lease-id"`
0000000000000000000000000000000000000000;;		ContentMD5 string `header:"Content-MD5"`
0000000000000000000000000000000000000000;;		RequestID  string `header:"x-ms-client-request-id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PutBlock saves the given data chunk to the specified block blob with
0000000000000000000000000000000000000000;;	// given ID.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The API rejects chunks larger than 100 MiB (but this limit is not
0000000000000000000000000000000000000000;;	// checked by the SDK).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/Put-Block
0000000000000000000000000000000000000000;;	func (b *Blob) PutBlock(blockID string, chunk []byte, options *PutBlockOptions) error {
0000000000000000000000000000000000000000;;		return b.PutBlockWithLength(blockID, uint64(len(chunk)), bytes.NewReader(chunk), options)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PutBlockWithLength saves the given data stream of exactly specified size to
0000000000000000000000000000000000000000;;	// the block blob with given ID. It is an alternative to PutBlocks where data
0000000000000000000000000000000000000000;;	// comes as stream but the length is known in advance.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The API rejects requests with size > 100 MiB (but this limit is not
0000000000000000000000000000000000000000;;	// checked by the SDK).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/Put-Block
0000000000000000000000000000000000000000;;	func (b *Blob) PutBlockWithLength(blockID string, size uint64, blob io.Reader, options *PutBlockOptions) error {
0000000000000000000000000000000000000000;;		query := url.Values{
0000000000000000000000000000000000000000;;			"comp":    {"block"},
0000000000000000000000000000000000000000;;			"blockid": {blockID},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		headers := b.Container.bsc.client.getStandardHeaders()
0000000000000000000000000000000000000000;;		headers["Content-Length"] = fmt.Sprintf("%v", size)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if options != nil {
0000000000000000000000000000000000000000;;			query = addTimeout(query, options.Timeout)
0000000000000000000000000000000000000000;;			headers = mergeHeaders(headers, headersFromStruct(*options))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		uri := b.Container.bsc.client.getEndpoint(blobServiceName, b.buildPath(), query)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := b.Container.bsc.client.exec(http.MethodPut, uri, headers, blob, b.Container.bsc.auth)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		readAndCloseBody(resp.body)
0000000000000000000000000000000000000000;;		return checkRespCode(resp.statusCode, []int{http.StatusCreated})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PutBlockListOptions includes the options for a put block list operation
0000000000000000000000000000000000000000;;	type PutBlockListOptions struct {
0000000000000000000000000000000000000000;;		Timeout           uint
0000000000000000000000000000000000000000;;		LeaseID           string     `header:"x-ms-lease-id"`
0000000000000000000000000000000000000000;;		IfModifiedSince   *time.Time `header:"If-Modified-Since"`
0000000000000000000000000000000000000000;;		IfUnmodifiedSince *time.Time `header:"If-Unmodified-Since"`
0000000000000000000000000000000000000000;;		IfMatch           string     `header:"If-Match"`
0000000000000000000000000000000000000000;;		IfNoneMatch       string     `header:"If-None-Match"`
0000000000000000000000000000000000000000;;		RequestID         string     `header:"x-ms-client-request-id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PutBlockList saves list of blocks to the specified block blob.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/Put-Block-List
0000000000000000000000000000000000000000;;	func (b *Blob) PutBlockList(blocks []Block, options *PutBlockListOptions) error {
0000000000000000000000000000000000000000;;		params := url.Values{"comp": {"blocklist"}}
0000000000000000000000000000000000000000;;		blockListXML := prepareBlockListRequest(blocks)
0000000000000000000000000000000000000000;;		headers := b.Container.bsc.client.getStandardHeaders()
0000000000000000000000000000000000000000;;		headers["Content-Length"] = fmt.Sprintf("%v", len(blockListXML))
0000000000000000000000000000000000000000;;		headers = mergeHeaders(headers, headersFromStruct(b.Properties))
0000000000000000000000000000000000000000;;		headers = b.Container.bsc.client.addMetadataToHeaders(headers, b.Metadata)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if options != nil {
0000000000000000000000000000000000000000;;			params = addTimeout(params, options.Timeout)
0000000000000000000000000000000000000000;;			headers = mergeHeaders(headers, headersFromStruct(*options))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		uri := b.Container.bsc.client.getEndpoint(blobServiceName, b.buildPath(), params)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := b.Container.bsc.client.exec(http.MethodPut, uri, headers, strings.NewReader(blockListXML), b.Container.bsc.auth)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		readAndCloseBody(resp.body)
0000000000000000000000000000000000000000;;		return checkRespCode(resp.statusCode, []int{http.StatusCreated})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetBlockListOptions includes the options for a get block list operation
0000000000000000000000000000000000000000;;	type GetBlockListOptions struct {
0000000000000000000000000000000000000000;;		Timeout   uint
0000000000000000000000000000000000000000;;		Snapshot  *time.Time
0000000000000000000000000000000000000000;;		LeaseID   string `header:"x-ms-lease-id"`
0000000000000000000000000000000000000000;;		RequestID string `header:"x-ms-client-request-id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetBlockList retrieves list of blocks in the specified block blob.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/Get-Block-List
0000000000000000000000000000000000000000;;	func (b *Blob) GetBlockList(blockType BlockListType, options *GetBlockListOptions) (BlockListResponse, error) {
0000000000000000000000000000000000000000;;		params := url.Values{
0000000000000000000000000000000000000000;;			"comp":          {"blocklist"},
0000000000000000000000000000000000000000;;			"blocklisttype": {string(blockType)},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		headers := b.Container.bsc.client.getStandardHeaders()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if options != nil {
0000000000000000000000000000000000000000;;			params = addTimeout(params, options.Timeout)
0000000000000000000000000000000000000000;;			params = addSnapshot(params, options.Snapshot)
0000000000000000000000000000000000000000;;			headers = mergeHeaders(headers, headersFromStruct(*options))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		uri := b.Container.bsc.client.getEndpoint(blobServiceName, b.buildPath(), params)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var out BlockListResponse
0000000000000000000000000000000000000000;;		resp, err := b.Container.bsc.client.exec(http.MethodGet, uri, headers, nil, b.Container.bsc.auth)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return out, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = xmlUnmarshal(resp.body, &out)
0000000000000000000000000000000000000000;;		return out, err
0000000000000000000000000000000000000000;;	}
