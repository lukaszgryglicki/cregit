0000000000000000000000000000000000000000;;	package storage
91454efdcfe2d233cf3f75fc014b3bb9ac6e5ae7;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetSASURIWithSignedIPAndProtocol creates an URL to the specified blob which contains the Shared
0000000000000000000000000000000000000000;;	// Access Signature with specified permissions and expiration time. Also includes signedIPRange and allowed protocols.
0000000000000000000000000000000000000000;;	// If old API version is used but no signedIP is passed (ie empty string) then this should still work.
0000000000000000000000000000000000000000;;	// We only populate the signedIP when it non-empty.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See https://msdn.microsoft.com/en-us/library/azure/ee395415.aspx
0000000000000000000000000000000000000000;;	func (b *Blob) GetSASURIWithSignedIPAndProtocol(expiry time.Time, permissions string, signedIPRange string, HTTPSOnly bool) (string, error) {
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			signedPermissions = permissions
0000000000000000000000000000000000000000;;			blobURL           = b.GetURL()
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		canonicalizedResource, err := b.Container.bsc.client.buildCanonicalizedResource(blobURL, b.Container.bsc.auth)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// "The canonicalizedresouce portion of the string is a canonical path to the signed resource.
0000000000000000000000000000000000000000;;		// It must include the service name (blob, table, queue or file) for version 2015-02-21 or
0000000000000000000000000000000000000000;;		// later, the storage account name, and the resource name, and must be URL-decoded.
0000000000000000000000000000000000000000;;		// -- https://msdn.microsoft.com/en-us/library/azure/dn140255.aspx
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// We need to replace + with %2b first to avoid being treated as a space (which is correct for query strings, but not the path component).
0000000000000000000000000000000000000000;;		canonicalizedResource = strings.Replace(canonicalizedResource, "+", "%2b", -1)
0000000000000000000000000000000000000000;;		canonicalizedResource, err = url.QueryUnescape(canonicalizedResource)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		signedExpiry := expiry.UTC().Format(time.RFC3339)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		//If blob name is missing, resource is a container
0000000000000000000000000000000000000000;;		signedResource := "c"
0000000000000000000000000000000000000000;;		if len(b.Name) > 0 {
0000000000000000000000000000000000000000;;			signedResource = "b"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		protocols := "https,http"
0000000000000000000000000000000000000000;;		if HTTPSOnly {
0000000000000000000000000000000000000000;;			protocols = "https"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		stringToSign, err := blobSASStringToSign(b.Container.bsc.client.apiVersion, canonicalizedResource, signedExpiry, signedPermissions, signedIPRange, protocols)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		sig := b.Container.bsc.client.computeHmac256(stringToSign)
0000000000000000000000000000000000000000;;		sasParams := url.Values{
0000000000000000000000000000000000000000;;			"sv":  {b.Container.bsc.client.apiVersion},
0000000000000000000000000000000000000000;;			"se":  {signedExpiry},
0000000000000000000000000000000000000000;;			"sr":  {signedResource},
0000000000000000000000000000000000000000;;			"sp":  {signedPermissions},
0000000000000000000000000000000000000000;;			"sig": {sig},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if b.Container.bsc.client.apiVersion >= "2015-04-05" {
0000000000000000000000000000000000000000;;			sasParams.Add("spr", protocols)
0000000000000000000000000000000000000000;;			if signedIPRange != "" {
0000000000000000000000000000000000000000;;				sasParams.Add("sip", signedIPRange)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		sasURL, err := url.Parse(blobURL)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sasURL.RawQuery = sasParams.Encode()
0000000000000000000000000000000000000000;;		return sasURL.String(), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetSASURI creates an URL to the specified blob which contains the Shared
0000000000000000000000000000000000000000;;	// Access Signature with specified permissions and expiration time.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See https://msdn.microsoft.com/en-us/library/azure/ee395415.aspx
0000000000000000000000000000000000000000;;	func (b *Blob) GetSASURI(expiry time.Time, permissions string) (string, error) {
0000000000000000000000000000000000000000;;		return b.GetSASURIWithSignedIPAndProtocol(expiry, permissions, "", false)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func blobSASStringToSign(signedVersion, canonicalizedResource, signedExpiry, signedPermissions string, signedIP string, protocols string) (string, error) {
0000000000000000000000000000000000000000;;		var signedStart, signedIdentifier, rscc, rscd, rsce, rscl, rsct string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if signedVersion >= "2015-02-21" {
0000000000000000000000000000000000000000;;			canonicalizedResource = "/blob" + canonicalizedResource
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// https://msdn.microsoft.com/en-us/library/azure/dn140255.aspx#Anchor_12
0000000000000000000000000000000000000000;;		if signedVersion >= "2015-04-05" {
0000000000000000000000000000000000000000;;			return fmt.Sprintf("%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s", signedPermissions, signedStart, signedExpiry, canonicalizedResource, signedIdentifier, signedIP, protocols, signedVersion, rscc, rscd, rsce, rscl, rsct), nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// reference: http://msdn.microsoft.com/en-us/library/azure/dn140255.aspx
0000000000000000000000000000000000000000;;		if signedVersion >= "2013-08-15" {
0000000000000000000000000000000000000000;;			return fmt.Sprintf("%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s", signedPermissions, signedStart, signedExpiry, canonicalizedResource, signedIdentifier, signedVersion, rscc, rscd, rsce, rscl, rsct), nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return "", errors.New("storage: not implemented SAS for versions earlier than 2013-08-15")
0000000000000000000000000000000000000000;;	}
