0000000000000000000000000000000000000000;;	package storage
91454efdcfe2d233cf3f75fc014b3bb9ac6e5ae7;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ServiceProperties represents the storage account service properties
0000000000000000000000000000000000000000;;	type ServiceProperties struct {
0000000000000000000000000000000000000000;;		Logging       *Logging
0000000000000000000000000000000000000000;;		HourMetrics   *Metrics
0000000000000000000000000000000000000000;;		MinuteMetrics *Metrics
0000000000000000000000000000000000000000;;		Cors          *Cors
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Logging represents the Azure Analytics Logging settings
0000000000000000000000000000000000000000;;	type Logging struct {
0000000000000000000000000000000000000000;;		Version         string
0000000000000000000000000000000000000000;;		Delete          bool
0000000000000000000000000000000000000000;;		Read            bool
0000000000000000000000000000000000000000;;		Write           bool
0000000000000000000000000000000000000000;;		RetentionPolicy *RetentionPolicy
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RetentionPolicy indicates if retention is enabled and for how many days
0000000000000000000000000000000000000000;;	type RetentionPolicy struct {
0000000000000000000000000000000000000000;;		Enabled bool
0000000000000000000000000000000000000000;;		Days    *int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Metrics provide request statistics.
0000000000000000000000000000000000000000;;	type Metrics struct {
0000000000000000000000000000000000000000;;		Version         string
0000000000000000000000000000000000000000;;		Enabled         bool
0000000000000000000000000000000000000000;;		IncludeAPIs     *bool
0000000000000000000000000000000000000000;;		RetentionPolicy *RetentionPolicy
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Cors includes all the CORS rules
0000000000000000000000000000000000000000;;	type Cors struct {
0000000000000000000000000000000000000000;;		CorsRule []CorsRule
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CorsRule includes all settings for a Cors rule
0000000000000000000000000000000000000000;;	type CorsRule struct {
0000000000000000000000000000000000000000;;		AllowedOrigins  string
0000000000000000000000000000000000000000;;		AllowedMethods  string
0000000000000000000000000000000000000000;;		MaxAgeInSeconds int
0000000000000000000000000000000000000000;;		ExposedHeaders  string
0000000000000000000000000000000000000000;;		AllowedHeaders  string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c Client) getServiceProperties(service string, auth authentication) (*ServiceProperties, error) {
0000000000000000000000000000000000000000;;		query := url.Values{
0000000000000000000000000000000000000000;;			"restype": {"service"},
0000000000000000000000000000000000000000;;			"comp":    {"properties"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		uri := c.getEndpoint(service, "", query)
0000000000000000000000000000000000000000;;		headers := c.getStandardHeaders()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := c.exec(http.MethodGet, uri, headers, nil, auth)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := checkRespCode(resp.statusCode, []int{http.StatusOK}); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var out ServiceProperties
0000000000000000000000000000000000000000;;		err = xmlUnmarshal(resp.body, &out)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &out, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c Client) setServiceProperties(props ServiceProperties, service string, auth authentication) error {
0000000000000000000000000000000000000000;;		query := url.Values{
0000000000000000000000000000000000000000;;			"restype": {"service"},
0000000000000000000000000000000000000000;;			"comp":    {"properties"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		uri := c.getEndpoint(service, "", query)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Ideally, StorageServiceProperties would be the output struct
0000000000000000000000000000000000000000;;		// This is to avoid golint stuttering, while generating the correct XML
0000000000000000000000000000000000000000;;		type StorageServiceProperties struct {
0000000000000000000000000000000000000000;;			Logging       *Logging
0000000000000000000000000000000000000000;;			HourMetrics   *Metrics
0000000000000000000000000000000000000000;;			MinuteMetrics *Metrics
0000000000000000000000000000000000000000;;			Cors          *Cors
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		input := StorageServiceProperties{
0000000000000000000000000000000000000000;;			Logging:       props.Logging,
0000000000000000000000000000000000000000;;			HourMetrics:   props.HourMetrics,
0000000000000000000000000000000000000000;;			MinuteMetrics: props.MinuteMetrics,
0000000000000000000000000000000000000000;;			Cors:          props.Cors,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		body, length, err := xmlMarshal(input)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		headers := c.getStandardHeaders()
0000000000000000000000000000000000000000;;		headers["Content-Length"] = strconv.Itoa(length)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := c.exec(http.MethodPut, uri, headers, body, auth)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		readAndCloseBody(resp.body)
0000000000000000000000000000000000000000;;		return checkRespCode(resp.statusCode, []int{http.StatusAccepted})
0000000000000000000000000000000000000000;;	}
