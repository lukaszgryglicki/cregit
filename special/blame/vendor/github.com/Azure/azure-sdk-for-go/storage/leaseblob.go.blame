0000000000000000000000000000000000000000;;	package storage
91454efdcfe2d233cf3f75fc014b3bb9ac6e5ae7;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// lease constants.
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		leaseHeaderPrefix = "x-ms-lease-"
0000000000000000000000000000000000000000;;		headerLeaseID     = "x-ms-lease-id"
0000000000000000000000000000000000000000;;		leaseAction       = "x-ms-lease-action"
0000000000000000000000000000000000000000;;		leaseBreakPeriod  = "x-ms-lease-break-period"
0000000000000000000000000000000000000000;;		leaseDuration     = "x-ms-lease-duration"
0000000000000000000000000000000000000000;;		leaseProposedID   = "x-ms-proposed-lease-id"
0000000000000000000000000000000000000000;;		leaseTime         = "x-ms-lease-time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		acquireLease = "acquire"
0000000000000000000000000000000000000000;;		renewLease   = "renew"
0000000000000000000000000000000000000000;;		changeLease  = "change"
0000000000000000000000000000000000000000;;		releaseLease = "release"
0000000000000000000000000000000000000000;;		breakLease   = "break"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// leasePut is common PUT code for the various acquire/release/break etc functions.
0000000000000000000000000000000000000000;;	func (b *Blob) leaseCommonPut(headers map[string]string, expectedStatus int, options *LeaseOptions) (http.Header, error) {
0000000000000000000000000000000000000000;;		params := url.Values{"comp": {"lease"}}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if options != nil {
0000000000000000000000000000000000000000;;			params = addTimeout(params, options.Timeout)
0000000000000000000000000000000000000000;;			headers = mergeHeaders(headers, headersFromStruct(*options))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		uri := b.Container.bsc.client.getEndpoint(blobServiceName, b.buildPath(), params)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := b.Container.bsc.client.exec(http.MethodPut, uri, headers, nil, b.Container.bsc.auth)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer readAndCloseBody(resp.body)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := checkRespCode(resp.statusCode, []int{expectedStatus}); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp.headers, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LeaseOptions includes options for all operations regarding leasing blobs
0000000000000000000000000000000000000000;;	type LeaseOptions struct {
0000000000000000000000000000000000000000;;		Timeout           uint
0000000000000000000000000000000000000000;;		Origin            string     `header:"Origin"`
0000000000000000000000000000000000000000;;		IfMatch           string     `header:"If-Match"`
0000000000000000000000000000000000000000;;		IfNoneMatch       string     `header:"If-None-Match"`
0000000000000000000000000000000000000000;;		IfModifiedSince   *time.Time `header:"If-Modified-Since"`
0000000000000000000000000000000000000000;;		IfUnmodifiedSince *time.Time `header:"If-Unmodified-Since"`
0000000000000000000000000000000000000000;;		RequestID         string     `header:"x-ms-client-request-id"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AcquireLease creates a lease for a blob
0000000000000000000000000000000000000000;;	// returns leaseID acquired
0000000000000000000000000000000000000000;;	// In API Versions starting on 2012-02-12, the minimum leaseTimeInSeconds is 15, the maximum
0000000000000000000000000000000000000000;;	// non-infinite leaseTimeInSeconds is 60. To specify an infinite lease, provide the value -1.
0000000000000000000000000000000000000000;;	// See https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/Lease-Blob
0000000000000000000000000000000000000000;;	func (b *Blob) AcquireLease(leaseTimeInSeconds int, proposedLeaseID string, options *LeaseOptions) (returnedLeaseID string, err error) {
0000000000000000000000000000000000000000;;		headers := b.Container.bsc.client.getStandardHeaders()
0000000000000000000000000000000000000000;;		headers[leaseAction] = acquireLease
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if leaseTimeInSeconds == -1 {
0000000000000000000000000000000000000000;;			// Do nothing, but don't trigger the following clauses.
0000000000000000000000000000000000000000;;		} else if leaseTimeInSeconds > 60 || b.Container.bsc.client.apiVersion < "2012-02-12" {
0000000000000000000000000000000000000000;;			leaseTimeInSeconds = 60
0000000000000000000000000000000000000000;;		} else if leaseTimeInSeconds < 15 {
0000000000000000000000000000000000000000;;			leaseTimeInSeconds = 15
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		headers[leaseDuration] = strconv.Itoa(leaseTimeInSeconds)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if proposedLeaseID != "" {
0000000000000000000000000000000000000000;;			headers[leaseProposedID] = proposedLeaseID
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		respHeaders, err := b.leaseCommonPut(headers, http.StatusCreated, options)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		returnedLeaseID = respHeaders.Get(http.CanonicalHeaderKey(headerLeaseID))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if returnedLeaseID != "" {
0000000000000000000000000000000000000000;;			return returnedLeaseID, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return "", errors.New("LeaseID not returned")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BreakLease breaks the lease for a blob
0000000000000000000000000000000000000000;;	// Returns the timeout remaining in the lease in seconds
0000000000000000000000000000000000000000;;	// See https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/Lease-Blob
0000000000000000000000000000000000000000;;	func (b *Blob) BreakLease(options *LeaseOptions) (breakTimeout int, err error) {
0000000000000000000000000000000000000000;;		headers := b.Container.bsc.client.getStandardHeaders()
0000000000000000000000000000000000000000;;		headers[leaseAction] = breakLease
0000000000000000000000000000000000000000;;		return b.breakLeaseCommon(headers, options)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BreakLeaseWithBreakPeriod breaks the lease for a blob
0000000000000000000000000000000000000000;;	// breakPeriodInSeconds is used to determine how long until new lease can be created.
0000000000000000000000000000000000000000;;	// Returns the timeout remaining in the lease in seconds
0000000000000000000000000000000000000000;;	// See https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/Lease-Blob
0000000000000000000000000000000000000000;;	func (b *Blob) BreakLeaseWithBreakPeriod(breakPeriodInSeconds int, options *LeaseOptions) (breakTimeout int, err error) {
0000000000000000000000000000000000000000;;		headers := b.Container.bsc.client.getStandardHeaders()
0000000000000000000000000000000000000000;;		headers[leaseAction] = breakLease
0000000000000000000000000000000000000000;;		headers[leaseBreakPeriod] = strconv.Itoa(breakPeriodInSeconds)
0000000000000000000000000000000000000000;;		return b.breakLeaseCommon(headers, options)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// breakLeaseCommon is common code for both version of BreakLease (with and without break period)
0000000000000000000000000000000000000000;;	func (b *Blob) breakLeaseCommon(headers map[string]string, options *LeaseOptions) (breakTimeout int, err error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		respHeaders, err := b.leaseCommonPut(headers, http.StatusAccepted, options)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		breakTimeoutStr := respHeaders.Get(http.CanonicalHeaderKey(leaseTime))
0000000000000000000000000000000000000000;;		if breakTimeoutStr != "" {
0000000000000000000000000000000000000000;;			breakTimeout, err = strconv.Atoi(breakTimeoutStr)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return 0, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return breakTimeout, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ChangeLease changes a lease ID for a blob
0000000000000000000000000000000000000000;;	// Returns the new LeaseID acquired
0000000000000000000000000000000000000000;;	// See https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/Lease-Blob
0000000000000000000000000000000000000000;;	func (b *Blob) ChangeLease(currentLeaseID string, proposedLeaseID string, options *LeaseOptions) (newLeaseID string, err error) {
0000000000000000000000000000000000000000;;		headers := b.Container.bsc.client.getStandardHeaders()
0000000000000000000000000000000000000000;;		headers[leaseAction] = changeLease
0000000000000000000000000000000000000000;;		headers[headerLeaseID] = currentLeaseID
0000000000000000000000000000000000000000;;		headers[leaseProposedID] = proposedLeaseID
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		respHeaders, err := b.leaseCommonPut(headers, http.StatusOK, options)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		newLeaseID = respHeaders.Get(http.CanonicalHeaderKey(headerLeaseID))
0000000000000000000000000000000000000000;;		if newLeaseID != "" {
0000000000000000000000000000000000000000;;			return newLeaseID, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return "", errors.New("LeaseID not returned")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ReleaseLease releases the lease for a blob
0000000000000000000000000000000000000000;;	// See https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/Lease-Blob
0000000000000000000000000000000000000000;;	func (b *Blob) ReleaseLease(currentLeaseID string, options *LeaseOptions) error {
0000000000000000000000000000000000000000;;		headers := b.Container.bsc.client.getStandardHeaders()
0000000000000000000000000000000000000000;;		headers[leaseAction] = releaseLease
0000000000000000000000000000000000000000;;		headers[headerLeaseID] = currentLeaseID
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := b.leaseCommonPut(headers, http.StatusOK, options)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RenewLease renews the lease for a blob as per https://msdn.microsoft.com/en-us/library/azure/ee691972.aspx
0000000000000000000000000000000000000000;;	func (b *Blob) RenewLease(currentLeaseID string, options *LeaseOptions) error {
0000000000000000000000000000000000000000;;		headers := b.Container.bsc.client.getStandardHeaders()
0000000000000000000000000000000000000000;;		headers[leaseAction] = renewLease
0000000000000000000000000000000000000000;;		headers[headerLeaseID] = currentLeaseID
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := b.leaseCommonPut(headers, http.StatusOK, options)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
