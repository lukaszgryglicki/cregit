0000000000000000000000000000000000000000;;	package storage
91454efdcfe2d233cf3f75fc014b3bb9ac6e5ae7;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/xml"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Directory represents a directory on a share.
0000000000000000000000000000000000000000;;	type Directory struct {
0000000000000000000000000000000000000000;;		fsc        *FileServiceClient
0000000000000000000000000000000000000000;;		Metadata   map[string]string
0000000000000000000000000000000000000000;;		Name       string `xml:"Name"`
0000000000000000000000000000000000000000;;		parent     *Directory
0000000000000000000000000000000000000000;;		Properties DirectoryProperties
0000000000000000000000000000000000000000;;		share      *Share
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DirectoryProperties contains various properties of a directory.
0000000000000000000000000000000000000000;;	type DirectoryProperties struct {
0000000000000000000000000000000000000000;;		LastModified string `xml:"Last-Modified"`
0000000000000000000000000000000000000000;;		Etag         string `xml:"Etag"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListDirsAndFilesParameters defines the set of customizable parameters to
0000000000000000000000000000000000000000;;	// make a List Files and Directories call.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/List-Directories-and-Files
0000000000000000000000000000000000000000;;	type ListDirsAndFilesParameters struct {
0000000000000000000000000000000000000000;;		Prefix     string
0000000000000000000000000000000000000000;;		Marker     string
0000000000000000000000000000000000000000;;		MaxResults uint
0000000000000000000000000000000000000000;;		Timeout    uint
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DirsAndFilesListResponse contains the response fields from
0000000000000000000000000000000000000000;;	// a List Files and Directories call.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/List-Directories-and-Files
0000000000000000000000000000000000000000;;	type DirsAndFilesListResponse struct {
0000000000000000000000000000000000000000;;		XMLName     xml.Name    `xml:"EnumerationResults"`
0000000000000000000000000000000000000000;;		Xmlns       string      `xml:"xmlns,attr"`
0000000000000000000000000000000000000000;;		Marker      string      `xml:"Marker"`
0000000000000000000000000000000000000000;;		MaxResults  int64       `xml:"MaxResults"`
0000000000000000000000000000000000000000;;		Directories []Directory `xml:"Entries>Directory"`
0000000000000000000000000000000000000000;;		Files       []File      `xml:"Entries>File"`
0000000000000000000000000000000000000000;;		NextMarker  string      `xml:"NextMarker"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// builds the complete directory path for this directory object.
0000000000000000000000000000000000000000;;	func (d *Directory) buildPath() string {
0000000000000000000000000000000000000000;;		path := ""
0000000000000000000000000000000000000000;;		current := d
0000000000000000000000000000000000000000;;		for current.Name != "" {
0000000000000000000000000000000000000000;;			path = "/" + current.Name + path
0000000000000000000000000000000000000000;;			current = current.parent
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return d.share.buildPath() + path
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create this directory in the associated share.
0000000000000000000000000000000000000000;;	// If a directory with the same name already exists, the operation fails.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/Create-Directory
0000000000000000000000000000000000000000;;	func (d *Directory) Create(options *FileRequestOptions) error {
0000000000000000000000000000000000000000;;		// if this is the root directory exit early
0000000000000000000000000000000000000000;;		if d.parent == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		params := prepareOptions(options)
0000000000000000000000000000000000000000;;		headers, err := d.fsc.createResource(d.buildPath(), resourceDirectory, params, mergeMDIntoExtraHeaders(d.Metadata, nil), []int{http.StatusCreated})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		d.updateEtagAndLastModified(headers)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateIfNotExists creates this directory under the associated share if the
0000000000000000000000000000000000000000;;	// directory does not exists. Returns true if the directory is newly created or
0000000000000000000000000000000000000000;;	// false if the directory already exists.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/Create-Directory
0000000000000000000000000000000000000000;;	func (d *Directory) CreateIfNotExists(options *FileRequestOptions) (bool, error) {
0000000000000000000000000000000000000000;;		// if this is the root directory exit early
0000000000000000000000000000000000000000;;		if d.parent == nil {
0000000000000000000000000000000000000000;;			return false, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		params := prepareOptions(options)
0000000000000000000000000000000000000000;;		resp, err := d.fsc.createResourceNoClose(d.buildPath(), resourceDirectory, params, nil)
0000000000000000000000000000000000000000;;		if resp != nil {
0000000000000000000000000000000000000000;;			defer readAndCloseBody(resp.body)
0000000000000000000000000000000000000000;;			if resp.statusCode == http.StatusCreated || resp.statusCode == http.StatusConflict {
0000000000000000000000000000000000000000;;				if resp.statusCode == http.StatusCreated {
0000000000000000000000000000000000000000;;					d.updateEtagAndLastModified(resp.headers)
0000000000000000000000000000000000000000;;					return true, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				return false, d.FetchAttributes(nil)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return false, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Delete removes this directory.  It must be empty in order to be deleted.
0000000000000000000000000000000000000000;;	// If the directory does not exist the operation fails.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/Delete-Directory
0000000000000000000000000000000000000000;;	func (d *Directory) Delete(options *FileRequestOptions) error {
0000000000000000000000000000000000000000;;		return d.fsc.deleteResource(d.buildPath(), resourceDirectory, options)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteIfExists removes this directory if it exists.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/Delete-Directory
0000000000000000000000000000000000000000;;	func (d *Directory) DeleteIfExists(options *FileRequestOptions) (bool, error) {
0000000000000000000000000000000000000000;;		resp, err := d.fsc.deleteResourceNoClose(d.buildPath(), resourceDirectory, options)
0000000000000000000000000000000000000000;;		if resp != nil {
0000000000000000000000000000000000000000;;			defer readAndCloseBody(resp.body)
0000000000000000000000000000000000000000;;			if resp.statusCode == http.StatusAccepted || resp.statusCode == http.StatusNotFound {
0000000000000000000000000000000000000000;;				return resp.statusCode == http.StatusAccepted, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Exists returns true if this directory exists.
0000000000000000000000000000000000000000;;	func (d *Directory) Exists() (bool, error) {
0000000000000000000000000000000000000000;;		exists, headers, err := d.fsc.resourceExists(d.buildPath(), resourceDirectory)
0000000000000000000000000000000000000000;;		if exists {
0000000000000000000000000000000000000000;;			d.updateEtagAndLastModified(headers)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return exists, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FetchAttributes retrieves metadata for this directory.
0000000000000000000000000000000000000000;;	//  See https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/get-directory-properties
0000000000000000000000000000000000000000;;	func (d *Directory) FetchAttributes(options *FileRequestOptions) error {
0000000000000000000000000000000000000000;;		params := prepareOptions(options)
0000000000000000000000000000000000000000;;		headers, err := d.fsc.getResourceHeaders(d.buildPath(), compNone, resourceDirectory, params, http.MethodHead)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		d.updateEtagAndLastModified(headers)
0000000000000000000000000000000000000000;;		d.Metadata = getMetadataFromHeaders(headers)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetDirectoryReference returns a child Directory object for this directory.
0000000000000000000000000000000000000000;;	func (d *Directory) GetDirectoryReference(name string) *Directory {
0000000000000000000000000000000000000000;;		return &Directory{
0000000000000000000000000000000000000000;;			fsc:    d.fsc,
0000000000000000000000000000000000000000;;			Name:   name,
0000000000000000000000000000000000000000;;			parent: d,
0000000000000000000000000000000000000000;;			share:  d.share,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetFileReference returns a child File object for this directory.
0000000000000000000000000000000000000000;;	func (d *Directory) GetFileReference(name string) *File {
0000000000000000000000000000000000000000;;		return &File{
0000000000000000000000000000000000000000;;			fsc:    d.fsc,
0000000000000000000000000000000000000000;;			Name:   name,
0000000000000000000000000000000000000000;;			parent: d,
0000000000000000000000000000000000000000;;			share:  d.share,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListDirsAndFiles returns a list of files and directories under this directory.
0000000000000000000000000000000000000000;;	// It also contains a pagination token and other response details.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/List-Directories-and-Files
0000000000000000000000000000000000000000;;	func (d *Directory) ListDirsAndFiles(params ListDirsAndFilesParameters) (*DirsAndFilesListResponse, error) {
0000000000000000000000000000000000000000;;		q := mergeParams(params.getParameters(), getURLInitValues(compList, resourceDirectory))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := d.fsc.listContent(d.buildPath(), q, nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		defer resp.body.Close()
0000000000000000000000000000000000000000;;		var out DirsAndFilesListResponse
0000000000000000000000000000000000000000;;		err = xmlUnmarshal(resp.body, &out)
0000000000000000000000000000000000000000;;		return &out, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMetadata replaces the metadata for this directory.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Some keys may be converted to Camel-Case before sending. All keys
0000000000000000000000000000000000000000;;	// are returned in lower case by GetDirectoryMetadata. HTTP header names
0000000000000000000000000000000000000000;;	// are case-insensitive so case munging should not matter to other
0000000000000000000000000000000000000000;;	// applications either.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/Set-Directory-Metadata
0000000000000000000000000000000000000000;;	func (d *Directory) SetMetadata(options *FileRequestOptions) error {
0000000000000000000000000000000000000000;;		headers, err := d.fsc.setResourceHeaders(d.buildPath(), compMetadata, resourceDirectory, mergeMDIntoExtraHeaders(d.Metadata, nil), options)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		d.updateEtagAndLastModified(headers)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// updates Etag and last modified date
0000000000000000000000000000000000000000;;	func (d *Directory) updateEtagAndLastModified(headers http.Header) {
0000000000000000000000000000000000000000;;		d.Properties.Etag = headers.Get("Etag")
0000000000000000000000000000000000000000;;		d.Properties.LastModified = headers.Get("Last-Modified")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// URL gets the canonical URL to this directory.
0000000000000000000000000000000000000000;;	// This method does not create a publicly accessible URL if the directory
0000000000000000000000000000000000000000;;	// is private and this method does not check if the directory exists.
0000000000000000000000000000000000000000;;	func (d *Directory) URL() string {
0000000000000000000000000000000000000000;;		return d.fsc.client.getEndpoint(fileServiceName, d.buildPath(), url.Values{})
0000000000000000000000000000000000000000;;	}
