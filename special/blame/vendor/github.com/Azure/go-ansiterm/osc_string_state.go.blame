0000000000000000000000000000000000000000;;	package ansiterm
b515bda5eede841df021a5bfcc6c5c7c7a1e907e;;	
0000000000000000000000000000000000000000;;	type oscStringState struct {
0000000000000000000000000000000000000000;;		baseState
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (oscState oscStringState) Handle(b byte) (s state, e error) {
0000000000000000000000000000000000000000;;		logger.Infof("OscString::Handle %#x", b)
0000000000000000000000000000000000000000;;		nextState, err := oscState.baseState.Handle(b)
0000000000000000000000000000000000000000;;		if nextState != nil || err != nil {
0000000000000000000000000000000000000000;;			return nextState, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case isOscStringTerminator(b):
0000000000000000000000000000000000000000;;			return oscState.parser.ground, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return oscState, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// See below for OSC string terminators for linux
0000000000000000000000000000000000000000;;	// http://man7.org/linux/man-pages/man4/console_codes.4.html
0000000000000000000000000000000000000000;;	func isOscStringTerminator(b byte) bool {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if b == ANSI_BEL || b == 0x5C {
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
