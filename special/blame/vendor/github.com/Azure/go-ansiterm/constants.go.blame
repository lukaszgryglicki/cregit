0000000000000000000000000000000000000000;;	package ansiterm
b515bda5eede841df021a5bfcc6c5c7c7a1e907e;;	
0000000000000000000000000000000000000000;;	const LogEnv = "DEBUG_TERMINAL"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ANSI constants
0000000000000000000000000000000000000000;;	// References:
0000000000000000000000000000000000000000;;	// -- http://www.ecma-international.org/publications/standards/Ecma-048.htm
0000000000000000000000000000000000000000;;	// -- http://man7.org/linux/man-pages/man4/console_codes.4.html
0000000000000000000000000000000000000000;;	// -- http://manpages.ubuntu.com/manpages/intrepid/man4/console_codes.4.html
0000000000000000000000000000000000000000;;	// -- http://en.wikipedia.org/wiki/ANSI_escape_code
0000000000000000000000000000000000000000;;	// -- http://vt100.net/emu/dec_ansi_parser
0000000000000000000000000000000000000000;;	// -- http://vt100.net/emu/vt500_parser.svg
0000000000000000000000000000000000000000;;	// -- http://invisible-island.net/xterm/ctlseqs/ctlseqs.html
0000000000000000000000000000000000000000;;	// -- http://www.inwap.com/pdp10/ansicode.txt
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// ECMA-48 Set Graphics Rendition
0000000000000000000000000000000000000000;;		// Note:
0000000000000000000000000000000000000000;;		// -- Constants leading with an underscore (e.g., _ANSI_xxx) are unsupported or reserved
0000000000000000000000000000000000000000;;		// -- Fonts could possibly be supported via SetCurrentConsoleFontEx
0000000000000000000000000000000000000000;;		// -- Windows does not expose the per-window cursor (i.e., caret) blink times
0000000000000000000000000000000000000000;;		ANSI_SGR_RESET              = 0
0000000000000000000000000000000000000000;;		ANSI_SGR_BOLD               = 1
0000000000000000000000000000000000000000;;		ANSI_SGR_DIM                = 2
0000000000000000000000000000000000000000;;		_ANSI_SGR_ITALIC            = 3
0000000000000000000000000000000000000000;;		ANSI_SGR_UNDERLINE          = 4
0000000000000000000000000000000000000000;;		_ANSI_SGR_BLINKSLOW         = 5
0000000000000000000000000000000000000000;;		_ANSI_SGR_BLINKFAST         = 6
0000000000000000000000000000000000000000;;		ANSI_SGR_REVERSE            = 7
0000000000000000000000000000000000000000;;		_ANSI_SGR_INVISIBLE         = 8
0000000000000000000000000000000000000000;;		_ANSI_SGR_LINETHROUGH       = 9
0000000000000000000000000000000000000000;;		_ANSI_SGR_FONT_00           = 10
0000000000000000000000000000000000000000;;		_ANSI_SGR_FONT_01           = 11
0000000000000000000000000000000000000000;;		_ANSI_SGR_FONT_02           = 12
0000000000000000000000000000000000000000;;		_ANSI_SGR_FONT_03           = 13
0000000000000000000000000000000000000000;;		_ANSI_SGR_FONT_04           = 14
0000000000000000000000000000000000000000;;		_ANSI_SGR_FONT_05           = 15
0000000000000000000000000000000000000000;;		_ANSI_SGR_FONT_06           = 16
0000000000000000000000000000000000000000;;		_ANSI_SGR_FONT_07           = 17
0000000000000000000000000000000000000000;;		_ANSI_SGR_FONT_08           = 18
0000000000000000000000000000000000000000;;		_ANSI_SGR_FONT_09           = 19
0000000000000000000000000000000000000000;;		_ANSI_SGR_FONT_10           = 20
0000000000000000000000000000000000000000;;		_ANSI_SGR_DOUBLEUNDERLINE   = 21
0000000000000000000000000000000000000000;;		ANSI_SGR_BOLD_DIM_OFF       = 22
0000000000000000000000000000000000000000;;		_ANSI_SGR_ITALIC_OFF        = 23
0000000000000000000000000000000000000000;;		ANSI_SGR_UNDERLINE_OFF      = 24
0000000000000000000000000000000000000000;;		_ANSI_SGR_BLINK_OFF         = 25
0000000000000000000000000000000000000000;;		_ANSI_SGR_RESERVED_00       = 26
0000000000000000000000000000000000000000;;		ANSI_SGR_REVERSE_OFF        = 27
0000000000000000000000000000000000000000;;		_ANSI_SGR_INVISIBLE_OFF     = 28
0000000000000000000000000000000000000000;;		_ANSI_SGR_LINETHROUGH_OFF   = 29
0000000000000000000000000000000000000000;;		ANSI_SGR_FOREGROUND_BLACK   = 30
0000000000000000000000000000000000000000;;		ANSI_SGR_FOREGROUND_RED     = 31
0000000000000000000000000000000000000000;;		ANSI_SGR_FOREGROUND_GREEN   = 32
0000000000000000000000000000000000000000;;		ANSI_SGR_FOREGROUND_YELLOW  = 33
0000000000000000000000000000000000000000;;		ANSI_SGR_FOREGROUND_BLUE    = 34
0000000000000000000000000000000000000000;;		ANSI_SGR_FOREGROUND_MAGENTA = 35
0000000000000000000000000000000000000000;;		ANSI_SGR_FOREGROUND_CYAN    = 36
0000000000000000000000000000000000000000;;		ANSI_SGR_FOREGROUND_WHITE   = 37
0000000000000000000000000000000000000000;;		_ANSI_SGR_RESERVED_01       = 38
0000000000000000000000000000000000000000;;		ANSI_SGR_FOREGROUND_DEFAULT = 39
0000000000000000000000000000000000000000;;		ANSI_SGR_BACKGROUND_BLACK   = 40
0000000000000000000000000000000000000000;;		ANSI_SGR_BACKGROUND_RED     = 41
0000000000000000000000000000000000000000;;		ANSI_SGR_BACKGROUND_GREEN   = 42
0000000000000000000000000000000000000000;;		ANSI_SGR_BACKGROUND_YELLOW  = 43
0000000000000000000000000000000000000000;;		ANSI_SGR_BACKGROUND_BLUE    = 44
0000000000000000000000000000000000000000;;		ANSI_SGR_BACKGROUND_MAGENTA = 45
0000000000000000000000000000000000000000;;		ANSI_SGR_BACKGROUND_CYAN    = 46
0000000000000000000000000000000000000000;;		ANSI_SGR_BACKGROUND_WHITE   = 47
0000000000000000000000000000000000000000;;		_ANSI_SGR_RESERVED_02       = 48
0000000000000000000000000000000000000000;;		ANSI_SGR_BACKGROUND_DEFAULT = 49
0000000000000000000000000000000000000000;;		// 50 - 65: Unsupported
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ANSI_MAX_CMD_LENGTH = 4096
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MAX_INPUT_EVENTS = 128
0000000000000000000000000000000000000000;;		DEFAULT_WIDTH    = 80
0000000000000000000000000000000000000000;;		DEFAULT_HEIGHT   = 24
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ANSI_BEL              = 0x07
0000000000000000000000000000000000000000;;		ANSI_BACKSPACE        = 0x08
0000000000000000000000000000000000000000;;		ANSI_TAB              = 0x09
0000000000000000000000000000000000000000;;		ANSI_LINE_FEED        = 0x0A
0000000000000000000000000000000000000000;;		ANSI_VERTICAL_TAB     = 0x0B
0000000000000000000000000000000000000000;;		ANSI_FORM_FEED        = 0x0C
0000000000000000000000000000000000000000;;		ANSI_CARRIAGE_RETURN  = 0x0D
0000000000000000000000000000000000000000;;		ANSI_ESCAPE_PRIMARY   = 0x1B
0000000000000000000000000000000000000000;;		ANSI_ESCAPE_SECONDARY = 0x5B
0000000000000000000000000000000000000000;;		ANSI_OSC_STRING_ENTRY = 0x5D
0000000000000000000000000000000000000000;;		ANSI_COMMAND_FIRST    = 0x40
0000000000000000000000000000000000000000;;		ANSI_COMMAND_LAST     = 0x7E
0000000000000000000000000000000000000000;;		DCS_ENTRY             = 0x90
0000000000000000000000000000000000000000;;		CSI_ENTRY             = 0x9B
0000000000000000000000000000000000000000;;		OSC_STRING            = 0x9D
0000000000000000000000000000000000000000;;		ANSI_PARAMETER_SEP    = ";"
0000000000000000000000000000000000000000;;		ANSI_CMD_G0           = '('
0000000000000000000000000000000000000000;;		ANSI_CMD_G1           = ')'
0000000000000000000000000000000000000000;;		ANSI_CMD_G2           = '*'
0000000000000000000000000000000000000000;;		ANSI_CMD_G3           = '+'
0000000000000000000000000000000000000000;;		ANSI_CMD_DECPNM       = '>'
0000000000000000000000000000000000000000;;		ANSI_CMD_DECPAM       = '='
0000000000000000000000000000000000000000;;		ANSI_CMD_OSC          = ']'
0000000000000000000000000000000000000000;;		ANSI_CMD_STR_TERM     = '\\'
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		KEY_CONTROL_PARAM_2 = ";2"
0000000000000000000000000000000000000000;;		KEY_CONTROL_PARAM_3 = ";3"
0000000000000000000000000000000000000000;;		KEY_CONTROL_PARAM_4 = ";4"
0000000000000000000000000000000000000000;;		KEY_CONTROL_PARAM_5 = ";5"
0000000000000000000000000000000000000000;;		KEY_CONTROL_PARAM_6 = ";6"
0000000000000000000000000000000000000000;;		KEY_CONTROL_PARAM_7 = ";7"
0000000000000000000000000000000000000000;;		KEY_CONTROL_PARAM_8 = ";8"
0000000000000000000000000000000000000000;;		KEY_ESC_CSI         = "\x1B["
0000000000000000000000000000000000000000;;		KEY_ESC_N           = "\x1BN"
0000000000000000000000000000000000000000;;		KEY_ESC_O           = "\x1BO"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		FILL_CHARACTER = ' '
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getByteRange(start byte, end byte) []byte {
0000000000000000000000000000000000000000;;		bytes := make([]byte, 0, 32)
0000000000000000000000000000000000000000;;		for i := start; i <= end; i++ {
0000000000000000000000000000000000000000;;			bytes = append(bytes, byte(i))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return bytes
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var toGroundBytes = getToGroundBytes()
0000000000000000000000000000000000000000;;	var executors = getExecuteBytes()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SPACE		  20+A0 hex  Always and everywhere a blank space
0000000000000000000000000000000000000000;;	// Intermediate	  20-2F hex   !"#$%&'()*+,-./
0000000000000000000000000000000000000000;;	var intermeds = getByteRange(0x20, 0x2F)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Parameters	  30-3F hex  0123456789:;<=>?
0000000000000000000000000000000000000000;;	// CSI Parameters 30-39, 3B hex 0123456789;
0000000000000000000000000000000000000000;;	var csiParams = getByteRange(0x30, 0x3F)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var csiCollectables = append(getByteRange(0x30, 0x39), getByteRange(0x3B, 0x3F)...)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uppercase	  40-5F hex  @ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_
0000000000000000000000000000000000000000;;	var upperCase = getByteRange(0x40, 0x5F)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Lowercase	  60-7E hex  `abcdefghijlkmnopqrstuvwxyz{|}~
0000000000000000000000000000000000000000;;	var lowerCase = getByteRange(0x60, 0x7E)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Alphabetics	  40-7E hex  (all of upper and lower case)
0000000000000000000000000000000000000000;;	var alphabetics = append(upperCase, lowerCase...)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var printables = getByteRange(0x20, 0x7F)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var escapeIntermediateToGroundBytes = getByteRange(0x30, 0x7E)
0000000000000000000000000000000000000000;;	var escapeToGroundBytes = getEscapeToGroundBytes()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// See http://www.vt100.net/emu/vt500_parser.png for description of the complex
0000000000000000000000000000000000000000;;	// byte ranges below
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getEscapeToGroundBytes() []byte {
0000000000000000000000000000000000000000;;		escapeToGroundBytes := getByteRange(0x30, 0x4F)
0000000000000000000000000000000000000000;;		escapeToGroundBytes = append(escapeToGroundBytes, getByteRange(0x51, 0x57)...)
0000000000000000000000000000000000000000;;		escapeToGroundBytes = append(escapeToGroundBytes, 0x59)
0000000000000000000000000000000000000000;;		escapeToGroundBytes = append(escapeToGroundBytes, 0x5A)
0000000000000000000000000000000000000000;;		escapeToGroundBytes = append(escapeToGroundBytes, 0x5C)
0000000000000000000000000000000000000000;;		escapeToGroundBytes = append(escapeToGroundBytes, getByteRange(0x60, 0x7E)...)
0000000000000000000000000000000000000000;;		return escapeToGroundBytes
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getExecuteBytes() []byte {
0000000000000000000000000000000000000000;;		executeBytes := getByteRange(0x00, 0x17)
0000000000000000000000000000000000000000;;		executeBytes = append(executeBytes, 0x19)
0000000000000000000000000000000000000000;;		executeBytes = append(executeBytes, getByteRange(0x1C, 0x1F)...)
0000000000000000000000000000000000000000;;		return executeBytes
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getToGroundBytes() []byte {
0000000000000000000000000000000000000000;;		groundBytes := []byte{0x18}
0000000000000000000000000000000000000000;;		groundBytes = append(groundBytes, 0x1A)
0000000000000000000000000000000000000000;;		groundBytes = append(groundBytes, getByteRange(0x80, 0x8F)...)
0000000000000000000000000000000000000000;;		groundBytes = append(groundBytes, getByteRange(0x91, 0x97)...)
0000000000000000000000000000000000000000;;		groundBytes = append(groundBytes, 0x99)
0000000000000000000000000000000000000000;;		groundBytes = append(groundBytes, 0x9A)
0000000000000000000000000000000000000000;;		groundBytes = append(groundBytes, 0x9C)
0000000000000000000000000000000000000000;;		return groundBytes
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Delete		     7F hex  Always and everywhere ignored
0000000000000000000000000000000000000000;;	// C1 Control	  80-9F hex  32 additional control characters
0000000000000000000000000000000000000000;;	// G1 Displayable A1-FE hex  94 additional displayable characters
0000000000000000000000000000000000000000;;	// Special		  A0+FF hex  Same as SPACE and DELETE
