0000000000000000000000000000000000000000;;	package ansiterm
b515bda5eede841df021a5bfcc6c5c7c7a1e907e;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ap *AnsiParser) collectParam() error {
0000000000000000000000000000000000000000;;		currChar := ap.context.currentChar
0000000000000000000000000000000000000000;;		logger.Infof("collectParam %#x", currChar)
0000000000000000000000000000000000000000;;		ap.context.paramBuffer = append(ap.context.paramBuffer, currChar)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ap *AnsiParser) collectInter() error {
0000000000000000000000000000000000000000;;		currChar := ap.context.currentChar
0000000000000000000000000000000000000000;;		logger.Infof("collectInter %#x", currChar)
0000000000000000000000000000000000000000;;		ap.context.paramBuffer = append(ap.context.interBuffer, currChar)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ap *AnsiParser) escDispatch() error {
0000000000000000000000000000000000000000;;		cmd, _ := parseCmd(*ap.context)
0000000000000000000000000000000000000000;;		intermeds := ap.context.interBuffer
0000000000000000000000000000000000000000;;		logger.Infof("escDispatch currentChar: %#x", ap.context.currentChar)
0000000000000000000000000000000000000000;;		logger.Infof("escDispatch: %v(%v)", cmd, intermeds)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch cmd {
0000000000000000000000000000000000000000;;		case "D": // IND
0000000000000000000000000000000000000000;;			return ap.eventHandler.IND()
0000000000000000000000000000000000000000;;		case "E": // NEL, equivalent to CRLF
0000000000000000000000000000000000000000;;			err := ap.eventHandler.Execute(ANSI_CARRIAGE_RETURN)
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				err = ap.eventHandler.Execute(ANSI_LINE_FEED)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		case "M": // RI
0000000000000000000000000000000000000000;;			return ap.eventHandler.RI()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ap *AnsiParser) csiDispatch() error {
0000000000000000000000000000000000000000;;		cmd, _ := parseCmd(*ap.context)
0000000000000000000000000000000000000000;;		params, _ := parseParams(ap.context.paramBuffer)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		logger.Infof("csiDispatch: %v(%v)", cmd, params)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch cmd {
0000000000000000000000000000000000000000;;		case "@":
0000000000000000000000000000000000000000;;			return ap.eventHandler.ICH(getInt(params, 1))
0000000000000000000000000000000000000000;;		case "A":
0000000000000000000000000000000000000000;;			return ap.eventHandler.CUU(getInt(params, 1))
0000000000000000000000000000000000000000;;		case "B":
0000000000000000000000000000000000000000;;			return ap.eventHandler.CUD(getInt(params, 1))
0000000000000000000000000000000000000000;;		case "C":
0000000000000000000000000000000000000000;;			return ap.eventHandler.CUF(getInt(params, 1))
0000000000000000000000000000000000000000;;		case "D":
0000000000000000000000000000000000000000;;			return ap.eventHandler.CUB(getInt(params, 1))
0000000000000000000000000000000000000000;;		case "E":
0000000000000000000000000000000000000000;;			return ap.eventHandler.CNL(getInt(params, 1))
0000000000000000000000000000000000000000;;		case "F":
0000000000000000000000000000000000000000;;			return ap.eventHandler.CPL(getInt(params, 1))
0000000000000000000000000000000000000000;;		case "G":
0000000000000000000000000000000000000000;;			return ap.eventHandler.CHA(getInt(params, 1))
0000000000000000000000000000000000000000;;		case "H":
0000000000000000000000000000000000000000;;			ints := getInts(params, 2, 1)
0000000000000000000000000000000000000000;;			x, y := ints[0], ints[1]
0000000000000000000000000000000000000000;;			return ap.eventHandler.CUP(x, y)
0000000000000000000000000000000000000000;;		case "J":
0000000000000000000000000000000000000000;;			param := getEraseParam(params)
0000000000000000000000000000000000000000;;			return ap.eventHandler.ED(param)
0000000000000000000000000000000000000000;;		case "K":
0000000000000000000000000000000000000000;;			param := getEraseParam(params)
0000000000000000000000000000000000000000;;			return ap.eventHandler.EL(param)
0000000000000000000000000000000000000000;;		case "L":
0000000000000000000000000000000000000000;;			return ap.eventHandler.IL(getInt(params, 1))
0000000000000000000000000000000000000000;;		case "M":
0000000000000000000000000000000000000000;;			return ap.eventHandler.DL(getInt(params, 1))
0000000000000000000000000000000000000000;;		case "P":
0000000000000000000000000000000000000000;;			return ap.eventHandler.DCH(getInt(params, 1))
0000000000000000000000000000000000000000;;		case "S":
0000000000000000000000000000000000000000;;			return ap.eventHandler.SU(getInt(params, 1))
0000000000000000000000000000000000000000;;		case "T":
0000000000000000000000000000000000000000;;			return ap.eventHandler.SD(getInt(params, 1))
0000000000000000000000000000000000000000;;		case "c":
0000000000000000000000000000000000000000;;			return ap.eventHandler.DA(params)
0000000000000000000000000000000000000000;;		case "d":
0000000000000000000000000000000000000000;;			return ap.eventHandler.VPA(getInt(params, 1))
0000000000000000000000000000000000000000;;		case "f":
0000000000000000000000000000000000000000;;			ints := getInts(params, 2, 1)
0000000000000000000000000000000000000000;;			x, y := ints[0], ints[1]
0000000000000000000000000000000000000000;;			return ap.eventHandler.HVP(x, y)
0000000000000000000000000000000000000000;;		case "h":
0000000000000000000000000000000000000000;;			return ap.hDispatch(params)
0000000000000000000000000000000000000000;;		case "l":
0000000000000000000000000000000000000000;;			return ap.lDispatch(params)
0000000000000000000000000000000000000000;;		case "m":
0000000000000000000000000000000000000000;;			return ap.eventHandler.SGR(getInts(params, 1, 0))
0000000000000000000000000000000000000000;;		case "r":
0000000000000000000000000000000000000000;;			ints := getInts(params, 2, 1)
0000000000000000000000000000000000000000;;			top, bottom := ints[0], ints[1]
0000000000000000000000000000000000000000;;			return ap.eventHandler.DECSTBM(top, bottom)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			logger.Errorf(fmt.Sprintf("Unsupported CSI command: '%s', with full context:  %v", cmd, ap.context))
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ap *AnsiParser) print() error {
0000000000000000000000000000000000000000;;		return ap.eventHandler.Print(ap.context.currentChar)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ap *AnsiParser) clear() error {
0000000000000000000000000000000000000000;;		ap.context = &ansiContext{}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ap *AnsiParser) execute() error {
0000000000000000000000000000000000000000;;		return ap.eventHandler.Execute(ap.context.currentChar)
0000000000000000000000000000000000000000;;	}
