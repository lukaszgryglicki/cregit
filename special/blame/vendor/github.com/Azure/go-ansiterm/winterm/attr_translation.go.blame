0000000000000000000000000000000000000000;;	// +build windows
b515bda5eede841df021a5bfcc6c5c7c7a1e907e;;	
0000000000000000000000000000000000000000;;	package winterm
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "github.com/Azure/go-ansiterm"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		FOREGROUND_COLOR_MASK = FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE
0000000000000000000000000000000000000000;;		BACKGROUND_COLOR_MASK = BACKGROUND_RED | BACKGROUND_GREEN | BACKGROUND_BLUE
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// collectAnsiIntoWindowsAttributes modifies the passed Windows text mode flags to reflect the
0000000000000000000000000000000000000000;;	// request represented by the passed ANSI mode.
0000000000000000000000000000000000000000;;	func collectAnsiIntoWindowsAttributes(windowsMode uint16, inverted bool, baseMode uint16, ansiMode int16) (uint16, bool) {
0000000000000000000000000000000000000000;;		switch ansiMode {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Mode styles
0000000000000000000000000000000000000000;;		case ansiterm.ANSI_SGR_BOLD:
0000000000000000000000000000000000000000;;			windowsMode = windowsMode | FOREGROUND_INTENSITY
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case ansiterm.ANSI_SGR_DIM, ansiterm.ANSI_SGR_BOLD_DIM_OFF:
0000000000000000000000000000000000000000;;			windowsMode &^= FOREGROUND_INTENSITY
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case ansiterm.ANSI_SGR_UNDERLINE:
0000000000000000000000000000000000000000;;			windowsMode = windowsMode | COMMON_LVB_UNDERSCORE
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case ansiterm.ANSI_SGR_REVERSE:
0000000000000000000000000000000000000000;;			inverted = true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case ansiterm.ANSI_SGR_REVERSE_OFF:
0000000000000000000000000000000000000000;;			inverted = false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case ansiterm.ANSI_SGR_UNDERLINE_OFF:
0000000000000000000000000000000000000000;;			windowsMode &^= COMMON_LVB_UNDERSCORE
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Foreground colors
0000000000000000000000000000000000000000;;		case ansiterm.ANSI_SGR_FOREGROUND_DEFAULT:
0000000000000000000000000000000000000000;;			windowsMode = (windowsMode &^ FOREGROUND_MASK) | (baseMode & FOREGROUND_MASK)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case ansiterm.ANSI_SGR_FOREGROUND_BLACK:
0000000000000000000000000000000000000000;;			windowsMode = (windowsMode &^ FOREGROUND_COLOR_MASK)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case ansiterm.ANSI_SGR_FOREGROUND_RED:
0000000000000000000000000000000000000000;;			windowsMode = (windowsMode &^ FOREGROUND_COLOR_MASK) | FOREGROUND_RED
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case ansiterm.ANSI_SGR_FOREGROUND_GREEN:
0000000000000000000000000000000000000000;;			windowsMode = (windowsMode &^ FOREGROUND_COLOR_MASK) | FOREGROUND_GREEN
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case ansiterm.ANSI_SGR_FOREGROUND_YELLOW:
0000000000000000000000000000000000000000;;			windowsMode = (windowsMode &^ FOREGROUND_COLOR_MASK) | FOREGROUND_RED | FOREGROUND_GREEN
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case ansiterm.ANSI_SGR_FOREGROUND_BLUE:
0000000000000000000000000000000000000000;;			windowsMode = (windowsMode &^ FOREGROUND_COLOR_MASK) | FOREGROUND_BLUE
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case ansiterm.ANSI_SGR_FOREGROUND_MAGENTA:
0000000000000000000000000000000000000000;;			windowsMode = (windowsMode &^ FOREGROUND_COLOR_MASK) | FOREGROUND_RED | FOREGROUND_BLUE
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case ansiterm.ANSI_SGR_FOREGROUND_CYAN:
0000000000000000000000000000000000000000;;			windowsMode = (windowsMode &^ FOREGROUND_COLOR_MASK) | FOREGROUND_GREEN | FOREGROUND_BLUE
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case ansiterm.ANSI_SGR_FOREGROUND_WHITE:
0000000000000000000000000000000000000000;;			windowsMode = (windowsMode &^ FOREGROUND_COLOR_MASK) | FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Background colors
0000000000000000000000000000000000000000;;		case ansiterm.ANSI_SGR_BACKGROUND_DEFAULT:
0000000000000000000000000000000000000000;;			// Black with no intensity
0000000000000000000000000000000000000000;;			windowsMode = (windowsMode &^ BACKGROUND_MASK) | (baseMode & BACKGROUND_MASK)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case ansiterm.ANSI_SGR_BACKGROUND_BLACK:
0000000000000000000000000000000000000000;;			windowsMode = (windowsMode &^ BACKGROUND_COLOR_MASK)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case ansiterm.ANSI_SGR_BACKGROUND_RED:
0000000000000000000000000000000000000000;;			windowsMode = (windowsMode &^ BACKGROUND_COLOR_MASK) | BACKGROUND_RED
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case ansiterm.ANSI_SGR_BACKGROUND_GREEN:
0000000000000000000000000000000000000000;;			windowsMode = (windowsMode &^ BACKGROUND_COLOR_MASK) | BACKGROUND_GREEN
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case ansiterm.ANSI_SGR_BACKGROUND_YELLOW:
0000000000000000000000000000000000000000;;			windowsMode = (windowsMode &^ BACKGROUND_COLOR_MASK) | BACKGROUND_RED | BACKGROUND_GREEN
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case ansiterm.ANSI_SGR_BACKGROUND_BLUE:
0000000000000000000000000000000000000000;;			windowsMode = (windowsMode &^ BACKGROUND_COLOR_MASK) | BACKGROUND_BLUE
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case ansiterm.ANSI_SGR_BACKGROUND_MAGENTA:
0000000000000000000000000000000000000000;;			windowsMode = (windowsMode &^ BACKGROUND_COLOR_MASK) | BACKGROUND_RED | BACKGROUND_BLUE
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case ansiterm.ANSI_SGR_BACKGROUND_CYAN:
0000000000000000000000000000000000000000;;			windowsMode = (windowsMode &^ BACKGROUND_COLOR_MASK) | BACKGROUND_GREEN | BACKGROUND_BLUE
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case ansiterm.ANSI_SGR_BACKGROUND_WHITE:
0000000000000000000000000000000000000000;;			windowsMode = (windowsMode &^ BACKGROUND_COLOR_MASK) | BACKGROUND_RED | BACKGROUND_GREEN | BACKGROUND_BLUE
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return windowsMode, inverted
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// invertAttributes inverts the foreground and background colors of a Windows attributes value
0000000000000000000000000000000000000000;;	func invertAttributes(windowsMode uint16) uint16 {
0000000000000000000000000000000000000000;;		return (COMMON_LVB_MASK & windowsMode) | ((FOREGROUND_MASK & windowsMode) << 4) | ((BACKGROUND_MASK & windowsMode) >> 4)
0000000000000000000000000000000000000000;;	}
