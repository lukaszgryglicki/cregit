0000000000000000000000000000000000000000;;	// +build windows
b515bda5eede841df021a5bfcc6c5c7c7a1e907e;;	
0000000000000000000000000000000000000000;;	package winterm
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "github.com/Azure/go-ansiterm"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h *windowsAnsiEventHandler) clearRange(attributes uint16, fromCoord COORD, toCoord COORD) error {
0000000000000000000000000000000000000000;;		// Ignore an invalid (negative area) request
0000000000000000000000000000000000000000;;		if toCoord.Y < fromCoord.Y {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var coordStart = COORD{}
0000000000000000000000000000000000000000;;		var coordEnd = COORD{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		xCurrent, yCurrent := fromCoord.X, fromCoord.Y
0000000000000000000000000000000000000000;;		xEnd, yEnd := toCoord.X, toCoord.Y
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Clear any partial initial line
0000000000000000000000000000000000000000;;		if xCurrent > 0 {
0000000000000000000000000000000000000000;;			coordStart.X, coordStart.Y = xCurrent, yCurrent
0000000000000000000000000000000000000000;;			coordEnd.X, coordEnd.Y = xEnd, yCurrent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			err = h.clearRect(attributes, coordStart, coordEnd)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			xCurrent = 0
0000000000000000000000000000000000000000;;			yCurrent += 1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Clear intervening rectangular section
0000000000000000000000000000000000000000;;		if yCurrent < yEnd {
0000000000000000000000000000000000000000;;			coordStart.X, coordStart.Y = xCurrent, yCurrent
0000000000000000000000000000000000000000;;			coordEnd.X, coordEnd.Y = xEnd, yEnd-1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			err = h.clearRect(attributes, coordStart, coordEnd)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			xCurrent = 0
0000000000000000000000000000000000000000;;			yCurrent = yEnd
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Clear remaining partial ending line
0000000000000000000000000000000000000000;;		coordStart.X, coordStart.Y = xCurrent, yCurrent
0000000000000000000000000000000000000000;;		coordEnd.X, coordEnd.Y = xEnd, yEnd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = h.clearRect(attributes, coordStart, coordEnd)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h *windowsAnsiEventHandler) clearRect(attributes uint16, fromCoord COORD, toCoord COORD) error {
0000000000000000000000000000000000000000;;		region := SMALL_RECT{Top: fromCoord.Y, Left: fromCoord.X, Bottom: toCoord.Y, Right: toCoord.X}
0000000000000000000000000000000000000000;;		width := toCoord.X - fromCoord.X + 1
0000000000000000000000000000000000000000;;		height := toCoord.Y - fromCoord.Y + 1
0000000000000000000000000000000000000000;;		size := uint32(width) * uint32(height)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if size <= 0 {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		buffer := make([]CHAR_INFO, size)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		char := CHAR_INFO{ansiterm.FILL_CHARACTER, attributes}
0000000000000000000000000000000000000000;;		for i := 0; i < int(size); i++ {
0000000000000000000000000000000000000000;;			buffer[i] = char
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := WriteConsoleOutput(h.fd, buffer, COORD{X: width, Y: height}, COORD{X: 0, Y: 0}, &region)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
