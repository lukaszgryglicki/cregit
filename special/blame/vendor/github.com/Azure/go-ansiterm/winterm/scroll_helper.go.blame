0000000000000000000000000000000000000000;;	// +build windows
b515bda5eede841df021a5bfcc6c5c7c7a1e907e;;	
0000000000000000000000000000000000000000;;	package winterm
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// effectiveSr gets the current effective scroll region in buffer coordinates
0000000000000000000000000000000000000000;;	func (h *windowsAnsiEventHandler) effectiveSr(window SMALL_RECT) scrollRegion {
0000000000000000000000000000000000000000;;		top := addInRange(window.Top, h.sr.top, window.Top, window.Bottom)
0000000000000000000000000000000000000000;;		bottom := addInRange(window.Top, h.sr.bottom, window.Top, window.Bottom)
0000000000000000000000000000000000000000;;		if top >= bottom {
0000000000000000000000000000000000000000;;			top = window.Top
0000000000000000000000000000000000000000;;			bottom = window.Bottom
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return scrollRegion{top: top, bottom: bottom}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h *windowsAnsiEventHandler) scrollUp(param int) error {
0000000000000000000000000000000000000000;;		info, err := GetConsoleScreenBufferInfo(h.fd)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		sr := h.effectiveSr(info.Window)
0000000000000000000000000000000000000000;;		return h.scroll(param, sr, info)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h *windowsAnsiEventHandler) scrollDown(param int) error {
0000000000000000000000000000000000000000;;		return h.scrollUp(-param)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h *windowsAnsiEventHandler) deleteLines(param int) error {
0000000000000000000000000000000000000000;;		info, err := GetConsoleScreenBufferInfo(h.fd)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		start := info.CursorPosition.Y
0000000000000000000000000000000000000000;;		sr := h.effectiveSr(info.Window)
0000000000000000000000000000000000000000;;		// Lines cannot be inserted or deleted outside the scrolling region.
0000000000000000000000000000000000000000;;		if start >= sr.top && start <= sr.bottom {
0000000000000000000000000000000000000000;;			sr.top = start
0000000000000000000000000000000000000000;;			return h.scroll(param, sr, info)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h *windowsAnsiEventHandler) insertLines(param int) error {
0000000000000000000000000000000000000000;;		return h.deleteLines(-param)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// scroll scrolls the provided scroll region by param lines. The scroll region is in buffer coordinates.
0000000000000000000000000000000000000000;;	func (h *windowsAnsiEventHandler) scroll(param int, sr scrollRegion, info *CONSOLE_SCREEN_BUFFER_INFO) error {
0000000000000000000000000000000000000000;;		logger.Infof("scroll: scrollTop: %d, scrollBottom: %d", sr.top, sr.bottom)
0000000000000000000000000000000000000000;;		logger.Infof("scroll: windowTop: %d, windowBottom: %d", info.Window.Top, info.Window.Bottom)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Copy from and clip to the scroll region (full buffer width)
0000000000000000000000000000000000000000;;		scrollRect := SMALL_RECT{
0000000000000000000000000000000000000000;;			Top:    sr.top,
0000000000000000000000000000000000000000;;			Bottom: sr.bottom,
0000000000000000000000000000000000000000;;			Left:   0,
0000000000000000000000000000000000000000;;			Right:  info.Size.X - 1,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Origin to which area should be copied
0000000000000000000000000000000000000000;;		destOrigin := COORD{
0000000000000000000000000000000000000000;;			X: 0,
0000000000000000000000000000000000000000;;			Y: sr.top - int16(param),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		char := CHAR_INFO{
0000000000000000000000000000000000000000;;			UnicodeChar: ' ',
0000000000000000000000000000000000000000;;			Attributes:  h.attributes,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := ScrollConsoleScreenBuffer(h.fd, scrollRect, scrollRect, destOrigin, char); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h *windowsAnsiEventHandler) deleteCharacters(param int) error {
0000000000000000000000000000000000000000;;		info, err := GetConsoleScreenBufferInfo(h.fd)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return h.scrollLine(param, info.CursorPosition, info)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h *windowsAnsiEventHandler) insertCharacters(param int) error {
0000000000000000000000000000000000000000;;		return h.deleteCharacters(-param)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// scrollLine scrolls a line horizontally starting at the provided position by a number of columns.
0000000000000000000000000000000000000000;;	func (h *windowsAnsiEventHandler) scrollLine(columns int, position COORD, info *CONSOLE_SCREEN_BUFFER_INFO) error {
0000000000000000000000000000000000000000;;		// Copy from and clip to the scroll region (full buffer width)
0000000000000000000000000000000000000000;;		scrollRect := SMALL_RECT{
0000000000000000000000000000000000000000;;			Top:    position.Y,
0000000000000000000000000000000000000000;;			Bottom: position.Y,
0000000000000000000000000000000000000000;;			Left:   position.X,
0000000000000000000000000000000000000000;;			Right:  info.Size.X - 1,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Origin to which area should be copied
0000000000000000000000000000000000000000;;		destOrigin := COORD{
0000000000000000000000000000000000000000;;			X: position.X - int16(columns),
0000000000000000000000000000000000000000;;			Y: position.Y,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		char := CHAR_INFO{
0000000000000000000000000000000000000000;;			UnicodeChar: ' ',
0000000000000000000000000000000000000000;;			Attributes:  h.attributes,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := ScrollConsoleScreenBuffer(h.fd, scrollRect, scrollRect, destOrigin, char); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
