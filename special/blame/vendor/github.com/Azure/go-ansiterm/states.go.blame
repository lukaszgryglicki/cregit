0000000000000000000000000000000000000000;;	package ansiterm
b515bda5eede841df021a5bfcc6c5c7c7a1e907e;;	
0000000000000000000000000000000000000000;;	type stateID int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type state interface {
0000000000000000000000000000000000000000;;		Enter() error
0000000000000000000000000000000000000000;;		Exit() error
0000000000000000000000000000000000000000;;		Handle(byte) (state, error)
0000000000000000000000000000000000000000;;		Name() string
0000000000000000000000000000000000000000;;		Transition(state) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type baseState struct {
0000000000000000000000000000000000000000;;		name   string
0000000000000000000000000000000000000000;;		parser *AnsiParser
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (base baseState) Enter() error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (base baseState) Exit() error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (base baseState) Handle(b byte) (s state, e error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case b == CSI_ENTRY:
0000000000000000000000000000000000000000;;			return base.parser.csiEntry, nil
0000000000000000000000000000000000000000;;		case b == DCS_ENTRY:
0000000000000000000000000000000000000000;;			return base.parser.dcsEntry, nil
0000000000000000000000000000000000000000;;		case b == ANSI_ESCAPE_PRIMARY:
0000000000000000000000000000000000000000;;			return base.parser.escape, nil
0000000000000000000000000000000000000000;;		case b == OSC_STRING:
0000000000000000000000000000000000000000;;			return base.parser.oscString, nil
0000000000000000000000000000000000000000;;		case sliceContains(toGroundBytes, b):
0000000000000000000000000000000000000000;;			return base.parser.ground, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (base baseState) Name() string {
0000000000000000000000000000000000000000;;		return base.name
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (base baseState) Transition(s state) error {
0000000000000000000000000000000000000000;;		if s == base.parser.ground {
0000000000000000000000000000000000000000;;			execBytes := []byte{0x18}
0000000000000000000000000000000000000000;;			execBytes = append(execBytes, 0x1A)
0000000000000000000000000000000000000000;;			execBytes = append(execBytes, getByteRange(0x80, 0x8F)...)
0000000000000000000000000000000000000000;;			execBytes = append(execBytes, getByteRange(0x91, 0x97)...)
0000000000000000000000000000000000000000;;			execBytes = append(execBytes, 0x99)
0000000000000000000000000000000000000000;;			execBytes = append(execBytes, 0x9A)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if sliceContains(execBytes, base.parser.context.currentChar) {
0000000000000000000000000000000000000000;;				return base.parser.execute()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type dcsEntryState struct {
0000000000000000000000000000000000000000;;		baseState
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type errorState struct {
0000000000000000000000000000000000000000;;		baseState
0000000000000000000000000000000000000000;;	}
