0000000000000000000000000000000000000000;;	package ansiterm
b515bda5eede841df021a5bfcc6c5c7c7a1e907e;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/Sirupsen/logrus"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var logger *logrus.Logger
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AnsiParser struct {
0000000000000000000000000000000000000000;;		currState          state
0000000000000000000000000000000000000000;;		eventHandler       AnsiEventHandler
0000000000000000000000000000000000000000;;		context            *ansiContext
0000000000000000000000000000000000000000;;		csiEntry           state
0000000000000000000000000000000000000000;;		csiParam           state
0000000000000000000000000000000000000000;;		dcsEntry           state
0000000000000000000000000000000000000000;;		escape             state
0000000000000000000000000000000000000000;;		escapeIntermediate state
0000000000000000000000000000000000000000;;		error              state
0000000000000000000000000000000000000000;;		ground             state
0000000000000000000000000000000000000000;;		oscString          state
0000000000000000000000000000000000000000;;		stateMap           []state
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func CreateParser(initialState string, evtHandler AnsiEventHandler) *AnsiParser {
0000000000000000000000000000000000000000;;		logFile := ioutil.Discard
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if isDebugEnv := os.Getenv(LogEnv); isDebugEnv == "1" {
0000000000000000000000000000000000000000;;			logFile, _ = os.Create("ansiParser.log")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		logger = &logrus.Logger{
0000000000000000000000000000000000000000;;			Out:       logFile,
0000000000000000000000000000000000000000;;			Formatter: new(logrus.TextFormatter),
0000000000000000000000000000000000000000;;			Level:     logrus.InfoLevel,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		parser := &AnsiParser{
0000000000000000000000000000000000000000;;			eventHandler: evtHandler,
0000000000000000000000000000000000000000;;			context:      &ansiContext{},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		parser.csiEntry = csiEntryState{baseState{name: "CsiEntry", parser: parser}}
0000000000000000000000000000000000000000;;		parser.csiParam = csiParamState{baseState{name: "CsiParam", parser: parser}}
0000000000000000000000000000000000000000;;		parser.dcsEntry = dcsEntryState{baseState{name: "DcsEntry", parser: parser}}
0000000000000000000000000000000000000000;;		parser.escape = escapeState{baseState{name: "Escape", parser: parser}}
0000000000000000000000000000000000000000;;		parser.escapeIntermediate = escapeIntermediateState{baseState{name: "EscapeIntermediate", parser: parser}}
0000000000000000000000000000000000000000;;		parser.error = errorState{baseState{name: "Error", parser: parser}}
0000000000000000000000000000000000000000;;		parser.ground = groundState{baseState{name: "Ground", parser: parser}}
0000000000000000000000000000000000000000;;		parser.oscString = oscStringState{baseState{name: "OscString", parser: parser}}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		parser.stateMap = []state{
0000000000000000000000000000000000000000;;			parser.csiEntry,
0000000000000000000000000000000000000000;;			parser.csiParam,
0000000000000000000000000000000000000000;;			parser.dcsEntry,
0000000000000000000000000000000000000000;;			parser.escape,
0000000000000000000000000000000000000000;;			parser.escapeIntermediate,
0000000000000000000000000000000000000000;;			parser.error,
0000000000000000000000000000000000000000;;			parser.ground,
0000000000000000000000000000000000000000;;			parser.oscString,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		parser.currState = getState(initialState, parser.stateMap)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		logger.Infof("CreateParser: parser %p", parser)
0000000000000000000000000000000000000000;;		return parser
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getState(name string, states []state) state {
0000000000000000000000000000000000000000;;		for _, el := range states {
0000000000000000000000000000000000000000;;			if el.Name() == name {
0000000000000000000000000000000000000000;;				return el
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ap *AnsiParser) Parse(bytes []byte) (int, error) {
0000000000000000000000000000000000000000;;		for i, b := range bytes {
0000000000000000000000000000000000000000;;			if err := ap.handle(b); err != nil {
0000000000000000000000000000000000000000;;				return i, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return len(bytes), ap.eventHandler.Flush()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ap *AnsiParser) handle(b byte) error {
0000000000000000000000000000000000000000;;		ap.context.currentChar = b
0000000000000000000000000000000000000000;;		newState, err := ap.currState.Handle(b)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if newState == nil {
0000000000000000000000000000000000000000;;			logger.Warning("newState is nil")
0000000000000000000000000000000000000000;;			return errors.New("New state of 'nil' is invalid.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if newState != ap.currState {
0000000000000000000000000000000000000000;;			if err := ap.changeState(newState); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ap *AnsiParser) changeState(newState state) error {
0000000000000000000000000000000000000000;;		logger.Infof("ChangeState %s --> %s", ap.currState.Name(), newState.Name())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Exit old state
0000000000000000000000000000000000000000;;		if err := ap.currState.Exit(); err != nil {
0000000000000000000000000000000000000000;;			logger.Infof("Exit state '%s' failed with : '%v'", ap.currState.Name(), err)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Perform transition action
0000000000000000000000000000000000000000;;		if err := ap.currState.Transition(newState); err != nil {
0000000000000000000000000000000000000000;;			logger.Infof("Transition from '%s' to '%s' failed with: '%v'", ap.currState.Name(), newState.Name, err)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Enter new state
0000000000000000000000000000000000000000;;		if err := newState.Enter(); err != nil {
0000000000000000000000000000000000000000;;			logger.Infof("Enter state '%s' failed with: '%v'", newState.Name(), err)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ap.currState = newState
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
