0000000000000000000000000000000000000000;;	package ansiterm
b515bda5eede841df021a5bfcc6c5c7c7a1e907e;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func parseParams(bytes []byte) ([]string, error) {
0000000000000000000000000000000000000000;;		paramBuff := make([]byte, 0, 0)
0000000000000000000000000000000000000000;;		params := []string{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, v := range bytes {
0000000000000000000000000000000000000000;;			if v == ';' {
0000000000000000000000000000000000000000;;				if len(paramBuff) > 0 {
0000000000000000000000000000000000000000;;					// Completed parameter, append it to the list
0000000000000000000000000000000000000000;;					s := string(paramBuff)
0000000000000000000000000000000000000000;;					params = append(params, s)
0000000000000000000000000000000000000000;;					paramBuff = make([]byte, 0, 0)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				paramBuff = append(paramBuff, v)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Last parameter may not be terminated with ';'
0000000000000000000000000000000000000000;;		if len(paramBuff) > 0 {
0000000000000000000000000000000000000000;;			s := string(paramBuff)
0000000000000000000000000000000000000000;;			params = append(params, s)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		logger.Infof("Parsed params: %v with length: %d", params, len(params))
0000000000000000000000000000000000000000;;		return params, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func parseCmd(context ansiContext) (string, error) {
0000000000000000000000000000000000000000;;		return string(context.currentChar), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getInt(params []string, dflt int) int {
0000000000000000000000000000000000000000;;		i := getInts(params, 1, dflt)[0]
0000000000000000000000000000000000000000;;		logger.Infof("getInt: %v", i)
0000000000000000000000000000000000000000;;		return i
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getInts(params []string, minCount int, dflt int) []int {
0000000000000000000000000000000000000000;;		ints := []int{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, v := range params {
0000000000000000000000000000000000000000;;			i, _ := strconv.Atoi(v)
0000000000000000000000000000000000000000;;			// Zero is mapped to the default value in VT100.
0000000000000000000000000000000000000000;;			if i == 0 {
0000000000000000000000000000000000000000;;				i = dflt
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			ints = append(ints, i)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(ints) < minCount {
0000000000000000000000000000000000000000;;			remaining := minCount - len(ints)
0000000000000000000000000000000000000000;;			for i := 0; i < remaining; i++ {
0000000000000000000000000000000000000000;;				ints = append(ints, dflt)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		logger.Infof("getInts: %v", ints)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return ints
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ap *AnsiParser) modeDispatch(param string, set bool) error {
0000000000000000000000000000000000000000;;		switch param {
0000000000000000000000000000000000000000;;		case "?3":
0000000000000000000000000000000000000000;;			return ap.eventHandler.DECCOLM(set)
0000000000000000000000000000000000000000;;		case "?6":
0000000000000000000000000000000000000000;;			return ap.eventHandler.DECOM(set)
0000000000000000000000000000000000000000;;		case "?25":
0000000000000000000000000000000000000000;;			return ap.eventHandler.DECTCEM(set)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ap *AnsiParser) hDispatch(params []string) error {
0000000000000000000000000000000000000000;;		if len(params) == 1 {
0000000000000000000000000000000000000000;;			return ap.modeDispatch(params[0], true)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ap *AnsiParser) lDispatch(params []string) error {
0000000000000000000000000000000000000000;;		if len(params) == 1 {
0000000000000000000000000000000000000000;;			return ap.modeDispatch(params[0], false)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getEraseParam(params []string) int {
0000000000000000000000000000000000000000;;		param := getInt(params, 0)
0000000000000000000000000000000000000000;;		if param < 0 || 3 < param {
0000000000000000000000000000000000000000;;			param = 0
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return param
0000000000000000000000000000000000000000;;	}
