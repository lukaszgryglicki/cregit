0000000000000000000000000000000000000000;;	package adal
91454efdcfe2d233cf3f75fc014b3bb9ac6e5ae7;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		contentType      = "Content-Type"
0000000000000000000000000000000000000000;;		mimeTypeFormPost = "application/x-www-form-urlencoded"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Sender is the interface that wraps the Do method to send HTTP requests.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The standard http.Client conforms to this interface.
0000000000000000000000000000000000000000;;	type Sender interface {
0000000000000000000000000000000000000000;;		Do(*http.Request) (*http.Response, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SenderFunc is a method that implements the Sender interface.
0000000000000000000000000000000000000000;;	type SenderFunc func(*http.Request) (*http.Response, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do implements the Sender interface on SenderFunc.
0000000000000000000000000000000000000000;;	func (sf SenderFunc) Do(r *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;		return sf(r)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SendDecorator takes and possibily decorates, by wrapping, a Sender. Decorators may affect the
0000000000000000000000000000000000000000;;	// http.Request and pass it along or, first, pass the http.Request along then react to the
0000000000000000000000000000000000000000;;	// http.Response result.
0000000000000000000000000000000000000000;;	type SendDecorator func(Sender) Sender
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateSender creates, decorates, and returns, as a Sender, the default http.Client.
0000000000000000000000000000000000000000;;	func CreateSender(decorators ...SendDecorator) Sender {
0000000000000000000000000000000000000000;;		return DecorateSender(&http.Client{}, decorators...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DecorateSender accepts a Sender and a, possibly empty, set of SendDecorators, which is applies to
0000000000000000000000000000000000000000;;	// the Sender. Decorators are applied in the order received, but their affect upon the request
0000000000000000000000000000000000000000;;	// depends on whether they are a pre-decorator (change the http.Request and then pass it along) or a
0000000000000000000000000000000000000000;;	// post-decorator (pass the http.Request along and react to the results in http.Response).
0000000000000000000000000000000000000000;;	func DecorateSender(s Sender, decorators ...SendDecorator) Sender {
0000000000000000000000000000000000000000;;		for _, decorate := range decorators {
0000000000000000000000000000000000000000;;			s = decorate(s)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
