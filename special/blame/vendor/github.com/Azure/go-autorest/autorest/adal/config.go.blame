0000000000000000000000000000000000000000;;	package adal
91454efdcfe2d233cf3f75fc014b3bb9ac6e5ae7;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		activeDirectoryAPIVersion = "1.0"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OAuthConfig represents the endpoints needed
0000000000000000000000000000000000000000;;	// in OAuth operations
0000000000000000000000000000000000000000;;	type OAuthConfig struct {
0000000000000000000000000000000000000000;;		AuthorityEndpoint  url.URL
0000000000000000000000000000000000000000;;		AuthorizeEndpoint  url.URL
0000000000000000000000000000000000000000;;		TokenEndpoint      url.URL
0000000000000000000000000000000000000000;;		DeviceCodeEndpoint url.URL
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewOAuthConfig returns an OAuthConfig with tenant specific urls
0000000000000000000000000000000000000000;;	func NewOAuthConfig(activeDirectoryEndpoint, tenantID string) (*OAuthConfig, error) {
0000000000000000000000000000000000000000;;		const activeDirectoryEndpointTemplate = "%s/oauth2/%s?api-version=%s"
0000000000000000000000000000000000000000;;		u, err := url.Parse(activeDirectoryEndpoint)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		authorityURL, err := u.Parse(tenantID)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		authorizeURL, err := u.Parse(fmt.Sprintf(activeDirectoryEndpointTemplate, tenantID, "authorize", activeDirectoryAPIVersion))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tokenURL, err := u.Parse(fmt.Sprintf(activeDirectoryEndpointTemplate, tenantID, "token", activeDirectoryAPIVersion))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		deviceCodeURL, err := u.Parse(fmt.Sprintf(activeDirectoryEndpointTemplate, tenantID, "devicecode", activeDirectoryAPIVersion))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &OAuthConfig{
0000000000000000000000000000000000000000;;			AuthorityEndpoint:  *authorityURL,
0000000000000000000000000000000000000000;;			AuthorizeEndpoint:  *authorizeURL,
0000000000000000000000000000000000000000;;			TokenEndpoint:      *tokenURL,
0000000000000000000000000000000000000000;;			DeviceCodeEndpoint: *deviceCodeURL,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
