0000000000000000000000000000000000000000;;	package adal
91454efdcfe2d233cf3f75fc014b3bb9ac6e5ae7;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"crypto/rand"
0000000000000000000000000000000000000000;;		"crypto/rsa"
0000000000000000000000000000000000000000;;		"crypto/sha1"
0000000000000000000000000000000000000000;;		"crypto/x509"
0000000000000000000000000000000000000000;;		"encoding/base64"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/dgrijalva/jwt-go"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		defaultRefresh = 5 * time.Minute
0000000000000000000000000000000000000000;;		tokenBaseDate  = "1970-01-01T00:00:00Z"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// OAuthGrantTypeDeviceCode is the "grant_type" identifier used in device flow
0000000000000000000000000000000000000000;;		OAuthGrantTypeDeviceCode = "device_code"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// OAuthGrantTypeClientCredentials is the "grant_type" identifier used in credential flows
0000000000000000000000000000000000000000;;		OAuthGrantTypeClientCredentials = "client_credentials"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// OAuthGrantTypeRefreshToken is the "grant_type" identifier used in refresh token flows
0000000000000000000000000000000000000000;;		OAuthGrantTypeRefreshToken = "refresh_token"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// managedIdentitySettingsPath is the path to the MSI Extension settings file (to discover the endpoint)
0000000000000000000000000000000000000000;;		managedIdentitySettingsPath = "/var/lib/waagent/ManagedIdentity-Settings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var expirationBase time.Time
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		expirationBase, _ = time.Parse(time.RFC3339, tokenBaseDate)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OAuthTokenProvider is an interface which should be implemented by an access token retriever
0000000000000000000000000000000000000000;;	type OAuthTokenProvider interface {
0000000000000000000000000000000000000000;;		OAuthToken() string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Refresher is an interface for token refresh functionality
0000000000000000000000000000000000000000;;	type Refresher interface {
0000000000000000000000000000000000000000;;		Refresh() error
0000000000000000000000000000000000000000;;		RefreshExchange(resource string) error
0000000000000000000000000000000000000000;;		EnsureFresh() error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TokenRefreshCallback is the type representing callbacks that will be called after
0000000000000000000000000000000000000000;;	// a successful token refresh
0000000000000000000000000000000000000000;;	type TokenRefreshCallback func(Token) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Token encapsulates the access token used to authorize Azure requests.
0000000000000000000000000000000000000000;;	type Token struct {
0000000000000000000000000000000000000000;;		AccessToken  string `json:"access_token"`
0000000000000000000000000000000000000000;;		RefreshToken string `json:"refresh_token"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ExpiresIn string `json:"expires_in"`
0000000000000000000000000000000000000000;;		ExpiresOn string `json:"expires_on"`
0000000000000000000000000000000000000000;;		NotBefore string `json:"not_before"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Resource string `json:"resource"`
0000000000000000000000000000000000000000;;		Type     string `json:"token_type"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Expires returns the time.Time when the Token expires.
0000000000000000000000000000000000000000;;	func (t Token) Expires() time.Time {
0000000000000000000000000000000000000000;;		s, err := strconv.Atoi(t.ExpiresOn)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			s = -3600
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return expirationBase.Add(time.Duration(s) * time.Second).UTC()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsExpired returns true if the Token is expired, false otherwise.
0000000000000000000000000000000000000000;;	func (t Token) IsExpired() bool {
0000000000000000000000000000000000000000;;		return t.WillExpireIn(0)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WillExpireIn returns true if the Token will expire after the passed time.Duration interval
0000000000000000000000000000000000000000;;	// from now, false otherwise.
0000000000000000000000000000000000000000;;	func (t Token) WillExpireIn(d time.Duration) bool {
0000000000000000000000000000000000000000;;		return !t.Expires().After(time.Now().Add(d))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//OAuthToken return the current access token
0000000000000000000000000000000000000000;;	func (t *Token) OAuthToken() string {
0000000000000000000000000000000000000000;;		return t.AccessToken
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ServicePrincipalNoSecret represents a secret type that contains no secret
0000000000000000000000000000000000000000;;	// meaning it is not valid for fetching a fresh token. This is used by Manual
0000000000000000000000000000000000000000;;	type ServicePrincipalNoSecret struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAuthenticationValues is a method of the interface ServicePrincipalSecret
0000000000000000000000000000000000000000;;	// It only returns an error for the ServicePrincipalNoSecret type
0000000000000000000000000000000000000000;;	func (noSecret *ServicePrincipalNoSecret) SetAuthenticationValues(spt *ServicePrincipalToken, v *url.Values) error {
0000000000000000000000000000000000000000;;		return fmt.Errorf("Manually created ServicePrincipalToken does not contain secret material to retrieve a new access token")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ServicePrincipalSecret is an interface that allows various secret mechanism to fill the form
0000000000000000000000000000000000000000;;	// that is submitted when acquiring an oAuth token.
0000000000000000000000000000000000000000;;	type ServicePrincipalSecret interface {
0000000000000000000000000000000000000000;;		SetAuthenticationValues(spt *ServicePrincipalToken, values *url.Values) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ServicePrincipalTokenSecret implements ServicePrincipalSecret for client_secret type authorization.
0000000000000000000000000000000000000000;;	type ServicePrincipalTokenSecret struct {
0000000000000000000000000000000000000000;;		ClientSecret string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAuthenticationValues is a method of the interface ServicePrincipalSecret.
0000000000000000000000000000000000000000;;	// It will populate the form submitted during oAuth Token Acquisition using the client_secret.
0000000000000000000000000000000000000000;;	func (tokenSecret *ServicePrincipalTokenSecret) SetAuthenticationValues(spt *ServicePrincipalToken, v *url.Values) error {
0000000000000000000000000000000000000000;;		v.Set("client_secret", tokenSecret.ClientSecret)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ServicePrincipalCertificateSecret implements ServicePrincipalSecret for generic RSA cert auth with signed JWTs.
0000000000000000000000000000000000000000;;	type ServicePrincipalCertificateSecret struct {
0000000000000000000000000000000000000000;;		Certificate *x509.Certificate
0000000000000000000000000000000000000000;;		PrivateKey  *rsa.PrivateKey
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ServicePrincipalMSISecret implements ServicePrincipalSecret for machines running the MSI Extension.
0000000000000000000000000000000000000000;;	type ServicePrincipalMSISecret struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAuthenticationValues is a method of the interface ServicePrincipalSecret.
0000000000000000000000000000000000000000;;	// MSI extension requires the authority field to be set to the real tenant authority endpoint
0000000000000000000000000000000000000000;;	func (msiSecret *ServicePrincipalMSISecret) SetAuthenticationValues(spt *ServicePrincipalToken, v *url.Values) error {
0000000000000000000000000000000000000000;;		v.Set("authority", spt.oauthConfig.AuthorityEndpoint.String())
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SignJwt returns the JWT signed with the certificate's private key.
0000000000000000000000000000000000000000;;	func (secret *ServicePrincipalCertificateSecret) SignJwt(spt *ServicePrincipalToken) (string, error) {
0000000000000000000000000000000000000000;;		hasher := sha1.New()
0000000000000000000000000000000000000000;;		_, err := hasher.Write(secret.Certificate.Raw)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		thumbprint := base64.URLEncoding.EncodeToString(hasher.Sum(nil))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The jti (JWT ID) claim provides a unique identifier for the JWT.
0000000000000000000000000000000000000000;;		jti := make([]byte, 20)
0000000000000000000000000000000000000000;;		_, err = rand.Read(jti)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		token := jwt.New(jwt.SigningMethodRS256)
0000000000000000000000000000000000000000;;		token.Header["x5t"] = thumbprint
0000000000000000000000000000000000000000;;		token.Claims = jwt.MapClaims{
0000000000000000000000000000000000000000;;			"aud": spt.oauthConfig.TokenEndpoint.String(),
0000000000000000000000000000000000000000;;			"iss": spt.clientID,
0000000000000000000000000000000000000000;;			"sub": spt.clientID,
0000000000000000000000000000000000000000;;			"jti": base64.URLEncoding.EncodeToString(jti),
0000000000000000000000000000000000000000;;			"nbf": time.Now().Unix(),
0000000000000000000000000000000000000000;;			"exp": time.Now().Add(time.Hour * 24).Unix(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		signedString, err := token.SignedString(secret.PrivateKey)
0000000000000000000000000000000000000000;;		return signedString, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAuthenticationValues is a method of the interface ServicePrincipalSecret.
0000000000000000000000000000000000000000;;	// It will populate the form submitted during oAuth Token Acquisition using a JWT signed with a certificate.
0000000000000000000000000000000000000000;;	func (secret *ServicePrincipalCertificateSecret) SetAuthenticationValues(spt *ServicePrincipalToken, v *url.Values) error {
0000000000000000000000000000000000000000;;		jwt, err := secret.SignJwt(spt)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		v.Set("client_assertion", jwt)
0000000000000000000000000000000000000000;;		v.Set("client_assertion_type", "urn:ietf:params:oauth:client-assertion-type:jwt-bearer")
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ServicePrincipalToken encapsulates a Token created for a Service Principal.
0000000000000000000000000000000000000000;;	type ServicePrincipalToken struct {
0000000000000000000000000000000000000000;;		Token
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		secret        ServicePrincipalSecret
0000000000000000000000000000000000000000;;		oauthConfig   OAuthConfig
0000000000000000000000000000000000000000;;		clientID      string
0000000000000000000000000000000000000000;;		resource      string
0000000000000000000000000000000000000000;;		autoRefresh   bool
0000000000000000000000000000000000000000;;		refreshWithin time.Duration
0000000000000000000000000000000000000000;;		sender        Sender
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		refreshCallbacks []TokenRefreshCallback
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewServicePrincipalTokenWithSecret create a ServicePrincipalToken using the supplied ServicePrincipalSecret implementation.
0000000000000000000000000000000000000000;;	func NewServicePrincipalTokenWithSecret(oauthConfig OAuthConfig, id string, resource string, secret ServicePrincipalSecret, callbacks ...TokenRefreshCallback) (*ServicePrincipalToken, error) {
0000000000000000000000000000000000000000;;		spt := &ServicePrincipalToken{
0000000000000000000000000000000000000000;;			oauthConfig:      oauthConfig,
0000000000000000000000000000000000000000;;			secret:           secret,
0000000000000000000000000000000000000000;;			clientID:         id,
0000000000000000000000000000000000000000;;			resource:         resource,
0000000000000000000000000000000000000000;;			autoRefresh:      true,
0000000000000000000000000000000000000000;;			refreshWithin:    defaultRefresh,
0000000000000000000000000000000000000000;;			sender:           &http.Client{},
0000000000000000000000000000000000000000;;			refreshCallbacks: callbacks,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return spt, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewServicePrincipalTokenFromManualToken creates a ServicePrincipalToken using the supplied token
0000000000000000000000000000000000000000;;	func NewServicePrincipalTokenFromManualToken(oauthConfig OAuthConfig, clientID string, resource string, token Token, callbacks ...TokenRefreshCallback) (*ServicePrincipalToken, error) {
0000000000000000000000000000000000000000;;		spt, err := NewServicePrincipalTokenWithSecret(
0000000000000000000000000000000000000000;;			oauthConfig,
0000000000000000000000000000000000000000;;			clientID,
0000000000000000000000000000000000000000;;			resource,
0000000000000000000000000000000000000000;;			&ServicePrincipalNoSecret{},
0000000000000000000000000000000000000000;;			callbacks...)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		spt.Token = token
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return spt, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewServicePrincipalToken creates a ServicePrincipalToken from the supplied Service Principal
0000000000000000000000000000000000000000;;	// credentials scoped to the named resource.
0000000000000000000000000000000000000000;;	func NewServicePrincipalToken(oauthConfig OAuthConfig, clientID string, secret string, resource string, callbacks ...TokenRefreshCallback) (*ServicePrincipalToken, error) {
0000000000000000000000000000000000000000;;		return NewServicePrincipalTokenWithSecret(
0000000000000000000000000000000000000000;;			oauthConfig,
0000000000000000000000000000000000000000;;			clientID,
0000000000000000000000000000000000000000;;			resource,
0000000000000000000000000000000000000000;;			&ServicePrincipalTokenSecret{
0000000000000000000000000000000000000000;;				ClientSecret: secret,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			callbacks...,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewServicePrincipalTokenFromCertificate create a ServicePrincipalToken from the supplied pkcs12 bytes.
0000000000000000000000000000000000000000;;	func NewServicePrincipalTokenFromCertificate(oauthConfig OAuthConfig, clientID string, certificate *x509.Certificate, privateKey *rsa.PrivateKey, resource string, callbacks ...TokenRefreshCallback) (*ServicePrincipalToken, error) {
0000000000000000000000000000000000000000;;		return NewServicePrincipalTokenWithSecret(
0000000000000000000000000000000000000000;;			oauthConfig,
0000000000000000000000000000000000000000;;			clientID,
0000000000000000000000000000000000000000;;			resource,
0000000000000000000000000000000000000000;;			&ServicePrincipalCertificateSecret{
0000000000000000000000000000000000000000;;				PrivateKey:  privateKey,
0000000000000000000000000000000000000000;;				Certificate: certificate,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			callbacks...,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewServicePrincipalTokenFromMSI creates a ServicePrincipalToken via the MSI VM Extension.
0000000000000000000000000000000000000000;;	func NewServicePrincipalTokenFromMSI(oauthConfig OAuthConfig, resource string, callbacks ...TokenRefreshCallback) (*ServicePrincipalToken, error) {
0000000000000000000000000000000000000000;;		return newServicePrincipalTokenFromMSI(oauthConfig, resource, managedIdentitySettingsPath, callbacks...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newServicePrincipalTokenFromMSI(oauthConfig OAuthConfig, resource, settingsPath string, callbacks ...TokenRefreshCallback) (*ServicePrincipalToken, error) {
0000000000000000000000000000000000000000;;		// Read MSI settings
0000000000000000000000000000000000000000;;		bytes, err := ioutil.ReadFile(settingsPath)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		msiSettings := struct {
0000000000000000000000000000000000000000;;			URL string `json:"url"`
0000000000000000000000000000000000000000;;		}{}
0000000000000000000000000000000000000000;;		err = json.Unmarshal(bytes, &msiSettings)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// We set the oauth config token endpoint to be MSI's endpoint
0000000000000000000000000000000000000000;;		// We leave the authority as-is so MSI can POST it with the token request
0000000000000000000000000000000000000000;;		msiEndpointURL, err := url.Parse(msiSettings.URL)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		msiTokenEndpointURL, err := msiEndpointURL.Parse("/oauth2/token")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		oauthConfig.TokenEndpoint = *msiTokenEndpointURL
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		spt := &ServicePrincipalToken{
0000000000000000000000000000000000000000;;			oauthConfig:      oauthConfig,
0000000000000000000000000000000000000000;;			secret:           &ServicePrincipalMSISecret{},
0000000000000000000000000000000000000000;;			resource:         resource,
0000000000000000000000000000000000000000;;			autoRefresh:      true,
0000000000000000000000000000000000000000;;			refreshWithin:    defaultRefresh,
0000000000000000000000000000000000000000;;			sender:           &http.Client{},
0000000000000000000000000000000000000000;;			refreshCallbacks: callbacks,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return spt, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EnsureFresh will refresh the token if it will expire within the refresh window (as set by
0000000000000000000000000000000000000000;;	// RefreshWithin) and autoRefresh flag is on.
0000000000000000000000000000000000000000;;	func (spt *ServicePrincipalToken) EnsureFresh() error {
0000000000000000000000000000000000000000;;		if spt.autoRefresh && spt.WillExpireIn(spt.refreshWithin) {
0000000000000000000000000000000000000000;;			return spt.Refresh()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InvokeRefreshCallbacks calls any TokenRefreshCallbacks that were added to the SPT during initialization
0000000000000000000000000000000000000000;;	func (spt *ServicePrincipalToken) InvokeRefreshCallbacks(token Token) error {
0000000000000000000000000000000000000000;;		if spt.refreshCallbacks != nil {
0000000000000000000000000000000000000000;;			for _, callback := range spt.refreshCallbacks {
0000000000000000000000000000000000000000;;				err := callback(spt.Token)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return fmt.Errorf("adal: TokenRefreshCallback handler failed. Error = '%v'", err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Refresh obtains a fresh token for the Service Principal.
0000000000000000000000000000000000000000;;	func (spt *ServicePrincipalToken) Refresh() error {
0000000000000000000000000000000000000000;;		return spt.refreshInternal(spt.resource)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RefreshExchange refreshes the token, but for a different resource.
0000000000000000000000000000000000000000;;	func (spt *ServicePrincipalToken) RefreshExchange(resource string) error {
0000000000000000000000000000000000000000;;		return spt.refreshInternal(resource)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (spt *ServicePrincipalToken) refreshInternal(resource string) error {
0000000000000000000000000000000000000000;;		v := url.Values{}
0000000000000000000000000000000000000000;;		v.Set("client_id", spt.clientID)
0000000000000000000000000000000000000000;;		v.Set("resource", resource)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if spt.RefreshToken != "" {
0000000000000000000000000000000000000000;;			v.Set("grant_type", OAuthGrantTypeRefreshToken)
0000000000000000000000000000000000000000;;			v.Set("refresh_token", spt.RefreshToken)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			v.Set("grant_type", OAuthGrantTypeClientCredentials)
0000000000000000000000000000000000000000;;			err := spt.secret.SetAuthenticationValues(spt, &v)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s := v.Encode()
0000000000000000000000000000000000000000;;		body := ioutil.NopCloser(strings.NewReader(s))
0000000000000000000000000000000000000000;;		req, err := http.NewRequest(http.MethodPost, spt.oauthConfig.TokenEndpoint.String(), body)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("adal: Failed to build the refresh request. Error = '%v'", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req.ContentLength = int64(len(s))
0000000000000000000000000000000000000000;;		req.Header.Set(contentType, mimeTypeFormPost)
0000000000000000000000000000000000000000;;		resp, err := spt.sender.Do(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("adal: Failed to execute the refresh request. Error = '%v'", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;		if resp.StatusCode != http.StatusOK {
0000000000000000000000000000000000000000;;			return fmt.Errorf("adal: Refresh request failed. Status Code = '%d'", resp.StatusCode)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		rb, err := ioutil.ReadAll(resp.Body)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("adal: Failed to read a new service principal token during refresh. Error = '%v'", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(strings.Trim(string(rb), " ")) == 0 {
0000000000000000000000000000000000000000;;			return fmt.Errorf("adal: Empty service principal token received during refresh")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var token Token
0000000000000000000000000000000000000000;;		err = json.Unmarshal(rb, &token)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("adal: Failed to unmarshal the service principal token during refresh. Error = '%v' JSON = '%s'", err, string(rb))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		spt.Token = token
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return spt.InvokeRefreshCallbacks(token)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAutoRefresh enables or disables automatic refreshing of stale tokens.
0000000000000000000000000000000000000000;;	func (spt *ServicePrincipalToken) SetAutoRefresh(autoRefresh bool) {
0000000000000000000000000000000000000000;;		spt.autoRefresh = autoRefresh
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetRefreshWithin sets the interval within which if the token will expire, EnsureFresh will
0000000000000000000000000000000000000000;;	// refresh the token.
0000000000000000000000000000000000000000;;	func (spt *ServicePrincipalToken) SetRefreshWithin(d time.Duration) {
0000000000000000000000000000000000000000;;		spt.refreshWithin = d
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSender sets the http.Client used when obtaining the Service Principal token. An
0000000000000000000000000000000000000000;;	// undecorated http.Client is used by default.
0000000000000000000000000000000000000000;;	func (spt *ServicePrincipalToken) SetSender(s Sender) { spt.sender = s }
