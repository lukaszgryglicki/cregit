0000000000000000000000000000000000000000;;	# Azure Active Directory library for Go
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	This project provides a stand alone Azure Active Directory library for Go. The code was extracted
0000000000000000000000000000000000000000;;	from [go-autorest](https://github.com/Azure/go-autorest/) project, which is used as a base for
0000000000000000000000000000000000000000;;	[azure-sdk-for-go](https://github.com/Azure/azure-sdk-for-go).
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Installation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	go get -u github.com/Azure/go-autorest/autorest/adal
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Usage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	An Active Directory application is required in order to use this library. An application can be registered in the [Azure Portal](https://portal.azure.com/) follow these [guidelines](https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-integrating-applications) or using the [Azure CLI](https://github.com/Azure/azure-cli).
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### Register an Azure AD Application with secret
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	1. Register a new application with a `secret` credential
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	   ```
0000000000000000000000000000000000000000;;	   az ad app create \
0000000000000000000000000000000000000000;;	      --display-name example-app \
0000000000000000000000000000000000000000;;	      --homepage https://example-app/home \
0000000000000000000000000000000000000000;;	      --identifier-uris https://example-app/app \
0000000000000000000000000000000000000000;;	      --password secret
0000000000000000000000000000000000000000;;	   ```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	2. Create a service principal using the `Application ID` from previous step
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	   ```
0000000000000000000000000000000000000000;;	   az ad sp create --id "Application ID"
0000000000000000000000000000000000000000;;	   ```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	   * Replace `Application ID` with `appId` from step 1.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### Register an Azure AD Application with certificate
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	1. Create a private key
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	   ```
0000000000000000000000000000000000000000;;	   openssl genrsa -out "example-app.key" 2048
0000000000000000000000000000000000000000;;	   ```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	2. Create the certificate
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	   ```
0000000000000000000000000000000000000000;;	   openssl req -new -key "example-app.key" -subj "/CN=example-app" -out "example-app.csr"
0000000000000000000000000000000000000000;;	   openssl x509 -req -in "example-app.csr" -signkey "example-app.key" -out "example-app.crt" -days 10000
0000000000000000000000000000000000000000;;	   ```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	3. Create the PKCS12 version of the certificate containing also the private key
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	   ```
0000000000000000000000000000000000000000;;	   openssl pkcs12 -export -out "example-app.pfx" -inkey "example-app.key" -in "example-app.crt" -passout pass:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	   ```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	4. Register a new application with the certificate content form `example-app.crt`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	   ```
0000000000000000000000000000000000000000;;	   certificateContents="$(tail -n+2 "example-app.crt" | head -n-1)"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	   az ad app create \
0000000000000000000000000000000000000000;;	      --display-name example-app \
0000000000000000000000000000000000000000;;	      --homepage https://example-app/home \
0000000000000000000000000000000000000000;;	      --identifier-uris https://example-app/app \
0000000000000000000000000000000000000000;;	      --key-usage Verify --end-date 2018-01-01 \
0000000000000000000000000000000000000000;;	      --key-value "${certificateContents}"
0000000000000000000000000000000000000000;;	   ```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	5. Create a service principal using the `Application ID` from previous step
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	   ```
0000000000000000000000000000000000000000;;	   az ad sp create --id "APPLICATION_ID"
0000000000000000000000000000000000000000;;	   ```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	   * Replace `APPLICATION_ID` with `appId` from step 4.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### Grant the necessary permissions
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Azure relies on a Role-Based Access Control (RBAC) model to manage the access to resources at a fine-grained
0000000000000000000000000000000000000000;;	level. There is a set of [pre-defined roles](https://docs.microsoft.com/en-us/azure/active-directory/role-based-access-built-in-roles)
0000000000000000000000000000000000000000;;	which can be assigned to a service principal of an Azure AD application depending of your needs.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	az role assignment create --assigner "SERVICE_PRINCIPAL_ID" --role "ROLE_NAME"
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	* Replace the `SERVICE_PRINCIPAL_ID` with the `appId` from previous step.
0000000000000000000000000000000000000000;;	* Replace the `ROLE_NAME` with a role name of your choice.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	It is also possible to define custom role definitions.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	az role definition create --role-definition role-definition.json
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	* Check [custom roles](https://docs.microsoft.com/en-us/azure/active-directory/role-based-access-control-custom-roles) for more details regarding the content of `role-definition.json` file.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### Acquire Access Token
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The common configuration used by all flows:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```Go
0000000000000000000000000000000000000000;;	const activeDirectoryEndpoint = "https://login.microsoftonline.com/"
0000000000000000000000000000000000000000;;	tenantID := "TENANT_ID"
0000000000000000000000000000000000000000;;	oauthConfig, err := adal.NewOAuthConfig(activeDirectoryEndpoint, tenantID)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	applicationID := "APPLICATION_ID"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	callback := func(token adal.Token) error {
0000000000000000000000000000000000000000;;	    // This is called after the token is acquired
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The resource for which the token is acquired
0000000000000000000000000000000000000000;;	resource := "https://management.core.windows.net/"
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	* Replace the `TENANT_ID` with your tenant ID.
0000000000000000000000000000000000000000;;	* Replace the `APPLICATION_ID` with the value from previous section.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#### Client Credentials
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```Go
0000000000000000000000000000000000000000;;	applicationSecret := "APPLICATION_SECRET"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	spt, err := adal.NewServicePrincipalToken(
0000000000000000000000000000000000000000;;		oauthConfig,
0000000000000000000000000000000000000000;;		appliationID,
0000000000000000000000000000000000000000;;		applicationSecret,
0000000000000000000000000000000000000000;;		resource,
0000000000000000000000000000000000000000;;		callbacks...)
0000000000000000000000000000000000000000;;	if err != nil {
0000000000000000000000000000000000000000;;		return nil, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Acquire a new access token
0000000000000000000000000000000000000000;;	err  = spt.Refresh()
0000000000000000000000000000000000000000;;	if (err == nil) {
0000000000000000000000000000000000000000;;	    token := spt.Token
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	* Replace the `APPLICATION_SECRET` with the `password` value from previous section.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#### Client Certificate
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```Go
0000000000000000000000000000000000000000;;	certificatePath := "./example-app.pfx"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	certData, err := ioutil.ReadFile(certificatePath)
0000000000000000000000000000000000000000;;	if err != nil {
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("failed to read the certificate file (%s): %v", certificatePath, err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get the certificate and private key from pfx file
0000000000000000000000000000000000000000;;	certificate, rsaPrivateKey, err := decodePkcs12(certData, "")
0000000000000000000000000000000000000000;;	if err != nil {
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("failed to decode pkcs12 certificate while creating spt: %v", err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	spt, err := adal.NewServicePrincipalTokenFromCertificate(
0000000000000000000000000000000000000000;;		oauthConfig,
0000000000000000000000000000000000000000;;		applicationID,
0000000000000000000000000000000000000000;;		certificate,
0000000000000000000000000000000000000000;;		rsaPrivateKey,
0000000000000000000000000000000000000000;;		resource,
0000000000000000000000000000000000000000;;		callbacks...)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Acquire a new access token
0000000000000000000000000000000000000000;;	err  = spt.Refresh()
0000000000000000000000000000000000000000;;	if (err == nil) {
0000000000000000000000000000000000000000;;	    token := spt.Token
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	* Update the certificate path to point to the example-app.pfx file which was created in previous section.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#### Device Code
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```Go
0000000000000000000000000000000000000000;;	oauthClient := &http.Client{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Acquire the device code
0000000000000000000000000000000000000000;;	deviceCode, err := adal.InitiateDeviceAuth(
0000000000000000000000000000000000000000;;		oauthClient,
0000000000000000000000000000000000000000;;		oauthConfig,
0000000000000000000000000000000000000000;;		applicationID,
0000000000000000000000000000000000000000;;		resource)
0000000000000000000000000000000000000000;;	if err != nil {
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("Failed to start device auth flow: %s", err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Display the authentication message
0000000000000000000000000000000000000000;;	fmt.Println(*deviceCode.Message)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Wait here until the user is authenticated
0000000000000000000000000000000000000000;;	token, err := adal.WaitForUserCompletion(oauthClient, deviceCode)
0000000000000000000000000000000000000000;;	if err != nil {
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("Failed to finish device auth flow: %s", err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	spt, err := adal.NewServicePrincipalTokenFromManualToken(
0000000000000000000000000000000000000000;;		oauthConfig,
0000000000000000000000000000000000000000;;		applicationID,
0000000000000000000000000000000000000000;;		resource,
0000000000000000000000000000000000000000;;		*token,
0000000000000000000000000000000000000000;;		callbacks...)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if (err == nil) {
0000000000000000000000000000000000000000;;	    token := spt.Token
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### Command Line Tool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	A command line tool is available in `cmd/adal.go` that can acquire a token for a given resource. It supports all flows mentioned above.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	adal -h
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Usage of ./adal:
0000000000000000000000000000000000000000;;	  -applicationId string
0000000000000000000000000000000000000000;;	        application id
0000000000000000000000000000000000000000;;	  -certificatePath string
0000000000000000000000000000000000000000;;	        path to pk12/PFC application certificate
0000000000000000000000000000000000000000;;	  -mode string
0000000000000000000000000000000000000000;;	        authentication mode (device, secret, cert, refresh) (default "device")
0000000000000000000000000000000000000000;;	  -resource string
0000000000000000000000000000000000000000;;	        resource for which the token is requested
0000000000000000000000000000000000000000;;	  -secret string
0000000000000000000000000000000000000000;;	        application secret
0000000000000000000000000000000000000000;;	  -tenantId string
0000000000000000000000000000000000000000;;	        tenant id
0000000000000000000000000000000000000000;;	  -tokenCachePath string
0000000000000000000000000000000000000000;;	        location of oath token cache (default "/home/cgc/.adal/accessToken.json")
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Example acquire a token for `https://management.core.windows.net/` using device code flow:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	adal -mode device \
0000000000000000000000000000000000000000;;	    -applicationId "APPLICATION_ID" \
0000000000000000000000000000000000000000;;	    -tenantId "TENANT_ID" \
0000000000000000000000000000000000000000;;	    -resource https://management.core.windows.net/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```
