0000000000000000000000000000000000000000;;	package autorest
6d6afa491b422a1e9d1fe39b10df70e4bf5254bf;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"mime/multipart"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		mimeTypeJSON     = "application/json"
0000000000000000000000000000000000000000;;		mimeTypeFormPost = "application/x-www-form-urlencoded"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		headerAuthorization = "Authorization"
0000000000000000000000000000000000000000;;		headerContentType   = "Content-Type"
0000000000000000000000000000000000000000;;		headerUserAgent     = "User-Agent"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Preparer is the interface that wraps the Prepare method.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Prepare accepts and possibly modifies an http.Request (e.g., adding Headers). Implementations
0000000000000000000000000000000000000000;;	// must ensure to not share or hold per-invocation state since Preparers may be shared and re-used.
0000000000000000000000000000000000000000;;	type Preparer interface {
0000000000000000000000000000000000000000;;		Prepare(*http.Request) (*http.Request, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PreparerFunc is a method that implements the Preparer interface.
0000000000000000000000000000000000000000;;	type PreparerFunc func(*http.Request) (*http.Request, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Prepare implements the Preparer interface on PreparerFunc.
0000000000000000000000000000000000000000;;	func (pf PreparerFunc) Prepare(r *http.Request) (*http.Request, error) {
0000000000000000000000000000000000000000;;		return pf(r)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PrepareDecorator takes and possibly decorates, by wrapping, a Preparer. Decorators may affect the
0000000000000000000000000000000000000000;;	// http.Request and pass it along or, first, pass the http.Request along then affect the result.
0000000000000000000000000000000000000000;;	type PrepareDecorator func(Preparer) Preparer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreatePreparer creates, decorates, and returns a Preparer.
0000000000000000000000000000000000000000;;	// Without decorators, the returned Preparer returns the passed http.Request unmodified.
0000000000000000000000000000000000000000;;	// Preparers are safe to share and re-use.
0000000000000000000000000000000000000000;;	func CreatePreparer(decorators ...PrepareDecorator) Preparer {
0000000000000000000000000000000000000000;;		return DecoratePreparer(
0000000000000000000000000000000000000000;;			Preparer(PreparerFunc(func(r *http.Request) (*http.Request, error) { return r, nil })),
0000000000000000000000000000000000000000;;			decorators...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DecoratePreparer accepts a Preparer and a, possibly empty, set of PrepareDecorators, which it
0000000000000000000000000000000000000000;;	// applies to the Preparer. Decorators are applied in the order received, but their affect upon the
0000000000000000000000000000000000000000;;	// request depends on whether they are a pre-decorator (change the http.Request and then pass it
0000000000000000000000000000000000000000;;	// along) or a post-decorator (pass the http.Request along and alter it on return).
0000000000000000000000000000000000000000;;	func DecoratePreparer(p Preparer, decorators ...PrepareDecorator) Preparer {
0000000000000000000000000000000000000000;;		for _, decorate := range decorators {
0000000000000000000000000000000000000000;;			p = decorate(p)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Prepare accepts an http.Request and a, possibly empty, set of PrepareDecorators.
0000000000000000000000000000000000000000;;	// It creates a Preparer from the decorators which it then applies to the passed http.Request.
0000000000000000000000000000000000000000;;	func Prepare(r *http.Request, decorators ...PrepareDecorator) (*http.Request, error) {
0000000000000000000000000000000000000000;;		if r == nil {
0000000000000000000000000000000000000000;;			return nil, NewError("autorest", "Prepare", "Invoked without an http.Request")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return CreatePreparer(decorators...).Prepare(r)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithNothing returns a "do nothing" PrepareDecorator that makes no changes to the passed
0000000000000000000000000000000000000000;;	// http.Request.
0000000000000000000000000000000000000000;;	func WithNothing() PrepareDecorator {
0000000000000000000000000000000000000000;;		return func(p Preparer) Preparer {
0000000000000000000000000000000000000000;;			return PreparerFunc(func(r *http.Request) (*http.Request, error) {
0000000000000000000000000000000000000000;;				return p.Prepare(r)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithHeader returns a PrepareDecorator that sets the specified HTTP header of the http.Request to
0000000000000000000000000000000000000000;;	// the passed value. It canonicalizes the passed header name (via http.CanonicalHeaderKey) before
0000000000000000000000000000000000000000;;	// adding the header.
0000000000000000000000000000000000000000;;	func WithHeader(header string, value string) PrepareDecorator {
0000000000000000000000000000000000000000;;		return func(p Preparer) Preparer {
0000000000000000000000000000000000000000;;			return PreparerFunc(func(r *http.Request) (*http.Request, error) {
0000000000000000000000000000000000000000;;				r, err := p.Prepare(r)
0000000000000000000000000000000000000000;;				if err == nil {
0000000000000000000000000000000000000000;;					if r.Header == nil {
0000000000000000000000000000000000000000;;						r.Header = make(http.Header)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					r.Header.Set(http.CanonicalHeaderKey(header), value)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return r, err
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithBearerAuthorization returns a PrepareDecorator that adds an HTTP Authorization header whose
0000000000000000000000000000000000000000;;	// value is "Bearer " followed by the supplied token.
0000000000000000000000000000000000000000;;	func WithBearerAuthorization(token string) PrepareDecorator {
0000000000000000000000000000000000000000;;		return WithHeader(headerAuthorization, fmt.Sprintf("Bearer %s", token))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AsContentType returns a PrepareDecorator that adds an HTTP Content-Type header whose value
0000000000000000000000000000000000000000;;	// is the passed contentType.
0000000000000000000000000000000000000000;;	func AsContentType(contentType string) PrepareDecorator {
0000000000000000000000000000000000000000;;		return WithHeader(headerContentType, contentType)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithUserAgent returns a PrepareDecorator that adds an HTTP User-Agent header whose value is the
0000000000000000000000000000000000000000;;	// passed string.
0000000000000000000000000000000000000000;;	func WithUserAgent(ua string) PrepareDecorator {
0000000000000000000000000000000000000000;;		return WithHeader(headerUserAgent, ua)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AsFormURLEncoded returns a PrepareDecorator that adds an HTTP Content-Type header whose value is
0000000000000000000000000000000000000000;;	// "application/x-www-form-urlencoded".
0000000000000000000000000000000000000000;;	func AsFormURLEncoded() PrepareDecorator {
0000000000000000000000000000000000000000;;		return AsContentType(mimeTypeFormPost)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AsJSON returns a PrepareDecorator that adds an HTTP Content-Type header whose value is
0000000000000000000000000000000000000000;;	// "application/json".
0000000000000000000000000000000000000000;;	func AsJSON() PrepareDecorator {
0000000000000000000000000000000000000000;;		return AsContentType(mimeTypeJSON)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithMethod returns a PrepareDecorator that sets the HTTP method of the passed request. The
0000000000000000000000000000000000000000;;	// decorator does not validate that the passed method string is a known HTTP method.
0000000000000000000000000000000000000000;;	func WithMethod(method string) PrepareDecorator {
0000000000000000000000000000000000000000;;		return func(p Preparer) Preparer {
0000000000000000000000000000000000000000;;			return PreparerFunc(func(r *http.Request) (*http.Request, error) {
0000000000000000000000000000000000000000;;				r.Method = method
0000000000000000000000000000000000000000;;				return p.Prepare(r)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AsDelete returns a PrepareDecorator that sets the HTTP method to DELETE.
0000000000000000000000000000000000000000;;	func AsDelete() PrepareDecorator { return WithMethod("DELETE") }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AsGet returns a PrepareDecorator that sets the HTTP method to GET.
0000000000000000000000000000000000000000;;	func AsGet() PrepareDecorator { return WithMethod("GET") }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AsHead returns a PrepareDecorator that sets the HTTP method to HEAD.
0000000000000000000000000000000000000000;;	func AsHead() PrepareDecorator { return WithMethod("HEAD") }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AsOptions returns a PrepareDecorator that sets the HTTP method to OPTIONS.
0000000000000000000000000000000000000000;;	func AsOptions() PrepareDecorator { return WithMethod("OPTIONS") }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AsPatch returns a PrepareDecorator that sets the HTTP method to PATCH.
0000000000000000000000000000000000000000;;	func AsPatch() PrepareDecorator { return WithMethod("PATCH") }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AsPost returns a PrepareDecorator that sets the HTTP method to POST.
0000000000000000000000000000000000000000;;	func AsPost() PrepareDecorator { return WithMethod("POST") }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AsPut returns a PrepareDecorator that sets the HTTP method to PUT.
0000000000000000000000000000000000000000;;	func AsPut() PrepareDecorator { return WithMethod("PUT") }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithBaseURL returns a PrepareDecorator that populates the http.Request with a url.URL constructed
0000000000000000000000000000000000000000;;	// from the supplied baseUrl.
0000000000000000000000000000000000000000;;	func WithBaseURL(baseURL string) PrepareDecorator {
0000000000000000000000000000000000000000;;		return func(p Preparer) Preparer {
0000000000000000000000000000000000000000;;			return PreparerFunc(func(r *http.Request) (*http.Request, error) {
0000000000000000000000000000000000000000;;				r, err := p.Prepare(r)
0000000000000000000000000000000000000000;;				if err == nil {
0000000000000000000000000000000000000000;;					var u *url.URL
0000000000000000000000000000000000000000;;					if u, err = url.Parse(baseURL); err != nil {
0000000000000000000000000000000000000000;;						return r, err
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if u.Scheme == "" {
0000000000000000000000000000000000000000;;						err = fmt.Errorf("autorest: No scheme detected in URL %s", baseURL)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if err == nil {
0000000000000000000000000000000000000000;;						r.URL = u
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return r, err
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithCustomBaseURL returns a PrepareDecorator that replaces brace-enclosed keys within the
0000000000000000000000000000000000000000;;	// request base URL (i.e., http.Request.URL) with the corresponding values from the passed map.
0000000000000000000000000000000000000000;;	func WithCustomBaseURL(baseURL string, urlParameters map[string]interface{}) PrepareDecorator {
0000000000000000000000000000000000000000;;		parameters := ensureValueStrings(urlParameters)
0000000000000000000000000000000000000000;;		for key, value := range parameters {
0000000000000000000000000000000000000000;;			baseURL = strings.Replace(baseURL, "{"+key+"}", value, -1)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return WithBaseURL(baseURL)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithFormData returns a PrepareDecoratore that "URL encodes" (e.g., bar=baz&foo=quux) into the
0000000000000000000000000000000000000000;;	// http.Request body.
0000000000000000000000000000000000000000;;	func WithFormData(v url.Values) PrepareDecorator {
0000000000000000000000000000000000000000;;		return func(p Preparer) Preparer {
0000000000000000000000000000000000000000;;			return PreparerFunc(func(r *http.Request) (*http.Request, error) {
0000000000000000000000000000000000000000;;				r, err := p.Prepare(r)
0000000000000000000000000000000000000000;;				if err == nil {
0000000000000000000000000000000000000000;;					s := v.Encode()
0000000000000000000000000000000000000000;;					r.ContentLength = int64(len(s))
0000000000000000000000000000000000000000;;					r.Body = ioutil.NopCloser(strings.NewReader(s))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return r, err
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithMultiPartFormData returns a PrepareDecoratore that "URL encodes" (e.g., bar=baz&foo=quux) form parameters
0000000000000000000000000000000000000000;;	// into the http.Request body.
0000000000000000000000000000000000000000;;	func WithMultiPartFormData(formDataParameters map[string]interface{}) PrepareDecorator {
0000000000000000000000000000000000000000;;		return func(p Preparer) Preparer {
0000000000000000000000000000000000000000;;			return PreparerFunc(func(r *http.Request) (*http.Request, error) {
0000000000000000000000000000000000000000;;				r, err := p.Prepare(r)
0000000000000000000000000000000000000000;;				if err == nil {
0000000000000000000000000000000000000000;;					var body bytes.Buffer
0000000000000000000000000000000000000000;;					writer := multipart.NewWriter(&body)
0000000000000000000000000000000000000000;;					for key, value := range formDataParameters {
0000000000000000000000000000000000000000;;						if rc, ok := value.(io.ReadCloser); ok {
0000000000000000000000000000000000000000;;							var fd io.Writer
0000000000000000000000000000000000000000;;							if fd, err = writer.CreateFormFile(key, key); err != nil {
0000000000000000000000000000000000000000;;								return r, err
0000000000000000000000000000000000000000;;							}
0000000000000000000000000000000000000000;;							if _, err = io.Copy(fd, rc); err != nil {
0000000000000000000000000000000000000000;;								return r, err
0000000000000000000000000000000000000000;;							}
0000000000000000000000000000000000000000;;						} else {
0000000000000000000000000000000000000000;;							if err = writer.WriteField(key, ensureValueString(value)); err != nil {
0000000000000000000000000000000000000000;;								return r, err
0000000000000000000000000000000000000000;;							}
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if err = writer.Close(); err != nil {
0000000000000000000000000000000000000000;;						return r, err
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if r.Header == nil {
0000000000000000000000000000000000000000;;						r.Header = make(http.Header)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					r.Header.Set(http.CanonicalHeaderKey(headerContentType), writer.FormDataContentType())
0000000000000000000000000000000000000000;;					r.Body = ioutil.NopCloser(bytes.NewReader(body.Bytes()))
0000000000000000000000000000000000000000;;					r.ContentLength = int64(body.Len())
0000000000000000000000000000000000000000;;					return r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return r, err
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithFile returns a PrepareDecorator that sends file in request body.
0000000000000000000000000000000000000000;;	func WithFile(f io.ReadCloser) PrepareDecorator {
0000000000000000000000000000000000000000;;		return func(p Preparer) Preparer {
0000000000000000000000000000000000000000;;			return PreparerFunc(func(r *http.Request) (*http.Request, error) {
0000000000000000000000000000000000000000;;				r, err := p.Prepare(r)
0000000000000000000000000000000000000000;;				if err == nil {
0000000000000000000000000000000000000000;;					b, err := ioutil.ReadAll(f)
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						return r, err
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					r.Body = ioutil.NopCloser(bytes.NewReader(b))
0000000000000000000000000000000000000000;;					r.ContentLength = int64(len(b))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return r, err
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithBool returns a PrepareDecorator that encodes the passed bool into the body of the request
0000000000000000000000000000000000000000;;	// and sets the Content-Length header.
0000000000000000000000000000000000000000;;	func WithBool(v bool) PrepareDecorator {
0000000000000000000000000000000000000000;;		return WithString(fmt.Sprintf("%v", v))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithFloat32 returns a PrepareDecorator that encodes the passed float32 into the body of the
0000000000000000000000000000000000000000;;	// request and sets the Content-Length header.
0000000000000000000000000000000000000000;;	func WithFloat32(v float32) PrepareDecorator {
0000000000000000000000000000000000000000;;		return WithString(fmt.Sprintf("%v", v))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithFloat64 returns a PrepareDecorator that encodes the passed float64 into the body of the
0000000000000000000000000000000000000000;;	// request and sets the Content-Length header.
0000000000000000000000000000000000000000;;	func WithFloat64(v float64) PrepareDecorator {
0000000000000000000000000000000000000000;;		return WithString(fmt.Sprintf("%v", v))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithInt32 returns a PrepareDecorator that encodes the passed int32 into the body of the request
0000000000000000000000000000000000000000;;	// and sets the Content-Length header.
0000000000000000000000000000000000000000;;	func WithInt32(v int32) PrepareDecorator {
0000000000000000000000000000000000000000;;		return WithString(fmt.Sprintf("%v", v))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithInt64 returns a PrepareDecorator that encodes the passed int64 into the body of the request
0000000000000000000000000000000000000000;;	// and sets the Content-Length header.
0000000000000000000000000000000000000000;;	func WithInt64(v int64) PrepareDecorator {
0000000000000000000000000000000000000000;;		return WithString(fmt.Sprintf("%v", v))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithString returns a PrepareDecorator that encodes the passed string into the body of the request
0000000000000000000000000000000000000000;;	// and sets the Content-Length header.
0000000000000000000000000000000000000000;;	func WithString(v string) PrepareDecorator {
0000000000000000000000000000000000000000;;		return func(p Preparer) Preparer {
0000000000000000000000000000000000000000;;			return PreparerFunc(func(r *http.Request) (*http.Request, error) {
0000000000000000000000000000000000000000;;				r, err := p.Prepare(r)
0000000000000000000000000000000000000000;;				if err == nil {
0000000000000000000000000000000000000000;;					r.ContentLength = int64(len(v))
0000000000000000000000000000000000000000;;					r.Body = ioutil.NopCloser(strings.NewReader(v))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return r, err
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithJSON returns a PrepareDecorator that encodes the data passed as JSON into the body of the
0000000000000000000000000000000000000000;;	// request and sets the Content-Length header.
0000000000000000000000000000000000000000;;	func WithJSON(v interface{}) PrepareDecorator {
0000000000000000000000000000000000000000;;		return func(p Preparer) Preparer {
0000000000000000000000000000000000000000;;			return PreparerFunc(func(r *http.Request) (*http.Request, error) {
0000000000000000000000000000000000000000;;				r, err := p.Prepare(r)
0000000000000000000000000000000000000000;;				if err == nil {
0000000000000000000000000000000000000000;;					b, err := json.Marshal(v)
0000000000000000000000000000000000000000;;					if err == nil {
0000000000000000000000000000000000000000;;						r.ContentLength = int64(len(b))
0000000000000000000000000000000000000000;;						r.Body = ioutil.NopCloser(bytes.NewReader(b))
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return r, err
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithPath returns a PrepareDecorator that adds the supplied path to the request URL. If the path
0000000000000000000000000000000000000000;;	// is absolute (that is, it begins with a "/"), it replaces the existing path.
0000000000000000000000000000000000000000;;	func WithPath(path string) PrepareDecorator {
0000000000000000000000000000000000000000;;		return func(p Preparer) Preparer {
0000000000000000000000000000000000000000;;			return PreparerFunc(func(r *http.Request) (*http.Request, error) {
0000000000000000000000000000000000000000;;				r, err := p.Prepare(r)
0000000000000000000000000000000000000000;;				if err == nil {
0000000000000000000000000000000000000000;;					if r.URL == nil {
0000000000000000000000000000000000000000;;						return r, NewError("autorest", "WithPath", "Invoked with a nil URL")
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if r.URL, err = parseURL(r.URL, path); err != nil {
0000000000000000000000000000000000000000;;						return r, err
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return r, err
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithEscapedPathParameters returns a PrepareDecorator that replaces brace-enclosed keys within the
0000000000000000000000000000000000000000;;	// request path (i.e., http.Request.URL.Path) with the corresponding values from the passed map. The
0000000000000000000000000000000000000000;;	// values will be escaped (aka URL encoded) before insertion into the path.
0000000000000000000000000000000000000000;;	func WithEscapedPathParameters(path string, pathParameters map[string]interface{}) PrepareDecorator {
0000000000000000000000000000000000000000;;		parameters := escapeValueStrings(ensureValueStrings(pathParameters))
0000000000000000000000000000000000000000;;		return func(p Preparer) Preparer {
0000000000000000000000000000000000000000;;			return PreparerFunc(func(r *http.Request) (*http.Request, error) {
0000000000000000000000000000000000000000;;				r, err := p.Prepare(r)
0000000000000000000000000000000000000000;;				if err == nil {
0000000000000000000000000000000000000000;;					if r.URL == nil {
0000000000000000000000000000000000000000;;						return r, NewError("autorest", "WithEscapedPathParameters", "Invoked with a nil URL")
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					for key, value := range parameters {
0000000000000000000000000000000000000000;;						path = strings.Replace(path, "{"+key+"}", value, -1)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if r.URL, err = parseURL(r.URL, path); err != nil {
0000000000000000000000000000000000000000;;						return r, err
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return r, err
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithPathParameters returns a PrepareDecorator that replaces brace-enclosed keys within the
0000000000000000000000000000000000000000;;	// request path (i.e., http.Request.URL.Path) with the corresponding values from the passed map.
0000000000000000000000000000000000000000;;	func WithPathParameters(path string, pathParameters map[string]interface{}) PrepareDecorator {
0000000000000000000000000000000000000000;;		parameters := ensureValueStrings(pathParameters)
0000000000000000000000000000000000000000;;		return func(p Preparer) Preparer {
0000000000000000000000000000000000000000;;			return PreparerFunc(func(r *http.Request) (*http.Request, error) {
0000000000000000000000000000000000000000;;				r, err := p.Prepare(r)
0000000000000000000000000000000000000000;;				if err == nil {
0000000000000000000000000000000000000000;;					if r.URL == nil {
0000000000000000000000000000000000000000;;						return r, NewError("autorest", "WithPathParameters", "Invoked with a nil URL")
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					for key, value := range parameters {
0000000000000000000000000000000000000000;;						path = strings.Replace(path, "{"+key+"}", value, -1)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					if r.URL, err = parseURL(r.URL, path); err != nil {
0000000000000000000000000000000000000000;;						return r, err
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return r, err
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func parseURL(u *url.URL, path string) (*url.URL, error) {
0000000000000000000000000000000000000000;;		p := strings.TrimRight(u.String(), "/")
0000000000000000000000000000000000000000;;		if !strings.HasPrefix(path, "/") {
0000000000000000000000000000000000000000;;			path = "/" + path
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return url.Parse(p + path)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithQueryParameters returns a PrepareDecorators that encodes and applies the query parameters
0000000000000000000000000000000000000000;;	// given in the supplied map (i.e., key=value).
0000000000000000000000000000000000000000;;	func WithQueryParameters(queryParameters map[string]interface{}) PrepareDecorator {
0000000000000000000000000000000000000000;;		parameters := ensureValueStrings(queryParameters)
0000000000000000000000000000000000000000;;		return func(p Preparer) Preparer {
0000000000000000000000000000000000000000;;			return PreparerFunc(func(r *http.Request) (*http.Request, error) {
0000000000000000000000000000000000000000;;				r, err := p.Prepare(r)
0000000000000000000000000000000000000000;;				if err == nil {
0000000000000000000000000000000000000000;;					if r.URL == nil {
0000000000000000000000000000000000000000;;						return r, NewError("autorest", "WithQueryParameters", "Invoked with a nil URL")
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					v := r.URL.Query()
0000000000000000000000000000000000000000;;					for key, value := range parameters {
0000000000000000000000000000000000000000;;						v.Add(key, value)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					r.URL.RawQuery = createQuery(v)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return r, err
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
