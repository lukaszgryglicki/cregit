0000000000000000000000000000000000000000;;	package date
6d6afa491b422a1e9d1fe39b10df70e4bf5254bf;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		rfc1123JSON = `"` + time.RFC1123 + `"`
0000000000000000000000000000000000000000;;		rfc1123     = time.RFC1123
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TimeRFC1123 defines a type similar to time.Time but assumes a layout of RFC1123 date-time (i.e.,
0000000000000000000000000000000000000000;;	// Mon, 02 Jan 2006 15:04:05 MST).
0000000000000000000000000000000000000000;;	type TimeRFC1123 struct {
0000000000000000000000000000000000000000;;		time.Time
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalJSON reconstitutes the Time from a JSON string conforming to RFC1123 date-time
0000000000000000000000000000000000000000;;	// (i.e., Mon, 02 Jan 2006 15:04:05 MST).
0000000000000000000000000000000000000000;;	func (t *TimeRFC1123) UnmarshalJSON(data []byte) (err error) {
0000000000000000000000000000000000000000;;		t.Time, err = ParseTime(rfc1123JSON, string(data))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalJSON preserves the Time as a JSON string conforming to RFC1123 date-time (i.e.,
0000000000000000000000000000000000000000;;	// Mon, 02 Jan 2006 15:04:05 MST).
0000000000000000000000000000000000000000;;	func (t TimeRFC1123) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		if y := t.Year(); y < 0 || y >= 10000 {
0000000000000000000000000000000000000000;;			return nil, errors.New("Time.MarshalJSON: year outside of range [0,9999]")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		b := []byte(t.Format(rfc1123JSON))
0000000000000000000000000000000000000000;;		return b, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalText preserves the Time as a byte array conforming to RFC1123 date-time (i.e.,
0000000000000000000000000000000000000000;;	// Mon, 02 Jan 2006 15:04:05 MST).
0000000000000000000000000000000000000000;;	func (t TimeRFC1123) MarshalText() ([]byte, error) {
0000000000000000000000000000000000000000;;		if y := t.Year(); y < 0 || y >= 10000 {
0000000000000000000000000000000000000000;;			return nil, errors.New("Time.MarshalText: year outside of range [0,9999]")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		b := []byte(t.Format(rfc1123))
0000000000000000000000000000000000000000;;		return b, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalText reconstitutes a Time saved as a byte array conforming to RFC1123 date-time
0000000000000000000000000000000000000000;;	// (i.e., Mon, 02 Jan 2006 15:04:05 MST).
0000000000000000000000000000000000000000;;	func (t *TimeRFC1123) UnmarshalText(data []byte) (err error) {
0000000000000000000000000000000000000000;;		t.Time, err = ParseTime(rfc1123, string(data))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalBinary preserves the Time as a byte array conforming to RFC1123 date-time (i.e.,
0000000000000000000000000000000000000000;;	// Mon, 02 Jan 2006 15:04:05 MST).
0000000000000000000000000000000000000000;;	func (t TimeRFC1123) MarshalBinary() ([]byte, error) {
0000000000000000000000000000000000000000;;		return t.MarshalText()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalBinary reconstitutes a Time saved as a byte array conforming to RFC1123 date-time
0000000000000000000000000000000000000000;;	// (i.e., Mon, 02 Jan 2006 15:04:05 MST).
0000000000000000000000000000000000000000;;	func (t *TimeRFC1123) UnmarshalBinary(data []byte) error {
0000000000000000000000000000000000000000;;		return t.UnmarshalText(data)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToTime returns a Time as a time.Time
0000000000000000000000000000000000000000;;	func (t TimeRFC1123) ToTime() time.Time {
0000000000000000000000000000000000000000;;		return t.Time
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the Time formatted as an RFC1123 date-time string (i.e.,
0000000000000000000000000000000000000000;;	// Mon, 02 Jan 2006 15:04:05 MST).
0000000000000000000000000000000000000000;;	func (t TimeRFC1123) String() string {
0000000000000000000000000000000000000000;;		// Note: time.Time.String does not return an RFC1123 compliant string, time.Time.MarshalText does.
0000000000000000000000000000000000000000;;		b, err := t.MarshalText()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return ""
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return string(b)
0000000000000000000000000000000000000000;;	}
