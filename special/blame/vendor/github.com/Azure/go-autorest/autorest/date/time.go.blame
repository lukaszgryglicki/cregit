0000000000000000000000000000000000000000;;	package date
6d6afa491b422a1e9d1fe39b10df70e4bf5254bf;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"regexp"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Azure reports time in UTC but it doesn't include the 'Z' time zone suffix in some cases.
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		azureUtcFormatJSON = `"2006-01-02T15:04:05.999999999"`
0000000000000000000000000000000000000000;;		azureUtcFormat     = "2006-01-02T15:04:05.999999999"
0000000000000000000000000000000000000000;;		rfc3339JSON        = `"` + time.RFC3339Nano + `"`
0000000000000000000000000000000000000000;;		rfc3339            = time.RFC3339Nano
0000000000000000000000000000000000000000;;		tzOffsetRegex      = `(Z|z|\+|-)(\d+:\d+)*"*$`
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Time defines a type similar to time.Time but assumes a layout of RFC3339 date-time (i.e.,
0000000000000000000000000000000000000000;;	// 2006-01-02T15:04:05Z).
0000000000000000000000000000000000000000;;	type Time struct {
0000000000000000000000000000000000000000;;		time.Time
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalBinary preserves the Time as a byte array conforming to RFC3339 date-time (i.e.,
0000000000000000000000000000000000000000;;	// 2006-01-02T15:04:05Z).
0000000000000000000000000000000000000000;;	func (t Time) MarshalBinary() ([]byte, error) {
0000000000000000000000000000000000000000;;		return t.Time.MarshalText()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalBinary reconstitutes a Time saved as a byte array conforming to RFC3339 date-time
0000000000000000000000000000000000000000;;	// (i.e., 2006-01-02T15:04:05Z).
0000000000000000000000000000000000000000;;	func (t *Time) UnmarshalBinary(data []byte) error {
0000000000000000000000000000000000000000;;		return t.UnmarshalText(data)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalJSON preserves the Time as a JSON string conforming to RFC3339 date-time (i.e.,
0000000000000000000000000000000000000000;;	// 2006-01-02T15:04:05Z).
0000000000000000000000000000000000000000;;	func (t Time) MarshalJSON() (json []byte, err error) {
0000000000000000000000000000000000000000;;		return t.Time.MarshalJSON()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalJSON reconstitutes the Time from a JSON string conforming to RFC3339 date-time
0000000000000000000000000000000000000000;;	// (i.e., 2006-01-02T15:04:05Z).
0000000000000000000000000000000000000000;;	func (t *Time) UnmarshalJSON(data []byte) (err error) {
0000000000000000000000000000000000000000;;		timeFormat := azureUtcFormatJSON
0000000000000000000000000000000000000000;;		match, err := regexp.Match(tzOffsetRegex, data)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		} else if match {
0000000000000000000000000000000000000000;;			timeFormat = rfc3339JSON
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		t.Time, err = ParseTime(timeFormat, string(data))
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalText preserves the Time as a byte array conforming to RFC3339 date-time (i.e.,
0000000000000000000000000000000000000000;;	// 2006-01-02T15:04:05Z).
0000000000000000000000000000000000000000;;	func (t Time) MarshalText() (text []byte, err error) {
0000000000000000000000000000000000000000;;		return t.Time.MarshalText()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalText reconstitutes a Time saved as a byte array conforming to RFC3339 date-time
0000000000000000000000000000000000000000;;	// (i.e., 2006-01-02T15:04:05Z).
0000000000000000000000000000000000000000;;	func (t *Time) UnmarshalText(data []byte) (err error) {
0000000000000000000000000000000000000000;;		timeFormat := azureUtcFormat
0000000000000000000000000000000000000000;;		match, err := regexp.Match(tzOffsetRegex, data)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		} else if match {
0000000000000000000000000000000000000000;;			timeFormat = rfc3339
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		t.Time, err = ParseTime(timeFormat, string(data))
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the Time formatted as an RFC3339 date-time string (i.e.,
0000000000000000000000000000000000000000;;	// 2006-01-02T15:04:05Z).
0000000000000000000000000000000000000000;;	func (t Time) String() string {
0000000000000000000000000000000000000000;;		// Note: time.Time.String does not return an RFC3339 compliant string, time.Time.MarshalText does.
0000000000000000000000000000000000000000;;		b, err := t.MarshalText()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return ""
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return string(b)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToTime returns a Time as a time.Time
0000000000000000000000000000000000000000;;	func (t Time) ToTime() time.Time {
0000000000000000000000000000000000000000;;		return t.Time
0000000000000000000000000000000000000000;;	}
