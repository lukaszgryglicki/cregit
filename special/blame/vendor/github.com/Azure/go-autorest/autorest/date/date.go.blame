0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Package date provides time.Time derivatives that conform to the Swagger.io (https://swagger.io/)
0000000000000000000000000000000000000000;;	defined date   formats: Date and DateTime. Both types may, in most cases, be used in lieu of
0000000000000000000000000000000000000000;;	time.Time types. And both convert to time.Time through a ToTime method.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	package date
6d6afa491b422a1e9d1fe39b10df70e4bf5254bf;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		fullDate     = "2006-01-02"
0000000000000000000000000000000000000000;;		fullDateJSON = `"2006-01-02"`
0000000000000000000000000000000000000000;;		dateFormat   = "%04d-%02d-%02d"
0000000000000000000000000000000000000000;;		jsonFormat   = `"%04d-%02d-%02d"`
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Date defines a type similar to time.Time but assumes a layout of RFC3339 full-date (i.e.,
0000000000000000000000000000000000000000;;	// 2006-01-02).
0000000000000000000000000000000000000000;;	type Date struct {
0000000000000000000000000000000000000000;;		time.Time
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ParseDate create a new Date from the passed string.
0000000000000000000000000000000000000000;;	func ParseDate(date string) (d Date, err error) {
0000000000000000000000000000000000000000;;		return parseDate(date, fullDate)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func parseDate(date string, format string) (Date, error) {
0000000000000000000000000000000000000000;;		d, err := time.Parse(format, date)
0000000000000000000000000000000000000000;;		return Date{Time: d}, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalBinary preserves the Date as a byte array conforming to RFC3339 full-date (i.e.,
0000000000000000000000000000000000000000;;	// 2006-01-02).
0000000000000000000000000000000000000000;;	func (d Date) MarshalBinary() ([]byte, error) {
0000000000000000000000000000000000000000;;		return d.MarshalText()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalBinary reconstitutes a Date saved as a byte array conforming to RFC3339 full-date (i.e.,
0000000000000000000000000000000000000000;;	// 2006-01-02).
0000000000000000000000000000000000000000;;	func (d *Date) UnmarshalBinary(data []byte) error {
0000000000000000000000000000000000000000;;		return d.UnmarshalText(data)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalJSON preserves the Date as a JSON string conforming to RFC3339 full-date (i.e.,
0000000000000000000000000000000000000000;;	// 2006-01-02).
0000000000000000000000000000000000000000;;	func (d Date) MarshalJSON() (json []byte, err error) {
0000000000000000000000000000000000000000;;		return []byte(fmt.Sprintf(jsonFormat, d.Year(), d.Month(), d.Day())), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalJSON reconstitutes the Date from a JSON string conforming to RFC3339 full-date (i.e.,
0000000000000000000000000000000000000000;;	// 2006-01-02).
0000000000000000000000000000000000000000;;	func (d *Date) UnmarshalJSON(data []byte) (err error) {
0000000000000000000000000000000000000000;;		d.Time, err = time.Parse(fullDateJSON, string(data))
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalText preserves the Date as a byte array conforming to RFC3339 full-date (i.e.,
0000000000000000000000000000000000000000;;	// 2006-01-02).
0000000000000000000000000000000000000000;;	func (d Date) MarshalText() (text []byte, err error) {
0000000000000000000000000000000000000000;;		return []byte(fmt.Sprintf(dateFormat, d.Year(), d.Month(), d.Day())), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalText reconstitutes a Date saved as a byte array conforming to RFC3339 full-date (i.e.,
0000000000000000000000000000000000000000;;	// 2006-01-02).
0000000000000000000000000000000000000000;;	func (d *Date) UnmarshalText(data []byte) (err error) {
0000000000000000000000000000000000000000;;		d.Time, err = time.Parse(fullDate, string(data))
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the Date formatted as an RFC3339 full-date string (i.e., 2006-01-02).
0000000000000000000000000000000000000000;;	func (d Date) String() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf(dateFormat, d.Year(), d.Month(), d.Day())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToTime returns a Date as a time.Time
0000000000000000000000000000000000000000;;	func (d Date) ToTime() time.Time {
0000000000000000000000000000000000000000;;		return d.Time
0000000000000000000000000000000000000000;;	}
