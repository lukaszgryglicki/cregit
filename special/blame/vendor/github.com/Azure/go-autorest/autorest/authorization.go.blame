0000000000000000000000000000000000000000;;	package autorest
91454efdcfe2d233cf3f75fc014b3bb9ac6e5ae7;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/Azure/go-autorest/autorest/adal"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Authorizer is the interface that provides a PrepareDecorator used to supply request
0000000000000000000000000000000000000000;;	// authorization. Most often, the Authorizer decorator runs last so it has access to the full
0000000000000000000000000000000000000000;;	// state of the formed HTTP request.
0000000000000000000000000000000000000000;;	type Authorizer interface {
0000000000000000000000000000000000000000;;		WithAuthorization() PrepareDecorator
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NullAuthorizer implements a default, "do nothing" Authorizer.
0000000000000000000000000000000000000000;;	type NullAuthorizer struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithAuthorization returns a PrepareDecorator that does nothing.
0000000000000000000000000000000000000000;;	func (na NullAuthorizer) WithAuthorization() PrepareDecorator {
0000000000000000000000000000000000000000;;		return WithNothing()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BearerAuthorizer implements the bearer authorization
0000000000000000000000000000000000000000;;	type BearerAuthorizer struct {
0000000000000000000000000000000000000000;;		tokenProvider adal.OAuthTokenProvider
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewBearerAuthorizer crates a BearerAuthorizer using the given token provider
0000000000000000000000000000000000000000;;	func NewBearerAuthorizer(tp adal.OAuthTokenProvider) *BearerAuthorizer {
0000000000000000000000000000000000000000;;		return &BearerAuthorizer{tokenProvider: tp}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ba *BearerAuthorizer) withBearerAuthorization() PrepareDecorator {
0000000000000000000000000000000000000000;;		return WithHeader(headerAuthorization, fmt.Sprintf("Bearer %s", ba.tokenProvider.OAuthToken()))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithAuthorization returns a PrepareDecorator that adds an HTTP Authorization header whose
0000000000000000000000000000000000000000;;	// value is "Bearer " followed by the token.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// By default, the token will be automatically refreshed through the Refresher interface.
0000000000000000000000000000000000000000;;	func (ba *BearerAuthorizer) WithAuthorization() PrepareDecorator {
0000000000000000000000000000000000000000;;		return func(p Preparer) Preparer {
0000000000000000000000000000000000000000;;			return PreparerFunc(func(r *http.Request) (*http.Request, error) {
0000000000000000000000000000000000000000;;				refresher, ok := ba.tokenProvider.(adal.Refresher)
0000000000000000000000000000000000000000;;				if ok {
0000000000000000000000000000000000000000;;					err := refresher.EnsureFresh()
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						return r, NewErrorWithError(err, "azure.BearerAuthorizer", "WithAuthorization", nil,
0000000000000000000000000000000000000000;;							"Failed to refresh the Token for request to %s", r.URL)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return (ba.withBearerAuthorization()(p)).Prepare(r)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
