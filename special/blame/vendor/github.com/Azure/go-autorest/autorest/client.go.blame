0000000000000000000000000000000000000000;;	package autorest
6d6afa491b422a1e9d1fe39b10df70e4bf5254bf;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"log"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/http/cookiejar"
0000000000000000000000000000000000000000;;		"runtime"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// DefaultPollingDelay is a reasonable delay between polling requests.
0000000000000000000000000000000000000000;;		DefaultPollingDelay = 60 * time.Second
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DefaultPollingDuration is a reasonable total polling duration.
0000000000000000000000000000000000000000;;		DefaultPollingDuration = 15 * time.Minute
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DefaultRetryAttempts is number of attempts for retry status codes (5xx).
0000000000000000000000000000000000000000;;		DefaultRetryAttempts = 3
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		// defaultUserAgent builds a string containing the Go version, system archityecture and OS,
0000000000000000000000000000000000000000;;		// and the go-autorest version.
0000000000000000000000000000000000000000;;		defaultUserAgent = fmt.Sprintf("Go/%s (%s-%s) go-autorest/%s",
0000000000000000000000000000000000000000;;			runtime.Version(),
0000000000000000000000000000000000000000;;			runtime.GOARCH,
0000000000000000000000000000000000000000;;			runtime.GOOS,
0000000000000000000000000000000000000000;;			Version(),
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		statusCodesForRetry = []int{
0000000000000000000000000000000000000000;;			http.StatusRequestTimeout,      // 408
0000000000000000000000000000000000000000;;			http.StatusInternalServerError, // 500
0000000000000000000000000000000000000000;;			http.StatusBadGateway,          // 502
0000000000000000000000000000000000000000;;			http.StatusServiceUnavailable,  // 503
0000000000000000000000000000000000000000;;			http.StatusGatewayTimeout,      // 504
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		requestFormat = `HTTP Request Begin ===================================================
0000000000000000000000000000000000000000;;	%s
0000000000000000000000000000000000000000;;	===================================================== HTTP Request End
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;		responseFormat = `HTTP Response Begin ===================================================
0000000000000000000000000000000000000000;;	%s
0000000000000000000000000000000000000000;;	===================================================== HTTP Response End
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Response serves as the base for all responses from generated clients. It provides access to the
0000000000000000000000000000000000000000;;	// last http.Response.
0000000000000000000000000000000000000000;;	type Response struct {
0000000000000000000000000000000000000000;;		*http.Response `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LoggingInspector implements request and response inspectors that log the full request and
0000000000000000000000000000000000000000;;	// response to a supplied log.
0000000000000000000000000000000000000000;;	type LoggingInspector struct {
0000000000000000000000000000000000000000;;		Logger *log.Logger
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithInspection returns a PrepareDecorator that emits the http.Request to the supplied logger. The
0000000000000000000000000000000000000000;;	// body is restored after being emitted.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: Since it reads the entire Body, this decorator should not be used where body streaming is
0000000000000000000000000000000000000000;;	// important. It is best used to trace JSON or similar body values.
0000000000000000000000000000000000000000;;	func (li LoggingInspector) WithInspection() PrepareDecorator {
0000000000000000000000000000000000000000;;		return func(p Preparer) Preparer {
0000000000000000000000000000000000000000;;			return PreparerFunc(func(r *http.Request) (*http.Request, error) {
0000000000000000000000000000000000000000;;				var body, b bytes.Buffer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				defer r.Body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				r.Body = ioutil.NopCloser(io.TeeReader(r.Body, &body))
0000000000000000000000000000000000000000;;				if err := r.Write(&b); err != nil {
0000000000000000000000000000000000000000;;					return nil, fmt.Errorf("Failed to write response: %v", err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				li.Logger.Printf(requestFormat, b.String())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				r.Body = ioutil.NopCloser(&body)
0000000000000000000000000000000000000000;;				return p.Prepare(r)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ByInspecting returns a RespondDecorator that emits the http.Response to the supplied logger. The
0000000000000000000000000000000000000000;;	// body is restored after being emitted.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: Since it reads the entire Body, this decorator should not be used where body streaming is
0000000000000000000000000000000000000000;;	// important. It is best used to trace JSON or similar body values.
0000000000000000000000000000000000000000;;	func (li LoggingInspector) ByInspecting() RespondDecorator {
0000000000000000000000000000000000000000;;		return func(r Responder) Responder {
0000000000000000000000000000000000000000;;			return ResponderFunc(func(resp *http.Response) error {
0000000000000000000000000000000000000000;;				var body, b bytes.Buffer
0000000000000000000000000000000000000000;;				defer resp.Body.Close()
0000000000000000000000000000000000000000;;				resp.Body = ioutil.NopCloser(io.TeeReader(resp.Body, &body))
0000000000000000000000000000000000000000;;				if err := resp.Write(&b); err != nil {
0000000000000000000000000000000000000000;;					return fmt.Errorf("Failed to write response: %v", err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				li.Logger.Printf(responseFormat, b.String())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				resp.Body = ioutil.NopCloser(&body)
0000000000000000000000000000000000000000;;				return r.Respond(resp)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Client is the base for autorest generated clients. It provides default, "do nothing"
0000000000000000000000000000000000000000;;	// implementations of an Authorizer, RequestInspector, and ResponseInspector. It also returns the
0000000000000000000000000000000000000000;;	// standard, undecorated http.Client as a default Sender.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Generated clients should also use Error (see NewError and NewErrorWithError) for errors and
0000000000000000000000000000000000000000;;	// return responses that compose with Response.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Most customization of generated clients is best achieved by supplying a custom Authorizer, custom
0000000000000000000000000000000000000000;;	// RequestInspector, and / or custom ResponseInspector. Users may log requests, implement circuit
0000000000000000000000000000000000000000;;	// breakers (see https://msdn.microsoft.com/en-us/library/dn589784.aspx) or otherwise influence
0000000000000000000000000000000000000000;;	// sending the request by providing a decorated Sender.
0000000000000000000000000000000000000000;;	type Client struct {
0000000000000000000000000000000000000000;;		Authorizer        Authorizer
0000000000000000000000000000000000000000;;		Sender            Sender
0000000000000000000000000000000000000000;;		RequestInspector  PrepareDecorator
0000000000000000000000000000000000000000;;		ResponseInspector RespondDecorator
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// PollingDelay sets the polling frequency used in absence of a Retry-After HTTP header
0000000000000000000000000000000000000000;;		PollingDelay time.Duration
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// PollingDuration sets the maximum polling time after which an error is returned.
0000000000000000000000000000000000000000;;		PollingDuration time.Duration
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RetryAttempts sets the default number of retry attempts for client.
0000000000000000000000000000000000000000;;		RetryAttempts int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RetryDuration sets the delay duration for retries.
0000000000000000000000000000000000000000;;		RetryDuration time.Duration
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// UserAgent, if not empty, will be set as the HTTP User-Agent header on all requests sent
0000000000000000000000000000000000000000;;		// through the Do method.
0000000000000000000000000000000000000000;;		UserAgent string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Jar http.CookieJar
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewClientWithUserAgent returns an instance of a Client with the UserAgent set to the passed
0000000000000000000000000000000000000000;;	// string.
0000000000000000000000000000000000000000;;	func NewClientWithUserAgent(ua string) Client {
0000000000000000000000000000000000000000;;		c := Client{
0000000000000000000000000000000000000000;;			PollingDelay:    DefaultPollingDelay,
0000000000000000000000000000000000000000;;			PollingDuration: DefaultPollingDuration,
0000000000000000000000000000000000000000;;			RetryAttempts:   DefaultRetryAttempts,
0000000000000000000000000000000000000000;;			RetryDuration:   30 * time.Second,
0000000000000000000000000000000000000000;;			UserAgent:       defaultUserAgent,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		c.AddToUserAgent(ua)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddToUserAgent adds an extension to the current user agent
0000000000000000000000000000000000000000;;	func (c *Client) AddToUserAgent(extension string) error {
0000000000000000000000000000000000000000;;		if extension != "" {
0000000000000000000000000000000000000000;;			c.UserAgent = fmt.Sprintf("%s %s", c.UserAgent, extension)
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fmt.Errorf("Extension was empty, User Agent stayed as %s", c.UserAgent)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do implements the Sender interface by invoking the active Sender after applying authorization.
0000000000000000000000000000000000000000;;	// If Sender is not set, it uses a new instance of http.Client. In both cases it will, if UserAgent
0000000000000000000000000000000000000000;;	// is set, apply set the User-Agent header.
0000000000000000000000000000000000000000;;	func (c Client) Do(r *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;		if r.UserAgent() == "" {
0000000000000000000000000000000000000000;;			r, _ = Prepare(r,
0000000000000000000000000000000000000000;;				WithUserAgent(c.UserAgent))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r, err := Prepare(r,
0000000000000000000000000000000000000000;;			c.WithInspection(),
0000000000000000000000000000000000000000;;			c.WithAuthorization())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, NewErrorWithError(err, "autorest/Client", "Do", nil, "Preparing request failed")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		resp, err := SendWithSender(c.sender(), r,
0000000000000000000000000000000000000000;;			DoRetryForStatusCodes(c.RetryAttempts, c.RetryDuration, statusCodesForRetry...))
0000000000000000000000000000000000000000;;		Respond(resp,
0000000000000000000000000000000000000000;;			c.ByInspecting())
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// sender returns the Sender to which to send requests.
0000000000000000000000000000000000000000;;	func (c Client) sender() Sender {
0000000000000000000000000000000000000000;;		if c.Sender == nil {
0000000000000000000000000000000000000000;;			j, _ := cookiejar.New(nil)
0000000000000000000000000000000000000000;;			return &http.Client{Jar: j}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.Sender
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithAuthorization is a convenience method that returns the WithAuthorization PrepareDecorator
0000000000000000000000000000000000000000;;	// from the current Authorizer. If not Authorizer is set, it uses the NullAuthorizer.
0000000000000000000000000000000000000000;;	func (c Client) WithAuthorization() PrepareDecorator {
0000000000000000000000000000000000000000;;		return c.authorizer().WithAuthorization()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// authorizer returns the Authorizer to use.
0000000000000000000000000000000000000000;;	func (c Client) authorizer() Authorizer {
0000000000000000000000000000000000000000;;		if c.Authorizer == nil {
0000000000000000000000000000000000000000;;			return NullAuthorizer{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.Authorizer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithInspection is a convenience method that passes the request to the supplied RequestInspector,
0000000000000000000000000000000000000000;;	// if present, or returns the WithNothing PrepareDecorator otherwise.
0000000000000000000000000000000000000000;;	func (c Client) WithInspection() PrepareDecorator {
0000000000000000000000000000000000000000;;		if c.RequestInspector == nil {
0000000000000000000000000000000000000000;;			return WithNothing()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.RequestInspector
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ByInspecting is a convenience method that passes the response to the supplied ResponseInspector,
0000000000000000000000000000000000000000;;	// if present, or returns the ByIgnoring RespondDecorator otherwise.
0000000000000000000000000000000000000000;;	func (c Client) ByInspecting() RespondDecorator {
0000000000000000000000000000000000000000;;		if c.ResponseInspector == nil {
0000000000000000000000000000000000000000;;			return ByIgnoring()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.ResponseInspector
0000000000000000000000000000000000000000;;	}
