0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Package to provides helpers to ease working with pointer values of marshalled structures.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	package to
6d6afa491b422a1e9d1fe39b10df70e4bf5254bf;;	
0000000000000000000000000000000000000000;;	// String returns a string value for the passed string pointer. It returns the empty string if the
0000000000000000000000000000000000000000;;	// pointer is nil.
0000000000000000000000000000000000000000;;	func String(s *string) string {
0000000000000000000000000000000000000000;;		if s != nil {
0000000000000000000000000000000000000000;;			return *s
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ""
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StringPtr returns a pointer to the passed string.
0000000000000000000000000000000000000000;;	func StringPtr(s string) *string {
0000000000000000000000000000000000000000;;		return &s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StringSlice returns a string slice value for the passed string slice pointer. It returns a nil
0000000000000000000000000000000000000000;;	// slice if the pointer is nil.
0000000000000000000000000000000000000000;;	func StringSlice(s *[]string) []string {
0000000000000000000000000000000000000000;;		if s != nil {
0000000000000000000000000000000000000000;;			return *s
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StringSlicePtr returns a pointer to the passed string slice.
0000000000000000000000000000000000000000;;	func StringSlicePtr(s []string) *[]string {
0000000000000000000000000000000000000000;;		return &s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StringMap returns a map of strings built from the map of string pointers. The empty string is
0000000000000000000000000000000000000000;;	// used for nil pointers.
0000000000000000000000000000000000000000;;	func StringMap(msp map[string]*string) map[string]string {
0000000000000000000000000000000000000000;;		ms := make(map[string]string, len(msp))
0000000000000000000000000000000000000000;;		for k, sp := range msp {
0000000000000000000000000000000000000000;;			if sp != nil {
0000000000000000000000000000000000000000;;				ms[k] = *sp
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				ms[k] = ""
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ms
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StringMapPtr returns a pointer to a map of string pointers built from the passed map of strings.
0000000000000000000000000000000000000000;;	func StringMapPtr(ms map[string]string) *map[string]*string {
0000000000000000000000000000000000000000;;		msp := make(map[string]*string, len(ms))
0000000000000000000000000000000000000000;;		for k, s := range ms {
0000000000000000000000000000000000000000;;			msp[k] = StringPtr(s)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &msp
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Bool returns a bool value for the passed bool pointer. It returns false if the pointer is nil.
0000000000000000000000000000000000000000;;	func Bool(b *bool) bool {
0000000000000000000000000000000000000000;;		if b != nil {
0000000000000000000000000000000000000000;;			return *b
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BoolPtr returns a pointer to the passed bool.
0000000000000000000000000000000000000000;;	func BoolPtr(b bool) *bool {
0000000000000000000000000000000000000000;;		return &b
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int returns an int value for the passed int pointer. It returns 0 if the pointer is nil.
0000000000000000000000000000000000000000;;	func Int(i *int) int {
0000000000000000000000000000000000000000;;		if i != nil {
0000000000000000000000000000000000000000;;			return *i
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IntPtr returns a pointer to the passed int.
0000000000000000000000000000000000000000;;	func IntPtr(i int) *int {
0000000000000000000000000000000000000000;;		return &i
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int32 returns an int value for the passed int pointer. It returns 0 if the pointer is nil.
0000000000000000000000000000000000000000;;	func Int32(i *int32) int32 {
0000000000000000000000000000000000000000;;		if i != nil {
0000000000000000000000000000000000000000;;			return *i
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int32Ptr returns a pointer to the passed int32.
0000000000000000000000000000000000000000;;	func Int32Ptr(i int32) *int32 {
0000000000000000000000000000000000000000;;		return &i
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int64 returns an int value for the passed int pointer. It returns 0 if the pointer is nil.
0000000000000000000000000000000000000000;;	func Int64(i *int64) int64 {
0000000000000000000000000000000000000000;;		if i != nil {
0000000000000000000000000000000000000000;;			return *i
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int64Ptr returns a pointer to the passed int64.
0000000000000000000000000000000000000000;;	func Int64Ptr(i int64) *int64 {
0000000000000000000000000000000000000000;;		return &i
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Float32 returns an int value for the passed int pointer. It returns 0.0 if the pointer is nil.
0000000000000000000000000000000000000000;;	func Float32(i *float32) float32 {
0000000000000000000000000000000000000000;;		if i != nil {
0000000000000000000000000000000000000000;;			return *i
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return 0.0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Float32Ptr returns a pointer to the passed float32.
0000000000000000000000000000000000000000;;	func Float32Ptr(i float32) *float32 {
0000000000000000000000000000000000000000;;		return &i
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Float64 returns an int value for the passed int pointer. It returns 0.0 if the pointer is nil.
0000000000000000000000000000000000000000;;	func Float64(i *float64) float64 {
0000000000000000000000000000000000000000;;		if i != nil {
0000000000000000000000000000000000000000;;			return *i
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return 0.0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Float64Ptr returns a pointer to the passed float64.
0000000000000000000000000000000000000000;;	func Float64Ptr(i float64) *float64 {
0000000000000000000000000000000000000000;;		return &i
0000000000000000000000000000000000000000;;	}
