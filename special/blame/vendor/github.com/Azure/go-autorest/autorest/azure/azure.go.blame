0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Package azure provides Azure-specific implementations used with AutoRest.
6d6afa491b422a1e9d1fe39b10df70e4bf5254bf;;	
0000000000000000000000000000000000000000;;	See the included examples for more detail.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	package azure
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/Azure/go-autorest/autorest"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// HeaderClientID is the Azure extension header to set a user-specified request ID.
0000000000000000000000000000000000000000;;		HeaderClientID = "x-ms-client-request-id"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// HeaderReturnClientID is the Azure extension header to set if the user-specified request ID
0000000000000000000000000000000000000000;;		// should be included in the response.
0000000000000000000000000000000000000000;;		HeaderReturnClientID = "x-ms-return-client-request-id"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// HeaderRequestID is the Azure extension header of the service generated request ID returned
0000000000000000000000000000000000000000;;		// in the response.
0000000000000000000000000000000000000000;;		HeaderRequestID = "x-ms-request-id"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ServiceError encapsulates the error response from an Azure service.
0000000000000000000000000000000000000000;;	type ServiceError struct {
0000000000000000000000000000000000000000;;		Code    string         `json:"code"`
0000000000000000000000000000000000000000;;		Message string         `json:"message"`
0000000000000000000000000000000000000000;;		Details *[]interface{} `json:"details"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (se ServiceError) Error() string {
0000000000000000000000000000000000000000;;		if se.Details != nil {
0000000000000000000000000000000000000000;;			d, err := json.Marshal(*(se.Details))
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return fmt.Sprintf("Code=%q Message=%q Details=%v", se.Code, se.Message, *se.Details)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return fmt.Sprintf("Code=%q Message=%q Details=%v", se.Code, se.Message, string(d))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fmt.Sprintf("Code=%q Message=%q", se.Code, se.Message)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RequestError describes an error response returned by Azure service.
0000000000000000000000000000000000000000;;	type RequestError struct {
0000000000000000000000000000000000000000;;		autorest.DetailedError
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The error returned by the Azure service.
0000000000000000000000000000000000000000;;		ServiceError *ServiceError `json:"error"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The request id (from the x-ms-request-id-header) of the request.
0000000000000000000000000000000000000000;;		RequestID string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Error returns a human-friendly error message from service error.
0000000000000000000000000000000000000000;;	func (e RequestError) Error() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("autorest/azure: Service returned an error. Status=%v %v",
0000000000000000000000000000000000000000;;			e.StatusCode, e.ServiceError)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsAzureError returns true if the passed error is an Azure Service error; false otherwise.
0000000000000000000000000000000000000000;;	func IsAzureError(e error) bool {
0000000000000000000000000000000000000000;;		_, ok := e.(*RequestError)
0000000000000000000000000000000000000000;;		return ok
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewErrorWithError creates a new Error conforming object from the
0000000000000000000000000000000000000000;;	// passed packageType, method, statusCode of the given resp (UndefinedStatusCode
0000000000000000000000000000000000000000;;	// if resp is nil), message, and original error. message is treated as a format
0000000000000000000000000000000000000000;;	// string to which the optional args apply.
0000000000000000000000000000000000000000;;	func NewErrorWithError(original error, packageType string, method string, resp *http.Response, message string, args ...interface{}) RequestError {
0000000000000000000000000000000000000000;;		if v, ok := original.(*RequestError); ok {
0000000000000000000000000000000000000000;;			return *v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		statusCode := autorest.UndefinedStatusCode
0000000000000000000000000000000000000000;;		if resp != nil {
0000000000000000000000000000000000000000;;			statusCode = resp.StatusCode
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return RequestError{
0000000000000000000000000000000000000000;;			DetailedError: autorest.DetailedError{
0000000000000000000000000000000000000000;;				Original:    original,
0000000000000000000000000000000000000000;;				PackageType: packageType,
0000000000000000000000000000000000000000;;				Method:      method,
0000000000000000000000000000000000000000;;				StatusCode:  statusCode,
0000000000000000000000000000000000000000;;				Message:     fmt.Sprintf(message, args...),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithReturningClientID returns a PrepareDecorator that adds an HTTP extension header of
0000000000000000000000000000000000000000;;	// x-ms-client-request-id whose value is the passed, undecorated UUID (e.g.,
0000000000000000000000000000000000000000;;	// "0F39878C-5F76-4DB8-A25D-61D2C193C3CA"). It also sets the x-ms-return-client-request-id
0000000000000000000000000000000000000000;;	// header to true such that UUID accompanies the http.Response.
0000000000000000000000000000000000000000;;	func WithReturningClientID(uuid string) autorest.PrepareDecorator {
0000000000000000000000000000000000000000;;		preparer := autorest.CreatePreparer(
0000000000000000000000000000000000000000;;			WithClientID(uuid),
0000000000000000000000000000000000000000;;			WithReturnClientID(true))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return func(p autorest.Preparer) autorest.Preparer {
0000000000000000000000000000000000000000;;			return autorest.PreparerFunc(func(r *http.Request) (*http.Request, error) {
0000000000000000000000000000000000000000;;				r, err := p.Prepare(r)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return r, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return preparer.Prepare(r)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithClientID returns a PrepareDecorator that adds an HTTP extension header of
0000000000000000000000000000000000000000;;	// x-ms-client-request-id whose value is passed, undecorated UUID (e.g.,
0000000000000000000000000000000000000000;;	// "0F39878C-5F76-4DB8-A25D-61D2C193C3CA").
0000000000000000000000000000000000000000;;	func WithClientID(uuid string) autorest.PrepareDecorator {
0000000000000000000000000000000000000000;;		return autorest.WithHeader(HeaderClientID, uuid)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithReturnClientID returns a PrepareDecorator that adds an HTTP extension header of
0000000000000000000000000000000000000000;;	// x-ms-return-client-request-id whose boolean value indicates if the value of the
0000000000000000000000000000000000000000;;	// x-ms-client-request-id header should be included in the http.Response.
0000000000000000000000000000000000000000;;	func WithReturnClientID(b bool) autorest.PrepareDecorator {
0000000000000000000000000000000000000000;;		return autorest.WithHeader(HeaderReturnClientID, strconv.FormatBool(b))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtractClientID extracts the client identifier from the x-ms-client-request-id header set on the
0000000000000000000000000000000000000000;;	// http.Request sent to the service (and returned in the http.Response)
0000000000000000000000000000000000000000;;	func ExtractClientID(resp *http.Response) string {
0000000000000000000000000000000000000000;;		return autorest.ExtractHeaderValue(HeaderClientID, resp)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtractRequestID extracts the Azure server generated request identifier from the
0000000000000000000000000000000000000000;;	// x-ms-request-id header.
0000000000000000000000000000000000000000;;	func ExtractRequestID(resp *http.Response) string {
0000000000000000000000000000000000000000;;		return autorest.ExtractHeaderValue(HeaderRequestID, resp)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithErrorUnlessStatusCode returns a RespondDecorator that emits an
0000000000000000000000000000000000000000;;	// azure.RequestError by reading the response body unless the response HTTP status code
0000000000000000000000000000000000000000;;	// is among the set passed.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If there is a chance service may return responses other than the Azure error
0000000000000000000000000000000000000000;;	// format and the response cannot be parsed into an error, a decoding error will
0000000000000000000000000000000000000000;;	// be returned containing the response body. In any case, the Responder will
0000000000000000000000000000000000000000;;	// return an error if the status code is not satisfied.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If this Responder returns an error, the response body will be replaced with
0000000000000000000000000000000000000000;;	// an in-memory reader, which needs no further closing.
0000000000000000000000000000000000000000;;	func WithErrorUnlessStatusCode(codes ...int) autorest.RespondDecorator {
0000000000000000000000000000000000000000;;		return func(r autorest.Responder) autorest.Responder {
0000000000000000000000000000000000000000;;			return autorest.ResponderFunc(func(resp *http.Response) error {
0000000000000000000000000000000000000000;;				err := r.Respond(resp)
0000000000000000000000000000000000000000;;				if err == nil && !autorest.ResponseHasStatusCode(resp, codes...) {
0000000000000000000000000000000000000000;;					var e RequestError
0000000000000000000000000000000000000000;;					defer resp.Body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					// Copy and replace the Body in case it does not contain an error object.
0000000000000000000000000000000000000000;;					// This will leave the Body available to the caller.
0000000000000000000000000000000000000000;;					b, decodeErr := autorest.CopyAndDecode(autorest.EncodedAsJSON, resp.Body, &e)
0000000000000000000000000000000000000000;;					resp.Body = ioutil.NopCloser(&b)
0000000000000000000000000000000000000000;;					if decodeErr != nil {
0000000000000000000000000000000000000000;;						return fmt.Errorf("autorest/azure: error response cannot be parsed: %q error: %v", b.String(), decodeErr)
0000000000000000000000000000000000000000;;					} else if e.ServiceError == nil {
0000000000000000000000000000000000000000;;						e.ServiceError = &ServiceError{Code: "Unknown", Message: "Unknown service error"}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					e.RequestID = ExtractRequestID(resp)
0000000000000000000000000000000000000000;;					if e.StatusCode == nil {
0000000000000000000000000000000000000000;;						e.StatusCode = resp.StatusCode
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					err = &e
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
