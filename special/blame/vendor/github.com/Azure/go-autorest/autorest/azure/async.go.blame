0000000000000000000000000000000000000000;;	package azure
6d6afa491b422a1e9d1fe39b10df70e4bf5254bf;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/Azure/go-autorest/autorest"
0000000000000000000000000000000000000000;;		"github.com/Azure/go-autorest/autorest/date"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		headerAsyncOperation = "Azure-AsyncOperation"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		operationInProgress string = "InProgress"
0000000000000000000000000000000000000000;;		operationCanceled   string = "Canceled"
0000000000000000000000000000000000000000;;		operationFailed     string = "Failed"
0000000000000000000000000000000000000000;;		operationSucceeded  string = "Succeeded"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DoPollForAsynchronous returns a SendDecorator that polls if the http.Response is for an Azure
0000000000000000000000000000000000000000;;	// long-running operation. It will delay between requests for the duration specified in the
0000000000000000000000000000000000000000;;	// RetryAfter header or, if the header is absent, the passed delay. Polling may be canceled by
0000000000000000000000000000000000000000;;	// closing the optional channel on the http.Request.
0000000000000000000000000000000000000000;;	func DoPollForAsynchronous(delay time.Duration) autorest.SendDecorator {
0000000000000000000000000000000000000000;;		return func(s autorest.Sender) autorest.Sender {
0000000000000000000000000000000000000000;;			return autorest.SenderFunc(func(r *http.Request) (resp *http.Response, err error) {
0000000000000000000000000000000000000000;;				resp, err = s.Do(r)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return resp, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				pollingCodes := []int{http.StatusAccepted, http.StatusCreated, http.StatusOK}
0000000000000000000000000000000000000000;;				if !autorest.ResponseHasStatusCode(resp, pollingCodes...) {
0000000000000000000000000000000000000000;;					return resp, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				ps := pollingState{}
0000000000000000000000000000000000000000;;				for err == nil {
0000000000000000000000000000000000000000;;					err = updatePollingState(resp, &ps)
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						break
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if ps.hasTerminated() {
0000000000000000000000000000000000000000;;						if !ps.hasSucceeded() {
0000000000000000000000000000000000000000;;							err = ps
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						break
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					r, err = newPollingRequest(resp, ps)
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						return resp, err
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					delay = autorest.GetRetryAfter(resp, delay)
0000000000000000000000000000000000000000;;					resp, err = autorest.SendWithSender(s, r,
0000000000000000000000000000000000000000;;						autorest.AfterDelay(delay))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				return resp, err
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getAsyncOperation(resp *http.Response) string {
0000000000000000000000000000000000000000;;		return resp.Header.Get(http.CanonicalHeaderKey(headerAsyncOperation))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func hasSucceeded(state string) bool {
0000000000000000000000000000000000000000;;		return state == operationSucceeded
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func hasTerminated(state string) bool {
0000000000000000000000000000000000000000;;		switch state {
0000000000000000000000000000000000000000;;		case operationCanceled, operationFailed, operationSucceeded:
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func hasFailed(state string) bool {
0000000000000000000000000000000000000000;;		return state == operationFailed
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type provisioningTracker interface {
0000000000000000000000000000000000000000;;		state() string
0000000000000000000000000000000000000000;;		hasSucceeded() bool
0000000000000000000000000000000000000000;;		hasTerminated() bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type operationResource struct {
0000000000000000000000000000000000000000;;		// Note:
0000000000000000000000000000000000000000;;		// 	The specification states services should return the "id" field. However some return it as
0000000000000000000000000000000000000000;;		// 	"operationId".
0000000000000000000000000000000000000000;;		ID              string                 `json:"id"`
0000000000000000000000000000000000000000;;		OperationID     string                 `json:"operationId"`
0000000000000000000000000000000000000000;;		Name            string                 `json:"name"`
0000000000000000000000000000000000000000;;		Status          string                 `json:"status"`
0000000000000000000000000000000000000000;;		Properties      map[string]interface{} `json:"properties"`
0000000000000000000000000000000000000000;;		OperationError  ServiceError           `json:"error"`
0000000000000000000000000000000000000000;;		StartTime       date.Time              `json:"startTime"`
0000000000000000000000000000000000000000;;		EndTime         date.Time              `json:"endTime"`
0000000000000000000000000000000000000000;;		PercentComplete float64                `json:"percentComplete"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (or operationResource) state() string {
0000000000000000000000000000000000000000;;		return or.Status
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (or operationResource) hasSucceeded() bool {
0000000000000000000000000000000000000000;;		return hasSucceeded(or.state())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (or operationResource) hasTerminated() bool {
0000000000000000000000000000000000000000;;		return hasTerminated(or.state())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type provisioningProperties struct {
0000000000000000000000000000000000000000;;		ProvisioningState string `json:"provisioningState"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type provisioningStatus struct {
0000000000000000000000000000000000000000;;		Properties        provisioningProperties `json:"properties,omitempty"`
0000000000000000000000000000000000000000;;		ProvisioningError ServiceError           `json:"error,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ps provisioningStatus) state() string {
0000000000000000000000000000000000000000;;		return ps.Properties.ProvisioningState
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ps provisioningStatus) hasSucceeded() bool {
0000000000000000000000000000000000000000;;		return hasSucceeded(ps.state())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ps provisioningStatus) hasTerminated() bool {
0000000000000000000000000000000000000000;;		return hasTerminated(ps.state())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ps provisioningStatus) hasProvisioningError() bool {
0000000000000000000000000000000000000000;;		return ps.ProvisioningError != ServiceError{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type pollingResponseFormat string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		usesOperationResponse  pollingResponseFormat = "OperationResponse"
0000000000000000000000000000000000000000;;		usesProvisioningStatus pollingResponseFormat = "ProvisioningStatus"
0000000000000000000000000000000000000000;;		formatIsUnknown        pollingResponseFormat = ""
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type pollingState struct {
0000000000000000000000000000000000000000;;		responseFormat pollingResponseFormat
0000000000000000000000000000000000000000;;		uri            string
0000000000000000000000000000000000000000;;		state          string
0000000000000000000000000000000000000000;;		code           string
0000000000000000000000000000000000000000;;		message        string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ps pollingState) hasSucceeded() bool {
0000000000000000000000000000000000000000;;		return hasSucceeded(ps.state)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ps pollingState) hasTerminated() bool {
0000000000000000000000000000000000000000;;		return hasTerminated(ps.state)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ps pollingState) hasFailed() bool {
0000000000000000000000000000000000000000;;		return hasFailed(ps.state)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ps pollingState) Error() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("Long running operation terminated with status '%s': Code=%q Message=%q", ps.state, ps.code, ps.message)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//	updatePollingState maps the operation status -- retrieved from either a provisioningState
0000000000000000000000000000000000000000;;	// 	field, the status field of an OperationResource, or inferred from the HTTP status code --
0000000000000000000000000000000000000000;;	// 	into a well-known states. Since the process begins from the initial request, the state
0000000000000000000000000000000000000000;;	//	always comes from either a the provisioningState returned or is inferred from the HTTP
0000000000000000000000000000000000000000;;	//	status code. Subsequent requests will read an Azure OperationResource object if the
0000000000000000000000000000000000000000;;	//	service initially returned the Azure-AsyncOperation header. The responseFormat field notes
0000000000000000000000000000000000000000;;	//	the expected response format.
0000000000000000000000000000000000000000;;	func updatePollingState(resp *http.Response, ps *pollingState) error {
0000000000000000000000000000000000000000;;		// Determine the response shape
0000000000000000000000000000000000000000;;		// -- The first response will always be a provisioningStatus response; only the polling requests,
0000000000000000000000000000000000000000;;		//    depending on the header returned, may be something otherwise.
0000000000000000000000000000000000000000;;		var pt provisioningTracker
0000000000000000000000000000000000000000;;		if ps.responseFormat == usesOperationResponse {
0000000000000000000000000000000000000000;;			pt = &operationResource{}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			pt = &provisioningStatus{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If this is the first request (that is, the polling response shape is unknown), determine how
0000000000000000000000000000000000000000;;		// to poll and what to expect
0000000000000000000000000000000000000000;;		if ps.responseFormat == formatIsUnknown {
0000000000000000000000000000000000000000;;			req := resp.Request
0000000000000000000000000000000000000000;;			if req == nil {
0000000000000000000000000000000000000000;;				return autorest.NewError("azure", "updatePollingState", "Azure Polling Error - Original HTTP request is missing")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Prefer the Azure-AsyncOperation header
0000000000000000000000000000000000000000;;			ps.uri = getAsyncOperation(resp)
0000000000000000000000000000000000000000;;			if ps.uri != "" {
0000000000000000000000000000000000000000;;				ps.responseFormat = usesOperationResponse
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				ps.responseFormat = usesProvisioningStatus
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Else, use the Location header
0000000000000000000000000000000000000000;;			if ps.uri == "" {
0000000000000000000000000000000000000000;;				ps.uri = autorest.GetLocation(resp)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Lastly, requests against an existing resource, use the last request URI
0000000000000000000000000000000000000000;;			if ps.uri == "" {
0000000000000000000000000000000000000000;;				m := strings.ToUpper(req.Method)
0000000000000000000000000000000000000000;;				if m == http.MethodPatch || m == http.MethodPut || m == http.MethodGet {
0000000000000000000000000000000000000000;;					ps.uri = req.URL.String()
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Read and interpret the response (saving the Body in case no polling is necessary)
0000000000000000000000000000000000000000;;		b := &bytes.Buffer{}
0000000000000000000000000000000000000000;;		err := autorest.Respond(resp,
0000000000000000000000000000000000000000;;			autorest.ByCopying(b),
0000000000000000000000000000000000000000;;			autorest.ByUnmarshallingJSON(pt),
0000000000000000000000000000000000000000;;			autorest.ByClosing())
0000000000000000000000000000000000000000;;		resp.Body = ioutil.NopCloser(b)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Interpret the results
0000000000000000000000000000000000000000;;		// -- Terminal states apply regardless
0000000000000000000000000000000000000000;;		// -- Unknown states are per-service inprogress states
0000000000000000000000000000000000000000;;		// -- Otherwise, infer state from HTTP status code
0000000000000000000000000000000000000000;;		if pt.hasTerminated() {
0000000000000000000000000000000000000000;;			ps.state = pt.state()
0000000000000000000000000000000000000000;;		} else if pt.state() != "" {
0000000000000000000000000000000000000000;;			ps.state = operationInProgress
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			switch resp.StatusCode {
0000000000000000000000000000000000000000;;			case http.StatusAccepted:
0000000000000000000000000000000000000000;;				ps.state = operationInProgress
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			case http.StatusNoContent, http.StatusCreated, http.StatusOK:
0000000000000000000000000000000000000000;;				ps.state = operationSucceeded
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				ps.state = operationFailed
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if ps.state == operationInProgress && ps.uri == "" {
0000000000000000000000000000000000000000;;			return autorest.NewError("azure", "updatePollingState", "Azure Polling Error - Unable to obtain polling URI for %s %s", resp.Request.Method, resp.Request.URL)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// For failed operation, check for error code and message in
0000000000000000000000000000000000000000;;		// -- Operation resource
0000000000000000000000000000000000000000;;		// -- Response
0000000000000000000000000000000000000000;;		// -- Otherwise, Unknown
0000000000000000000000000000000000000000;;		if ps.hasFailed() {
0000000000000000000000000000000000000000;;			if ps.responseFormat == usesOperationResponse {
0000000000000000000000000000000000000000;;				or := pt.(*operationResource)
0000000000000000000000000000000000000000;;				ps.code = or.OperationError.Code
0000000000000000000000000000000000000000;;				ps.message = or.OperationError.Message
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				p := pt.(*provisioningStatus)
0000000000000000000000000000000000000000;;				if p.hasProvisioningError() {
0000000000000000000000000000000000000000;;					ps.code = p.ProvisioningError.Code
0000000000000000000000000000000000000000;;					ps.message = p.ProvisioningError.Message
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					ps.code = "Unknown"
0000000000000000000000000000000000000000;;					ps.message = "None"
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newPollingRequest(resp *http.Response, ps pollingState) (*http.Request, error) {
0000000000000000000000000000000000000000;;		req := resp.Request
0000000000000000000000000000000000000000;;		if req == nil {
0000000000000000000000000000000000000000;;			return nil, autorest.NewError("azure", "newPollingRequest", "Azure Polling Error - Original HTTP request is missing")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		reqPoll, err := autorest.Prepare(&http.Request{Cancel: req.Cancel},
0000000000000000000000000000000000000000;;			autorest.AsGet(),
0000000000000000000000000000000000000000;;			autorest.WithBaseURL(ps.uri))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, autorest.NewErrorWithError(err, "azure", "newPollingRequest", nil, "Failure creating poll request to %s", ps.uri)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return reqPoll, nil
0000000000000000000000000000000000000000;;	}
