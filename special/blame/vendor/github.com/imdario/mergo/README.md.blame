0000000000000000000000000000000000000000;;	# Mergo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	A helper to merge structs and maps in Golang. Useful for configuration default values, avoiding messy if-statements.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Also a lovely [comune](http://en.wikipedia.org/wiki/Mergo) (municipality) in the Province of Ancona in the Italian region Marche.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	![Mergo dall'alto](http://www.comune.mergo.an.it/Siti/Mergo/Immagini/Foto/mergo_dall_alto.jpg)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Status
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	It is ready for production use. It works fine although it may use more of testing. Here some projects in the wild using Mergo:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	- [EagerIO/Stout](https://github.com/EagerIO/Stout)
0000000000000000000000000000000000000000;;	- [lynndylanhurley/defsynth-api](https://github.com/lynndylanhurley/defsynth-api)
0000000000000000000000000000000000000000;;	- [russross/canvasassignments](https://github.com/russross/canvasassignments)
0000000000000000000000000000000000000000;;	- [rdegges/cryptly-api](https://github.com/rdegges/cryptly-api)
0000000000000000000000000000000000000000;;	- [casualjim/exeggutor](https://github.com/casualjim/exeggutor)
0000000000000000000000000000000000000000;;	- [divshot/gitling](https://github.com/divshot/gitling)
0000000000000000000000000000000000000000;;	- [RWJMurphy/gorl](https://github.com/RWJMurphy/gorl)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	[![Build Status][1]][2]
0000000000000000000000000000000000000000;;	[![GoDoc](https://godoc.org/github.com/imdario/mergo?status.svg)](https://godoc.org/github.com/imdario/mergo)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	[1]: https://travis-ci.org/imdario/mergo.png
0000000000000000000000000000000000000000;;	[2]: https://travis-ci.org/imdario/mergo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Installation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    go get github.com/imdario/mergo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    // use in your .go code
0000000000000000000000000000000000000000;;	    import (
0000000000000000000000000000000000000000;;	        "github.com/imdario/mergo"
0000000000000000000000000000000000000000;;	    )
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Usage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	You can only merge same-type structs with exported fields initialized as zero value of their type and same-types maps. Mergo won't merge unexported (private) fields but will do recursively any exported one. Also maps will be merged recursively except for structs inside maps (because they are not addressable using Go reflection).
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    if err := mergo.Merge(&dst, src); err != nil {
0000000000000000000000000000000000000000;;	        // ...
0000000000000000000000000000000000000000;;	    }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Additionally, you can map a map[string]interface{} to a struct (and otherwise, from struct to map), following the same restrictions as in Merge(). Keys are capitalized to find each corresponding exported field.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    if err := mergo.Map(&dst, srcMap); err != nil {
0000000000000000000000000000000000000000;;	        // ...
0000000000000000000000000000000000000000;;	    }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Warning: if you map a struct to map, it won't do it recursively. Don't expect Mergo to map struct members of your struct as map[string]interface{}. They will be just assigned as values.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	More information and examples in [godoc documentation](http://godoc.org/github.com/imdario/mergo).
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Note: if test are failing due missing package, please execute:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    go get gopkg.in/yaml.v1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Contact me
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	If I can help you, you have an idea or you are using Mergo in your projects, don't hesitate to drop me a line (or a pull request): [@im_dario](https://twitter.com/im_dario)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## About
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Written by [Dario Castañé](http://dario.im).
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## License
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	[BSD 3-Clause](http://opensource.org/licenses/BSD-3-Clause) license, as [Go language](http://golang.org/LICENSE).
