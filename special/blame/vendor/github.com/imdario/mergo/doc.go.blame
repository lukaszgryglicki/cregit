0000000000000000000000000000000000000000;;	// Copyright 2013 Dario Castañé. All rights reserved.
0000000000000000000000000000000000000000;;	// Copyright 2009 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
383101117971b41477d8721be12d3ae8a8a46839;Godeps/_workspace/src/github.com/imdario/mergo/doc.go[Godeps/_workspace/src/github.com/imdario/mergo/doc.go][vendor/github.com/imdario/mergo/doc.go];	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Package mergo merges same-type structs and maps by setting default values in zero-value fields.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Mergo won't merge unexported (private) fields but will do recursively any exported one. It also won't merge structs inside maps (because they are not addressable using Go reflection).
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Usage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	From my own work-in-progress project:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		type networkConfig struct {
0000000000000000000000000000000000000000;;			Protocol string
0000000000000000000000000000000000000000;;			Address string
0000000000000000000000000000000000000000;;			ServerType string `json: "server_type"`
0000000000000000000000000000000000000000;;			Port uint16
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		type FssnConfig struct {
0000000000000000000000000000000000000000;;			Network networkConfig
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var fssnDefault = FssnConfig {
0000000000000000000000000000000000000000;;			networkConfig {
0000000000000000000000000000000000000000;;				"tcp",
0000000000000000000000000000000000000000;;				"127.0.0.1",
0000000000000000000000000000000000000000;;				"http",
0000000000000000000000000000000000000000;;				31560,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Inside a function [...]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := mergo.Merge(&config, fssnDefault); err != nil {
0000000000000000000000000000000000000000;;			log.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// More code [...]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	package mergo
