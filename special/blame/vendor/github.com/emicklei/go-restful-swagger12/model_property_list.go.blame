0000000000000000000000000000000000000000;;	package swagger
d01e55d9652b2652b786e7466a677f16e78008b9;Godeps/_workspace/src/github.com/emicklei/go-restful/swagger/model_property_list.go[Godeps/_workspace/src/github.com/emicklei/go-restful/swagger/model_property_list.go][vendor/github.com/emicklei/go-restful-swagger12/model_property_list.go];	
0000000000000000000000000000000000000000;;	// Copyright 2015 Ernest Micklei. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a license
0000000000000000000000000000000000000000;;	// that can be found in the LICENSE file.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NamedModelProperty associates a name to a ModelProperty
0000000000000000000000000000000000000000;;	type NamedModelProperty struct {
0000000000000000000000000000000000000000;;		Name     string
0000000000000000000000000000000000000000;;		Property ModelProperty
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ModelPropertyList encapsulates a list of NamedModelProperty (association)
0000000000000000000000000000000000000000;;	type ModelPropertyList struct {
0000000000000000000000000000000000000000;;		List []NamedModelProperty
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// At returns the ModelPropety by its name unless absent, then ok is false
0000000000000000000000000000000000000000;;	func (l *ModelPropertyList) At(name string) (p ModelProperty, ok bool) {
0000000000000000000000000000000000000000;;		for _, each := range l.List {
0000000000000000000000000000000000000000;;			if each.Name == name {
0000000000000000000000000000000000000000;;				return each.Property, true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return p, false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Put adds or replaces a ModelProperty with this name
0000000000000000000000000000000000000000;;	func (l *ModelPropertyList) Put(name string, prop ModelProperty) {
0000000000000000000000000000000000000000;;		// maybe replace existing
0000000000000000000000000000000000000000;;		for i, each := range l.List {
0000000000000000000000000000000000000000;;			if each.Name == name {
0000000000000000000000000000000000000000;;				// replace
0000000000000000000000000000000000000000;;				l.List[i] = NamedModelProperty{Name: name, Property: prop}
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// add
0000000000000000000000000000000000000000;;		l.List = append(l.List, NamedModelProperty{Name: name, Property: prop})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do enumerates all the properties, each with its assigned name
0000000000000000000000000000000000000000;;	func (l *ModelPropertyList) Do(block func(name string, value ModelProperty)) {
0000000000000000000000000000000000000000;;		for _, each := range l.List {
0000000000000000000000000000000000000000;;			block(each.Name, each.Property)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalJSON writes the ModelPropertyList as if it was a map[string]ModelProperty
0000000000000000000000000000000000000000;;	func (l ModelPropertyList) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		var buf bytes.Buffer
0000000000000000000000000000000000000000;;		encoder := json.NewEncoder(&buf)
0000000000000000000000000000000000000000;;		buf.WriteString("{\n")
0000000000000000000000000000000000000000;;		for i, each := range l.List {
0000000000000000000000000000000000000000;;			buf.WriteString("\"")
0000000000000000000000000000000000000000;;			buf.WriteString(each.Name)
0000000000000000000000000000000000000000;;			buf.WriteString("\": ")
0000000000000000000000000000000000000000;;			encoder.Encode(each.Property)
0000000000000000000000000000000000000000;;			if i < len(l.List)-1 {
0000000000000000000000000000000000000000;;				buf.WriteString(",\n")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		buf.WriteString("}")
0000000000000000000000000000000000000000;;		return buf.Bytes(), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalJSON reads back a ModelPropertyList. This is an expensive operation.
0000000000000000000000000000000000000000;;	func (l *ModelPropertyList) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		raw := map[string]interface{}{}
0000000000000000000000000000000000000000;;		json.NewDecoder(bytes.NewReader(data)).Decode(&raw)
0000000000000000000000000000000000000000;;		for k, v := range raw {
0000000000000000000000000000000000000000;;			// produces JSON bytes for each value
0000000000000000000000000000000000000000;;			data, err := json.Marshal(v)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			var m ModelProperty
0000000000000000000000000000000000000000;;			json.NewDecoder(bytes.NewReader(data)).Decode(&m)
0000000000000000000000000000000000000000;;			l.Put(k, m)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
