0000000000000000000000000000000000000000;;	package swagger
d01e55d9652b2652b786e7466a677f16e78008b9;Godeps/_workspace/src/github.com/emicklei/go-restful/swagger/api_declaration_list.go[Godeps/_workspace/src/github.com/emicklei/go-restful/swagger/api_declaration_list.go][vendor/github.com/emicklei/go-restful-swagger12/api_declaration_list.go];	
0000000000000000000000000000000000000000;;	// Copyright 2015 Ernest Micklei. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a license
0000000000000000000000000000000000000000;;	// that can be found in the LICENSE file.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApiDeclarationList maintains an ordered list of ApiDeclaration.
0000000000000000000000000000000000000000;;	type ApiDeclarationList struct {
0000000000000000000000000000000000000000;;		List []ApiDeclaration
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// At returns the ApiDeclaration by its path unless absent, then ok is false
0000000000000000000000000000000000000000;;	func (l *ApiDeclarationList) At(path string) (a ApiDeclaration, ok bool) {
0000000000000000000000000000000000000000;;		for _, each := range l.List {
0000000000000000000000000000000000000000;;			if each.ResourcePath == path {
0000000000000000000000000000000000000000;;				return each, true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return a, false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Put adds or replaces a ApiDeclaration with this name
0000000000000000000000000000000000000000;;	func (l *ApiDeclarationList) Put(path string, a ApiDeclaration) {
0000000000000000000000000000000000000000;;		// maybe replace existing
0000000000000000000000000000000000000000;;		for i, each := range l.List {
0000000000000000000000000000000000000000;;			if each.ResourcePath == path {
0000000000000000000000000000000000000000;;				// replace
0000000000000000000000000000000000000000;;				l.List[i] = a
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// add
0000000000000000000000000000000000000000;;		l.List = append(l.List, a)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do enumerates all the properties, each with its assigned name
0000000000000000000000000000000000000000;;	func (l *ApiDeclarationList) Do(block func(path string, decl ApiDeclaration)) {
0000000000000000000000000000000000000000;;		for _, each := range l.List {
0000000000000000000000000000000000000000;;			block(each.ResourcePath, each)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalJSON writes the ModelPropertyList as if it was a map[string]ModelProperty
0000000000000000000000000000000000000000;;	func (l ApiDeclarationList) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		var buf bytes.Buffer
0000000000000000000000000000000000000000;;		encoder := json.NewEncoder(&buf)
0000000000000000000000000000000000000000;;		buf.WriteString("{\n")
0000000000000000000000000000000000000000;;		for i, each := range l.List {
0000000000000000000000000000000000000000;;			buf.WriteString("\"")
0000000000000000000000000000000000000000;;			buf.WriteString(each.ResourcePath)
0000000000000000000000000000000000000000;;			buf.WriteString("\": ")
0000000000000000000000000000000000000000;;			encoder.Encode(each)
0000000000000000000000000000000000000000;;			if i < len(l.List)-1 {
0000000000000000000000000000000000000000;;				buf.WriteString(",\n")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		buf.WriteString("}")
0000000000000000000000000000000000000000;;		return buf.Bytes(), nil
0000000000000000000000000000000000000000;;	}
